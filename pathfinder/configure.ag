#
# The contents of this file are subject to the MonetDB Public
# License Version 1.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of
# the License at http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
#
# Software distributed under the License is distributed on an "AS
# IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
# implied. See the License for the specific language governing
# rights and limitations under the License.
# 
# The Original Code is the ``Pathfinder'' system. The Initial
# Developer of the Original Code is the Database & Information
# Systems Group at the University of Konstanz, Germany. Portions
# created by U Konstanz are Copyright (C) 2000-2004 University
# of Konstanz. All Rights Reserved.
#
# Contributors:
#         Torsten Grust <torsten.grust@uni-konstanz.de>
#         Maurice van Keulen <M.van.Keulen@bigfoot.com>
#         Jens Teubner <jens.teubner@uni-konstanz.de>
#

dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.53)
AC_INIT(loader/pf-shred.c)
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
dnl AH_TOP([#include "monetdb_config.h"])
dnl AH_TOP([#include "sysdefs.h"])
AH_BOTTOM([#include "stddef.h"])

dnl ----------------------
AM_INIT_AUTOMAKE("pathfinder", 0.1, [no-define])
AM_CONFIG_HEADER(pf_config.h:conf/config.h.in)
CONFIG_H=pf_config.h
AC_SUBST(CONFIG_H)

dnl Check for Monet
AM_MONETDB_COMPILER()
if test "x$have_c99" != xyes; then
	AC_MSG_ERROR([Pathfinder requires a C99 compliant C compiler, but your C compiler does not seem to be C99 compliant.])
fi
AM_MONETDB_TOOLS()
AM_MONETDB_OPTIONS()
AM_MONETDB_LIBS()
req_monetdb_ver='4.7.3'
AM_MONETDB_CLIENT($req_monetdb_ver)
if test "x$have_monet" != xyes; then
	AC_MSG_ERROR([Pathfinder requires at least version $req_monetdb_ver of MonetDB, but only version $MONETDBVERS was found.])
fi
req_monetdb_ver='4.99.19'
AM_MONET5($req_monetdb_ver)
AM_CONDITIONAL(MONET5,test "x$have_monet5" = xyes)

AM_PROG_CC_C_O

dnl Pathfinder needs bison (not yacc) and the `locations' feature
dnl coming with bison versions >= 1.33.

if test "x$YACC" != "x"; then    dnl Yacc found on the system?

AC_MSG_CHECKING([for locations feature in bison/yacc])

dnl A tiny input file for bison containing the `%locations' option
cat <<EOF > conftest.y
%locations
%token A
%%
B : A;
%%
EOF

if $YACC conftest.y >/dev/null 2>&1 ; then
  AC_DEFINE(HAVE_LOCATIONS, 1, [Does bison have the `locations' feature?])
  AC_MSG_RESULT(yes)
else
  AC_DEFINE(HAVE_LOCATIONS, 0, [Does bison have the `locations' feature?])
  AC_MSG_RESULT(no)
  YACC=''
  AC_MSG_WARN([Your version of yacc/bison does not provide the `locations'
               feature, coming with bison >= 1.33. You will not be able to
               compile the Pathfinder compiler from the development
               sources.])
fi

fi   dnl Yacc found on the system?


AC_LANG_C

dnl
dnl We support the GNU getopt library (and its features for long option
dnl names) if we find it available. Otherwise we fall back to the standard
dnl Unix unistd.h version.
dnl
dnl Check for standard Unix unistd.h
AC_CHECK_HEADER([unistd.h], [have_unistd="yes"], [have_unistd="no"])

if test x$have_unistd != "xyes"; then
    AC_MSG_ERROR([Pathfinder needs the getopt function to parse command
                 line options. Please check the existence of the header file
                 unistd.h on your system.])
fi

dnl Check for GNU Getopt
AC_CHECK_HEADERS([getopt.h])
AC_CHECK_FUNCS(getopt_long)

dnl Check for stdbool.h
AC_CHECK_HEADERS([stdbool.h])

dnl Check for type bool
AC_CHECK_TYPES(bool)

dnl Check for type socklen_t
AC_CHECK_TYPE(socklen_t, AC_DEFINE(HAVE_SOCKLEN_T, 1, [Define to 1 if the system has the type `socklen_t'.]), , [#include <sys/types.h>
#include <sys/socket.h>])

dnl Check for libgen.h and function basename
AC_CHECK_HEADERS([libgen.h])
AC_CHECK_FUNCS(basename)

dnl Check some sizes
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(void *)


dnl Seems like the compiler on SunOS 5.8 cannot cope with the
dnl __attribute__ specifications that can give compilers additional
dnl hints about a function (style of variable argument list, functions
dnl that never return, etc.)
AC_MSG_CHECKING([if your compiler understands `__attribute__'])

AC_COMPILE_IFELSE(AC_LANG_PROGRAM([[
#include <stdlib.h>

void foo (void) __attribute__ ((noreturn));

void foo (void) { exit (0); }

]],
[[ foo (); ]]
),
[AC_DEFINE([HAVE_FUNCTION_ATTRIBUTES], 1,
  [Does your compiler support function attributes (__attribute__)?])
AC_MSG_RESULT(yes)],
AC_MSG_RESULT(no))

AH_VERBATIM([__attribute__],
[ /* If the compiler does not support function attributes via __attribute__,
     we just define __attribute__(a) to nothing. */
#if HAVE_FUNCTION_ATTRIBUTES != 1
#define __attribute__(a)
#endif
])

dnl [AC_DEFINE([ __attribute__(a) ],,
dnl            [Compiler does not understand __attribute__.])

dnl We use signal handlers to catch segmentation faults and
dnl give helpful messages to the user, if available.
AC_CHECK_HEADERS(signal.h)
AC_TYPE_SIGNAL


dnl The user may enter a location of the libxml2 library on the command line
dnl (with `--with-libxml2=DIR) or disable the libxml2 support.
dnl
dnl AC_ARG_WITH makes the --with-xxx available, then we do some checks and
dnl see if we actually found libxml2.
have_libxml2="auto"
AC_ARG_WITH(libxml2,
    [  --with-libxml2=DIR      libxml2 library is installed in DIR],
    [have_libxml2="$withval"], [have_libxml2="auto"])

save_CPPFLAGS="$CPPFLAGS"
save_LDFLAGS="$LDFLAGS"
if test "x$have_libxml2" != xno; then

    XLIBS=""
    XML2_CONFIG=""
    XPATH="$PATH"
    if test "x$have_libxml2" != xauto; then
	XPATH="$have_libxml2/bin:$XPATH"
	if test -d "$have_libxml2/lib$bits"; then
	    XLIBS="-L$have_libxml2/lib$bits "
	fi
    fi

    AC_PATH_PROG(XML2_CONFIG,xml2-${bits}-config,,$XPATH)
    if test "x$XML2_CONFIG" = x; then
        AC_PATH_PROG(XML2_CONFIG,xml2-config,,$XPATH)
    fi

    if test "x$XML2_CONFIG" != x; then
        LIBXML2_CFLAGS="`$XML2_CONFIG --cflags`"
        LIBXML2_LIBS="$XLIBS`$XML2_CONFIG --libs`"
    fi

    CPPFLAGS="$CPPFLAGS $LIBXML2_CFLAGS"
    LDFLAGS="$LDFLAGS $LIBXML2_LIBS"
    AC_CHECK_HEADER([libxml/parser.h],
                    [AC_CHECK_LIB(xml2, xmlParseDocument,
                                  [have_libxml2="yes"], [have_libxml2="no"])])
fi
LDFLAGS="$save_LDFLAGS"
CPPFLAGS="$save_CPPFLAGS"

if test "x$have_libxml2" != xyes; then
    LIBXML2_CFLAGS=""
    LIBXML2_LIBS=""
    LIBXML2_LDADD=""
    PF_LOADER_PROGRAMS=""
    AC_DEFINE(HAVE_LIBXML2, 0,
              [Do we have the libxml2 library available to support XML Schema?])
    AC_MSG_FAILURE([The libxml2 XML parsing library and/or include files were 
		not found or you have requested to not use it.
                This is required dependence, core components like 
		the XML Schema import functionality depends on it.])
fi

if test "x$have_libxml2" = xyes; then
    LIBXML2_LDADD="-lxml2"
    PF_LOADER_PROGRAMS="pf-shred"
    AC_DEFINE(HAVE_LIBXML2, 1,
         [Do we have the libxml2 library available to support XML Schema?])
    AC_MSG_NOTICE([The following compiler options will be used to integrate
           the libxml2 XML parsing library:
           To find the libxml2 include files: $LIBXML2_CFLAGS
           To find the libxml2 library:       $LIBXML2_LIBS])
fi

dnl Propagate the stuff to the Makefiles
AC_SUBST(LIBXML2_CFLAGS, $LIBXML2_CFLAGS)
AC_SUBST(LIBXML2_LIBS, $LIBXML2_LIBS)
AC_SUBST(LIBXML2_LDADD, $LIBXML2_LDADD)
AC_SUBST(PF_LOADER_PROGRAMS, $PF_LOADER_PROGRAMS)
AM_CONDITIONAL(HAVE_LIBXML2, test x"$have_libxml2" != xno)


dnl See if we have the Hans Boehm garbage collector available
dnl
dnl First allow the user to specify a location on the command line.
dnl Further down see if we find the library and abort if not.
have_gc="auto"
AC_ARG_WITH(gc,
    [  --with-gc=DIR           Boehm garbage collector library is installed in DIR],
    [have_gc="$withval"], [have_gc="auto"])

if test "x$have_gc" != xauto; then
        LIBGC_CFLAGS="-I$have_gc/include"
        LIBGC_LIBS="-L$have_gc/lib"
fi

if test "x$have_gc" = xauto; then
        LIBGC_CFLAGS=""
        LIBGC_LIBS=""
fi

save_CPPFLAGS="$CPPFLAGS"
save_LDFLAGS="$LDFLAGS"
save_LIBS="$LIBS"
CPPFLAGS="$CPPFLAGS $LIBGC_CFLAGS"
LDFLAGS="$LDFLAGS $LIBGC_LIBS"
LIBS=""

dnl If we have the dl and/or the pthread library, use it
dnl (dl and/or pthread are required for the garbage collection
dnl library on some systems.)
LIBGC_LDADD=""
AC_CHECK_LIB(dl, dlopen, [LIBGC_LDADD="$LIBGC_LDADD -ldl"])
AC_CHECK_LIB(pthread, pthread_create, [LIBGC_LDADD="$LIBGC_LDADD -lpthread"])

AC_CHECK_HEADER([gc.h],
    [ dnl See if we can link in the gc library.
      dnl If we have found the dl and/or pthread library as well, also use it.
      dnl If the gc library was not found, clear LIBGC_LDADD.
      AC_CHECK_LIB(gc, GC_malloc,
                   [LIBGC_LDADD="$LIBGC_LDADD -lgc"],
                   [LIBGC_LDADD=""], [$LIBGC_LDADD])],
    [ LIBGC_LDADD=""])


LIBS="$save_LIBS"
LDFLAGS="$save_LDFLAGS"
CPPFLAGS="$save_CPPFLAGS"

if test "x$LIBGC_LDADD" = "x"; then
    AC_MSG_ERROR([Unable to find the Hans Boehm garbage collector.
                  Please go get it from
                  http://www.hpl.hp.com/personal/Hans_Boehm/gc/])
fi

dnl Propagate the variable to the Makefiles
AC_SUBST(LIBGC_CFLAGS, $LIBGC_CFLAGS)
AC_SUBST(LIBGC_LIBS, $LIBGC_LIBS)
AC_SUBST(LIBGC_LDADD, $LIBGC_LDADD)

dnl BerkeleyDB blindly assumes u_long to be defined
AC_CHECK_TYPES(u_long)

dnl The user may enter a location of the BerkeleyDB library on the
dnl command line (with `--with-berkeleydb=DIR) or disable the
dnl BerkeleyDB support.
dnl
dnl AC_ARG_WITH makes the --with-xxx available, then we do some checks and
dnl see if we actually found BerkeleyDB.
dnl
dnl When searching for db.h we need to typedef u_long if the above test
dnl has failed. Otherwise the compiler will report a syntax error.
dnl
dnl Checking for BerkeleyDB is a bit more tricky than other libraries.
dnl The BerkeleyDB distribution knows the `--with-uniquename' option
dnl for its ./configure file that will result in unique names for the
dnl sybols in the compiled libraries. BerkeleyDB's API functions (e.g.
dnl db_create) will then be renamed with a unique suffix (e.g. to
dnl db_create_4001). Any C source file will not see any difference,
dnl as the db.h header file will set the macro db_create to db_create_4001.
dnl The search for the db_create symbol in the library, however, will
dnl fail if that feature has been activated in BerkeleyDB (as is the
dnl case in the Gentoo distribution).
have_berkeleydb="auto"
AC_ARG_WITH(berkeleydb,
    [  --with-berkeleydb=DIR   BerkeleyDB library is installed in DIR],
    [have_berkeleydb="$withval"], [have_berkeleydb="auto"])

save_CPPFLAGS="$CPPFLAGS"
save_LDFLAGS="$LDFLAGS"
if test "x$have_berkeleydb" != xno; then

    if test "x$have_berkeleydb" != xauto; then
        LIBDB_CFLAGS="-I$have_berkeleydb/include"
        LIBDB_LIBS="-L$have_berkeleydb/lib"
    fi

    CPPFLAGS="$CPPFLAGS $LIBDB_CFLAGS"
    LDFLAGS="$LDFLAGS $LIBDB_LIBS -ldb"
    AC_CHECK_HEADER([db.h],
      [AC_MSG_CHECKING([for the BerkeleyDB library])
       AC_TRY_LINK([
#if !HAVE_U_LONG
typedef unsigned long u_long;
#endif /* !HAVE_U_LONG */
#include <db.h>
],
[ (void) db_create ((DB **) 0, (DB_ENV *) 0, (u_int32_t) 0); ],
                        [have_berkeleydb="yes"
                         AC_MSG_RESULT(yes)],
                        [have_berkeleydb="no"
                         AC_MSG_RESULT(no)])],
                    [], [
#if !HAVE_U_LONG
typedef unsigned long u_long;
#endif
                    ])

if test "x$have_berkeleydb" = "xyes"; then

dnl Some BerkeleyDB versions define the `open' function with 6, some with 7
dnl parameters (one for transaction support). Let's see which one we have here.
AC_MSG_CHECKING([for transaction support in BerkeleyDB])
AC_COMPILE_IFELSE(AC_LANG_PROGRAM([[
#if !HAVE_U_LONG
typedef unsigned long u_long;
#endif /* !HAVE_U_LONG */
#include <db.h>
]],
[[ DB *dbp = 0; dbp->open (dbp, 0, "test", 0, DB_BTREE, DB_TRUNCATE, 0600); ]]
),
[AC_DEFINE(BERKELEYDB_HAS_TXN, 1,
           [Does BerkeleyDB have transaction support?])
AC_MSG_RESULT(yes)],[
AC_COMPILE_IFELSE(AC_LANG_PROGRAM([[
#if !HAVE_U_LONG
typedef unsigned long u_long;
#endif /* !HAVE_U_LONG */
#include <db.h>
]],
[[ DB *dbp = 0; dbp->open (dbp, "test", 0, DB_BTREE, DB_TRUNCATE, 0600); ]]
),
[AC_DEFINE(BERKELEYDB_HAS_TXN, 0,
           [Does BerkeleyDB have transaction support?])
AC_MSG_RESULT(no)],
[AC_MSG_WARN([Your BerkeleyDB installation is not usable for Pathfinder.
Duplicate removal feature in pf-shred will be disabled.])
have_berkeleydb='xno'])])

fi   dnl BerkeleyDB library found?
fi   dnl BerkeleyDB requested?

LDFLAGS="$save_LDFLAGS"
CPPFLAGS="$save_CPPFLAGS"

if test "x$have_berkeleydb" != xyes; then
    LIBDB_CFLAGS=""
    LIBDB_LIBS=""
    AC_DEFINE(HAVE_LIBDB, 0, [Do we have the BerkeleyDB library available?])
    AC_MSG_WARN([The BerkeleyDB library was not found on your system or you
                have requested not to use it. This will disable the duplicate
                removal feature in the XML document loader.])
    LIBDB_LDADD=""
fi

if test "x$have_berkeleydb" = xyes; then
    AC_DEFINE(HAVE_LIBDB, 1, [Do we have the BerkeleyDB library available?])
    AC_MSG_NOTICE([The following compiler options will be used to integrate
           the BerkelyDB library:
           To find the BerkeleyDB include files: $LIBDB_CFLAGS
           To find the libdb library:            $LIBDB_LIBS])
    LIBDB_LDADD="-ldb"
fi

dnl Propagate the stuff to the Makefiles
AC_SUBST(LIBDB_CFLAGS, $LIBDB_CFLAGS)
AC_SUBST(LIBDB_LIBS, $LIBDB_LIBS)
AC_SUBST(LIBDB_LDADD, $LIBDB_LDADD)

dnl The Burg code requires strdup(). We test here if strdup() is
dnl available on the system. If not, we will define it ourselves
dnl in burg/main.c
AC_CHECK_HEADERS([string.h], [AC_CHECK_FUNCS([strdup strtok_r])])

AC_CHECK_HEADERS(time.h sys/time.h utime.h sys/utime.h sys/times.h)
AC_HEADER_TIME()
AC_STRUCT_TM()
AC_STRUCT_TIMEZONE()
AC_FUNC_UTIME_NULL()
AC_CHECK_FUNCS(gettimeofday ftime times ctime_r localtime_r)
ctime_r3=yes
AC_MSG_CHECKING(ctime_r3)
AC_TRY_COMPILE([$ac_includes_default
#include <time.h>], 
[char buf[26]; time_t t; ctime_r(&t,buf,26);],
[AC_DEFINE(HAVE_CTIME_R3, 1, [Define if you have ctime_r(time_t*,char *buf,size_t s)])], [ctime_r3=no])
AC_MSG_RESULT($ctime_r3)

dnl  C[XX]FLAGS for our code are stricter than what autoconf can cope with.
CFLAGS="$CFLAGS \$(X_CFLAGS)"
CXXFLAGS="$CXXFLAGS \$(X_CXXFLAGS)"
