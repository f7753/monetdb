@' pf_httpd.mx
@'
@' HTTP server for MonetDB/XQuery
@'
@' Copyright Notice:
@' -----------------
@'
@' The contents of this file are subject to the Pathfinder Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License.  You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/PathfinderLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
@' the License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the Pathfinder system.
@'
@' The Initial Developer of the Original Code is the Database &
@' Information Systems Group at the University of Konstanz, Germany.
@' Portions created by the University of Konstanz are Copyright (C)
@' 2000-2005 University of Konstanz.  All Rights Reserved.
@'

@f pf_httpd
@a Ying Zhang

@t HTTP server for MonetDB/XQuery

@m
.MODULE pf_httpd;

.USE pathfinder;

.COMMAND start_http_server(int port) : void = CMDstart_http_server;
"start HTTP server on port 'port'"

.PRELUDE = pf_httpd_prelude;
.EPILOGUE = pf_httpd_epilogue;

.END pf_httpd;

@mil

PROC pf_httpd_start(int port) : void {
    fork(start_http_server(port));
}
ADDHELP("pf_httpd_start", "zhang", "July 2005",
        "PARAMETERS:\n\
        port to which port the HTTP server should listen (default port: 8080).\n\
        DESCRIPTION:\n\
        start the HTTP server for xquery.",
        "pf_httpd");

PROC pf_httpd_start() : void {
    pf_httpd_start(int(monet_environment.find("pf_httpd_port")));
}
ADDHELP("pf_httpd_start", "zhang", "July 2005",
        "DESCRIPTION:\n\
        start the HTTP server for xquery (default port: 8080).",
        "pf_httpd");

@c
#include "pathfinder.h"

#ifdef _WIN32
#include <winsock.h>
#define snprintf _snprintf
#ifndef __MINGW32__
#pragma comment(lib, "ws2_32")
#endif
#else
#include <sys/types.h>
#include <sys/select.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "shttpd.h"

static int
handle_xquery(struct shttpd_callback_arg *arg)
{
    int n = 0, ret;
    const char *query;
    char **qres = GDKmalloc(sizeof(char *));

    if( (query = shttpd_get_var(arg->connection, "req_xquery")) != NULL ) {
        ret = CMDxquery(qres, "xml", (char*)query);		/* execute XQuery */
        if (ret == GDK_SUCCEED) {
            /* we might want to display the plain XML result
             * instead of having it rendered as HTML...      
             */
            n = snprintf(arg->buf + n, arg->buflen - n, "%s%s",
                    "HTTP/1.1 200 OK\r\n"
                    "Content-Type: text/xml\r\n"
                    "\r\n",
                    *qres);
        } else {
            n = snprintf(arg->buf + n, arg->buflen - n, "%s",
                    "HTTP/1.1 500 Internal server error\r\n"
                    "\r\n");
        } 
    } else {
        n += snprintf(arg->buf + n, arg->buflen - n, "%s",
                "HTTP/1.1 200 OK\r\n"
                "Content-Type: text/html\r\n"
                "\r\n"
                "<html><head><title>"
                "XQuery submit form"
                "</title></head>");

        n += snprintf(arg->buf + n, arg->buflen - n, "%s",
                "<body>"
                "<form method=\"post\">"
                "Enter your XQuery:<br/>"
                "<input type=\"text\" name=\"req_xquery\"/><br/>"
                "<input type=\"submit\" value=\"Execute query\"/>"
                "</form>"
                "</body></html>");
    }
    arg->buf[n] = '\0';
    return (n);
}

void
CMDstart_http_server(int* port)
{
    int sock;

    printf("MonetDB>HTTP server started on port %d\n", *port);

    /* Initialize with specific config file, pass NULL to use default values */
    shttpd_init(NULL);

    /* Register call back function */
    shttpd_register_url("/exec_xquery", &handle_xquery, NULL);

    /* Open listening socket */
    sock = shttpd_open_port(*port);

    /* Serve connections infinitely until someone kills us */
    for(;;){
        shttpd_poll(sock, 200); /* the 2nd parameter is the wait time in milliseconds */
    }
}

bat *
pf_httpd_prelude()
{
    /* Nothing to do here. */
    return NULL;
}

void
pf_httpd_epilogue()
{
    /* Shut down the HTTP server. */
    shttpd_fini();
}
/* vim:set shiftwidth=4 expandtab: */
