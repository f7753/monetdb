vim: ts=4:sw=4:ft=c
@' pf_httpd.mx
@'
@' HTTP server for MonetDB/XQuery
@'
@' Copyright Notice:
@' -----------------
@'
@' The contents of this file are subject to the Pathfinder Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License.  You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/PathfinderLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
@' the License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the Pathfinder system.
@'
@' The Initial Developer of the Original Code is the Database &
@' Information Systems Group at the University of Konstanz, Germany.
@' Portions created by the University of Konstanz are Copyright (C)
@' 2000-2005 University of Konstanz.  All Rights Reserved.
@'

@f pf_httpd
@a Ying Zhang

@t HTTP server for MonetDB/XQuery

@m
.MODULE pf_httpd;

.USE pathfinder;

.COMMAND start_http_server(int port) : void = CMDstart_http_server;
"start HTTP server on port 'port'"

.PRELUDE = pf_httpd_prelude;
.EPILOGUE = pf_httpd_epilogue;

.END pf_httpd;

@mil
module(mapi);

PROC pf_httpd_start(int port) : void {
	fork(start_http_server(port));
}
ADDHELP("pf_httpd_start", "zhang", "July 2005",
"PARAMETERS:\n\
port to which port the HTTP server should listen (default port: 8080).\n\
DESCRIPTION:\n\
start the HTTP server for xquery.",
"pf_httpd");

PROC pf_httpd_start() : void {
	pf_httpd_start(int(monet_environment.find("pf_httpd_port")));
}
ADDHELP("pf_httpd_start", "zhang", "July 2005",
"DESCRIPTION:\n\
start the HTTP server for xquery (default port: 8080).",
"pf_httpd");

@c
#ifdef _WIN32
#include <winsock.h>
#define snprintf _snprintf
#pragma comment(lib, "ws2_32")
#else
#include <sys/types.h>
#include <sys/select.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "pathfinder.h"
#include "shttpd.h"

static int
display_query_results(struct shttpd_callback_arg *arg, const char *results)
{
	int n = 0;
	Stream buf = NULL;

	/* we might want to display the plain XML result *
         * instead of having it rendered as HTML...      */
	n += snprintf(arg->buf + n, arg->buflen - n, "%s",
			"HTTP/1.1 200 OK\r\n"
			"Content-Type: text/xml\r\n"
			"\r\n");
	/* open temp. result stream/file */
	buf = open_rastream(results);
	/* read result from temp. stream/file and write it to output buffer */
	/* TODO: check for buffer overflow! */
    n += stream_read(buf, arg->buf + n, 1, arg->buflen - n);
	/* close temp. result stream/file */
    close_stream(buf);
	return (n);
}

int CMDxquery(char** res, char *mode, char* xquery);
static int
handle_xquery(struct shttpd_callback_arg *arg)
{
	int n = 0;
	const char *query;
	Thread t = THRget(THRgettid());
	Stream in = GDKin;		/* save current GDKin  */
	Stream out = GDKout;	/* save current GDKout */
	Stream buf = NULL;		/* temp. output stream (->file), replacing GDKout */
	char res[64];			/* temp. filename (local in <dbfarm>/<dbname>) */
	char **qres;

	if( (query = shttpd_get_var(arg->connection, "query")) != NULL ){
		snprintf(res, 64, "%d-%d-" LLFMT ".xml", (int)getpid(), THRgettid(), GDKusec());

		buf = open_wastream(res);			/* open temp. output stream/file */
		monetSetChannel(t, in, buf);		/* redirect GDKout to temp. stream/file */
		CMDxquery(qres, "xml",(char*)query);/* run XQuery */
		monetSetChannel(t, in, out);		/* restore original GDKout */
		close_stream(buf);					/* close temp. output stream/file */
		n += display_query_results(arg, res);	/* display result */
		unlink(res);						/* remove temp. output stream/file */
		return n;
	} else {
		n += snprintf(arg->buf + n, arg->buflen - n, "%s",
				"HTTP/1.1 200 OK\r\n"
				"Content-Type: text/html\r\n"
				"\r\n"
				"<html><head><title>"
				"XQuery submit form"
				"</title></head>");
		
		n += snprintf(arg->buf + n, arg->buflen - n, "%s",
				"<body>"
				"<form method=\"get\">"
				"Enter your XQuery:<br/>"
				"<input type=\"text\" name=\"query\"/><br/>"
				"<input type=\"submit\" value=\"Execute query\"/>"
				"</form>"
				"</body></html>");
		return (n);
	}
}

void
CMDstart_http_server(int* port)
{
	int sock;

	printf("MonetDB>HTTP server started on port %d\n", *port);

	/* Initialize with specific config file, pass NULL to use default values */
	shttpd_init(NULL);

	/* Register call back function */
	shttpd_register_url("/", &handle_xquery, NULL);

	/* Open listening socket */
	sock = shttpd_open_port(*port);

	/* Serve connections infinitely until someone kills us */
	for(;;){
		shttpd_poll(sock, 200); /* the 2nd parameter is the wait time in milliseconds */
	}
}

bat *
pf_httpd_prelude()
{
	/* what can we do here? */
	return NULL;
}

void
pf_httpd_epilogue()
{
	/* Shut down the HTTP server */
	shttpd_fini();
}

