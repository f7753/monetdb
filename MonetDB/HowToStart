This document will help you compile and install Monet. Once you have
done that succesfully, refer to doc/www/monet.html for the user 
documentation that will have been generated by then.

Prerequisites:
==============

CVS
	You need to have a working CVS.  For instructions, see
	http://sourceforge.net/docman/?group_id=1 and look under the
	heading CVS Instructions.

Python
	MonetDB uses Python (version 1.5.2 or better) during
	configuration of the software.  See http://www.python.org/ for
	more information.

autoconf/automake/libtool 
	MonetDB uses GNU autoconf, automake, and libtool during
	configuration of the software.  See
	http://www.gnu.org/software/autoconf/,
	http://www.gnu.org/software/automake/, and
	http://www.gnu.org/software/libtool/ for more information.
	Libtool is also used during the build.

disk space
	After downloading, MonetDB takes up about 45 MB of disk
	space; compilation adds another 30 MB.  Testing takes about
	150 MB, and the installation about 10 MB (not including any
	databases).

Getting the Software:
=====================

This command should be done once.  It records a password on the local
machine to be used for all subsequent CVS accesses with this server.

cvs -d:pserver:anonymous@cvs.monetdb.sourceforge.net:/cvsroot/monetdb login

just type RETURN when asked for the password.

Then get the software by using the command:

cvs -d:pserver:anonymous@cvs.monetdb.sourceforge.net:/cvsroot/monetdb login checkout MonetDB

This will create a directory MonetDB in your current working
directory.

Also see http://sourceforge.net/cvs/?group_id=56967 for more
information.

Configure and Make:
===================

In the top-level directory of MonetDB type the command:

./bootstrap

Then in any directory (a new empty directory or in the MonetDB
top-level directory) give the command

.../configure

where ... is replaced with the (absolute or relative) path to the
MonetDB top-level directory. The directory where you execute configure
is the place where all intermediate source and object files are generated.

In the same directory give the command

make install

Targets are placed by default in /usr/local/lib/ and /usr/local/bin/.
You must use configure --prefix=<dir> to choose another target directory
(Use the --help option of configure to find out about configure options).  

On my lightly loaded, dual 1.4 GHz Pentium Linux system, configure takes
about 15 seconds, and make about two and a half minutes.

Make with Microsoft Visual C++ on Windows NT/2K/XP:
===================================================

First, the requirements are different:

- you do *NOT* need autoconf/automake/libtool 

- you need Microsoft Visual C++ 5 or higher
  The compilers and make executables need to be in the PATH of your command shell

- you need bison and flex for win32 (sources)
  See http://www.gnu.org/prep/ftp.html for a GNU FTP mirror site 
  Go to one that suits you and look in gnu/bison/ resp. non-gnu/flex/ directories.
  Compile both and install them in locations that work in your command shell PATH

- you do need to pthreads-win32 (source or pre-compiled) 
  See http://sources.redhat.com/pthreads-win32/ for more information. 
  Adapt the PTHREAD paths in NT/rules.mk to point to your installation location 

Then, open a command shell and type in the top-level directory of MonetDB:

cd NT
make

This will create the Windows-specific makefiles named Makefile.msc (using python), 
and put the config.h into place and create some replacements for Posix include files 
missing in Windows (unistd.h).

make -f Makefile.msc

will then do the compilation job. All make commands (compiling, installing, testing) 
work as normal, if only the -f Makefile.msc is provided as extra parameter. 

Notice that if you do not own Microsoft Visual C, you can still compile on Windows
using the cygnus Posix-emulation environment. See http://sources.redhat.com/cygwin/ 
In that case, you should follow the standard instructions. Alternatively, it might 
be possible to use the free WIN32-GNU compilers (http://www.mingw.org/index.shtml) 
as a drop-in replacement for the Microsoft tools, but we have not tried this yet.


Testing the Build:
==================

If make went successfully, try

make check

This will do a lot of tests, some are unfortunately still expected to
fail, but most should go successfully.  At the end of the output there
is a reference to an HTML file which is created by the test process
which shows the test results.  An explanation of the test results can be
found in XXX--to be filled in.

Testing takes about 150 MB of disk space in the build directory.

Running the tests takes about 7 minutes on my system.

Installing:
===========

Give the command

make install

By default (if no --prefix option was given to configure above), this
will install in /usr/local.  Make sure you have appropriate
privileges.

Testing the Installation:
=========================

In the MonetDB top-level directory issue the command

Mtest.py -r

(Make sure Mtest.py can be found, it should be in the bin directory
that was filled by the make install command.)

This should produce much the same output as make check above, but uses
the installed version of MonetDB.

You need write permissions on part of the installation directory for
this command: it will create subdirectories var/dbfarm and Tests.

Documentation:
==============

The documentation starts in $prefixdir/doc/monet.html

NOTE: the current 'make install' does not yet generate this documentation
      to do this manually, execute *after* successful 'make install':

	 doc/doc.sh $sourcedir $builddir $prefixdir

where: sourcedir = top-level source directory (where HowToStart is)
       builddir  = directory where you typed 'configure' and 'make install'
       prefixdir = installation directory (as specified to configure with --prefix)

Troubleshooting:
================

Bootstrap fails if any of the requisite programs can not be found or is
an incompatible version.

Bootstrap adds files to the source directory, so it must have write
permissions.

Configure will fail if certain essential programs can't be found or
certain essential tasks (such as compiling a C program) can't be
executed.  The problem will usually be clear from the error message.
