This document will help you compile and install MonetDB. Once you have
done that successfully, refer to doc/monet.html for the user
documentation that will have been generated by then.

This document assumes that you are planning to compile and install
MonetDB on a Unix system (e.g., Linux, IRIX, Solaris, AIX, MacOS
X/Darwin, or CYGWIN). For compilation and installation on a native
Windows system (NT, 2000, XP) see the instructions in the file
'HowToStart-Win32'.


Prerequisites:
==============

CVS
	You need to have a working CVS.  For instructions, see
	http://sourceforge.net/docman/?group_id=1 and look under the
	heading CVS Instructions.

Python
	MonetDB uses Python (version 1.5.2 or better) during
	configuration of the software.  See http://www.python.org/ for
	more information.

autoconf/automake/libtool 
	MonetDB uses GNU autoconf, automake, and libtool during
	configuration of the software.  See
	http://www.gnu.org/software/autoconf/,
	http://www.gnu.org/software/automake/, and
	http://www.gnu.org/software/libtool/ for more information.
	Libtool is also used during the build.

standard software development tools
	To compile MonetDB, you also need to have a the following 
	standard software development tools installed and ready for use
	on you system:
	 - a C/C++ compiler (e.g., GNU's gcc/g++)
	 - a lexical analyzer generator (e.g., "lex" or "flex")
	 - a parser generator (e.g., "yacc" or "bison")

dlcompat (MacOS X/Darwin, only)
	MacOS X/Darwin itself does not support dlopen, however, there's
	a third-party library called dlcompat from Fink that provides
	the respective functionality. MonetDB requires dlcompat to be
	installed on MacOS X/Darwin.
	(http://fink.sourceforge.net/pdb/package.php/dlcompat)

disk space
	After downloading, MonetDB takes up about 45 MB of disk space;
	compilation adds another 30 MB.  Testing takes about 150 MB, and
	the installation about 10 MB (not including any databases).


Getting the Software:
=====================

This command should be done once.  It records a password on the local
machine to be used for all subsequent CVS accesses with this server.

 cvs -d:pserver:anonymous@cvs.monetdb.sourceforge.net:/cvsroot/monetdb login

Just type RETURN when asked for the password.

Then get the software by using the command:

 cvs -d:pserver:anonymous@cvs.monetdb.sourceforge.net:/cvsroot/monetdb login checkout MonetDB

This will create a directory MonetDB in your current working directory.

Also see http://sourceforge.net/cvs/?group_id=56967 for more
information.


Configure and Make:
===================

In the top-level directory of MonetDB type the command:

 ./bootstrap

Then in any directory (a new empty directory or in the MonetDB top-level
directory) give the command

 .../configure

where ... is replaced with the (absolute or relative) path to the
MonetDB top-level directory.  The directory where you execute configure
is the place where all intermediate source and object files are
generated during compilation via "make".

By default, MonetDB is eventually (i.e., during "make install"; see
below) installed to /usr/local/. To choose another target directory, you
need to call  configure --prefix=<prefixdir>.
(Use the --help option of configure to find out about configure
options).

In the same directory (where you called configure) give the command

 make

to compile the source code.

On my lightly loaded, dual 1.4 GHz Pentium Linux system, configure takes
about 15 seconds, and make about two and a half minutes.


Testing the Build:
==================

If make went successfully, you can try

 make check

This will do a lot of tests, some are unfortunately still expected to
fail, but most should go successfully.  At the end of the output there
is a reference to an HTML file which is created by the test process and
shows the test results.  An explanation of the test results can be found
in XXX--to be filled in.

Testing takes about 150 MB of disk space in the build directory.

Running the tests takes about 7 minutes on my system.


Installing:
===========

Give the command

 make install

By default (if no --prefix option was given to configure above), this
will install in /usr/local/.  Make sure you have appropriate privileges.


Testing the Installation:
=========================

Make sure that /usr/local/bin (respectively <prefixdir>/bin, where
<prefixdir> is the directory you specified with --prefix when calling
configure) is in your PATH.

In the MonetDB top-level directory issue the command

 Mtest.py -r

This should produce much the same output as make check above, but uses
the installed version of MonetDB.

You need write permissions on part of the installation directory for
this command: it will create subdirectories var/dbfarm and Tests.


Documentation:
==============

The documentation starts in <prefixdir>/doc/monet.html

NOTE: the current 'make install' does not yet generate this
      documentation to do this manually, execute *after* successful
      'make install'. In the top-level directory of the MonetDB build
      tree, call

 make html


Troubleshooting:
================

Bootstrap fails if any of the requisite programs can not be found or
is an incompatible version.

Bootstrap adds files to the source directory, so it must have write
permissions.

Configure will fail if certain essential programs can't be found or
certain essential tasks (such as compiling a C program) can't be
executed.  The problem will usually be clear from the error message.
