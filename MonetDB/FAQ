FAQ for MonetDB and its SQL server front-end 
============================================

1) Why does Mserver complain about a missing initialization script?
2) How to start an SQL console?
3) How to run a SQL batch program?
4) How to run a Perl (Python, C, Java, ...) application?
5) What application programming interfaces do exist?

================================================================================

1) Why does Mserver complain about a missing initialization script?

Running a server in daemon mode requires initialization of the server context. 
The actions are read from a file passed as the last argument on the command 
string. An example of such a script would be:

print("welcome to the world of MonetDB");
module(sql_server);
print("server is ready to accept SQL sessions");

================================================================================

2) How to start an SQL console?

In release 4.3 the SQL compiler is a separate module in the sourceforge repository. 
It should be checked out from much the same way as MonetDB itself (change
'MonetDB' into 'sql'). In the root directory of the sql distribution you find
the HowtoStart-SQL document, which contains step-by-step instructions.

================================================================================

3) How to run a SQL batch program?

Make sure that you have MonetDB's SQL frontend installed and the sql_server module
loaded in your running Mserver.
Collect the SQL statements in a file. Then simply type: 

MapiClient -lsql < batchfile

================================================================================

4) How to run a Perl (Python, C, Java, ...) application?

The MonetDB source tree contains a section Mapi/clients, where you also find 
sample applications to interact with the server. For most APIs we have 
included a simple textual monitor to show the basic interaction, called MapiClient. 
Try this one first before developing your own applications.

================================================================================

5) What application programming interfaces do exist?


MonetDB contains low-level TCP-IP libraries to setup a communication channel 
from programs written in C, Java, Perl, PHP, Python, Haskell, Tcl.  

A beta implementation of ODBC is also available in pre-release. This API
is being worked on now. The current status is that only an elementary subset 
of the API is implemented, and its funtionality is not yet fully tested. 

The most extensive library for interaction is Mapi, which provides a cached tabular 
abstraction for queries. It comes in a C and Java version. A synopsis of the interface 
is given below:

mapi_bind()
	Bind string C-variable to field
                                            
mapi_bind_var()
	Bind typed C-variable to field
                                            
mapi_bind_numeric()
	Bind numeric C-variable to field
                                            
mapi_cache_limit() 
	Set the tuple cache limit

mapi_connect() 
	Connect to a Mserver 
                                            
mapi_connect_ssl() 
	Connect to a Mserver using SSL [TODO]
                                            
mapi_disconnect()
	Disconnect from server
                                            
mapi_dup() 
	Duplicate the connection structure
                                            
mapi_error() 
	Test for error occurrence
                                            
mapi_explain() 
	Display error message and context on stream
                                            
mapi_execute() 
	Execute a query
                                            
mapi_execute_array() 
	Execute a query using string arguments
                                            
mapi_fetch_field() 
	Fetch a field from the current row
                                            
mapi_fetch_field_array() 
	Fetch all fields from the current row
                                            
mapi_fetch_line()
	Retrieve the next line
                                            
mapi_fetch_reset() 
	Set the cache reader to the begining
                                            
mapi_fetch_row() 
	Fetch row of values
                                            
mapi_fetch_all_rows()
	Fetch all answers from server into cache
                                            
mapi_finish()
	Terminate the current query
                                            
mapi_get_host()
	Host name of server
                                            
mapi_get_language()
	Query language name
                                            
mapi_get_version() 
	Monet version identifier
                                            
mapi_get_user()
	Current user name
                                            
mapi_get_field_count() 
	Number of fields in current row
                                            
mapi_get_row_count()  
	Number of rows in cache or -1
                                            
mapi_ping()
	Test server for accessibility
                                            
mapi_prepare() 
	Prepare a query for execution
                                            
mapi_prepare_array() 
	Prepare a query for execution using arguments
                                            
mapi_query() 
	Send a query for execution
                                            
mapi_query_array() 
	Send a query for execution with arguments

mapi_quick_query() 
	Send a query for execution
                                            
mapi_quick_query_array() 
	Send a query for execution with arguments

mapi_quote() 
	Escape characters
                                            
mapi_rows_affected() 
	Obtain number of rows changed
                                            
mapi_quick_response()
	Quick pass response to stream
                                            
mapi_seek_row()
	Move row reader to specific location in cache
                                            
mapi_table() 
	Get current table name
                                            
mapi_timeout() 
	Set timeout for long-running queries[TODO]
                                            
mapi_trace() 
	Set trace flag
                                            
mapi_trace_log() 
	Keep log of interaction
                                            
mapi_unquote() 
	Remove escaped characters
