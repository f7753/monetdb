This document helps you to install the MonetDB source and compile it.
Once succeeded, refer to doc/MonetDB.html for the user documentation
generated as part of the process.

In case you prefer to install a pre-compiled binary distribution, please
check-out http://sourceforge.net/project/showfiles.php?group_id=56967 .

This document assumes that you are planning to compile and install
MonetDB on a native Windows system (NT, 2000, XP). 
For compilation and installation on a Unix system (e.g., Linux, IRIX,
Solaris, AIX, MacOS X/Darwin, or CYGWIN) see the instructions in the
file 'HowToStart'.


Prerequisites:
==============

CVS
	You need to have a working CVS. Several solutions are
	available. We use internally WinCVS (http://www.wincvs.org)
	and CVS under Cygwin (http://www.cygwin.com)
	For general information about the sourceforge repository, see
	http://sourceforge.net/docman/?group_id=1 and look under the
	heading CVS Instructions.  Pointers to CVS implementations 
	for Windows can be found at e.g.:
	http://www.cvshome.org/cyclic/cvs/windows.html
	http://www.wincvs.org/
	http://www.componentsoftware.com/products/CVS/

Python
	MonetDB uses Python (version 2.0.0 or better) during
	configuration of the software.  See http://www.python.org/ for
	more information.

Pthreads for Win32
	(ftp://sources.redhat.com/pub/pthreads-win32/)
	Pthreads should be installed to C:\Pthreads, otherwise you need
	to patch the "PTHREAD = C:\Pthreads" line in "NT\rules.msc"
	according to your setup. Newer versions of Pthreads seem to
	have the "include" & "lib" directory not in C:\Pthreads, but in
	C:\Pthreads\prebuilt. In that case, you either have to move the
	"include" & "lib" directory from C:\Pthreads\prebuilt to 
	C:\Pthreads, or set "PTHREAD = C:\Pthreads\prebuilt" in
	"NT\rules.msc".

UnxUtils for Win32
	(http://UnxUtils.sourceforge.net/)
	UnxUtils must be installed in the root directory ("\", i.e.,
	without the default "\UnxUtils\" prefix) of the drive where you
	want to compile MonetDB.
	The same drive is required, as the UnxUtils do not know about
	drive letters, and hence absolute paths start with "\" (i.e.,
	without a leading "C:", "D:", ...).  The default "\UnxUtils\"
	prefix has to be omitted, as other the UnxUtils' "bison" does
	not find its own "bison.simple" file, which it expects to be in
	"/usr/share/bison/bison.simple" (aka. 
	"\usr\share\bison\bison.simple").
	Next to some tools used by Mtest.py for testing MonetDB (see
	below), UnxUtils provide the lexical analyzer generator "flex"
	and the parser generator "bison", which are required to compile
	MonetDB.
	Note: You have to install the UnxUtils using the original .zip
	file (http://UnxUtils.sourceforge.net/UnxUtils.zip). With the
	third-party executable installer
	(http://www.braindonors.net/products/unxutils.asp), choosing
	another than the default installation directory doesn't seem to
	work...
	
Microsoft Visual C++
	You need Microsoft Visual C++ 5 or higher.

	Notice that if you do not own Microsoft Visual C++, you can
	still compile on Windows using the Cygnus Posix-emulation
	environment "CYGWIN" (http://www.cygwin.com). In that case, you
	should follow the standard instructions in the file
	'HowToStart'. Alternatively, it might be possible to use the
	free WIN32-GNU compilers (http://www.mingw.org/index.shtml) as a
	drop-in replacement for the Microsoft tools, but we have not
	tried this yet.

disk space
	After downloading, MonetDB takes up about 40 MB of disk space;
	compilation adds another 70 MB.  Testing takes about 45 MB, and
	the installation about 20 MB (not including any databases).


Getting the Software:
=====================

This command should be done once.  It records a password on the local
machine to be used for all subsequent CVS accesses with this server.

 cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/monetdb login

Just type RETURN when asked for the password. The actual steps depend on
your CVS tool, e.g. in WinCVS you have to set the Admin preferences.
Then get the software by using the command:

 cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/monetdb checkout MonetDB

This will create a directory MonetDB in your current working directory.

Also see http://sourceforge.net/cvs/?group_id=56967 for more
information.


Compiling:
==========
Open a Windows command shell or a UnxUtils shell and go to the 
top-level directory of MonetDB.

Make sure that the proper environment for MSVC++ is set,
otherwise call the corresponding BAT file.
(see C:\Program Files\Microsoft Visual Studio\VC98\Bin\VCVARS32.BAT).

Make sure that Python, C:\Pthreads\lib (or wherever you installed
Pthreads), and \usr\local\wbin are in the PATH of your command shell.

When all prerequisites have been satisfied, you type

 cd NT
 nmake

to compile the source code.


Testing the Build:
==================

If nmake went successfully, you can try

 nmake check

This will do a lot of tests, some are unfortunately still expected to
fail, but most should go successfully.  At the end of the output there
is a reference to an HTML file which is created by the test process and
shows the test results.  An explanation of the test results can be found
in XXX--to be filled in.

Testing takes about 46 MB of disk space in the build directory.


Installing:
===========

Give the command

 nmake install

By default this will install MonetDB to <sourcedir>\NT\ where
<sourcedir> is the top-level directory of MonetDB source tree.
The current version does not provide any means to change this default.


Testing the Installation:
=========================

Make sure that <sourcedir>\NT\bin, <sourcedir>\NT\lib, and
<sourcedir>\NT\lib\MonetDB are in your PATH.

In the MonetDB top-level directory issue the command

 Mtest.py -r

(Make sure Mtest.py can be found, it should be in the bin directory that
was filled by the nmake install command.)

This should produce much the same output as nmake check above, but uses
the installed version of MonetDB.


Documentation:
==============

The documentation starts in <sourcedir>\NT\doc\MonetDB.html

NOTE: the current 'nmake install' does not yet generate this
      documentation to do this manually, execute *after* successful
      'nmake install'. In the top-level directory of the MonetDB build
      tree, call

 nmake html

