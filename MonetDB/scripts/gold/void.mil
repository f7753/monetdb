module(enum,str);

var o := car_age.reverse.fetch(0);

proc maketype(str title) : bat {
    var histoname := sprintf("%s_t", title);
    if (not(view_bbp_name.reverse.exist(histoname))) {
        var batname := sprintf("car_%s", title);
        var b := bat(batname);
        var histo := b.histogram.sort;
        histo.rename(histoname);
        histo.persists(true);
    } 
    return enum_load(histoname);
}

var age_t := maketype("age");
var carprice_t := maketype("carprice");
var category_t := maketype("category");
var town_t := maketype("town");
var class_t := maketype("class");

proc void_encode(int tpe, str title) : bat {
    var b := bat(sprintf("car_%s", title));
    var bn := tpe.[encode]([~b]); 
    bn.rename(sprintf("void_%s", title));
    bn.persists(true);
    bn.seqbase(o);
    return bn;
}

proc void_create() : void {
    void_encode(age_t,"age");
    void_encode(carprice_t,"carprice");
    void_encode(category_t,"category");
    void_encode(town_t,"town");
    void_encode(class_t,"class");
    void_neg := [car_neg~].copy;
    void_neg.rename("void_neg");
    void_neg.persists(true);
    void_pos := [car_pos~].copy;
    void_pos.rename("void_pos");
    void_pos.persists(true);
    void_gender := [~car_gender].copy;
    void_gender.rename("void_gender");
    void_gender.persists(true);
    void_gender.seqbase(o);
}

proc print_car(low,high) := {
    car_age.slice(low,high).table(car_gender, car_carprice, car_category, 
                          car_town, car_class);
}

proc print_void(low,high) := {
    void_age.slice(low,high).table(void_gender, void_carprice, void_category, 
                          void_town, void_class);
}

if (not(view_bbp_name.reverse.exist("void_age"))) {
    void_create();
}

ls;
commit;
quit;
