@t The Monet System
@v version 4.0 (BETA)
@a Peter Boncz
@d 18/11/1997
@* Introduction
@T
Monet is a novel database system. It distinguishes itself 
from other database systems in its focus on exploiting efficiently
current hardware. This translates itself in a focus on main-memory
techniques. It furthermore is buzzword compliant: it is 
parallel, extensible, and provides -- amongst others -- an 
object-oriented interface, including a distributed persistent
Java(tm) interface.

\begin{center}
{\epsfxsize=0.55\textwidth
\epsffile{monet.eps}
\label{fig1}{\em Front-end/Back-end Architecture}}
\end{center}

For more detailed information on the why, what and how about Monet,
we refer to the published 
@[<a href="/~monet/papers.html">scientific papers</a>@
on Monet, available at the 
@[<a href="/~monet/">web site at the CWI</a>@.

@+ System Architecture
@T
Monet has a Front-end/Back-end design.
The rationale is to provide an extendible architecture that facilitates
{\bf data independence}.
\begin{itemize}
\item {\em back-end}
The physical {\bf Mserver} database back-end, with its tabular datastructures,
search accelerators and physical algebra commands is separated from
the logical user interface.
\item {\em front-end}
Several database front-ends translate between user-interfaces
like ODMG or relational SQL and the Monet database back-end.
\item {\em intermediate language}
Frontend and back-end communicate in a language called the
{\bf Monet Interpreter Language}, or MIL. The functional core of
this language is formed by a {\bf BAT algebra}, supplemented
with programming language control constructs and parallel execution
constructs.
\end{itemize}

@* Reference Manuals

@+ System Utilities
@T
The Monet system consists of the following utilities:
\begin{description}
\item[{\bf @[<a href="man/Mserver.html">Mserver</a>@}]
	Monet server, opens the console session for 'adm'. Administrator command.
\item[{\bf @[<a href="man/Mcreatedb.html">Mcreatedb</a>@}]
	create a Monet database, or add users to it. Administrator command.
\item[{\bf @[<a href="man/Mcreatedb.html">Mdestroydb</a>@}]
	destroy a Monet database, or remove users from it. Administrator command.
\item[{\bf @[<a href="man/Mrecover.html">Mrecover</a>@}]
	recover from a system crash. Administrator command.
\item[{\bf @[<a href="man/Mload.html">Mload</a>@}]
	bulk load tables from ASCII. User command.
\item[{\bf @[<a href="man/Mdump.html">Mdump</a>@}]
	bulk export into ASCII. User command.
\item[{\bf @[<a href="man/Mclient.html">Mclient</a>@}]
	open a client-session. {\bf Preferable interface for MIL interaction!} User command.
\item[{\bf @[<a href="man/odlp.html">oldp</a>@}]
	ODL parser that produces stubs for different Monet/ODMG language bindings. Application programmer command.
\item[{\bf @[<a href="man/mel.html">mel</a>@}]
	utility to parse MEL extension module specifications. Extension 
programmer command.
\item[{\bf @[<a href="/~monet/papers/mxdoc.ps.gz">Mx</a>@}] 
	code/documentation utility.
\end{description}
	
@+ Monet/ODMG Application Programmer Interface
@T
The Monet/ODMG interface is a full-fledged object-oriented database system
built in top of Monet. It provides natural language mappings for C,
C++ and Java. The Monet/ODMG interface follows the Monet concept of 
front-end/back-end design. 

The motivation to work with the 
@[<a href="http://www.odmg.org">ODMG standard</a>@
 on top of Monet is the following:
\begin{itemize}
\item ODMG provides a model for orthogonal persistency in a number of
application language bindings.
\item ODMG facilitates system integration by providing multiple
language bindings (different applications in different
programming languages can communicate an cooperate
by using a shared ODMG database).
\item We can achieve {\em data independence} by providing an
object-oriented model at the logical level; while storing
the data physically a la Monet in vertical decomposed format.
\item Monet's decomposition strategy can be used to provide a competitive
object-oriented data manipulation system, as well as a highly efficient
analytical query processing system.
\item ODMG has a general purpose, high level, object-oriented
query language (OQL).
\end{itemize}
More information about the ODMG standard can be found at 
the @[<a href="www.omg.org">Object Management Group</a>@ and
the @[<a href="www.omdg.org">Object Database Management Group</a>@.

@- Architecture
@T
Monet/ODMG is based on the ODMG1.X model (not ODMG2.0). The below 
picture shows how the system is used: after specification of
a common data model in ODL (Object Definition Language), a parser
generates different language  bindings for C, C++ and Java. 
\begin{description}
\item[ODMG/C++]
The C++ binding couples with C++ applications that run
as extension modules in the Monet database server. 
Such C++ user-code implements methods that are defined on ODL objects. 
\item[ODMG/C]
The C binding works similarly to the C++ binding.
Mapping the object-oriented ODMG onto C (non object-oriented) is somewhat 
difficult, and this results in a less natural mapping than for ODMG/C++.
ODMG/C is provided for convenience so existing C code can easily
take part in the integrated Monet/ODMG environment.
\item[ODMG/Java]
The Java language binding couples with a user application 
written in java. Its supporting ODMG/Java libraries are {\bf "100\% pure"} 
java, making it possible to run user applications as an applet in a Web 
browser. Object access will transparently cause communication between the 
ODMG/Java Run-Time System and the Monet Database. 
\end{description}

 
\begin{center}
{\epsfxsize=0.80\textwidth
\epsffile{odmg.eps}
{\em Distributed and heterogeneous language coupling with ODMG}}
\end{center}

@- Reference Information
@T
The following {\bf reference information} is available on the
Monet/ODMG system:

\begin{description}
\item[Monet/ODL] The definition of the Monet/ODL subset of ODL
can be found in the {\bf @[<a href="odl.html">Monet/ODL Reference</a>@}. 
\item[ODL parser] See the {\bf @[<a href="man/odlp.html">Manual Page</a>@}
for the exact calling options of the ODL parser.
\item[Standard Library] The 
{\bf @[<a href="stdlib.html">ODMG Standard Library Reference</a>@}
defines which standard facilities are present in ODMG, and what is their
exact interface in the ODMG/\{Java, C, C++\} programming environments
respectively.
\item[Data Dictionary] The {\bf @[<a href="meta.html">ODMG Meta Model</a>@}
shows the ODL schema of the Meta model that is used as Data Dictionary.
\item[Language Mappings] The 
{\bf @[<a href="Example.html">Example ODL Model</a>@}
introduces a simple Customer-Order-Item model and shows how this
can be accessed in the ODMG/C, ODMG/C++ and ODMG/Java environments
through stub classes.
\item[Programming Guide] The {\bf @[<a href="app.html">Example ODMG Application</a>@}
uses the example ODL model (see previous point) to build a simple application 
for internet sales, that demonstrates easily how all system components
work and fit together.
\item[Demo] {\bf @[<a href="/~acoi/demo/jOdmg">AMIS</a>@}
is an National Research Project in the field of Image Databases. 
\end{description}

@[<a href="http://www.ddi.nl">Data Distilleries BV</a>@ uses the 
ODMG system as the backbone software in their {\em three-tier} 
Data Mining Architecture.

@- Disclaimer 
@T
Our ODMG interface currently supports C, C++ and Java bindings.
Though in the spirit of ODMG, they do {\bf not} adhere to the exact
syntax as specified by either ODMG1.2 nor ODMG2.0. The OQL interface
is under construction in the context of the MAGNUM research project.
For the time being though; it is not ready. Ad-hoc queries {\bf are} 
supported though via the 
{\bf MIL} BAT algebra interface, and in the near future also via the
{\bf MOA} query algebra interface.

@+ MIL Database Interface
@T
The @[<a href="mil.html">MIL reference manual</a>@ contains information
about its syntax and semantics. MIL is a {\bf modular language}.  
All its primitives are contained in modules. A collection of
these modules can be loaded, which yields a particular 'dialect'of MIL. 
Loading a module is done with the
@[<a href="../scw/monet/monet\_cmd/8/module\_index.html"><tt>module()</tt></a>@
command, and it can be deactivated with the
@[<a href="../scw/monet/monet\_cmd/8/drop\_index.html"><tt>drop()</tt></a>@ command.

There is a core of {\bf kernel modules} that is hardwired into the kernel:

\begin{description}
\item[{\bf @[<a href="stdlib/kernel.html">kernel</a>@}]
these are the builtin system primitives.  They cannot be overloaded.
\item[{\bf @[<a href="stdlib/bat.html">bat</a>@}]
basic commands to create and manipulate BATs.
\item[{\bf @[<a href="stdlib/algebra.html">algebra</a>@}]
relational core of BAT commands (select, join, etc).
\item[{\bf @[<a href="stdlib/arith.html">arith</a>@}]
simple arithmetic operators on the standard types.
\item[{\bf @[<a href="stdlib/sys.html">sys</a>@}]
system information. This module contains helpful
procedures for navigating through the system (ls, help).
\item[{\bf @[<a href="stdlib/trans.html">trans</a>@}]
Transaction Management.
\end{description}
@-
@T
This is supplemented by a collection of {\bf standard modules}, 
that can be explicitly loaded by users at run-time:
\begin{description}
\item[{\bf @[<a href="extlib/alarm.html">alarm</a>@}]
timers and interrupts.
\item[{\bf @[<a href="extlib/blob.html">blob</a>@}]
the generic variable-size atom. Overload it in your own MEL extensions. 
\item[{\bf @[<a href="extlib/cluster.html">cluster</a>@}]
efficient sorting operations and other forms of clustering.
\item[{\bf @[<a href="extlib/enum.html">enum</a>@}]
Automatic creation of enumeration types. Used for space compression. 
\item[{\bf @[<a href="extlib/io.html">io</a>@}]
Standard IO module a la {\tt stdio.h}.
\item[{\bf @[<a href="extlib/lock.html">lock</a>@}]
Locks and semaphores.
\item[{\bf @[<a href="extlib/mmath.html">mmath</a>@}]
Mathematic operations a la {\bf math.h}.
\item[{\bf @[<a href="extlib/mprof.html">mprof</a>@}]
Monet performance profiling.
\item[{\bf @[<a href="extlib/oo7.html">oo7</a>@}]
OO7 benchmark generation and specific operations.
\item[{\bf @[<a href="extlib/str.html">str</a>@}]
String manipulation module Java style.
\item[{\bf @[<a href="extlib/tcpip.html">tcpip</a>@}]
TCP/IP asynchronous communication. Use it for parallel programming.
\item[{\bf @[<a href="extlib/temporal.html">temporal</a>@}]
Temporal data types and operations on them.
\item[{\bf @[<a href="extlib/tpcd.html">tpcd</a>@}]
Very efficient aggregation operations. SHOULD BE RENAMED.
\item[{\bf @[<a href="extlib/unix.html">unix</a>@}]
Provides access to some of the C stdlib.h functions.
\item[{\bf @[<a href="extlib/url.html">url</a>@}]
The URL data type.
\item[{\bf @[<a href="extlib/wisc.html">wisc</a>@}]
Wisconsin Benchmark generation.
\item[{\bf @[<a href="extlib/xtables.html">xtables</a>@}]
The cross-table module for Data Mining operations.
\end{description}


@+ MEL Database Extension Interface
@T
With the Monet Extension Language you can write your own extension
modules.  The @[<a href="mel.html">MEL reference manual</a>@ contains 
information about its syntax and semantics. It also contains documentation
about the C/C++ programming environment you can use for implementring modules.
The @[<a href="man/mel.html">MEL Utility</a>@ is used to do various kinds 
of compilations of MEL specifications into header files, etc.

We use the @[<a href="/~monet/papers/mxdoc.ps.gz">Mx utility</a>@
to integrate our MEL specification with the C/C++ implementation code.
This allows extraction of the documentation from the code. 
It also allows to build a documented, cross-linked
@[<a href="/~monet/srcdoc.html">Monet Source Code Web</a>@
between all source files. Use it to
browse both {\em MEL definition} and {\em implementation code}
that belongs to all standard Monet kernel modules
(@[<a href="WWWROOT/modules/kernel/index.html">kernel</a>@,
@[<a href="WWWROOT/modules/sys/index.html">sys</a>@,
@[<a href="WWWROOT/modules/bat/index.html">bat</a>@,
@[<a href="WWWROOT/modules/algebra/index.html">algebra</a>@,
@[<a href="WWWROOT/modules/arith/index.html">arith</a>@)
and standard modules
(@[<a href="WWWROOT/modules/alarm/index.html">alarm</a>@,
@[<a href="WWWROOT/modules/blob/index.html">blob</a>@,
@[<a href="WWWROOT/modules/cluster/index.html">cluster</a>@,
@[<a href="WWWROOT/modules/enum/index.html">enum</a>@,
@[<a href="WWWROOT/modules/io/index.html">io</a>@,
@[<a href="WWWROOT/modules/lock/index.html">lock</a>@,
@[<a href="WWWROOT/modules/mmath/index.html">mmath</a>@,
@[<a href="WWWROOT/modules/mprof/index.html">mprof</a>@,
@[<a href="WWWROOT/modules/oo7/index.html">oo7</a>@,
@[<a href="WWWROOT/modules/temporal/index.html">temporal</a>@,
@[<a href="WWWROOT/modules/wisc/index.html">wisc</a>@,
@[<a href="WWWROOT/modules/str/index.html">str</a>@,
@[<a href="WWWROOT/modules/tcpip/index.html">tcpip</a>@,
@[<a href="WWWROOT/modules/tpcd/index.html">tpcd</a>@,
@[<a href="WWWROOT/modules/trans/index.html">trans</a>@,
@[<a href="WWWROOT/modules/url/index.html">url</a>@,
@[<a href="WWWROOT/modules/xtables/index.html">xtables</a>@).
You can alternatively browse glossaries of all:
\begin{itemize}
\item @[<a href="WWWROOT/mil\_atoms.html">atomic types</a>@
\item @[<a href="WWWROOT/mil\_accs.html">search accelerators</a>@, and
\item @[<a href="WWWROOT/mil\_cmds.html">algebraic commands</a>@.
\end{itemize}
together with their implementation code.

@* The Distribution
@T
Monet is distributed as a (GNU-)compressed tar-file. There
are two distributions available:
\begin{description}
\item[monet-$<$version$>$-$<$architecture$>$.tar.Z:]
This is the {\em binary distribution} that
contains all libraries, tool-binaries and standard
modules, and some script files, and header files that are 
necessary to use Monet for querying and programming goals.

There are different versions of each binary distribution,
currently available are {\tt SunOS5.5.1, IRIX5.3, IRIX6.2, IRIX6.3} 
and {\tt Linux2.0.0}. Also available in alpha release is 
a version for {\tt Windows NT/95} that works in cooperation
with the @[<a href="http://www.cygnus.com/gnu-win32">GNU-Win32</a>@
library.  The binary distribution has size of 6MB, and uncompressed needs
16MB of disk space.

\item[monet-$<$version$>$.tar.Z:]
This is the {\em source distribution}. It is for the time being
not publically available. This does not contain any precompiled
libraries, tools or utilities.
The source distribution has size 1.5MB, and uncompressed needs 6MB
of disk space. Compiling it will cost you another 34MB. 

{\bf Note:} {\em Developers checkout the sources from CWI repository with}
\begin{verbatim}
$ cvs -d ~monet/CVSROOT co monet
\end{verbatim}
{\em make sure that \$MONETHOME points to the new directory, and follow 
the instructions for the source distribution (Step 2).}
\end{description}

@+ Binary Distribution
We explain in 5 easy steps how to install the Monet binary distribution on
your system.
@- Step 0: What do we need? 
@T
\begin{enumerate}
\item the compressed tarfile containing the binary Monet distribution. 
\item a Sun Solaris, Silicon Graphics IRIX, or x86 Linux machine (beta version).
In a more alpha state is the new WIN32 distribution for Windows NT/95 machines.
\item as the Windows NT/95 version is built using the
@[<a href="http://www.cygnus.com/gnu-win32">GNU-Win32</a>@ Unix programming
environment, provided free of cost and use by 
@[<a href="http://www.cygnus.com/">Cygnus Solutions Inc</a>@,
users of these operating systems first need to put the  
@[<a href="ftp://ftp.cygnus.com/pub/gnu-win32/latest/cygwin.dll">cygwin.dll</a>@
in their WINDOWS/SYSTEM folder.

If you want to compile the system or develop extension modules, you can
do this using the GNU tools. You then must unzip and install the entire GNU-Win
@[<a href="ftp://ftp.cygnus.com/pub/gnu-win32/latest/">distribution</a>@
(release 18 or later). \footnote{In that case, you might also be interested in 
the @[<a href="www.itribe.net/virtunix/files/unix95.7.zip">virtual unix</a>@ 
collection of Unix utilities, and replacements for popular unix editors like
@[<a href="http://www.cs.washington.edu/homes/voelker/ntemacs.html">emacs</a>@
and @[<a href="http://www.halcyon.com/gvr/vim.html">vi</a>@}.
\end{enumerate}


@- Step 1: Choose a Place. 
@T
Go to the place where you want to put Monet, for example:
\begin{verbatim}
$ mkdir /home/boncz/monet
$ cd /home/boncz/monet
$
\end{verbatim}

@- Step 2: Untar the Archive.
@T
\begin{verbatim}
$ zcat monet<version>.<architecture>.tar.Z | tar xf -
$
\end{verbatim}
\begin{itemize}
\item This will unpack a complete binary Monet-tree.  
The root directory where you extract this (in this example {\small\tt 
/home/boncz/monet}) we call the 'Monet directory'.
It contains the binaries, libraries, standard modules, header files, 
standard MIL scripts and documentation. Together with the standard scripts
also comes a demo database that can be loaded from ASCII, and 
data-mining query scripts on them. All machine/OS dependent files
are inside an OS-specific directory (e.g. SunOS5.5.1/). In this way
you can have Monet installed on a shared filessytem between multiple
OS architectures, without having to cope with multiple root directories.

\item you may now inspect the Monet/README file to see what you got
\end{itemize}

@- Step 3: Set Environment Variables
Set the following shell variables, according to your local 
circumstances:
@T
\begin{description}
\item[{\tt MONETHOME=/home/boncz/monet}]
	{\tt MONETHOME} points to the root of the Monet directory tree.
\item[{\tt PATH=\$PATH:\$MONETHOME/\$PREFIX/bin}]
	this makes sure that you can find the Monet binaries.
\item[{\tt LD\_LIBRARY\_PATH=\$MONETHOME/\$PREFIX/lib}]
	tells the OS where the monet libraries and compiled extension
	modules can be found.
\item[{\tt MONET\_MOD\_PATH=/home/boncz/monet/modules//}]
	tells Monet where to look for module objects that can be loaded
	dynamically (every file ending {\tt .so} is considered a
	module!). This variable can point to several directories
	separated by a colon. For convenience, you can also use a trailing
	double-slash, as given in the example, indicating that all 
	subdirectories should be searched for loadable objects.
\end{description}

Put these definitions in your .csrhc/.bashrc/.shrc/.tcshrc
or whatever initialization file your shell has! Please 
note that your shell may work with the 'setenv X=Y' style
shell variable assignment. If it doesn't, you still need to
export all variables with {\tt export MONETHOME PATH LD\_LIBRARY\_PATH}.

The above mentioned {\tt \$PREFIX} is the {\em exact system name}
that is composed as follows using output from the {\tt uname} utility:
\begin{verbatim}
UNAME\_BASE=$(shell uname)
UNAME\_REV=$(shell uname -r)
PREFIX=$(UNAME\_BASE)$(UNAME\_REV)
\end{verbatim}

For Solaris systems, it might be {\tt SunOS5.5.1}, for Irix systems
it might be {\tt IRIX6.3}, etc.. Both Windows95 and Windows NT expect
the setting {\tt PREFIX=WIN32}.

@- Step 4: Create a Test Database
@T
Monet comes with a demonstration database mimicking a car insurance
database. Some standard data mining query scripts are available
on this database. You can find the sources in the 
{\tt @[<a href="/~monet/scripts/gold/">src/gold/</a>@} 
directory.  The 
@[<a href="/~monet/scripts/gold/README">README</a>@ 
file contains detailed instructions.

@+ Source Distribution

The source distribution is available on request. The below text
discusses the main items needed for succesfully making binaries
wioth it.

@- The 'Mx' Tool
@T
Monet uses the @[<a href="/~monet/doc/mxdoc.ps.gz">Mx</a>@
utility to integrate code and documentation. All sources therefore have
the extension {\tt .mx}. The Mx utility is included in the distribution.

@- Targets
@T
By following the below instructions for making, you will create the main
libraries and the standard collection of extension modules 
located in {\tt \$MONETHOME/\$PREFIX/lib},  
and the executable tools in {\tt \$MONETHOME/\$PREFIX/bin}.

@- Directory structure
@T
The source system is set up in such a way that you can easily cross-compile. 
Temporary generated files and object files are located in a separate
directory structure, that starts at \$MONETHOME/\$PREFIX. 
Just set a different \$PREFIX, and you can compile with completely disjunct
settings! 

For instance, if you are doing performance measurements on an 
unstable system, you can maintain two different binary directories --
one optimized and one with debugging symbols -- by simply switching the 
PREFIX environment variable.

@- Required Software
@T 
You need the following tools (beside the UNIX standards 
like sed, echo, etc.):
\begin{itemize} 
\item the GNU Make tool, version 3.76 or later;
To reduce the complexity of the Makefiles we switched to GNU {\tt gmake}.
This utility allows for inclusion of one Makefile in the other, 
is backwardly compatible with most Unix makes, and available on almost
any system.

We tried to separate the structure and rules in the Makefiles. Most
Makefiles are generic, and contain no system-specific rules. All 
system-specific rules are concentrated in the 
{\tt \$MONETHOME/makefiles/\$PREFIX.mk } files.
\item the GNU readline library;
The Mclient program for user interaction has command line completion,
that stems from the GNU readline library. Note that the Mclient
program is not an essential part of the Monet database system and
is only provided for convenience.
\end{itemize} 
You can find the latest release of both at prep.ai.mit.edu:/pub/gnu.
On some systems GNU make is called gmake, however, in the documentation 
{\em we refer to it simply as {\bf make}}.
 
@- Step 1: set things up
@T
First you should obtain the Monet source distribution, and unzip
and untar in in your \$MONETHOME directory. Check that your system 
fulflls are requirements mentioned above.

@- Step 2: check it
@T
In the {\tt \$MONETHOME} directory, you can check the system with
\begin{verbatim}
$ make check-config
\end{verbatim}
Especially the variable MAKE\_VER needs attention! Make sure you're
using at least version 3.76.1 (see above).
Among others this output contains the line 
{\small\begin{verbatim}
        PREFIX=<OS><OSVER>
\end{verbatim}}
for example
{\small\begin{verbatim}
        PREFIX=SunOS5.5.1
\end{verbatim}}

At the moment a series of platforms are supported:
\begin{itemize} 
\item SunOS 5.5       aka Solaris 2.5
\item SunOS 5.5.1     aka Solaris 2.5.1
\item IRIX 5.3
\item IRIX 6.2
\item IRIX 6.3
\item LINUX 2.0.0
\item WIN32 for Windows 95 and Windows NT.
\end{itemize} 

@ 
for a Solaris 2.5.1 system. Go to $(MONETHOME)/makefiles and
see whether there is a file $(PREFIX).mk for your particular
platform. If not so, copy one of those you find to be a similar
system and modify it.

@- Step 3: try to make
@T
In the {\tt \$MONETHOME} directory, you can make the system with a:
\begin{verbatim}
$ make complete
\end{verbatim}
This first generates dependencies, and then compiles the system.
Cleaning up is done with:

\begin{verbatim}
$ make clean 
\end{verbatim}

You can achieve the same effect by doing:
\begin{verbatim}
$ rm -r -f $MONETHOME/$PREFIX
\end{verbatim}

Incremental makes are done using:
\begin{verbatim}
$ make 
\end{verbatim}

This structure can also be applied in subdirectories, for remaking parts
of the system. The first time though, you must start with a 
{\tt make complete}! 

You can speed-up the make procedure by saying:
\begin{verbatim}
$ make -r
\end{verbatim}
make checking all built-in rules. The Monet makefiles are
self-contained and therefore don't need any native make rules.
@ 
After the compilation you find all binaries and libs under
$(MONETHOME)/$(PREFIX). In case something went wrong during
compilation, check the output of the make procedure, that is
logged into $(MONETHOME)/$(PREFIX)/make.log.

More info on the makefiles is available on the 
@[<a href="/~monet/intern/makefiles">CWI internal web</a>@.

@- Source Code Web 
A cross-linked Source Code Web of all Monet documentation and implementation 
files can be created following the steps:
@T
\begin{itemize}
\item a database named 'index' should be created  with 
\begin{verbatim}
Mcreatedb -db index -user $USER
\end{verbatim}
\item choose a directory where to generate the WWW tree of html-files.
\item you must edit some directory paths both in this file 
'@[<a href="/~monet/scripts/wwwmake">wwwmake</a>@'
and 
'@[<a href="/~monet/scripts/wwwmake.mil">wwwmake.mil</a>@'
(located in the 'scripts' directory)
\item then issue the command: 
\begin{verbatim}
wwwmake mkdirs empty index link extract dbgen 
\end{verbatim}
\item consult the comments in the 
'@[<a href="/~monet/scripts/wwwmake">wwwmake</a>@'
script for further details.
\end{itemize}



@* Copyright Notice
@T
{\small\begin{verbatim}
ALL THE FILES IN SUBDIRECTORIES FROM THE ROOT OF THIS DISTRIBUTION ARE 

	COPYRIGHT 1993-1997 STICHTING MATHEMATISCH CENTRUM, AND 
	COPYRIGHT 1994-1997 NWO, THE NETHERLANDS,

EXCEPT FOR THE odmg/, modules/enum/ AND modules/xtables DIRECTORIES WHICH ARE 

	COPYRIGHT 1996-1997 DATA DISTILLERIES BV, AMSTERDAM.

THIS SOFTWARE WAS DEVELOPED BY M.L. KERSTEN AND HIS RESEARCH GROUP 
AT THE CENTRE FOR MATHEMATICS AND COMPUTER SCIENCE, KRUISLAAN 413 AMSTERDAM.

THE SOFTWARE MAY BE FREELY COPIED FOR RESEARCH PURPOSES. ALL OTHER USE,
INCLUDED PACKAGING, REDISTRIBUTION, COMMERCIAL EXPLOITATION IN
ANY FORM IS STRICTLY FORBIDDEN WITHOUT WRITTEN CONSENT OF ITS OWNERS.

THE DEVELOPERS AND OWNERS DO NOT ACCEPT ANY LIABILITY IN USING THE SOFTWARE.

THE COPYRIGHT NOTICE SHALL NOT BE REMOVED FROM ANY SOURCE
\end{verbatim}}
