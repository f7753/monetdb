@t An overview of the Monet Database System
@v version 4.3 
@a Peter Boncz, Martin Kersten
@d 21/2/2001
@* Introduction
@T
Monet is a novel database system. It distinguishes itself 
from other database systems in its focus on exploiting efficiently
current hardware. This translates itself in a focus on main-memory
techniques as the driving force for algorithms and storage
structures. It furthermore is buzzword compliant: it supports
client/server applications, parallel database processing,
extensible user-defined type, XML-interaction,....
In addition, it has an object-oriented interface, including 
a distributed persistent Java(tm) interface \footnote{
Developed and distributed by Data Distilleries}.

\begin{center}
{\epsfxsize=0.55\textwidth
\epsffile{monet.eps}
\label{fig1}{\em Front-end/Back-end Architecture}}
\end{center}

For more detailed information on the why, what and how about Monet,
we refer to the published (scientific) papers on Monet, available at the 
@[<a href="http://www.cwi.nl/htbin/ins1/publications">web site</a>@.

@+ System Architecture
@T
Monet has a Front-end/Back-end design.
The rationale is to provide an extendible architecture that facilitates
{\bf data independence}.
\begin{itemize}
\item {\em back-end}
The physical {\bf Mserver} database back-end, with its tabular datastructures,
search accelerators and physical algebra commands is separated from
the logical user interface.
\item {\em front-end}
Several database front-ends translate between user-interfaces
like ODMG or relational SQL and the Monet database back-end.
\item {\em intermediate language}
Frontend and back-end communicate in a language called the
{\bf Monet Interpreter Language}, or MIL. The functional core of
this language is formed by a {\bf BAT algebra}, supplemented
with programming language control constructs and parallel execution
constructs.
\end{itemize}

@* Reference Manuals

@+ System Utilities
@T
The Monet system consists of the following utilities:
\begin{description}
\item[{\bf @[<a href="man/Mserver.html">Mserver</a>@}]
	Monet server, opens the console session for 'adm'. Administrator command.
\item[{\bf @[<a href="man/Mcreatedb.html">Mcreatedb</a>@}]
	create a Monet database, or add users to it. Administrator command.
\item[{\bf @[<a href="man/Mcreatedb.html">Mdestroydb</a>@}]
	destroy a Monet database, or remove users from it. Administrator command.
\item[{\bf @[<a href="man/Mclient.html">Mclient</a>@}]
	open a client-session. {\bf Preferable interface for MIL interaction!} User command.
\item[{\bf @[<a href="man/mel.html">mel</a>@}]
	utility to parse MEL extension module specifications. Extension 
programmer command.
\item[{\bf @[<a href="/~monet/papers/mxdoc.ps.gz">Mx</a>@}] 
	code/documentation utility.
\end{description}
	
@+ MIL Database Interface
@T
The @[<a href="mil.html">MIL reference manual</a>@ contains information
about its syntax and semantics. MIL is a {\bf modular language}.  
All its primitives are contained in modules. A collection of
these modules can be loaded, which yields a particular 'dialect'of MIL. 
Loading a module is done with the
@[<a href="../scw/monet/monet\_cmd/8/module\_index.html"><tt>module()</tt></a>@
command, and it can be deactivated with the
@[<a href="../scw/monet/monet\_cmd/8/drop\_index.html"><tt>drop()</tt></a>@ command.

There is a core of {\bf kernel modules} that is hardwired into the kernel:

\begin{description}
\item[{\bf @[<a href="stdlib/kernel.html">kernel</a>@}]
these are the builtin system primitives.  They cannot be overloaded.
\item[{\bf @[<a href="stdlib/bat.html">bat</a>@}]
basic commands to create and manipulate BATs.
\item[{\bf @[<a href="stdlib/algebra.html">algebra</a>@}]
relational core of BAT commands (select, join, etc).
\item[{\bf @[<a href="stdlib/arith.html">arith</a>@}]
simple arithmetic operators on the standard types.
\item[{\bf @[<a href="stdlib/sys.html">sys</a>@}]
system information. This module contains helpful
procedures for navigating through the system (ls, help).
\item[{\bf @[<a href="stdlib/trans.html">trans</a>@}]
Transaction Management.
\end{description}
@-
@T
This is supplemented by a collection of {\bf standard modules}, 
that can be explicitly loaded by users at run-time:
\begin{description}
\item[{\bf @[<a href="extlib/alarm.html">alarm</a>@}]
timers and interrupts.
\item[{\bf @[<a href="extlib/blob.html">blob</a>@}]
the generic variable-size atom. Overload it in your own MEL extensions. 
\item[{\bf @[<a href="extlib/cluster.html">cluster</a>@}]
efficient sorting operations and other forms of clustering.
\item[{\bf @[<a href="extlib/enum.html">enum</a>@}]
Automatic creation of enumeration types. Used for space compression. 
\item[{\bf @[<a href="extlib/io.html">io</a>@}]
Standard IO module a la {\tt stdio.h}.
\item[{\bf @[<a href="extlib/lock.html">lock</a>@}]
Locks and semaphores.
\item[{\bf @[<a href="extlib/mmath.html">mmath</a>@}]
Mathematic operations a la {\bf math.h}.
\item[{\bf @[<a href="extlib/mprof.html">mprof</a>@}]
Monet performance profiling.
\item[{\bf @[<a href="extlib/oo7.html">oo7</a>@}]
OO7 benchmark generation and specific operations.
\item[{\bf @[<a href="extlib/str.html">str</a>@}]
String manipulation module Java style.
\item[{\bf @[<a href="extlib/tcpip.html">tcpip</a>@}]
TCP/IP asynchronous communication. Use it for parallel programming.
\item[{\bf @[<a href="extlib/temporal.html">temporal</a>@}]
Temporal data types and operations on them.
\item[{\bf @[<a href="extlib/tpcd.html">tpcd</a>@}]
Very efficient aggregation operations. SHOULD BE RENAMED.
\item[{\bf @[<a href="extlib/unix.html">unix</a>@}]
Provides access to some of the C stdlib.h functions.
\item[{\bf @[<a href="extlib/url.html">url</a>@}]
The URL data type.
\item[{\bf @[<a href="extlib/wisc.html">wisc</a>@}]
Wisconsin Benchmark generation.
\item[{\bf @[<a href="extlib/xtables.html">xtables</a>@}]
The cross-table module for Data Mining operations.
\end{description}


@+ MEL Database Extension Interface
@T
With the Monet Extension Language you can write your own extension
modules.  The @[<a href="mel.html">MEL reference manual</a>@ contains 
information about its syntax and semantics. It also contains documentation
about the C/C++ programming environment you can use for implementring modules.
The @[<a href="man/mel.html">MEL Utility</a>@ is used to do various kinds 
of compilations of MEL specifications into header files, etc.

We use the @[<a href="/~monet/papers/mxdoc.ps.gz">Mx utility</a>@
to integrate our MEL specification with the C/C++ implementation code.
This allows extraction of the documentation from the code. 
It also allows to build a documented, 
cross-linked @[<a href="/~monet/srcdoc.html">Monet Source Code Web</a>@
between all source files. Use it to
browse both {\em MEL definition} and {\em implementation code}
that belongs to all standard Monet kernel modules
[REDO]
@* The Distribution
@T
Monet is distributed as a (GNU-)compressed tar-file. There
are two distributions available:
\begin{description}
\item[monet-$<$version$>$-$<$architecture$>$.tar.Z:]
This is the {\em binary distribution} that
contains all libraries, tool-binaries and standard
modules, and some script files, and header files that are 
necessary to use Monet for querying and programming goals.

There are different versions of each binary distribution,
currently available are {\tt SunOS5.8, IRIX6.3} , {\tt Windows NT/98},
{\tt AIX}, and {\tt Linux2.4}.
The binary distribution has size of 6MB, and uncompressed needs
16MB of disk space.

\item[monet-$<$version$>$.tar.Z:]
This is the {\em source distribution}. 
This does not contain any precompiled libraries, tools or utilities.
The source distribution has size ?? MB, and uncompressed needs 6MB
of disk space. Compiling it will cost you another 34MB. 

{\bf Note:} {\em Developers checkout the sources from CWI repository with}
\begin{verbatim}
$ cvs -d ~monet/$<$version$>$/CVSROOT co monet
\end{verbatim}
\end{description}

@+ Binary Distribution
We explain in 5 easy steps how to install the Monet binary distribution on
your system.
@- Step 0: What do we need? 
@T
\begin{enumerate}
\item the compressed tarfile containing the 
@[<a href="http://www.monetsolutins.com/">binary Monet</a>@ distribution.
\item a Sun Solaris (SUNOS\_5-8), Silicon Graphics IRIX (IRIX\_6-3),
Windows NT (NT\_5.0), AIX, 
or x86 Linux machine (Linux\_2-4).
\end{enumerate}


@- Step 1: Choose a Place. 
@T
Go to the place where you want to put Monet, for example:
\begin{verbatim}
$ mkdir /home/boncz/monet
$ cd /home/boncz/monet
$
\end{verbatim}

@- Step 2: Untar the Archive.
@T
\begin{verbatim}
zcat monet_4-3.Linux_2-4.tar.Z | tar xf -
\end{verbatim}
This will unpack a complete binary Monet-tree (version 4-3)
for a Linux version 2.4 platform.
The root directory where you extract this (in this example {\small\tt 
/home/boncz/monet}) we call the 'Monet directory'.
It contains the binaries, libraries, standard modules, header files, 
MIL scripts and documentation. 

All machine/OS dependent files
are inside an OS-specific directory (e.g. SunOS5.5.1/). In this way
you can have Monet installed on a shared filessytem between multiple
OS architectures, without having to cope with multiple root directories.
You may now inspect the monet/README file to see what you got

@- Step 3: Environment Variables
If you intend to quickstart your first session, you do not have to
set any variables, provided you stay in the Monet directory.

In the Monet directory you find a file called 'monet.conf'
(linked to '.monet.conf'). 
It contains variable settings for the Monet server instance.
You may wish to changed the 'dbfarm' variable to a location where
you want to group your database files. If you intend to use a single
database, it is adviced to set the 'dbname' variable as well.
The remaining environment variables are explained in the file and
documentation.
This file can be copied to your home directory to make it visible 
in all directories where you start Mserver.

Add the Monet 'bin' subdirectory to your search path, otherwise
your shell won't easily find the binaries. The path variable is
typically maintained in your .csrhc/.bashrc/.shrc/.tcshrc
or whatever initialization file your shell has! Please 
note that your shell may work with the 'setenv X=Y' style
shell variable assignment. If it doesn't, you still need to
export all variables.

@- Step 4: Demonstrations
Together with the standard scripts also comes with demo databases, 
called @[<a href="http:dbfarm/VOC/www/index.html> dbfarm/VOC  </a>@
and @[<a href="http:dbfarm/gold/www/index.html> dbfarm/gold  </a>@ .
The former is a database for a multi-national trading company
in the 16-18th century.
The latter is derived from a 20th century car-insurrance company, which
should be loaded from ASCII and comes with
data-mining query scripts on them.
Both applications are illustrated below.

@- Step 4a: Start a Database Application
Monet comes with a database derived from the East-Indian Trading
Company archives. It is a small database intended to demonstrate
the capabilities of Monet on a variety of data types.

The VOC database application is accessible from the Monet web-page.
If you haven't experience it, it is now a good time to enjoy a
little tour back into history.
Take your favoured web-browser (Netscape or Explorer) and 
enter the @[<a href="http://www.monetsolutions.com/dbfarm/VOC/index.html]
VOC web address </a>@

A copy of the VOC database is included in the distribution.
In your Monet directory start the database server by typing:
@T
\begin{verbatim}
Mserver --dbname=VOC
\end{verbatim}

It should respond with a welcoming message and some advice 
on what to do next. That is, take a fresh terminal window and
type:
\begin{verbatim}
Mclient -db VOC -port echolood:5050 -sql
\end{verbatim}

where 'echolood' should be replaced by the name of your machine.
You have now started the textual front-end of the Monet server.
It expects you to enter SQL queries, which will be executed against
your copy of the VOC database.

@- Step 4a: Create a Test Database
@T
Monet comes with a demonstration database mimicking a car insurance
database. Some standard data mining query scripts are available
on this database. You can find the sources in the 
{\tt @[<a href="/~monet/scripts/gold/">src/gold/</a>@} 
directory.  The 
@[<a href="/~monet/scripts/gold/README">README</a>@ 
file contains detailed instructions.

@+ Source Distribution

The source distribution is also available from the Monet web site.
The below text discusses the main items needed for succesfully 
making binaries with it. You can obtain a copy from the web site
and install it in a directory of your choosing (say $PREFIX).

@T
\begin{verbatim}
$ zcat monet<version>.tar.Z | tar xf -
$
\end{verbatim}
By following the below instructions for making, you will create the
binaries, the main libraries, the standard collection of extension modules,
and the tools.

@- The 'Mx' Tool
@T
Monet uses the @[<a href="/~monet/doc/mxdoc.ps.gz">Mx</a>@
utility to integrate code and documentation. All sources therefore have
the extension {\tt .mx}. The Mx utility is included in the distribution.

@- Directory structure
@T
The source system is set up in such a way that you can easily cross-compile. 
Temporary generated files and object files are located in a separate
directory structure, that starts at \$PREFIX. 
Just set a different \$PREFIX, and you can compile with completely disjunct
settings! 

For instance, if you are doing performance measurements on an 
unstable system, you can maintain two different binary directories --
one optimized and one with debugging symbols -- by simply switching the 
PREFIX environment variable.

@- Required Software
@T 
You need the following tools (beside the UNIX standards 
like sed, echo, etc.):
\begin{itemize} 
\item the GNU Make tool, version 3.76 or later;
To reduce the complexity of the Makefiles we switched to GNU {\tt gmake}.
This utility allows for inclusion of one Makefile in the other, 
is backwardly compatible with most Unix makes, and available on almost
any system.

We tried to separate the structure and rules in the Makefiles. Most
Makefiles are generic, and contain no system-specific rules. All 
system-specific rules are concentrated in the 
{\tt \$MONETHOME/makefiles/\$PREFIX.mk } files.
\item the GNU readline library;
The Mclient program for user interaction has command line completion,
that stems from the GNU readline library. Note that the Mclient
program is not an essential part of the Monet database system and
is only provided for convenience.
\end{itemize} 

You can find the latest release of both at prep.ai.mit.edu:/pub/gnu.
On some systems GNU make is called gmake, however, in the documentation 
{\em we refer to it simply as {\bf make}}.
 
@- Step 1: set things up
@T
First you should obtain the Monet source distribution, and unzip
and untar in in your \$PREFIX directory. Check that your system 
fulflls are requirements mentioned above.

@- Step 2: check it
@T
In the {\tt \$PREFIX} directory, you can check the system with
\begin{verbatim}
$ make check-config
\end{verbatim}
Especially the variable MAKE\_VER needs attention! Make sure you're
using at least version 3.76.1 (see above).
Among others this output contains the line 
{\small\begin{verbatim}
        PREFIX=<OS><OSVER>
\end{verbatim}}
for example
{\small\begin{verbatim}
        PREFIX=SunOS5.5.1
\end{verbatim}}


@ 
for a Solaris 2.5.1 system. Go to $(MONETHOME)/makefiles and
see whether there is a file $(PREFIX).mk for your particular
platform. If not so, copy one of those you find to be a similar
system and modify it.

@- Step 3: try to make
@T
In the {\tt \$MONETHOME} directory, you can make the system with a:
\begin{verbatim}
$ make complete
\end{verbatim}
This first generates dependencies, and then compiles the system.
Cleaning up is done with:

\begin{verbatim}
$ make clean 
\end{verbatim}

You can achieve the same effect by doing:
\begin{verbatim}
$ rm -r -f $MONETHOME/$PREFIX
\end{verbatim}

Incremental makes are done using:
\begin{verbatim}
$ make 
\end{verbatim}

This structure can also be applied in subdirectories, for remaking parts
of the system. The first time though, you must start with a 
{\tt make complete}! 

You can speed-up the make procedure by saying:
\begin{verbatim}
$ make -r
\end{verbatim}
make checking all built-in rules. The Monet makefiles are
self-contained and therefore don't need any native make rules.
@ 

@* Copyright Notice
@T
{\small\begin{verbatim}
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at 
 * http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 *		   Peter Boncz <Peter.Boncz@cwi.nl>
 *		   Niels Nes <Niels.Nes@cwi.nl>
 *		   Stefan Manegold  <Stefan.Manegold@cwi.nl>
 */

\end{verbatim}}
