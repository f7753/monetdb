stdout of test 'list` in directory 'tests/from_Twente/moa` itself:

#> Mtest:	milM list milM -prelude list.prelude
#> Mtest:	Mtimeout -timeout 900 Mserver -modulesilent -yaccsilent -d8 -db tests_from_Twente_moa -prelude list.prelude list.milM
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for Linux2.2.12-20/32bit on Thu Mar 23 21:41:49 CET 2000.
#script:list.milM
#prelude:list.prelude

loaded;
#---------------------------------#
# module	| usage_count	  #
#---------------------------------#
[ "algebra",	  1		  ]
[ "arith",	  1		  ]
[ "bat",	  1		  ]
[ "kernel",	  1		  ]
[ "str",	  1		  ]
[ "sys",	  1		  ]
[ "trans",	  1		  ]

Try: modules;                - for other modules.
     ls;                     - for persistent bat listing.
     sigs("<module>")        - for available commands per module.
     help("<command>")       - for help one-liner for a command.

#You are system administrator (adm)!
module("str");


# kdiff work around, 27-01-1999, blokh@cs.utwente.nl
PROC he_kdiff(BAT b1, BAT b2 ): BAT := {
  IF ( b2.count = 0 )
  {
    printf( "WARNING: second BAT is empty, using special kdiff!\n" );
    return b1.copy;
  }
  ELSE
  {
    return kdiff(b1, b2);
  }
}

PROC load_module( str mn ): void := {
  IF ( monet_mod_nme.reverse.exist( mn ) )
  printf( "module %s already loaded\n", mn ); ELSE 
  {
    printf( "loading module %s\n", mn );
    eval( "module(\"" + mn + "\");" );
  }
}

PROC eq( any x, any y ): bit := {RETURN x = y;}
PROC ne( any x, any y ): bit := {RETURN x != y;}
PROC lt( any x, any y ): bit := {RETURN x < y;}
PROC le( any x, any y ): bit := {RETURN x <= y;}
PROC gt( any x, any y ): bit := {RETURN x > y;}
PROC ge( any x, any y ): bit := {RETURN x >= y;}

PROC mod( any::1 a, any::1 b ):any::1 := { RETURN a % b; }

PROC avg(BAT[any::1,any::2] b) : any::2 := { RETURN sum(b)/count(b); }

PROC str_concat( BAT[oid, str] s ):str := {
  VAR cur_res := "";
  VAR first := true;
  VAR current_oid := nil;
  VAR res := new( oid, str );
  s @ batloop() {
    IF (first)
    {
      current_oid := $h;
      first := false;
    }
    IF (current_oid != $h)
    {
      res.insert( current_oid, cur_res );
      cur_res := ""; 
      current_oid := $h;
    }
    cur_res := cur_res + $t;
  }
  IF (first != true)
    res.insert( current_oid, cur_res );
  RETURN res;
}

PROC nilcast(bat[any,any::1] b):bat[void,any::1] := {
  RETURN [~b].reverse.mark(0@0).reverse;
}

PROC castnil(bat[any::1,any] b):bat[any::1,void] := {
  RETURN [b~].mark(0@0);
}

PROC sunion(bat[any::1,any::2] bat1, bat[any::1,any::2] bat2):
  bat[any::1,any::2] := 
{
    VAR result := new(htype(bat1), ttype(bat1));
    result.insert(bat1);
    result.insert(bat2);
    RETURN result;
}

PROC mergecast( BAT[any::1,any] bat1, BAT[any,any::2] bat2, any::2 val)
                        :BAT[any::1,any::2] :=
{
      VAR tmp := [exist](const bat2.mirror,bat1.mirror);
      RETURN [tmp?outerjoin(bat1.mirror,bat2):val];
}

PROC cartprod( BAT[any::1,any::2] bat1, BAT[any::2,any::3] bat2)
                        :BAT[any::1,any::3] :=
{
      RETURN join([bat1~1], [1~bat2]);
}

PROC concat( BAT[any::1,any::2] bat1, BAT[any::1,any::2] bat2)
  :BAT[any::1,any::2] :=
{
    VAR result := new(htype(bat1), ttype(bat1));
    result.insert(bat1);
    result.insert(bat2);
    RETURN result;
}

PROC castval( BAT[any::1, any::2] bat1, any::3 val): BAT[any::1,any::3] := {
    RETURN [bat1~val];
}

PROC copy_order( BAT[oid,any] xs, BAT[oid,any::1] y ): BAT[oid,any::1] := {
  # xs is ordered; orders y on oid following x's order
  VAR z, xy;
  z  := xs.mark(0@0).reverse;  
  xy := z.join(y).sort;
  RETURN z.reverse.join(xy);
}

PROC cast_copy_order( BAT[oid,any] xs, BAT[oid,any::1] y ): BAT[void,any::1] := {
  # xs is ordered; orders y on oid following x's order
  VAR z;
  z  := xs.mark(nil).reverse;
  RETURN z.join(y).reverse.mark(0@0).reverse;
}

PROC CTOgroup( bat[oid,any] x ): bat[oid,int] := {
  RETURN join( x, x.reverse.kunique.sort.number );
}

PROC CTOgroup( bat[oid,any] x, bat[oid,any] y ): bat[oid,int] := {
  VAR nx, ny;
  nx := CTOgroup( x );
  ny := CTOgroup( y );
  RETURN [+]([<<](nx,20),ny).reverse.sort.reverse;
}

#
# CTOgroup_last is more efficient, but cannot propagate the ordering
# to a new table
#

PROC CTOgroup_last( bat[any::1,any::2] x ): bat[any::1,int] := {
  RETURN x.reverse.sort.reverse.number.sort;
}

PROC CTOgroup_last( bat[oid,any] x, bat[oid,any] y ): bat[oid,int] := {
  VAR nx, ny;
  nx := CTOgroup( x );
  ny := CTOgroup_last( y );
  RETURN [+]([<<](nx,20),ny).reverse.sort.reverse;
}

#
# lexicographical sort of synced bats xv and yv
#

PROC lexsort_intern( bat[oid,any::1] xv, bat[oid,any::2] yv ): 
  bat[any::1,any::2] := 
{
  VAR x,y, cn, rel;

  # combine numbers, and sort
  cn := CTOgroup_last( xv, yv );
  rel := cn.mark(0@0);
  # propagate order
  x := xv.reverse.join(rel).reverse;
  y := yv.reverse.join(rel).reverse;

  RETURN join(x.reverse, y);
}

#
# split and then sort
#

PROC lexsort( bat[any::1, any::2] XY ): bat[any::1,any::2] := {
  #split XY
  VAR xv, yv;
  xv := XY.mark(0@0).reverse;
  yv := XY.reverse.mark(0@0).reverse;
  RETURN lexsort_intern( xv, yv );
}

PROC mygenjoin(op1, op2, fcn) := {
    VAR result := new(htype(op1), htype(op2));
    htype(op1).print;
    htype(op2).print;
    op1@batloop() {
        VAR h := $h;
        VAR t := $t;
        op2@batloop() {
            if ((*fcn)(t, $t)) insert(result, h, $h);
        }
    }
    RETURN result;
}
indexA  := new(oid,oid);
valuesA := new(oid,int);
orderA := new(oid,int);
valuesD := new(void,int);
indexB  := new(oid,oid);
valuesB := new(oid,int);
idsB  := new(oid,oid);
orderB := new(oid,int);
indexC  := new(void,oid);
valuesC := new(void,int);
indexA.insert(4@0,4@0);
indexA.insert(3@0,3@0);
indexA.insert(2@0,2@0);
indexA.insert(1@0,1@0);
indexA.insert(0@0,0@0);
valuesA.insert(0@0,10);
valuesA.insert(1@0,20);
valuesA.insert(2@0,30);
valuesA.insert(3@0,40);
valuesA.insert(4@0,50);
orderA.insert(0@0,2);
orderA.insert(1@0,1);
orderA.insert(2@0,4);
orderA.insert(3@0,3);
orderA.insert(4@0,0);
valuesD.insert(nil,20);
valuesD.insert(nil,30);
valuesD.insert(nil,40);
valuesD.insert(nil,10);
valuesD := valuesD.reverse.mark(0@0).reverse;
indexC.insert(nil,0@0);
indexC.insert(nil,1@0);
indexC.insert(nil,2@0);
indexC.insert(nil,3@0);
valuesC.insert(nil,50);
valuesC.insert(nil,30);
valuesC.insert(nil,10);
valuesC.insert(nil,10);
valuesC := valuesC.reverse.mark(0@0).reverse;
indexB.insert(0@0,409@0);
indexB.insert(1@0,408@0);
indexB.insert(2@0,407@0);
indexB.insert(2@0,406@0);
indexB.insert(2@0,405@0);
indexB.insert(4@0,404@0);
indexB.insert(4@0,403@0);
indexB.insert(4@0,402@0);
indexB.insert(4@0,401@0);
valuesB.insert(409@0,9000);
valuesB.insert(408@0,8000);
valuesB.insert(407@0,7000);
valuesB.insert(406@0,6000);
valuesB.insert(405@0,5000);
valuesB.insert(404@0,4000);
valuesB.insert(403@0,3000);
valuesB.insert(402@0,2000);
valuesB.insert(401@0,1000);
orderB.insert(409@0,9);
orderB.insert(408@0,8);
orderB.insert(407@0,7);
orderB.insert(406@0,6);
orderB.insert(405@0,5);
orderB.insert(404@0,4);
orderB.insert(403@0,3);
orderB.insert(402@0,1);
orderB.insert(401@0,2);
indexSet1 := new(oid,oid);
indexSet2 := new(oid,oid);
indexSet1.insert(0@0,10@0);
indexSet1.insert(1@0,11@0);
indexSet1.insert(2@0,12@0);
indexSet2.insert(0@0,10@0);
indexSet2.insert(1@0,11@0);
indexSet2.insert(2@0,12@0);
indexList1 := new(oid,oid);
indexList2 := new(oid,oid);
indexList3 := new(oid,oid);
indexList1.insert(10@0,100@0);
indexList1.insert(10@0,101@0);
indexList1.insert(11@0,102@0);
indexList1.insert(12@0,103@0);
indexList2.insert(10@0,100@0);
indexList2.insert(11@0,101@0);
indexList2.insert(11@0,102@0);
indexList2.insert(12@0,103@0);
indexList3.insert(100@0,100@0);
indexList3.insert(101@0,101@0);
indexList3.insert(101@0,102@0);
indexList3.insert(102@0,103@0);
valuesList1 := new(oid,int);
valuesList2 := new(oid,int);
valuesList3 := new(oid,int);
valuesList4 := new(oid,int);
valuesList1.insert(100@0,10);
valuesList1.insert(101@0,11);
valuesList1.insert(103@0,11);
valuesList1.insert(102@0,11);
valuesList2.insert(100@0,20);
valuesList2.insert(102@0,21);
valuesList2.insert(101@0,22);
valuesList2.insert(103@0,22);
valuesList3.insert(100@0,30);
valuesList3.insert(101@0,31);
valuesList3.insert(103@0,32);
valuesList3.insert(102@0,33);
valuesList4.insert(100@0,40);
valuesList4.insert(101@0,41);
valuesList4.insert(102@0,42);
valuesList4.insert(103@0,43);
valuesTuple1 := new(oid,int);
valuesTuple2 := new(oid,int);
valuesTuple1.insert(10@0,100);
valuesTuple1.insert(11@0,101);
valuesTuple1.insert(12@0,102);
valuesTuple2.insert(10@0,100);
valuesTuple2.insert(11@0,101);
valuesTuple2.insert(12@0,102);
orderList1 := new(oid,int);
orderList2 := new(oid,int);
orderList1.insert(100@0,1);
orderList1.insert(101@0,2);
orderList1.insert(102@0,3);
orderList1.insert(103@0,4);
orderList2.insert(100@0,4);
orderList2.insert(101@0,3);
orderList2.insert(102@0,2);
orderList2.insert(103@0,1);

reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-----------------#
# BAT:	  tmp_50  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
valuesA.find(4@0).print;
[ 50 ]
valuesA.find(1@0).print;
[ 20 ]
valuesA.find(0@0).print;
[ 10 ]
valuesA.find(3@0).print;
[ 40 ]
valuesA.find(2@0).print;
[ 30 ]
# [ 50 ,  20 ,  10 ,  40 ,  30 ]

indexA.print;
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
valuesA.find(4@0).print;
[ 50 ]
valuesA.find(3@0).print;
[ 40 ]
valuesA.find(2@0).print;
[ 30 ]
valuesA.find(1@0).print;
[ 20 ]
valuesA.find(0@0).print;
[ 10 ]
# { 50 ,  40 ,  30 ,  20 ,  10 }

reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-----------------#
# BAT:	  tmp_49  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
valuesA.find(4@0).print;
[ 50 ]
valuesA.find(1@0).print;
[ 20 ]
valuesA.find(0@0).print;
[ 10 ]
valuesA.find(3@0).print;
[ 40 ]
valuesA.find(2@0).print;
[ 30 ]
# [< 50 >, < 20 >, < 10 >, < 40 >, < 30 >]

indexA.print;
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
valuesA.find(4@0).print;
[ 50 ]
valuesA.find(3@0).print;
[ 40 ]
valuesA.find(2@0).print;
[ 30 ]
valuesA.find(1@0).print;
[ 20 ]
valuesA.find(0@0).print;
[ 10 ]
# {< 50 >, < 40 >, < 30 >, < 20 >, < 10 >}

_MMreverse_2 := reverse(indexA);
indexA.print;
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
reverse(select(reverse(indexB),4@0)).print;
#-----------------#
# BAT:	  tmp_49  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  404@0	  ]
[ 4@0,	  403@0	  ]
[ 4@0,	  402@0	  ]
[ 4@0,	  401@0	  ]
valuesB.find(404@0).print;
[ 4000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(402@0).print;
[ 2000 ]
valuesB.find(401@0).print;
[ 1000 ]
reverse(select(reverse(indexB),3@0)).print;
#-----------------#
# BAT:	  tmp_49  #
# (oid)	  (oid)	  #
#-----------------#
reverse(select(reverse(indexB),2@0)).print;
#-----------------#
# BAT:	  tmp_49  #
# (oid)	  (oid)	  #
#-----------------#
[ 2@0,	  407@0	  ]
[ 2@0,	  406@0	  ]
[ 2@0,	  405@0	  ]
valuesB.find(407@0).print;
[ 7000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(405@0).print;
[ 5000 ]
reverse(select(reverse(indexB),1@0)).print;
#-----------------#
# BAT:	  tmp_49  #
# (oid)	  (oid)	  #
#-----------------#
[ 1@0,	  408@0	  ]
valuesB.find(408@0).print;
[ 8000 ]
reverse(select(reverse(indexB),0@0)).print;
#-----------------#
# BAT:	  tmp_49  #
# (oid)	  (oid)	  #
#-----------------#
[ 0@0,	  409@0	  ]
valuesB.find(409@0).print;
[ 9000 ]
# {{ 4000 ,  3000 ,  2000 ,  1000 }, {}, { 7000 ,  6000 ,  5000 }, { 8000 }, { 9000 }}

_MMreverse_2 := reverse(indexA);
indexA.print;
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),4@0))))).print;
#-----------------#
# BAT:	  tmp_55  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  402@0	  ]
[ 4@0,	  401@0	  ]
[ 4@0,	  403@0	  ]
[ 4@0,	  404@0	  ]
valuesB.find(402@0).print;
[ 2000 ]
valuesB.find(401@0).print;
[ 1000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(404@0).print;
[ 4000 ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),3@0))))).print;
#-----------------#
# BAT:	  tmp_52  #
# (oid)	  (oid)	  #
#-----------------#
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),2@0))))).print;
#-----------------#
# BAT:	  tmp_53  #
# (oid)	  (oid)	  #
#-----------------#
[ 2@0,	  405@0	  ]
[ 2@0,	  406@0	  ]
[ 2@0,	  407@0	  ]
valuesB.find(405@0).print;
[ 5000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(407@0).print;
[ 7000 ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),1@0))))).print;
#-----------------#
# BAT:	  tmp_55  #
# (oid)	  (oid)	  #
#-----------------#
[ 1@0,	  408@0	  ]
valuesB.find(408@0).print;
[ 8000 ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),0@0))))).print;
#-----------------#
# BAT:	  tmp_52  #
# (oid)	  (oid)	  #
#-----------------#
[ 0@0,	  409@0	  ]
valuesB.find(409@0).print;
[ 9000 ]
# {[ 2000 ,  1000 ,  3000 ,  4000 ], [], [ 5000 ,  6000 ,  7000 ], [ 8000 ], [ 9000 ]}

reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB))).print;
#-----------------#
# BAT:	  tmp_50  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  402@0	  ]
[ 4@0,	  401@0	  ]
[ 4@0,	  403@0	  ]
[ 4@0,	  404@0	  ]
[ 2@0,	  405@0	  ]
[ 2@0,	  406@0	  ]
[ 2@0,	  407@0	  ]
[ 1@0,	  408@0	  ]
[ 0@0,	  409@0	  ]
valuesB.find(402@0).print;
[ 2000 ]
valuesB.find(401@0).print;
[ 1000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(404@0).print;
[ 4000 ]
valuesB.find(405@0).print;
[ 5000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(407@0).print;
[ 7000 ]
valuesB.find(408@0).print;
[ 8000 ]
valuesB.find(409@0).print;
[ 9000 ]
# [ 2000 ,  1000 ,  3000 ,  4000 ,  5000 ,  6000 ,  7000 ,  8000 ,  9000 ]

indexB.print;
#-----------------#
# BAT:	  tmp_29  #
# (oid)	  (oid)	  #
#-----------------#
[ 0@0,	  409@0	  ]
[ 1@0,	  408@0	  ]
[ 2@0,	  407@0	  ]
[ 2@0,	  406@0	  ]
[ 2@0,	  405@0	  ]
[ 4@0,	  404@0	  ]
[ 4@0,	  403@0	  ]
[ 4@0,	  402@0	  ]
[ 4@0,	  401@0	  ]
valuesB.find(409@0).print;
[ 9000 ]
valuesB.find(408@0).print;
[ 8000 ]
valuesB.find(407@0).print;
[ 7000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(405@0).print;
[ 5000 ]
valuesB.find(404@0).print;
[ 4000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(402@0).print;
[ 2000 ]
valuesB.find(401@0).print;
[ 1000 ]
# { 9000 ,  8000 ,  7000 ,  6000 ,  5000 ,  4000 ,  3000 ,  2000 ,  1000 }

_MMreverse_2 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-----------------#
# BAT:	  tmp_51  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),4@0))))).print;
#-----------------#
# BAT:	  tmp_49  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  402@0	  ]
[ 4@0,	  401@0	  ]
[ 4@0,	  403@0	  ]
[ 4@0,	  404@0	  ]
valuesB.find(402@0).print;
[ 2000 ]
valuesB.find(401@0).print;
[ 1000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(404@0).print;
[ 4000 ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),1@0))))).print;
#-----------------#
# BAT:	  tmp_55  #
# (oid)	  (oid)	  #
#-----------------#
[ 1@0,	  408@0	  ]
valuesB.find(408@0).print;
[ 8000 ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),0@0))))).print;
#-----------------#
# BAT:	  tmp_51  #
# (oid)	  (oid)	  #
#-----------------#
[ 0@0,	  409@0	  ]
valuesB.find(409@0).print;
[ 9000 ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),3@0))))).print;
#-----------------#
# BAT:	  tmp_49  #
# (oid)	  (oid)	  #
#-----------------#
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),2@0))))).print;
#-----------------#
# BAT:	  tmp_53  #
# (oid)	  (oid)	  #
#-----------------#
[ 2@0,	  405@0	  ]
[ 2@0,	  406@0	  ]
[ 2@0,	  407@0	  ]
valuesB.find(405@0).print;
[ 5000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(407@0).print;
[ 7000 ]
# [[ 2000 ,  1000 ,  3000 ,  4000 ], [ 8000 ], [ 9000 ], [], [ 5000 ,  6000 ,  7000 ]]

_MMreverse_2 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-----------------#
# BAT:	  tmp_50  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
reverse(select(reverse(indexB),4@0)).print;
#-----------------#
# BAT:	  tmp_50  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  404@0	  ]
[ 4@0,	  403@0	  ]
[ 4@0,	  402@0	  ]
[ 4@0,	  401@0	  ]
valuesB.find(404@0).print;
[ 4000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(402@0).print;
[ 2000 ]
valuesB.find(401@0).print;
[ 1000 ]
reverse(select(reverse(indexB),1@0)).print;
#-----------------#
# BAT:	  tmp_50  #
# (oid)	  (oid)	  #
#-----------------#
[ 1@0,	  408@0	  ]
valuesB.find(408@0).print;
[ 8000 ]
reverse(select(reverse(indexB),0@0)).print;
#-----------------#
# BAT:	  tmp_50  #
# (oid)	  (oid)	  #
#-----------------#
[ 0@0,	  409@0	  ]
valuesB.find(409@0).print;
[ 9000 ]
reverse(select(reverse(indexB),3@0)).print;
#-----------------#
# BAT:	  tmp_50  #
# (oid)	  (oid)	  #
#-----------------#
reverse(select(reverse(indexB),2@0)).print;
#-----------------#
# BAT:	  tmp_50  #
# (oid)	  (oid)	  #
#-----------------#
[ 2@0,	  407@0	  ]
[ 2@0,	  406@0	  ]
[ 2@0,	  405@0	  ]
valuesB.find(407@0).print;
[ 7000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(405@0).print;
[ 5000 ]
# [{ 4000 ,  3000 ,  2000 ,  1000 }, { 8000 }, { 9000 }, {}, { 7000 ,  6000 ,  5000 }]

_MMreverse_2 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-----------------#
# BAT:	  tmp_48  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA)))),4@0))))).print;
#-----------------#
# BAT:	  tmp_51  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
valuesA.find(4@0).print;
[ 50 ]
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA)))),1@0))))).print;
#-----------------#
# BAT:	  tmp_49  #
# (oid)	  (oid)	  #
#-----------------#
[ 1@0,	  1@0	  ]
valuesA.find(1@0).print;
[ 20 ]
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA)))),0@0))))).print;
#-----------------#
# BAT:	  tmp_48  #
# (oid)	  (oid)	  #
#-----------------#
[ 0@0,	  0@0	  ]
valuesA.find(0@0).print;
[ 10 ]
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA)))),3@0))))).print;
#-----------------#
# BAT:	  tmp_51  #
# (oid)	  (oid)	  #
#-----------------#
[ 3@0,	  3@0	  ]
valuesA.find(3@0).print;
[ 40 ]
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA)))),2@0))))).print;
#-----------------#
# BAT:	  tmp_49  #
# (oid)	  (oid)	  #
#-----------------#
[ 2@0,	  2@0	  ]
valuesA.find(2@0).print;
[ 30 ]
# [[ 50 ], [ 20 ], [ 10 ], [ 40 ], [ 30 ]]

_MMcopy_2 := copy(indexA);
_MMreverse_3 := reverse(_MMcopy_2);
_MMnumber_4 := number(_MMreverse_3);
reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(indexA))).print;
#-----------------#
# BAT:	  tmp_54  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
valuesA.find(4@0).print;
[ 50 ]
valuesA.find(3@0).print;
[ 40 ]
valuesA.find(2@0).print;
[ 30 ]
valuesA.find(1@0).print;
[ 20 ]
valuesA.find(0@0).print;
[ 10 ]
# [ 50 ,  40 ,  30 ,  20 ,  10 ]

_MMcopy_2 := copy(indexB);
_MMreverse_3 := reverse(_MMcopy_2);
_MMnumber_4 := number(_MMreverse_3);
_MMreverse_5 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-----------------#
# BAT:	  tmp_53  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(indexB)))),4@0))))).print;
#-----------------#
# BAT:	  tmp_57  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  404@0	  ]
[ 4@0,	  403@0	  ]
[ 4@0,	  402@0	  ]
[ 4@0,	  401@0	  ]
valuesB.find(404@0).print;
[ 4000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(402@0).print;
[ 2000 ]
valuesB.find(401@0).print;
[ 1000 ]
reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(indexB)))),1@0))))).print;
#-----------------#
# BAT:	  tmp_52  #
# (oid)	  (oid)	  #
#-----------------#
[ 1@0,	  408@0	  ]
valuesB.find(408@0).print;
[ 8000 ]
reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(indexB)))),0@0))))).print;
#-----------------#
# BAT:	  tmp_50  #
# (oid)	  (oid)	  #
#-----------------#
[ 0@0,	  409@0	  ]
valuesB.find(409@0).print;
[ 9000 ]
reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(indexB)))),3@0))))).print;
#-----------------#
# BAT:	  tmp_55  #
# (oid)	  (oid)	  #
#-----------------#
reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(indexB)))),2@0))))).print;
#-----------------#
# BAT:	  tmp_48  #
# (oid)	  (oid)	  #
#-----------------#
[ 2@0,	  407@0	  ]
[ 2@0,	  406@0	  ]
[ 2@0,	  405@0	  ]
valuesB.find(407@0).print;
[ 7000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(405@0).print;
[ 5000 ]
# [[ 4000 ,  3000 ,  2000 ,  1000 ], [ 8000 ], [ 9000 ], [], [ 7000 ,  6000 ,  5000 ]]

indexA.print;
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
valuesA.find(4@0).print;
[ 50 ]
valuesA.find(3@0).print;
[ 40 ]
valuesA.find(2@0).print;
[ 30 ]
valuesA.find(1@0).print;
[ 20 ]
valuesA.find(0@0).print;
[ 10 ]
# { 50 ,  40 ,  30 ,  20 ,  10 }

_MMreverse_2 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-----------------#
# BAT:	  tmp_52  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
reverse(select(reverse(indexB),4@0)).print;
#-----------------#
# BAT:	  tmp_52  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  404@0	  ]
[ 4@0,	  403@0	  ]
[ 4@0,	  402@0	  ]
[ 4@0,	  401@0	  ]
valuesB.find(404@0).print;
[ 4000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(402@0).print;
[ 2000 ]
valuesB.find(401@0).print;
[ 1000 ]
reverse(select(reverse(indexB),1@0)).print;
#-----------------#
# BAT:	  tmp_52  #
# (oid)	  (oid)	  #
#-----------------#
[ 1@0,	  408@0	  ]
valuesB.find(408@0).print;
[ 8000 ]
reverse(select(reverse(indexB),0@0)).print;
#-----------------#
# BAT:	  tmp_52  #
# (oid)	  (oid)	  #
#-----------------#
[ 0@0,	  409@0	  ]
valuesB.find(409@0).print;
[ 9000 ]
reverse(select(reverse(indexB),3@0)).print;
#-----------------#
# BAT:	  tmp_52  #
# (oid)	  (oid)	  #
#-----------------#
reverse(select(reverse(indexB),2@0)).print;
#-----------------#
# BAT:	  tmp_52  #
# (oid)	  (oid)	  #
#-----------------#
[ 2@0,	  407@0	  ]
[ 2@0,	  406@0	  ]
[ 2@0,	  405@0	  ]
valuesB.find(407@0).print;
[ 7000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(405@0).print;
[ 5000 ]
# [{ 4000 ,  3000 ,  2000 ,  1000 }, { 8000 }, { 9000 }, {}, { 7000 ,  6000 ,  5000 }]

_MMkunique_2 := kunique(indexA);
_MMcastnil_3 := _MMkunique_2.mark(0@0);
_MMreverse_4 := reverse(_MMcastnil_3);
_MMcastnil_5 := valuesA.mark(0@0);
_MMjoin_6 := join(indexA,_MMcastnil_5);
_MMjoin_7 := join(_MMreverse_4,_MMjoin_6);
_MMkunique_8 := kunique(indexB);
_MMcount_9 := count(_MMkunique_2);
_MMoid_10 := oid(_MMcount_9);
_MMmark_11 := mark(_MMkunique_8,_MMoid_10);
_MMreverse_12 := reverse(_MMmark_11);
_MMcount_13 := count(indexA);
_MMoid_14 := oid(_MMcount_13);
_MMmark_15 := mark(valuesB,_MMoid_14);
_MMjoin_16 := join(indexB,_MMmark_15);
_MMjoin_17 := join(_MMreverse_12,_MMjoin_16);
_MMsunion_18 := sunion(_MMjoin_7,_MMjoin_17);
_MMreverse_19 := reverse(_MMcastnil_5);
_MMjoin_20 := join(_MMreverse_19,valuesA);
_MMsort_21 := sort(_MMjoin_20);
_MMreverse_22 := reverse(_MMmark_15);
_MMjoin_23 := join(_MMreverse_22,valuesB);
_MMsort_24 := sort(_MMjoin_23);
_MMunion_25 := union(_MMsort_21,_MMsort_24);
_MMnilcast_26 := _MMunion_25.reverse.mark(0@0).reverse;
_MMreverse_27 := reverse(_MMcastnil_5);
_MMreverse_28 := reverse(orderA);
_MMsort_29 := sort(_MMreverse_28);
_MMreverse_30 := reverse(_MMsort_29);
_MMnumber_31 := number(_MMreverse_30);
_MMjoin_32 := join(_MMreverse_27,_MMnumber_31);
_MMreverse_33 := reverse(_MMmark_15);
_MMreverse_34 := reverse(orderB);
_MMsort_35 := sort(_MMreverse_34);
_MMreverse_36 := reverse(_MMsort_35);
_MMnumber_37 := number(_MMreverse_36);
_MMcastval_38 := castval(_MMreverse_36,_MMcount_13);
_MMoper_39 := [+](_MMnumber_37,_MMcastval_38);
_MMjoin_40 := join(_MMreverse_33,_MMoper_39);
_MMsunion_41 := sunion(_MMjoin_32,_MMjoin_40);
reverse(copy_order(reverse(sort(reverse(_MMsunion_41))),reverse(_MMsunion_18))).print;
#-----------------#
# BAT:	  tmp_78  #
# (oid)	  (oid)	  #
#-----------------#
[ 0@0,	  4@0	  ]
[ 3@0,	  1@0	  ]
[ 4@0,	  0@0	  ]
[ 1@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
[ 8@0,	  12@0	  ]
[ 8@0,	  13@0	  ]
[ 8@0,	  11@0	  ]
[ 8@0,	  10@0	  ]
[ 7@0,	  9@0	  ]
[ 7@0,	  8@0	  ]
[ 7@0,	  7@0	  ]
[ 6@0,	  6@0	  ]
[ 5@0,	  5@0	  ]
_MMnilcast_26.find(4@0).print;
[ 50 ]
_MMnilcast_26.find(1@0).print;
[ 20 ]
_MMnilcast_26.find(0@0).print;
[ 10 ]
_MMnilcast_26.find(3@0).print;
[ 40 ]
_MMnilcast_26.find(2@0).print;
[ 30 ]
_MMnilcast_26.find(12@0).print;
[ 2000 ]
_MMnilcast_26.find(13@0).print;
[ 1000 ]
_MMnilcast_26.find(11@0).print;
[ 3000 ]
_MMnilcast_26.find(10@0).print;
[ 4000 ]
_MMnilcast_26.find(9@0).print;
[ 5000 ]
_MMnilcast_26.find(8@0).print;
[ 6000 ]
_MMnilcast_26.find(7@0).print;
[ 7000 ]
_MMnilcast_26.find(6@0).print;
[ 8000 ]
_MMnilcast_26.find(5@0).print;
[ 9000 ]
# [ 50 ,  20 ,  10 ,  40 ,  30 ,  2000 ,  1000 ,  3000 ,  4000 ,  5000 ,  6000 ,  7000 ,  8000 ,  9000 ]

_MMreverse_2 := reverse(valuesTuple2);
_MMjoin_3 := join(valuesTuple1,_MMreverse_2);
_MMreverse_4 := reverse(_MMjoin_3);
_MMnilcast_5 := _MMreverse_4.reverse.mark(0@0).reverse;
_MMjoin_6 := join(_MMnilcast_5,valuesTuple1);
_MMreverse_7 := reverse(_MMjoin_6);
_MMnilcast_8 := _MMreverse_7.reverse.mark(0@0).reverse;
_MMreverse_9 := reverse(indexSet1);
_MMjoin_10 := join(_MMnilcast_5,_MMreverse_9);
_MMcastnil_11 := _MMjoin_10.mark(0@0);
_MMreverse_12 := reverse(_MMcastnil_11);
_MMjoin_13 := join(_MMnilcast_5,indexList1);
_MMcastnil_14 := _MMjoin_13.mark(0@0);
_MMnilcast_15 := _MMjoin_13.reverse.mark(0@0).reverse;
_MMjoin_16 := join(_MMnilcast_15,valuesList1);
_MMcastnil_17 := _MMjoin_16.mark(0@0);
_MMjoin_18 := join(_MMcastnil_14,_MMcastnil_17);
_MMjoin_19 := join(_MMreverse_12,_MMjoin_18);
_MMnilcast_20 := _MMjoin_3.reverse.mark(0@0).reverse;
_MMreverse_21 := reverse(indexSet2);
_MMjoin_22 := join(_MMnilcast_20,_MMreverse_21);
_MMcastnil_23 := _MMjoin_22.mark(0@0);
_MMreverse_24 := reverse(_MMcastnil_23);
_MMjoin_25 := join(_MMnilcast_20,indexList2);
_MMcastnil_26 := _MMjoin_25.mark(0@0);
_MMnilcast_27 := _MMjoin_25.reverse.mark(0@0).reverse;
_MMjoin_28 := join(_MMnilcast_27,valuesList2);
_MMcount_29 := count(_MMcastnil_14);
_MMoid_30 := oid(_MMcount_29);
_MMmark_31 := mark(_MMjoin_28,_MMoid_30);
_MMjoin_32 := join(_MMcastnil_26,_MMmark_31);
_MMjoin_33 := join(_MMreverse_24,_MMjoin_32);
_MMsunion_34 := sunion(_MMjoin_19,_MMjoin_33);
_MMreverse_35 := reverse(_MMcastnil_17);
_MMjoin_36 := join(_MMreverse_35,_MMjoin_16);
_MMsort_37 := sort(_MMjoin_36);
_MMreverse_38 := reverse(_MMmark_31);
_MMjoin_39 := join(_MMreverse_38,_MMjoin_28);
_MMsort_40 := sort(_MMjoin_39);
_MMunion_41 := union(_MMsort_37,_MMsort_40);
_MMnilcast_42 := _MMunion_41.reverse.mark(0@0).reverse;
_MMreverse_43 := reverse(_MMcastnil_17);
_MMjoin_44 := join(_MMnilcast_15,orderList1);
_MMreverse_45 := reverse(_MMjoin_44);
_MMsort_46 := sort(_MMreverse_45);
_MMreverse_47 := reverse(_MMsort_46);
_MMnumber_48 := number(_MMreverse_47);
_MMreverse_49 := reverse(_MMcastnil_14);
_MMjoin_50 := join(_MMcastnil_14,_MMnumber_48);
_MMoper_51 := {min}(_MMjoin_50);
_MMjoin_52 := join(_MMreverse_49,_MMoper_51);
_MMcopy_order_53 := copy_order(_MMnumber_48,_MMjoin_52);
_MMoper_54 := [-](_MMnumber_48,_MMcopy_order_53);
_MMreverse_55 := reverse(_MMcastnil_14);
_MMoper_56 := {count}(_MMcastnil_14);
_MMnumber_57 := number(_MMoper_56);
_MMoper_58 := [<<](_MMnumber_57,20);
_MMjoin_59 := join(_MMreverse_55,_MMoper_58);
_MMoper_60 := [+](_MMoper_54,_MMjoin_59);
_MMjoin_61 := join(_MMreverse_43,_MMoper_60);
_MMreverse_62 := reverse(_MMmark_31);
_MMjoin_63 := join(_MMnilcast_27,orderList2);
_MMreverse_64 := reverse(_MMjoin_63);
_MMsort_65 := sort(_MMreverse_64);
_MMreverse_66 := reverse(_MMsort_65);
_MMnumber_67 := number(_MMreverse_66);
_MMreverse_68 := reverse(_MMcastnil_26);
_MMjoin_69 := join(_MMcastnil_26,_MMnumber_67);
_MMoper_70 := {min}(_MMjoin_69);
_MMjoin_71 := join(_MMreverse_68,_MMoper_70);
_MMcopy_order_72 := copy_order(_MMnumber_67,_MMjoin_71);
_MMoper_73 := [-](_MMnumber_67,_MMcopy_order_72);
_MMreverse_74 := reverse(_MMcastnil_26);
_MMreverse_75 := reverse(_MMcastnil_23);
_MMjoin_76 := join(_MMcastnil_11,_MMreverse_75);
_MMreverse_77 := reverse(_MMjoin_76);
_MMjoin_78 := join(_MMreverse_77,_MMoper_56);
_MMjoin_79 := join(_MMreverse_74,_MMjoin_78);
_MMoper_80 := [+](_MMoper_73,_MMjoin_79);
_MMreverse_81 := reverse(_MMcastnil_26);
_MMoper_82 := {count}(_MMcastnil_26);
_MMnumber_83 := number(_MMoper_82);
_MMoper_84 := [<<](_MMnumber_83,20);
_MMjoin_85 := join(_MMreverse_81,_MMoper_84);
_MMoper_86 := [+](_MMoper_80,_MMjoin_85);
_MMjoin_87 := join(_MMreverse_62,_MMoper_86);
_MMsunion_88 := sunion(_MMjoin_61,_MMjoin_87);
_MMreverse_89 := reverse(_MMcastnil_11);
_MMjoin_90 := join(_MMreverse_89,_MMjoin_10);
_MMreverse_91 := reverse(_MMcastnil_23);
_MMjoin_92 := join(_MMreverse_91,_MMjoin_22);
_MMsunion_93 := sunion(_MMjoin_90,_MMjoin_92);
_MMnilcast_8.print;
#-----------------#
# BAT:	  tmp_53  #
# (void)  (void)  #
#-----------------#
[ 0@0,	  0@0	  ]
[ 1@0,	  1@0	  ]
[ 2@0,	  2@0	  ]
reverse(copy_order(reverse(sort(reverse(_MMsunion_88))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMsunion_88))),reverse(_MMsunion_34)))),0@0))))).print;
#-------------------------#
# BAT:	  tmp_148	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 0@0,	  0@0		  ]
[ 0@0,	  1@0		  ]
[ 0@0,	  4@0		  ]
_MMnilcast_42.find(0@0).print;
[ 10 ]
_MMnilcast_42.find(1@0).print;
[ 11 ]
_MMnilcast_42.find(4@0).print;
[ 20 ]
reverse(copy_order(reverse(sort(reverse(_MMsunion_88))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMsunion_88))),reverse(_MMsunion_34)))),1@0))))).print;
#-------------------------#
# BAT:	  tmp_144	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  3@0		  ]
[ 1@0,	  5@0		  ]
[ 1@0,	  6@0		  ]
_MMnilcast_42.find(3@0).print;
[ 11 ]
_MMnilcast_42.find(5@0).print;
[ 21 ]
_MMnilcast_42.find(6@0).print;
[ 22 ]
reverse(copy_order(reverse(sort(reverse(_MMsunion_88))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMsunion_88))),reverse(_MMsunion_34)))),2@0))))).print;
#-------------------------#
# BAT:	  tmp_142	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  2@0		  ]
[ 2@0,	  7@0		  ]
_MMnilcast_42.find(2@0).print;
[ 11 ]
_MMnilcast_42.find(7@0).print;
[ 22 ]
# {[ 10 ,  11 ,  20 ], [ 11 ,  21 ,  22 ], [ 11 ,  22 ]}

_MMCTOgroup_2 := CTOgroup(valuesA);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_142	  #
# (oid)	  (void)	  #
#-------------------------#
[ 0@0,	  0@0		  ]
[ 1@0,	  1@0		  ]
[ 2@0,	  2@0		  ]
[ 3@0,	  3@0		  ]
[ 4@0,	  4@0		  ]
valuesA.find(0@0).print;
[ 10 ]
valuesA.find(1@0).print;
[ 20 ]
valuesA.find(2@0).print;
[ 30 ]
valuesA.find(3@0).print;
[ 40 ]
valuesA.find(4@0).print;
[ 50 ]
# [ 10 ,  20 ,  30 ,  40 ,  50 ]

_MMoper_2 := [-](50,valuesA);
_MMCTOgroup_3 := CTOgroup(_MMoper_2);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_3))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_143	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  4@0		  ]
[ 3@0,	  3@0		  ]
[ 2@0,	  2@0		  ]
[ 1@0,	  1@0		  ]
[ 0@0,	  0@0		  ]
valuesA.find(4@0).print;
[ 50 ]
valuesA.find(3@0).print;
[ 40 ]
valuesA.find(2@0).print;
[ 30 ]
valuesA.find(1@0).print;
[ 20 ]
valuesA.find(0@0).print;
[ 10 ]
# [ 50 ,  40 ,  30 ,  20 ,  10 ]

_MMCTOgroup_2 := CTOgroup(valuesA);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_144	  #
# (oid)	  (void)	  #
#-------------------------#
[ 0@0,	  0@0		  ]
[ 1@0,	  1@0		  ]
[ 2@0,	  2@0		  ]
[ 3@0,	  3@0		  ]
[ 4@0,	  4@0		  ]
valuesA.find(0@0).print;
[ 10 ]
valuesA.find(1@0).print;
[ 20 ]
valuesA.find(2@0).print;
[ 30 ]
valuesA.find(3@0).print;
[ 40 ]
valuesA.find(4@0).print;
[ 50 ]
# [< 10 >, < 20 >, < 30 >, < 40 >, < 50 >]

_MMreverse_2 := reverse(indexA);
_MMreverse_3 := reverse(orderB);
_MMsort_4 := sort(_MMreverse_3);
_MMnilcast_5 := _MMsort_4.reverse.mark(0@0).reverse;
_MMreverse_6 := reverse(_MMnilcast_5);
_MMjoin_7 := join(indexB,_MMreverse_6);
_MMlexsort_8 := lexsort(_MMjoin_7);
_MMreverse_9 := reverse(_MMlexsort_8);
_MMcopy_order_10 := copy_order(_MMreverse_9,_MMnilcast_5);
_MMreverse_11 := reverse(_MMcopy_order_10);
_MMoper_12 := [str](valuesB);
_MMcopy_order_13 := copy_order(_MMreverse_11,_MMoper_12);
_MMjoin_14 := join(_MMcopy_order_10,_MMcopy_order_13);
_MMjoin_15 := join(_MMlexsort_8,_MMjoin_14);
_MMstr_concat_16 := str_concat(_MMjoin_15);
_MMmergecast_17 := mergecast(_MMreverse_2,_MMstr_concat_16,"");
_MMCTOgroup_18 := CTOgroup(_MMmergecast_17);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_18))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_152	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 3@0,	  3@0		  ]
[ 4@0,	  4@0		  ]
[ 2@0,	  2@0		  ]
[ 1@0,	  1@0		  ]
[ 0@0,	  0@0		  ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),3@0))))).print;
#-------------------------#
# BAT:	  tmp_159	  #
# (oid)	  (oid)		  #
#-------------------------#
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),4@0))))).print;
#-------------------------#
# BAT:	  tmp_161	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  402@0		  ]
[ 4@0,	  401@0		  ]
[ 4@0,	  403@0		  ]
[ 4@0,	  404@0		  ]
valuesB.find(402@0).print;
[ 2000 ]
valuesB.find(401@0).print;
[ 1000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(404@0).print;
[ 4000 ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),2@0))))).print;
#-------------------------#
# BAT:	  tmp_158	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  405@0		  ]
[ 2@0,	  406@0		  ]
[ 2@0,	  407@0		  ]
valuesB.find(405@0).print;
[ 5000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(407@0).print;
[ 7000 ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),1@0))))).print;
#-------------------------#
# BAT:	  tmp_159	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  408@0		  ]
valuesB.find(408@0).print;
[ 8000 ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),0@0))))).print;
#-------------------------#
# BAT:	  tmp_161	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 0@0,	  409@0		  ]
valuesB.find(409@0).print;
[ 9000 ]
# [[], [ 2000 ,  1000 ,  3000 ,  4000 ], [ 5000 ,  6000 ,  7000 ], [ 8000 ], [ 9000 ]]

_MMreverse_2 := reverse(indexA);
_MMoper_3 := [str](valuesB);
_MMjoin_4 := join(indexB,_MMoper_3);
_MMsort_5 := sort(_MMjoin_4);
_MMstr_concat_6 := str_concat(_MMsort_5);
_MMmergecast_7 := mergecast(_MMreverse_2,_MMstr_concat_6,"");
_MMCTOgroup_8 := CTOgroup(_MMmergecast_7);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_8))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_159	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 3@0,	  3@0		  ]
[ 4@0,	  4@0		  ]
[ 2@0,	  2@0		  ]
[ 1@0,	  1@0		  ]
[ 0@0,	  0@0		  ]
reverse(select(reverse(indexB),3@0)).print;
#-------------------------#
# BAT:	  tmp_159	  #
# (oid)	  (oid)		  #
#-------------------------#
reverse(select(reverse(indexB),4@0)).print;
#-------------------------#
# BAT:	  tmp_159	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  404@0		  ]
[ 4@0,	  403@0		  ]
[ 4@0,	  402@0		  ]
[ 4@0,	  401@0		  ]
valuesB.find(404@0).print;
[ 4000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(402@0).print;
[ 2000 ]
valuesB.find(401@0).print;
[ 1000 ]
reverse(select(reverse(indexB),2@0)).print;
#-------------------------#
# BAT:	  tmp_159	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  407@0		  ]
[ 2@0,	  406@0		  ]
[ 2@0,	  405@0		  ]
valuesB.find(407@0).print;
[ 7000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(405@0).print;
[ 5000 ]
reverse(select(reverse(indexB),1@0)).print;
#-------------------------#
# BAT:	  tmp_159	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  408@0		  ]
valuesB.find(408@0).print;
[ 8000 ]
reverse(select(reverse(indexB),0@0)).print;
#-------------------------#
# BAT:	  tmp_159	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 0@0,	  409@0		  ]
valuesB.find(409@0).print;
[ 9000 ]
# [{}, { 4000 ,  3000 ,  2000 ,  1000 }, { 7000 ,  6000 ,  5000 }, { 8000 }, { 9000 }]

_MMCTOgroup_2 := CTOgroup(valuesList1);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexList1))).print;
#-------------------------#
# BAT:	  tmp_164	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 10@0,	  100@0		  ]
[ 10@0,	  101@0		  ]
[ 12@0,	  103@0		  ]
[ 11@0,	  102@0		  ]
valuesList1.find(100@0).print;
[ 10 ]
valuesList1.find(101@0).print;
[ 11 ]
valuesList1.find(103@0).print;
[ 11 ]
valuesList1.find(102@0).print;
[ 11 ]
# [< 10 >, < 11 >, < 11 >, < 11 >]

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMCTOgroup_3 := CTOgroup(valuesList2);
_MMCTOgroup_last_4 := CTOgroup_last(_MMCTOgroup_2,_MMCTOgroup_3);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(indexList1))).print;
#-------------------------#
# BAT:	  tmp_165	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 10@0,	  100@0		  ]
[ 11@0,	  102@0		  ]
[ 10@0,	  101@0		  ]
[ 12@0,	  103@0		  ]
valuesList1.find(100@0).print;
[ 10 ]
valuesList2.find(100@0).print;
[ 20 ]
valuesList1.find(102@0).print;
[ 11 ]
valuesList2.find(102@0).print;
[ 21 ]
valuesList1.find(101@0).print;
[ 11 ]
valuesList2.find(101@0).print;
[ 22 ]
valuesList1.find(103@0).print;
[ 11 ]
valuesList2.find(103@0).print;
[ 22 ]
# [< 10 ,  20 >, < 11 ,  21 >, < 11 ,  22 >, < 11 ,  22 >]

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMCTOgroup_3 := CTOgroup(valuesList2);
_MMCTOgroup_4 := CTOgroup(_MMCTOgroup_2,_MMCTOgroup_3);
_MMCTOgroup_5 := CTOgroup(valuesList3);
_MMCTOgroup_last_6 := CTOgroup_last(_MMCTOgroup_4,_MMCTOgroup_5);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(indexList1))).print;
#-------------------------#
# BAT:	  tmp_168	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 10@0,	  100@0		  ]
[ 11@0,	  102@0		  ]
[ 10@0,	  101@0		  ]
[ 12@0,	  103@0		  ]
valuesList1.find(100@0).print;
[ 10 ]
valuesList2.find(100@0).print;
[ 20 ]
valuesList3.find(100@0).print;
[ 30 ]
valuesList1.find(102@0).print;
[ 11 ]
valuesList2.find(102@0).print;
[ 21 ]
valuesList3.find(102@0).print;
[ 33 ]
valuesList1.find(101@0).print;
[ 11 ]
valuesList2.find(101@0).print;
[ 22 ]
valuesList3.find(101@0).print;
[ 31 ]
valuesList1.find(103@0).print;
[ 11 ]
valuesList2.find(103@0).print;
[ 22 ]
valuesList3.find(103@0).print;
[ 32 ]
# [< 10 ,  20 ,  30 >, < 11 ,  21 ,  33 >, < 11 ,  22 ,  31 >, < 11 ,  22 ,  32 >]

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMCTOgroup_3 := CTOgroup(valuesList2);
_MMCTOgroup_4 := CTOgroup(_MMCTOgroup_2,_MMCTOgroup_3);
_MMCTOgroup_5 := CTOgroup(valuesList3);
_MMCTOgroup_6 := CTOgroup(_MMCTOgroup_4,_MMCTOgroup_5);
_MMCTOgroup_7 := CTOgroup(valuesList4);
_MMCTOgroup_last_8 := CTOgroup_last(_MMCTOgroup_6,_MMCTOgroup_7);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(indexList1))).print;
#-------------------------#
# BAT:	  tmp_172	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 10@0,	  100@0		  ]
[ 11@0,	  102@0		  ]
[ 10@0,	  101@0		  ]
[ 12@0,	  103@0		  ]
valuesList1.find(100@0).print;
[ 10 ]
valuesList2.find(100@0).print;
[ 20 ]
valuesList3.find(100@0).print;
[ 30 ]
valuesList4.find(100@0).print;
[ 40 ]
valuesList1.find(102@0).print;
[ 11 ]
valuesList2.find(102@0).print;
[ 21 ]
valuesList3.find(102@0).print;
[ 33 ]
valuesList4.find(102@0).print;
[ 42 ]
valuesList1.find(101@0).print;
[ 11 ]
valuesList2.find(101@0).print;
[ 22 ]
valuesList3.find(101@0).print;
[ 31 ]
valuesList4.find(101@0).print;
[ 41 ]
valuesList1.find(103@0).print;
[ 11 ]
valuesList2.find(103@0).print;
[ 22 ]
valuesList3.find(103@0).print;
[ 32 ]
valuesList4.find(103@0).print;
[ 43 ]
# [< 10 ,  20 ,  30 ,  40 >, < 11 ,  21 ,  33 ,  42 >, < 11 ,  22 ,  31 ,  41 >, < 11 ,  22 ,  32 ,  43 >]

_MMCTOgroup_2 := CTOgroup(valuesList1);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexList1))).print;
#-------------------------#
# BAT:	  tmp_165	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 10@0,	  100@0		  ]
[ 10@0,	  101@0		  ]
[ 12@0,	  103@0		  ]
[ 11@0,	  102@0		  ]
valuesList1.find(100@0).print;
[ 10 ]
valuesList2.find(100@0).print;
[ 20 ]
valuesList3.find(100@0).print;
[ 30 ]
valuesList4.find(100@0).print;
[ 40 ]
valuesList1.find(101@0).print;
[ 11 ]
valuesList2.find(101@0).print;
[ 22 ]
valuesList3.find(101@0).print;
[ 31 ]
valuesList4.find(101@0).print;
[ 41 ]
valuesList1.find(103@0).print;
[ 11 ]
valuesList2.find(103@0).print;
[ 22 ]
valuesList3.find(103@0).print;
[ 32 ]
valuesList4.find(103@0).print;
[ 43 ]
valuesList1.find(102@0).print;
[ 11 ]
valuesList2.find(102@0).print;
[ 21 ]
valuesList3.find(102@0).print;
[ 33 ]
valuesList4.find(102@0).print;
[ 42 ]
# [< 10 ,  20 ,  30 ,  40 >, < 11 ,  22 ,  31 ,  41 >, < 11 ,  22 ,  32 ,  43 >, < 11 ,  21 ,  33 ,  42 >]

_MMCTOgroup_2 := CTOgroup(valuesList4);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexList1))).print;
#-------------------------#
# BAT:	  tmp_169	  #
# (oid)	  (void)	  #
#-------------------------#
[ 10@0,	  100@0		  ]
[ 10@0,	  101@0		  ]
[ 11@0,	  102@0		  ]
[ 12@0,	  103@0		  ]
valuesList1.find(100@0).print;
[ 10 ]
valuesList2.find(100@0).print;
[ 20 ]
valuesList3.find(100@0).print;
[ 30 ]
valuesList4.find(100@0).print;
[ 40 ]
valuesList1.find(101@0).print;
[ 11 ]
valuesList2.find(101@0).print;
[ 22 ]
valuesList3.find(101@0).print;
[ 31 ]
valuesList4.find(101@0).print;
[ 41 ]
valuesList1.find(102@0).print;
[ 11 ]
valuesList2.find(102@0).print;
[ 21 ]
valuesList3.find(102@0).print;
[ 33 ]
valuesList4.find(102@0).print;
[ 42 ]
valuesList1.find(103@0).print;
[ 11 ]
valuesList2.find(103@0).print;
[ 22 ]
valuesList3.find(103@0).print;
[ 32 ]
valuesList4.find(103@0).print;
[ 43 ]
# [< 10 ,  20 ,  30 ,  40 >, < 11 ,  22 ,  31 ,  41 >, < 11 ,  21 ,  33 ,  42 >, < 11 ,  22 ,  32 ,  43 >]

_MMCTOgroup_2 := CTOgroup(valuesList4);
_MMCTOgroup_3 := CTOgroup(valuesList3);
_MMCTOgroup_4 := CTOgroup(_MMCTOgroup_2,_MMCTOgroup_3);
_MMCTOgroup_5 := CTOgroup(valuesList2);
_MMCTOgroup_6 := CTOgroup(_MMCTOgroup_4,_MMCTOgroup_5);
_MMCTOgroup_7 := CTOgroup(valuesList1);
_MMCTOgroup_last_8 := CTOgroup_last(_MMCTOgroup_6,_MMCTOgroup_7);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(indexList1))).print;
#-------------------------#
# BAT:	  tmp_173	  #
# (oid)	  (void)	  #
#-------------------------#
[ 10@0,	  100@0		  ]
[ 10@0,	  101@0		  ]
[ 11@0,	  102@0		  ]
[ 12@0,	  103@0		  ]
valuesList1.find(100@0).print;
[ 10 ]
valuesList2.find(100@0).print;
[ 20 ]
valuesList3.find(100@0).print;
[ 30 ]
valuesList4.find(100@0).print;
[ 40 ]
valuesList1.find(101@0).print;
[ 11 ]
valuesList2.find(101@0).print;
[ 22 ]
valuesList3.find(101@0).print;
[ 31 ]
valuesList4.find(101@0).print;
[ 41 ]
valuesList1.find(102@0).print;
[ 11 ]
valuesList2.find(102@0).print;
[ 21 ]
valuesList3.find(102@0).print;
[ 33 ]
valuesList4.find(102@0).print;
[ 42 ]
valuesList1.find(103@0).print;
[ 11 ]
valuesList2.find(103@0).print;
[ 22 ]
valuesList3.find(103@0).print;
[ 32 ]
valuesList4.find(103@0).print;
[ 43 ]
# [< 10 ,  20 ,  30 ,  40 >, < 11 ,  22 ,  31 ,  41 >, < 11 ,  21 ,  33 ,  42 >, < 11 ,  22 ,  32 ,  43 >]

_MMkunique_2 := kunique(indexA);
_MMcastnil_3 := _MMkunique_2.mark(0@0);
_MMreverse_4 := reverse(_MMcastnil_3);
_MMcastnil_5 := valuesA.mark(0@0);
_MMjoin_6 := join(indexA,_MMcastnil_5);
_MMjoin_7 := join(_MMreverse_4,_MMjoin_6);
_MMkunique_8 := kunique(indexList1);
_MMcount_9 := count(_MMkunique_2);
_MMoid_10 := oid(_MMcount_9);
_MMmark_11 := mark(_MMkunique_8,_MMoid_10);
_MMreverse_12 := reverse(_MMmark_11);
_MMcount_13 := count(indexA);
_MMoid_14 := oid(_MMcount_13);
_MMmark_15 := mark(valuesList1,_MMoid_14);
_MMjoin_16 := join(indexList1,_MMmark_15);
_MMjoin_17 := join(_MMreverse_12,_MMjoin_16);
_MMsunion_18 := sunion(_MMjoin_7,_MMjoin_17);
_MMreverse_19 := reverse(_MMcastnil_5);
_MMjoin_20 := join(_MMreverse_19,valuesA);
_MMsort_21 := sort(_MMjoin_20);
_MMreverse_22 := reverse(_MMmark_15);
_MMjoin_23 := join(_MMreverse_22,valuesList1);
_MMsort_24 := sort(_MMjoin_23);
_MMunion_25 := union(_MMsort_21,_MMsort_24);
_MMnilcast_26 := _MMunion_25.reverse.mark(0@0).reverse;
_MMCTOgroup_27 := CTOgroup(_MMnilcast_26);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_27))),reverse(_MMsunion_18))).print;
#-------------------------#
# BAT:	  tmp_176	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 5@0,	  5@0		  ]
[ 4@0,	  0@0		  ]
[ 6@0,	  8@0		  ]
[ 5@0,	  6@0		  ]
[ 7@0,	  7@0		  ]
[ 3@0,	  1@0		  ]
[ 2@0,	  2@0		  ]
[ 1@0,	  3@0		  ]
[ 0@0,	  4@0		  ]
_MMnilcast_26.find(0@0).print;
[ 10 ]
_MMnilcast_26.find(5@0).print;
[ 10 ]
_MMnilcast_26.find(8@0).print;
[ 11 ]
_MMnilcast_26.find(6@0).print;
[ 11 ]
_MMnilcast_26.find(7@0).print;
[ 11 ]
_MMnilcast_26.find(1@0).print;
[ 20 ]
_MMnilcast_26.find(2@0).print;
[ 30 ]
_MMnilcast_26.find(3@0).print;
[ 40 ]
_MMnilcast_26.find(4@0).print;
[ 50 ]
# [ 10 ,  10 ,  11 ,  11 ,  11 ,  20 ,  30 ,  40 ,  50 ]

_MMCTOgroup_2 := CTOgroup(valuesB);
_MMreverse_3 := reverse(indexA);
indexA.print;
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),4@0))))).print;
#-------------------------#
# BAT:	  tmp_182	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  401@0		  ]
[ 4@0,	  402@0		  ]
[ 4@0,	  403@0		  ]
[ 4@0,	  404@0		  ]
valuesB.find(401@0).print;
[ 1000 ]
valuesB.find(402@0).print;
[ 2000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(404@0).print;
[ 4000 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),3@0))))).print;
#-------------------------#
# BAT:	  tmp_179	  #
# (oid)	  (oid)		  #
#-------------------------#
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),2@0))))).print;
#-------------------------#
# BAT:	  tmp_180	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  405@0		  ]
[ 2@0,	  406@0		  ]
[ 2@0,	  407@0		  ]
valuesB.find(405@0).print;
[ 5000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(407@0).print;
[ 7000 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),1@0))))).print;
#-------------------------#
# BAT:	  tmp_182	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  408@0		  ]
valuesB.find(408@0).print;
[ 8000 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),0@0))))).print;
#-------------------------#
# BAT:	  tmp_179	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 0@0,	  409@0		  ]
valuesB.find(409@0).print;
[ 9000 ]
# {[ 1000 ,  2000 ,  3000 ,  4000 ], [], [ 5000 ,  6000 ,  7000 ], [ 8000 ], [ 9000 ]}

_MMCTOgroup_2 := CTOgroup(valuesB);
_MMreverse_3 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_165	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  4@0		  ]
[ 1@0,	  1@0		  ]
[ 0@0,	  0@0		  ]
[ 3@0,	  3@0		  ]
[ 2@0,	  2@0		  ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),4@0))))).print;
#-------------------------#
# BAT:	  tmp_210	  #
# (oid)	  (void)	  #
#-------------------------#
[ 4@0,	  401@0		  ]
[ 4@0,	  402@0		  ]
[ 4@0,	  403@0		  ]
[ 4@0,	  404@0		  ]
valuesB.find(401@0).print;
[ 1000 ]
valuesB.find(402@0).print;
[ 2000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(404@0).print;
[ 4000 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),1@0))))).print;
#-------------------------#
# BAT:	  tmp_182	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  408@0		  ]
valuesB.find(408@0).print;
[ 8000 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),0@0))))).print;
#-------------------------#
# BAT:	  tmp_163	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 0@0,	  409@0		  ]
valuesB.find(409@0).print;
[ 9000 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),3@0))))).print;
#-------------------------#
# BAT:	  tmp_161	  #
# (oid)	  (oid)		  #
#-------------------------#
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),2@0))))).print;
#-------------------------#
# BAT:	  tmp_216	  #
# (oid)	  (void)	  #
#-------------------------#
[ 2@0,	  405@0		  ]
[ 2@0,	  406@0		  ]
[ 2@0,	  407@0		  ]
valuesB.find(405@0).print;
[ 5000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(407@0).print;
[ 7000 ]
# [[ 1000 ,  2000 ,  3000 ,  4000 ], [ 8000 ], [ 9000 ], [], [ 5000 ,  6000 ,  7000 ]]

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMreverse_3 := reverse(indexSet1);
indexSet1.print;
#-----------------#
# BAT:	  tmp_34  #
# (oid)	  (oid)	  #
#-----------------#
[ 0@0,	  10@0	  ]
[ 1@0,	  11@0	  ]
[ 2@0,	  12@0	  ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexList2)))),10@0))))).print;
#-------------------------#
# BAT:	  tmp_182	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 10@0,	  100@0		  ]
valuesList1.find(100@0).print;
[ 10 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexList2)))),11@0))))).print;
#-------------------------#
# BAT:	  tmp_161	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 11@0,	  101@0		  ]
[ 11@0,	  102@0		  ]
valuesList1.find(101@0).print;
[ 11 ]
valuesList1.find(102@0).print;
[ 11 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexList2)))),12@0))))).print;
#-------------------------#
# BAT:	  tmp_178	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 12@0,	  103@0		  ]
valuesList1.find(103@0).print;
[ 11 ]
# {[< 10 >], [< 11 >, < 11 >], [< 11 >]}

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMCTOgroup_3 := CTOgroup(valuesList2);
_MMCTOgroup_last_4 := CTOgroup_last(_MMCTOgroup_2,_MMCTOgroup_3);
_MMreverse_5 := reverse(indexSet1);
indexSet1.print;
#-----------------#
# BAT:	  tmp_34  #
# (oid)	  (oid)	  #
#-----------------#
[ 0@0,	  10@0	  ]
[ 1@0,	  11@0	  ]
[ 2@0,	  12@0	  ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(indexList2)))),10@0))))).print;
#-------------------------#
# BAT:	  tmp_176	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 10@0,	  100@0		  ]
valuesList1.find(100@0).print;
[ 10 ]
valuesList2.find(100@0).print;
[ 20 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(indexList2)))),11@0))))).print;
#-------------------------#
# BAT:	  tmp_179	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 11@0,	  102@0		  ]
[ 11@0,	  101@0		  ]
valuesList1.find(102@0).print;
[ 11 ]
valuesList2.find(102@0).print;
[ 21 ]
valuesList1.find(101@0).print;
[ 11 ]
valuesList2.find(101@0).print;
[ 22 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(indexList2)))),12@0))))).print;
#-------------------------#
# BAT:	  tmp_201	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 12@0,	  103@0		  ]
valuesList1.find(103@0).print;
[ 11 ]
valuesList2.find(103@0).print;
[ 22 ]
# {[< 10 ,  20 >], [< 11 ,  21 >, < 11 ,  22 >], [< 11 ,  22 >]}

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMCTOgroup_3 := CTOgroup(valuesList2);
_MMCTOgroup_4 := CTOgroup(_MMCTOgroup_2,_MMCTOgroup_3);
_MMCTOgroup_5 := CTOgroup(valuesList3);
_MMCTOgroup_last_6 := CTOgroup_last(_MMCTOgroup_4,_MMCTOgroup_5);
_MMreverse_7 := reverse(indexSet1);
indexSet1.print;
#-----------------#
# BAT:	  tmp_34  #
# (oid)	  (oid)	  #
#-----------------#
[ 0@0,	  10@0	  ]
[ 1@0,	  11@0	  ]
[ 2@0,	  12@0	  ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(indexList2)))),10@0))))).print;
#-----------------#
# BAT:	  tmp_66  #
# (oid)	  (oid)	  #
#-----------------#
[ 10@0,	  100@0		  ]
valuesList1.find(100@0).print;
[ 10 ]
valuesList2.find(100@0).print;
[ 20 ]
valuesList3.find(100@0).print;
[ 30 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(indexList2)))),11@0))))).print;
#-----------------#
# BAT:	  tmp_63  #
# (oid)	  (oid)	  #
#-----------------#
[ 11@0,	  102@0		  ]
[ 11@0,	  101@0		  ]
valuesList1.find(102@0).print;
[ 11 ]
valuesList2.find(102@0).print;
[ 21 ]
valuesList3.find(102@0).print;
[ 33 ]
valuesList1.find(101@0).print;
[ 11 ]
valuesList2.find(101@0).print;
[ 22 ]
valuesList3.find(101@0).print;
[ 31 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(indexList2)))),12@0))))).print;
#-------------------------#
# BAT:	  tmp_168	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 12@0,	  103@0		  ]
valuesList1.find(103@0).print;
[ 11 ]
valuesList2.find(103@0).print;
[ 22 ]
valuesList3.find(103@0).print;
[ 32 ]
# {[< 10 ,  20 ,  30 >], [< 11 ,  21 ,  33 >, < 11 ,  22 ,  31 >], [< 11 ,  22 ,  32 >]}

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMCTOgroup_3 := CTOgroup(valuesList2);
_MMCTOgroup_4 := CTOgroup(_MMCTOgroup_2,_MMCTOgroup_3);
_MMCTOgroup_5 := CTOgroup(valuesList3);
_MMCTOgroup_6 := CTOgroup(_MMCTOgroup_4,_MMCTOgroup_5);
_MMCTOgroup_7 := CTOgroup(valuesList4);
_MMCTOgroup_last_8 := CTOgroup_last(_MMCTOgroup_6,_MMCTOgroup_7);
_MMreverse_9 := reverse(indexSet1);
indexSet1.print;
#-----------------#
# BAT:	  tmp_34  #
# (oid)	  (oid)	  #
#-----------------#
[ 0@0,	  10@0	  ]
[ 1@0,	  11@0	  ]
[ 2@0,	  12@0	  ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(indexList2)))),10@0))))).print;
#-------------------------#
# BAT:	  tmp_166	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 10@0,	  100@0		  ]
valuesList1.find(100@0).print;
[ 10 ]
valuesList2.find(100@0).print;
[ 20 ]
valuesList3.find(100@0).print;
[ 30 ]
valuesList4.find(100@0).print;
[ 40 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(indexList2)))),11@0))))).print;
#-------------------------#
# BAT:	  tmp_159	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 11@0,	  102@0		  ]
[ 11@0,	  101@0		  ]
valuesList1.find(102@0).print;
[ 11 ]
valuesList2.find(102@0).print;
[ 21 ]
valuesList3.find(102@0).print;
[ 33 ]
valuesList4.find(102@0).print;
[ 42 ]
valuesList1.find(101@0).print;
[ 11 ]
valuesList2.find(101@0).print;
[ 22 ]
valuesList3.find(101@0).print;
[ 31 ]
valuesList4.find(101@0).print;
[ 41 ]
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(indexList2)))),12@0))))).print;
#-------------------------#
# BAT:	  tmp_172	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 12@0,	  103@0		  ]
valuesList1.find(103@0).print;
[ 11 ]
valuesList2.find(103@0).print;
[ 22 ]
valuesList3.find(103@0).print;
[ 32 ]
valuesList4.find(103@0).print;
[ 43 ]
# {[< 10 ,  20 ,  30 ,  40 >], [< 11 ,  21 ,  33 ,  42 >, < 11 ,  22 ,  31 ,  41 >], [< 11 ,  22 ,  32 ,  43 >]}

_MMmax_2 := max(orderA);
_MMcastval_3 := castval(orderA,_MMmax_2);
_MMoper_4 := [-](_MMcastval_3,orderA);
reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_159	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  2@0		  ]
[ 3@0,	  3@0		  ]
[ 0@0,	  0@0		  ]
[ 1@0,	  1@0		  ]
[ 4@0,	  4@0		  ]
valuesA.find(2@0).print;
[ 30 ]
valuesA.find(3@0).print;
[ 40 ]
valuesA.find(0@0).print;
[ 10 ]
valuesA.find(1@0).print;
[ 20 ]
valuesA.find(4@0).print;
[ 50 ]
# [ 30 ,  40 ,  10 ,  20 ,  50 ]

_MMreverse_2 := reverse(indexA);
_MMmax_3 := max(orderA);
_MMcastval_4 := castval(orderA,_MMmax_3);
_MMoper_5 := [-](_MMcastval_4,orderA);
reverse(copy_order(reverse(sort(reverse(_MMoper_5))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_181	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  2@0		  ]
[ 3@0,	  3@0		  ]
[ 0@0,	  0@0		  ]
[ 1@0,	  1@0		  ]
[ 4@0,	  4@0		  ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),2@0))))).print;
#-------------------------#
# BAT:	  tmp_186	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  405@0		  ]
[ 2@0,	  406@0		  ]
[ 2@0,	  407@0		  ]
valuesB.find(405@0).print;
[ 5000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(407@0).print;
[ 7000 ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),3@0))))).print;
#-------------------------#
# BAT:	  tmp_183	  #
# (oid)	  (oid)		  #
#-------------------------#
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),0@0))))).print;
#-------------------------#
# BAT:	  tmp_181	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 0@0,	  409@0		  ]
valuesB.find(409@0).print;
[ 9000 ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),1@0))))).print;
#-------------------------#
# BAT:	  tmp_186	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  408@0		  ]
valuesB.find(408@0).print;
[ 8000 ]
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),4@0))))).print;
#-------------------------#
# BAT:	  tmp_184	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  402@0		  ]
[ 4@0,	  401@0		  ]
[ 4@0,	  403@0		  ]
[ 4@0,	  404@0		  ]
valuesB.find(402@0).print;
[ 2000 ]
valuesB.find(401@0).print;
[ 1000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(404@0).print;
[ 4000 ]
# [[ 5000 ,  6000 ,  7000 ], [], [ 9000 ], [ 8000 ], [ 2000 ,  1000 ,  3000 ,  4000 ]]

_MMmax_2 := max(orderB);
_MMcastval_3 := castval(orderB,_MMmax_2);
_MMoper_4 := [-](_MMcastval_3,orderB);
_MMreverse_5 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_160	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  4@0		  ]
[ 1@0,	  1@0		  ]
[ 0@0,	  0@0		  ]
[ 3@0,	  3@0		  ]
[ 2@0,	  2@0		  ]
reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(indexB)))),4@0))))).print;
#-------------------------#
# BAT:	  tmp_183	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  404@0		  ]
[ 4@0,	  403@0		  ]
[ 4@0,	  401@0		  ]
[ 4@0,	  402@0		  ]
valuesB.find(404@0).print;
[ 4000 ]
valuesB.find(403@0).print;
[ 3000 ]
valuesB.find(401@0).print;
[ 1000 ]
valuesB.find(402@0).print;
[ 2000 ]
reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(indexB)))),1@0))))).print;
#-------------------------#
# BAT:	  tmp_186	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  408@0		  ]
valuesB.find(408@0).print;
[ 8000 ]
reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(indexB)))),0@0))))).print;
#-------------------------#
# BAT:	  tmp_160	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 0@0,	  409@0		  ]
valuesB.find(409@0).print;
[ 9000 ]
reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(indexB)))),3@0))))).print;
#-------------------------#
# BAT:	  tmp_183	  #
# (oid)	  (oid)		  #
#-------------------------#
reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(indexB)))),2@0))))).print;
#-------------------------#
# BAT:	  tmp_181	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  407@0		  ]
[ 2@0,	  406@0		  ]
[ 2@0,	  405@0		  ]
valuesB.find(407@0).print;
[ 7000 ]
valuesB.find(406@0).print;
[ 6000 ]
valuesB.find(405@0).print;
[ 5000 ]
# [[ 4000 ,  3000 ,  1000 ,  2000 ], [ 8000 ], [ 9000 ], [], [ 7000 ,  6000 ,  5000 ]]

_MMreverse_2 := reverse(orderA);
_MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
_MMslice_5 := slice(_MMreverse_4,0,1);
_MMmirror_6 := mirror(_MMslice_5);
_MMjoin_7 := join(indexA,_MMmirror_6);
_MMreverse_8 := reverse(_MMmirror_6);
_MMjoin_9 := join(_MMreverse_8,valuesA);
_MMreverse_10 := reverse(_MMmirror_6);
_MMjoin_11 := join(_MMreverse_10,orderA);
reverse(copy_order(reverse(sort(reverse(_MMjoin_11))),reverse(_MMjoin_7))).print;
#-------------------------#
# BAT:	  tmp_188	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  4@0		  ]
[ 1@0,	  1@0		  ]
_MMjoin_9.find(4@0).print;
[ 50 ]
_MMjoin_9.find(1@0).print;
[ 20 ]
# [ 50 ,  20 ]

_MMcopy_2 := copy(indexA);
_MMreverse_3 := reverse(_MMcopy_2);
_MMnumber_4 := number(_MMreverse_3);
_MMreverse_5 := reverse(_MMnumber_4);
_MMsort_6 := sort(_MMreverse_5);
_MMreverse_7 := reverse(_MMsort_6);
_MMslice_8 := slice(_MMreverse_7,0,2);
_MMmirror_9 := mirror(_MMslice_8);
_MMjoin_10 := join(indexA,_MMmirror_9);
_MMreverse_11 := reverse(_MMmirror_9);
_MMreverse_12 := reverse(valuesC);
_MMjoin_13 := join(valuesA,_MMreverse_12);
_MMcastnil_14 := _MMjoin_13.mark(0@0);
_MMjoin_15 := join(_MMreverse_11,_MMcastnil_14);
_MMcastnil_16 := _MMjoin_15.mark(0@0);
_MMnilcast_17 := _MMjoin_15.reverse.mark(0@0).reverse;
_MMnilcast_18 := _MMjoin_13.reverse.mark(0@0).reverse;
_MMjoin_19 := join(_MMnilcast_18,valuesC);
_MMjoin_20 := join(_MMnilcast_17,_MMjoin_19);
_MMreverse_21 := reverse(indexA);
_MMjoin_22 := join(_MMreverse_11,_MMreverse_21);
_MMreverse_23 := reverse(_MMmirror_9);
_MMjoin_24 := join(_MMreverse_23,_MMnumber_4);
reverse(copy_order(reverse(sort(reverse(_MMjoin_24))),reverse(_MMjoin_10))).print;
#-------------------------#
# BAT:	  tmp_200	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  4@0		  ]
[ 3@0,	  3@0		  ]
[ 2@0,	  2@0		  ]
reverse(select(reverse(_MMcastnil_16),4@0)).print;
#-------------------------#
# BAT:	  tmp_200	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  0@0		  ]
_MMjoin_20.find(1@0).print;
[ 30 ]
reverse(select(reverse(_MMcastnil_16),3@0)).print;
#-------------------------#
# BAT:	  tmp_200	  #
# (oid)	  (oid)		  #
#-------------------------#
reverse(select(reverse(_MMcastnil_16),2@0)).print;
#-------------------------#
# BAT:	  tmp_200	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  1@0		  ]
_MMjoin_20.find(0@0).print;
[ 50 ]
# [{ 50 }, {}, { 30 }]

_MMreverse_2 := reverse(indexA);
_MMoper_3 := {count}(indexB);
_MMmergecast_4 := mergecast(_MMreverse_2,_MMoper_3,0);
_MMoper_5 := [gt](_MMmergecast_4,0);
_MMuselect_6 := uselect(_MMoper_5,true).mark(0@0);
_MMjoin_7 := join(indexA,_MMuselect_6);
_MMreverse_8 := reverse(_MMuselect_6);
_MMjoin_9 := join(_MMreverse_8,indexB);
_MMcastnil_10 := _MMjoin_9.mark(0@0);
_MMnilcast_11 := _MMjoin_9.reverse.mark(0@0).reverse;
_MMjoin_12 := join(_MMnilcast_11,orderB);
_MMreverse_13 := reverse(_MMjoin_12);
_MMsort_14 := sort(_MMreverse_13);
_MMreverse_15 := reverse(_MMsort_14);
_MMnumber_16 := number(_MMreverse_15);
_MMreverse_17 := reverse(_MMcastnil_10);
_MMjoin_18 := join(_MMcastnil_10,_MMnumber_16);
_MMoper_19 := {min}(_MMjoin_18);
_MMjoin_20 := join(_MMreverse_17,_MMoper_19);
_MMoper_21 := [-](_MMnumber_16,_MMjoin_20);
_MMselect_22 := select(_MMoper_21,0,0);
_MMmirror_23 := mirror(_MMselect_22);
_MMjoin_24 := join(_MMcastnil_10,_MMmirror_23);
_MMreverse_25 := reverse(_MMmirror_23);
_MMjoin_26 := join(_MMnilcast_11,valuesB);
_MMjoin_27 := join(_MMreverse_25,_MMjoin_26);
_MMreverse_28 := reverse(_MMmirror_23);
_MMjoin_29 := join(_MMreverse_28,_MMjoin_12);
_MMjoin_30 := join(_MMreverse_8,_MMreverse_2);
_MMreverse_31 := reverse(_MMuselect_6);
_MMjoin_32 := join(_MMreverse_31,orderA);
reverse(copy_order(reverse(sort(reverse(_MMjoin_32))),reverse(_MMjoin_7))).print;
#-------------------------#
# BAT:	  tmp_217	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  0@0		  ]
[ 1@0,	  2@0		  ]
[ 0@0,	  3@0		  ]
[ 2@0,	  1@0		  ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(_MMjoin_24)))),0@0))))).print;
#-------------------------#
# BAT:	  tmp_220	  #
# (void)  (oid)		  #
#-------------------------#
[ 0@0,	  1@0		  ]
_MMjoin_27.find(7@0).print;
[ 8000 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(_MMjoin_24)))),2@0))))).print;
#-------------------------#
# BAT:	  tmp_216	  #
# (void)  (oid)		  #
#-------------------------#
[ 2@0,	  7@0		  ]
_MMjoin_27.find(1@0).print;
[ 2000 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(_MMjoin_24)))),3@0))))).print;
#-------------------------#
# BAT:	  tmp_255	  #
# (void)  (oid)		  #
#-------------------------#
[ 3@0,	  8@0		  ]
_MMjoin_27.find(0@0).print;
!ERROR: CMDfind: value not found.
!ERROR: CMDfind: operation failed.
!ERROR: print(param 1): evaluation error.
reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(_MMjoin_24)))),1@0))))).print;
#-------------------------#
# BAT:	  tmp_214	  #
# (void)  (oid)		  #
#-------------------------#
[ 1@0,	  4@0		  ]
_MMjoin_27.find(4@0).print;
[ 5000 ]
# [[ 2000 ], [ 8000 ], [ 9000 ], [ 5000 ]]

_MMreverse_2 := reverse(orderA);
_MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
_MMnumber_5 := number(_MMreverse_4);
_MMselect_6 := select(_MMnumber_5,1);
_MMmirror_7 := mirror(_MMselect_6);
_MMjoin_8 := join(_MMmirror_7,valuesA);
_MMnilcast_9 := _MMjoin_8.reverse.mark(0@0).reverse;
_MMfind_10 := find(_MMnilcast_9,oid(0));
_MMfind_10.print;
[ 20 ]
#  20 

_MMreverse_2 := reverse(orderA);
_MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
_MMnumber_5 := number(_MMreverse_4);
_MMselect_6 := select(_MMnumber_5,1);
_MMmirror_7 := mirror(_MMselect_6);
_MMjoin_8 := join(_MMmirror_7,indexB);
_MMcastnil_9 := _MMjoin_8.mark(0@0);
_MMnilcast_10 := _MMjoin_8.reverse.mark(0@0).reverse;
_MMjoin_11 := join(_MMnilcast_10,valuesB);
_MMjoin_12 := join(_MMnilcast_10,orderB);
reverse(copy_order(reverse(sort(reverse(_MMjoin_12))),reverse(_MMcastnil_9))).print;
#-------------------------#
# BAT:	  tmp_227	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  0@0		  ]
_MMjoin_11.find(0@0).print;
[ 8000 ]
# [ 8000 ]

_MMreverse_2 := reverse(orderB);
_MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
_MMnumber_5 := number(_MMreverse_4);
_MMreverse_6 := reverse(indexB);
_MMjoin_7 := join(indexB,_MMnumber_5);
_MMoper_8 := {min}(_MMjoin_7);
_MMjoin_9 := join(_MMreverse_6,_MMoper_8);
_MMoper_10 := [-](_MMnumber_5,_MMjoin_9);
_MMselect_11 := select(_MMoper_10,0);
_MMmirror_12 := mirror(_MMselect_11);
_MMjoin_13 := join(indexB,_MMmirror_12);
_MMjoin_14 := join(_MMjoin_13,valuesB);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_232	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  4@0		  ]
[ 1@0,	  1@0		  ]
[ 0@0,	  0@0		  ]
[ 3@0,	  3@0		  ]
[ 2@0,	  2@0		  ]
_MMjoin_14.find(4@0).print;
[ 2000 ]
_MMjoin_14.find(1@0).print;
[ 8000 ]
_MMjoin_14.find(0@0).print;
[ 9000 ]
_MMjoin_14.find(3@0).print;
!ERROR: CMDfind: value not found.
!ERROR: CMDfind: operation failed.
!ERROR: print(param 1): evaluation error.
_MMjoin_14.find(2@0).print;
[ 5000 ]
# [ 2000 ,  8000 ,  9000 , ERROR: CMDfind: value not found,  5000 ]

_MMreverse_2 := reverse(orderA);
_MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
_MMnumber_5 := number(_MMreverse_4);
_MMselect_6 := select(_MMnumber_5,1);
_MMmirror_7 := mirror(_MMselect_6);
_MMjoin_8 := join(_MMmirror_7,indexB);
_MMcastnil_9 := _MMjoin_8.mark(0@0);
_MMnilcast_10 := _MMjoin_8.reverse.mark(0@0).reverse;
_MMjoin_11 := join(_MMnilcast_10,valuesB);
_MMcastnil_9.print;
#-------------------------#
# BAT:	  tmp_214	  #
# (oid)	  (void)	  #
#-------------------------#
[ 1@0,	  0@0		  ]
_MMjoin_11.find(0@0).print;
[ 8000 ]
# { 8000 }

_MMreverse_2 := reverse(orderList1);
_MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
_MMnumber_5 := number(_MMreverse_4);
_MMselect_6 := select(_MMnumber_5,1);
_MMmirror_7 := mirror(_MMselect_6);
_MMjoin_8 := join(_MMmirror_7,valuesList1);
_MMnilcast_9 := _MMjoin_8.reverse.mark(0@0).reverse;
_MMfind_10 := find(_MMnilcast_9,oid(0));
_MMjoin_11 := join(_MMmirror_7,valuesList2);
_MMnilcast_12 := _MMjoin_11.reverse.mark(0@0).reverse;
_MMfind_13 := find(_MMnilcast_12,oid(0));
_MMfind_10.print;
[ 11 ]
_MMfind_13.print;
[ 22 ]
# < 11 ,  22 >

_MMreverse_2 := reverse(orderList1);
_MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
_MMnumber_5 := number(_MMreverse_4);
_MMselect_6 := select(_MMnumber_5,1);
_MMmirror_7 := mirror(_MMselect_6);
_MMjoin_8 := join(_MMmirror_7,indexList3);
_MMcastnil_9 := _MMjoin_8.mark(0@0);
_MMnilcast_10 := _MMjoin_8.reverse.mark(0@0).reverse;
_MMjoin_11 := join(_MMnilcast_10,valuesList2);
_MMjoin_12 := join(_MMnilcast_10,orderList2);
_MMjoin_13 := join(_MMmirror_7,valuesList1);
_MMnilcast_14 := _MMjoin_13.reverse.mark(0@0).reverse;
_MMfind_15 := find(_MMnilcast_14,oid(0));
reverse(copy_order(reverse(sort(reverse(_MMjoin_12))),reverse(_MMcastnil_9))).print;
#-------------------------#
# BAT:	  tmp_236	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 101@0,  1@0		  ]
[ 101@0,  0@0		  ]
_MMjoin_11.find(1@0).print;
[ 21 ]
_MMjoin_11.find(0@0).print;
[ 22 ]
_MMfind_15.print;
[ 11 ]
# <[ 21 ,  22 ],  11 >

_MMcount_2 := count(indexA);
_MMcount_2.print;
[ 5 ]
#  5 

_MMcount_2 := count(indexA);
_MMcount_2.print;
[ 5 ]
#  5 

_MMoper_2 := [=](valuesA,10);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexA,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesA);
_MMjoin_4.print;
#-------------------------#
# BAT:	  tmp_233	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 0@0,	  0@0		  ]
_MMjoin_6.find(0@0).print;
[ 10 ]
# { 10 }

_MMoper_2 := [=](valuesA,10);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexA,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesA);
_MMreverse_7 := reverse(_MMuselect_3);
_MMjoin_8 := join(_MMreverse_7,orderA);
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4))).print;
#-------------------------#
# BAT:	  tmp_240	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 0@0,	  0@0		  ]
_MMjoin_6.find(0@0).print;
[ 10 ]
# [ 10 ]

_MMoper_2 := [=](valuesA,10);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMoper_4 := [=](valuesA,20);
_MMuselect_5 := uselect(_MMoper_4,true).mark(0@0);
_MMkunion_6 := kunion(_MMuselect_3,_MMuselect_5);
_MMcastnil_7 := _MMkunion_6.mark(0@0);
_MMjoin_8 := join(indexA,_MMcastnil_7);
_MMreverse_9 := reverse(_MMcastnil_7);
_MMjoin_10 := join(_MMreverse_9,valuesA);
_MMjoin_8.print;
#-------------------------#
# BAT:	  tmp_242	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  1@0		  ]
[ 0@0,	  0@0		  ]
_MMjoin_10.find(1@0).print;
[ 20 ]
_MMjoin_10.find(0@0).print;
[ 10 ]
# { 20 ,  10 }

_MMoper_2 := [=](valuesA,10);
_MMoper_3 := [=](valuesA,20);
_MMoper_4 := [or](_MMoper_2,_MMoper_3);
_MMuselect_5 := uselect(_MMoper_4,true).mark(0@0);
_MMjoin_6 := join(indexA,_MMuselect_5);
_MMreverse_7 := reverse(_MMuselect_5);
_MMjoin_8 := join(_MMreverse_7,valuesA);
_MMreverse_9 := reverse(_MMuselect_5);
_MMjoin_10 := join(_MMreverse_9,orderA);
reverse(copy_order(reverse(sort(reverse(_MMjoin_10))),reverse(_MMjoin_6))).print;
#-------------------------#
# BAT:	  tmp_246	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  1@0		  ]
[ 0@0,	  0@0		  ]
_MMjoin_8.find(1@0).print;
[ 20 ]
_MMjoin_8.find(0@0).print;
[ 10 ]
# [ 20 ,  10 ]

_MMoper_2 := [>=](valuesB,2000);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexB,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesB);
_MMreverse_7 := reverse(indexA);
indexA.print;
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
reverse(select(reverse(_MMjoin_4),4@0)).print;
#-------------------------#
# BAT:	  tmp_239	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  5@0		  ]
[ 4@0,	  6@0		  ]
[ 4@0,	  7@0		  ]
_MMjoin_6.find(5@0).print;
[ 4000 ]
_MMjoin_6.find(6@0).print;
[ 3000 ]
_MMjoin_6.find(7@0).print;
[ 2000 ]
reverse(select(reverse(_MMjoin_4),3@0)).print;
#-------------------------#
# BAT:	  tmp_239	  #
# (oid)	  (oid)		  #
#-------------------------#
reverse(select(reverse(_MMjoin_4),2@0)).print;
#-------------------------#
# BAT:	  tmp_239	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  2@0		  ]
[ 2@0,	  3@0		  ]
[ 2@0,	  4@0		  ]
_MMjoin_6.find(2@0).print;
[ 7000 ]
_MMjoin_6.find(3@0).print;
[ 6000 ]
_MMjoin_6.find(4@0).print;
[ 5000 ]
reverse(select(reverse(_MMjoin_4),1@0)).print;
#-------------------------#
# BAT:	  tmp_239	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  1@0		  ]
_MMjoin_6.find(1@0).print;
[ 8000 ]
reverse(select(reverse(_MMjoin_4),0@0)).print;
#-------------------------#
# BAT:	  tmp_239	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 0@0,	  0@0		  ]
_MMjoin_6.find(0@0).print;
[ 9000 ]
# {{ 4000 ,  3000 ,  2000 }, {}, { 7000 ,  6000 ,  5000 }, { 8000 }, { 9000 }}

_MMoper_2 := [>=](valuesB,2000);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexB,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesB);
_MMreverse_7 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_142	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  4@0		  ]
[ 1@0,	  1@0		  ]
[ 0@0,	  0@0		  ]
[ 3@0,	  3@0		  ]
[ 2@0,	  2@0		  ]
reverse(select(reverse(_MMjoin_4),4@0)).print;
#-------------------------#
# BAT:	  tmp_142	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  5@0		  ]
[ 4@0,	  6@0		  ]
[ 4@0,	  7@0		  ]
_MMjoin_6.find(5@0).print;
[ 4000 ]
_MMjoin_6.find(6@0).print;
[ 3000 ]
_MMjoin_6.find(7@0).print;
[ 2000 ]
reverse(select(reverse(_MMjoin_4),1@0)).print;
#-------------------------#
# BAT:	  tmp_142	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  1@0		  ]
_MMjoin_6.find(1@0).print;
[ 8000 ]
reverse(select(reverse(_MMjoin_4),0@0)).print;
#-------------------------#
# BAT:	  tmp_142	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 0@0,	  0@0		  ]
_MMjoin_6.find(0@0).print;
[ 9000 ]
reverse(select(reverse(_MMjoin_4),3@0)).print;
#-------------------------#
# BAT:	  tmp_142	  #
# (oid)	  (oid)		  #
#-------------------------#
reverse(select(reverse(_MMjoin_4),2@0)).print;
#-------------------------#
# BAT:	  tmp_142	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  2@0		  ]
[ 2@0,	  3@0		  ]
[ 2@0,	  4@0		  ]
_MMjoin_6.find(2@0).print;
[ 7000 ]
_MMjoin_6.find(3@0).print;
[ 6000 ]
_MMjoin_6.find(4@0).print;
[ 5000 ]
# [{ 4000 ,  3000 ,  2000 }, { 8000 }, { 9000 }, {}, { 7000 ,  6000 ,  5000 }]

_MMoper_2 := [>=](valuesA,20);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexA,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesA);
_MMreverse_7 := reverse(_MMuselect_3);
_MMjoin_8 := join(_MMreverse_7,orderA);
_MMreverse_9 := reverse(indexA);
indexA.print;
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),4@0))))).print;
#-------------------------#
# BAT:	  tmp_172	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  3@0		  ]
_MMjoin_6.find(3@0).print;
[ 50 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),3@0))))).print;
#-------------------------#
# BAT:	  tmp_161	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 3@0,	  2@0		  ]
_MMjoin_6.find(2@0).print;
[ 40 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),2@0))))).print;
#-------------------------#
# BAT:	  tmp_241	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  1@0		  ]
_MMjoin_6.find(1@0).print;
[ 30 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),1@0))))).print;
#-----------------#
# BAT:	  tmp_52  #
# (oid)	  (oid)	  #
#-----------------#
[ 1@0,	  0@0	  ]
_MMjoin_6.find(0@0).print;
[ 20 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),0@0))))).print;
#-------------------------#
# BAT:	  tmp_289	  #
# (oid)	  (oid)		  #
#-------------------------#
# {[ 50 ], [ 40 ], [ 30 ], [ 20 ], []}

_MMoper_2 := [>=](valuesA,20);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexA,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesA);
_MMreverse_7 := reverse(_MMuselect_3);
_MMjoin_8 := join(_MMreverse_7,orderA);
_MMreverse_9 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_236	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  4@0		  ]
[ 1@0,	  1@0		  ]
[ 0@0,	  0@0		  ]
[ 3@0,	  3@0		  ]
[ 2@0,	  2@0		  ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),4@0))))).print;
#-------------------------#
# BAT:	  tmp_231	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  3@0		  ]
_MMjoin_6.find(3@0).print;
[ 50 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),1@0))))).print;
#-------------------------#
# BAT:	  tmp_226	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  0@0		  ]
_MMjoin_6.find(0@0).print;
[ 20 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),0@0))))).print;
#-------------------------#
# BAT:	  tmp_236	  #
# (oid)	  (oid)		  #
#-------------------------#
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),3@0))))).print;
#-------------------------#
# BAT:	  tmp_231	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 3@0,	  2@0		  ]
_MMjoin_6.find(2@0).print;
[ 40 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),2@0))))).print;
#-------------------------#
# BAT:	  tmp_172	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  1@0		  ]
_MMjoin_6.find(1@0).print;
[ 30 ]
# [[ 50 ], [ 20 ], [], [ 40 ], [ 30 ]]

_MMoper_2 := [>=](valuesB,2000);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexB,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesB);
_MMreverse_7 := reverse(_MMuselect_3);
_MMjoin_8 := join(_MMreverse_7,orderB);
_MMreverse_9 := reverse(indexA);
indexA.print;
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),4@0))))).print;
#-------------------------#
# BAT:	  tmp_247	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  7@0		  ]
[ 4@0,	  6@0		  ]
[ 4@0,	  5@0		  ]
_MMjoin_6.find(7@0).print;
[ 2000 ]
_MMjoin_6.find(6@0).print;
[ 3000 ]
_MMjoin_6.find(5@0).print;
[ 4000 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),3@0))))).print;
#-----------------#
# BAT:	  tmp_52  #
# (oid)	  (oid)	  #
#-----------------#
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),2@0))))).print;
#-------------------------#
# BAT:	  tmp_231	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  4@0		  ]
[ 2@0,	  3@0		  ]
[ 2@0,	  2@0		  ]
_MMjoin_6.find(4@0).print;
[ 5000 ]
_MMjoin_6.find(3@0).print;
[ 6000 ]
_MMjoin_6.find(2@0).print;
[ 7000 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),1@0))))).print;
#-------------------------#
# BAT:	  tmp_245	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  1@0		  ]
_MMjoin_6.find(1@0).print;
[ 8000 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),0@0))))).print;
#-------------------------#
# BAT:	  tmp_236	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 0@0,	  0@0		  ]
_MMjoin_6.find(0@0).print;
[ 9000 ]
# {[ 2000 ,  3000 ,  4000 ], [], [ 5000 ,  6000 ,  7000 ], [ 8000 ], [ 9000 ]}

_MMoper_2 := [>=](valuesB,2000);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexB,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesB);
_MMreverse_7 := reverse(_MMuselect_3);
_MMjoin_8 := join(_MMreverse_7,orderB);
_MMreverse_9 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_246	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  4@0		  ]
[ 1@0,	  1@0		  ]
[ 0@0,	  0@0		  ]
[ 3@0,	  3@0		  ]
[ 2@0,	  2@0		  ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),4@0))))).print;
#-------------------------#
# BAT:	  tmp_234	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  7@0		  ]
[ 4@0,	  6@0		  ]
[ 4@0,	  5@0		  ]
_MMjoin_6.find(7@0).print;
[ 2000 ]
_MMjoin_6.find(6@0).print;
[ 3000 ]
_MMjoin_6.find(5@0).print;
[ 4000 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),1@0))))).print;
#-------------------------#
# BAT:	  tmp_187	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 1@0,	  1@0		  ]
_MMjoin_6.find(1@0).print;
[ 8000 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),0@0))))).print;
#-------------------------#
# BAT:	  tmp_237	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 0@0,	  0@0		  ]
_MMjoin_6.find(0@0).print;
[ 9000 ]
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),3@0))))).print;
#-------------------------#
# BAT:	  tmp_231	  #
# (oid)	  (oid)		  #
#-------------------------#
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),2@0))))).print;
#-------------------------#
# BAT:	  tmp_239	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 2@0,	  4@0		  ]
[ 2@0,	  3@0		  ]
[ 2@0,	  2@0		  ]
_MMjoin_6.find(4@0).print;
[ 5000 ]
_MMjoin_6.find(3@0).print;
[ 6000 ]
_MMjoin_6.find(2@0).print;
[ 7000 ]
# [[ 2000 ,  3000 ,  4000 ], [ 8000 ], [ 9000 ], [], [ 5000 ,  6000 ,  7000 ]]

_MMreverse_2 := reverse(indexA);
_MMoper_3 := [<=](valuesB,2000);
_MMuselect_4 := uselect(_MMoper_3,true).mark(0@0);
_MMjoin_5 := join(indexB,_MMuselect_4);
_MMoper_6 := {count}(_MMjoin_5);
_MMmergecast_7 := mergecast(_MMreverse_2,_MMoper_6,0);
indexA.print;
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
_MMmergecast_7.find(4@0).print;
[ 2 ]
_MMmergecast_7.find(3@0).print;
[ 0 ]
_MMmergecast_7.find(2@0).print;
[ 0 ]
_MMmergecast_7.find(1@0).print;
[ 0 ]
_MMmergecast_7.find(0@0).print;
[ 0 ]
# { 2 ,  0 ,  0 ,  0 ,  0 }

_MMreverse_2 := reverse(indexA);
_MMoper_3 := [<=](valuesB,2000);
_MMuselect_4 := uselect(_MMoper_3,true).mark(0@0);
_MMjoin_5 := join(indexB,_MMuselect_4);
_MMoper_6 := {count}(_MMjoin_5);
_MMmergecast_7 := mergecast(_MMreverse_2,_MMoper_6,0);
indexA.print;
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (oid)	  #
#-----------------#
[ 4@0,	  4@0	  ]
[ 3@0,	  3@0	  ]
[ 2@0,	  2@0	  ]
[ 1@0,	  1@0	  ]
[ 0@0,	  0@0	  ]
_MMmergecast_7.find(4@0).print;
[ 2 ]
_MMmergecast_7.find(3@0).print;
[ 0 ]
_MMmergecast_7.find(2@0).print;
[ 0 ]
_MMmergecast_7.find(1@0).print;
[ 0 ]
_MMmergecast_7.find(0@0).print;
[ 0 ]
# { 2 ,  0 ,  0 ,  0 ,  0 }

_MMreverse_2 := reverse(indexA);
_MMoper_3 := [<=](valuesB,2000);
_MMuselect_4 := uselect(_MMoper_3,true).mark(0@0);
_MMjoin_5 := join(indexB,_MMuselect_4);
_MMoper_6 := {count}(_MMjoin_5);
_MMmergecast_7 := mergecast(_MMreverse_2,_MMoper_6,0);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print;
#-------------------------#
# BAT:	  tmp_152	  #
# (oid)	  (oid)		  #
#-------------------------#
[ 4@0,	  4@0		  ]
[ 1@0,	  1@0		  ]
[ 0@0,	  0@0		  ]
[ 3@0,	  3@0		  ]
[ 2@0,	  2@0		  ]
_MMmergecast_7.find(4@0).print;
[ 2 ]
_MMmergecast_7.find(1@0).print;
[ 0 ]
_MMmergecast_7.find(0@0).print;
[ 0 ]
_MMmergecast_7.find(3@0).print;
[ 0 ]
_MMmergecast_7.find(2@0).print;
[ 0 ]
# [ 2 ,  0 ,  0 ,  0 ,  0 ]

quit;
