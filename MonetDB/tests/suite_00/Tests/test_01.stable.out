stdout of test 'test_01` in directory 'tests/suite_00` itself:

#> Mtest (21:36:17):	milS test_01 milS
#> Mtest (21:36:17):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_01.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_01.milS

loaded;
#---------------------------------#
# module	| usage_count	  #
#---------------------------------#
[ "algebra",	  1		  ]
[ "arith",	  1		  ]
[ "bat",	  1		  ]
[ "kernel",	  1		  ]
[ "str",	  1		  ]
[ "sys",	  1		  ]
[ "trans",	  1		  ]

Try: modules;                - for other modules.
     ls;                     - for persistent bat listing.
     sigs("<module>")        - for available commands per module.
     help("<command>")       - for help one-liner for a command.

#You are system administrator (adm)!
setoid(oid(20000000));
#test basic functionality of the BAT library.
#focussed on strings
#it includes insertions,deletions,selections, and joins.

b:= new(str,int);
b.insert("the",1);
b.insert("quick",2);
b.insert("brown",3);
b.insert("fox",4);
b.insert("jumps",5);
b.insert("over",6);
b.insert("lazy",7);
b.insert("dog",8);
b.insert(str(nil),9);
b.insert(".",10);
b.insert("",int(nil));
b.insert(str(nil),int(nil));
b.print;
#-------------------------#
# BAT:		  tmp_24  #
# (str)		  (int)	  #
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]


# Testing simple retrievals
b.find("the").print;
[ 1 ]
b.find("fox").print;
[ 4 ]
b.find(str(nil)).print;
[ nil ]
# This should cause an error
b.find("cat").print;
!ERROR: CMDfind: value not found.
!ERROR: CMDfind: operation failed.
!ERROR: print(param 1): evaluation error.

# Can we delete them and re-insert them later on
b.delete("fox",4);
b.delete("the",1);
b.delete(".",10);
b.print;
#-------------------------#
# BAT:		  tmp_24  #
# (str)		  (int)	  #
#-------------------------#
[ "",		  nil	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ nil,		  nil	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]

b.insert("fox",4);
b.insert("the",1);
b.insert(".",10);
b.count.print;
[ 12 ]

# Lets cut out a few sections
b.select(2,4).print;
#-------------------------#
# BAT:		  tmp_23  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
b.select(7,int(nil)).print;
#-----------------#
# BAT:	  tmp_23  #
# (str)	  (int)	  #
#-----------------#
[ "lazy", 7	  ]
[ "dog",  8	  ]
[ nil,	  9	  ]
[ ".",	  10	  ]
b.select(int(nil),int(nil)).print;
#-------------------------#
# BAT:		  tmp_23  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
[ ".",		  10	  ]

# A 2-dimensional cut
bn:=b.fragment("fox","quick",1,5);bn.print;
#-------------------------#
# BAT:		  tmp_23  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
b.fragment("fox",str(nil),1,5).print;
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
b.fragment("fox",str(nil),int(nil),int(nil)).print;
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
b.fragment(str(nil),"f",int(nil),int(nil)).print;
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "",		  nil	  ]
[ "brown",	  3	  ]
[ nil,		  nil	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
b.reverse.fragment(int(nil),int(nil),str(nil),"f").print;
#-------------------------#
# BAT:	  tmp_25	  #
# (int)	  (str)		  #
#-------------------------#
[ nil,	  ""		  ]
[ 3,	  "brown"	  ]
[ nil,	  nil		  ]
[ 8,	  "dog"		  ]
[ 9,	  nil		  ]
[ 10,	  "."		  ]

bn:= b.join(bn.reverse);
bn.print;
#---------------------------------#
# BAT:		  tmp_25	  #
# (str)		  (str)		  #
#---------------------------------#
[ "quick",	  "quick"	  ]
[ "jumps",	  "jumps"	  ]
[ "fox",	  "fox"		  ]

bn:= b.semijoin(bn.reverse);
bn.print;
#-------------------------#
# BAT:		  tmp_23  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]

# testing the like command
b.reverse.like("ox").print;
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (str)	  #
#-----------------#
[ 4,	  "fox"	  ]
b.reverse.like("fo").print;
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (str)	  #
#-----------------#
[ 4,	  "fox"	  ]
b.reverse.like("fox").print;
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (str)	  #
#-----------------#
[ 4,	  "fox"	  ]
b.reverse.like(" fox").print;
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (str)	  #
#-----------------#
quit;
