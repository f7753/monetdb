stdout of test 'test_00` in directory 'tests/suite_00` itself:

#> Mtest (21:36:14):	milS test_00 milS
#> Mtest (21:36:14):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_00.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_00.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
setoid(oid(20000000));
#test basic functionality of the BAT library.
#focussed on integers
#it includes insertions,deletions,selections, and joins.

b:= new(int,int);
#b.roles("head","tail"); roles was removed from the kernel ops
printf("#~BeginVariableOutput~#\n"); b.info.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------------------------------#
# BAT:				  tmp_23	  #
# (str)				  (str)		  #
#-------------------------------------------------#
[ "version",			  "980714"	  ]
[ "batId",			  "tmp_26"	  ]
[ "batCacheid",			  "26"		  ]
[ "batParentid",		  "0"		  ]
[ "batSharecnt",		  "0"		  ]
[ "head",			  "int"		  ]
[ "tail",			  "int"		  ]
[ "batPersistence",		  "transient"	  ]
[ "batRestricted",		  "updatable"	  ]
[ "batRefcnt",			  "1"		  ]
[ "batDirty",			  "dirty"	  ]
[ "batSet",			  "0"		  ]
[ "void_tid",			  "0"		  ]
[ "void_cnt",			  "0"		  ]
[ "hsorted",			  "1"		  ]
[ "hident",			  "h"		  ]
[ "hdense",			  "0"		  ]
[ "hseqbase",			  "nil"		  ]
[ "hkey",			  "0"		  ]
[ "hloc",			  "0"		  ]
[ "hvarsized",			  "0"		  ]
[ "halign",			  "20000000"	  ]
[ "halignflushed",		  "20000000"	  ]
[ "tident",			  "t"		  ]
[ "tdense",			  "0"		  ]
[ "tseqbase",			  "nil"		  ]
[ "tsorted",			  "1"		  ]
[ "tkey",			  "0"		  ]
[ "tloc",			  "4"		  ]
[ "tvarsized",			  "0"		  ]
[ "talign",			  "20000001"	  ]
[ "talignflushed",		  "20000001"	  ]
[ "batInserted",		  "1"		  ]
[ "batDeleted",			  "0"		  ]
[ "batHole",			  "0"		  ]
[ "top",			  "1"		  ]
[ "batStamp",			  "-139"	  ]
[ "curStamp",			  "140"		  ]
[ "batCopiedtodisk",		  "0"		  ]
[ "batDirtydesc",		  "clean"	  ]
[ "batDirtybuns",		  "clean"	  ]
[ "batBuns.free",		  "8"		  ]
[ "batBuns.size",		  "424"		  ]
[ "batBuns.maxsize",		  "424"		  ]
[ "batBuns.storage",		  "malloced"	  ]
[ "batBuns.filename",		  "no file"	  ]
[ "batBuns.offset",		  "0"		  ]
[ "hheapdirty",			  "clean"	  ]
[ "hheap.free",			  "0"		  ]
[ "hheap.size",			  "0"		  ]
[ "hheap.maxsize",		  "0"		  ]
[ "hheap.storage",		  "absent"	  ]
[ "hheap.filename",		  "no file"	  ]
[ "hheap.offset",		  "0"		  ]
[ "theapdirty",			  "clean"	  ]
[ "theap.free",			  "0"		  ]
[ "theap.size",			  "0"		  ]
[ "theap.maxsize",		  "0"		  ]
[ "theap.storage",		  "absent"	  ]
[ "theap.filename",		  "no file"	  ]
[ "theap.offset",		  "0"		  ]
[ "hacctype",			  "null"	  ]
[ "haccdirty",			  "clean"	  ]
[ "haccCopiedtodisk",		  "0"		  ]
[ "haccelerator.free",		  "0"		  ]
[ "haccelerator.size",		  "0"		  ]
[ "haccelerator.maxsize",	  "0"		  ]
[ "haccelerator.storage",	  "absent"	  ]
[ "haccelerator.filename",	  "no file"	  ]
[ "haccelerator.offset",	  "0"		  ]
[ "tacctype",			  "null"	  ]
[ "taccdirty",			  "clean"	  ]
[ "taccCopiedtodisk",		  "0"		  ]
[ "taccelerator.free",		  "0"		  ]
[ "taccelerator.size",		  "0"		  ]
[ "taccelerator.maxsize",	  "0"		  ]
[ "taccelerator.storage",	  "absent"	  ]
[ "taccelerator.filename",	  "no file"	  ]
[ "taccelerator.offset",	  "0"		  ]
[ "head_index",			  "absent"	  ]
[ "tail_index",			  "absent"	  ]
#~EndVariableOutput~#

b.insert(1,15);
b.insert(2,4);
b.insert(3,int(nil));
b.insert(4,16);
b.insert(5,25);
b.insert(6,36);
b.insert(7,49);
b.insert(8,64);
b.insert(9,int(nil));
b.insert(int(nil),int(nil));
b.insert(int(nil),81);
b.print;
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]


# Testing simple retrievals
b.find(1).print;
[ 15 ]
b.find(4).print;
[ 16 ]
b.find(int(nil)).print;
[ 81 ]
# This should cause an error
b.find(10).print;
!ERROR: CMDfind: value not found.
!ERROR: CMDfind: operation failed.
!ERROR: print(param 1): evaluation error.

# Can we delete them and re-insert them later on
b.delete(4,16);
b.delete(1,15);
b.delete(int(nil),81);
b.print;
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ nil,	  nil	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 9,	  nil	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]

b.insert(4,16);
b.insert(int(nil),81);
b.insert(1,15);
b.count.print;
[ 11 ]
b.print;
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ nil,	  nil	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 9,	  nil	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]
[ 1,	  15	  ]

# Lets cut out a few sections
b.select(25,64).print;
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
b.select(4,15).print;
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]
b.select(4,4).print;
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
# This should cause an error
b.select(4,3).print;
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
b.select(81,int(nil)).print;
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ nil,	  81	  ]
b.select(int(nil),int(nil)).print;
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]
[ 1,	  15	  ]

# A 2-dimensional cut
bn:=b.fragment(1,5,4,15);bn.print;
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]
b.fragment(1,5,16,int(nil)).print;
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 4,	  16	  ]
b.fragment(1,int(nil),16,int(nil)).print;
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
b.fragment(int(nil),int(nil),16,int(nil)).print;
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]

bn:= b.join(bn.reverse);
bn.print;
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  2	  ]
[ 1,	  1	  ]

bn:= b.semijoin(bn.reverse);
bn.print;
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]

# band join experiment
c:= b.copy;
bandjoin(b,c,4,4).print;
#-----------------#
# BAT:	  tmp_26  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  nil	  ]
[ 2,	  25	  ]
[ 2,	  36	  ]
[ 2,	  49	  ]
[ 2,	  64	  ]
[ 2,	  16	  ]
[ 2,	  15	  ]

#and theta joins?
b.thetajoin(c,LT).print;
#-----------------#
# BAT:	  tmp_26  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  25	  ]
[ 2,	  36	  ]
[ 2,	  49	  ]
[ 2,	  64	  ]
[ 2,	  nil	  ]
quit;

# 17:08:40 >  
# 17:08:40 >  Done.
# 17:08:40 >  

