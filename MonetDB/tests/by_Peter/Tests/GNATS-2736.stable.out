stdout of test 'GNATS-2736` in directory 'tests/by_Peter` itself:

#> Mtest:	milM GNATS-2736 milM
#> Mtest:	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_by_Peter GNATS-2736.milM
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for Linux2.2.12-20smp/32bit on Mon May 22 05:44:53 CEST 2000.
#script:GNATS-2736.milM

loaded;
#---------------------------------#
# module	| usage_count	  #
#---------------------------------#
[ "algebra",	  1		  ]
[ "arith",	  1		  ]
[ "bat",	  1		  ]
[ "kernel",	  1		  ]
[ "str",	  1		  ]
[ "sys",	  1		  ]
[ "trans",	  1		  ]

Try: modules;                - for other modules.
     ls;                     - for persistent bat listing.
     sigs("<module>")        - for available commands per module.
     help("<command>")       - for help one-liner for a command.

#You are system administrator (adm)!

# test proc {kunique}(b_int)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(b_sht)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(b_chr)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(b_str)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(v_oid)
#setaggr impl: non-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(s_int)
#setaggr impl: non-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(s_sht)
#setaggr impl: non-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(s_chr)
#setaggr impl: non-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(s_str)
#setaggr impl: non-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(i_int)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(i_sht)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(i_chr)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(i_str)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(b_int,e_int)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(b_sht,e_sht)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(b_chr,e_chr)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(b_str,e_str)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(v_oid,e_oid)
#setaggr impl: non-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(s_int,e_int)
#setaggr impl: non-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(s_sht,e_sht)
#setaggr impl: non-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(s_chr,e_chr)
#setaggr impl: non-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(s_str,e_str)
#setaggr impl: non-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(i_int,e_int)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(i_sht,e_sht)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(i_chr,e_chr)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6

# test proc {kunique}(i_str,e_str)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6

# test packed {kunique}(b_int)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test packed {kunique}(b_sht)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test packed {kunique}(b_chr)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test packed {kunique}(b_str)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test packed {kunique}(v_oid)
#setaggr impl: non-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test packed {kunique}(s_int)
#setaggr impl: non-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test packed {kunique}(s_sht)
#setaggr impl: non-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test packed {kunique}(s_chr)
#setaggr impl: non-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test packed {kunique}(s_str)
#setaggr impl: non-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test packed {kunique}(i_int)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test packed {kunique}(i_sht)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test packed {kunique}(i_chr)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test packed {kunique}(i_str)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test packed {max}(b_int,e_int)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test packed {max}(b_sht,e_sht)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test packed {max}(b_chr,e_chr)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test packed {max}(b_str,e_str)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test packed {max}(v_oid,e_oid)
#setaggr impl: non-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test packed {max}(s_int,e_int)
#setaggr impl: non-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test packed {max}(s_sht,e_sht)
#setaggr impl: non-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test packed {max}(s_chr,e_chr)
#setaggr impl: non-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test packed {max}(s_str,e_str)
#setaggr impl: non-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test packed {max}(i_int,e_int)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test packed {max}(i_sht,e_sht)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test packed {max}(i_chr,e_chr)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test packed {max}(i_str,e_str)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test direct {max}(b_int)
#setaggr impl: int-optimized loop
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test direct {max}(b_sht)
#setaggr impl: sht-optimized loop
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test direct {max}(b_chr)
#setaggr impl: chr-optimized loop
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test direct {max}(b_str)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test direct {max}(v_oid)
#setaggr impl: void-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test direct {max}(s_int)
#setaggr impl: int-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test direct {max}(s_sht)
#setaggr impl: sht-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test direct {max}(s_chr)
#setaggr impl: chr-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test direct {max}(s_str)
#setaggr impl: non-optimized sort
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test direct {max}(i_int)
#setaggr impl: int-optimized loop
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test direct {max}(i_sht)
#setaggr impl: sht-optimized loop
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test direct {max}(i_chr)
#setaggr impl: chr-optimized loop
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test direct {max}(i_str)
#setaggr impl: non-optimized hash
	1	1
	2	2
	3	3
	4	4
	5	5
	6	6

# test direct {max}(b_int,e_int)
#setaggr impl: int-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test direct {max}(b_sht,e_sht)
#setaggr impl: sht-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test direct {max}(b_chr,e_chr)
#setaggr impl: chr-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test direct {max}(b_str,e_str)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test direct {max}(v_oid,e_oid)
#setaggr impl: void-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test direct {max}(s_int,e_int)
#setaggr impl: int-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test direct {max}(s_sht,e_sht)
#setaggr impl: sht-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test direct {max}(s_chr,e_chr)
#setaggr impl: chr-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test direct {max}(s_str,e_str)
#setaggr impl: non-optimized sort
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test direct {max}(i_int,e_int)
#setaggr impl: int-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test direct {max}(i_sht,e_sht)
#setaggr impl: sht-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test direct {max}(i_chr,e_chr)
#setaggr impl: chr-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil

# test direct {max}(i_str,e_str)
#setaggr impl: non-optimized hash
	1	1
	3	3
	4	4
	5	5
	6	6
	7	nil
	8	nil
