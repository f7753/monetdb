setoid(oid(2000000));
# This sequence is conflict free
#load(k10_unique1); load(k10_unique2);
qtrace(1);
t1:= k10_unique1.copy;
t2:= k10_unique1.copy;
t3:= k10_unique1.copy;
t4:= k10_unique1.copy;
t5:= k10_unique1.copy;
s1:= k10_unique2.copy;
s2:= k10_unique2.copy;
s3:= k10_unique2.copy;
s4:= k10_unique2.copy;
s5:= k10_unique2.copy;
printf("#~BeginVariableOutput~#\n"); cpu.print; printf("#~EndVariableOutput~#\n");
join(t1,s1.reverse).count.print;
join(t2,s2.reverse).count.print;
join(t3,s3.reverse).count.print;
join(t4,s4.reverse).count.print;
join(t5,s5.reverse).count.print;
printf("#~BeginVariableOutput~#\n"); cpu.print; printf("#~EndVariableOutput~#\n");
var i1,i2,i3,i4,i5;
printf("#~BeginVariableOutput~#\n"); qstat; printf("#~EndVariableOutput~#\n");
qtrace(0);qtrace(1);
threadcnt(4);printf("#~BeginVariableOutput~#\n"); cpu.print; printf("#~EndVariableOutput~#\n");
{|	
	i1:=join(t1,s1.reverse).count;
	i2:=join(t2,s2.reverse).count;
	i3:=join(t3,s3.reverse).count;
	i4:=join(t4,s4.reverse).count;
	i5:=join(t5,s5.reverse).count;
|}
printf("#~BeginVariableOutput~#\n"); qstat; printf("#~EndVariableOutput~#\n");
qtrace(0);
print(i1);
print(i2);
print(i3);
print(i4);
print(i5);
print("done parallel");
"pseudo_thread_name".print;
printf("#~BeginVariableOutput~#\n"); view_gdk_thread.print; printf("#~EndVariableOutput~#\n");
printf("#~BeginVariableOutput~#\n"); view_gdk_env.print; printf("#~EndVariableOutput~#\n");
printf("#~BeginVariableOutput~#\n"); cpu.print; printf("#~EndVariableOutput~#\n");
quit;
quit;
