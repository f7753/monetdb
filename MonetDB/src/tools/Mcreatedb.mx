@f Mcreatedb
@a M. L. Kersten and Peter Boncz
@v 3.0
@* The utility Mcreatedb
@+ Manual Page
@T
The {\tt Mcreatedb} utility is used to create Monet databases, and add
users to them. The {\tt Mdestroy} utility {\bf irrecuperably} 
removes a database (storage inclusive) altogether.

@- Usage
@T
\begin{verbatim}
Mdestroydb -db <name> [-monetrc <environment>]

Mcreatedb -db <name> [-monetrc <environment>]  
	  the default database location is ./dbfarm/
	  the environment variables as stored in '.monet.conf'\n
\end{verbatim}
 
@- Function
@T
The program {\bf Mcreatedb} is used to initialize a single Monet database.
Let's explain some concept managed by this utility:

\begin{description}
\item[database]
A Monet server can have one 'database' open at one time and all data in 
a database is localized in one {\em database-directory}. 
The default is to localize all databases in a DBFARM, which is
typically set to a system wide variable to allocate the disk files
to a specific piece of hardware (e.g. a RAID-5 box).
The default DBFARM and DB are obtained from a .monet.conf file, which 
resides in the current or the home directory of the user or is
passed upon system initialization.
The default directory for a database named DB is {\tt\small ./DBFARM/DB}. 
If DB contains a '/' it is assumed to be a (relative) path to the directory 
where the database files are to be found.

\item[database initialization]
{\em initializing a database} means that it is created empty 
(there are no tables).  The access modes of the database directories 
are to be set to the creator of the database.

\item[database users]
The person who starts up the {\bf Mserver} utility (also dubbed 
'the console') is by default the database administrator. 
Others accessing the running server, e.g. 
using the {\bf Mclient} utility, are 'normal' users. A separate
authorization module is required to guard against malicious
users.
\end{description}

On session init, for every user the script {\em monet\_general} is executed.
This script typically contains instructions to load kernel modules of
general use.

@- Files
@T
For database creation you need to be aware of two locations
The 'scripts' directory below is a subdirectory of the directory in which
the Monet source tree was installed. This location is compiled into the
code upon installation.
The default assemblage place for databases is 'dbfarm', which can be 
found in the same directory.
\begin{verbatim}

.../share/Monet/general.mil  # generic obligatory prelude
./dbfarm/$DB/                # default database directory
./dbfarm/$DB/bat/            # database tables directory
./dbfarm/$DB/bat/BBP.dir     # database BAT directory
\end{verbatim}
@
@{
@+ Implementation
@c
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at 
 * http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 *		   Peter Boncz <Peter.Boncz@cwi.nl>
 *		   Niels Nes <Niels.Nes@cwi.nl>
 */

#define GDK_NOLINK
#include <gdk.h>
/*
#include "../gdk/gdk_utils.c"
*/

static int error, fatal;
static char dbhome[PATHLENGTH] = {0};
static char farm[PATHLENGTH]= {0};
static str  prog, user[64] = { 0 };
static char dir=0;

extern str getenv();
extern void dbargs(int argc,char **argv);
extern void initDB(char *dbhome);
extern void createDB(char *dbhome);
extern void localmkdir(str nme);
extern void destroyDB();

@-
By default adm and guest are introduced
@c
void usage(){
        printf("usage:\n%s -db <name> [-monetrc <environment>]\n",prog);
	printf("\tthe default database location is ./dbfarm/\n");
	printf("\tthe environment variables as stored in '.monet.conf'\n");
	exit(0);
}

int main(int argc, char **argv) {	
	int n;
	memset(user,0,64);

	dbargs(argc,argv);
	umask(000);

	if (strcmp(prog, "Mdestroydb")) {
		createDB(dbhome);
		initDB(dbhome);
	} else {
		destroyDB();
}
FAKE_ALLOCA_CALL; /* buggy Intel C/C++ compiler for Linux; see gdk.h (gdk.mx) for details */
return 0;
}
@-
The routine clearDB clears the database directory.
It simply removes all files that look like Monet files.
Actually, this program should be recoded as a script.
@c
void localrmdir( char *dirname ){
	DIR *dir = opendir(dirname);
	struct dirent *f = NULL;

	while(f=readdir(dir)){
		if (strcmp(f->d_name, ".") && strcmp(f->d_name, "..")){
		    struct stat st;
		    char nm[MAXPATHLEN];

		    sprintf(nm, "%s%c%s", dirname, DIR_SEP, f->d_name );
		    if ( (stat(nm,&st) == 0)  ){
			if ( st.st_mode & S_IFDIR  ){
				localrmdir( nm );
			} else {
				unlink(nm);
			}
		    }
		}
	}
	closedir(dir);
	rmdir( dirname );
}

void destroyDB() {
	if(access(GDKdirStr,R_OK|W_OK))
		printf("Can not access %s\n",GDKdirStr);
	else localrmdir(dbhome);
}
@-
A Monet database directory should contain a "bat" and "log"
subdirectory.  The generic routine localmkdir ensures that all
directories in a path exist.
@c
void localmkdir(str nme) {
	struct stat buf;
	FILE *fd;
	int i=0;
	char msg[MAXPATHLEN], buffer[MAXPATHLEN], checkbuf[MAXPATHLEN];
	
	sprintf(buffer,"%s%c%s",dbhome,DIR_SEP,nme);
	memset(checkbuf,0,MAXPATHLEN);
	while(i<strlen(buffer))
	{
		do
		{
			checkbuf[i]=buffer[i];
		}
		while(buffer[i++]!=DIR_SEP && i<strlen(buffer));
		if ( (stat(checkbuf,&buf) == 0)  )
			if ( buf.st_mode & S_IFDIR  )
				continue;
			else { sprintf(msg,"%s: mkdir(%s):\n",prog,checkbuf);
				return;
				};
		if ( errno == ENOENT ) {
			if ( checkbuf[i-1] == DIR_SEP ) checkbuf[i-1]=0;
			printf("# %s \n",checkbuf); 
	 		if ( mkdir(checkbuf,0755)) {
				sprintf(msg,"%s: mkdir(%s):\n",prog,checkbuf);
				perror(msg);
		   	} 
			if ( checkbuf[i-1] == 0 ) checkbuf[i-1]=DIR_SEP;
		}
		else {
			sprintf(msg,"%s: mkdir(%s):\n",prog,checkbuf);
			perror(msg);

		} 
	}	
}
void createDB(char *home) {	
	char buffer[4096];
	char *u,*r; int i;

	localmkdir("");
	localmkdir("bat");
}
#ifdef WIN32
#define RM "del"
#else
#define RM "rm -f"
#endif
void initDB(char *db) {	
        char buffer[2048];
        int ret;
        printf("Mcreatedb: calling 'Mserver -initonly -db %s -monetrc %s' for the first time..\n",db,GDKmonetrcStr);
        sprintf(buffer,"Mserver -initonly -db %s -monetrc %s 2>.Merr 1>.Mout\n", 
			db, GDKmonetrcStr);
        ret = system(buffer);
#ifndef WIN32
        if (ret) {
            printf("Mcreatedb: database '%s' crashed!\n",db);
            sprintf(buffer, "cat .Mout .Merr");
	    (void)system(buffer);
        } else
#endif
            printf("Mcreatedb: database '%s' has been initialized succesfully!\n",db);
	sprintf(buffer, "%s .Mout .Merr", RM );
	(void)system(buffer);
}

@- Common utilities
The routine getarguments is shared by most tools.
It locates the .monet.conf file and initializes the dbfarm parameter.
The location of the source scripts for the database are localized in the
MONET-PREFIX directory, where all installation files are maintained.

It subsequently analyses the calling parameters to determine the actual
database name. To avoid errors, such as accidentally destroying the
default database, given the DB name is mandatory.

@c
void dbargs(int argc,char **argv) {
 	int i, usr=0; 
	char *s=0;
	char *db=0, *monetrc=0;
	FILE *rc = NULL;

	prog = argv[0];
	/* find tail of command name */
	s = strrchr(prog,DIR_SEP); if( s ){ prog = s+1;}
	s = strrchr(prog,'\\'); if( s ){ prog = s+1;}

	if(argc<3) usage();
	for(i=1;i<argc;i++) {
		if( strcmp(argv[i],"-monetrc")==0){
			monetrc= argv[++i];
		} else
		if( strcmp(argv[i],"-db")==0){
			db = argv[++i];
		} else {
			fprintf(stderr,"unknown argument '%s'\n", argv[i]);
			usage();
		}
	}
	user[usr] = 0;
        if( db == 0) {
                fprintf(stderr, "%s: database name missing\n",prog);
		exit(0);
        }
	GDKenvironment(db,monetrc);

	printf("# monetrc=%s\n",GDKmonetrcStr);
	rc = fopen(GDKmonetrcStr,"r");
	if (!rc) {
		fprintf(stderr,"Monet configuration file missing\n");
		exit(-1);
	} else
		fclose(rc);

	printf("# dbfarm=%s\n",GDKdbfarmStr);
	printf("# dbname=%s\n",GDKdbnameStr);

	if( GDKdirStr == NULL){
		fprintf(stderr,"Database directory name missing\n");
		exit(-1);
	}
	printf("# dbdir=%s\n",GDKdirStr);
	strcpy(dbhome,GDKdirStr);

	printf("# distr=%s\n",GDKdistrStr);
}
@}
