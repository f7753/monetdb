@f Mcreatedb
@a M. L. Kersten and Peter Boncz
@v 2.0
@* The utility Mcreatedb
@+ Manual Page
@T
The {\tt Mcreatedb} utility is used to create Monet databases, and add
users to them. The {\tt Mdestroy} utility {\bf irrecuperably} removes users 
from a database, or removes a database (storage inclusive) altogether.

@- Usage
@T
\begin{verbatim}
Mdestroydb [-home <file>] -db <name> {-user <usr>}\n");

Mcreatedb [-home <file>] -db <name> {-user <usr>} [-port <port>] [-dir <dbdir>]
	  the special file 'homes' is expected in $MONETHOME
	  the default database directory is $MONETHOME/dbfarm/
 	  the default users are 'adm' and 'guest'
	  the default tcp port is 50050
\end{verbatim}
 
These utilities were improved so they now update (and create, if necessary) the
'homes' file themselves - as opposed to letting this be up to the poor user.
 
@- Function
@T
The program {\bf Mcreatedb} is used to initialize a single Monet database.
Let's explain some concept managed by this utility:

\begin{description}
\item[database]
A Monet server can have one 'database' open at one time. All data in one
database is organized from within one {\em database-directory}. 
The deault database-directory (DBDIR) for a database named DB is 
{\tt\small \$MONETHOME/dbfarm/DB}.

\item[homes file]
Information about which databases exist is administered in the
{\em homes} file. The location of this file is {\tt\small \$MONETHOME/homes}.

\item[database initialization]
{\em initializing a database} means that it is created empty (there are no 
tables), and user environments are set up for specific users. 

\item[database users]
If no other options are given, {\bf Mcreatedb} creates the special users 
'{\em adm}' (system administrator), and '{\em guest}'. The person who starts up 
the {\bf Mserver} utility (also dubbed 'the console') is by default the 
database administrator. Others accessing the running server, e.g. 
using the {\bf Mclient} utility, are 'normal' users. We currently take the 
UNIX username as the default for the Monet username. 
Unknown users are remapped to the special 'guest', who by default
has less priviliges. 

\item[init scripts]
A {\em user-environment} consists of three MIL files that
that are executed on session init and exit respectively. 
These scripts are user specific located in the {\tt\small DBDIR/users/USER}
On session init, every user has to execute the {\em general.mil}.
It is a un-modifyable link to the copy owned by 'adm'. Both
the '{\em prelude.mil}' (executed at session init after general.mil)
and '{\em epilogue.mil}' (executed at session end) are private to each user
and editable to one's own preferences. 
\end{description}
Init scripts are often used to 
load/drop extension modules that are often used, and define user-written
MIL procedures (as they are not persistent).

If the MONETDIST variable is not set, we take the value from MONETHOME.

@- Files
@T
\begin{verbatim}
$MONETHOME/homes                      # Monet metadatabase file

$MONETDIST/scripts/general.mil        # generic obligatory prelude
$MONETDIST/scripts/adm/prelude.mil    # generic db admin prelude
$MONETDIST/scripts/adm/epilogue.mil   # generic db admin epilogue
$MONETDIST/scripts/guest/prelude.mil  # generic guest prelude
$MONETDIST/scripts/guest/epilogue.mil # generic guest epilogue
$MONETDIST/scripts/user/prelude.mil   # generic user prelude
$MONETDIST/scripts/user/epilogue.mil  # generic user epilogue

$MONETHOME/dbfarm/$DB/                # database directory
$MONETHOME/dbfarm/$DB/bat/            # database tables directory
$MONETHOME/dbfarm/$DB/bat/BBP.dir     # database BAT directory
$MONETHOME/dbfarm/$DB/users/adm/      # admin script/module objectcode dir
$MONETHOME/dbfarm/$DB/users/adm/general.mil # obligatory prelude for all users 
$MONETHOME/dbfarm/$DB/users/guest/    # guest script/module objectcode dir
$MONETHOME/dbfarm/$DB/users/$USER/    # user script/module objectcode dir
$MONETHOME/dbfarm/$DB/users/$USER/epilogue.mil # (editable) session epilogue
$MONETHOME/dbfarm/$DB/users/$USER/prelude.mil  # (editable) session prelude
\end{verbatim}
@
@{
@+ Implementation
@c
#define GDK_NOLINK
#include <gdk.h>
#include "../gdk/gdk_utils.c"

int error, fatal;
char homes[PATHLENGTH] = {0}, *home=NULL, *dist, *farm, *db=NULL;
str  prog, user[64] = { 0 };
char dir=0, defaultport[IDLENGTH] = "50050";

extern str getenv();
extern void dbargs(int argc,char **argv);
extern void initDB(char *home, char *db);
extern void createDB(char *home);
extern void localmkdir(str nme);
extern void destroyDB(str user);
@-
By default adm and guest are introduced
@c
void usage(){
        printf("usage:\nMdestroydb [-home <file>] -db <name> {-user <usr>}\n");
	printf("\tthe special file 'homes' is expected in $MONETHOME\n");
	printf("Mcreatedb [-home <file>] -db <name> {-user <usr>} [-dir <dbdir>] [-port <port>]\n");
	printf("\tthe default users are 'adm' and 'guest'\n");
	printf("\tthe default database directory is $MONETHOME/dbfarm/\n");
	printf("\tthe default tcp port is 50050\n");
	exit(0);
}

int main(int argc, char **argv) {	
	char *s;
	int n, i=0;
	memset(user,0,64);

	dbargs(argc,argv);

	/* try to determine GDKport and GDKdir beforehand */
	if (strcmp(prog, "Mdestroydb") && !GDKenviron[GDKdir][0]) {
		strcpy(s=GDKenviron[GDKdir], farm);
		if ((n = strlen(s)) != 0) {
			if (s[n-1] != DIR_SEP) s[n++] = DIR_SEP;
		}
		strcpy(s+n, "dbfarm");
		*(s+n+6) = DIR_SEP;
		strcpy(s+n+7, db);
		fprintf(stderr, "Mcreatedb: using default dbdir %s.\n", s);
	}
	if (strcmp(prog, "Mdestroydb") && !GDKenviron[GDKport][0]) {
		if (((s=getenv("MONETPORT")) == NULL)||(s=strchr(s,':')) == NULL) {
			strcpy(s=GDKenviron[GDKport], "50050");
			fprintf(stderr, "Mcreatedb: using default port %s.\n", s);
		} else {
			strcpy(GDKportStr, s+1);
	    
		}
	}
	/* lookup/add our (db,user) pairs in the homes file */
	do {
		if (GDKhomeScan(user[i], db, homes) == 0) {
			GDKhomeIns(user[i], db, homes);
		}
	} while(user[++i]);
	
	printf("%s: processing database '%s' in %s.\n", prog, db, dbhome);
	umask(000);

	if (strcmp(prog, "Mdestroydb")) {
		createDB(home);
		initDB(home,db);
	} else {
		GDKhomeDel(user, db, homes);
		if (*user == 0) { 
			destroyDB(0);
		} else { 
			for(n=0; user[n]; n++) destroyDB(user[n]);
		}
	}
	return 0;
}
@-
The routine clearDB clears the database directory.
It simply removes all files that look like Monet files.
@c
void destroyDB(str user) {
        char buffer[2048];
	if (user) {
        	sprintf(buffer, "rm -rf %s%cusers%c%s;\n", 
			dbhome, DIR_SEP, user, DIR_SEP); 
	} else {
        	sprintf(buffer, "rm -rf %s;\n", dbhome); /* NO MERCY */
	}
        system(buffer);
}
@-
A Monet database directory should contain a "bat", "log", and "users"
subdirectory. 
This information is checked using the homes file, which is
read first.
@c
void localmkdir(str nme) {
	struct stat buf;
	FILE *fd;
	int i=0;
	char msg[MAXPATHLEN], buffer[MAXPATHLEN], checkbuf[MAXPATHLEN];
	
	sprintf(buffer,"%s%c%s",dbhome,DIR_SEP,nme);
	memset(checkbuf,0,MAXPATHLEN);
	while(i<strlen(buffer))
	{
		do
		{
			checkbuf[i]=buffer[i];
		}
		while(buffer[i++]!=DIR_SEP && i<strlen(buffer));
		if ( (stat(checkbuf,&buf) == 0)  )
			if ( buf.st_mode & S_IFDIR  )
				continue;
			else { sprintf(msg,"Mcreatedb: mkdir(%s):\n",checkbuf);
				return;
				};
		if ( errno == ENOENT ) {
			if ( checkbuf[i-1] == DIR_SEP ) checkbuf[i-1]=0;
			printf("# %s \n",checkbuf); 
	 		if ( mkdir(checkbuf,0755)) {
				sprintf(msg,"Mcreatedb: mkdir(%s):\n",checkbuf);
				perror(msg);
		   	} 
			if ( checkbuf[i-1] == 0 ) checkbuf[i-1]=DIR_SEP;
		}
		else {
			sprintf(msg,"Mcreatedb: mkdir(%s):\n",checkbuf);
			perror(msg);

		} 
	}	
}


void createDB(char *home) {	
	char buffer[4096];

	localmkdir("");
	localmkdir("bat");
@-
All users permissions are stored in the directory 'users', with
a separate directory for each. This scheme enables the database
administrator to selectively control access and the initialization
procedures. They should not be confused by user-defined preludes,
which are executed after they have successfully gained access.
@c
	localmkdir("users");
@-
By default the 'adm' and 'guest' users are always introduced.
The former uses a copy of the script files from the Monet home.
The latter uses the default environment
@c
	/* if (*user) */ {
		char *u,*r; int i;
		/* copy standard prelude en procs files to local place */
		sprintf(buffer,
		    "cp -r %s/scripts/adm %s/scripts/guest %s/users;\ncp %s/scripts/general.mil %s/users/adm; chmod 0755 %s/users/adm %s/users/guest;\nrm -f %s/users/guest/general.mil;\nln -s %s/users/adm/general.mil %s/users/guest/general.mil\n",
		    dist,dist,dbhome,dist,dbhome,dbhome,dbhome,dbhome,dbhome,dbhome);
		/* printf("%s\n", buffer);*/
		for(r=buffer; (r=strchr(r, '\n')) != NULL; *r=' ');
		system(buffer);

@-
All users share the general.mil file stored in the 'adm' directory.
It enforces a common starting environment.
@c
		for(u=user[i=0]; u; u=user[++i]) {
			char d[PATHLENGTH];
			if (strcmp(u, "adm") == 0) continue;
			if (strcmp(u, "guest") == 0) continue;
			sprintf(d, "users%c%s", DIR_SEP, u);
			localmkdir(d);
			sprintf(buffer,
		  	    "cp -r %s/scripts/user/* %s/%s;\nchmod 0755 %s/%s;\nchown -f %s %s/%s/*;\nrm -f %s/%s/general.mil;\nln -s %s/users/adm/general.mil %s/%s/general.mil\n", dist,dbhome,d,dbhome,d,u,dbhome,d,dbhome,d,dbhome,dbhome,d);
		  	/* printf("%s\n", buffer); */
			for(r=buffer; (r=strchr(r, '\n')) != NULL; *r=' ');
		  	system(buffer);
		}
	}
}
void initDB(char *home, char *db) {	
	char buffer[2048];

	printf("Mcreatedb: calling 'Mserver -db %s' for the first time..\n",db);
	sprintf(buffer,"Mserver -single -home %s -db %s </dev/null >/dev/null\n", farm, db);
	if (system(buffer))
            printf("Mcreatedb: database '%s' crashed!\n",db);
        else
            printf("Mcreatedb: database '%s' has been initialized succesfully!\n",db);
}
@- Common utilities
The routine getarguments is shared by most tools. They analyse the calling
parameters to determine the home and database. 
Furthermore, it prepares the argument list for the database server.
This code is textually included in all relevant tools. (Should be
done in a better way).
@c

void dbargs(int argc,char **argv) {
 	int i, usr=0; 
	char *s=0;

	home=(char *) getenv("MONETHOME");
	farm=(char *) getenv("MONETFARM");
	dist=(char *) getenv("MONETDIST");
	if (dist == NULL) dist = home;
	if (farm == NULL) farm = home;

	if(argc<3) usage();
	for(i=1;i<argc;i++) {
		if( strcmp(argv[i],"-home")==0) {
			farm = home = argv[++i];
		} else if( strcmp(argv[i],"-db")==0){
			db = argv[++i];
		} else if( strcmp(argv[i],"-dir")==0){
			strcpy(GDKenviron[GDKdir], argv[++i]);
		} else if( strcmp(argv[i],"-port")==0){
			strcpy(GDKenviron[GDKport], argv[++i]);
		} else if( strcmp(argv[i],"-user")==0) {
			user[usr++] = argv[++i];
		}
	}
	user[usr] = 0;
        if(home == 0) {
                fprintf(stderr, "Mcreatedb: MONETHOME missing\n");
		exit(0);
        }
        if( db == 0) {
                fprintf(stderr, "Mcreatedb: database name missing\n");
		exit(0);
        }
	sprintf(homes, "%s%chomes",farm, DIR_SEP);
        if (access(homes, R_OK | F_OK) ){
	    FILE *fp = fopen(homes, "w"); 
	    if (fp == NULL) {
                fprintf(stderr, "Mcreatedb: cannot create %s file\n", homes);
                exit(0);
	    } else {
                fprintf(stderr, "Mcreatedb: created empty %s file\n", homes);
		fclose(fp);
	    }
        }
	prog = argv[0];
	for(s=prog+strlen(prog)-1; s >= prog; s--)
		if (*s == '\\' || *s == DIR_SEP) break;  
	prog = s+1;
}
@}
