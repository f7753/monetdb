@f yytree
@a M. L. Kersten, P. Boncz
@+ The Parse Tree Structures
This file contains the utility routines to construct a parse tree
within a YACC environment.
@{
@h
#ifndef _YYTREE_H_
#define _YYTREE_H_

#include "monet.h"

#define par_retval	free.batref.id
#define old_cntxt	yyval.len

m_export YYSTREE 		yylognode();
m_export YYSTREE	 	yylogexpand();
m_export void 		yylogstart();
m_export void 		yylogclean();

m_export YYSTREE	 	yyexpand();
m_export YYSTREE 		yynode();
m_export YYSTREE 		yyload();
m_export void 		yysave();
m_export void 		yyfree();
m_export YYSTREE 		yycopy();
m_export void 		yyclean();
m_export YYSTREE 		yysubstitute_proc();
m_export YYSTREE 		yysubstitute_iter();
m_export int 		yypostprocess();
m_export void 		yylogout();
@c
#include "yytree.h"
#include <stdio.h> 
#include <ctype.h> 
#include "monet_parse.h"

static oid yyid = 1, yyoid = 1;
YYSTREE	 yyroot = NULL;

void yylogstart() { 
	yyroot = NULL;
}

void yylogclean() {
	YYSTREE t2, t1 = yyroot;
	while ((t2=t1) != NULL) {
	    t1 = t1->next; 
	    if (t2->free.yyid == 0) {
		@:yykill(t2)@
	    }
	}
}

void yylogout(YYSTREE t) {
	YYSTREE t1,t2=0;

	if (++yyoid == 0) yyoid=2; 
	yyid = yyoid;
	yypostprocess(t); 
	yyid = 1;

	for (t1=yyroot; t1; t1=t1->next) {
	    if (t1->free.yyid == yyoid) {
		if (t2) t2->next = t1->next;
		else yyroot = t1->next;
	    } else t2 = t1; 
	}
}

static 
void checklist(YYSTREE t) {
	YYSTREE t2, t1 = yyroot;
	while ((t2=t1) != NULL) {
	    t1 = t1->next; 
	    if (t2 == t) {
		t1 = yyroot;
		while(t1 != t2) {
			fprintf(stderr, "%d ", (int) t1);
			t1 = t1->next;
		}
		GDKerror("double present %d!!\n", t);
		break;
	    }
	}
}
	

YYSTREE yylognode( int tok, int val) {
	YYSTREE t = yynode(tok,val);
	PARDEBUG checklist(t);
	t->next = yyroot;
	return yyroot = t;
}


YYSTREE yynode( int tok, int val) {
	YYSTREE t;

	t =(YYSTREE) GDKmalloc(sizeof(*t));
	memset(t, 0, sizeof(*t));
	t->token = tok;
	t->yyval.vtype = val;
	return t;
}

@= yykill
	if ((@1)->token != TOK_TEMPLATE &&
	    (@1)->yyval.val.pval &&
	    ATOMextern((@1)->yyval.vtype))
	{
		GDKfree((@1)->yyval.val.pval);
	}
	GDKfree(@1);
@

@-
To avoid concurrency conflicts, all nodes are explicitly freed. 
@c
void yyfree(YYSTREE yytree) {
	YYSTREE delnode;
	int	i; 

	while (yytree) {
		for (i = 0; i < yytree->cnt; i++) {
			if (yytree->yysons[i]) {
				yyfree(yytree->yysons[i]);
			}
		}
		delnode = yytree; 
		yytree = yytree->overflow;
		@:yykill(delnode)@
	}
}

@= yyexpand
YYSTREE yy@1expand( YYSTREE yytree, YYSTREE y) {
	YYSTREE n;

	if (y == NULL) return yytree; 
	n = (yytree->last)?yytree->last:yytree;
	while (n->overflow) {
		n = n->overflow;
	}
	if (n->cnt == YYMAXSONS){
		yytree->last = n->overflow = yy@1node(0, 0);
		n = n->overflow;
		n->cnt = 1;
		n->yysons[0] = y;
	} else {
		n->yysons[n->cnt] = y;
		n->cnt++;
	}
	return yytree;
}
@c
@:yyexpand()@
@:yyexpand(log)@

extern str LEXNAME(int);

void yyprint(YYSTREE yytree) {
	static int level;
	char	num[20], tpe[20],*p;
	int	i;

	for(i = 0; i < level; i++) printf("\t");
	if (yytree == 0) {
		printf("NULL\n");
		return;
	}
	switch(yytree->yyval.vtype) {
	case TYPE_int:	strcpy(tpe, "int"); break;
	case TYPE_chr:	strcpy(tpe, "chr"); break;
	case TYPE_bit:	strcpy(tpe, "bit"); break;
	case TYPE_oid:	strcpy(tpe, "oid"); break;
	case TYPE_str:	strcpy(tpe, "str"); break;
	case TYPE_ptr:	strcpy(tpe, "ptr"); break;
	case TYPE_flt:	strcpy(tpe, "flt"); break;
	case TYPE_bat:	strcpy(tpe, "bat"); break;
	default: 	sprintf(tpe, "extended%d", yytree->yyval.vtype);
	}
	if (yytree->yyval.vtype != TYPE_str) {
		p = num; sprintf(num, "%d", yytree->yyval.val.ival); 
	} else { 
		if (yytree->yyval.val.sval) {
			p = yytree->yyval.val.sval;
		} else {
			p = num; 
			strcpy(num, "<null>"); 
		}
	}
	printf("%s [%s][%s]\n",LEXNAME(yytree->token),tpe,p);
	level++;
	do {
		for (i = 0; i < yytree->cnt; i++) {
			if (yytree->yysons[i]) yyprint(yytree->yysons[i]);
		}
	} while((yytree = yytree->overflow) != NULL);
	level--;
}


void yysave(FILE *fp, YYSTREE t) {
	int i;

	do {
		fwrite(t, 1, sizeof(struct YYS), fp); 
		if (ATOMextern(t->yyval.vtype)) {
			i = strlen(t->yyval.val.sval) + 1;
			fwrite(&i, 1, 4, fp); 
			fwrite(t->yyval.val.sval, 1, i, fp); 
		}
		for(i = 0; i < YYMAXSONS && t->yysons[i]; i++) {
			yysave(fp, t->yysons[i]);
		}
	} while ((t = t->overflow) != NULL); 
}


YYSTREE yyload(FILE *fp) {
       	YYSTREE t = yynode(0,0);
	int i;

       	if (fread(t, 1, sizeof(struct YYS), fp) == sizeof(struct YYS)) {
		if (ATOMextern(t->yyval.vtype)) {
			if (fread(&i, 1, 4, fp) != 4) {
				return 0;
			}
			t->yyval.val.sval = GDKmalloc(i);	
			if (fread(t->yyval.val.sval, 1, i, fp) != (size_t) i) {
				return 0;
			}
		}
	       	for(i = 0; i < YYMAXSONS && t->yysons[i]; i++) {
	       		t->yysons[i] = yyload(fp);
       		}
		if (t->overflow) {
			t->overflow = yyload(fp);
		}
	} else {
		return 0; 
	}
	
	return t;
}


YYSTREE yycopy(YYSTREE t) {
        int     i;
        YYSTREE tn;
 
        if (t == 0) {
                return 0;
        }
        tn = yynode(t->token,0);
        tn->cnt = t->cnt;
        tn->yyval = t->yyval;
	if (t->yyval.val.pval && (t->token != TOK_TEMPLATE)) {
		if (t->yyval.vtype == TYPE_str) {
			tn->yyval.val.sval = GDKstrdup(t->yyval.val.sval); 
		} else if (ATOMextern(t->yyval.vtype)) {
			tn->yyval.val.pval = GDKmalloc(t->yyval.len); 
			memcpy(tn->yyval.val.pval, 
				t->yyval.val.pval, t->yyval.len);
		}
	}
 
        for (i = 0; i < t->cnt; i++) {
                if (t->yysons[i]) tn->yysons[i] = yycopy(t->yysons[i]);
        }
	if (t->overflow) {
		tn->overflow = yycopy(t->overflow);
	}
        return tn;
}

@- Set Operator Trees
@c

int yypostprocess(YYSTREE lt) {
@-
Rewrite TOK_ASSIGNOP in the non-multiplexed case into a simple assignment.
In this way, we do not have to interpret it. It can follow the normal route.
@c
	if (lt->token==TOK_ASSIGNOP) {
		if (lt->yyval.val.sval[0]!='[') {
			if (lt->yysons[0]->token != TOK_IDENT) {
			    lt->token = 0;
			    GDKerror("yypostprocess: must %s= to a variable\n"
				, lt->yyval.val.sval);
			} else {
			    YYSTREE var = yylognode(0,0);
			    YYSTREE op = yylognode(0,0);
			    *var = *lt->yysons[0];
			    *op = *lt;
			    var->yyval.val.sval=GDKstrdup(var->yyval.val.sval);
			    op->token = TOK_FUNCTION;
			    lt->token = TOK_ASSIGNMENT;
			    lt->yyval.val.ival = 0;
			    lt->yyval.vtype = TYPE_void;
			    lt->cnt = 2;
			    lt->last = lt->overflow = NULL;
			    lt->yysons[0] = var;
			    lt->yysons[1] = op;
			}
		    
		} else {
			/* multiplex_resolve will catch the ASSIGNOP */
			lt->token = TOK_FUNCTION;
			lt->yyval.len = -TOK_ASSIGNOP; 
		}
	} 
@-
rewrite the FUNCTION tree to its modern syntax with 
yysons[0]=params, yysons[1]=expansion-cache, yysons[2]=deref/NULL
We store the parameter evaluation space size in the ival of the exec node.
@c
	if (lt->token == TOK_ATOM) {
		lt->token = TOK_FUNCTION;
	}
	if (lt->token==TOK_FUNCTION || 
	    lt->token==TOK_SETOP || 
            lt->token==TOK_SETAGGR) 
	{
		YYSTREE params, exec = yynode(0,0), deref;
		if (lt->yyval.vtype == TYPE_void) {
			deref = lt->yysons[0];
		    	params = lt->yysons[1];
                	yypostprocess(deref);
		} else {
			deref = NULL;
		    	params = yynode(0,0);
			*params = *lt;
			params->token = 0;
			params->yyval.vtype = TYPE_void;
		}
		exec->yyval.vtype = TYPE_int;
		exec->yyval.val.ival = yypostprocess(params)*sizeof(ValRecord);
		lt->cnt = 0;
		lt->last = lt->overflow = NULL;
		lt->free.yyid = yyid;
		yyexpand(lt,params); 
		yyexpand(lt,exec); 
		if (deref) yyexpand(lt,deref); 
	} else {
@-
otherwise just count the number of sons (i.e. parameters below 'params' nodes)
@c
		int i, sons = 1, range_sons = 0;
		YYSTREE t = lt;
		do {
			t->free.yyid = yyid;
			for(i=0; i<t->cnt; i++) if (t->yysons[i]) {
				range_sons |= 
					(t->yysons[i]->token == TOK_RANGETEMP);
				yypostprocess(t->yysons[i]);
				sons++;
			}
		}  while ((t = t->overflow) != NULL);
		return range_sons?MAXPARAMS:sons;
	} 
        return 0;
}
 
@- Run-Time Proc Trees
Procedures are parsed into template trees, forming their definition.
At run-time, copies are drawn from it with @%yysubstitute()@. During
this copying phase, the @%$X@ parameters are substituted by TOK_TEMPLATE
values. @%TOK_TEMPLATE@ act as pointers in the Monet Interpreters: their
@%yyval.val.pval@ pointers point to a variable binding. The idea is
that on PROC invocation, an @%argv@ array of @%ValRecord@s exist, in which 
the actual parameter values have been assembled.  The run-time copy of the 
tree has pointers into this array, such that on repetitive PROC invocations, 
the new values just have to be assembled in the array, without having to 
traverse the MIL tree.
@c
YYSTREE yysubstitute_proc(YYSTREE t, int argc, ValPtr argv) {
	YYSTREE tt = yynode(t->token, 0);
	int i;

#if 0
argv->val.ival++; /* PETER: proc instantiation stats hack */
#endif
	tt->yyval = t->yyval;
       	if (t->token == TOK_TEMPLATE) {
	    if ((i = t->yyval.val.ival) == 0) {
		tt->token = TOK_CONSTANT;
		tt->yyval.vtype = TYPE_int;
		tt->yyval.val.ival = argc;
	    } else if ((i>0) && (i <= argc)) {
	        tt->yyval.vtype = TYPE_void;
		tt->yyval.val.pval = argv+i;
	    } else { 
		GDKerror("yysubstitute: illegal argument '$%d'.\n", i);
		tt->yyval.vtype = TYPE_int;
		tt->yyval.val.ival = 0;
	    }
	} else if (t->yyval.val.pval && ATOMextern(t->yyval.vtype)) {
	    if (t->yyval.vtype == TYPE_str) {
		tt->yyval.val.sval = GDKstrdup(t->yyval.val.pval);
	    } else {
	        tt->yyval.val.pval = GDKmalloc(t->yyval.len); 
	        memcpy(tt->yyval.val.pval, t->yyval.val.pval, t->yyval.len);
	    } 
	}
	tt->cnt = t->cnt;
	for(i = 0; i < t->cnt; i++) 
       	    if (t->yysons[i]) 
		tt->yysons[i] = yysubstitute_proc(t->yysons[i], argc, argv);

	if (t->overflow) 
	    tt->overflow = yysubstitute_proc(t->overflow, argc, argv);

	if ((t->token == TOK_VARTEMP)  || (t->token == TOK_RANGETEMP)) {
		tt->yyval.val.pval = (ptr) argv;
		tt->yyval.len = argc; 
	}
	return tt;
}

YYSTREE yysubstitute_iter(YYSTREE t, int argc, ValPtr argv) {
	YYSTREE tt = yynode(t->token, 0);
	int i;

	tt->yyval = t->yyval;
       	if (t->token == TOK_ITERTEMP) {
	    tt->yyval.vtype = TYPE_void;
	    tt->yyval.val.pval = argv + t->yyval.val.ival;
	} else if (t->yyval.val.pval && ATOMextern(t->yyval.vtype)) {
	    if (t->yyval.vtype == TYPE_str) {
		tt->yyval.val.sval = GDKstrdup(t->yyval.val.pval);
	    } else {
	        tt->yyval.val.pval = GDKmalloc(t->yyval.len); 
	        memcpy(tt->yyval.val.pval, t->yyval.val.pval, t->yyval.len);
	    } 
	}
	tt->cnt = t->cnt;
	if (t->yysons[0]) 
	     tt->yysons[0] = (t->token == TOK_ITERATOR)?
		yycopy(t->yysons[0]):
		yysubstitute_iter(t->yysons[0], argc, argv);
	for(i = 1; i < t->cnt; i++) 
	    if (t->yysons[i]) 
		tt->yysons[i] = yysubstitute_iter(t->yysons[i], argc, argv);

	if (t->overflow)
	    tt->overflow = yysubstitute_iter(t->overflow, argc, argv);

	return tt;
}

@- Tree-guided Garbage Collection
The Monet Interpreter (mis)uses the syntax tree structures to guide the 
garbage collection process. This is because:
@T
\begin{itemize}
\item {\em it is possible}. MIL has call-by value parameters. Only return 
values are a problem, from the garbage collection point of view. Functions 
can at most have one return value, making its possible to do the job 
without specific datastructures.
\item {\em it is efficient}. We can avoid a garbage collection module, and
still collect garbage at the earliest possibe time. This is of course
gained by the restrictions put in by the language.
\end{itemize}
@
After invocation of a MIL statement, its MIL tree representation will
contain references to the allocated variables and even BATs, in 
the @%free@ field. MIL has the rule that each simple statement can
generate only one return value (all other garbage (if any) must be collected 
by hand!). This return value is propagated internally in during the
execution of the simple statement, and can only be deleted after the
simple statement has finished executing. 
@
Garbage collection calls are therfore done carefully at dedicated
places in the Monet Interpreter.
@
To obtain high performance, the @%CLEANUP@ macros is inserted for code
expansion, rather than a direct function call to @%yycleanup()@. Due 
to the recursive nature of the trees, it will of course come to recursion 
if trees are more than 2-deep.
@h
#define GARBAGE(x)\
if (x->dealloc) {\
    if (x->dealloc == TYPE_bat) {\
	BAT* _b = BATdescriptor(x->free.batref.id);\
        if (_b == NULL) {\
		GDKerror("yyclean: BAT %d GONE\n", x->free.batref.id);\
	} else if (x->free.batref.stamp != _b->batStamp) {\
		GDKerror("yyclean: BAT %d OVERWRITTEN (stamp %d != %d)\n", x->free.batref.id,\
			BATdescriptor(x->free.batref.id)->batStamp, x->free.batref.stamp);\
	} else {\
		ATOMunfix(x->dealloc, &x->free.batref.id);\
	}\
    } else {\
	ATOMunfix(x->dealloc, x->free.atmref);\
	if (ATOMextern(x->dealloc)) GDKfree(x->free.atmref);\
    }\
    x->dealloc = 0;\
}
/*
		BBPunfix(_b->batCacheid);\
*/

#define CLEANUP(x)	switch(((YYSTREE) x)->token) {\
	case TOK_SEQ:        break;\
	case TOK_SEQBLOCK:   break;\
	case TOK_PARBLOCK:   break;\
	case TOK_ITCOMPILED: break;\
	case TOK_WHILE:      break;\
	default:\
	{       YYSTREE *cleanup_tt, cleanup_t;\
		int cleanup_j;\
                for(cleanup_t = (YYSTREE) x; cleanup_t;\
		    cleanup_t = cleanup_t->overflow ) {\
                        for(cleanup_j = 0, cleanup_tt = cleanup_t->yysons;\
			    cleanup_j < cleanup_t->cnt;\
			    cleanup_j++, cleanup_tt++)\
			{\
                                if (*cleanup_tt) yyclean(*cleanup_tt);\
                        }\
                }\
         }\
         GARBAGE(((YYSTREE) x));\
}
#define CATCHVAL(stk,lt,res,always)\
	if (ATOMextern(res->vtype)) {\
		lt->dealloc = res->vtype;\
		lt->free.atmref = res->val.pval;\
	} else if (res->vtype == TYPE_bat) {\
		BAT* _b = BATdescriptor(res->val.bval);\
		if (_b != NULL) {\
			int _newbat = (_b->batStamp > stamp);\
			if (_newbat == FALSE) {\
				PROPDEBUG monet_checkbat(_b, FALSE);\
			} else if (_b->batStamp > 0) {\
				CHECKDEBUG monet_checkbat(_b, BATcount(_b) > 0);\
				if (BATcount(_b) > 0) {\
					BATsetaccess(_b, BAT_READ);\
				}\
				_b->batStamp = -_b->batStamp;\
			}\
			if (always || _newbat) {\
 				lt->dealloc = TYPE_bat;\
				lt->free.batref.id = res->val.bval;\
				lt->free.batref.stamp = _b->batStamp;\
				BATDEBUG printf("# batstamp(%d) = %d\n",\
					 _b->batCacheid, _b->batStamp);\
			}\
		}\
		BBPpersistent(res->val.bval, FALSE); \
		BBPunfix(res->val.bval); \
	}
#define CATCHRET(stk,lt,res,x)\
	if (x == -TOK_RETURN) {\
		lt->dealloc = res->vtype;\
		lt->free.atmref = res->val.pval;\
		if (res->vtype == TYPE_bat) {\
		    BAT* _b = BATdescriptor(res->val.bval);\
		    if (_b) lt->free.batref.stamp = _b->batStamp;\
		}\
		x = 0;\
	}
#define CATCHERR(stk,lt,res,x,fcn)\
	if (x == -TOK_BREAK) {\
		x = 0;\
	} else if ((x<0) && (res->vtype == TYPE_str) && res->val.sval) {\
                char *s = (char*) TBL_getname(fcn);\
                GDKerror("%s: %s.\n", s?s:"null", res->val.sval);\
	        CLEANUP(lt); res->vtype = TYPE_void; lt->dealloc = 0;\
        }
#define CATCHBREAK(x) ((x==-TOK_BREAK)?0:x)

#endif /* _YYTREE_H_ */
@c

void yyclean(YYSTREE t) { switch(t->token) {
        case TOK_SEQ:
        case TOK_SEQBLOCK:
        case TOK_PARBLOCK:
        case TOK_WHILE:
        case TOK_ITCOMPILED: return;
        }
        GARBAGE(t);
	for (; t; t = t->overflow) {
                YYSTREE *sons;
		int j;
                for(j = 0, sons= t->yysons; j < t->cnt; j++, sons++) {
                        if (*sons) CLEANUP(*sons);
                }
	}
}
@}
