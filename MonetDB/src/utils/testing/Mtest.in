#!@BASH@

THIS=$0
THISDIR=${0%/*}
THISFILE=${0##*/}

#############################################################################
#	FUNCTIONS

function UsageMtest () {
	if     [ -f     $MONETDIST/src/utils/testing/README ] ; then  README=$MONETDIST/src/utils/testing/README
	  elif [ -f     $MONETHOME/src/utils/testing/README ] ; then  README=$MONETHOME/src/utils/testing/README
	  elif [ -f $THISDIR/../../src/utils/testing/README ] ; then  README=$THISDIR/../../src/utils/testing/README
	  else                                                        README=/ufs/monet/Current/monet/src/utils/testing/README
	fi
	cat << EOT

Usage:  $THISFILE [-I<exp>] [-c<num>] [-a<num>] [-t<sec>] [-d<num>] [-r] [<dir>] [<tests>]

 -I<exp> : (optional) ignore lines matching <exp> during diff (default: -I'^#')
 -c<num> : (optional) use <num> lines of context during diff (default: -c1)
 -a<num> : (optional) accuracy for diff: 0=lines, 1=words, 2=chars (default: -a1)
 -t<sec> : (optional) timeout: kill (hanging) M{server,client,createdb,destroydb,load}
                       after <sec> seconds; -t0 means no timeout (default: -t600)
 -d<num> : (optional) debugmask to be used by Mserver; see Mserver -? for details
                       (default: -d8)
 -r      : (optional) proceed in subdirectories as well (implies 'All\`)
 <dir>   : (optional) if present, $THISFILE behaves as if called in <dir>
 <tests> : (optional) list of tests to be processed; if none or 'All\` is given,
                       all tests listed in 'Tests/All\` are processed
                       (defaults to 'All\ if -r is used)

         See  $README  for details about  $THISFILE.

EOT
	exit 0
} # UsageMtest ()

function UsageMapprove () {
	local OS=`uname`
	if [ "$OS" = "AIX" ]
	  then  local OSVER=$OS`uname -v`.`uname -r`
	  else  local OSVER=$OS`uname -r`
	fi

	if     [ -f     $MONETDIST/src/utils/testing/README ] ; then  README=$MONETDIST/src/utils/testing/README
	  elif [ -f     $MONETHOME/src/utils/testing/README ] ; then  README=$MONETHOME/src/utils/testing/README
	  elif [ -f $THISDIR/../../src/utils/testing/README ] ; then  README=$THISDIR/../../src/utils/testing/README
	  else                                                        README=/ufs/monet/Current/monet/src/utils/testing/README
	fi
	cat << EOT

Usage:  $THISFILE [-x<ext>] [-s<sys>] [-r] [<dir>] <tests>

 -x<ext> : (optional) consider only output files *.<ext><sys> (<ext> = 'out' or 'err')
                       (default: <ext> = 'out' & 'err')
 -s<sys> : (optional) consider only output files *.<ext><sys> (<sys> = '', '.$OS', or '.$OSVER')
                       (default: <sys> = '')
 -r      : (optional) proceed in subdirectories as well (implies 'All\`)
 <dir>   : (optional) if present, $THISFILE behaves as if called in <dir>
 <tests> : list of tests to be processed; if 'All\` is given,
            all tests listed in 'Tests/All\` are processed
            (defaults to 'All\` if -r is used)

         See  $README  for details about  $THISFILE.

EOT
	exit 0
} # UsageMapprove ()

 function newLOGFILE2 () { export LOGFILE=$1 ; echo -n "" | tee $LOGFILE.{out,err} > /dev/null ; }
 function newLOGFILE1 () { export LOGFILE=$1 ; echo -n "" | tee $LOGFILE.OutErr    > /dev/null ; }

function Warn () { echo -e "$THISFILE (`date +%H:%M:%S`) WARNING: $*" | tee -a $LOGFILE.{out,err} >&2 ; }

function ErrMsg () { echo -e "! $THISFILE ERROR: $*" | tee -a $LOGFILE.* >&2 ; }

function ErrXit () { if [ "$*" ] ; then  ErrMsg "$*" ; fi ; rm -f $TMPDIR/.$THISFILE.* ; exit 1 ; }

 function LOG1 () { echo -e "#> ${0##*/} (`date +%H:%M:%S`):\t$*" >&2 ; }
 function LOG2 () { LOG1 $* 2>&1 ; LOG1 $* ; }
 
 function LOG1x () { LOG1 $* ; "$@" ; }
 function LOG2x () { LOG2 $* ; "$@" ; }

 function fLOG1 () { LOG2 $* 1>> $LOGFILE.OutErr                           ; }
#function fLOG2 () { LOG2 $* 2>> $LOGFILE.err    1>>      $LOGFILE.out     ; }
 function fLOG2 () { LOG2 $* 2>> $LOGFILE.err    | tee -a $LOGFILE.out >&2 ; }

 function fLOG1x () { fLOG1 $* ; "$@" 2>&1 1>> $LOGFILE.OutErr | tee -a $LOGFILE.OutErr >&2 ; }
#function fLOG2x () { fLOG2 $* ; "$@"      1>> $LOGFILE.out    2>>      $LOGFILE.err        ; }
 function fLOG2x () { fLOG2 $* ; "$@" 2>&1 1>> $LOGFILE.out    | tee -a $LOGFILE.err    >&2 ; }

function CHECK () { LOG1x "$@" 1>&2 || ErrXit "'$*\` failed." ; }

	function DEBUG () { echo -n "" ; }

#	function DEBUG () { fLOG1 $* ; }

function TopShift () { NUM_SHIFTS=$[NUM_SHIFTS+1] ; }

function InitMaster () {
	if [ ! "$TMPDIR" ] ; then  export TMPDIR=/tmp ; fi
	if [ "`egrep -V 2>&1 | grep 'GNU grep.* 2\.'`" ] ; then
		EGREPPATH=`type -path egrep`
		EGREPPATH="${EGREPPATH%/egrep}:"
	  else
		EGREPPATH=""
	fi
	export PATH=${EGREPPATH}/usr/local/java/bin:/usr/local/gnu/bin:/usr/local/bin/gnu:/usr/gnu/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/ucb:/usr/bsd:/usr/ccs/bin
	export OS=`uname`
	if [ "$OS" = "CYGWIN32_NT" ]
	  then	DOMAIN="ddi.nl"
	  else  DOMAIN=`domainname`
	fi
	if     [ "$DOMAIN" = "cwi.nl"  -a  "`uname`" = "SunOS" ] ; then  export PATH=/usr/local/contrib/jdk1.1/bin:$PATH
	  elif [                           "`uname`" = "Linux" ] ; then  export PATH=/usr/local/jdk/bin:$PATH
	  else                                                           export PATH=/usr/java/bin:$PATH
	fi
	newLOGFILE1 $TMPDIR/.$THISFILE.Master.Log.$$
	fLOG1 $0 $*
	fLOG1 initializing...

	export USER=`whoami`                     ; DEBUG USER=$USER
	export HOST=`hostname`                   ; DEBUG HOST=$HOST
	if [ "$OS" = "AIX" ]
	  then	export OSVER=$OS`uname -v`.`uname -r` ; DEBUG OSVER=$OSVER
	  else	export OSVER=$OS`uname -r`       ; DEBUG OSVER=$OSVER
	fi
	if [ "$COMPILER" ]
	  then	export xPREFIX=.$COMPILER/       ; DEBUG xPREFIX=$xPREFIX
	  else	export xPREFIX=""                ; DEBUG xPREFIX=$xPREFIX
	fi
	export MPORT=$[10000+($$%(65536-10000))] ; DEBUG MPORT=$MPORT
	export JPORT=$[65535-($$%(65536-10000))] ; DEBUG JPORT=$JPORT
##	export MPORT=55555                       ; DEBUG MPORT=$MPORT

	if [ ! "$MONETDIST" -a ! "$MONETHOME" ] ; then  ErrXit 'neither $MONETDIST nor $MONETHOME set' ; fi
	if [ ! "$MONETDIST"     ] ; then  export MONETDIST=$MONETHOME ; fi          ; fLOG1 MONETDIST=$MONETDIST
	if [ ! "$MONETHOME"     ] ; then  export MONETHOME=$MONETDIST ; fi          ; fLOG1 MONETHOME=$MONETHOME
	if [ ! -d "$MONETDIST"  ] ; then  ErrXit "MONETDIST directory missing: $MONETDIST" ; fi
	if [ ! -d "$MONETHOME"  ] ; then  ErrXit "MONETHOME directory missing: $MONETHOME" ; fi
	if [ -d "$MONETDIST/$xPREFIX$OSVER"  -o  ! -d "$MONETDIST/$xPREFIX$OS" ]
	  then	export MONETDISTPREFIX=$MONETDIST/$xPREFIX$OSVER
	  else  export MONETDISTPREFIX=$MONETDIST/$xPREFIX$OS
	fi
	fLOG1 MONETDISTPREFIX=$MONETDISTPREFIX
	if [ -d "$MONETHOME/$xPREFIX$OSVER"  -o  ! -d "$MONETHOME/$xPREFIX$OS" ]
	  then	export MONETHOMEPREFIX=$MONETHOME/$xPREFIX$OSVER
	  else  export MONETHOMEPREFIX=$MONETHOME/$xPREFIX$OS
	fi
	fLOG1 MONETHOMEPREFIX=$MONETHOMEPREFIX
	if [ ! "$TSTSRCBASE"    ] ; then  export TSTSRCBASE=$MONETHOME ; fi         ; fLOG1 TSTSRCBASE=$TSTSRCBASE
	if [ ! "$TSTTRGBASE"    ] ; then  export TSTTRGBASE=$MONETHOMEPREFIX ; fi   ; fLOG1 TSTTRGBASE=$TSTTRGBASE
	if [ ! -d "$TSTSRCBASE" ] ; then  ErrXit "TSTSRCBASE directory missing: $TSTSRCBASE" ; fi
	if [ "$MONETDISTPREFIX" = "$MONETHOMEPREFIX" ]
	  then	MonetDistHomePrefix="$MONETDISTPREFIX"
	  else	MonetDistHomePrefix="$MONETDISTPREFIX $MONETHOMEPREFIX"
	fi
	if [ $THISFILE = Mtest ] ; then
		export MONETFARM=$TSTTRGBASE ; fLOG1 MONETFARM=$MONETFARM
		if [ ! "$JAVAPORT"      ] ; then  export JAVAPORT=$JPORT        ; fi ; fLOG1 JAVAPORT=$JAVAPORT
		if [ ! "$MONETPORT"     ] ; then  export MONETPORT=$HOST:$MPORT ; fi ; fLOG1 MONETPORT=$MONETPORT
		if [ ! "$MONET_MOD_PATH" ] ; then
			for mdhp in $MonetDistHomePrefix ; do
				MONET_MOD_PATH="$mdhp/lib:$MONET_MOD_PATH"
			done
			export MONET_MOD_PATH=${MONET_MOD_PATH%:}
		fi
		fLOG1 MONET_MOD_PATH=$MONET_MOD_PATH
		if [ ! "$LD_LIBRARY_PATH" ]
		  then  export LD_LIBRARY_PATH=$MONET_MOD_PATH
		  else  export LD_LIBRARY_PATH=$MONET_MOD_PATH:$LD_LIBRARY_PATH
		fi
		fLOG1 LD_LIBRARY_PATH=$LD_LIBRARY_PATH
	fi
	if [ ! "$MONETPATH" ] ; then
		for mdhp in $MonetDistHomePrefix ; do
			MONETPATH="$mdhp/bin:$MONETPATH"
		done
		export MONETPATH=${MONETPATH%:}
	fi
	fLOG1 MONETPATH=$MONETPATH
	export PATH=$MONETPATH:$PATH
	fLOG1 PATH=$PATH

	RECURSIVE=NO
	if [ $THISFILE = Mtest ] ; then
		IGNORE="-I^#"
		CONTEXT="-c1"
		ACCURACY="-a1"
		TIMEOUT="600"
		DBGMASK="-d8"
		while [ "$1" != "${1#-}" ] ; do
			if     [ "$1" =  "-r"      ] ; then  RECURSIVE=YES
			  elif [ "$1" =  "-I"      ] ; then  shift ; TopShift ; IGNORE="-I$1"
			  elif [ "$1" != "${1#-I}" ] ; then  IGNORE="$1"
			  elif [ "$1" =  "-c"      ] ; then  shift ; TopShift ; CONTEXT="-c$1"
			  elif [ "$1" != "${1#-c}" ] ; then  CONTEXT="$1"
			  elif [ "$1" =  "-a"      ] ; then  shift ; TopShift ; ACCURACY="-a$1"
			  elif [ "$1" != "${1#-a}" ] ; then  ACCURACY="$1"
			  elif [ "$1" =  "-t"      ] ; then  shift ; TopShift ; TIMEOUT="$1"
			  elif [ "$1" != "${1#-t}" ] ; then  TIMEOUT="${1#-t}"
			  elif [ "$1" =  "-d"      ] ; then  shift ; TopShift ; DBGMASK="-d$1"
			  elif [ "$1" != "${1#-d}" ] ; then  DBGMASK="$1"
			  else  ErrXit "illegal option: $1"
			fi
			shift ; TopShift
		done
		export IGNORE=$IGNORE     ; DEBUG IGNORE=$IGNORE
		export CONTEXT=$CONTEXT   ; DEBUG CONTEXT=$CONTEXT
		export ACCURACY=$ACCURACY ; DEBUG ACCURACY=$ACCURACY
		export TIMEOUT=$TIMEOUT   ; DEBUG TIMEOUT=$TIMEOUT
		export DBGMASK=$DBGMASK   ; DEBUG DBGMASK=$DBGMASK
		TIMEOUTED="Mtimeout"
		export MTIMEOUT="Mtimeout -timeout $TIMEOUT"       ; TIMEOUTED="$TIMEOUTED|MTIMEOUT"   ; DEBUG MTIMEOUT=$MTIMEOUT
		export MSERVER="$MTIMEOUT Mserver -modulesilent -yaccsilent $DBGMASK" ; TIMEOUTED="$TIMEOUTED|MSERVER"    ; DEBUG MSERVER=$MSERVER
###		export MSERVER="$MTIMEOUT Mserver -yaccsilent    " ; TIMEOUTED="$TIMEOUTED|MSERVER"    ; DEBUG MSERVER=$MSERVER
		export MCLIENT="$MTIMEOUT Mclient"                 ; TIMEOUTED="$TIMEOUTED|MCLIENT"    ; DEBUG MCLIENT=$MCLIENT
		export MCREATEDB="$MTIMEOUT Mcreatedb -user $USER" ; TIMEOUTED="$TIMEOUTED|MCREATEDB"  ; DEBUG MCREATEDB=$MCREATEDB
		export MDESTROYDB="$MTIMEOUT Mdestroydb"           ; TIMEOUTED="$TIMEOUTED|MDESTROYDB" ; DEBUG MDESTROYDB=$MDESTROYDB
		export MLOAD="$MTIMEOUT Mload"                     ; TIMEOUTED="$TIMEOUTED|MLOAD"      ; DEBUG MLOAD=$MLOAD
		export MDUMP="$MTIMEOUT Mdump"                     ; TIMEOUTED="$TIMEOUTED|MDUMP"      ; DEBUG MDUMP=$MDUMP
		export MSHUTDOWN="$MTIMEOUT Mshutdown"             ; TIMEOUTED="$TIMEOUTED|MSHUTDOWN"  ; DEBUG MSHUTDOWN=$MSHUTDOWN
		export JAVA="$MTIMEOUT java"                       ; TIMEOUTED="$TIMEOUTED|JAVA"       ; DEBUG JAVA=$JAVA
		export JAVAC="$MTIMEOUT javac"                     ; TIMEOUTED="$TIMEOUTED|JAVAC"       ; DEBUG JAVAC=$JAVAC
		export MDIFF="$MTIMEOUT Mdiff"                     ; TIMEOUTED="$TIMEOUTED|MDIFF"      ; DEBUG MDIFF=$MDIFF
		export TIMEOUTED ; DEBUG TIMEOUTED=$TIMEOUTED
		echo TIMEOUTED=$TIMEOUTED
		if [ "$OS" = Linux ] ; then
			export ATRM='at -d'
		  else
			export ATRM='at -r'
		fi
	  else
		EXTENSIONS="out err"
		SYSTEM=""
		while [ "$1" != "${1#-}" ] ; do
			if     [ "$1"   =  "-r"       ] ; then  RECURSIVE=YES
			  elif [ "$1"   =  "-x"       ] ; then  shift ; TopShift ; EXTENSIONS="$1"
			  elif [ "$1"   != "${1#-x}"  ] ; then  EXTENSIONS="${1#-x}"
			  elif [ "$1"   = "-s$OSVER" -o \
			         "$1"   = "-s.$OSVER" ] ; then  SYSTEM=.$OSVER
			  elif [ "$1$2" = "-s$OSVER" -o \
			         "$1$2" = "-s.$OSVER" ] ; then  SYSTEM=.$OSVER ; shift ; TopShift
			  elif [ "$1"   = "-s$OS"    -o \
			         "$1"   = "-s.$OS"    ] ; then  SYSTEM=.$OS
			  elif [ "$1$2" = "-s$OS"    -o \
			         "$1$2" = "-s.$OS"    ] ; then  SYSTEM=.$OS ; shift ; TopShift
			  else  ErrXit "illegal option: $1"
			fi
			shift ; TopShift
		done
		export EXTENSIONS="$EXTENSIONS" ; DEBUG EXTENSIONS=$EXTENSIONS
		export SYSTEM="$SYSTEM"         ; DEBUG SYSTEM=$SYSTEM
	fi
	export RECURSIVE=$RECURSIVE ; DEBUG RECURSIVE=$RECURSIVE

	if [ -d "$1" ]
	  then  EXECDIR=$1 ; shift ; TopShift
	  else  EXECDIR=$PWD
	fi
	DEBUG EXECDIR=$EXECDIR
	( cd $EXECDIR ;  \
	  if [ "${PWD#$TSTSRCBASE}" = "$PWD" ] ; then  \
	    ErrXit "must be called in a subdirectory of TSTSRCBASE=$TSTSRCBASE, not in PWD=$PWD" ; fi ) || exit 1

#	if [ ! -d "$MONETHOMEPREFIX" ] ; then  mkdir -p $MONETHOMEPREFIX ; fi
	if [ $THISFILE = Mtest ] ; then
		if [ -d "$TSTTRGBASE/Tests"  -o  -d "$MONETFARM/dbfarm"  -o  -f "$MONETFARM/homes" ] ; then
			fLOG1 deleting old results...
			rm -rf $TSTTRGBASE/Tests $MONETFARM/{dbfarm,homes}
		fi
		if [ ! -d "$TSTTRGBASE/Tests"  ] ; then  mkdir -p $TSTTRGBASE/Tests  ; fi

		TSB=${TSTSRCBASE%%/}/
		TTB=${TSTTRGBASE%%/}/
		while [ "$TSB"  -a  "$TTB"  -a  "${TSB%%/*}" = "${TTB%%/*}" ] ; do  TSB=${TSB#*/} ; TTB=${TTB#*/} ; DEBUG TSB=$TSB ; DEBUG TTB=$TTB ; done
		RELSRCBASE="`echo $TTB | sed -e 's|[^/][^/]*/|../|g' -e 's|||g'`$TSB" ; DEBUG RELSRCBASE=$RELSRCBASE
		export RELSRCBASE=${RELSRCBASE%%/} ; DEBUG RELSRCBASE=$RELSRCBASE

		MTB=$MONETHOMEPREFIX/
		TTB=${TSTTRGBASE%%/}/
		while [ "$MTB"  -a  "$TTB"  -a  "${MTB%%/*}" = "${TTB%%/*}" ] ; do  MTB=${MTB#*/} ; TTB=${TTB#*/} ; DEBUG MTB=$MTB ; DEBUG TTB=$TTB ; done
		RELTRGBASE="`echo $TTB | sed -e 's|[^/][^/]*/|../|g' -e 's|||g'`$MTB" ; DEBUG RELTRGBASE=$RELTRGBASE
		export RELTRGBASE=${RELTRGBASE%%/} ; DEBUG RELTRGBASE=$RELTRGBASE

		if [ ! "$HTMLTITLE" ] ; then  
			if [ "$COMPILER" ] ; then  HTMLTITLE=" for $COMPILER" ; fi
			HTMLTITLE="Mtest results$HTMLTITLE on $OSVER (`date`)"
		fi
		
		MODULE=${TSTSRCBASE%%/}
		MODULE=${MODULE##*/}
		if [ "$MODULE" = ds ] ; then
			export URLPREFIX='http://radon.ddi.nl/cgi-bin/cvsweb.cgi/'
			export URLSUFFIX_F='?cvsroot=ds'
			export URLSUFFIX_D='?cvsroot=ds'
		  else
			export URLPREFIX='http://monetdb.cwi.nl/htbin/monet/viewcvs/viewcvs.cgi/monet/'
			export URLSUFFIX_F='?cvsroot=Monet'
			export URLSUFFIX_D='?cvsroot=Monet'
		fi
	  else
		if [ ! -d "$TSTTRGBASE/Tests"  ] ; then  ErrXit "output directory missing: $TSTTRGBASE/Tests" ; fi
	fi

	if [ "`type -path file`" ]
	  then  export FILEcmd="file"
	  else  export FILEcmd="echo -n executable"
	fi
	

	for i in $LOGFILE.* ; do
		j=${i##*/}
		cp $i $TSTTRGBASE/Tests/${j%.$$.*}.${j#*.$$.} && rm $i
	done
	LOGFILE=${LOGFILE%.$$}
	export LOGFILE=$TSTTRGBASE/Tests/${LOGFILE##*/}
} # InitMaster ()

function CreateHtmlIndex () {
	local TSTDIR="$1" ; if [ "$1" ] ; then  shift ; fi

	if [ -s "$TSTTRGBASE/Tests/$TSTDIR/.index.head.html" ] ; then
		local BACK=$PWD
		cd $TSTTRGBASE/Tests/$TSTDIR

		mv .index.head.html .index.head.html.BODY
		cat > .index.head.html <<- EOT
			<HTML>
			<HEAD><TITLE>$HTMLTITLE</TITLE></HEAD>
			<BODY BGCOLOR=#ffffff TEXT=#000000 LINK=#00AA00 VLINK=#005500 ALINK=#00ff00>
			<CENTER>
			<TABLE ALIGN=ABSCENTER BORDER=1 CELLSPACING=0 CELLPADDING=3>
			<TR>
			<TH ALIGN=CENTER><FONT FACE='helvetica, arial'>
		EOT
		if [ "$TSTDIR" ] ; then
			cat >> .index.head.html <<- EOT
				<A HREF='$URLPREFIX$TSTDIR/Tests$URLSUFFIX_D'
				  TARGET='${OSVER}_${TSTDIR}_body'><FONT COLOR=#000000>$TSTDIR</FONT></A><BR>
				<A HREF='.$THISFILE.Slave.Log.OutErr' TARGET='${OSVER}_${TSTDIR}_body'><FONT COLOR=#000000><I>(log)</I></FONT></A>
			EOT
		  else
			cat >> .index.head.html <<- EOT
				<A HREF='.$THISFILE.Master.Log.OutErr' TARGET='${OSVER}_${TSTDIR}_body'><FONT COLOR=#000000>$OSVER</FONT></A>
			EOT
		fi
		echo "</FONT></TH>" >> .index.head.html
		cat .index.head.html.BODY >> .index.head.html
		cat >> .index.head.html <<- EOT
			</TR>
			</TABLE>
			</CENTER>
			</BODY>
			</HTML>
		EOT
		rm -f .index.head.html.BODY

		if [ "$TSTDIR" ]
		  then  local ROWS=72
		  else  local ROWS=54
		fi
		cat > .index.html <<- EOT
			<HTML>
			<HEAD><TITLE>$HTMLTITLE</TITLE></HEAD>
			<FRAMESET ROWS='$ROWS,*' FRAMEBORDER=yes BORDER=1 BORDERCOLOR=#ffffff MARGINWIDTH=0 MARGINHEIGHT=0>
			<FRAME SRC='.index.head.html' SCROLLING=auto NAME='${OSVER}_${TSTDIR}_head' FRAMEBORDER=yes BORDERCOLOR=#ffffff MARGINWIDTH=0 MARGINHEIGHT=0>
			<FRAME SRC='`cat _BODY_   `' SCROLLING=auto NAME='${OSVER}_${TSTDIR}_body' FRAMEBORDER=yes BORDERCOLOR=#ffffff MARGINWIDTH=0 MARGINHEIGHT=0>
			</FRAMESET>
			</HTML>
		EOT
		rm -f _BODY_
		if [ ! "$TSTDIR" ] ; then  mv .index.html index.html ; fi

		cd $BACK
	fi
} # CreateHtmlIndex ()

function CreateTstWhatXhtml () {
	local TST="$1"        ; if [ "$1" ] ; then  shift ; fi
	local stableWHAT="$1" ; if [ "$1" ] ; then  shift ; fi
	local EXT="$1"	      ; if [ "$1" ] ; then  shift ; fi
	local WHAT=${stableWHAT#*.} ; WHAT=${WHAT%%.*}

	REVt="`grep "^/$TST$EXT/" $TSTSRCDIR/CVS/Entries 2> /dev/null | cut -d/ -f3`"
	REVs="`grep "^/$TST.$stableWHAT/" $TSTSRCDIR/CVS/Entries 2> /dev/null | cut -d/ -f3`"
	if [ "`grep '^<TR.*><TH.*>No differences.</TH></TR>$' $TST.$WHAT.diff.html`" ]
	  then  DIFF="No differences"
	  else  DIFF="<B>Differences</B>"
	fi
	local SYSTEM="$OSVER:"
	if [ "$COMPILER" ] ; then  SYSTEM="$COMPILER, $SYSTEM" ; fi

	cat > .$TST.$WHAT.html <<- EOT
		<HTML>
		<HEAD><TITLE>$HTMLTITLE</TITLE></HEAD>
		<FRAMESET ROWS='42,*' FRAMEBORDER=yes BORDER=1 BORDERCOLOR=#ffffff MARGINWIDTH=0 MARGINHEIGHT=0>
		<FRAME SRC='.$TST.$WHAT.head.html' SCROLLING=auto NAME='${OSVER}_${TSTDIR}_${TST}_${WHAT}_head' FRAMEBORDER=yes BORDERCOLOR=#ffffff MARGINWIDTH=0 MARGINHEIGHT=0>
		<FRAME SRC='$TST.$WHAT.diff.html' SCROLLING=auto NAME='${OSVER}_${TSTDIR}_${TST}_${WHAT}_body' FRAMEBORDER=yes BORDERCOLOR=#ffffff MARGINWIDTH=0 MARGINHEIGHT=0>
		</FRAMESET>
		</HTML>
	EOT
	cat > .$TST.$WHAT.head.html <<- EOT
		<HTML>
		<HEAD><TITLE>$HTMLTITLE</TITLE></HEAD>
		<BODY BGCOLOR=#ffffff TEXT=#000000 LINK=#00AA00 VLINK=#005500 ALINK=#00ff00>
		<CENTER>
		<FONT FACE='helvetica, arial'>
		$SYSTEM
		<A HREF='$TST.$WHAT.diff.html' TARGET='${OSVER}_${TSTDIR}_${TST}_${WHAT}_body'>$DIFF</A>
		between
		<A HREF='$TST.$stableWHAT' TARGET='${OSVER}_${TSTDIR}_${TST}_${WHAT}_body'>$stableWHAT (r$REVs)</A>
		and
		<A HREF='$TST.test.$WHAT' TARGET='${OSVER}_${TSTDIR}_${TST}_${WHAT}_body'>test.$WHAT</A>
		of
		<A HREF='$TST$EXT' TARGET='${OSVER}_${TSTDIR}_${TST}_${WHAT}_body'>$TST$EXT (r$REVt)</A>
		in
		<A HREF='./' TARGET='${OSVER}_${TSTDIR}_${TST}_${WHAT}_body'>$TSTDIR</A>
		(<A HREF='$URLPREFIX$TSTDIR/Tests$URLSUFFIX_D' TARGET='${OSVER}_${TSTDIR}_${TST}_${WHAT}_body'>CVS</A>,
		 <A HREF='$RELSRCDIR' TARGET='${OSVER}_${TSTDIR}_${TST}_${WHAT}_body'>SRC</A>,
		 <A HREF='$RELTRGDIR' TARGET='${OSVER}_${TSTDIR}_${TST}_${WHAT}_body'>TRG</A>,
		 <A HREF='.Mtest.Slave.Log.OutErr' TARGET='${OSVER}_${TSTDIR}_${TST}_${WHAT}_body'>LOG</A>).
		</FONT>
		</CENTER>
		</BODY>
		</HTML>
	EOT
} # CreateTstWhatXhtml ()

function CreateSrcIndex () {
	local TST="$1" ; if [ "$1" ] ; then  shift ; fi
	local EXT="$1" ; if [ "$1" ] ; then  shift ; fi

	cat > .$TST.src.index.html <<- EOT
		<HTML>
		<HEAD><TITLE>$HTMLTITLE</TITLE></HEAD>
		<FRAMESET ROWS='54,*' FRAMEBORDER=yes BORDER=1 BORDERCOLOR=#ffffff MARGINWIDTH=0 MARGINHEIGHT=0>
		<FRAME SRC='.$TST.src.index.head.html' SCROLLING=auto NAME='${OSVER}_${TSTDIR}_${TST}_head' FRAMEBORDER=yes BORDERCOLOR=#ffffff MARGINWIDTH=0 MARGINHEIGHT=0>
		<FRAME SRC='$URLPREFIX$TSTDIR/Tests/$TST$EXT$URLSUFFIX_F'
		  SCROLLING=auto NAME='${OSVER}_${TSTDIR}_${TST}_body' FRAMEBORDER=yes BORDERCOLOR=#ffffff MARGINWIDTH=0 MARGINHEIGHT=0>
		</FRAMESET>
		</HTML>
	EOT
	cat > .$TST.src.index.head.html <<- EOT
		<HTML>
		<HEAD><TITLE>$HTMLTITLE</TITLE></HEAD>
		<BODY BGCOLOR=#ffffff TEXT=#000000 LINK=#00AA00 VLINK=#005500 ALINK=#00ff00>
		<CENTER>
		<TABLE ALIGN=ABSCENTER BORDER=1 CELLSPACING=0 CELLPADDING=3>
		<TR>
		<TH ALIGN=CENTER><FONT FACE='helvetica, arial'>$TST</FONT></TH>
	EOT
	for f in `ls -d $TSTSRCDIR/$TST* | sed "s|^$TSTSRCDIR/||g"` ; do
		cat >> .$TST.src.index.head.html <<- EOT
			<TD><FONT FACE='helvetica, arial'>
			  <A HREF='$URLPREFIX$TSTDIR/Tests/$f$URLSUFFIX_F'
			    TARGET='${OSVER}_${TSTDIR}_${TST}_body'>$f</A></FONT></TD>
		EOT
	done
	cat >> .$TST.src.index.head.html <<- EOT
		</TR>
		</TABLE>
		</CENTER>
		</BODY>
		</HTML>
	EOT
} # CreateSrcIndex ()

function AddHref () {
	local TST="$1"  ; if [ "$1" ] ; then  shift ; fi
	local WHAT="$1" ; if [ "$1" ] ; then  shift ; fi

	local STRING="<A HREF='.$TST.$WHAT.html' TARGET='${OSVER}_${TSTDIR}_body'>$WHAT</A>"
	if [ "`grep '^<TR.*><TH.*>No differences.</TH></TR>$' $TST.$WHAT.diff.html`" ]
	  then  echo -n "($STRING)"
	  else  echo -n "<B>$STRING</B>"
	fi
} # AddHref ()

function AddTstToHtmlIndex () {
	local TST="$1"       ; if [ "$1" ] ; then  shift ; fi
	local STABLEout="$1" ; if [ "$1" ] ; then  shift ; fi
	local STABLEerr="$1" ; if [ "$1" ] ; then  shift ; fi
	local EXT="$1"       ; if [ "$1" ] ; then  shift ; fi
        if [ "$EXT" ] ; then  local EXT=.$EXT ; fi

	CreateTstWhatXhtml $TST $STABLEout $EXT
	CreateTstWhatXhtml $TST $STABLEerr $EXT

	echo -n "<TD ALIGN=CENTER><FONT FACE='helvetica, arial'><A HREF='.$TST.src.index.html' TARGET='${OSVER}_${TSTDIR}_body'><FONT COLOR=#000000>" >> .index.head.html
	if [    "`grep '^<TR.*><TH.*>No differences.</TH></TR>$' $TST.out.diff.html`"  \
	     -a "`grep '^<TR.*><TH.*>No differences.</TH></TR>$' $TST.err.diff.html`" ] ; 
	  then  echo -n    "$TST"     >> .index.head.html
	  else  echo -n "<B>$TST</B>" >> .index.head.html
	fi
	echo -n "</FONT></A><BR>"     >> .index.head.html
	AddHref $TST out              >> .index.head.html
	echo -n "&nbsp;|&nbsp;"       >> .index.head.html
	AddHref $TST err              >> .index.head.html
	echo    "</FONT></TD>"        >> .index.head.html
	if [ ! -s _BODY_ ] ; then  echo -n ".$TST.out.html" >  _BODY_ ; fi

	CreateSrcIndex $TST $EXT
} # AddTstToHtmlIndex ()

function SkipTest () {
        local REASON="$1" ; if [ "$1" ] ; then  shift ; fi
        local TST="$1"    ; if [ "$1" ] ; then  shift ; fi
        local EXT="$1"    ; if [ "$1" ] ; then  shift ; fi
        if [ "$EXT" ] ; then  local EXT=.$EXT ; fi

        Warn "Skipping test $TST $REASON" 2>&1 | tee .$TST.SKIPPED >&2

        echo -n "<TD ALIGN=CENTER><FONT FACE='helvetica, arial'><A HREF='.$TST.src.index.html' TARGET='${OSVER}_${TSTDIR}_body'><FONT COLOR=#000000>" >> .index.head.html
        echo -n "$TST"                >> .index.head.html
        echo -n "</FONT></A><BR>"     >> .index.head.html
        echo -n "<A HREF='.$TST.SKIPPED' TARGET='${OSVER}_${TSTDIR}_body'>(skipped)</A>" >> .index.head.html
        echo    "</FONT></TD>"        >> .index.head.html

        CreateSrcIndex $TST $EXT
} # SkipTest ()

function AddSubToHtmlIndex () {
	local SUB="$1" ; if [ "$1" ] ; then  shift ; fi

	if [ -s "$TSTTRGBASE/Tests/$SUB/.index.html" ] ; then
		local BACK=$PWD
		cd $TSTTRGBASE/Tests
		echo -n "<TD><FONT FACE='helvetica, arial'>" >> .index.head.html
		local STRING="<A HREF='$SUB/.index.html' TARGET='${OSVER}__body'>$SUB</A>"
		if [ "`grep '><B>.*</B><' $SUB/.index.head.html`" ]
		  then  echo -n "<B>$STRING</B>" >> .index.head.html
		  else  echo -n "($STRING)"      >> .index.head.html
		fi
		echo "</FONT></TD>" >> .index.head.html
		if [ ! -s _BODY_ ] ; then  echo -n "$SUB/.index.html" > _BODY_ ; fi
		cd $BACK
	fi
} # AddSubToHtmlIndex

function other () {
	local TST="$1"      ; if [ "$1" ] ; then  shift ; fi
	local TIMEOUTX="$1" ; if [ "$1" ] ; then  shift ; fi
	local PRELUDE="$1"  ; if [ "$1" ] ; then  shift ; fi

	local MTIMEOUTX="Mtimeout -timeout $TIMEOUTX"

	LOG2x $MTIMEOUTX ./$TST $TST "$PRELUDE"
} # other ()

function milM () {
	local TST="$1"     ; if [ "$1" ] ; then  shift ; fi
	local EXT="$1"     ; if [ "$1" ] ; then  shift ; fi
	local PRELUDE="$1" ; if [ "$1" ] ; then  shift ; fi

	LOG2x $MSERVER -db $TSTDB $PRELUDE $TST.$EXT
} # milM ()

function milS () {
	local TST="$1"     ; if [ "$1" ] ; then  shift ; fi
	local EXT="$1"     ; if [ "$1" ] ; then  shift ; fi
	local PRELUDE="$1" ; if [ "$1" ] ; then  shift ; fi

	LOG2x $MSERVER -db $TSTDB -single $PRELUDE $TST.$EXT
} # milS ()

function milC () {
	local TST="$1"     ; if [ "$1" ] ; then  shift ; fi
	local EXT="$1"     ; if [ "$1" ] ; then  shift ; fi
	local PRELUDE="$1" ; if [ "$1" ] ; then  shift ; fi

	LOG2 "$MSERVER -db $TSTDB -background &"
	      $MSERVER -db $TSTDB -background &
	LOG2x sleep 9
	LOG2 "$MCLIENT $PRELUDE < $TST.$EXT"
	      $MCLIENT $PRELUDE < $TST.$EXT
	LOG2x $MSHUTDOWN
	LOG2x sleep 9
} # milC ()

function milCXs () {
	local TST="$1"     ; if [ "$1" ] ; then  shift ; fi
	local EXT="$1"     ; if [ "$1" ] ; then  shift ; fi
	local PRELUDE="$1" ; if [ "$1" ] ; then  shift ; fi

	LOG2 "$MSERVER -db $TSTDB -background &"
	      $MSERVER -db $TSTDB -background &
	LOG2x sleep 9
	for SCRIPT in ${TST}_s[0-9][0-9].$EXT ; do
		LOG2 "$MCLIENT $PRELUDE < $SCRIPT"
		      $MCLIENT $PRELUDE < $SCRIPT
	done
	LOG2x $MSHUTDOWN
	LOG2x sleep 9
} # milCXs ()

function milCXp () {
	local TST="$1"     ; if [ "$1" ] ; then  shift ; fi
	local EXT="$1"     ; if [ "$1" ] ; then  shift ; fi
	local PRELUDE="$1" ; if [ "$1" ] ; then  shift ; fi

	LOG2 "$MSERVER -db $TSTDB -background &"
	      $MSERVER -db $TSTDB -background &
	LOG2x sleep 9
	(
	 for SCRIPT in ${TST}_p[0-9][0-9].$EXT ; do
		TSTx=${SCRIPT%.$EXT}
		newLOGFILE2 $TSTx.test
		fLOG2 "$MCLIENT $PRELUDE < $SCRIPT &"
		       $MCLIENT $PRELUDE < $SCRIPT 1>> $TSTx.test.out 2>> $TSTx.test.err &
	 done
	 wait
	)
	for SCRIPT in ${TST}_p[0-9][0-9].$EXT ; do
		TSTx=${SCRIPT%.$EXT}
		cat $TSTx.test.out
		cat $TSTx.test.err >&2
	done
	LOG2x $MSHUTDOWN
	LOG2x sleep 9
} # milCXp ()

function Java () {
	local TST="$1"     ; if [ "$1" ] ; then  shift ; fi
	local EXT="$1"     ; if [ "$1" ] ; then  shift ; fi
	local PRELUDE="$1" ; if [ "$1" ] ; then  shift ; fi

	c=".:$PWD"
	for p in `  awk 'BEGIN { x = 0; } /\*\// { x = 0; } x==1 { print $0; } /\/\*CLASSPATH/ { x = 1; } ' $TST.$EXT  \
	          | sed -e "s|||g" -e "s|^.*MONETDIST|$MONETDIST|g" -e "s|^.*MONETHOME|$MONETHOME|g" ` ; do
		c=$c:$p
	done
	if [ "$CLASSPATH" ] ; then  CLASSPATH=$CLASSPATH: ; fi
	export CLASSPATH=$CLASSPATH$c ; LOG2 CLASSPATH=$CLASSPATH

	for f in $TST.$EXT $TST.prelude ; do 
		if [ -f $f ] ; then
			mv $f $f.IN
			sed "s|JAVAPORT|$JAVAPORT|g" $f.IN > $f
		fi
	done

	LOG2x $JAVAC $TST.java
	{ {
		LOG2x sleep 9
		LOG2x $JAVA  $TST
	  } 2> $TST.tmp.err 1> $TST.tmp.out
	  echo "quit;"
	} | LOG2x $MSERVER -db $TSTDB $PRELUDE
	echo
	cat $TST.tmp.out
	cat $TST.tmp.err >&2
} # Java ()

function JavaXs () {
	local TST="$1"     ; if [ "$1" ] ; then  shift ; fi
	local EXT="$1"     ; if [ "$1" ] ; then  shift ; fi
	local PRELUDE="$1" ; if [ "$1" ] ; then  shift ; fi

	c=".:$PWD"
	for SCRIPT in ${TST}_s[0-9][0-9].$EXT ; do
		for p in `  awk 'BEGIN { x = 0; } /\*\// { x = 0; } x==1 { print $0; } /\/\*CLASSPATH/ { x = 1; } ' $SCRIPT  \
		          | sed -e "s|||g" -e "s|^.*MONETDIST|$MONETDIST|g" -e "s|^.*MONETHOME|$MONETHOME|g" ` ; do
			c=$c:$p
		done
	done
	if [ "$CLASSPATH" ] ; then  CLASSPATH=$CLASSPATH: ; fi
	export CLASSPATH=$CLASSPATH$c ; LOG2 CLASSPATH=$CLASSPATH

	for f in $TST.prelude ${TST}_s[0-9][0-9].$EXT ; do 
		if [ -f $f ] ; then
			mv $f $f.IN
			sed "s|JAVAPORT|$JAVAPORT|g" $f.IN > $f
		fi
	done

	for SCRIPT in ${TST}_s[0-9][0-9].$EXT ; do
		TSTx=${SCRIPT%.$EXT}
		LOG2x $JAVAC $TSTx
	done
	{ {
		LOG2x sleep 9
		for SCRIPT in ${TST}_s[0-9][0-9].$EXT ; do
			TSTx=${SCRIPT%.$EXT}
			LOG2x $JAVA $TSTx
		done
	  } 2> $TST.tmp.err 1> $TST.tmp.out
	  echo "quit;"
	} | LOG2x $MSERVER -db $TSTDB $PRELUDE
	echo
	cat $TST.tmp.out
	cat $TST.tmp.err >&2
} # JavaXs ()

function JavaXp () {
	local TST="$1"     ; if [ "$1" ] ; then  shift ; fi
	local EXT="$1"     ; if [ "$1" ] ; then  shift ; fi
	local PRELUDE="$1" ; if [ "$1" ] ; then  shift ; fi

	c=".:$PWD"
	for SCRIPT in ${TST}_p[0-9][0-9].$EXT ; do
		for p in `  awk 'BEGIN { x = 0; } /\*\// { x = 0; } x==1 { print $0; } /\/\*CLASSPATH/ { x = 1; } ' $SCRIPT  \
		          | sed -e "s|||g" -e "s|^.*MONETDIST|$MONETDIST|g" -e "s|^.*MONETHOME|$MONETHOME|g" ` ; do
			c=$c:$p
		done
	done
	if [ "$CLASSPATH" ] ; then  CLASSPATH=$CLASSPATH: ; fi
	export CLASSPATH=$CLASSPATH$c ; LOG2 CLASSPATH=$CLASSPATH

	for f in $TST.prelude ${TST}_p[0-9][0-9].$EXT ; do 
		if [ -f $f ] ; then
			mv $f $f.IN
			sed "s|JAVAPORT|$JAVAPORT|g" $f.IN > $f
		fi
	done

	for SCRIPT in ${TST}_p[0-9][0-9].$EXT ; do
		TSTx=${SCRIPT%.$EXT}
		LOG2x $JAVAC $TSTx.java
	done
	{ {
		LOG2x sleep 9
		(
		 for SCRIPT in ${TST}_p[0-9][0-9].$EXT ; do
			TSTx=${SCRIPT%.$EXT}
			newLOGFILE2 $TSTx.test
			fLOG2 "$JAVA $TSTx &"
			       $JAVA $TSTx 1>> $TSTx.test.out 2>> $TSTx.test.err &
		 done
		 wait
		)
	  } 2> $TST.tmp.err 1> $TST.tmp.out
	  echo "quit;"
	} | LOG2x $MSERVER -db $TSTDB $PRELUDE
	echo
	cat $TST.tmp.out
	cat $TST.tmp.err >&2

	for SCRIPT in ${TST}_p[0-9][0-9].$EXT ; do
		TSTx=${SCRIPT%.$EXT}
		cat $TSTx.test.out
		cat $TSTx.test.err >&2
	done
} # JavaXp ()

function odmg () {
	local TST="$1"     ; if [ "$1" ] ; then  shift ; fi
	local EXT="$1"     ; if [ "$1" ] ; then  shift ; fi
	local PRELUDE="$1" ; if [ "$1" ] ; then  shift ; fi

	echo "'LOG2x odmg $PRELUDE $TST.$EXT' not yet implemented"
} # odmg ()

function CheckModules () {
	local TST="$1" ; if [ "$1" ] ; then  shift ; fi
	
	if [ -f $TST.modules ] ; then
		egrep -v "$TSTMODS" $TST.modules
	fi
} # CheckModules ()

function GetBATs () {
	$MSERVER -db $TSTDB <<- "MIL" | grep '^\^(.*)\$$'
		printf("\n^(#.*");view_bbp_name@batloop{printf("|%s",$t);}printf(")$\n");
		quit;
	MIL
} # GetBATs ()

function CheckBATs () {
	local TST="$1" ; if [ "$1" ] ; then  shift ; fi

	if [ -f $TST.BATs ] ; then
		local TSTBATS="`GetBATs`" ; LOG1 $TSTBATS
		egrep -v "$TSTBATS" $TST.BATs
	fi
} # CheckBATs ()

function CheckExec () {
	local EXE="$1" ; if [ "$1" ] ; then  shift ; fi

	for p in `echo $MONETPATH | sed 's|:| |g'` ; do
		if [ -x $p/$EXE ] ; then
			echo "$p/$EXE"
		fi
	done
} # CheckExec ()

function MtestIt () {
	local TST="$1" ; if [ "$1" ] ; then  shift ; fi

#######	if     [ -x "$TST"  -a  "`$FILEcmd $TST | egrep 'shell script|script text|executable'`" ] ; then  EXT="" ; CALL="other $TST"
	if     [ -f "$TST"  -a  "`$FILEcmd $TST | egrep 'shell script|script text|executable'`" ] ; then  EXT="" ; CALL="other $TST" ; chmod u+x $TST
	  elif [ -f "$TST.milM"       ] ; then  EXT="milM" ; CALL="milM   $TST $EXT"
	  elif [ -f "$TST.milS"       ] ; then  EXT="milS" ; CALL="milS   $TST $EXT"
	  elif [ -f "$TST.milC"       ] ; then  EXT="milC" ; CALL="milC   $TST $EXT"
	  elif [ -f "${TST}_s00.milC" ] ; then  EXT="milC" ; CALL="milCXs $TST $EXT"
	  elif [ -f "${TST}_p00.milC" ] ; then  EXT="milC" ; CALL="milCXp $TST $EXT"
	  elif [ -f "$TST.java"       ] ; then  EXT="java" ; CALL="Java   $TST $EXT"
	  elif [ -f "${TST}_s00.java" ] ; then  EXT="java" ; CALL="JavaXs $TST $EXT"
	  elif [ -f "${TST}_p00.java" ] ; then  EXT="java" ; CALL="JavaXp $TST $EXT"
	  elif [ -f "$TST.odmg"       ] ; then  EXT="odmg" ; CALL="odmg   $TST $EXT"
	  else  ErrXit "test missing: '$TSTSRCDIR/$TST[.milM|.milS|.milC|.java|.odmg]\`"
	fi

	local MISSINGMODS="`LOG1x CheckModules $TST`"
	local MISSINGBATS="`LOG1x CheckBATs    $TST`"

	cd $TSTTRGDIR
	ReqMshdn="|milC|"
	if [ "$ReqMshdn" != "${ReqMshdn%|$EXT|*}"  -a  ! "`CheckExec Mshutdown`" ] ; then
		SkipTest "as Mshutdown is not available." $TST $EXT
	  elif [ "$EXT" = "milC"  -a  ! "`CheckExec Mclient`" ] ; then
		SkipTest "as Mclient is not available." $TST $EXT
#	  elif [ "$EXT" = "milC"  -a  $OSVER = CYGWIN32_NT4.0 ] ; then
#		SkipTest "as Mclient is not working on CYGWIN32_NT4.0." $TST $EXT
	  elif [ "$EXT" = "java"  -a  ! "`type -path java`" ] ; then
		SkipTest "as java is not in $PATH." $TST $EXT
	  elif [ "$MISSINGMODS" ] ; then
		SkipTest "as modules \"$MISSINGMODS\" are missing." $TST $EXT
	  elif [ "$MISSINGBATS" ] ; then
		SkipTest "as BATs \"$MISSINGBATS\" are missing in database \"$TSTDB\"." $TST $EXT
	  else
		if [ -d $RELSRCDIR/Tests ]
		  then  THESRCDIR=$RELSRCDIR/Tests
		  else  THESRCDIR=$TSTSRCDIR
		fi
		if [ -f $THESRCDIR/$TST ] ; then  ln -fs $THESRCDIR/$TST . ; fi
		if [ -f $THESRCDIR/${TST}_s00.$EXT ] ; then  ln -fs $THESRCDIR/${TST}_s[0-9][0-9].$EXT . ; fi
		if [ -f $THESRCDIR/${TST}_p00.$EXT ] ; then  ln -fs $THESRCDIR/${TST}_p[0-9][0-9].$EXT . ; fi
		ln -fs $THESRCDIR/$TST.* .
		if     [ -f $TST.stable.out.$OSVER ] ; then  export STABLEout=stable.out.$OSVER
		  elif [ -f $TST.stable.out.$OS    ] ; then  export STABLEout=stable.out.$OS
		  else                                       export STABLEout=stable.out
		fi
		if [ ! -f $TST.$STABLEerr ] ; then  touch $TST.$STABLEerr ; fi
		if     [ -f $TST.stable.err.$OSVER ] ; then  export STABLEerr=stable.err.$OSVER
		  elif [ -f $TST.stable.err.$OS    ] ; then  export STABLEerr=stable.err.$OS
		  else                                       export STABLEerr=stable.err
		fi
		if [ ! -f $TST.$STABLEerr ] ; then  touch $TST.$STABLEerr ; fi
		if [ -f "$TST.prelude" ]
		  then  local PRELUDE="-prelude $TST.prelude"
		  else  local PRELUDE=""
		fi
		newLOGFILE2 $TST.test
		echo -e "stdout of test '$TST\` in directory '$TSTDIR\` itself:\n" >> $LOGFILE.out
		echo -e "stderr of test '$TST\` in directory '$TSTDIR\` itself:\n" >> $LOGFILE.err
		(
			if [ ! "$EXT" ] ; then
				X="`egrep -cw "($TIMEOUTED)" $TST`"
				if [ ! "$X" ] ; then  X=1 ; fi
				TIMEOUTX=$[($X+1)*$TIMEOUT]
				CALL="$CALL $TIMEOUTX"
			  else
				TIMEOUTX=$TIMEOUT
			fi
			WAIT=$[($TIMEOUTX/60)+1]

			if [ "$OS" = CYGWIN32_NT ] ; then
				fLOG2x $CALL "$PRELUDE"
			  else
				fLOG2x $CALL "$PRELUDE" &

				WHAT=" $THISDIR/MkillUsers -l$TSTTRGDIR/$LOGFILE-$$ $MONETFARM/dbfarm/$TSTDB/{users/*/*,bat/*,.gdk_lock} $TSTTRGDIR/$TST{.*,}"
				WHEN=" now + $WAIT minutes "
				LOG1  at $WHEN $WHAT
				ATJOB="`echo "$WHAT 2>/dev/null" | at $WHEN 2>&1 | awk '/^[Jj]ob/{print $2}'`" 
				LOG1x at -l >&2
				LOG1x wait
				if [ -f /tmp/.MkillUsers.$$.out  -o  -f /tmp/.MkillUsers.$$.err ] ; then  LOG1x sleep 9 ; fi
				LOG1x $ATRM $ATJOB >&2
				LOG1x at -l >&2
			fi
		)
		if [ ! -f $TSTTRGBASE/Tests/.old.left-over.tmp.bats. ] ; then  touch $TSTTRGBASE/Tests/.old.left-over.tmp.bats. ; fi
		LEFTOVERTMPBATS="`find $MONETFARM/dbfarm/*/bat/ -name tmp_\* -print 2> /dev/null`"
		if [ "$LEFTOVERTMPBATS" ] ; then
			ls -alF $LEFTOVERTMPBATS 2> /dev/null > .all.left-over.tmp.bats.
			diff -u0 $TSTTRGBASE/Tests/.old.left-over.tmp.bats. .all.left-over.tmp.bats. | grep '^\+[^\+]' > .new.left-over.tmp.bats.
		fi
		if [ -s .new.left-over.tmp.bats. ] ; then
			echo -e "\n!ERROR: persistent temporary bats remained:" >> $LOGFILE.err
			sed 's|^\+|! |g' .new.left-over.tmp.bats.               >> $LOGFILE.err
			echo                                                    >> $LOGFILE.err
		fi
		rm -f .new.left-over.tmp.bats. $TSTTRGBASE/Tests/.old.left-over.tmp.bats.
		if [ -f .all.left-over.tmp.bats. ] ; then  mv -f .all.left-over.tmp.bats. $TSTTRGBASE/Tests/.old.left-over.tmp.bats. ; fi
		LOG1x Mfilter "$IGNORE" $TST.{$STABLEout,$STABLEerr,test.{out,err}}
		REV=" (r`grep "^/$TST.$STABLEout/" $TSTSRCDIR/CVS/Entries 2> /dev/null | cut -d/ -f3`)"
#		LOG1x Mdiff "$IGNORE" $CONTEXT $ACCURACY -r"$REV" $TST.$STABLEout.FILTERED $TST.test.out.FILTERED $TST.out.diff.html
		a=${ACCURACY#-a}
		{  { test $a -ge 2  &&  LOG1x $MDIFF "$IGNORE" $CONTEXT -a2 -r"$REV" $TST.$STABLEout.FILTERED $TST.test.out.FILTERED $TST.out.diff.html ; } \
		 ||{ test $a -ge 1  &&  LOG1x $MDIFF "$IGNORE" $CONTEXT -a1 -r"$REV" $TST.$STABLEout.FILTERED $TST.test.out.FILTERED $TST.out.diff.html ; } \
		 ||{ test $a -ge 0  &&  LOG1x $MDIFF "$IGNORE" $CONTEXT -a0 -r"$REV" $TST.$STABLEout.FILTERED $TST.test.out.FILTERED $TST.out.diff.html ; };}
		REV=" (r`grep "^/$TST.$STABLEerr/" $TSTSRCDIR/CVS/Entries 2> /dev/null | cut -d/ -f3`)"
#		LOG1x Mdiff "$IGNORE" $CONTEXT $ACCURACY -r"$REV" $TST.$STABLEerr.FILTERED $TST.test.err.FILTERED $TST.err.diff.html
		{  { test $a -ge 2  &&  LOG1x $MDIFF "$IGNORE" $CONTEXT -a2 -r"$REV" $TST.$STABLEerr.FILTERED $TST.test.err.FILTERED $TST.err.diff.html ; } \
		 ||{ test $a -ge 1  &&  LOG1x $MDIFF "$IGNORE" $CONTEXT -a1 -r"$REV" $TST.$STABLEerr.FILTERED $TST.test.err.FILTERED $TST.err.diff.html ; } \
		 ||{ test $a -ge 0  &&  LOG1x $MDIFF "$IGNORE" $CONTEXT -a0 -r"$REV" $TST.$STABLEerr.FILTERED $TST.test.err.FILTERED $TST.err.diff.html ; };}
		AddTstToHtmlIndex $TST $STABLEout $STABLEerr ${EXT#.}
	fi
	cd $TSTSRCDIR
} # MtestIt ()

function MapproveIt () {
	local TST="$1" ; if [ "$1" ] ; then  shift ; fi
	
	for WHAT in $EXTENSIONS ; do
		local stableWHAT=stable.$WHAT$SYSTEM
		if [ -f $TSTTRGDIR/$TST.test.$WHAT ] ; then
			echo -e "\t\tApproving $TSTTRGDIR/$TST.test.$WHAT -> $TSTSRCDIR/$TST.$stableWHAT" >&2
# # # #			  | awk 'BEGIN { p = 1; } /^#~BeginLoadingModule~#$/ { p = 2; n = 0; } p==2 && ! /^!/ { n++; } p==1 || /^!/ { print $0; } /^#~EndLoadingModule~#$/ { p = 1; n--; print "~ Module load sequence: skipped",n,"echoed lines. ~"; }'  \
			cat $TSTTRGDIR/$TST.test.$WHAT  \
			  | sed -e "s|^\(!WARNING: BATsave(.*): saving tail as [il]n[tg] instead of ptr.\)$| \1|g"  \
				-e "s|^\(!WARNING: TCPepilogue: terminate [01] listeners\)$| \1|g"  \
				-e "s|^\(!WARNING: TCPlisten([0-9]*): stopped.\)$| \1|g"  \
				-e "s|^\(! Terminating connection\)$| \1|g"  \
				-e "s|^\(! Connection broken\)$| \1|g"  \
				-e "s|^!ERROR: ([0-9]*): \([^ ]*::[^ ]*: .*\)$|MAS ERROR: \1|g" \
				-e "s|^\(!ERROR: binding to stream socket ([0-9]*) failed\)$| \1|g"  \
				-e "s|^\(No such file or directory\)$|! \1|g"  \
			  | grep -v '^!'  \
			  | sed -e "s|^ \(!WARNING: BATsave(.*): saving tail as [il]n[tg] instead of ptr.\)$|\1|g"  \
			  	-e "s|^ \(!WARNING: TCPepilogue: terminate [01] listeners\)$|\1|g"  \
			  	-e "s|^ \(!WARNING: TCPlisten([0-9]*): stopped.\)$|\1|g"  \
				-e "s|^ \(! Terminating connection\)$|\1|g"  \
				-e "s|^ \(! Connection broken\)$|\1|g"  \
				-e "s|^ \(!ERROR: binding to stream socket ([0-9]*) failed\)$|\1|g"  \
			  > $TSTSRCDIR/$TST.$stableWHAT
		  else
			Warn "output file missing: $TSTTRGDIR/$TST.test.$WHAT"
		fi
	done
} # MapproveIt ()

function InitSlave () {
	newLOGFILE1 $TMPDIR/.$THISFILE.Slave.Log.$$
	fLOG1 $0 $*
	fLOG1 initializing...

	export TSTDIR=${PWD#$TSTSRCBASE}
	export TSTDIR=${TSTDIR##/}
	export TSTDIR=${TSTDIR%%/}
	if [ ! "$TSTDIR" ] ; then
		ErrXit "there must be at least one directory level between TSTSRCBASE=$TSTSRCBASE and the 'Tests\` directory"
	fi
	export TSTSRCDIR=$TSTSRCBASE/$TSTDIR/Tests
	export TSTTRGDIR=$TSTTRGBASE/Tests/$TSTDIR
	DEBUG PWD=$PWD
	DEBUG TSTDIR=$TSTDIR
	DEBUG TSTSRCDIR=$TSTSRCDIR
	DEBUG TSTTRGDIR=$TSTTRGDIR

	if [ $THISFILE = Mtest ] ; then
		export RELSRCDIR="`echo Tests/$TSTDIR/ | sed -e 's|[^/][^/]*/|../|g' -e 's|||g'`$RELSRCBASE/$TSTDIR"
		export RELTRGDIR="`echo Tests/$TSTDIR/ | sed -e 's|[^/][^/]*/|../|g' -e 's|||g'`$RELTRGBASE/$TSTDIR"
		export TSTDB="`echo $TSTDIR | sed -e 's|/|_|g' -e 's|||g'`"
		DEBUG RELSRCDIR=$RELSRCDIR
		DEBUG RELTRGDIR=$RELTRGDIR
		DEBUG TSTDB=$TSTDB
		if [ ! -d "$TSTTRGDIR" ] ; then  mkdir -p $TSTTRGDIR ; fi
	fi

	for i in $LOGFILE.* ; do
		j=${i##*/}
		cp $i $TSTTRGDIR/${j%.$$.*}.${j#*.$$.} && rm $i
	done
	LOGFILE=${LOGFILE%.$$}
	export LOGFILE=$TSTTRGDIR/${LOGFILE##*/}
} # InitSlave ()

function M_Slave () {
	TSTLIST=""
	if [ -d "$TSTSRCDIR" ] ; then
		if [ $THISFILE = Mapprove  -a  "$#" = "0" ] ; then
			( Usage$THISFILE >&2 )
			ErrXit "no tests specified"
		fi
		if [ "$#" = "0" -o "$1" = "All" ] ; then
			if [ -f "$TSTSRCDIR/All" ]
			  then  TSTLIST="`cat $TSTSRCDIR/All | grep -v '^#'`"
			  else  ErrXit "test list missing: '$TSTSRCDIR/All\`"
			fi
		  else
			TSTLIST="$*"
		fi
	  else
		ErrXit "test directory missing: '$TSTSRCDIR\`"
	fi
	LOG1 TSTLIST=$TSTLIST

	if [ "$TSTLIST" ] ; then
		if [ $THISFILE = Mtest ] ; then
			CHECK $MCREATEDB -db $TSTDB
		fi
		for t in $TSTLIST ; do  ( LOG1x cd $TSTSRCDIR ; LOG1x ${THISFILE}It $t ) ; done
		if [ $THISFILE = Mtest ] ; then
			CreateHtmlIndex   $TSTDIR
			AddSubToHtmlIndex $TSTDIR
###			CHECK $MDESTROYDB -db $TSTDB
		fi
	fi
} # M_Slave ()

function GetModules () {
	$MSERVER -db Tests <<- "MIL" | grep '^\^(.*)\$$'
		printf("\n^(#.*");sunion([~monet_mod_nme],[~view_modules]).reverse.kunique@batloop{printf("|%s",$h);}printf(")$\n");
		quit;
	MIL
} # GetModules ()

function M_Master () {
	if [ $THISFILE = Mtest ] ; then
		CHECK $MCREATEDB -db Tests
		MERROR=`echo 'quit;' | ( $MSERVER -db Tests || echo '!Exit 1' ) | grep '^!'`
		if [ "$MERROR" ] ; then  ErrXit "'$MSERVER -db Tests\` fails with:\n$MERROR" ; fi
		export TSTMODS="`GetModules`" ; LOG1 $TSTMODS
	fi
	CALLDIR=$PWD
	LOG1x cd $EXECDIR
	if [ "$RECURSIVE" = "NO" ]; then
		LOG1x $THISFILE --Slave $*
	  else
		LOG1 looking for \'Tests\` directories...
		if [ "${PWD%%/}" != "${TSTSRCBASE%%/}"  -a  -f Tests/All ]
		  then  SUBLIST=". "
		  else  SUBLIST=""
		fi
		if [ "$OS" = "AIX" ]
		  then	SUBLIST="$SUBLIST`find * */ -type f -name All -print | grep "/Tests/All$" | sed 's|/Tests/All$||g' | sort -u`"
		  else	SUBLIST="$SUBLIST`find * -follow -type f -name All -print | grep "/Tests/All$" | sed 's|/Tests/All$||g' | sort`"
		fi
		LOG1 SUBLIST=$SUBLIST
		if [ ! "$SUBLIST" ] ; then
			ErrMsg "no test lists '$TSTSRCBASE/<...>/Tests/All\` found"
			if [ -f Tests/All  -a  "${PWD%%/}" = "${TSTSRCBASE%%/}" ] ; then
				ErrMsg "there must be at least one directory level between TSTSRCBASE=$TSTSRCBASE and the 'Tests\` directory"
			fi
			if [ -f All  -a  "${PWD%/Tests}" != "$PWD" ] ; then
				ErrMsg "for running the Tests in $PWD, Mtest must be called in ${PWD%/Tests}"
			fi
			ErrXit ""
		  else
			for d in $SUBLIST ; do  ( LOG1x cd $d ; LOG1x $THISFILE --Slave All ) ; done
		fi
	fi
	if [ $THISFILE = Mtest ] ; then  CreateHtmlIndex ; fi
	LOG1x cd $CALLDIR
###	if [ $THISFILE = Mtest ] ; then
###		CHECK $MDESTROYDB -db Tests
###	fi
} # M_Master ()

#############################################################################
#	MAIN

if [ "$1" = '?' -o "$1" = '-?' -o "$1" = '-h' -o "$1" = '-help' -o "$1" = '--help' ] ; then  Usage$THISFILE ; fi

if [ "$1" = "--Slave" ]
  then  ROLE="Slave"  ; NUM_SHIFTS=1
  else  ROLE="Master" ; NUM_SHIFTS=0
fi

Init$ROLE $*

shift $NUM_SHIFTS

fLOG1x M_$ROLE $*

if [ $ROLE = Master ] ; then
	echo
	if [ $THISFILE = Mtest ] ; then
		if [ "`grep '<B>' $TSTTRGBASE/Tests/.index.head.html 2>&1`" ] ; then
			echo " !ERROR:  Testing FAILED ! "
			echo
			echo " First, check the testing results in  $TSTTRGBASE/Tests/index.html  ! "
			echo
			echo " Then, fix the problems by: "
			echo "  - fixing sources and test scripts "
			echo "  - fixing stable output by hand "
			echo "  - approving test output by Mapprove (cf. Mapprove -?) "
			echo
			echo " After that, re-run Mtest. "
		  else
			echo " No differences encountered during testing. "
			echo
			echo " If necessary, you can checkin your modifications, now. "
		fi
	  else
		echo " First, run 'cvs -q diff\` to check what you have changed. "
		echo
		echo " Then, re-run Mtest. "
#		echo " Then, checkin with 'cvs ci\`. "
	fi
	echo
fi

#	END
#############################################################################
