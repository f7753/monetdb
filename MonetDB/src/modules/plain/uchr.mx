@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@' 
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@' 
@' The Original Code is the Monet Database System.
@' 
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2003 CWI.
@' All Rights Reserved.
@' 
@' Contributor(s):
@' 		Martin Kersten <Martin.Kersten@cwi.nl>
@' 		Peter Boncz <Peter.Boncz@cwi.nl>
@' 		Niels Nes <Niels.Nes@cwi.nl>
@' 		Stefan Manegold  <Stefan.Manegold@cwi.nl>

@f uchr
@t The uchr module
@a Niels Nes
@v 1.0
@* Introduction
@T
The uchr atom is just a chr but uses numerical string representations.


@* Implementation

@+ MEL definition
@m
.MODULE uchr;
	.ATOM uchr = chr;
		.FROMSTR = uchr_fromstr;
		.TOSTR   = uchr_tostr;
	.END;
.END uchr;

@+ C implementation
@c

/*
#define DEBUG 
*/

@h
#ifndef _UCHR_H
#define _UCHR_H
typedef unsigned char uchr;

#include "uchr.proto.h"
#define uchr_nil chr_nil
@-
Type-mappers for convenience
@= HT_bunfastins_typemap
#define @1@2_bunfastins_nocheck_noinc(b, p, h, t) @1@3_bunfastins_nocheck_noinc(b, p, h, t)
#define @1@2_bunfastins_nocheck(b, p, h, t, s)    @1@3_bunfastins_nocheck(b, p, h, t, s)
#define @1@2_bunfastins(b, h, t) @1@3_bunfastins_nocheck_noinc(b, h, t)
#define @2@1_bunfastins_nocheck_noinc(b, p, h, t) @3@1_bunfastins_nocheck_noinc(b, p, h, t)
#define @2@1_bunfastins_nocheck(b, p, h, t, s)    @3@1_bunfastins_nocheck(b, p, h, t, s)
#define @2@1_bunfastins(b, h, t) @3@1_bunfastins_nocheck_noinc(b, h, t)
@h
@:HT_bunfastins_typemap(void,uchr,chr)@
@:HT_bunfastins_typemap(oid,uchr,chr)@
@:HT_bunfastins_typemap(chr,uchr,chr)@
@:HT_bunfastins_typemap(sht,uchr,chr)@
@:HT_bunfastins_typemap(int,uchr,chr)@
@:HT_bunfastins_typemap(lng,uchr,chr)@
@:HT_bunfastins_typemap(any,uchr,chr)@

#endif
@c
#include "uchr.h"

@- Atom commands
@c

int uchr_fromstr(char *uchrStr, int *len, uchr** c) {
	char *end = NULL;

#ifdef DEBUG
	printf("* uchr_fromstr:\n");
	printf("  - uchrStr: %s\n",(uchrStr!=NULL?uchrStr:"null"));
	printf("  - *len: %d\n",*len);
#endif

	if (!*c){
		*c = (uchr*)GDKmalloc(sizeof(uchr));
	} else if (*len < sizeof(uchr)){
		GDKfree(*c);
		*c = GDKmalloc(sizeof(uchr));
		*len = sizeof(uchr);
	}

	**c = (uchr)strtol(uchrStr, &end, 10);

#ifdef DEBUG
	printf("  = *c: %d\n", (int)**c);
	printf("  = *len: %d\n",*len);
#endif

	return end-uchrStr;
}

int uchr_tostr(char **uchrStr, int *len, uchr *c) {

#ifdef DEBUG
	printf("* uchr_tostr:\n");
	printf("  - *len: %d\n",*len);
	printf("  - c: %s\n",(c!=NULL?c:"null"));
#endif

	/* allocate and fill a new string */
	
	if (*len < 4) {
		GDKfree(*uchrStr);
		*uchrStr = GDKmalloc(4);
		*len = 4;
	}
	sprintf(*uchrStr,"%u",(int)*c);

#ifdef DEBUG
	printf("  = buf: %s\n",buf);
	printf("  = *uchrStr: %s\n",*uchrStr);
	printf("  = *len: %d\n",*len);
#endif
	return 4;
}
@mil

PROC test_uchr() : void := {
  var b := new(int, uchr);
  b.insert(1,uchr(1));
}
