@f uchr
@t The uchr module
@a Niels Nes
@v 1.0
@* Introduction
@T
The uchr atom is just a chr but uses numerical string representations.


@* Implementation

@+ MEL definition
@m
.MODULE uchr;
	.ATOM uchr = chr;
		.FROMSTR = uchr_fromstr;
		.TOSTR   = uchr_tostr;
	.END;
.END uchr;

@+ C implementation
@c

/*
#define DEBUG 
*/

@h
#ifndef _UCHR_H
#define _UCHR_H
typedef unsigned char uchr;

#include "uchr.proto.h"
#endif
@c
#include "uchr.h"

@- Atom commands
@c

int uchr_fromstr(char *uchrStr, int *len, uchr** c) {
	char *end = NULL;

#ifdef DEBUG
	printf("* uchr_fromstr:\n");
	printf("  - uchrStr: %s\n",(uchrStr!=NULL?uchrStr:"null"));
	printf("  - *len: %d\n",*len);
#endif

	if (!*c){
		*c = (uchr*)GDKmalloc(sizeof(uchr));
	} else if (*len < sizeof(uchr)){
		GDKfree(*c);
		*c = GDKmalloc(sizeof(uchr));
		*len = sizeof(uchr);
	}

	**c = (uchr)strtol(uchrStr, &end, 10);

#ifdef DEBUG
	printf("  = *c: %d\n", (int)**c);
	printf("  = *len: %d\n",*len);
#endif

	return end-uchrStr;
}

int uchr_tostr(char **uchrStr, int *len, uchr *c) {

#ifdef DEBUG
	printf("* uchr_tostr:\n");
	printf("  - *len: %d\n",*len);
	printf("  - c: %s\n",(c!=NULL?c:"null"));
#endif

	/* allocate and fill a new string */
	
	if (*len < 4) {
		GDKfree(*uchrStr);
		*uchrStr = GDKmalloc(4);
		*len = 4;
	}
	sprintf(*uchrStr,"%u",(int)*c);

#ifdef DEBUG
	printf("  = buf: %s\n",buf);
	printf("  = *uchrStr: %s\n",*uchrStr);
	printf("  = *len: %d\n",*len);
#endif
	return 4;
}
@mil
var b := new(int, uchr);
b.insert(1,uchr(1));
