stdout of test 'malalgebra` in directory 'src/modules/plain` itself:

#> Mtest:	other malalgebra 1200
#> Mtest:	Mtimeout -timeout 1200 ./malalgebra malalgebra
#> Mlog:	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db modules_plain malalgebra.mil
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for Linux2.2.14-12/32bit on Tue Jul  4 17:17:35 CEST 2000.
#script:malalgebra.mil

loaded;
#---------------------------------#
# module	| usage_count	  #
#---------------------------------#
[ "algebra",	  1		  ]
[ "arith",	  1		  ]
[ "bat",	  1		  ]
[ "kernel",	  1		  ]
[ "str",	  1		  ]
[ "sys",	  1		  ]
[ "trans",	  1		  ]

Try: modules;                - for other modules.
     ls;                     - for persistent bat listing.
     sigs("<module>")        - for available commands per module.
     help("<command>")       - for help one-liner for a command.

#You are system administrator (adm)!

#line 172 "malalgebra.mx"

#
# Simple test of some algorithms against the baseline
#



VAR Ndiff, l, r;

dj := new( void, oid ); tf := new( void, int );
dj.insert( nil, 0@0 );  tf.insert( nil, 10 );
dj.insert( nil, 0@0 );  tf.insert( nil, 20 );
dj.insert( nil, 0@0 );  tf.insert( nil, 30 );
dj.insert( nil, 1@0 );  tf.insert( nil, 30 );
dj.insert( nil, 1@0 );  tf.insert( nil, 20 );
dj.insert( nil, 1@0 );  tf.insert( nil, 10 );
dj.insert( nil, 2@0 );  tf.insert( nil, 20 );
dj.insert( nil, 2@0 );  tf.insert( nil, 30 );
dj.insert( nil, 2@0 );  tf.insert( nil, 10 );
dj.seqbase(0@0);        tf.seqbase(0@0);

l := dj.reverse;
r := tf;

Ntestfailed := 0;



#line 213 "malalgebra.mx"


#line 202 "malalgebra.mx"
VAR result_oid := join( [oid](l), [oid](r.reverse).reverse );


#line 214 "malalgebra.mx"


#line 205 "malalgebra.mx"

#line 202 "malalgebra.mx"
VAR hashresult_oid := hashjoin( [oid](l), [oid](r.reverse).reverse );


#line 205 "malalgebra.mx"
IF( not( isnil(hashresult_oid) ) ) {
  Ndiff := diff( result_oid, hashresult_oid ).count;
  printf( "Algorithm hash leads to %d different answers.\n", Ndiff );
  IF (Ndiff>0) Ntestfailed :+= 1;
}
Algorithm hash leads to 0 different answers.


#line 215 "malalgebra.mx"


#line 205 "malalgebra.mx"

#line 202 "malalgebra.mx"
VAR fetchresult_oid := fetchjoin( [oid](l), [oid](r.reverse).reverse );


#line 205 "malalgebra.mx"
IF( not( isnil(fetchresult_oid) ) ) {
  Ndiff := diff( result_oid, fetchresult_oid ).count;
  printf( "Algorithm fetch leads to %d different answers.\n", Ndiff );
  IF (Ndiff>0) Ntestfailed :+= 1;
}
Algorithm fetch leads to 0 different answers.


#line 216 "malalgebra.mx"


#line 205 "malalgebra.mx"

#line 202 "malalgebra.mx"
VAR mergeresult_oid := mergejoin( [oid](l), [oid](r.reverse).reverse );


#line 205 "malalgebra.mx"
IF( not( isnil(mergeresult_oid) ) ) {
  Ndiff := diff( result_oid, mergeresult_oid ).count;
  printf( "Algorithm merge leads to %d different answers.\n", Ndiff );
  IF (Ndiff>0) Ntestfailed :+= 1;
}
Algorithm merge leads to 0 different answers.


#line 217 "malalgebra.mx"


#line 205 "malalgebra.mx"

#line 202 "malalgebra.mx"
VAR indexresult_oid := indexjoin( [oid](l), [oid](r.reverse).reverse );


#line 205 "malalgebra.mx"
IF( not( isnil(indexresult_oid) ) ) {
  Ndiff := diff( result_oid, indexresult_oid ).count;
  printf( "Algorithm index leads to %d different answers.\n", Ndiff );
  IF (Ndiff>0) Ntestfailed :+= 1;
}
Algorithm index leads to 0 different answers.


#line 218 "malalgebra.mx"



#line 199 "malalgebra.mx"
VAR result_void := join( l, r );


#line 220 "malalgebra.mx"


#line 205 "malalgebra.mx"

#line 199 "malalgebra.mx"
VAR hashresult_void := hashjoin( l, r );


#line 205 "malalgebra.mx"
IF( not( isnil(hashresult_void) ) ) {
  Ndiff := diff( result_void, hashresult_void ).count;
  printf( "Algorithm hash leads to %d different answers.\n", Ndiff );
  IF (Ndiff>0) Ntestfailed :+= 1;
}
Algorithm hash leads to 0 different answers.


#line 221 "malalgebra.mx"


#line 205 "malalgebra.mx"

#line 199 "malalgebra.mx"
VAR fetchresult_void := fetchjoin( l, r );


#line 205 "malalgebra.mx"
IF( not( isnil(fetchresult_void) ) ) {
  Ndiff := diff( result_void, fetchresult_void ).count;
  printf( "Algorithm fetch leads to %d different answers.\n", Ndiff );
  IF (Ndiff>0) Ntestfailed :+= 1;
}
Algorithm fetch leads to 0 different answers.


#line 222 "malalgebra.mx"


#line 205 "malalgebra.mx"

#line 199 "malalgebra.mx"
VAR mergeresult_void := mergejoin( l, r );
!ERROR: Cannot perform mergejoin on void fields.
!ERROR: CMDmergejoin: operation failed.


#line 205 "malalgebra.mx"
IF( not( isnil(mergeresult_void) ) ) {
  Ndiff := diff( result_void, mergeresult_void ).count;
  printf( "Algorithm merge leads to %d different answers.\n", Ndiff );
  IF (Ndiff>0) Ntestfailed :+= 1;
}


#line 223 "malalgebra.mx"


#line 205 "malalgebra.mx"

#line 199 "malalgebra.mx"
VAR indexresult_void := indexjoin( l, r );


#line 205 "malalgebra.mx"
IF( not( isnil(indexresult_void) ) ) {
  Ndiff := diff( result_void, indexresult_void ).count;
  printf( "Algorithm index leads to %d different answers.\n", Ndiff );
  IF (Ndiff>0) Ntestfailed :+= 1;
}
Algorithm index leads to 0 different answers.


#line 224 "malalgebra.mx"


printf( "RESULT: %d tests failed.\n", Ntestfailed );
RESULT: 0 tests failed.
