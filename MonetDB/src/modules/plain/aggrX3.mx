@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at 
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@' 
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@' 
@' The Original Code is the Monet Database System.
@' 
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2002 CWI.  
@' All Rights Reserved.
@' 
@' Contributor(s):
@' 		Martin Kersten <Martin.Kersten@cwi.nl>
@' 		Peter Boncz <Peter.Boncz@cwi.nl>
@' 		Niels Nes <Niels.Nes@cwi.nl>
@' 		Stefan Manegold  <Stefan.Manegold@cwi.nl>

@f aggrX3
@a S. Manegold 
@t Improved & Extended Aggregates Module
@v 1.0

This module contains some efficient aggregate functions that compute their 
result in one scan, rather than in the iterative manner of the generic 
MIL aggr_ implementations.

The implementation code is derived from the original aggr module. 
Major changes are
\begin{itemize}
\item
complete type-specific code expansion to avoid any type-checking in the inner-most loops;
\item
where feasable, replaced (expansive) hash-lookup by significantly cheaper positional
void-lookups (if the head-column of the group-extend BAT ("e") is "void") or at least by 
(also positional) array lookups (in case the group-ids span a reasonably small range);
\item
in addition to the 2-parameter {}(BAT[oid,any::1] b, BAT[oid,any] e)
functions, there are now also 3-parameter {}(BAT[void,any::1] b,
BAT[void,oid] g, BAT[oid,any] e) functions, that require b & g to be
head-aligned, and to the fetchjoin(reverse(g),b) on-the-fly;
\end{itemize}

@m
.MODULE aggrX3;

@= sum_avg_signatures
.COMMAND {sum}(BAT[oid,@1] b, BAT[oid,any] e) : BAT[oid,@1] = CMDaggrX3_sum_@1; 
	"grouped tail sum on @1"
.COMMAND {avg}(BAT[oid,@1] b, BAT[oid,any] e) : BAT[oid,@1] = CMDaggrX3_avg_@1; 
	"grouped tail average on @1"
.COMMAND {sum}(BAT[oid,@1] b, BAT[oid,oid] g, BAT[oid,any] e) : BAT[oid,@1] = CMDaggrX3_sum3_@1; 
	"grouped tail sum on @1"
.COMMAND {avg}(BAT[oid,@1] b, BAT[oid,oid] g, BAT[oid,any] e) : BAT[oid,@1] = CMDaggrX3_avg3_@1; 
	"grouped tail average on @1"
@m
@:sum_avg_signatures(sht)@
@:sum_avg_signatures(int)@
@:sum_avg_signatures(lng)@
@:sum_avg_signatures(flt)@
@:sum_avg_signatures(dbl)@

.COMMAND {min}(BAT[oid,any::1] b, BAT[oid,any] e) : BAT[oid,any::1] = CMDaggrX3_min; 
	"grouped tail minimum"
.COMMAND {max}(BAT[oid,any::1] b, BAT[oid,any] e) : BAT[oid,any::1] = CMDaggrX3_max; 
	"grouped tail maximum"
.COMMAND {min}(BAT[oid,any::1] b, BAT[oid,oid] g, BAT[oid,any] e) : BAT[oid,any::1] = CMDaggrX3_min3; 
	"grouped tail minimum"
.COMMAND {max}(BAT[oid,any::1] b, BAT[oid,oid] g, BAT[oid,any] e) : BAT[oid,any::1] = CMDaggrX3_max3; 
	"grouped tail maximum"

.COMMAND {count}(BAT[oid,any] b, BAT[oid,any] e) : BAT[oid,int] = CMDaggrX3_count; 
	"grouped count"
.COMMAND {count}(BAT[oid,any] b, BAT[oid,oid] g, BAT[oid,any] e) : BAT[oid,int] = CMDaggrX3_count3; 
	"grouped count"

.COMMAND {size}(BAT[oid,bit] b, BAT[oid,any] e) : BAT[oid,int] = CMDaggrX3_size;
	"grouped count of true values"

.LOAD

    proc size(BAT[any,bit] b) : int {
	var h := b.histogram;
	if (h.exist(true)) 
	    return h.find(true);
	return 0;
    }

    proc avg(BAT[any, any::1] b) : any::1 {
	var cnt := count(b);
        if (cnt = 0) 
	    return cast(0,ttype(b));
	return /(sum(b),cast(cnt,ttype(b)));
    }

    proc card(BAT[any,any] b) : int {
	return b.tunique.count;
    }

    proc {card}(BAT[oid,any] b, BAT[oid,any] e) : BAT[oid,int] {
	return {count}(b.sunique,e);
    }
.END;

.END aggrX3;

@{
@+ Test Script
@mil
module(aggrX3,decimal);

proc toset(bat[any,any] b) : str {
        var res := "{ ";
        b@batloop() {
                res :+= str($t) + " ";
        }
        return res + "}";
}

proc aggrtst(int num, int fanout, str aggr) {
	var p := 3;
	while((p :+= 1) <= $0) {
	        var b, e, v := bat(void, int, num);
	        var tpe := $(p);
	        var i := 0;
	        while(i < num) {
	                v.insert(nil, 42);
	                i :+= 1;
	        }
	        e := [oid](v.seqbase(0@0).reverse).reverse;
	        if (fanout = 1) {
	                b := bat(void,(*tpe)()).seqbase(0@0);
	        } else {
	                b := bat(oid,(*tpe)());
	        }
	        var n := 0; 
	        e@batloop() {
	                i := 0; 
	                while(i < fanout) {
	                        if  (($h = 0@0) and (i = 0)) {
	                                b.insert($h, (*tpe)(nil));
	                        } else {
	                                b.insert($h, (*tpe)(n));
                        	} 
                        	n :+= 1; i :+= 1;
                	}
                }
        	print({toset}(b).col_name("test-set"),
        	      (*aggr)(b).col_name(sprintf("%s(b)",aggr)),
        	      (*aggr)(b,v).col_name(sprintf("%s(b,v)",aggr)),
        	      (*aggr)(b,e).col_name(sprintf("%s(b,e)",aggr)));
        }
}

aggrtst(16,160,"{sum}","sht","int","lng","flt","dbl");
aggrtst(16,160,"{avg}","sht","int","lng","flt","dbl");
aggrtst(16,160,"{min}","sht","int","lng","flt","dbl","decimal");
aggrtst(16,160,"{max}","sht","int","lng","flt","dbl","decimal");
aggrtst(16,160,"{card}","sht","int","lng","flt","dbl","decimal");
aggrtst(16,160,"{count}","sht","int","lng","flt","dbl","decimal");

@{
@+ Implementation
These implementations need just one scan and a simple hash-maintained data
structure to compute a group of common aggregates. 
@c
#include <gdk.h>
#include <gdk_scanselect.h> /* for type-specific HT_bunfastins_nocheck_noinc(), until they're moved to gdk.mx */
#include "aggrX3.proto.h"

/* 
with group OIDs spanning a range of less than SMALL_AGGR_MAX (the actual
number of groups might be even less, in case there are "holes" in the group
OID range), we use a simple array as temporary sum/cnt table on order to
benefit from positional lookups; with size of sum <= 8 bytes and size of 
cnt == 4 bytes, we stay below 16 KBytes, i.e., within (almost) any L1 cache
*/
#define SMALL_AGGR_MAX 1024

@-
The macro CHKrange is just for array-lookups, analogously to BUNfntVOID &
HASHfnd_int for void- and hash-lookups, respectively
@c
#define CHKrange(r, bn, h)	r = (BUN)(((*(int*)h >= min) && (*(int*)h <= max))?h:NULL)

@- Result initialization
@c
/*	init_result
	@1:	tail-type:	chr/sht/int/lng/flt/dbl / any / void
*/
@= init_result
{	REGISTER BUN _p = BUNlast(bn);
	REGISTER int _bunsize = BUNsize(bn);
	bn->tsorted = bn->hsorted = 0;
	ALIGNsetH(bn, e);
	/* set all sums/avgs/counts to zero */
	/* where necessary, calculate min/max oid with minimal efford */
	if (e->htype == TYPE_void) {
		oid nil = oid_nil;
		ALGODEBUG THRprintf(GDKout, "init_result(@1): e->htype == TYPE_void, e->hseqbase=%lu\n", (unsigned long) e->hseqbase);
		BATloopFast(e, p, q, xx) {
			void@1_bunfastins_nocheck_noinc(bn, _p, &nil, &zero);
			_p += _bunsize;
		}
		BATseqbase(bn,e->hseqbase);
	} else if (BAThordered(e)&1) {
		min = *(oid*)BUNhloc(e, BUNfirst(e));
		BATloopFast(e, p, q, xx) {
			int@1_bunfastins_nocheck_noinc(bn, _p, BUNhloc(e,p), &zero);
			_p += _bunsize;
		}
		max = *(oid*)BUNhloc(e, BUNlast(e)-BUNsize(e));
		ALGODEBUG THRprintf(GDKout, "init_result(@1): BAThordered(e)&1, min=%lu, max=%lu\n", (unsigned long) min, (unsigned long) max);
	} else {
		oid i;
		min = max = *(oid*)BUNhloc(e, BUNfirst(e));
		BATloopFast(e, p, q, xx) {
			int@1_bunfastins_nocheck_noinc(bn, _p, BUNhloc(e,p), &zero);
			_p += _bunsize;
			i = *(oid*)BUNhloc(e, p);
			if (i < min) min = i;
			else
			if (i > max) max = i;
		}
		ALGODEBUG THRprintf(GDKout, "init_result(@1): min=%lu, max=%lu\n", (unsigned long) min, (unsigned long) max);
	}
	bn->batBuns->free = _p - bn->batBuns->base;
	if (!bn->batDirty) bn->batDirty = TRUE;
}
@- Sum & Average
@c
/*	aggrX3_sum
		e-void-head	e-oid-head	e-oid-head
		void-lookup	hash-lookup	array-lookup

	@1:	0		0		1		use sums-array?
	@2:	0		1		0		do BATprepareHash?
	@3:	BUNfndVOID	HASHfnd_int	CHKrange	lookup
	@4:	var		loc		loc		e/bn-head-access

	@5:	"BUNhloc(b,p)"  for  (oid) b-head-type,		b-head access
		"&bhsb; bhsb++" for (void) b-head-type		

	@6:		sht / int / lng / flt / dbl		b/bn-tail-type
	@7:	"loc" for fixsized b/bn-tail-type, 		b/bn-tail-access
		"var" for varsized b/bn-tail-type		(only loc used currently)

	@8:	BUNt@7(bn,r)	BUNt@7(bn,r)	&sums[(*(int*)h)-min]	
								*dst: sum in-place or in sums-array ?
*/
@= aggrX3_sum
	ALGODEBUG THRprintf(GDKout, "aggrX3_sum(@1,@2,@3,@4,@5,@6,@7,@8);\n");
	if (@1) {
	 	/* create tmp. sums array */
		int i;
		sums = (@6*) GDKmalloc(range*sizeof(@6));
		for (i = 0; i < range; i++) sums[i] = zero;
	}
	if (@2) { (void) BATprepareHash(bn); }
	/* scan b, and add values to sums in-place or in sums-array */
	bhsb = b->hseqbase;
	BATloopFast(b, p, q, xx) {
		@6 *t = (@6*) BUNt@7(b,p);
		oid *h = (oid*) @5;

		@3(r, bn, (int*)h);
		if (r) {
			@6 *dst = (@6*) @8;
			if (*dst != @6_nil) {
				if (*t == @6_nil) {	
					*dst = @6_nil;
				} else {
					*dst += *t;
				}
			} 
		}
	} 
	if (@1) {
        	/* copy sums array to final result */
       		BATloopFast(bn, p, q, xx) {
			oid h = (*(oid*) BUNh@4(bn,p)) - min;
			*(@6*)BUNt@7(bn, p) = sums[h];
		}
	        GDKfree(sums);
	}
@
@c
/*	aggrX3_avg
		e-void-head	e-oid-head	e-oid-head
		void-lookup	hash-lookup	array-lookup

	@1:	0		0		1		use sums-array?
	@2:	0		1		0		do BATprepareHash?
	@3:	BUNfndVOID	HASHfnd_int	CHKrange	lookup
	@4:	var		loc		loc		e/bn-head-access

	@5:	"BUNhloc(b,p)"  for  (oid) b-head-type,		b-head access
		"&bhsb; bhsb++" for (void) b-head-type		

	@6:		sht / int / lng / flt / dbl		b/bn-tail-type
	@7:	"loc" for fixsized b/bn-tail-type, 		b/bn-tail-access
		"var" for varsized b/bn-tail-type		(only loc used currently)

	@8:	BUNt@7(bn,r)	BUNt@7(bn,r)	&sums[(*(int*)h)-min]	
								*dst: sum in-place or in sums-array ?
	
	@9:	     BUNindex(bn,r)-off		(*(int*)h)-min	index in cnt array
*/
@= aggrX3_avg
	ALGODEBUG THRprintf(GDKout, "aggrX3_avg(@1,@2,@3,@4,@5,@6,@7,@8,@9);\n");
	if (@1) {
		/* create tmp. sums array */
		int i;
		sums = (@6*) GDKmalloc(range*sizeof(@6));
		for (i = 0; i < range; i++) sums[i] = zero;
	}
	if (@2) { (void) BATprepareHash(bn); }
	cnt = (int*) GDKmalloc(slots*sizeof(int));
	memset(cnt, 0, slots*sizeof(int));
	/* scan b, adding sums, and incrementing counts */
        bhsb = b->hseqbase;
	BATloopFast(b, p, q, xx) {
		@6 *t = (@6*) BUNt@7(b,p);
		oid *h = (oid*) @5;

		@3(r, bn, (int*)h);
		if (r) {
			@6 *dst = (@6*) @8;
			if (*dst != @6_nil) {
				if (*t == @6_nil) {	
					*dst = @6_nil;
				} else {
					*dst += *t;
				}
				cnt[@9]++;
			} 
		}
	} 
	/* postprocess by dividing sums by counts */
	if (@1) {
		/* sums in sums-array */
		BATloopFast(bn, p, q, xx) {
			oid h = (*(oid*) BUNh@4(bn,p)) - min;
			@6 *dst = (@6*) BUNt@7(bn, p);
			if (cnt[h] == 0 || sums[h] == @6_nil) {
				*dst = @6_nil;
			} else {
				*dst = sums[h]/cnt[h];
			}
		}
       		GDKfree(sums);
	} else {
		/* sums in-place */
		int yy = 0;
		BATloopFast(bn, p, q, xx) {
			@6 *dst = (@6*) BUNt@7(bn, p);
			if (cnt[yy] == 0) {
				*dst = @6_nil;
			} else if (*dst != @6_nil) {
				*dst /= cnt[yy];
			}
			yy++;
		} 
	
	}
        GDKfree(cnt);
@c

/*	arithpump
	@6:	sht / int / lng / flt / dbl		b/bn-tail-type
	@7:	"loc" for fixsized b/bn-tail-type, 	b/bn-tail-access
		"var" for varsized b/bn-tail-type	(only loc used currently)
*/
@= arithpump
int CMDaggrX3_sum_@1(BAT **ret, BAT *b, BAT *e){
	BAT *bn = BATnew(e->htype, BATttype(b), BATcount(e));	
	@1 zero = (@1) 0, *sums;
	BUN p, q, r;
	int xx;
	oid range, min, max;
	oid bhsb;

	ALGODEBUG THRprintf(GDKout, "CMDaggrX3_sum_@1[@2](b=%s,e=%s);\n",b->batId,e->batId);
	/* init: set all sums to zero and calculate min/max oid */
	@:init_result(@1)@
	range = max - min + 1;

	/* scan b, and calculate sums */
	if (e->htype == TYPE_void) {
		/* void lookup */
		if (b->htype == TYPE_void) {
			@:aggrX3_sum(0,0,BUNfndVOID,var,&bhsb; bhsb++,@1,@2,BUNt@2(bn,r))@
		} else {
			@:aggrX3_sum(0,0,BUNfndVOID,var,BUNhloc(b,p),@1,@2,BUNt@2(bn,r))@
		}
	/* e->htype == TYPE_oid */
	} else if (range > SMALL_AGGR_MAX) {
		/* hash lookup */
		if (b->htype == TYPE_void) {
			@:aggrX3_sum(0,1,HASHfnd_int,loc,&bhsb; bhsb++,@1,@2,BUNt@2(bn,r))@
		} else {
			@:aggrX3_sum(0,1,HASHfnd_int,loc,BUNhloc(b,p),@1,@2,BUNt@2(bn,r))@
		}
	} else {
		/* array lookup */
		if (b->htype == TYPE_void) {
			@:aggrX3_sum(1,0,CHKrange,loc,&bhsb; bhsb++,@1,@2,&sums[(*(int*)h)-min])@
		} else {
			@:aggrX3_sum(1,0,CHKrange,loc,BUNhloc(b,p),@1,@2,&sums[(*(int*)h)-min])@
		}
	}
			
	*ret = bn;
	return GDK_SUCCEED;
}

int CMDaggrX3_avg_@1(BAT **ret, BAT *b, BAT *e){
	BAT *bn = BATnew(e->htype, BATttype(b), BATcount(e));	
	int xx, off = BUNindex(bn,BUNfirst(bn));
	int *cnt;
	size_t slots; 
	oid range, min, max;
	@1 zero = (@1) 0, *sums;
	BUN p, q, r;
	oid bhsb;

	ALGODEBUG THRprintf(GDKout, "CMDaggrX3_avg_@1[@2](b=%s,e=%s);\n",b->batId,e->batId);
	/* init: set all sums & counts to zero and calculate min/max oid */
	@:init_result(@1)@
	range = max - min + 1;

	/* scan b, calculate sums & counts, derive averages */
	if (e->htype == TYPE_void) {
		/* void lookup */
		slots = BATcount(e);
		if (b->htype == TYPE_void) {
			@:aggrX3_avg(0,0,BUNfndVOID,var,&bhsb; bhsb++,@1,@2,BUNt@2(bn,r),BUNindex(bn,r)-off)@
		} else {
			@:aggrX3_avg(0,0,BUNfndVOID,var,BUNhloc(b,p),@1,@2,BUNt@2(bn,r),BUNindex(bn,r)-off)@
		}
	/* e->htype == TYPE_oid */
	} else if (range > SMALL_AGGR_MAX) {
		/* hash lookup */
		slots = BATcount(e);
		if (b->htype == TYPE_void) {
			@:aggrX3_avg(0,1,HASHfnd_int,loc,&bhsb; bhsb++,@1,@2,BUNt@2(bn,r),BUNindex(bn,r)-off)@
		} else {
			@:aggrX3_avg(0,1,HASHfnd_int,loc,BUNhloc(b,p),@1,@2,BUNt@2(bn,r),BUNindex(bn,r)-off)@
		}
	} else {
		/* array lookup */
		slots = range;
		if (b->htype == TYPE_void) {
			@:aggrX3_avg(1,0,CHKrange,loc,&bhsb; bhsb++,@1,@2,&sums[(*(int*)h)-min],(*(int*)h)-min)@
		} else {
			@:aggrX3_avg(1,0,CHKrange,loc,BUNhloc(b,p),@1,@2,&sums[(*(int*)h)-min],(*(int*)h)-min)@
		}
	}

	*ret = bn;
	return GDK_SUCCEED;
}
@c
@:arithpump(sht,loc)@
@:arithpump(int,loc)@
@:arithpump(lng,loc)@
@:arithpump(flt,loc)@
@:arithpump(dbl,loc)@

@- "Extremes" (Min & Max)
@c
/*	aggrX3_minmax
		e-void-head	e-oid-head	e-oid-head
		void-lookup	hash-lookup	array-lookup

	@1:	</>		</>		</>		compare operator: <(min) or >(max)
	@2:	0		1		0		do BATprepareHash?
	@3:	BUNfndVOID	HASHfnd_int	CHKrange	lookup
	@4:	var		loc		loc		e/bn-head-access

	@5:	"BUNhloc(b,p)"  for  (oid) b-head-type,		b-head access
		"&bhsb; bhsb++" for (void) b-head-type		

	@6:		chr / sht / int / lng / any		b/bn-tail-storage-type
	@7:	"loc" for fixsized b/bn-tail-type, 		b/bn-tail-access
		"var" for varsized b/bn-tail-type

	@8:	     BUNindex(bn,r)-off		(*(int*)h)-min	index in extremes array
*/
@= aggrX3_minmax
	ALGODEBUG THRprintf(GDKout, "aggrX3_minmax(@1,@2,@3,@4,@5,@6,@7,@8);\n");
	if (@2) { (void) BATprepareHash(e); }
	/* init: create extremes and set all to the zero pointer */
	extremes = (ptr*) GDKmalloc(slots*sizeof(ptr));
	memset(extremes, 0, slots*sizeof(ptr));
	/* scan b and replace totals by the extreme value (just pointers to vals in b) */
        bhsb = b->hseqbase;
	BATloopFast(b, p, q, xx) {
		ptr t = BUNt@7(b,p);
		oid *h = (oid*) @5;

		@3(r, bn, (int*)h);
		if (r) {
			ptr *val = &extremes[@8];
			if (*val != nil) {
				if ((*cmp)(t,nil) == 0) {	
					*val = nil;
				} else if (*val == NULL || (*cmp)(t,*val) @1 0) {
					*val = t;
				}
			} 
		}
	} 
	/* insert the extreme values into the result */
	BATloopFast(bn, r, q, xx) {
		oid *h = (oid*)BUNh@4(bn,r);
		ptr val = extremes[@8];
		/* trick: using a void head-type, only the tail are (over)written */
		void@6_bunfastins_nocheck_noinc(bn, r, h, val?val:nil);
	} 
        GDKfree(extremes);
@c

/*	extreme_typed
	@1:	min/max
	@2:	 < / >
	@3:	b/bn-tail-storage-type			chr/sht/int/lng/any
	@7:	"loc" for fixsized b/bn-tail-type, 	b/bn-tail-access
		"var" for varsized b/bn-tail-type
*/
@= extreme_typed
int aggrX3_@1_@3_@4(BAT **ret, BAT *b, BAT *e){
	BAT *bn = BATnew(e->htype, BATttype(b), BATcount(e));	
	int (*cmp)(ptr,ptr) = BATatoms[bn->ttype].atomCmp;
	ptr nil = ATOMnilptr(bn->ttype);
	int xx, off = BUNindex(e,BUNfirst(e));
	ptr *extremes;
	BUN p, q, r;
	oid range, min, max;
	size_t slots;
	oid bhsb;

	ALGODEBUG THRprintf(GDKout, "aggrX3_@1_@3_@4[@2](b=%s,e=%s);\n",b->batId,e->batId);
	/* init: prepare the result bat; 
	 * trick: by using "tail-type" void, we only write the head column, here */
	@:init_result(void)@
	range = max - min + 1;

	/* scan b and replace totals by the extreme value (just pointers to vals in b) */
	slots = BATcount(e);
	if (e->htype == TYPE_void) {
		/* void lookup */
		if (b->htype == TYPE_void) {
			@:aggrX3_minmax(@2,0,BUNfndVOID,var,&bhsb; bhsb++,@3,@4,BUNindex(bn,r)-off)@
		} else {
			@:aggrX3_minmax(@2,0,BUNfndVOID,var,BUNhloc(b,p),@3,@4,BUNindex(bn,r)-off)@
		}
	/* e->htype == TYPE_oid */
	} else if (range > SMALL_AGGR_MAX) {
		/* hash lookup */
		if (b->htype == TYPE_void) {
			@:aggrX3_minmax(@2,1,HASHfnd_int,loc,&bhsb; bhsb++,@3,@4,BUNindex(bn,r)-off)@
		} else {
			@:aggrX3_minmax(@2,1,HASHfnd_int,loc,BUNhloc(b,p),@3,@4,BUNindex(bn,r)-off)@
		}
	} else {
		/* array lookup */
		slots = range;
		if (b->htype == TYPE_void) {
			@:aggrX3_minmax(@2,0,CHKrange,loc,&bhsb; bhsb++,@3,@4,(*(int*)h)-min)@
		} else {
			@:aggrX3_minmax(@2,0,CHKrange,loc,BUNhloc(b,p),@3,@4,(*(int*)h)-min)@
		}
	}
			
	*ret = bn;
	return GDK_SUCCEED;
}
@c
/*	extreme
	@1:	min/max
	@2:	 < / >
*/
@= extreme
@:extreme_typed(@1,@2,chr,loc)@
@:extreme_typed(@1,@2,sht,loc)@
@:extreme_typed(@1,@2,int,loc)@
@:extreme_typed(@1,@2,lng,loc)@
@:extreme_typed(@1,@2,any,loc)@
@:extreme_typed(@1,@2,any,var)@

int CMDaggrX3_@1(BAT **ret, BAT *b, BAT *e){
	int rtrn, tt = ATOMstorage(b->ttype);
	ALGODEBUG THRprintf(GDKout, "CMDaggrX3_@1[@2](b=%s,e=%s);\n",b->batId,e->batId);
	if (tt == TYPE_chr) {
		rtrn = aggrX3_@1_chr_loc(ret, b, e);
	} else if (tt == TYPE_sht) {
		rtrn = aggrX3_@1_sht_loc(ret, b, e);
	} else if (b->ttype != TYPE_bat && (tt == TYPE_int || tt == TYPE_flt)) {
	        /* ensure use of ATOMput for TYPE_bat */
		rtrn = aggrX3_@1_int_loc(ret, b, e);
	} else if (tt == TYPE_dbl || tt == TYPE_lng) {
		rtrn = aggrX3_@1_lng_loc(ret, b, e);
	} else if (b->hvarsized) {
		rtrn = aggrX3_@1_any_var(ret, b, e);
	} else {
		rtrn = aggrX3_@1_any_loc(ret, b, e);
	}
	return rtrn;
}
@c
@:extreme(min,<)@
@:extreme(max,>)@

@- Count
@c
/*	aggrX3_count
		e-void-head	e-oid-head	e-oid-head
		void-lookup	hash-lookup	array-lookup

	@1:	0		0		1		use cnt-array?
	@2:	0		1		0		do BATprepareHash?
	@3:	BUNfndVOID	HASHfnd_int	CHKrange	lookup
	@4:	var		loc		loc		e/bn-head-access

	@5:	"BUNhloc(b,p)"  for  (oid) b-head-type,		b-head access
		"&bhsb; bhsb++" for (void) b-head-type		

	@6:	BUNtloc(bn,r)	BUNtloc(bn,r)	&cnt[(*(int*)h)-min]	
								*dst: count in-place or in cnt-array ?
*/
@= aggrX3_count
	ALGODEBUG THRprintf(GDKout, "aggrX3_count(@1,@2,@3,@4,@5,@6);\n");
	if (@1) {
	 	/* create tmp. cnt array */
		cnt = (int*) GDKmalloc(range*sizeof(int));
		memset(cnt, 0, range*sizeof(int));
	}
	if (@2) { (void) BATprepareHash(bn); }
	/* scan b, and increment counts in-place or in cnt-array */
        bhsb = b->hseqbase;
        btt = b->ttype;
	switch(ATOMstorage(btt)) {
	 case TYPE_chr:	@:aggrX3_count_loop(@1,@2,@3,@4,@5,@6,simple_EQ(BUNtloc(b,p),bt_nil,chr))@
	 case TYPE_sht:	@:aggrX3_count_loop(@1,@2,@3,@4,@5,@6,simple_EQ(BUNtloc(b,p),bt_nil,sht))@
	 case TYPE_int:	@:aggrX3_count_loop(@1,@2,@3,@4,@5,@6,simple_EQ(BUNtloc(b,p),bt_nil,int))@
	 case TYPE_lng:	@:aggrX3_count_loop(@1,@2,@3,@4,@5,@6,simple_EQ(BUNtloc(b,p),bt_nil,lng))@
	 case TYPE_flt:	@:aggrX3_count_loop(@1,@2,@3,@4,@5,@6,simple_EQ(BUNtloc(b,p),bt_nil,flt))@
	 case TYPE_dbl:	@:aggrX3_count_loop(@1,@2,@3,@4,@5,@6,simple_EQ(BUNtloc(b,p),bt_nil,dbl))@
	 default: if (b->tvarsized) {
			@:aggrX3_count_loop(@1,@2,@3,@4,@5,@6,atom_EQ(BUNtvar(b,p),bt_nil,btt))@
		  } else {
		 	@:aggrX3_count_loop(@1,@2,@3,@4,@5,@6,atom_EQ(BUNtloc(b,p),bt_nil,btt))@
		  }
	}
	if (@1) {
        	/* copy cnt array to final result */
       		BATloopFast(bn, p, q, xx) {
			oid h = (*(oid*) BUNh@4(bn,p)) - min;
			*(int*)BUNtloc(bn, p) = cnt[h];
		}
	        GDKfree(cnt);
	}
@c
/*	aggrX3_count_loop
	@7:	atom_EQ(BUNt{loc,var}(b,p),bt_nil,btt)		b-tail nil check
		simple_EQ(BUNtloc(b,p),bt_nil,{chr,sht,int,flt,lng,dbl})
*/
@= aggrX3_count_loop
	BATloopFast(b, p, q, xx) {
		oid *h = (oid*) @5;

		@3(r, bn, (int*)h);
		if (r) {
			if (!@7) {
				int *dst = (int*) @6;
				(*dst)++;
			}
		}
	} 
	break;
@c
int CMDaggrX3_count(BAT **ret, BAT *b, BAT *e){
	BAT *bn = BATnew(e->htype, TYPE_int, BATcount(e));	
	int zero = 0, *cnt;
	BUN p, q, r;
	int xx;
	oid range, min, max;
	oid bhsb;
	int btt;
	ptr bt_nil = ATOMnilptr(b->ttype);

	ALGODEBUG THRprintf(GDKout, "CMDaggrX3_(b=%s,e=%s);\n",b->batId,e->batId);
	/* init: set all counts to zero and calculate min/max oid */
	@:init_result(int)@
	range = max - min + 1;

	/* scan b, and calculate counts */
	if (e->htype == TYPE_void) {
		/* void lookup */
		if (b->htype == TYPE_void) {
			@:aggrX3_count(0,0,BUNfndVOID,var,&bhsb; bhsb++,BUNtloc(bn,r))@
		} else {
			@:aggrX3_count(0,0,BUNfndVOID,var,BUNhloc(b,p),BUNtloc(bn,r))@
		}
	/* e->htype == TYPE_oid */
	} else if (range > SMALL_AGGR_MAX) {
		/* hash lookup */
		if (b->htype == TYPE_void) {
			@:aggrX3_count(0,1,HASHfnd_int,loc,&bhsb; bhsb++,BUNtloc(bn,r))@
		} else {
			@:aggrX3_count(0,1,HASHfnd_int,loc,BUNhloc(b,p),BUNtloc(bn,r))@
		}
	} else {
		/* array lookup */
		if (b->htype == TYPE_void) {
			@:aggrX3_count(1,0,CHKrange,loc,&bhsb; bhsb++,&cnt[(*(int*)h)-min])@
		} else {
			@:aggrX3_count(1,0,CHKrange,loc,BUNhloc(b,p),&cnt[(*(int*)h)-min])@
		}
	}
			
	*ret = bn;
	return GDK_SUCCEED;
}

@- Size
@c
int CMDaggrX3_size(BAT **ret, BAT *b, BAT *e){
	BAT *bn = BATnew(e->htype, TYPE_int, BATcount(e));	
	int zero = 0;
	BUN p, q, r;
	int xx;

	/* init: set all sums to zero */
	bn->tsorted = bn->hsorted = 0;
	ALIGNsetH(bn, e);
	BATloopFast(e, p, q, xx) {
		BUNfastins(bn, BUNhead(e,p), &zero);
	}
	/* scan b, and add increment totals for true values */
	(void) BATprepareHash(bn);
	BATloopFast(b, p, q, xx) {
		if (*(bit*) BUNtloc(b,p) == TRUE) {
			oid *h = (oid*) BUNhead(b,p);

			BUNfndOID(r, bn, h);
			if (r) {
				int *dst = (int*) BUNtloc(bn, r);
				(*dst)++;
			}
		}
	} 
	*ret = bn;
	return GDK_SUCCEED;
}

@- Sum & Average
@c
/*	aggrX3_sum3
		e-void-head	e-oid-head	e-oid-head
		void-lookup	hash-lookup	array-lookup

	@1:	0		0		1		use sums-array?
	@2:	0		1		0		do BATprepareHash?
	@3:	BUNfndVOID	HASHfnd_int	CHKrange	lookup
	@4:	var		loc		loc		e/bn-head-access

	@5:	"BUNhloc(b,p)"  for  (oid) b-head-type,		b-head access
		"&bhsb; bhsb++" for (void) b-head-type		

	@6:		sht / int / lng / flt / dbl		b/bn-tail-type
	@7:	"loc" for fixsized b/bn-tail-type, 		b/bn-tail-access
		"var" for varsized b/bn-tail-type		(only loc used currently)

	@8:	BUNt@7(bn,r)	BUNt@7(bn,r)	&sums[(*(int*)h)-min]	
								*dst: sum in-place or in sums-array ?
*/
@= aggrX3_sum3
        ALGODEBUG THRprintf(GDKout, "aggrX3_sum3(@1,@2,@3,@4,@5,@6,@7,@8,@9);\n");
	if (@1) {
	 	/* create tmp. sums array */
		int i;
		sums = (@6*) GDKmalloc(range*sizeof(@6));
		for (i = 0; i < range; i++) sums[i] = zero;
	}
	if (@2) { (void) BATprepareHash(bn); }
	/* scan b & g, and add values to sums in-place or in sums-array */
	base = BUNindex(g, BUNfirst(g));
	offset = base - g->hseqbase;
	end = base + BATcount(g);
	bhsb = b->hseqbase;
	BATloopFast(b, p, q, xx) {
		@6 *t = (@6*) BUNt@7(b,p);
		oid v = *(oid*) @5;

		
		w = offset + v;
		@9 {
			oid *h = (oid*) BUNtloc(g, BUNptr(g, w));

			@3(r, bn, (int*)h);
			if (r) {
				@6 *dst = (@6*) @8;
				if (*dst != @6_nil) {
					if (*t == @6_nil) {	
						*dst = @6_nil;
					} else {
						*dst += *t;
					}
				} 
			}
		}
	} 
	if (@1) {
        	/* copy sums array to final result */
       		BATloopFast(bn, p, q, xx) {
			oid h = (*(oid*) BUNh@4(bn,p)) - min;
			*(@6*)BUNt@7(bn, p) = sums[h];
		}
	        GDKfree(sums);
	}
@
@c
/*	aggrX3_avg3
		e-void-head	e-oid-head	e-oid-head
		void-lookup	hash-lookup	array-lookup

	@1:	0		0		1		use sums-array?
	@2:	0		1		0		do BATprepareHash?
	@3:	BUNfndVOID	HASHfnd_int	CHKrange	lookup
	@4:	var		loc		loc		e/bn-head-access

	@5:	"BUNhloc(b,p)"  for  (oid) b-head-type,		b-head access
		"&bhsb; bhsb++" for (void) b-head-type		

	@6:		sht / int / lng / flt / dbl		b/bn-tail-type
	@7:	"loc" for fixsized b/bn-tail-type, 		b/bn-tail-access
		"var" for varsized b/bn-tail-type		(only loc used currently)

	@8:	BUNt@7(bn,r)	BUNt@7(bn,r)	&sums[(*(int*)h)-min]	
								*dst: sum in-place or in sums-array ?
	
	@9:	     BUNindex(bn,r)-off		(*(int*)h)-min	index in cnt array
*/
@= aggrX3_avg3
        ALGODEBUG THRprintf(GDKout, "aggrX3_avg3(@1,@2,@3,@4,@5,@6,@7,@8,@9);\n");
	if (@1) {
		/* create tmp. sums array */
		int i;
		sums = (@6*) GDKmalloc(range*sizeof(@6));
		for (i = 0; i < range; i++) sums[i] = zero;
	}
	if (@2) { (void) BATprepareHash(bn); }
	cnt = (int*) GDKmalloc(slots*sizeof(int));
	memset(cnt, 0, slots*sizeof(int));
	/* scan b & g, adding sums, and incrementing counts */
	base = BUNindex(g, BUNfirst(g));
	offset = base - g->hseqbase;
	end = base + BATcount(g);
	bhsb = b->hseqbase;
	BATloopFast(b, p, q, xx) {
		@6 *t = (@6*) BUNt@7(b,p);
		oid v = *(oid*) @5;
		
		w = offset + v;
		if (w >= base && w < end) {
			oid *h = (oid*) BUNtloc(g, BUNptr(g, w));

			@3(r, bn, (int*)h);
			if (r) {
				@6 *dst = (@6*) @8;
				if (*dst != @6_nil) {
					if (*t == @6_nil) {	
						*dst = @6_nil;
					} else {
						*dst += *t;
					}
					cnt[@9]++;
				} 
			}
		}
	} 
	/* postprocess by dividing sums by counts */
	if (@1) {
		/* sums in sums-array */
		BATloopFast(bn, p, q, xx) {
			oid h = (*(oid*) BUNh@4(bn,p)) - min;
			@6 *dst = (@6*) BUNt@7(bn, p);
			if (cnt[h] == 0 || sums[h] == @6_nil) {
				*dst = @6_nil;
			} else {
				*dst = sums[h]/cnt[h];
			}
		}
       		GDKfree(sums);
	} else {
		/* sums in-place */
		int yy = 0;
		BATloopFast(bn, p, q, xx) {
			@6 *dst = (@6*) BUNt@7(bn, p);
			if (cnt[yy] == 0) {
				*dst = @6_nil;
			} else if (*dst != @6_nil) {
				*dst /= cnt[yy];
			}
			yy++;
		} 
	
	}
        GDKfree(cnt);
@c

/*	arithpump3
	@6:	sht / int / lng / flt / dbl		b/bn-tail-type
	@7:	"loc" for fixsized b/bn-tail-type, 	b/bn-tail-access
		"var" for varsized b/bn-tail-type	(only loc used currently)
*/
@= arithpump3

BAT* aggrX3_sum3_@1_EarrayBvoidGvoid (BAT *bn, BAT *b, BAT *g, BAT *e, int range, int min, int max){
	@1 zero = (@1) 0, *sums;
	BUN p, q, r;
	int xx;
	oid bhsb;
	int base, offset, end, w;

        ALGODEBUG THRprintf(GDKout, "aggrX3_sum3_@1_EarrayBvoidGvoid[@2](bn=%s,b=%s,g=%s,e=%s,range=%d,min=%d,max=%d);\n",
	                             bn->batId,b->batId,g->batId,e->batId,range,min,max);
	@:aggrX3_sum3(1,0,CHKrange,loc,&bhsb; bhsb++,@1,@2,&sums[(*(int*)h)-min],)@
	
	return bn;
}

int CMDaggrX3_sum3_@1(BAT **ret, BAT *b, BAT *g, BAT *e){
	BAT *bn = BATnew(e->htype, BATttype(b), BATcount(e));	
	@1 zero = (@1) 0, *sums;
	BUN p, q, r;
	int xx;
	oid range, min, max;
	oid bhsb;
	int base, offset, end, w;

        ALGODEBUG THRprintf(GDKout, "CMDaggrX3_sum3_@1[@2](b=%s,g=%s,e=%s);\n",b->batId,g->batId,e->batId);
/*	ERRORcheck((BATcount(b)!=BATcount(g)), "CMDaggrX3_sum3_@1: BATs b & g must be of equal size.\n");	*/
	ERRORcheck((g->htype == TYPE_void) && (g->hseqbase == oid_nil), "CMDaggrX3_sum3_@1: head of BAT g must not be nil.\n");

	if((g->hseqbase == oid_nil) || (!BAThdense(g)) || (!(BAThordered(b)&1)) || (!g->hkey)) {
		return CMDaggrX3_sum_@1(ret, BATjoin(BATmirror(g),b), e);
	}

	/* init: set all sums to zero and calculate min/max oid */
	@:init_result(@1)@
	range = max - min + 1;

	/* scan b & g, and calculate sums */
	if (e->htype == TYPE_void) {
		/* void lookup */
		if (b->htype == TYPE_void) {
			if ((g->htype == TYPE_void)&&(BATcount(b)==BATcount(g))&&(b->hseqbase==g->hseqbase)) {
				@:aggrX3_sum3(0,0,BUNfndVOID,var,&bhsb; bhsb++,@1,@2,BUNt@2(bn,r),)@
			} else {
				@:aggrX3_sum3(0,0,BUNfndVOID,var,&bhsb; bhsb++,@1,@2,BUNt@2(bn,r),if (w >= base && w < end))@
			}
		} else {
			@:aggrX3_sum3(0,0,BUNfndVOID,var,BUNhloc(b,p),@1,@2,BUNt@2(bn,r),if (w >= base && w < end))@
		}
	/* e->htype == TYPE_oid */
	} else if (range > SMALL_AGGR_MAX) {
		/* hash lookup */
		if (b->htype == TYPE_void) {
			if ((g->htype == TYPE_void)&&(BATcount(b)==BATcount(g))&&(b->hseqbase==g->hseqbase)) {
				@:aggrX3_sum3(0,1,HASHfnd_int,loc,&bhsb; bhsb++,@1,@2,BUNt@2(bn,r),)@
			} else {
				@:aggrX3_sum3(0,1,HASHfnd_int,loc,&bhsb; bhsb++,@1,@2,BUNt@2(bn,r),if (w >= base && w < end))@
			}
		} else {
			@:aggrX3_sum3(0,1,HASHfnd_int,loc,BUNhloc(b,p),@1,@2,BUNt@2(bn,r),if (w >= base && w < end))@
		}
	} else {
		/* array lookup */
		if (b->htype == TYPE_void) {
			if ((g->htype == TYPE_void)&&(BATcount(b)==BATcount(g))&&(b->hseqbase==g->hseqbase)) {
				bn = aggrX3_sum3_@1_EarrayBvoidGvoid (bn, b, g, e, range, min, max);
			} else {
				@:aggrX3_sum3(1,0,CHKrange,loc,&bhsb; bhsb++,@1,@2,&sums[(*(int*)h)-min],if (w >= base && w < end))@
			}
		} else {
			@:aggrX3_sum3(1,0,CHKrange,loc,BUNhloc(b,p),@1,@2,&sums[(*(int*)h)-min],if (w >= base && w < end))@
		}
	}
			
	*ret = bn;
	return GDK_SUCCEED;
}

int CMDaggrX3_avg3_@1(BAT **ret, BAT *b, BAT *g, BAT *e){
	BAT *bn = BATnew(e->htype, BATttype(b), BATcount(e));	
	int xx, off = BUNindex(bn,BUNfirst(bn));
	int *cnt;
	oid range, min, max; 
	@1 zero = (@1) 0, *sums, slots;
	BUN p, q, r;
	oid bhsb;
  	int base, offset, end, w;
  	
        ALGODEBUG THRprintf(GDKout, "CMDaggrX3_avg3_@1[@2](b=%s,g=%s,e=%s);\n",b->batId,g->batId,e->batId);
/*	ERRORcheck((BATcount(b)!=BATcount(g)), "CMDaggrX3_avg3_@1: BATs b & g must be of equal size.\n");	*/
	ERRORcheck((g->htype == TYPE_void) && (g->hseqbase == oid_nil), "CMDaggrX3_avg3_@1: head of BAT g must not be nil.\n");

	if((g->hseqbase == oid_nil) || (!BAThdense(g)) || (!(BAThordered(b)&1)) || (!g->hkey)) {
		return CMDaggrX3_avg_@1(ret, BATjoin(BATmirror(g),b), e);
	}

	/* init: set all sums & counts to zero and calculate min/max oid */
	@:init_result(@1)@
	range = max - min + 1;

	/* scan b & g, calculate sums & counts, derive averages */
	if (e->htype == TYPE_void) {
		/* void lookup */
		slots = BATcount(e);
		if (b->htype == TYPE_void) {
			@:aggrX3_avg3(0,0,BUNfndVOID,var,&bhsb; bhsb++,@1,@2,BUNt@2(bn,r),BUNindex(bn,r)-off)@
		} else {
			@:aggrX3_avg3(0,0,BUNfndVOID,var,BUNhloc(b,p),@1,@2,BUNt@2(bn,r),BUNindex(bn,r)-off)@
		}
	/* e->htype == TYPE_oid */
	} else if (range > SMALL_AGGR_MAX) {
		/* hash lookup */
		slots = BATcount(e);
		if (b->htype == TYPE_void) {
			@:aggrX3_avg3(0,1,HASHfnd_int,loc,&bhsb; bhsb++,@1,@2,BUNt@2(bn,r),BUNindex(bn,r)-off)@
		} else {
			@:aggrX3_avg3(0,1,HASHfnd_int,loc,BUNhloc(b,p),@1,@2,BUNt@2(bn,r),BUNindex(bn,r)-off)@
		}
	} else {
		/* array lookup */
		slots = range;
		if (b->htype == TYPE_void) {
			@:aggrX3_avg3(1,0,CHKrange,loc,&bhsb; bhsb++,@1,@2,&sums[(*(int*)h)-min],(*(int*)h)-min)@
		} else {
			@:aggrX3_avg3(1,0,CHKrange,loc,BUNhloc(b,p),@1,@2,&sums[(*(int*)h)-min],(*(int*)h)-min)@
		}
	}

	*ret = bn;
	return GDK_SUCCEED;
}
@c
@:arithpump3(sht,loc)@
@:arithpump3(int,loc)@
@:arithpump3(lng,loc)@
@:arithpump3(flt,loc)@
@:arithpump3(dbl,loc)@

@- "Extremes" (Min & Max)
@c
/*	aggrX3_minmax3
		e-void-head	e-oid-head	e-oid-head
		void-lookup	hash-lookup	array-lookup

	@1:	</>		</>		</>		compare operator: <(min) or >(max)
	@2:	0		1		0		do BATprepareHash?
	@3:	BUNfndVOID	HASHfnd_int	CHKrange	lookup
	@4:	var		loc		loc		e/bn-head-access

	@5:	"BUNhloc(b,p)" for  (oid) b-head-type,		b-head access
		"&bhsb; bhsb++" for (void) b-head-type		

	@6:		chr / sht / int / lng / any		b/bn-tail-storage-type
	@7:	"loc" for fixsized b/bn-tail-type, 		b/bn-tail-access
		"var" for varsized b/bn-tail-type

	@8:	     BUNindex(bn,r)-off		(*(int*)h)-min	index in extremes array
*/
@= aggrX3_minmax3
	ALGODEBUG THRprintf(GDKout, "aggrX3_minmax(@1,@2,@3,@4,@5,@6,@7,@8);\n");
	if (@2) { (void) BATprepareHash(e); }
	/* init: create extremes and set all to the zero pointer */
	extremes = (ptr*) GDKmalloc(slots*sizeof(ptr));
	memset(extremes, 0, slots*sizeof(ptr));
	/* scan b & g and replace totals by the extreme value (just pointers to vals in b) */
	base = BUNindex(g, BUNfirst(g));
	offset = base - g->hseqbase;
	end = base + BATcount(g);
	bhsb = b->hseqbase;
	BATloopFast(b, p, q, xx) {
		ptr t = BUNt@7(b,p);
		oid v = *(oid*) @5;
		
		w = offset + v;
		if (w >= base && w < end) {
			oid *h = (oid*) BUNtloc(g, BUNptr(g, w));

			@3(r, bn, (int*)h);
			if (r) {
				ptr *val = &extremes[@8];
				if (*val != nil) {
					if ((*cmp)(t,nil) == 0) {	
						*val = nil;
					} else if (*val == NULL || (*cmp)(t,*val) @1 0) {
						*val = t;
					}
				} 
			}
		}
	} 
	/* insert the extreme values into the result */
	BATloopFast(bn, r, q, xx) {
		oid *h = (oid*)BUNh@4(bn,r);
		ptr val = extremes[@8];
		/* trick: using a void head-type, only the tail are (over)written */
		void@6_bunfastins_nocheck_noinc(bn, r, h, val?val:nil);
	} 
        GDKfree(extremes);
@c

/*	extreme_typed
	@1:	min/max
	@2:	 < / >
	@3:	b/bn-tail-storage-type			chr/sht/int/lng/any
	@7:	"loc" for fixsized b/bn-tail-type, 	b/bn-tail-access
		"var" for varsized b/bn-tail-type
*/
@= extreme3_typed
int aggrX3_@13_@3_@4(BAT **ret, BAT *b, BAT *g, BAT *e){
	BAT *bn = BATnew(e->htype, BATttype(b), BATcount(e));	
	int (*cmp)(ptr,ptr) = BATatoms[bn->ttype].atomCmp;
	ptr nil = ATOMnilptr(bn->ttype), zero = nil;
	int xx, off = BUNindex(e,BUNfirst(e));
	ptr *extremes;
	BUN p, q, r;
	oid range, min, max;
	size_t slots;
	oid bhsb;
  	int base, offset, end, w;

	ALGODEBUG THRprintf(GDKout, "aggrX3_@1_@3_@4[@2](b=%s,g=%s,e=%s);\n",b->batId,g->batId,e->batId);
/*	ERRORcheck((BATcount(b)!=BATcount(g)), "aggrX3_@13_@3_@4: BATs b & g must be of equal size.\n");	*/
	ERRORcheck((g->htype == TYPE_void) && (g->hseqbase == oid_nil), "aggrX3_@13_@3_@4: head of BAT g must not be nil.\n");

	if((g->hseqbase == oid_nil) || (!BAThdense(g)) || (!(BAThordered(b)&1)) || (!g->hkey)) {
		return aggrX3_@1_@3_@4(ret, BATjoin(BATmirror(g),b), e);
	}

      	/* init: prepare the result bat; 
	 * trick: by using "tail-type" void, we only write the head column, here */
	@:init_result(void)@
	range = max - min + 1;

	/* scan b & g and replace totals by the extreme value (just pointers to vals in b) */
	slots = BATcount(e);
	if (e->htype == TYPE_void) {
		/* void lookup */
		if (b->htype == TYPE_void) {
			@:aggrX3_minmax3(@2,0,BUNfndVOID,var,&bhsb; bhsb++,@3,@4,BUNindex(bn,r)-off)@
		} else {
			@:aggrX3_minmax3(@2,0,BUNfndVOID,var,BUNhloc(b,p),@3,@4,BUNindex(bn,r)-off)@
		}
	/* e->htype == TYPE_oid */
	} else if (range > SMALL_AGGR_MAX) {
		/* hash lookup */
		if (b->htype == TYPE_void) {
			@:aggrX3_minmax3(@2,1,HASHfnd_int,loc,&bhsb; bhsb++,@3,@4,BUNindex(bn,r)-off)@
		} else {
			@:aggrX3_minmax3(@2,1,HASHfnd_int,loc,BUNhloc(b,p),@3,@4,BUNindex(bn,r)-off)@
		}
	} else {
		/* array lookup */
		slots = range;
		if (b->htype == TYPE_void) {
			@:aggrX3_minmax3(@2,0,CHKrange,loc,&bhsb; bhsb++,@3,@4,(*(int*)h)-min)@
		} else {
			@:aggrX3_minmax3(@2,0,CHKrange,loc,BUNhloc(b,p),@3,@4,(*(int*)h)-min)@
		}
	}
			
	*ret = bn;
	return GDK_SUCCEED;
}
@c
/*	extreme
	@1:	min/max
	@2:	 < / >
*/
@= extreme3
@:extreme3_typed(@1,@2,chr,loc)@
@:extreme3_typed(@1,@2,sht,loc)@
@:extreme3_typed(@1,@2,int,loc)@
@:extreme3_typed(@1,@2,lng,loc)@
@:extreme3_typed(@1,@2,any,loc)@
@:extreme3_typed(@1,@2,any,var)@

int CMDaggrX3_@13(BAT **ret, BAT *b, BAT *g, BAT *e){
	int rtrn, tt = ATOMstorage(b->ttype);
	ALGODEBUG THRprintf(GDKout, "CMDaggrX3_@1[@2](b=%s,g=%s,e=%s);\n",b->batId,g->batId,e->batId);
/*	ERRORcheck((BATcount(b)!=BATcount(g)), "aggrX3_@13: BATs b & g must be of equal size.\n");	*/
	ERRORcheck((g->htype == TYPE_void) && (g->hseqbase == oid_nil), "aggrX3_@13: head of BAT g must not be nil.\n");

	if((g->hseqbase == oid_nil) || (!BAThdense(g)) || (!(BAThordered(b)&1)) || (!g->hkey)) {
		return CMDaggrX3_@1(ret, BATjoin(BATmirror(g),b), e);
	}

	if (tt == TYPE_chr) {
		rtrn = aggrX3_@13_chr_loc(ret, b, g, e);
	} else if (tt == TYPE_sht) {
		rtrn = aggrX3_@13_sht_loc(ret, b, g, e);
	} else if (b->ttype != TYPE_bat && (tt == TYPE_int || tt == TYPE_flt)) {
	        /* ensure use of ATOMput for TYPE_bat */
		rtrn = aggrX3_@13_int_loc(ret, b, g, e);
	} else if (tt == TYPE_dbl || tt == TYPE_lng) {
		rtrn = aggrX3_@13_lng_loc(ret, b, g, e);
	} else if (b->hvarsized) {
		rtrn = aggrX3_@13_any_var(ret, b, g, e);
	} else {
		rtrn = aggrX3_@13_any_loc(ret, b, g, e);
	}
	return rtrn;
}
@c
@:extreme3(min,<)@
@:extreme3(max,>)@

@- Count
@c
/*	aggrX3_count3
		e-void-head	e-oid-head	e-oid-head
		void-lookup	hash-lookup	array-lookup

	@1:	0		0		1		use cnt-array?
	@2:	0		1		0		do BATprepareHash?
	@3:	BUNfndVOID	HASHfnd_int	CHKrange	lookup
	@4:	var		loc		loc		e/bn-head-access

	@5:	"BUNhloc(b,p)" for  (oid) b-head-type,		b-head access
		"&bhsb; bhsb++" for (void) b-head-type		

	@6:	BUNtloc(bn,r)	BUNtloc(bn,r)	&cnt[(*(int*)h)-min]	
								*dst: count in-place or in cnt-array ?
*/
@= aggrX3_count3
        ALGODEBUG THRprintf(GDKout, "aggrX3_count3(@1,@2,@3,@4,@5,@6);\n");
	if (@1) {
	 	/* create tmp. cnt array */
		cnt = (int*) GDKmalloc(range*sizeof(int));
		memset(cnt, 0, range*sizeof(int));
	}
	if (@2) { (void) BATprepareHash(bn); }
	/* scan b & g, and increment counts in-place or in cnt-array */
	base = BUNindex(g, BUNfirst(g));
	offset = base - g->hseqbase;
	end = base + BATcount(g);
	bhsb = b->hseqbase;
	btt = b->ttype;
	switch(ATOMstorage(btt)) {
	 case TYPE_chr:	@:aggrX3_count3_loop(@1,@2,@3,@4,@5,@6,simple_EQ(BUNtloc(b,p),bt_nil,chr))@
	 case TYPE_sht:	@:aggrX3_count3_loop(@1,@2,@3,@4,@5,@6,simple_EQ(BUNtloc(b,p),bt_nil,sht))@
	 case TYPE_int:	@:aggrX3_count3_loop(@1,@2,@3,@4,@5,@6,simple_EQ(BUNtloc(b,p),bt_nil,int))@
	 case TYPE_lng:	@:aggrX3_count3_loop(@1,@2,@3,@4,@5,@6,simple_EQ(BUNtloc(b,p),bt_nil,lng))@
	 case TYPE_flt:	@:aggrX3_count3_loop(@1,@2,@3,@4,@5,@6,simple_EQ(BUNtloc(b,p),bt_nil,flt))@
	 case TYPE_dbl:	@:aggrX3_count3_loop(@1,@2,@3,@4,@5,@6,simple_EQ(BUNtloc(b,p),bt_nil,dbl))@
	 default: if (b->tvarsized) {
			@:aggrX3_count3_loop(@1,@2,@3,@4,@5,@6,atom_EQ(BUNtvar(b,p),bt_nil,btt))@
		  } else {
		 	@:aggrX3_count3_loop(@1,@2,@3,@4,@5,@6,atom_EQ(BUNtloc(b,p),bt_nil,btt))@
		  }
	}
	if (@1) {
        	/* copy cnt array to final result */
       		BATloopFast(bn, p, q, xx) {
			oid h = (*(oid*) BUNh@4(bn,p)) - min;
			*(int*)BUNtloc(bn, p) = cnt[h];
		}
	        GDKfree(cnt);
	}
@c
/*	aggrX3_count3_loop
	@7:	atom_EQ(BUNt{loc,var}(b,p),bt_nil,btt)		b-tail nil check
		simple_EQ(BUNtloc(b,p),bt_nil,{chr,sht,int,flt,lng,dbl})
*/
@= aggrX3_count3_loop
	BATloopFast(b, p, q, xx) {
		oid v = *(oid*) @5;
		
		w = offset + v;
		if (w >= base && w < end) {
			oid *h = (oid*) BUNtloc(g, BUNptr(g, w));

			@3(r, bn, (int*)h);
			if (r) {
				if (!@7) {
					int *dst = (int*) @6;
					(*dst)++;
				}
			}
		}
	} 
	break;
@c
int CMDaggrX3_count3(BAT **ret, BAT *b, BAT* g, BAT *e){
	BAT *bn = BATnew(e->htype, TYPE_int, BATcount(e));	
	int zero = 0, *cnt;
	BUN p, q, r;
	int xx;
	oid range, min, max;
	oid bhsb;
  	int base, offset, end, w;
  	int btt;
	ptr bt_nil = ATOMnilptr(b->ttype);

        ALGODEBUG THRprintf(GDKout, "CMDaggrX3_count3(b=%s,g=%s,e=%s);\n",b->batId,g->batId,e->batId);
/*	ERRORcheck((BATcount(b)!=BATcount(g)), "CMDaggrX3_count3: BATs b & g must be of equal size.\n");	*/
	ERRORcheck((g->htype == TYPE_void) && (g->hseqbase == oid_nil), "CMDaggrX3_count3: head of BAT g must not be nil.\n");

	if((g->hseqbase == oid_nil) || (!BAThdense(g)) || (!(BAThordered(b)&1)) || (!g->hkey)) {
		return CMDaggrX3_count(ret, BATjoin(BATmirror(g),b), e);
	}

	/* init: set all counts to zero and calculate min/max oid */
	@:init_result(int)@
	range = max - min + 1;

	/* scan b & g, and calculate counts */
	if (e->htype == TYPE_void) {
		/* void lookup */
		if (b->htype == TYPE_void) {
			@:aggrX3_count3(0,0,BUNfndVOID,var,&bhsb; bhsb++,BUNtloc(bn,r))@
		} else {
			@:aggrX3_count3(0,0,BUNfndVOID,var,BUNhloc(b,p),BUNtloc(bn,r))@
		}
	/* e->htype == TYPE_oid */
	} else if (range > SMALL_AGGR_MAX) {
		/* hash lookup */
		if (b->htype == TYPE_void) {
			@:aggrX3_count3(0,1,HASHfnd_int,loc,&bhsb; bhsb++,BUNtloc(bn,r))@
		} else {
			@:aggrX3_count3(0,1,HASHfnd_int,loc,BUNhloc(b,p),BUNtloc(bn,r))@
		}
	} else {
		/* array lookup */
		if (b->htype == TYPE_void) {
			@:aggrX3_count3(1,0,CHKrange,loc,&bhsb; bhsb++,&cnt[(*(int*)h)-min])@
		} else {
			@:aggrX3_count3(1,0,CHKrange,loc,BUNhloc(b,p),&cnt[(*(int*)h)-min])@
		}
	}
			
	*ret = bn;
	return GDK_SUCCEED;
}

@}
@}
