#!/bin/bash

PATH=/cwi/bin:/usr/local/gnu/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH

THISPATH=${0%/*}
THISFILE=${0##*/}
CHILD=$$
PARENT=""
LOCKFILE="$$"
while [ "${1#-}" != "$1" ] ; do
  if      [ "$1" =       -l   ] ; then  LOCKFILE="$2"      ; shift ; shift
    elif  [ "$1" != "${1#-l}" ] ; then  LOCKFILE="${1#-l}" ; shift 
    elif  [ "$1" =       -p   ] ; then  PARENT="$2"        ; shift ; shift
    elif  [ "$1" != "${1#-p}" ] ; then  PARENT="${1#-p}"   ; shift 
  fi
done
LOCKFILE=/tmp/.${0##*/}.$LOCKFILE

files="`ls -d $* 2>/dev/null`"

if [ ! "$files" ] ; then  exit 0 ; fi

sync ; while [ -f $LOCKFILE ] ; do sleep 9 ; done
touch $LOCKFILE

function  LOG1  () { prompt="\n# `date +%H:%M:%S` >  " ; echo -en "$prompt$prompt$*$prompt\n\n" ; }
function  LOG2  () {  LOG1 $* ; LOG1 $* >&2 ; }
function  LOG2x () {  LOG2 $* ; "$@" ; }

cpids=""
if [ "$PARENT" ] ; then
  cpids="`ps -ef | egrep '^ *[a-zA-Z0-9_]+ +[0-9]+ +'"$PARENT"' ' | egrep -v '^ *[a-zA-Z0-9_]+ +'"$CHILD"' +[0-9]+ ' | sort +4.0 | awk '{printf  "%s " , $2}' | perl -pe 's|  *$||'`"
  if [ "$cpids" ] ; then
#	KIDS="`echo "($cpids)" | perl -pe 's/ /|/g'`"
#	gpids="`ps -ef | egrep '^ *[a-zA-Z0-9_]+ +[0-9]+ +'"$KIDS"' ' | egrep -v '^ *[a-zA-Z0-9_]+ +'"$CHILD"' +[0-9]+ ' | sort +4.0 | awk '{printf  "%s " , $2}' | perl -pe 's|  *$||'`"
#	if [ "$gpids" ] ; then
#		cpids="$cpids $gpids"
#	fi
	cpids="$cpids "
  fi
fi

BINPATH="$THISPATH"
if [    "$MONET_PREFIX" ] ; then BINPATH="$BINPATH    $MONET_PREFIX/bin" ; fi
if [     "$ACOI_PREFIX" ] ; then BINPATH="$BINPATH     $ACOI_PREFIX/bin" ; fi
if [      "$SQL_PREFIX" ] ; then BINPATH="$BINPATH      $SQL_PREFIX/bin" ; fi
if [      "$XML_PREFIX" ] ; then BINPATH="$BINPATH      $XML_PREFIX/bin" ; fi
if [      "$GIS_PREFIX" ] ; then BINPATH="$BINPATH      $GIS_PREFIX/bin" ; fi
if [     "$MISQ_PREFIX" ] ; then BINPATH="$BINPATH     $MISQ_PREFIX/bin" ; fi
if [    "$TIMES_PREFIX" ] ; then BINPATH="$BINPATH    $TIMES_PREFIX/bin" ; fi
if [  "$PLAYPEN_PREFIX" ] ; then BINPATH="$BINPATH  $PLAYPEN_PREFIX/bin" ; fi
if [ "$TEMPLATE_PREFIX" ] ; then BINPATH="$BINPATH $TEMPLATE_PREFIX/bin" ; fi
if [    "$MONET_BUILD" ] ; then BINPATH="$BINPATH    $MONET_BUILD/src/tools    $MONET_BUILD/src/tools/.libs" ; fi
if [     "$ACOI_BUILD" ] ; then BINPATH="$BINPATH     $ACOI_BUILD/src/tools     $ACOI_BUILD/src/tools/.libs" ; fi
if [      "$SQL_BUILD" ] ; then BINPATH="$BINPATH      $SQL_BUILD/src/tools      $SQL_BUILD/src/tools/.libs" ; fi
if [      "$XML_BUILD" ] ; then BINPATH="$BINPATH      $XML_BUILD/src/tools      $XML_BUILD/src/tools/.libs" ; fi
if [      "$GIS_BUILD" ] ; then BINPATH="$BINPATH      $GIS_BUILD/src/tools      $GIS_BUILD/src/tools/.libs" ; fi
if [     "$MISQ_BUILD" ] ; then BINPATH="$BINPATH     $MISQ_BUILD/src/tools     $MISQ_BUILD/src/tools/.libs" ; fi
if [    "$TIMES_BUILD" ] ; then BINPATH="$BINPATH    $TIMES_BUILD/src/tools    $TIMES_BUILD/src/tools/.libs" ; fi
if [  "$PLAYPEN_BUILD" ] ; then BINPATH="$BINPATH  $PLAYPEN_BUILD/src/tools  $PLAYPEN_BUILD/src/tools/.libs" ; fi
if [ "$TEMPLATE_BUILD" ] ; then BINPATH="$BINPATH $TEMPLATE_BUILD/src/tools $TEMPLATE_BUILD/src/tools/.libs" ; fi
for b in $BINPATH ; do
	files="$files `ls $b/* 2>/dev/null | egrep -v '/(M[a-z]*\.py(|\.bat)|'"$THISFILE"')$'`"
done

case `uname` in
  Linux)
	pids1="`fuser $files | cut -d: -f2- | perl -pe 's|[a-z]||g'`"
	if [ "$PARENT" ] ; then
		pids1="`echo "$pids1" | perl -pe 's| *'$PARENT'||g'`"
	fi
	pids1="$cpids$pids1"
	PS="ps -f $pids1"
	FUSER="fuser -v"
	;;
  IRIX|IRIX64)
  	pids0="`fuser -q $files`"
	if [ "$PARENT" ] ; then
		pids0="`echo "$pids0" | perl -pe 's|,*'$PARENT'||g'`"
	fi
	pids0="`echo $cpids | perl -pe 's| |,|g'`$pids0"
  	pids1="`echo $pids0 | perl -pe 's|,| |g'`"
	PS="ps -fp $pids0"
	FUSER="fuser"
	;;
  SunOS)
	pids1="`fuser $files 2>/dev/null`"
	if [ "$PARENT" ] ; then
		pids1="`echo "$pids1" | perl -pe 's| *'$PARENT'||g'`"
	fi
	pids1="$cpids$pids1"
	pids0="`echo $pids1 | perl -pe 's| |,|g'`"
	PS="ps -fp $pids0"
	FUSER="fuser"
	;;
# CYGWIN32_NT)
#	;;
esac

if [ "$pids1" ] ; then
	pids2="(`echo $pids1 | perl -pe 's/ /|/g'`)"
	echo PARENT=$PARENT
	echo CHILD=$CHILD
	echo files=$files
	echo cpids=$cpids
	echo pids1=$pids1
	echo pids2=$pids2
	LOG2x	$PS
	LOG2x	$FUSER   $files
	#LOG2x	fuser -k $files
	LOG2x	kill     $pids1
	if [ "$cpids" ] ; then
		sleep 3
		LOG2x   kill $cpids
	fi
	sleep 4
	if [ "`( ps -ef | egrep -w "$pids2" | egrep -v egrep ) 2>/dev/null`" ] ; then
		LOG2x	kill -9 $pids1
	fi
fi

rm -f $LOCKFILE
