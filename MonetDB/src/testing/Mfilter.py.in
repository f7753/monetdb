#!/usr/bin/env python

# The contents of this file are subject to the MonetDB Public
# License Version 1.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of
# the License at 
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
# 
# Software distributed under the License is distributed on an "AS
# IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
# implied. See the License for the specific language governing
# rights and limitations under the License.
# 
# The Original Code is the Monet Database System.
# 
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-2002 CWI.  
# All Rights Reserved.
# 
# Contributor(s):
# 		Martin Kersten <Martin.Kersten@cwi.nl>
# 		Peter Boncz <Peter.Boncz@cwi.nl>
# 		Niels Nes <Niels.Nes@cwi.nl>
# 		Stefan Manegold  <Stefan.Manegold@cwi.nl>

import sys
import os
import getopt
import re
import fileinput
import string
import time

#############################################################################
#       FUNCTIONS

def Usage(THISFILE) :
    print """

Usage:  %s [-I<exp>] <files>

-I<exp> : ignore lines matching <exp> during first count (optional, default: -I'^#`)
<files> : list of files to be processed

""" % THISFILE
### Usage(THISFILE) #

def Warn(THISFILE,TEXT) :
    sys.stderr.write("%s warning: %s\n" % (THISFILE,TEXT))
### Warn(THISFILE,TEXT) #

def wlen(str) :
    return len(string.join(string.split(str)))
### wlen(str) #

test = (
        re.compile( r"^module\(mprof\);$"                                            "|"
                    r'^pm([BE]\("(global_.+|[a-zA-Z0-9_]+[0-9])"\)|Summary\(\));$'   "|"
                    r'^printf\("#~BeginProfilingOutput~#\\n"\);$'                    "|"
                    r"^Mdestroydb: processing database ..*. in "                     "|"
                    r"^Mcreatedb: processing database ..*. in "                      "|"
                    r"^Mcreatedb: using default dbdir "                              "|"
                    r"^Mcreatedb: calling .Mserver .*-db .* for the first time..$"   "|"
                    r"^Mcreatedb: database .* has been initialized succesfully!$"    "|"
                    r"^!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock.$" "|"
                    r"^!WARNING: BBPdir: initializing BBP.$"                         "|"
                    r"^connection= .*:[0-9]*$"                                       "|"
                    r"^Connecting to server: localhost:[0-9]*$"                      "|"
                    r"^server listening on port [0-9]*$",
                    re.MULTILINE),
        re.compile( r"^!ERROR: DL_open: Unknown error.$"                             "|"
                    r"^!ERROR: DL_open: library not found \(STATIC\).$",
                    re.MULTILINE),
        re.compile( r"^!ERROR: TBL_loadmod: module load .* cancelled.$",
                    re.MULTILINE),
        re.compile( r"^!ERROR: module\(.*\): load error.$",
##                    r"^!WARNING: TCPlisten\([0-9]*\): stopped.$"                     "|"
##                    r"^!WARNING: TCPepilogue: terminate [01] listeners$"             "|"
                    re.MULTILINE)

        )

def mFilter (FILE, IGNORE) :
    fin = open(FILE, "r")
    LINE = fin.readline()
    while  len(LINE)  and  ( len(LINE) < 15  or  LINE[:15] not in ("stdout of test ", "stderr of test ") ):
        LINE = fin.readline()
    fin.close()
    if  len(LINE) >= 15  and  LINE[:15] in ("stdout of test ", "stderr of test "):
        WHAT, TST, TSTDIR = re.search("^std(out|err) of test .(.*). in directory .(.*). itself:", LINE, re.MULTILINE).groups()
    else:
        WHAT, TST, TSTDIR = "", "", ""


    ftmp = []
    ig = n = 0
    il = iw = ic = al = aw = ac = 0
    for iline in fileinput.input(FILE):
        oline = xline = ""
        if iline == "#~BeginVariableOutput~#\n"  or  iline == "#~BeginProfilingOutput~#\n":
            ig = 1
            n = 0
        if ig  and  ( len(iline) == 0  or  iline[0] != "!" ):
            oline = "#~ " + iline
            n = n + 1
        elif test[0].match(iline):
            oline = "#~ " + iline
        elif len(ftmp) > 2              and \
             test[3].match(iline)       and \
             test[2].match(ftmp[-1])    and \
             test[1].match(ftmp[-2]):
            oline = iline
            for i in -1, -2:
                w = len(string.split(ftmp[i]))
                c = wlen(ftmp[i])
                il = il - 1
                iw = iw - w
                ic = ic - c
                ftmp[i] = "#~ " + ftmp[i]
        #TODO
        # properly solve this "hack" to make diff on NT ignore so-called
        # empty lines which actually contain a '\r'
        elif iline == os.linesep  or  iline == "\n":
            oline = "#" + iline
        else:
            oline = iline
        if iline == "#~EndVariableOutput~#\n":
            ig = 0
            xline = "~ " + str(n) + " ~\n"
        if iline == "#~EndProfilingOutput~#\n":
            ig = 0
        for ln in oline, xline:
            if len(ln):
                w = len(string.split(ln))
                c = wlen(ln)
                if ln != os.linesep  and  \
                   not re.match(IGNORE,ln, re.MULTILINE):
                    il = il + 1
                    iw = iw + w
                    ic = ic + c
                al = al + 1
                aw = aw + w
                ac = ac + c
                ftmp.append(ln)

    fout = open(FILE + ".FILTERED", "w")
    if (al > 0) or (aw > 0) or (ac >0):
        fout.write("Statistics about std"+WHAT+" of test '"+TST+"` in directory '"+TSTDIR+"`:\n")
        fout.write("  %9d lines, %9d words, %9d chars   in lines not matching '%s|^$`\n" % (il,iw,ic,IGNORE))
        fout.write("# %9d lines, %9d words, %9d chars   in all lines\n" % (al,aw,ac))
        fout.write("\n")
        for ln in ftmp:
            fout.write(ln)
        fout.flush()
    fout.close()
    if os.name == "nt":
        time.sleep(1)
### mFilter (FILE, IGNORE) #

#############################################################################
#       MAIN

def main(argv) :
    THISFILE = os.path.basename(argv[0])
    try:
        opts, args = getopt.getopt(argv[1:], "?hI:", ["help"])
    except getopt.GetoptError:
        Usage(THISFILE)
        sys.exit(1)

    IGNORE = "^#"
    for o, a in opts:
        if o in ("-?", "-h", "--help"):
            Usage(THISFILE)
            sys.exit(0)
        if o == "-I":
            IGNORE = a

    for f in args:
        if os.path.isfile(f):
            mFilter(f, IGNORE)
        else:
            Warn(THISFILE, "file missing: " + f)
### main(argv) #

if __name__ == "__main__":
    main(sys.argv)

#       END
#############################################################################
