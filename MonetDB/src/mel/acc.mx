@f acc
@a Niels Nes

@h 
#ifndef _ACC_H_
#define _ACC_H_

#include "ops.h"
#include "list.h"

class Acc : public Symbol {
    public:
	Acc( int t, char *n, 
	      List *args = NULL,
	      Ops **cmds = NULL ); 

	List *args() const;
	Ops **cmds() const;

	virtual ostream &print( language *l, ostream &o ) const ;
    private:
    	void set_arg_names( const char * base );
	List *_args;
	Ops **_cmds;
};
#endif 

@C
#include "acc.h"
#include "ListIterator.h"
#include "language.h"
#include <string.h>

Acc::Acc( int t, char *n, List *args, Ops **cmds ) : 
   	Symbol(t,n) {
	_args = args;
	set_arg_names( "Atom" );
	_cmds = cmds;
}


void Acc::set_arg_names( const char *base ){
   	if (!_args)
	   	return;
   	int arg_nr = 0;
	char *name = new char [strlen(base) + 4];
	ListIterator *iter = _args->iterator();
	Symbol *s = NULL;
	while(iter->next((void*)s)){
		if (!s->Name()){
			sprintf( name,"%s%d", base, arg_nr);
			s->Name( name );
		}
		arg_nr++;
	}
	delete(name);
}

List *Acc::args() const {
	return _args;
}

Ops **Acc::cmds() const {
	return _cmds;
}

ostream &Acc::print( language *l, ostream &o ) const {
	return l->gen_acc( o, *this );
}
