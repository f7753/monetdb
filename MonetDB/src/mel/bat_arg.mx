@f bat_arg
@a Niels Nes

@h
#ifndef _BATARG_H_
#define _BATARG_H_

#include "symbol.h"
#include "list.h"
#include "type_arg.h"


class BatArg : public Arg {
    public:
	BatArg( int t, char *n, const Arg *atom1, const Arg *atom2 ); 

	const Arg *atom1() const;
	const Arg *atom2() const;

	int isFixed() const;
	virtual const char *toString() const; 
	virtual ostream &print( language *l, ostream &o ) const ;
    private:
	const Arg *_atom1;
	const Arg *_atom2;
};
#endif // _BATARG_H_

@C
#include "bat_arg.h"
#include "language.h"
#include <string.h>


BatArg::BatArg( int t, char *n, const Arg *atom1, const Arg *atom2 ) 
   	: Arg(t,n) {
	_atom1 = atom1;
	_atom2 = atom2;
}

const Arg *BatArg::atom1() const {
	return _atom1;
}

const Arg *BatArg::atom2() const {
	return _atom2;
}


int BatArg::isFixed() const {
	return 0;
}

const char *BatArg::toString( ) const {
	return "BAT"; 
}

ostream &BatArg::print( language *l, ostream &o ) const {
	return l->gen_bat_arg( o, *this );
}
