@f symbol
@a Niels Nes

@h
#ifndef _SYMBOL_H_
#define _SYMBOL_H_

#include  <iostream.h>
#include  <stdio.h>
#include  "list.h"

class language;
class Symbol {
    public:
	Symbol( int token, const char *name );
	virtual ~Symbol();

	int operator==(const Symbol &) const;
	int Token() const;
	const char *Name() const;
        virtual const char *toString() const;
	void Name( const char * name);
	virtual ostream &print( language *l, ostream &) const;
    private:
	int   _token;
	char *_name;
};

#endif // _SYMBOL_H_

@C
#include "symbol.h"
#include "mel.h"
#include "language.h"
#include <string.h>

Symbol::Symbol( int token, const char *name )
{
	_token = token;
	if (name) 
	   _name = strdup(name);
	else 
	   _name = NULL;
}

Symbol::~Symbol()
{
   	if (_name)
		delete(_name);
}

int Symbol::operator==( const Symbol &s ) const {
	if (_token != s._token){
		return 0;
	} 
	if (strcmp(_name, s._name) != 0){
		return 0;
	}
	return 1;
}

int Symbol::Token() const {
	return _token;
}

const char *Symbol::Name() const {
	return _name;
}

const char *Symbol::toString() const {
	return _name;
}

void Symbol::Name( const char *name ) {
   	if (_name)
   		delete(_name);
	_name = NULL;
	if (name)
		_name = strdup(name);
}

ostream &Symbol::print( language *l, ostream & o ) const {
	return l->gen_symbol( o, *this );
}

