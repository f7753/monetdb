@f monet_utils
@a N.J. Nes
@* utils 
@T
The monet utils contains all general functionality needed by both clients and
server. 

@h
#ifndef _MU_H_
#define _MU_H_

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#if (defined(WIN32) && (!defined(__CYGWIN__)) && (!defined(__CYGWIN32__)))
#ifndef NATIVE_WIN32
# define NATIVE_WIN32 1
#endif
#endif

#ifdef _MSC_VER
#ifndef LIBMUTILS
#define mutils_export extern __declspec(dllimport) 
#else
#define mutils_export extern __declspec(dllexport) 
#endif
#else
#define mutils_export extern 
#endif

#ifdef NATIVE_WIN32
#define DIR_SEP '\\' 
#define DIR_SEP_STR "\\" 
#define PATH_SEP ';'
#define PATH_SEP_STR ";"
#define SO_EXT ".dll"
#else
#define DIR_SEP '/' 
#define DIR_SEP_STR "/" 
#define PATH_SEP ':'
#define PATH_SEP_STR ":"
#define SO_EXT ".so"
#endif

#define SLASH_2_DIR_SEP(s) {char *t; for(t=strchr(s, (int)'/'    ); t; t=strchr(t+1, (int)'/'    )) *t=DIR_SEP;}
#define DIR_SEP_2_SLASH(s) {char *t; for(t=strchr(s, (int)DIR_SEP); t; t=strchr(t+1, (int)DIR_SEP)) *t='/'    ;}

@- vsnprintf, snprintf, strcasecmp
@h
#ifndef HAVE_VSNPRINTF
#define vsnprintf(buf,size,format,ap) vsprintf(buf,format,ap)
#endif

#ifndef HAVE_SNPRINTF
#define snprintf(buf,size,format,ap) sprintf(buf,format,ap)
#endif

#ifndef HAVE_STRCASECMP
#define strcasecmp(x,y) stricmp(x,y)
#endif

#ifdef HAVE_NETDB_H
# include <netinet/in.h> 
# include <netdb.h> 
#endif

#include <stdio.h>      /* NULL, printf etc. */
#include <stdlib.h>     
#include <errno.h> 
#include <stdarg.h>     /* va_alist.. */

/* AIX requires this to be the first thing in the file.  */
#ifndef __GNUC__
# if HAVE_ALLOCA_H
#  include <alloca.h>
# else
#  ifdef _AIX
#pragma alloca
#  else
#   ifndef alloca /* predefined by HP cc +Olibcalls */
char *alloca ();
#   endif
#  endif
# endif
#endif

@T
When using alloca(3) in a shared library, Intel's "C++ Compiler for 32-bit
applications, Version 5.0.1 Beta Build 010528D0" seems to require another
reference to alloca(3) in the file that contains the main(), otherwise it
complains about an "undefined reference to `\_alloca\_probe'" when linking
the shared library to the executable.
Hence, we define this FAKE\_ALLOCA\_CALL and call it in the respective
main()s just before the final return.
@h
#if ( defined(__INTEL_COMPILER) && (!defined(STATIC)) )
# include <alloca.h>
# define FAKE_ALLOCA_CALL (void)alloca(0);
#else
# define FAKE_ALLOCA_CALL ;
#endif

#endif /* _MU_H_ */

