import sys, os, getopt, string

try:
    True
except NameError:
    # provide values for old Python versions
    False, True = 0, 1

# By using a hierarchy of classes we can let Python do the searching
# for the correct value.
class BuiltinOptions:
    '''Built-in defaults.'''
    prefix = '@prefix@'
    exec_prefix = '@exec_prefix@'
    sysconfdir = '@sysconfdir@'
    gdk_dbname = 'tst'
    gdk_dbfarm = os.path.join('@localstatedir@','@PACKAGE@')
    gdk_debug = '8'
    gdk_mmap = '32M'
    monet_admin = 'adm'
    monet_prompt = '>'
    monet_welcome = 'yes'
    monet_mod_path = os.path.join('@libdir@','@PACKAGE@')
    monet_deamon = 'yes'

    def get(self, name, default = None):
        '''get(name, [default]) -> value

        Return the value for name after substituting ${prefix} and
        ${exec_prefix}.'''
        try:
            val = getattr(self, name)
        except AttributeError:
            return default
        changed = True
        while changed:
            changed = False
            for var in 'prefix', 'exec_prefix':
                dvar = '${%s}' % var
                if string.find(val, dvar) < 0:
                    # variable does not occur, skip further processing
                    continue
                # replace variable with its value (recursive call)
                val = string.join(string.split(val, dvar), self.get(var))
                changed = True
        return val

class SystemOptions(BuiltinOptions):
    '''Values from the system config file.'''
    pass

class ConfigOptions(SystemOptions):
    '''Values from a user-supplied config file.'''
    pass

# This is a list of command-line options.  For each option, we can
# specify a short and a long form, and whether the option takes an
# argument.  Also, if the GDK option name is given, the option will
# automatically be recorded.
# The argument field is a descriptive string for the argument.  If
# None is given, the option does not take an argument.
cmd_options = [
    # long name, short name, GDK option, argument
    ('config','c',None,'config_file'),
    ('dbname',None,'gdk_dbname','database_name'),
    ('dbfarm',None,'gdk_dbfarm','database_directory'),
    ('debug','d','gdk_debug','debug_level'),
    ('help','?',None,None),
    ('set','s',None,'option=value'),
    ]

def usage():
    '''usage()

    Print usage information.'''
    print 'Usage: %s [ options ]' % sys.argv[0]
    print 'Options are:'
    for long, short, gdk_opt, argument in cmd_options:
        arg = []
        if short:
            arg.append('-' + short)
        if long:
            arg.append('--' + long)
        arg = string.join(arg, ' or ')
        if argument:
            arg = arg + ' ' + argument
        print arg

def parse_config(file, options = ConfigOptions):
    '''parse_config(file)

    Parse a Monet config file.'''
    try:
        f = open(file)
    except IOError:
        sys.stderr.write('Could not open file %s\n' % file)
        return
    while True:
        line = f.readline()
        if not line:
            # end of file
            break
        line = string.strip(line)
        if not line or line[0] == '#':
            # ignore comments and empty lines
            continue
        keyval = string.split(line, '=', 1)
        if len(keyval) != 2:
            sys.stderr.write('syntax error in %s\n' % file)
            f.close()
            sys.exit(1)
        key, val = keyval
        key = string.strip(key)
        val = string.strip(val)
        if not key:
            sys.stderr.write('syntax error in %s\n' % file)
            f.close()
            sys.exit(1)
        # only keep first non-blank part as value, rest is comment
        val = string.split(val, None, 1)[0]
        setattr(options, key, val)

def print_options(options):
    '''print_options(options)

    Print the current values of the options.'''
    for name in dir(options):
        if name[:1] == '_':
            continue
        val = getattr(options, name)
        sys.stderr.write('%s = %s\n' % (name, val))

def parse_options(argv):
    '''parse_options(argv) -> options

    This is the main interface to this module.

    Parse the command line options (argv = sys.argv[1:]) and return a
    class instance describing the options settings.'''
    debug = 0
    options = ConfigOptions()
    seen_config = False
    getopt_short = ''
    getopt_long = []
    for long, short, gdk_opt, argument in cmd_options:
        if short:
            getopt_short = getopt_short + short
            if argument:
                getopt_short = getopt_short + ':'
        if long:
            if argument:
                q = '='
            else:
                q = ''
            getopt_long.append(long + q)
    opts, args = getopt.getopt(argv, getopt_short, getopt_long)
    for o, a in opts:
        if o[:2] == '--':
            o = o[2:]
            for long, short, gdk_opt, argument in cmd_options:
                if o == long:
                    break
            else:
                usage()
        else:
            o = o[1:]
            for long, short, gdk_opt, argument in cmd_options:
                if o == short:
                    break
            else:
                usage()
        if gdk_opt:
            setattr(options, gdk_opt, a)
            if long == 'debug':
                debug = 1
        elif long == 'config':
            parse_config(a, ConfigOptions)
            seen_config = True
        elif long == 'set':
            keyval = string.split(a, '=', 1)
            if len(keyval) != 2:
                sys.stderr.write('wrong format for --set option %s\n' % a)
            else:
                key, val = keyval
                key = string.strip(key)
                val = string.strip(val)
                if not key:
                    sys.stderr.write('wrong format for --set option %s\n' % a)
                else:
                    setattr(options, key, val)
        elif long == 'help':
            usage()
    if not seen_config:
        parse_config(os.path.join(BuiltinOptions.get(BuiltinOptions(),'sysconfdir'),'monet.conf'), SystemOptions)
    if debug:
        print_options(options)
    return options
