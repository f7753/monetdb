# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(2000000));
	aa_a := oid(2000000);
	ba_a := setoid(aa_a);
#var k10_unique1 := bat("k10_unique1");
	k10_unique1 := new("k10_unique1");
#var k10_unique2 := bat("k10_unique2");
	k10_unique2 := new("k10_unique2");
#qtrace(1);
	ca_a := qtrace(1);
#var t1:= k10_unique1.copy();
	t1 := copy(k10_unique1,);
#var t2:= k10_unique1.copy();
	t2 := copy(k10_unique1,);
#var t3:= k10_unique1.copy();
	t3 := copy(k10_unique1,);
#var t4:= k10_unique1.copy();
	t4 := copy(k10_unique1,);
#var t5:= k10_unique1.copy();
	t5 := copy(k10_unique1,);
#var s1:= k10_unique2.copy();
	s1 := copy(k10_unique2,);
#var s2:= k10_unique2.copy();
	s2 := copy(k10_unique2,);
#var s3:= k10_unique2.copy();
	s3 := copy(k10_unique2,);
#var s4:= k10_unique2.copy();
	s4 := copy(k10_unique2,);
#var s5:= k10_unique2.copy();
	s5 := copy(k10_unique2,);
#printf("#~BeginVariableOutput~#\n"); cpu.print(); printf("#~EndVariableOutput~#\n");
	da_a := printf("#~BeginVariableOutput~#\n");
	cpu:= mil.take("cpu");
	ea_a := print(cpu,);
	fa_a := printf("#~EndVariableOutput~#\n");
#join(t1,s1.reverse()).count().print();
	ga_a := reverse(s1,);
	ha_a := join(t1,ga_a);
	ia_a := count(ha_a,);
	ja_a := print(ia_a,);
#join(t2,s2.reverse()).count().print();
	ka_a := reverse(s2,);
	la_a := join(t2,ka_a);
	ma_a := count(la_a,);
	na_a := print(ma_a,);
#join(t3,s3.reverse()).count().print();
	oa_a := reverse(s3,);
	pa_a := join(t3,oa_a);
	qa_a := count(pa_a,);
	ra_a := print(qa_a,);
#join(t4,s4.reverse()).count().print();
	sa_a := reverse(s4,);
	ta_a := join(t4,sa_a);
	ua_a := count(ta_a,);
	va_a := print(ua_a,);
#join(t5,s5.reverse()).count().print();
	wa_a := reverse(s5,);
	xa_a := join(t5,wa_a);
	ya_a := count(xa_a,);
	ab_a := print(ya_a,);
#printf("#~BeginVariableOutput~#\n"); cpu.print(); printf("#~EndVariableOutput~#\n");
	bb_a := printf("#~BeginVariableOutput~#\n");
	cb_a := print(cpu,);
	db_a := printf("#~EndVariableOutput~#\n");
#printf("#~BeginVariableOutput~#\n"); qstat(); printf("#~EndVariableOutput~#\n");
	eb_a := printf("#~BeginVariableOutput~#\n");
	fb_a := qstat();
	gb_a := printf("#~EndVariableOutput~#\n");
#qtrace(0);qtrace(1);
	hb_a := qtrace(0);
	ib_a := qtrace(1);
#threadcnt(4);printf("#~BeginVariableOutput~#\n"); cpu.print(); printf("#~EndVariableOutput~#\n");
	jb_a := threadcnt(4);
	kb_a := printf("#~BeginVariableOutput~#\n");
	lb_a := print(cpu,);
	mb_a := printf("#~EndVariableOutput~#\n");
thread	nb_a;
#	i1:=join(t1,s1.reverse()).count();
	ob_a := reverse(s1,);
	pb_a := join(t1,ob_a);
	i1 := count(pb_a,);
#	i2:=join(t2,s2.reverse()).count();
	qb_a := reverse(s2,);
	rb_a := join(t2,qb_a);
	i2 := count(rb_a,);
#	i3:=join(t3,s3.reverse()).count();
	sb_a := reverse(s3,);
	tb_a := join(t3,sb_a);
	i3 := count(tb_a,);
#	i4:=join(t4,s4.reverse()).count();
	ub_a := reverse(s4,);
	vb_a := join(t4,ub_a);
	i4 := count(vb_a,);
#	i5:=join(t5,s5.reverse()).count();
	wb_a := reverse(s5,);
	xb_a := join(t5,wb_a);
	i5 := count(xb_a,);
exit	nb_a;
#printf("#~BeginVariableOutput~#\n"); qstat(); printf("#~EndVariableOutput~#\n");
	yb_a := printf("#~BeginVariableOutput~#\n");
	ac_a := qstat();
	bc_a := printf("#~EndVariableOutput~#\n");
#qtrace(0);
	cc_a := qtrace(0);
#print(i1);
	dc_a := print(i1);
#print(i2);
	ec_a := print(i2);
#print(i3);
	fc_a := print(i3);
#print(i4);
	gc_a := print(i4);
#print(i5);
	hc_a := print(i5);
#print("done parallel");
	ic_a := print("done parallel");
#"pseudo_thread_name".print();
	jc_a := print("pseudo_thread_name",);
#printf("#~BeginVariableOutput~#\n"); view_gdk_thread.print(); printf("#~EndVariableOutput~#\n");
	kc_a := printf("#~BeginVariableOutput~#\n");
	view_gdk_thread:= mil.take("view_gdk_thread");
	lc_a := print(view_gdk_thread,);
	mc_a := printf("#~EndVariableOutput~#\n");
#printf("#~BeginVariableOutput~#\n"); view_gdk_env.print(); printf("#~EndVariableOutput~#\n");
	nc_a := printf("#~BeginVariableOutput~#\n");
	view_gdk_env:= mil.take("view_gdk_env");
	oc_a := print(view_gdk_env,);
	pc_a := printf("#~EndVariableOutput~#\n");
#printf("#~BeginVariableOutput~#\n"); cpu.print(); printf("#~EndVariableOutput~#\n");
	qc_a := printf("#~BeginVariableOutput~#\n");
	rc_a := print(cpu,);
	sc_a := printf("#~EndVariableOutput~#\n");
#quit();
	tc_a := quit();
#quit();
	uc_a := quit();
