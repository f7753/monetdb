# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("setoid(20000000);");
	aa_a := setoid(20000000);
	mil.line("loaded();");
	ba_a := loaded();
	mil.line("procs();");
	ca_a := procs();
	mil.line("monet_mod_nme.reverse().sort().print();");
	monet_mod_nme:= mil.take("monet_mod_nme");
	da_a := reverse(monet_mod_nme);
	ea_a := sort(da_a);
	fa_a := print(ea_a);
	mil.line("monet_mod_nme.reverse().sort()@batloop(){");
	ga_a := reverse(monet_mod_nme);
	ha_a := sort(ga_a);
barrier	ia_a := bunStream(ha_a,ia_aH,ia_aT);
	mil.line("\tprintf(\"\\n\\t%s\\n\\n\",$h);");
	ja_a := printf("\n\t%s\n\n",ia_aH);
	mil.line("\tsigs($h);");
	ka_a := sigs(ia_aH);
redo	ia_a := bunStream(ha_a,ia_aH,ia_aT);
exit	ia_a;
	mil.line("printf(\"\\n\\t%s\\n\\n\",\"cluster\");");
	la_a := printf("\n\t%s\n\n","cluster");
	mil.line("sigs(\"cluster\");");
	ma_a := sigs("cluster");
	mil.line("procs(); ");
	na_a := procs();
	mil.line("loaded();");
	oa_a := loaded();
	mil.line("monet_mod_nme.reverse().sort().print();");
	pa_a := reverse(monet_mod_nme);
	qa_a := sort(pa_a);
	ra_a := print(qa_a);
	mil.line("modules();");
	sa_a := modules();
	mil.line("view_modules.reverse().sort().print();");
	view_modules:= mil.take("view_modules");
	ta_a := reverse(view_modules);
	ua_a := sort(ta_a);
	va_a := print(ua_a);
	mil.line("var fix:=monet_mod_nme.reverse().copy();");
	wa_a := reverse(monet_mod_nme);
	fix := copy(wa_a);
	mil.line("fix.print();");
	xa_a := print(fix);
	mil.line("var others:=kdiff(view_modules.reverse(),");
	ya_a := reverse(view_modules);
	mil.line("\t\tmonet_mod_nme.reverse()).sort().access(BAT_WRITE).revert();");
	ab_a := reverse(monet_mod_nme);
	bb_a := kdiff(ya_a,ab_a);
	BAT_WRITE:= mil.take("BAT_WRITE");
	cb_a := sort(bb_a);
	db_a := access(cb_a,BAT_WRITE);
	others := revert(db_a);
	mil.line("others.print();");
	eb_a := print(others);
	mil.line("others@batloop(){");
barrier	fb_a := bunStream(others,fb_aH,fb_aT);
	mil.line("\tprintf(\"\\n\\tloading %s\\n\\n\",$h);");
	gb_a := printf("\n\tloading %s\n\n",fb_aH);
!ERROR: "	module($h);"
!        								^
! syntax error, unexpected TOK_MODULE.
