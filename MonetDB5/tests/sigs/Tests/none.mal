# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(20000000);
	aa_a := setoid(20000000);
function mmn():bat[:oid,:str];
#	 return(monet_mod_nme.kdiff(monet_mod_nme.[startsWith]("_").uselect(true)));
	monet_mod_nme:= mil.take("monet_mod_nme");
	ba_a := multiplex.tactics(monet_mod_nme,"startsWith","_");
	ca_a := uselect(ba_a,true);
	da_a := kdiff(monet_mod_nme,ca_a);
	return ea_a :=da_a;
end mmn;
#loaded();
	fa_a := loaded();
#mmn().reverse().mark(oid(nil)).sort().print();
	ga_a := mmn();
	nil:= mil.take("nil");
	ha_a := oid(nil);
	ia_a := reverse(ga_a,);
	ja_a := mark(ia_a,ha_a);
	ka_a := sort(ja_a,);
	la_a := print(ka_a,);
#view_modules.reverse().mark(oid(nil)).kunique().sort().print();
	view_modules:= mil.take("view_modules");
	ma_a := oid(nil);
	na_a := reverse(view_modules,);
	oa_a := mark(na_a,ma_a);
	pa_a := kunique(oa_a,);
	qa_a := sort(pa_a,);
	ra_a := print(qa_a,);
#loaded();
	sa_a := loaded();
#mmn().reverse().mark(oid(nil)).sort().print();
	ta_a := mmn();
	ua_a := oid(nil);
	va_a := reverse(ta_a,);
	wa_a := mark(va_a,ua_a);
	xa_a := sort(wa_a,);
	ya_a := print(xa_a,);
#var fix:=mmn().reverse().copy();
	ab_a := mmn();
	bb_a := reverse(ab_a,);
	fix := copy(bb_a,);
#fix.mark(oid(nil)).print();
	cb_a := oid(nil);
	db_a := mark(fix,cb_a);
	eb_a := print(db_a,);
#var others:=kdiff(view_modules.reverse().kunique(),mmn().reverse()).sort().access(BAT_WRITE).revert();
	fb_a := reverse(view_modules,);
	gb_a := kunique(fb_a,);
	hb_a := mmn();
	ib_a := reverse(hb_a,);
	jb_a := kdiff(gb_a,ib_a);
	BAT_WRITE:= mil.take("BAT_WRITE");
	kb_a := sort(jb_a,);
	lb_a := access(kb_a,BAT_WRITE);
	others := revert(lb_a,);
#others.mark(oid(nil)).print();
	mb_a := oid(nil);
	nb_a := mark(others,mb_a);
	ob_a := print(nb_a,);
#others@batloop(){
barrier	pb_a := bunStream(others,pb_aH,pb_aT);
#	printf("\n\tloading %s\n\n",$h);
	qb_a := printf("\n\tloading %s\n\n",pb_aH);
!ERROR: "	loaded();"
!        ^
! syntax error, unexpected TOK_MODULE.
