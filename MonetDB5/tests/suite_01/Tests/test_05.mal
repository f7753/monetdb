# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#print("got single quote \' .");	# remove superfluous escapes
	ca_a := print("got single quote \' .");
#print("got single quote ' without escape");
	da_a := print("got single quote ' without escape");
#print("got tab \t and single newline \n .");
	ea_a := print("got tab \t and single newline \n .");
#print("problem signalled before \\\"");
	fa_a := print("problem signalled before \\\"");
#var t0:= "got single quote \' .";	t0.print();
	t0 := "got single quote \' .";
	ga_a := print(t0,);
#var t1:= "got single quote ' without escape";	t1.print();
	t1 := "got single quote ' without escape";
	ha_a := print(t1,);
#var t2:= "got tab \t and single newline \n ."; t2.print();
	t2 := "got tab \t and single newline \n .";
	ia_a := print(t2,);
#var t3:= "problem signalled before \\\""; t3.print();
	t3 := "problem signalled before \\\"";
	ja_a := print(t3,);
#var c0:= "\n"; c0.print();
	c0 := "\n";
	ka_a := print(c0,);
#var c1:= "\'"; c1.print();
	c1 := "\'";
	la_a := print(c1,);
!ERROR: "var s:=new(int,str,100);"
!        ^
! syntax error, unexpected $undefined.
