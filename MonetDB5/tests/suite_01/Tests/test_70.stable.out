stdout of test 'test_70` in directory 'tests/suite_01` itself:

#> Mtest:	milS test_70 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_01 -single test_70.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:test_70.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("# The Monet interpreter supports type casts\n");
#	mil.line("var p:=  int(\"21\");");
#	p := int("21");
#	mil.line("p.print();");
#	ca_a := print(p);
#	mil.line("var pf:= flt(\"23\");");
#	pf := flt("23");
#	mil.line("pf.print();");
#	da_a := print(pf);
#	mil.line("var pb:= bit(1);");
#	pb := bit(1);
#	mil.line("pb.print();");
#	ea_a := print(pb);
#	mil.line("var z:= int(p);");
#	z := int(p);
#	mil.line("z.print();");
#	fa_a := print(z);
#	mil.line("var pi:= bit(0);");
#	pi := bit(0);
#	mil.line("pi.print();");
#	ga_a := print(pi);
#	mil.line("var ps:= str(1);");
#	ps := str(1);
#	mil.line("quit();");
#	ha_a := quit();
#
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  ($32:str)
#Predefined code segment 	# 2  ($34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  ($36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  ($38:str)
#A few guidelines to maximize usefullness. 	# 5  ($40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  ($42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  ($44:str)
#use the "mil_schema" for additional support routines 	# 8  ($46:str)
    mil.line("setoid(oid(20000000));");	# 9 MILline ($47:void)<-($48:str)
    aa_a := calc.oid(20000000);	# 10 CALCint2oid (aa_a:oid)<-($50:int)
    ba_a := calc.setoid(aa_a);	# 11 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# The Monet interpreter supports type casts\n");	# 12 MILline ($52:void)<-($53:str)
    p := calc.int("21");	# 13 CALCstr2int (p:int)<-($55:str)
    mil.line("p.io.print();");	# 14 MILline ($56:void)<-($57:str)
    ca_a := io.print(p);	# 15 IOprint_val (ca_a:int)<-(p:int)
    mil.line("var pf:= flt(\"23\");");	# 16 MILline ($59:void)<-($60:str)
    pf := calc.flt("23");	# 17 CALCstr2flt (pf:flt)<-($62:str)
    mil.line("pf.io.print();");	# 18 MILline ($63:void)<-($64:str)
    da_a := io.print(pf);	# 19 IOprint_val (da_a:int)<-(pf:flt)
    mil.line("var pb:= bit(1);");	# 20 MILline ($66:void)<-($67:str)
    pb := calc.bit(1);	# 21 CALCint2bit (pb:bit)<-($69:int)
    mil.line("pb.io.print();");	# 22 MILline ($70:void)<-($71:str)
    ea_a := io.print(pb);	# 23 IOprint_val (ea_a:int)<-(pb:bit)
    mil.line("var z:= int(p);");	# 24 MILline ($73:void)<-($74:str)
    z := calc.int(p);	# 25 CALCint2int (z:int)<-(p:int)
    mil.line("z.io.print();");	# 26 MILline ($76:void)<-($77:str)
    fa_a := io.print(z);	# 27 IOprint_val (fa_a:int)<-(z:int)
    mil.line("var pi:= bit(0);");	# 28 MILline ($79:void)<-($80:str)
    pi := calc.bit(0);	# 29 CALCint2bit (pi:bit)<-($82:int)
    mil.line("pi.io.print();");	# 30 MILline ($83:void)<-($84:str)
    ga_a := io.print(pi);	# 31 IOprint_val (ga_a:int)<-(pi:bit)
    mil.line("var ps:= str(1);");	# 32 MILline ($86:void)<-($87:str)
    ps := calc.str(1);	# 33 CALCint2str (ps:str)<-($69:int)
    mil.line("quit();");	# 34 MILline ($89:void)<-($90:str)
    ha_a := clients.quit();	# 35 CLTquit (ha_a:void)
end main;	# 36  
#setoid(oid(20000000));
## The Monet interpreter supports type casts
#var p:=  int("21");
#p.print();
[ 21 ]
#var pf:= flt("23");
#pf.print();
[ 23 ]
#var pb:= bit(1);
#pb.print();
[ true ]
#var z:= int(p);
#z.print();
[ 21 ]
#var pi:= bit(0);
#pi.print();
[ false ]

# 15:33:59 >  
# 15:33:59 >  Done.
# 15:33:59 >  

