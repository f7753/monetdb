stdout of test 'test_15` in directory 'tests/suite_01` itself:

#> Mtest:	milS test_15 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_01 -single test_15.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:test_15.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("commit(); printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");");
#	ca_a := commit();
#	da_a := printf("#~BeginVariableOutput~#\n");
#	ea_a := ioStatistics();
#	fa_a := print(ea_a);
#	ga_a := printf("#~EndVariableOutput~#\n");
#	mil.line("commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();");
#	ha_a := commit();
#	ia_a := commit();
#	ja_a := commit();
#	ka_a := commit();
#	la_a := commit();
#	ma_a := commit();
#	na_a := commit();
#	oa_a := commit();
#	mil.line("commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();");
#	pa_a := commit();
#	qa_a := commit();
#	ra_a := commit();
#	sa_a := commit();
#	ta_a := commit();
#	ua_a := commit();
#	va_a := commit();
#	wa_a := commit();
#	mil.line("commit(); commit(); commit(); commit(); ");
#	xa_a := commit();
#	ya_a := commit();
#	ab_a := commit();
#	bb_a := commit();
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");");
#	cb_a := printf("#~BeginVariableOutput~#\n");
#	db_a := ioStatistics();
#	eb_a := print(db_a);
#	fb_a := printf("#~EndVariableOutput~#\n");
#	mil.line("quit();");
#	gb_a := quit();
#
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  ($32:str)
#Predefined code segment 	# 2  ($34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  ($36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  ($38:str)
#A few guidelines to maximize usefullness. 	# 5  ($40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  ($42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  ($44:str)
#use the "mil_schema" for additional support routines 	# 8  ($46:str)
    mil.line("setoid(oid(20000000));");	# 9 MILline ($47:void)<-($48:str)
    aa_a := calc.oid(20000000);	# 10 CALCint2oid (aa_a:oid)<-($50:int)
    ba_a := calc.setoid(aa_a);	# 11 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("commit(); printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");");	# 12 MILline ($52:void)<-($53:str)
    ca_a := transaction.commit();	# 13 TRNglobal_commit (ca_a:void)
    da_a := io.printf("#~BeginVariableOutput~#\n");	# 14 IOprint_str (da_a:int)<-($56:str)
    ea_a := status.ioStatistics();	# 15 SYSioStatistics (ea_a:bat[:str,:int])
    fa_a := io.print(ea_a);	# 16 IOprint_val (fa_a:int)<-(ea_a:bat[:str,:int])
    ga_a := io.printf("#~EndVariableOutput~#\n");	# 17 IOprint_str (ga_a:int)<-($60:str)
    mil.line("commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();");	# 18 MILline ($61:void)<-($62:str)
    ha_a := transaction.commit();	# 19 TRNglobal_commit (ha_a:void)
    ia_a := transaction.commit();	# 20 TRNglobal_commit (ia_a:void)
    ja_a := transaction.commit();	# 21 TRNglobal_commit (ja_a:void)
    ka_a := transaction.commit();	# 22 TRNglobal_commit (ka_a:void)
    la_a := transaction.commit();	# 23 TRNglobal_commit (la_a:void)
    ma_a := transaction.commit();	# 24 TRNglobal_commit (ma_a:void)
    na_a := transaction.commit();	# 25 TRNglobal_commit (na_a:void)
    oa_a := transaction.commit();	# 26 TRNglobal_commit (oa_a:void)
    mil.line("transaction.commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();");	# 27 MILline ($71:void)<-($72:str)
    pa_a := transaction.commit();	# 28 TRNglobal_commit (pa_a:void)
    qa_a := transaction.commit();	# 29 TRNglobal_commit (qa_a:void)
    ra_a := transaction.commit();	# 30 TRNglobal_commit (ra_a:void)
    sa_a := transaction.commit();	# 31 TRNglobal_commit (sa_a:void)
    ta_a := transaction.commit();	# 32 TRNglobal_commit (ta_a:void)
    ua_a := transaction.commit();	# 33 TRNglobal_commit (ua_a:void)
    va_a := transaction.commit();	# 34 TRNglobal_commit (va_a:void)
    wa_a := transaction.commit();	# 35 TRNglobal_commit (wa_a:void)
    mil.line("transaction.commit(); commit(); commit(); commit(); ");	# 36 MILline ($81:void)<-($82:str)
    xa_a := transaction.commit();	# 37 TRNglobal_commit (xa_a:void)
    ya_a := transaction.commit();	# 38 TRNglobal_commit (ya_a:void)
    ab_a := transaction.commit();	# 39 TRNglobal_commit (ab_a:void)
    bb_a := transaction.commit();	# 40 TRNglobal_commit (bb_a:void)
    mil.line("printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");");	# 41 MILline ($87:void)<-($88:str)
    cb_a := io.printf("#~BeginVariableOutput~#\n");	# 42 IOprint_str (cb_a:int)<-($90:str)
    db_a := status.ioStatistics();	# 43 SYSioStatistics (db_a:bat[:str,:int])
    eb_a := io.print(db_a);	# 44 IOprint_val (eb_a:int)<-(db_a:bat[:str,:int])
    fb_a := io.printf("#~EndVariableOutput~#\n");	# 45 IOprint_str (fb_a:int)<-($94:str)
    mil.line("quit();");	# 46 MILline ($95:void)<-($96:str)
    gb_a := clients.quit();	# 47 CLTquit (gb_a:void)
end main;	# 48  
#setoid(oid(20000000));
#commit(); printf("#~BeginVariableOutput~#\n"); ioStatistics().print(); printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------#
# BAT:		  io	  #
# (str)		  (int)	  #
#-------------------------#
[ "maxrss",	  0	  ]
[ "minflt",	  1172	  ]
[ "majflt",	  0	  ]
[ "nswap",	  0	  ]
[ "inblock",	  0	  ]
[ "oublock",	  0	  ]
[ "nvcsw",	  3	  ]
[ "ninvcsw",	  1	  ]
#~EndVariableOutput~#
#commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();
#commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();
#commit(); commit(); commit(); commit(); 
#printf("#~BeginVariableOutput~#\n"); ioStatistics().print(); printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------#
# BAT:		  io	  #
# (str)		  (int)	  #
#-------------------------#
[ "maxrss",	  0	  ]
[ "minflt",	  1175	  ]
[ "majflt",	  0	  ]
[ "nswap",	  0	  ]
[ "inblock",	  0	  ]
[ "oublock",	  0	  ]
[ "nvcsw",	  3	  ]
[ "ninvcsw",	  1	  ]
#~EndVariableOutput~#

# 19:56:10 >  
# 19:56:10 >  Done.
# 19:56:10 >  

