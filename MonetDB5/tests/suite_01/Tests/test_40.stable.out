stdout of test 'test_40` in directory 'tests/suite_01` itself:

#> Mtest:	milS test_40 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_01 -single test_40.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:test_40.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("#test ascii export/import facility.\n");
#	mil.line("var b:= new(str,int);");
#	b := new(nil:str,nil:int);
#	mil.line("b.insert(\"the\",1);");
#	ca_a := insert(b,"the",1);
#	mil.line("b.insert(\"quick\",2);");
#	da_a := insert(b,"quick",2);
#	mil.line("b.insert(\"brown\",3);");
#	ea_a := insert(b,"brown",3);
#	mil.line("b.insert(\"fox\",4);");
#	fa_a := insert(b,"fox",4);
#	mil.line("b.insert(\"jumps\",5);");
#	ga_a := insert(b,"jumps",5);
#	mil.line("b.insert(\"over\",6);");
#	ha_a := insert(b,"over",6);
#	mil.line("b.insert(\"lazy\",7);");
#	ia_a := insert(b,"lazy",7);
#	mil.line("b.insert(\"dog\",8);");
#	ja_a := insert(b,"dog",8);
#	mil.line("b.insert(str(nil),9);");
#	ka_a := str(nil);
#	la_a := insert(b,ka_a,9);
#	mil.line("b.insert(\".\",10);");
#	ma_a := insert(b,".",10);
#	mil.line("b.insert(\"\",int(nil));");
#	na_a := int(nil);
#	oa_a := insert(b,"",na_a);
#	mil.line("b.insert(str(nil),int(nil));");
#	pa_a := str(nil);
#	qa_a := int(nil);
#	ra_a := insert(b,pa_a,qa_a);
#	mil.line("b.print();");
#	sa_a := print(b);
#	mil.line("b.export(\"monet2\");");
#	ta_a := export(b,"monet2");
#	mil.line("b.clear();");
#	ua_a := clear(b);
#	mil.line("b.count().print();");
#	va_a := count(b);
#	wa_a := print(va_a);
#	mil.line("b.import(\"monet2\");");
#	xa_a := import(b,"monet2");
#	mil.line("b.print();");
#	ya_a := print(b);
#	mil.line("var cb:= new(int,int);");
#	cb := new(nil:int,nil:int);
#	mil.line("cb.insert(1,15);");
#	ab_a := insert(cb,1,15);
#	mil.line("cb.insert(2,4);");
#	bb_a := insert(cb,2,4);
#	mil.line("cb.insert(3,int(nil));");
#	cb_a := int(nil);
#	db_a := insert(cb,3,cb_a);
#	mil.line("cb.insert(4,16);");
#	eb_a := insert(cb,4,16);
#	mil.line("cb.insert(5,25);");
#	fb_a := insert(cb,5,25);
#	mil.line("cb.insert(6,36);");
#	gb_a := insert(cb,6,36);
#	mil.line("cb.insert(7,49);");
#	hb_a := insert(cb,7,49);
#	mil.line("cb.insert(8,64);");
#	ib_a := insert(cb,8,64);
#	mil.line("cb.insert(9,int(nil));");
#	jb_a := int(nil);
#	kb_a := insert(cb,9,jb_a);
#	mil.line("cb.insert(int(nil),int(nil));");
#	lb_a := int(nil);
#	mb_a := int(nil);
#	nb_a := insert(cb,lb_a,mb_a);
#	mil.line("cb.insert(int(nil),81);");
#	ob_a := int(nil);
#	pb_a := insert(cb,ob_a,81);
#	mil.line("cb.print();");
#	qb_a := print(cb);
#	mil.line("cb.export(\"monet1\");");
#	rb_a := export(cb,"monet1");
#	mil.line("cb.clear();");
#	sb_a := clear(cb);
#	mil.line("cb.count().print();");
#	tb_a := count(cb);
#	ub_a := print(tb_a);
#	mil.line("cb.import(\"monet1\");");
#	vb_a := import(cb,"monet1");
#	mil.line("cb.print();");
#	wb_a := print(cb);
#	mil.line("commit();");
#	xb_a := commit();
#	mil.line("quit();");
#	yb_a := quit();
#
function user.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($31:void)<-($32:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($34:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#test ascii export/import facility.\n");	# 4 MILline ($36:void)<-($37:str)
    mil.line("var b:= new(str,int);");	# 5 MILline ($38:void)<-($39:str)
    b := bbp.new("nil:str",nil:int);	# 6 CMDBATnew (b:bat[:str,:int])<-($41:str)($42:int)
    mil.line("b.insert(\"the\",1);");	# 7 MILline ($43:void)<-($44:str)
    ca_a := bat.insert(b,"the",1);	# 8 BKCinsert_bun (ca_a:bat[:str,:int])<-(b:bat[:str,:int])($46:str)($47:int)
    mil.line("b.insert(\"quick\",2);");	# 9 MILline ($48:void)<-($49:str)
    da_a := bat.insert(b,"quick",2);	# 10 BKCinsert_bun (da_a:bat[:str,:int])<-(b:bat[:str,:int])($51:str)($52:int)
    mil.line("b.insert(\"brown\",3);");	# 11 MILline ($53:void)<-($54:str)
    ea_a := bat.insert(b,"brown",3);	# 12 BKCinsert_bun (ea_a:bat[:str,:int])<-(b:bat[:str,:int])($56:str)($57:int)
    mil.line("b.insert(\"fox\",4);");	# 13 MILline ($58:void)<-($59:str)
    fa_a := bat.insert(b,"fox",4);	# 14 BKCinsert_bun (fa_a:bat[:str,:int])<-(b:bat[:str,:int])($61:str)($62:int)
    mil.line("b.insert(\"jumps\",5);");	# 15 MILline ($63:void)<-($64:str)
    ga_a := bat.insert(b,"jumps",5);	# 16 BKCinsert_bun (ga_a:bat[:str,:int])<-(b:bat[:str,:int])($66:str)($67:int)
    mil.line("b.insert(\"over\",6);");	# 17 MILline ($68:void)<-($69:str)
    ha_a := bat.insert(b,"over",6);	# 18 BKCinsert_bun (ha_a:bat[:str,:int])<-(b:bat[:str,:int])($71:str)($72:int)
    mil.line("b.insert(\"lazy\",7);");	# 19 MILline ($73:void)<-($74:str)
    ia_a := bat.insert(b,"lazy",7);	# 20 BKCinsert_bun (ia_a:bat[:str,:int])<-(b:bat[:str,:int])($76:str)($77:int)
    mil.line("b.insert(\"dog\",8);");	# 21 MILline ($78:void)<-($79:str)
    ja_a := bat.insert(b,"dog",8);	# 22 BKCinsert_bun (ja_a:bat[:str,:int])<-(b:bat[:str,:int])($81:str)($82:int)
    mil.line("b.insert(str(nil),9);");	# 23 MILline ($83:void)<-($84:str)
    ka_a := calc.str(nil);	# 24 CALCnil2str (ka_a:str)<-($86:void)
    la_a := bat.insert(b,ka_a,9);	# 25 BKCinsert_bun (la_a:bat[:str,:int])<-(b:bat[:str,:int])(ka_a:str)($88:int)
    mil.line("b.insert(\".\",10);");	# 26 MILline ($89:void)<-($90:str)
    ma_a := bat.insert(b,".",10);	# 27 BKCinsert_bun (ma_a:bat[:str,:int])<-(b:bat[:str,:int])($92:str)($93:int)
    mil.line("b.insert(\"\",calc.int(nil));");	# 28 MILline ($94:void)<-($95:str)
    na_a := calc.int(nil);	# 29 CALCnil2int (na_a:int)<-($86:void)
    oa_a := bat.insert(b,"",na_a);	# 30 BKCinsert_bun (oa_a:bat[:str,:int])<-(b:bat[:str,:int])($98:str)(na_a:int)
    mil.line("b.insert(str(nil),calc.int(nil));");	# 31 MILline ($99:void)<-($100:str)
    pa_a := calc.str(nil);	# 32 CALCnil2str (pa_a:str)<-($86:void)
    qa_a := calc.int(nil);	# 33 CALCnil2int (qa_a:int)<-($86:void)
    ra_a := bat.insert(b,pa_a,qa_a);	# 34 BKCinsert_bun (ra_a:bat[:str,:int])<-(b:bat[:str,:int])(pa_a:str)(qa_a:int)
    mil.line("b.print();");	# 35 MILline ($104:void)<-($105:str)
    sa_a := io.print(b);	# 36 IOprint_val (sa_a:int)<-(b:bat[:str,:int])
    mil.line("b.export(\"monet2\");");	# 37 MILline ($107:void)<-($108:str)
    ta_a := io.export(b,"monet2");	# 38 IOexport (ta_a:bit)<-(b:bat[:str,:int])($110:str)
    mil.line("b.delete();");	# 39 MILline ($111:void)<-($112:str)
    ua_a := bat.delete(b);	# 40 BKCdelete_all (ua_a:bat[:str,:int])<-(b:bat[:str,:int])
    mil.line("b.count().print();");	# 41 MILline ($114:void)<-($115:str)
    va_a := algebra.count(b);	# 42 ALGcount_bat (va_a:lng)<-(b:bat[:str,:int])
    wa_a := io.print(va_a);	# 43 IOprint_val (wa_a:int)<-(va_a:lng)
    mil.line("b.import(\"monet2\");");	# 44 MILline ($118:void)<-($119:str)
    xa_a := io.import(b,"monet2");	# 45 IOimport (xa_a:bit)<-(b:bat[:str,:int])($110:str)
    mil.line("b.print();");	# 46 MILline ($121:void)<-($105:str)
    ya_a := io.print(b);	# 47 IOprint_val (ya_a:int)<-(b:bat[:str,:int])
    mil.line("var cb:= new(int,int);");	# 48 MILline ($123:void)<-($124:str)
    cb := bbp.new(nil:int,nil:int);	# 49 CMDBATnew (cb:bat[:int,:int])<-($126:int)($126:int)
    mil.line("cb.insert(1,15);");	# 50 MILline ($127:void)<-($128:str)
    ab_a := bat.insert(cb,1,15);	# 51 BKCinsert_bun (ab_a:bat[:int,:int])<-(cb:bat[:int,:int])($130:int)($131:int)
    mil.line("cb.insert(2,4);");	# 52 MILline ($132:void)<-($133:str)
    bb_a := bat.insert(cb,2,4);	# 53 BKCinsert_bun (bb_a:bat[:int,:int])<-(cb:bat[:int,:int])($135:int)($136:int)
    mil.line("cb.insert(3,calc.int(nil));");	# 54 MILline ($137:void)<-($138:str)
    cb_a := calc.int(nil);	# 55 CALCnil2int (cb_a:int)<-($140:void)
    db_a := bat.insert(cb,3,cb_a);	# 56 BKCinsert_bun (db_a:bat[:int,:int])<-(cb:bat[:int,:int])($142:int)(cb_a:int)
    mil.line("cb.insert(4,16);");	# 57 MILline ($143:void)<-($144:str)
    eb_a := bat.insert(cb,4,16);	# 58 BKCinsert_bun (eb_a:bat[:int,:int])<-(cb:bat[:int,:int])($136:int)($146:int)
    mil.line("cb.insert(5,25);");	# 59 MILline ($147:void)<-($148:str)
    fb_a := bat.insert(cb,5,25);	# 60 BKCinsert_bun (fb_a:bat[:int,:int])<-(cb:bat[:int,:int])($150:int)($151:int)
    mil.line("cb.insert(6,36);");	# 61 MILline ($152:void)<-($153:str)
    gb_a := bat.insert(cb,6,36);	# 62 BKCinsert_bun (gb_a:bat[:int,:int])<-(cb:bat[:int,:int])($155:int)($156:int)
    mil.line("cb.insert(7,49);");	# 63 MILline ($157:void)<-($158:str)
    hb_a := bat.insert(cb,7,49);	# 64 BKCinsert_bun (hb_a:bat[:int,:int])<-(cb:bat[:int,:int])($160:int)($161:int)
    mil.line("cb.insert(8,64);");	# 65 MILline ($162:void)<-($163:str)
    ib_a := bat.insert(cb,8,64);	# 66 BKCinsert_bun (ib_a:bat[:int,:int])<-(cb:bat[:int,:int])($165:int)($166:int)
    mil.line("cb.insert(9,calc.int(nil));");	# 67 MILline ($167:void)<-($168:str)
    jb_a := calc.int(nil);	# 68 CALCnil2int (jb_a:int)<-($140:void)
    kb_a := bat.insert(cb,9,jb_a);	# 69 BKCinsert_bun (kb_a:bat[:int,:int])<-(cb:bat[:int,:int])($171:int)(jb_a:int)
    mil.line("cb.insert(calc.int(nil),int(nil));");	# 70 MILline ($172:void)<-($173:str)
    lb_a := calc.int(nil);	# 71 CALCnil2int (lb_a:int)<-($175:void)
    mb_a := calc.int(nil);	# 72 CALCnil2int (mb_a:int)<-($175:void)
    nb_a := bat.insert(cb,lb_a,mb_a);	# 73 BKCinsert_bun (nb_a:bat[:int,:int])<-(cb:bat[:int,:int])(lb_a:int)(mb_a:int)
    mil.line("cb.insert(calc.int(nil),81);");	# 74 MILline ($178:void)<-($179:str)
    ob_a := calc.int(nil);	# 75 CALCnil2int (ob_a:int)<-($175:void)
    pb_a := bat.insert(cb,ob_a,81);	# 76 BKCinsert_bun (pb_a:bat[:int,:int])<-(cb:bat[:int,:int])(ob_a:int)($182:int)
    mil.line("cb.print();");	# 77 MILline ($183:void)<-($184:str)
    qb_a := io.print(cb);	# 78 IOprint_val (qb_a:int)<-(cb:bat[:int,:int])
    mil.line("cb.export(\"monet1\");");	# 79 MILline ($186:void)<-($187:str)
    rb_a := io.export(cb,"monet1");	# 80 IOexport (rb_a:bit)<-(cb:bat[:int,:int])($189:str)
    mil.line("cb.delete();");	# 81 MILline ($190:void)<-($191:str)
    sb_a := bat.delete(cb);	# 82 BKCdelete_all (sb_a:bat[:int,:int])<-(cb:bat[:int,:int])
    mil.line("cb.count().print();");	# 83 MILline ($193:void)<-($194:str)
    tb_a := algebra.count(cb);	# 84 ALGcount_bat (tb_a:lng)<-(cb:bat[:int,:int])
    ub_a := io.print(tb_a);	# 85 IOprint_val (ub_a:int)<-(tb_a:lng)
    mil.line("cb.import(\"monet1\");");	# 86 MILline ($197:void)<-($198:str)
    vb_a := io.import(cb,"monet1");	# 87 IOimport (vb_a:bit)<-(cb:bat[:int,:int])($189:str)
    mil.line("cb.print();");	# 88 MILline ($200:void)<-($184:str)
    wb_a := io.print(cb);	# 89 IOprint_val (wb_a:int)<-(cb:bat[:int,:int])
    mil.line("commit();");	# 90 MILline ($202:void)<-($203:str)
    xb_a := transaction.commit();	# 91 TRNglobal_commit (xb_a:void)
    mil.line("quit();");	# 92 MILline ($205:void)<-($206:str)
    yb_a := clients.quit();	# 93 CLTquit (yb_a:void)
end main;	# 94  
#setoid(oid(20000000));
##test ascii export/import facility.
#var b:= new(str,int);
#b.insert("the",1);
#b.insert("quick",2);
#b.insert("brown",3);
#b.insert("fox",4);
#b.insert("jumps",5);
#b.insert("over",6);
#b.insert("lazy",7);
#b.insert("dog",8);
#b.insert(str(nil),9);
#b.insert(".",10);
#b.insert("",int(nil));
#b.insert(str(nil),int(nil));
#b.print();
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
#b.export("monet2");
#b.clear();
#b.count().print();
[ 0 ]
#b.import("monet2");
#b.print();
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
#var cb:= new(int,int);
#cb.insert(1,15);
#cb.insert(2,4);
#cb.insert(3,int(nil));
#cb.insert(4,16);
#cb.insert(5,25);
#cb.insert(6,36);
#cb.insert(7,49);
#cb.insert(8,64);
#cb.insert(9,int(nil));
#cb.insert(int(nil),int(nil));
#cb.insert(int(nil),81);
#cb.print();
#-----------------#
# BAT:	  tmp_26  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#cb.export("monet1");
#cb.clear();
#cb.count().print();
[ 0 ]
#cb.import("monet1");
#cb.print();
#-----------------#
# BAT:	  tmp_26  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#commit();
#quit();

# 17:08:59 >  
# 17:08:59 >  Done.
# 17:08:59 >  

