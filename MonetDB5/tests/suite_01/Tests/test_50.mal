# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#var c:= new(int,bat);
	c := new(:int,:bat[:any,:any]);
#c.insert(1,cpu);
	cpu:= mil.take("cpu");
	ca_a := insert(c,1,cpu);
#c.insert(2,c);
	da_a := insert(c,2,c);
#c.print();
	ea_a := print(c,);
#printf("#~BeginVariableOutput~#\n"); c.find(1).print(); printf("#~EndVariableOutput~#\n");
	fa_a := printf("#~BeginVariableOutput~#\n");
	ga_a := find(c,1);
	ha_a := print(ga_a,);
	ia_a := printf("#~EndVariableOutput~#\n");
#c.print();
	ja_a := print(c,);
#c.find(2).print();
	ka_a := find(c,2);
	la_a := print(ka_a,);
#c.print();
	ma_a := print(c,);
#quit();
	na_a := quit();
