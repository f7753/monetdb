stdout of test 'test_05` in directory 'tests/suite_01` itself:

#> Mtest:	milS test_05 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_01 -single test_05.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:test_05.milS

# 15:18:43 >  
# 15:18:43 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux//var/MonetDB5/log" --set mapi_port=49586 --set sql_port=58498 --set monet_prompt= --trace --dbname=mTests_tests_suite_01  test_05.mal </dev/null
# 15:18:43 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("# escape sequences\n");
#	mil.line("# first some basics, escaped characters are normalized");
#	mil.line("# first some basics, escaped characters are normalized\n");
#	mil.line("");
#	mil.line("print(\"got single quote \\' .\");\t# remove superfluous escapes");
#	ca_a := print("got single quote \' .");
#	mil.line("# remove superfluous escapes\n");
#	mil.line("print(\"got single quote ' without escape\");");
#	da_a := print("got single quote ' without escape");
#	mil.line("print(\"got tab \\t and single newline \\n .\");");
#	ea_a := print("got tab \t and single newline \n .");
#	mil.line("print(\"problem signalled before \\\\\\\"\");");
#	fa_a := print("problem signalled before \\\"");
#	mil.line("var t0:= \"got single quote \\' .\";\tt0.print();");
#	t0 := "got single quote \' .";
#	ga_a := print(t0);
#	mil.line("var t1:= \"got single quote ' without escape\";\tt1.print();");
#	t1 := "got single quote ' without escape";
#	ha_a := print(t1);
#	mil.line("var t2:= \"got tab \\t and single newline \\n .\"; t2.print();");
#	t2 := "got tab \t and single newline \n .";
#	ia_a := print(t2);
#	mil.line("var t3:= \"problem signalled before \\\\\\\"\"; t3.print();");
#	t3 := "problem signalled before \\\"";
#	ja_a := print(t3);
#	mil.line("# character constants\n");
#	mil.line("var c0:= \"\\n\"; c0.print();");
#	c0 := "\n";
#	ka_a := print(c0);
#	mil.line("var c1:= \"\\'\"; c1.print();");
#	c1 := "\'";
#	la_a := print(c1);
#	mil.line("var c2:= \"\\\\\"; c2.print();");
#	c2 := "\\";
#	ma_a := print(c2);
#	mil.line("var s:=new(int,str,100);");
#	s := new(nil:int,nil:str,100);
#	mil.line("s.insert(2,\" single quote \\' got it\");");
#	na_a := insert(s,2," single quote \' got it");
#	mil.line("s.insert(4,\" backslash  \\\\ \");");
#	oa_a := insert(s,4," backslash  \\ ");
#	mil.line("s.insert(3,\" single quote ' \");");
#	pa_a := insert(s,3," single quote ' ");
#	mil.line("s.print();");
#	qa_a := print(s);
#	mil.line("# Monet printf should behave as in C\n");
#	mil.line("printf(\"got single quote \\' .\\n\"); # remove superfluous escapes");
#	ra_a := printf("got single quote \' .\n");
#	mil.line("# remove superfluous escapes\n");
#	mil.line("printf(\"got single quote ' without escape\\n\");");
#	sa_a := printf("got single quote ' without escape\n");
#	mil.line("printf(\"got tab \\t and newline \\n .\\n\");");
#	ta_a := printf("got tab \t and newline \n .\n");
#	mil.line("printf(\"problem signalled before \\\\\\\"\\n\");");
#	ua_a := printf("problem signalled before \\\"\n");
#	mil.line("quit();");
#	va_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# escape sequences\n");	# 4 MILline ($6:void)<-($7:str)
    mil.line("# first some basics, escaped characters are normalized\n");	# 5 MILline ($8:void)<-($9:str)
    mil.line("print(\"got single quote \\' .\");\t# remove superfluous escapes");	# 6 MILline ($10:void)<-($11:str)
    ca_a := io.print("got single quote \' .");	# 7 IOprint_val (ca_a:int)<-($13:str)
    mil.line("# remove superfluous escapes\n");	# 8 MILline ($14:void)<-($15:str)
    da_a := io.print("got single quote ' without escape");	# 9 IOprint_val (da_a:int)<-($17:str)
    mil.line("print(\"got tab \\t and single newline \\n .\");");	# 10 MILline ($18:void)<-($19:str)
    ea_a := io.print("got tab \t and single newline \n .");	# 11 IOprint_val (ea_a:int)<-($21:str)
    mil.line("print(\"problem signalled before \\\\\\\"\");");	# 12 MILline ($22:void)<-($23:str)
    fa_a := io.print("problem signalled before \\\"");	# 13 IOprint_val (fa_a:int)<-($25:str)
    mil.line("var t0:= \"got single quote \\' .\";\tt0.print();");	# 14 MILline ($26:void)<-($27:str)
    t0 := "got single quote \' .";	# 15  (t0:str)<-($13:str)
    ga_a := io.print(t0);	# 16 IOprint_val (ga_a:int)<-(t0:str)
    mil.line("var t1:= \"got single quote ' without escape\";\tt1.print();");	# 17 MILline ($30:void)<-($31:str)
    t1 := "got single quote ' without escape";	# 18  (t1:str)<-($17:str)
    ha_a := io.print(t1);	# 19 IOprint_val (ha_a:int)<-(t1:str)
    mil.line("var t2:= \"got tab \\t and single newline \\n .\"; t2.print();");	# 20 MILline ($34:void)<-($35:str)
    t2 := "got tab \t and single newline \n .";	# 21  (t2:str)<-($21:str)
    ia_a := io.print(t2);	# 22 IOprint_val (ia_a:int)<-(t2:str)
    mil.line("var t3:= \"problem signalled before \\\\\\\"\"; t3.print();");	# 23 MILline ($38:void)<-($39:str)
    t3 := "problem signalled before \\\"";	# 24  (t3:str)<-($25:str)
    ja_a := io.print(t3);	# 25 IOprint_val (ja_a:int)<-(t3:str)
    mil.line("# character constants\n");	# 26 MILline ($42:void)<-($43:str)
    c0 := "\n";	# 27  (c0:str)<-($45:str)
    ka_a := io.print(c0);	# 28 IOprint_val (ka_a:int)<-(c0:str)
    mil.line("var c1:= \"\\'\"; c1.print();");	# 29 MILline ($47:void)<-($48:str)
    c1 := "\'";	# 30  (c1:str)<-($50:str)
    la_a := io.print(c1);	# 31 IOprint_val (la_a:int)<-(c1:str)
    mil.line("var c2:= \"\\\\\"; c2.print();");	# 32 MILline ($52:void)<-($53:str)
    c2 := "\\";	# 33  (c2:str)<-($55:str)
    ma_a := io.print(c2);	# 34 IOprint_val (ma_a:int)<-(c2:str)
    mil.line("var s:=new(int,str,100);");	# 35 MILline ($57:void)<-($58:str)
    s := bbp.new(nil,"nil",100);	# 36 CMDBATnewint (s:bat[:int,:str])<-($60:int)($61:str)($62:int)
    mil.line("s.insert(2,\" single quote \\' got it\");");	# 37 MILline ($63:void)<-($64:str)
    na_a := bat.insert(s,2," single quote \' got it");	# 38 BKCinsert_bun (na_a:void)<-(s:bat[:int,:str])($66:int)($67:str)
    mil.line("s.insert(4,\" backslash  \\\\ \");");	# 39 MILline ($68:void)<-($69:str)
    oa_a := bat.insert(s,4," backslash  \\ ");	# 40 BKCinsert_bun (oa_a:void)<-(s:bat[:int,:str])($71:int)($72:str)
    mil.line("s.insert(3,\" single quote ' \");");	# 41 MILline ($73:void)<-($74:str)
    pa_a := bat.insert(s,3," single quote ' ");	# 42 BKCinsert_bun (pa_a:void)<-(s:bat[:int,:str])($76:int)($77:str)
    mil.line("s.print();");	# 43 MILline ($78:void)<-($79:str)
    qa_a := io.print(s);	# 44 IOprint_val (qa_a:int)<-(s:bat[:int,:str])
    mil.line("# Monet printf should behave as in C\n");	# 45 MILline ($81:void)<-($82:str)
    ra_a := io.printf("got single quote \' .\n");	# 46 IOprint_str (ra_a:int)<-($84:str)
    mil.line("# remove superfluous escapes\n");	# 47 MILline ($85:void)<-($86:str)
    sa_a := io.printf("got single quote ' without escape\n");	# 48 IOprint_str (sa_a:int)<-($88:str)
    mil.line("printf(\"got tab \\t and newline \\n .\\n\");");	# 49 MILline ($89:void)<-($90:str)
    ta_a := io.printf("got tab \t and newline \n .\n");	# 50 IOprint_str (ta_a:int)<-($92:str)
    mil.line("printf(\"problem signalled before \\\\\\\"\\n\");");	# 51 MILline ($93:void)<-($94:str)
    ua_a := io.printf("problem signalled before \\\"\n");	# 52 IOprint_str (ua_a:int)<-($96:str)
    mil.line("quit();");	# 53 MILline ($97:void)<-($98:str)
    va_a := clients.quit();	# 54 CLTquit (va_a:void)
end main;	# 55  
#setoid(oid(20000000));
## escape sequences
## first some basics, escaped characters are normalized
## first some basics, escaped characters are normalized
#
#print("got single quote \' .");	# remove superfluous escapes
[ "got single quote \\' ." ]
## remove superfluous escapes
#print("got single quote ' without escape");
[ "got single quote ' without escape" ]
#print("got tab \t and single newline \n .");
[ "got tab \\t and single newline \\n ." ]
#print("problem signalled before \\\"");
[ "problem signalled before \\\\\\\"" ]
#var t0:= "got single quote \' .";	t0.print();
[ "got single quote \\' ." ]
#var t1:= "got single quote ' without escape";	t1.print();
[ "got single quote ' without escape" ]
#var t2:= "got tab \t and single newline \n ."; t2.print();
[ "got tab \\t and single newline \\n ." ]
#var t3:= "problem signalled before \\\""; t3.print();
[ "problem signalled before \\\\\\\"" ]
## character constants
#var c0:= "\n"; c0.print();
[ "\\n" ]
#var c1:= "\'"; c1.print();
[ "\\'" ]
#var c2:= "\\"; c2.print();
[ "\\\\" ]
#var s:=new(int,str,100);
#s.insert(2," single quote \' got it");
#s.insert(4," backslash  \\ ");
#s.insert(3," single quote ' ");
#s.print();
#-----------------------------------------#
# BAT:	  tmp_25			  #
# (int)	  (str)				  #
#-----------------------------------------#
[ 2,	  " single quote \\' got it"	  ]
[ 4,	  " backslash  \\\\ "		  ]
[ 3,	  " single quote ' "		  ]
## Monet printf should behave as in C
#printf("got single quote \' .\n"); # remove superfluous escapes
got single quote \' .
## remove superfluous escapes
#printf("got single quote ' without escape\n");
got single quote ' without escape
#printf("got tab \t and newline \n .\n");
got tab 	 and newline 
 .
#printf("problem signalled before \\\"\n");
problem signalled before \\"
#quit();

# 15:18:43 >  
# 15:18:43 >  Done.
# 15:18:43 >  

