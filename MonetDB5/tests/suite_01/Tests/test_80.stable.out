stdout of test 'test_80` in directory 'tests/suite_01` itself:

#> Mtest:	milS test_80 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_01 -single test_80.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:test_80.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("#exercise simple loop\n");
#	mil.line("bats@batloop() {");
#	bats:= mil.take("bats");
#barrier	ca_a := bunStream(bats,ca_aH,ca_aT);
#	mil.line("\tprint(\"enter\");");
#	da_a := print("enter");
#	mil.line("        var tmp := bats.select($2);");
#	ea_a := mil.getVarTemp($2);
#	tmp := select(bats,ea_a);
#	mil.line("        tmp.print();");
#	fa_a := print(tmp);
#redo	ca_a;
#exit	ca_a;
#	mil.line("quit();");
#	ga_a := quit();
#print("test dropped: variable argument list ");
#
!ERROR: 'mil.getVarTemp' undefined in Admin.main[11]
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#exercise simple loop\n");	# 4 MILline ($6:void)<-($7:str)
    mil.line("bats@batloop() {");	# 5 MILline ($8:void)<-($9:str)
    bats := mil.take("bats");	# 6 MILtake (bats:any)<-($11:str)
barrier ca_a := chopper.bunStream(bats,ca_aH,ca_aT);	# 7 CHPbunStream (ca_a:lng)<-(bats:any)(ca_aH:any)(ca_aT:any) jump 16
    mil.line("\tprint(\"enter\");");	# 8 MILline ($15:void)<-($16:str)
    da_a := io.print("enter");	# 9 IOprint_val (da_a:int)<-($18:str)
    mil.line("        var tmp := bats.select($2);");	# 10 MILline ($19:void)<-($20:str)
    ea_a := mil.getVarTemp("setoid(oid(20000000));");	# 11  unknown (ea_a:any)<-($2:str)
    tmp := algebra.select(bats,ea_a);	# 12 ALGselect1 (tmp:bat[:any,:any])<-(bats:any)(ea_a:any)
    mil.line("        tmp.print();");	# 13 MILline ($23:void)<-($24:str)
    fa_a := io.print(tmp);	# 14 IOprint_val (fa_a:int)<-(tmp:bat[:any,:any])
    redo ca_a;	# 15  (ca_a:lng) jump 8
exit ca_a;	# 16  (ca_a:lng)
    mil.line("quit();");	# 17 MILline ($26:void)<-($27:str)
    ga_a := clients.quit();	# 18 CLTquit (ga_a:void)
    io.print("test dropped: variable argument list ");	# 19 IOprint_val ($29:int)<-($30:str)
end main;	# 20  
>
# 15:19:05 >  
# 15:19:05 >  Done.
# 15:19:05 >  

