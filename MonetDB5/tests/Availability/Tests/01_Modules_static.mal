# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#include "mil_prelude";
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("var Fname:=new(oid,str);\tFname.col_name(\"function\");");
	Fname := new(nil:oid,nil:str);
	ca_a := bat.setColumn(Fname,"function");
	mil.line("var FnameS:=new(oid,str);\tFnameS.col_name(\"function\");");
	FnameS := new(nil:oid,nil:str);
	da_a := bat.setColumn(FnameS,"function");
	mil.line("var Ftype:=new(oid,str);\tFtype.col_name(\"type\");");
	Ftype := new(nil:oid,nil:str);
	ea_a := bat.setColumn(Ftype,"type");
	mil.line("var Fmod:=new(oid,str);\t\tFmod.col_name(\"module\");");
	Fmod := new(nil:oid,nil:str);
	fa_a := bat.setColumn(Fmod,"module");
	mil.line("var Fsig:=new(oid,str);\t\tFsig.col_name(\"signature\");");
	Fsig := new(nil:oid,nil:str);
	ga_a := bat.setColumn(Fsig,"signature");
	mil.line("var Fhelp:=new(oid,str);\tFhelp.col_name(\"help\");");
	Fhelp := new(nil:oid,nil:str);
	ha_a := bat.setColumn(Fhelp,"help");
	mil.line("var Fnts:=new(oid,str);");
	Fnts := new(nil:oid,nil:str);
	mil.line("monet_fcntbl.sort()@batloop {");
	monet_fcntbl:= mil.take("monet_fcntbl");
	ia_a := sort(monet_fcntbl);
	mil.line("\tvar Tname:=$h;");
barrier	ja_a := bunStream(ia_a,ja_aH,ja_aT);
	Tname := ja_aH;
	mil.line("\tvar Ttype:=help_tpe(monet_fcn_tpe.find($t));");
	monet_fcn_tpe:= mil.take("monet_fcn_tpe");
	ka_a := find(monet_fcn_tpe,ja_aT);
	Ttype := help_tpe(ka_a);
	mil.line("\tvar Tmod:=\"\";");
	Tmod := "";
	mil.line("\tif (monet_fcn_mid.exist($t)) {");
	monet_fcn_mid:= mil.take("monet_fcn_mid");
barrier	la_a := exist(monet_fcn_mid,ja_aT);
	mil.line("\t\tTmod:=monet_mod_nme.find(monet_fcn_mid.find($t));");
	monet_mod_nme:= mil.take("monet_mod_nme");
	ma_a := find(monet_fcn_mid,ja_aT);
	Tmod := find(monet_mod_nme,ma_a);
	mil.line("\t\tif (Tmod.startsWith(\"_\")) {");
barrier	na_a := startsWith(Tmod,"_");
	mil.line("\t\t\tTmod := string(Tmod,1);");
	Tmod := string(Tmod,1);
	mil.line("\t} else {");
exit	na_a;
exit	la_a;
barrier	oa_a := not(la_a);
	mil.line("\t\tTmod:=\"\";");
	Tmod := "";
exit	oa_a;
	mil.line("\tvar Tsig:=format_fcn_sig($t);");
	Tsig := format_fcn_sig(ja_aT);
	mil.line("\tvar Thelp:=\"\";");
	Thelp := "";
	mil.line("\tif (monet_fcn_dsc.exist($t)) {");
	monet_fcn_dsc:= mil.take("monet_fcn_dsc");
barrier	pa_a := exist(monet_fcn_dsc,ja_aT);
	mil.line("\t\tThelp:=monet_fcn_dsc.find($t);");
	Thelp := find(monet_fcn_dsc,ja_aT);
	mil.line("\t} else {");
exit	pa_a;
barrier	qa_a := not(pa_a);
	mil.line("\t\tThelp:=\"not available\";");
	Thelp := "not available";
exit	qa_a;
	mil.line("\tFname.insert($t,Tname);");
	ra_a := insert(Fname,ja_aT,Tname);
	mil.line("\tFtype.insert($t,Ttype);");
	sa_a := insert(Ftype,ja_aT,Ttype);
	mil.line("\tFmod.insert($t,Tmod);");
	ta_a := insert(Fmod,ja_aT,Tmod);
	mil.line("\tFsig.insert($t,Tsig);");
	ua_a := insert(Fsig,ja_aT,Tsig);
	mil.line("\tFhelp.insert($t,Thelp);");
	va_a := insert(Fhelp,ja_aT,Thelp);
	mil.line("\tFnts.insert($t,sprintf(\"%s %s %s\",Tname,Ttype,Tsig));");
	wa_a := sprintf("%s %s %s",Tname,Ttype,Tsig);
	xa_a := insert(Fnts,ja_aT,wa_a);
redo	ja_a;
exit	ja_a;
	mil.line("Fnts.count().print();");
	ya_a := count(Fnts);
	ab_a := print(ya_a);
	mil.line("Fnts.reverse().sort().reverse()@batloop {");
	bb_a := reverse(Fnts);
	cb_a := sort(bb_a);
	db_a := reverse(cb_a);
	mil.line("\tFnameS.insert($h,Fname.find($h));");
barrier	eb_a := bunStream(db_a,eb_aH,eb_aT);
	fb_a := find(Fname,eb_aH);
	gb_a := insert(FnameS,eb_aH,fb_a);
redo	eb_a;
exit	eb_a;
	mil.line("FnameS.count().print();");
	hb_a := count(FnameS);
	ib_a := print(hb_a);
	mil.line("var All:=0;");
	All := 0;
	mil.line("var Static_mods:=Fmod.reverse().kunique().sort().copy();");
	jb_a := reverse(Fmod);
	kb_a := kunique(jb_a);
	lb_a := sort(kb_a);
	Static_mods := copy(lb_a);
	mil.line("table(Static_mods.reverse().col_name(sprintf(\"%i modules\",Static_mods.count())));");
	mb_a := count(Static_mods);
	nb_a := sprintf("%i modules",mb_a);
	ob_a := reverse(Static_mods);
	pb_a := bat.setColumn(ob_a,nb_a);
	qb_a := table(pb_a);
	mil.line("\tprintf(\"\\nModule: \\\"%s\\\"\\n\\n\",$h);");
barrier	rb_a := bunStream(Static_mods,rb_aH,rb_aT);
	sb_a := printf("\nModule: \"%s\"\n\n",rb_aH);
	mil.line("\tvar FnameM:=kintersect(FnameS,Fmod.select($h));FnameM.col_name(\"function\");");
	tb_a := select(Fmod,rb_aH);
	FnameM := kintersect(FnameS,tb_a);
	ub_a := bat.setColumn(FnameM,"function");
	mil.line("\tFnameM.count().print(); table(1,FnameM,Ftype,Fsig,Fhelp);");
	vb_a := count(FnameM);
	wb_a := print(vb_a);
	xb_a := table(1,FnameM,Ftype,Fsig,Fhelp);
	mil.line("\tAll:=All+FnameM.count();");
	yb_a := count(FnameM);
	All := +(All,yb_a);
redo	rb_a;
exit	rb_a;
	mil.line("All.print();");
	ac_a := print(All);
	mil.line("quit();");
	bc_a := quit();
#Identifer 'col_name' mapped to 'bat.setColumn'
