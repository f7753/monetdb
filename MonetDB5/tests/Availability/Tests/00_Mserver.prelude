# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(10000000));
	aa_a := oid(10000000);
	ba_a := setoid(aa_a);
#var MODULES:=new(str,str);
	MODULES := new(:str,:str);
#MODULES.rename("MODULES");
	ca_a := bat.setName(MODULES,"MODULES");
#MODULES.set(TRUE);
	da_a := bat.setSet(MODULES,true);
#MODULES.persists(TRUE);
	ea_a := persists(MODULES,true);
#MODULES.save();
	fa_a := save(MODULES,);
#MODULES.commit();
	ga_a := commit(MODULES,);
#view_modules.reverse().kunique().sort()@batloop { MODULES.insert($h,"UNKNOWN"); }
	view_modules:= mil.take("view_modules");
	ha_a := reverse(view_modules,);
	ia_a := kunique(ha_a,);
	ja_a := sort(ia_a,);
barrier	ka_a := bunStream(ja_a,ka_aH,ka_aT);
	la_a := insert(MODULES,ka_aH,"UNKNOWN");
redo	ka_a;
exit	ka_a;
#MODULES.replace("aggr",      "plain");
	ma_a := replace(MODULES,"aggr","plain");
#MODULES.replace("aggrX3",    "plain");
	na_a := replace(MODULES,"aggrX3","plain");
#MODULES.replace("alarm",     "plain");
	oa_a := replace(MODULES,"alarm","plain");
#MODULES.replace("algebra",   "plain");
	pa_a := replace(MODULES,"algebra","plain");
#MODULES.replace("arith",     "plain");
	qa_a := replace(MODULES,"arith","plain");
#MODULES.replace("ascii_io",  "plain");
	ra_a := replace(MODULES,"ascii_io","plain");
#MODULES.replace("bat_arith", "plain");
	sa_a := replace(MODULES,"bat_arith","plain");
#MODULES.replace("bat",       "plain");
	ta_a := replace(MODULES,"bat","plain");
#MODULES.replace("blob",      "plain");
	ua_a := replace(MODULES,"blob","plain");
#MODULES.replace("calib",     "plain");
	va_a := replace(MODULES,"calib","plain");
#MODULES.replace("counters",  "plain");
	wa_a := replace(MODULES,"counters","plain");
#MODULES.replace("decimal",   "plain");
	xa_a := replace(MODULES,"decimal","plain");
#MODULES.replace("enum",      "plain");
	ya_a := replace(MODULES,"enum","plain");
#MODULES.replace("io",        "plain");
	ab_a := replace(MODULES,"io","plain");
#MODULES.replace("kernel",    "plain");
	bb_a := replace(MODULES,"kernel","plain");
#MODULES.replace("lock",      "plain");
	cb_a := replace(MODULES,"lock","plain");
#MODULES.replace("mapi",      "plain");
	db_a := replace(MODULES,"mapi","plain");
#MODULES.replace("mkey",      "plain");
	eb_a := replace(MODULES,"mkey","plain");
#MODULES.replace("mmath",     "plain");
	fb_a := replace(MODULES,"mmath","plain");
#MODULES.replace("monettime", "plain");
	gb_a := replace(MODULES,"monettime","plain");
#MODULES.replace("pcl",       "plain");
	hb_a := replace(MODULES,"pcl","plain");
#MODULES.replace("profiler",  "plain");
	ib_a := replace(MODULES,"profiler","plain");
#MODULES.replace("radix",     "plain");
	jb_a := replace(MODULES,"radix","plain");
#MODULES.replace("salgebra",  "plain");
	kb_a := replace(MODULES,"salgebra","plain");
#MODULES.replace("stats",     "plain");
	lb_a := replace(MODULES,"stats","plain");
#MODULES.replace("streams",   "plain");
	mb_a := replace(MODULES,"streams","plain");
#MODULES.replace("sys",       "plain");
	nb_a := replace(MODULES,"sys","plain");
#MODULES.replace("tcpip",     "plain");
	ob_a := replace(MODULES,"tcpip","plain");
#MODULES.replace("trans",     "plain");
	pb_a := replace(MODULES,"trans","plain");
#MODULES.replace("unix",      "plain");
	qb_a := replace(MODULES,"unix","plain");
#MODULES.replace("url",       "plain");
	rb_a := replace(MODULES,"url","plain");
#MODULES.replace("xtables",   "plain");
	sb_a := replace(MODULES,"xtables","plain");
#MODULES.replace("array",     "contrib");
	tb_a := replace(MODULES,"array","contrib");
#MODULES.replace("bat_cast",  "contrib");
	ub_a := replace(MODULES,"bat_cast","contrib");
#MODULES.replace("bat_mmath", "contrib");
	vb_a := replace(MODULES,"bat_mmath","contrib");
#MODULES.replace("bitset",    "contrib");
	wb_a := replace(MODULES,"bitset","contrib");
#MODULES.replace("bitvector", "contrib");
	xb_a := replace(MODULES,"bitvector","contrib");
#MODULES.replace("cluster",   "contrib");
	yb_a := replace(MODULES,"cluster","contrib");
#MODULES.replace("color",     "contrib");
	ac_a := replace(MODULES,"color","contrib");
#MODULES.replace("ddbench",   "contrib");
	bc_a := replace(MODULES,"ddbench","contrib");
#MODULES.replace("image",     "contrib");
	cc_a := replace(MODULES,"image","contrib");
#MODULES.replace("iterator",  "contrib");
	dc_a := replace(MODULES,"iterator","contrib");
#MODULES.replace("malalgebra","contrib");
	ec_a := replace(MODULES,"malalgebra","contrib");
#MODULES.replace("mel",       "contrib");
	fc_a := replace(MODULES,"mel","contrib");
#MODULES.replace("mprof",     "contrib");
	gc_a := replace(MODULES,"mprof","contrib");
#MODULES.replace("oo7",       "contrib");
	hc_a := replace(MODULES,"oo7","contrib");
#MODULES.replace("uchr",      "contrib");
	ic_a := replace(MODULES,"uchr","contrib");
#MODULES.replace("qt",        "contrib");
	jc_a := replace(MODULES,"qt","contrib");
#MODULES.replace("tpcd",      "contrib");
	kc_a := replace(MODULES,"tpcd","contrib");
#MODULES.replace("txtsim",    "contrib");
	lc_a := replace(MODULES,"txtsim","contrib");
#MODULES.replace("vector",    "contrib");
	mc_a := replace(MODULES,"vector","contrib");
#MODULES.replace("wisc",      "contrib");
	nc_a := replace(MODULES,"wisc","contrib");
#MODULES.replace("CC_odmg",   "odmg");
	oc_a := replace(MODULES,"CC_odmg","odmg");
#MODULES.replace("jOdmg",     "odmg");
	pc_a := replace(MODULES,"jOdmg","odmg");
#MODULES.replace("odmg",      "odmg");
	qc_a := replace(MODULES,"odmg","odmg");
#MODULES.replace("signature" ,"odmg");
	rc_a := replace(MODULES,"signature","odmg");
#MODULES.replace("BasicOdmg" ,"odmgTest");
	sc_a := replace(MODULES,"BasicOdmg","odmgTest");
#MODULES.replace("CC_Test",   "odmgTest");
	tc_a := replace(MODULES,"CC_Test","odmgTest");
#MODULES.replace("Meta",      "odmgTest");
	uc_a := replace(MODULES,"Meta","odmgTest");
#MODULES.replace("Example",   "odmgTest");
	vc_a := replace(MODULES,"Example","odmgTest");
#MODULES.replace("OdmgTest",  "odmgTest");
	wc_a := replace(MODULES,"OdmgTest","odmgTest");
#MODULES.replace("Test7",     "odmgTest");
	xc_a := replace(MODULES,"Test7","odmgTest");
#MODULES.replace("TestUse",   "odmgTest");
	yc_a := replace(MODULES,"TestUse","odmgTest");
#MODULES.replace("TransTest", "odmgTest");
	ad_a := replace(MODULES,"TransTest","odmgTest");
function mmn():bat[:oid,:str];
#	return(monet_mod_nme.kdiff(monet_mod_nme.[startsWith]("_").uselect(true)));
	monet_mod_nme:= mil.take("monet_mod_nme");
	bd_a := multiplex.tactics(monet_mod_nme,"startsWith","_");
	cd_a := uselect(bd_a,true);
	dd_a := kdiff(monet_mod_nme,cd_a);
	return ed_a :=dd_a;
end mmn;
#mmn()@batloop { MODULES.replace($t,"static"); }
	fd_a := mmn();
barrier	gd_a := bunStream(fd_a,gd_aH,gd_aT);
	MODULES:= mil.take("MODULES");
	hd_a := replace(MODULES,gd_aT,"static");
redo	gd_a;
exit	gd_a;
#MODULES.save();
	id_a := save(MODULES,);
#MODULES.commit();
	jd_a := commit(MODULES,);
#MODULES.sort().print();
	kd_a := sort(MODULES,);
	ld_a := print(kd_a,);
#commit();
	md_a := commit();
#Identifer 'rename' mapped to 'bat.setName'
#Identifer 'set' mapped to 'bat.setSet'
