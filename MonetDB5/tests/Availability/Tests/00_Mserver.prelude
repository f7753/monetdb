# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#include "mil_prelude";
	mil.line("setoid(oid(10000000));");
	aa_a := oid(10000000);
	ba_a := setoid(aa_a);
	mil.line("var MODULES:=new(str,str);");
	MODULES := new(nil:str,nil:str);
	mil.line("MODULES.rename(\"MODULES\");");
	ca_a := bat.setName(MODULES,"MODULES");
	mil.line("MODULES.set(TRUE);");
	da_a := bat.setSet(MODULES,true);
	mil.line("MODULES.persists(TRUE);");
	ea_a := persists(MODULES,true);
	mil.line("MODULES.save();");
	fa_a := save(MODULES);
	mil.line("MODULES.commit();");
	ga_a := commit(MODULES);
	mil.line("view_modules.reverse().kunique().sort()@batloop { MODULES.insert($h,\"UNKNOWN\"); }");
	view_modules:= mil.take("view_modules");
	ha_a := reverse(view_modules);
	ia_a := kunique(ha_a);
	ja_a := sort(ia_a);
barrier	ka_a := bunStream(ja_a,ka_aH,ka_aT);
	la_a := insert(MODULES,ka_aH,"UNKNOWN");
redo	ka_a;
exit	ka_a;
	mil.line("MODULES.replace(\"aggr\",      \"plain\");");
	ma_a := replace(MODULES,"aggr","plain");
	mil.line("MODULES.replace(\"aggrX3\",    \"plain\");");
	na_a := replace(MODULES,"aggrX3","plain");
	mil.line("MODULES.replace(\"alarm\",     \"plain\");");
	oa_a := replace(MODULES,"alarm","plain");
	mil.line("MODULES.replace(\"algebra\",   \"plain\");");
	pa_a := replace(MODULES,"algebra","plain");
	mil.line("MODULES.replace(\"arith\",     \"plain\");");
	qa_a := replace(MODULES,"arith","plain");
	mil.line("MODULES.replace(\"ascii_io\",  \"plain\");");
	ra_a := replace(MODULES,"ascii_io","plain");
	mil.line("MODULES.replace(\"bat_arith\", \"plain\");");
	sa_a := replace(MODULES,"bat_arith","plain");
	mil.line("MODULES.replace(\"bat\",       \"plain\");");
	ta_a := replace(MODULES,"bat","plain");
	mil.line("MODULES.replace(\"blob\",      \"plain\");");
	ua_a := replace(MODULES,"blob","plain");
	mil.line("MODULES.replace(\"calib\",     \"plain\");");
	va_a := replace(MODULES,"calib","plain");
	mil.line("MODULES.replace(\"counters\",  \"plain\");");
	wa_a := replace(MODULES,"counters","plain");
	mil.line("MODULES.replace(\"decimal\",   \"plain\");");
	xa_a := replace(MODULES,"decimal","plain");
	mil.line("MODULES.replace(\"enum\",      \"plain\");");
	ya_a := replace(MODULES,"enum","plain");
	mil.line("MODULES.replace(\"io\",        \"plain\");");
	ab_a := replace(MODULES,"io","plain");
	mil.line("MODULES.replace(\"kernel\",    \"plain\");");
	bb_a := replace(MODULES,"kernel","plain");
	mil.line("MODULES.replace(\"lock\",      \"plain\");");
	cb_a := replace(MODULES,"lock","plain");
	mil.line("MODULES.replace(\"mapi\",      \"plain\");");
	db_a := replace(MODULES,"mapi","plain");
	mil.line("MODULES.replace(\"mkey\",      \"plain\");");
	eb_a := replace(MODULES,"mkey","plain");
	mil.line("MODULES.replace(\"mmath\",     \"plain\");");
	fb_a := replace(MODULES,"mmath","plain");
	mil.line("MODULES.replace(\"monettime\", \"plain\");");
	gb_a := replace(MODULES,"monettime","plain");
	mil.line("MODULES.replace(\"pcl\",       \"plain\");");
	hb_a := replace(MODULES,"pcl","plain");
	mil.line("MODULES.replace(\"profiler\",  \"plain\");");
	ib_a := replace(MODULES,"profiler","plain");
	mil.line("MODULES.replace(\"radix\",     \"plain\");");
	jb_a := replace(MODULES,"radix","plain");
	mil.line("MODULES.replace(\"salgebra\",  \"plain\");");
	kb_a := replace(MODULES,"salgebra","plain");
	mil.line("MODULES.replace(\"stats\",     \"plain\");");
	lb_a := replace(MODULES,"stats","plain");
	mil.line("MODULES.replace(\"streams\",   \"plain\");");
	mb_a := replace(MODULES,"streams","plain");
	mil.line("MODULES.replace(\"sys\",       \"plain\");");
	nb_a := replace(MODULES,"sys","plain");
	mil.line("MODULES.replace(\"tcpip\",     \"plain\");");
	ob_a := replace(MODULES,"tcpip","plain");
	mil.line("MODULES.replace(\"trans\",     \"plain\");");
	pb_a := replace(MODULES,"trans","plain");
	mil.line("MODULES.replace(\"unix\",      \"plain\");");
	qb_a := replace(MODULES,"unix","plain");
	mil.line("MODULES.replace(\"url\",       \"plain\");");
	rb_a := replace(MODULES,"url","plain");
	mil.line("MODULES.replace(\"xtables\",   \"plain\");");
	sb_a := replace(MODULES,"xtables","plain");
	mil.line("MODULES.replace(\"array\",     \"contrib\");");
	tb_a := replace(MODULES,"array","contrib");
	mil.line("MODULES.replace(\"bat_cast\",  \"contrib\");");
	ub_a := replace(MODULES,"bat_cast","contrib");
	mil.line("MODULES.replace(\"bat_mmath\", \"contrib\");");
	vb_a := replace(MODULES,"bat_mmath","contrib");
	mil.line("MODULES.replace(\"bitset\",    \"contrib\");");
	wb_a := replace(MODULES,"bitset","contrib");
	mil.line("MODULES.replace(\"bitvector\", \"contrib\");");
	xb_a := replace(MODULES,"bitvector","contrib");
	mil.line("MODULES.replace(\"cluster\",   \"contrib\");");
	yb_a := replace(MODULES,"cluster","contrib");
	mil.line("MODULES.replace(\"color\",     \"contrib\");");
	ac_a := replace(MODULES,"color","contrib");
	mil.line("MODULES.replace(\"ddbench\",   \"contrib\");");
	bc_a := replace(MODULES,"ddbench","contrib");
	mil.line("MODULES.replace(\"image\",     \"contrib\");");
	cc_a := replace(MODULES,"image","contrib");
	mil.line("MODULES.replace(\"iterator\",  \"contrib\");");
	dc_a := replace(MODULES,"iterator","contrib");
	mil.line("MODULES.replace(\"malalgebra\",\"contrib\");");
	ec_a := replace(MODULES,"malalgebra","contrib");
	mil.line("MODULES.replace(\"mel\",       \"contrib\");");
	fc_a := replace(MODULES,"mel","contrib");
	mil.line("MODULES.replace(\"mprof\",     \"contrib\");");
	gc_a := replace(MODULES,"mprof","contrib");
	mil.line("MODULES.replace(\"oo7\",       \"contrib\");");
	hc_a := replace(MODULES,"oo7","contrib");
	mil.line("MODULES.replace(\"uchr\",      \"contrib\");");
	ic_a := replace(MODULES,"uchr","contrib");
	mil.line("MODULES.replace(\"qt\",        \"contrib\");");
	jc_a := replace(MODULES,"qt","contrib");
	mil.line("MODULES.replace(\"tpcd\",      \"contrib\");");
	kc_a := replace(MODULES,"tpcd","contrib");
	mil.line("MODULES.replace(\"txtsim\",    \"contrib\");");
	lc_a := replace(MODULES,"txtsim","contrib");
	mil.line("MODULES.replace(\"vector\",    \"contrib\");");
	mc_a := replace(MODULES,"vector","contrib");
	mil.line("MODULES.replace(\"wisc\",      \"contrib\");");
	nc_a := replace(MODULES,"wisc","contrib");
	mil.line("#MODULES.replace(\"gdkmem\",    \"misc\");\n");
	mil.line("#MODULES.replace(\"vector\",    \"misc\");");
	mil.line("#MODULES.replace(\"vector\",    \"misc\");\n");
	mil.line("MODULES.replace(\"CC_odmg\",   \"odmg\");");
	oc_a := replace(MODULES,"CC_odmg","odmg");
	mil.line("MODULES.replace(\"jOdmg\",     \"odmg\");");
	pc_a := replace(MODULES,"jOdmg","odmg");
	mil.line("MODULES.replace(\"odmg\",      \"odmg\");");
	qc_a := replace(MODULES,"odmg","odmg");
	mil.line("MODULES.replace(\"signature\" ,\"odmg\");");
	rc_a := replace(MODULES,"signature","odmg");
	mil.line("MODULES.replace(\"BasicOdmg\" ,\"odmgTest\");");
	sc_a := replace(MODULES,"BasicOdmg","odmgTest");
	mil.line("MODULES.replace(\"CC_Test\",   \"odmgTest\");");
	tc_a := replace(MODULES,"CC_Test","odmgTest");
	mil.line("MODULES.replace(\"Meta\",      \"odmgTest\");");
	uc_a := replace(MODULES,"Meta","odmgTest");
	mil.line("MODULES.replace(\"Example\",   \"odmgTest\");");
	vc_a := replace(MODULES,"Example","odmgTest");
	mil.line("MODULES.replace(\"OdmgTest\",  \"odmgTest\");");
	wc_a := replace(MODULES,"OdmgTest","odmgTest");
	mil.line("MODULES.replace(\"Test7\",     \"odmgTest\");");
	xc_a := replace(MODULES,"Test7","odmgTest");
	mil.line("MODULES.replace(\"TestUse\",   \"odmgTest\");");
	yc_a := replace(MODULES,"TestUse","odmgTest");
	mil.line("MODULES.replace(\"TransTest\", \"odmgTest\");");
	ad_a := replace(MODULES,"TransTest","odmgTest");
	mil.line("#MODULES.replace(\"gis\",       \"geometry\");\n");
	mil.line("#MODULES.replace(\"gisbulk\",   \"geometry\");");
	mil.line("#MODULES.replace(\"gisbulk\",   \"geometry\");\n");
	mil.line("#MODULES.replace(\"blg\",       \"geometry\");");
	mil.line("#MODULES.replace(\"blg\",       \"geometry\");\n");
	mil.line("#MODULES.replace(\"fmap\",      \"geometry\");");
	mil.line("#MODULES.replace(\"fmap\",      \"geometry\");\n");
	mil.line("#MODULES.replace(\"opengis\",   \"geometry\");");
	mil.line("#MODULES.replace(\"opengis\",   \"geometry\");\n");
	mil.line("#MODULES.replace(\"tdcel\",     \"geometry\");");
	mil.line("#MODULES.replace(\"tdcel\",     \"geometry\");\n");
	mil.line("");
	mil.line("PROC mmn() : BAT[oid,str] {");
function mmn():bat[:oid,:str];
	mil.line("\treturn(monet_mod_nme.kdiff(monet_mod_nme.[startsWith](\"_\").uselect(true)));");
	monet_mod_nme:= mil.take("monet_mod_nme");
	bd_a := multiplex.tactics("startsWith",monet_mod_nme,"_");
	cd_a := uselect(bd_a,true);
	dd_a := kdiff(monet_mod_nme,cd_a);
	return ed_a :=dd_a;
end mmn;
	mil.line("mmn()@batloop { MODULES.replace($t,\"static\"); }");
	fd_a := mmn();
barrier	gd_a := bunStream(fd_a,gd_aH,gd_aT);
	MODULES:= mil.take("MODULES");
	hd_a := replace(MODULES,gd_aT,"static");
redo	gd_a;
exit	gd_a;
	mil.line("#MODULES.delete(\"CC_Test\");\n");
	mil.line("#MODULES.delete(\"Test\");");
	mil.line("#MODULES.delete(\"Test\");\n");
	mil.line("");
	mil.line("MODULES.save();");
	id_a := save(MODULES);
	mil.line("MODULES.commit();");
	jd_a := commit(MODULES);
	mil.line("MODULES.sort().print();");
	kd_a := sort(MODULES);
	ld_a := print(kd_a);
	mil.line("commit();");
	md_a := commit();
#Identifer 'rename' mapped to 'bat.setName'
#Identifer 'set' mapped to 'bat.setSet'
