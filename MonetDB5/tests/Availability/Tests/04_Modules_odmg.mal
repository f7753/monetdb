# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#include "mil_prelude";
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("var Static_fcn:=monet_fcntbl.reverse().copy();");
	monet_fcntbl:= mil.take("monet_fcntbl");
	ca_a := reverse(monet_fcntbl);
	Static_fcn := copy(ca_a);
	mil.line("var Fname:=new(oid,str);\tFname.col_name(\"function\");");
	Fname := new(nil:oid,nil:str);
	da_a := bat.setColumn(Fname,"function");
	mil.line("var FnameS:=new(oid,str);\tFnameS.col_name(\"function\");");
	FnameS := new(nil:oid,nil:str);
	ea_a := bat.setColumn(FnameS,"function");
	mil.line("var Ftype:=new(oid,str);\tFtype.col_name(\"type\");");
	Ftype := new(nil:oid,nil:str);
	fa_a := bat.setColumn(Ftype,"type");
	mil.line("var Fsig:=new(oid,str);\t\tFsig.col_name(\"signature\");");
	Fsig := new(nil:oid,nil:str);
	ga_a := bat.setColumn(Fsig,"signature");
	mil.line("var Fhelp:=new(oid,str);\tFhelp.col_name(\"help\");");
	Fhelp := new(nil:oid,nil:str);
	ha_a := bat.setColumn(Fhelp,"help");
	mil.line("var Fnts:=new(oid,str);");
	Fnts := new(nil:oid,nil:str);
	mil.line("var Odmg_mods:=MODULES.select(\"odmg\").sort().copy();");
	MODULES:= mil.take("MODULES");
	ia_a := select(MODULES,"odmg");
	ja_a := sort(ia_a);
	Odmg_mods := copy(ja_a);
	mil.line("#Odmg_mods.access(BAT_WRITE).revert;\n");
	mil.line("table(Odmg_mods.reverse().col_name(sprintf(\"%i modules\",Odmg_mods.count())));");
	ka_a := count(Odmg_mods);
	la_a := sprintf("%i modules",ka_a);
	ma_a := reverse(Odmg_mods);
	na_a := bat.setColumn(ma_a,la_a);
	oa_a := table(na_a);
	mil.line("\tvar The_mod:=$h;");
barrier	pa_a := bunStream(Odmg_mods,pa_aH,pa_aT);
	The_mod := pa_aH;
	mil.line("\tprintf(\"\\nModule: \\\"%s\\\"\\n\\n\",The_mod);");
	qa_a := printf("\nModule: \"%s\"\n\n",The_mod);
!ERROR: "	module($h);"
!        								^
! syntax error, unexpected TOK_MODULE.
#Identifer 'col_name' mapped to 'bat.setColumn'
