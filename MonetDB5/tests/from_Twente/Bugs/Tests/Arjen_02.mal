# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(2000@0);
	aa_a := setoid(2000@0);
#var a := new( void, int );
	a := new(:void,:int);
#a.insert( nil, 0 );
	nil:= mil.take("nil");
	ba_a := insert(a,nil,0);
#a.insert( nil, 1 );
	ca_a := insert(a,nil,1);
#a.insert( nil, 2 );
	da_a := insert(a,nil,2);
#a.seqbase(0@0).print();
	ea_a := bat.setSequenceBase(a,0@0);
	fa_a := print(ea_a,);
#var A := 0;
	A := 0;
#var aA := [=]( a, A );   aA.print();
	aA := multiplex.tactics("=",a,A);
	ga_a := print(aA,);
#var aA2 := uselect(aA, true).mark(0@0);   aA2.print();
	ha_a := uselect(aA,true);
	aA2 := mark(ha_a,0@0);
	ia_a := print(aA2,);
#print(a.info().access(BAT_WRITE).delete("batBuns.base").col_name("a"),aA.info().col_name("aA"),aA2.info().col_name("aA2"));
	BAT_WRITE:= mil.take("BAT_WRITE");
	ja_a := info(a,);
	ka_a := access(ja_a,BAT_WRITE);
	la_a := delete(ka_a,"batBuns.base");
	ma_a := bat.setColumn(la_a,"a");
	na_a := info(aA,);
	oa_a := bat.setColumn(na_a,"aA");
	pa_a := info(aA2,);
	qa_a := bat.setColumn(pa_a,"aA2");
	ra_a := print(ma_a,oa_a,qa_a);
#A := 1;
	A := 1;
#aA := [=]( a, A );   aA.print();
	aA := multiplex.tactics("=",a,A);
	sa_a := print(aA,);
#aA2 := uselect(aA, true).mark(0@0);   aA2.print();
	ta_a := uselect(aA,true);
	aA2 := mark(ta_a,0@0);
	ua_a := print(aA2,);
#print(a.info().access(BAT_WRITE).delete("batBuns.base").col_name("a"),aA.info().col_name("aA"),aA2.info().col_name("aA2"));
	va_a := info(a,);
	wa_a := access(va_a,BAT_WRITE);
	xa_a := delete(wa_a,"batBuns.base");
	ya_a := bat.setColumn(xa_a,"a");
	ab_a := info(aA,);
	bb_a := bat.setColumn(ab_a,"aA");
	cb_a := info(aA2,);
	db_a := bat.setColumn(cb_a,"aA2");
	eb_a := print(ya_a,bb_a,db_a);
#A := 2;
	A := 2;
#aA := [=]( a, A );   aA.print();
	aA := multiplex.tactics("=",a,A);
	fb_a := print(aA,);
#aA2 := uselect(aA, true).mark(0@0);   aA2.print();
	gb_a := uselect(aA,true);
	aA2 := mark(gb_a,0@0);
	hb_a := print(aA2,);
#print(a.info().access(BAT_WRITE).delete("batBuns.base").col_name("a"),aA.info().col_name("aA"),aA2.info().col_name("aA2"));
	ib_a := info(a,);
	jb_a := access(ib_a,BAT_WRITE);
	kb_a := delete(jb_a,"batBuns.base");
	lb_a := bat.setColumn(kb_a,"a");
	mb_a := info(aA,);
	nb_a := bat.setColumn(mb_a,"aA");
	ob_a := info(aA2,);
	pb_a := bat.setColumn(ob_a,"aA2");
	qb_a := print(lb_a,nb_a,pb_a);
#quit();
	rb_a := quit();
#Identifer 'col_name' mapped to 'bat.setColumn'
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
