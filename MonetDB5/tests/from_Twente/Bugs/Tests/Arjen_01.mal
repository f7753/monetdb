# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("#\n");
	mil.line("# This program should select the valuesA that are larger than 20 and smaller\n");
	mil.line("# than 30. But, _MMjoin_8 is constructed incorrectly, maybe due to\n");
	mil.line("# property-propagation.\n");
	mil.line("#\n");
	mil.line("# Arjen (arjen@cs.utwente.nl)\n");
	mil.line("#\n");
	mil.line("# Initialization:\n");
	mil.line("setoid(2000@0);");
	aa_a := setoid(2000@0);
	mil.line("var indexA  := new(void,oid);");
	indexA := new(nil:void,nil:oid);
	mil.line("var valuesA := new(void,int);");
	valuesA := new(nil:void,nil:int);
	mil.line("indexA.insert(nil,0@0);");
	ba_a := insert(indexA,nil,0@0);
	mil.line("indexA.insert(nil,1@0);");
	ca_a := insert(indexA,nil,1@0);
	mil.line("indexA.insert(nil,2@0);");
	da_a := insert(indexA,nil,2@0);
	mil.line("indexA.insert(nil,3@0);");
	ea_a := insert(indexA,nil,3@0);
	mil.line("valuesA.insert(nil,10);");
	fa_a := insert(valuesA,nil,10);
	mil.line("valuesA.insert(nil,20);");
	ga_a := insert(valuesA,nil,20);
	mil.line("valuesA.insert(nil,30);");
	ha_a := insert(valuesA,nil,30);
	mil.line("valuesA.insert(nil,40);");
	ia_a := insert(valuesA,nil,40);
	mil.line("indexA.seqbase(0@0);");
	ja_a := bat.setSequenceBase(indexA,0@0);
	mil.line("valuesA.seqbase(0@0);");
	ka_a := bat.setSequenceBase(valuesA,0@0);
	mil.line("indexA.print();");
	la_a := print(indexA);
	mil.line("valuesA.print();");
	ma_a := print(valuesA);
	mil.line("# Test:\n");
	mil.line("var _MMoper_2 := [>=](valuesA,20);   _MMoper_2.print();");
	_MMoper_2 := multiplex.tactics(">=",valuesA,20);
	na_a := print(_MMoper_2);
	mil.line("var _MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);   _MMuselect_3.print();");
	oa_a := uselect(_MMoper_2,true);
	_MMuselect_3 := mark(oa_a,0@0);
	pa_a := print(_MMuselect_3);
	mil.line("var _MMoper_4 := [<=](valuesA,30);   _MMoper_4.print();");
	_MMoper_4 := multiplex.tactics("<=",valuesA,30);
	qa_a := print(_MMoper_4);
	mil.line("var _MMuselect_5 := uselect(_MMoper_4,true).mark(0@0);   _MMuselect_5.print();");
	ra_a := uselect(_MMoper_4,true);
	_MMuselect_5 := mark(ra_a,0@0);
	sa_a := print(_MMuselect_5);
	mil.line("var _MMsemijoin_6 := semijoin(_MMuselect_3,_MMuselect_5);   _MMsemijoin_6.print();");
	_MMsemijoin_6 := semijoin(_MMuselect_3,_MMuselect_5);
	ta_a := print(_MMsemijoin_6);
	mil.line("var _MMcastnil_7 := _MMsemijoin_6.mark(0@0);   _MMcastnil_7.print();");
	_MMcastnil_7 := mark(_MMsemijoin_6,0@0);
	ua_a := print(_MMcastnil_7);
	mil.line("var _MMjoin_8 := join(indexA,_MMcastnil_7);   _MMjoin_8.print();");
	_MMjoin_8 := join(indexA,_MMcastnil_7);
	va_a := print(_MMjoin_8);
	mil.line("var _MMreverse_9 := reverse(_MMcastnil_7);   _MMreverse_9.print();");
	_MMreverse_9 := reverse(_MMcastnil_7);
	wa_a := print(_MMreverse_9);
	mil.line("var _MMjoin_10 := join(_MMreverse_9,valuesA);   _MMjoin_10.print();");
	_MMjoin_10 := join(_MMreverse_9,valuesA);
	xa_a := print(_MMjoin_10);
	mil.line("# This gives <0,10>,<1,20> instead of <0,20>,<0,30>\n");
	mil.line("# The cause is that _MMjoin_8 has 0,1 instead of 1,2:\n");
	mil.line("print(indexA.info().access(BAT_WRITE).delete(\"batBuns.base\").delete(\"void_cnt\").delete(\"void_tid\").col_name(\"indexA\"),");
	BAT_WRITE:= mil.take("BAT_WRITE");
	ya_a := info(indexA);
	ab_a := access(ya_a,BAT_WRITE);
	bb_a := delete(ya_a,"batBuns.base");
	cb_a := delete(ya_a,"void_cnt");
	db_a := delete(ya_a,"void_tid");
	eb_a := bat.setColumn(ya_a,"indexA");
	mil.line("      valuesA.info().col_name(\"valuesA\"),");
	fb_a := info(valuesA);
	gb_a := bat.setColumn(fb_a,"valuesA");
	mil.line("      _MMoper_2.info().col_name(\"MMoper_2\"),");
	hb_a := info(_MMoper_2);
	ib_a := bat.setColumn(hb_a,"MMoper_2");
	mil.line("      _MMuselect_3.info().col_name(\"MMuselect_3\"),");
	jb_a := info(_MMuselect_3);
	kb_a := bat.setColumn(jb_a,"MMuselect_3");
	mil.line("      _MMoper_4.info().col_name(\"MMoper_4\"),");
	lb_a := info(_MMoper_4);
	mb_a := bat.setColumn(lb_a,"MMoper_4");
	mil.line("      _MMuselect_5.info().col_name(\"MMuselect_5\"),");
	nb_a := info(_MMuselect_5);
	ob_a := bat.setColumn(nb_a,"MMuselect_5");
	mil.line("      _MMsemijoin_6.info().col_name(\"MMsemijoin_6\"),");
	pb_a := info(_MMsemijoin_6);
	qb_a := bat.setColumn(pb_a,"MMsemijoin_6");
	mil.line("      _MMcastnil_7.info().col_name(\"MMcastnil_7\"),");
	rb_a := info(_MMcastnil_7);
	sb_a := bat.setColumn(rb_a,"MMcastnil_7");
	mil.line("      _MMjoin_8.info().col_name(\"MMjoin_8\"),");
	tb_a := info(_MMjoin_8);
	ub_a := bat.setColumn(tb_a,"MMjoin_8");
	mil.line("      _MMreverse_9.info().col_name(\"MMreverse_9\"),");
	vb_a := info(_MMreverse_9);
	wb_a := bat.setColumn(vb_a,"MMreverse_9");
	mil.line("      _MMjoin_10.info().col_name(\"MMjoin_10\"));");
	xb_a := info(_MMjoin_10);
	yb_a := bat.setColumn(xb_a,"MMjoin_10");
	ac_a := print(eb_a,gb_a,ib_a,kb_a,mb_a,ob_a,qb_a,sb_a,ub_a,wb_a,yb_a);
	mil.line("quit();");
	bc_a := quit();
#Identifer 'col_name' mapped to 'bat.setColumn'
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
