# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#var indexA  := new(void,oid);
	indexA := new(:void,:oid);
#var valuesA := new(void,int);
	valuesA := new(:void,:int);
#var valuesD := new(void,int);
	valuesD := new(:void,:int);
#var indexB  := new(oid,oid);
	indexB := new(:oid,:oid);
#var valuesB := new(oid,int);
	valuesB := new(:oid,:int);
#var indexC  := new(void,oid);
	indexC := new(:void,:oid);
#var valuesC := new(void,int);
	valuesC := new(:void,:int);
#var BAindex := new(void,oid);
	BAindex := new(:void,:oid);
#indexA.insert(nil,0@0);
	nil:= mil.take("nil");
	aa_a := insert(indexA,nil,0@0);
#indexA.insert(nil,1@0);
	ba_a := insert(indexA,nil,1@0);
#indexA.insert(nil,2@0);
	ca_a := insert(indexA,nil,2@0);
#indexA.insert(nil,3@0);
	da_a := insert(indexA,nil,3@0);
#valuesA.insert(nil,10);
	ea_a := insert(valuesA,nil,10);
#valuesA.insert(nil,20);
	fa_a := insert(valuesA,nil,20);
#valuesA.insert(nil,30);
	ga_a := insert(valuesA,nil,30);
#valuesA.insert(nil,40);
	ha_a := insert(valuesA,nil,40);
#indexA.seqbase(0@0);
	ia_a := bat.setSequenceBase(indexA,0@0);
#valuesA.seqbase(0@0);
	ja_a := bat.setSequenceBase(valuesA,0@0);
#BAindex.insert(nil,1001@0);
	ka_a := insert(BAindex,nil,1001@0);
#BAindex.insert(nil,1002@0);
	la_a := insert(BAindex,nil,1002@0);
#BAindex.insert(nil,1003@0);
	ma_a := insert(BAindex,nil,1003@0);
#BAindex.insert(nil,1003@0);
	na_a := insert(BAindex,nil,1003@0);
#BAindex.seqbase(0@0);
	oa_a := bat.setSequenceBase(BAindex,0@0);
#valuesD.insert(nil,20);
	pa_a := insert(valuesD,nil,20);
#valuesD.insert(nil,30);
	qa_a := insert(valuesD,nil,30);
#valuesD.insert(nil,40);
	ra_a := insert(valuesD,nil,40);
#valuesD.insert(nil,10);
	sa_a := insert(valuesD,nil,10);
#valuesD.seqbase(0@0);
	ta_a := bat.setSequenceBase(valuesD,0@0);
#indexC.insert(nil,0@0);
	ua_a := insert(indexC,nil,0@0);
#indexC.insert(nil,1@0);
	va_a := insert(indexC,nil,1@0);
#indexC.insert(nil,2@0);
	wa_a := insert(indexC,nil,2@0);
#indexC.insert(nil,3@0);
	xa_a := insert(indexC,nil,3@0);
#valuesC.insert(nil,10);
	ya_a := insert(valuesC,nil,10);
#valuesC.insert(nil,10);
	ab_a := insert(valuesC,nil,10);
#valuesC.insert(nil,30);
	bb_a := insert(valuesC,nil,30);
#valuesC.insert(nil,50);
	cb_a := insert(valuesC,nil,50);
#valuesC.seqbase(0@0);
	db_a := bat.setSequenceBase(valuesC,0@0);
#indexB.insert(0@0,409@0);
	eb_a := insert(indexB,0@0,409@0);
#indexB.insert(1@0,408@0);
	fb_a := insert(indexB,1@0,408@0);
#indexB.insert(2@0,407@0);
	gb_a := insert(indexB,2@0,407@0);
#indexB.insert(2@0,406@0);
	hb_a := insert(indexB,2@0,406@0);
#indexB.insert(2@0,405@0);
	ib_a := insert(indexB,2@0,405@0);
#indexB.insert(3@0,404@0);
	jb_a := insert(indexB,3@0,404@0);
#indexB.insert(3@0,403@0);
	kb_a := insert(indexB,3@0,403@0);
#indexB.insert(3@0,402@0);
	lb_a := insert(indexB,3@0,402@0);
#indexB.insert(3@0,401@0);
	mb_a := insert(indexB,3@0,401@0);
#valuesB.insert(409@0,9000);
	nb_a := insert(valuesB,409@0,9000);
#valuesB.insert(408@0,8000);
	ob_a := insert(valuesB,408@0,8000);
#valuesB.insert(407@0,7000);
	pb_a := insert(valuesB,407@0,7000);
#valuesB.insert(406@0,6000);
	qb_a := insert(valuesB,406@0,6000);
#valuesB.insert(405@0,5000);
	rb_a := insert(valuesB,405@0,5000);
#valuesB.insert(404@0,4000);
	sb_a := insert(valuesB,404@0,4000);
#valuesB.insert(403@0,3000);
	tb_a := insert(valuesB,403@0,3000);
#valuesB.insert(402@0,2000);
	ub_a := insert(valuesB,402@0,2000);
#valuesB.insert(401@0,1000);
	vb_a := insert(valuesB,401@0,1000);
#indexA.print();
	wb_a := print(indexA,);
#valuesA.find(0@0).print();
	xb_a := find(valuesA,0@0);
	yb_a := print(xb_a,);
#valuesD.find(0@0).print();
	ac_a := find(valuesD,0@0);
	bc_a := print(ac_a,);
#valuesA.find(1@0).print();
	cc_a := find(valuesA,1@0);
	dc_a := print(cc_a,);
#valuesD.find(1@0).print();
	ec_a := find(valuesD,1@0);
	fc_a := print(ec_a,);
#valuesA.find(2@0).print();
	gc_a := find(valuesA,2@0);
	hc_a := print(gc_a,);
#valuesD.find(2@0).print();
	ic_a := find(valuesD,2@0);
	jc_a := print(ic_a,);
#valuesA.find(3@0).print();
	kc_a := find(valuesA,3@0);
	lc_a := print(kc_a,);
#valuesD.find(3@0).print();
	mc_a := find(valuesD,3@0);
	nc_a := print(mc_a,);
#indexA.print();
	oc_a := print(indexA,);
#valuesD.find(0@0).print();
	pc_a := find(valuesD,0@0);
	qc_a := print(pc_a,);
#valuesD.find(1@0).print();
	rc_a := find(valuesD,1@0);
	sc_a := print(rc_a,);
#valuesD.find(2@0).print();
	tc_a := find(valuesD,2@0);
	uc_a := print(tc_a,);
#valuesD.find(3@0).print();
	vc_a := find(valuesD,3@0);
	wc_a := print(vc_a,);
#indexA.print();
	xc_a := print(indexA,);
#valuesD.find(0@0).print();
	yc_a := find(valuesD,0@0);
	ad_a := print(yc_a,);
#valuesD.find(1@0).print();
	bd_a := find(valuesD,1@0);
	cd_a := print(bd_a,);
#valuesD.find(2@0).print();
	dd_a := find(valuesD,2@0);
	ed_a := print(dd_a,);
#valuesD.find(3@0).print();
	fd_a := find(valuesD,3@0);
	gd_a := print(fd_a,);
#var _MMoper_2 := [+](valuesD,valuesA);
	_MMoper_2 := multiplex.tactics("+",valuesD,valuesA);
#var _MMoper_3 := [-](valuesD,valuesA);
	_MMoper_3 := multiplex.tactics("-",valuesD,valuesA);
#var _MMoper_4 := [*](_MMoper_2,_MMoper_3);
	_MMoper_4 := multiplex.tactics("*",_MMoper_2,_MMoper_3);
#indexA.print();
	hd_a := print(indexA,);
#_MMoper_4.find(0@0).print();
	id_a := find(_MMoper_4,0@0);
	jd_a := print(id_a,);
#_MMoper_4.find(1@0).print();
	kd_a := find(_MMoper_4,1@0);
	ld_a := print(kd_a,);
#_MMoper_4.find(2@0).print();
	md_a := find(_MMoper_4,2@0);
	nd_a := print(md_a,);
#_MMoper_4.find(3@0).print();
	od_a := find(_MMoper_4,3@0);
	pd_a := print(od_a,);
!ERROR: "_MMoper_2.print();"
!        ^
! syntax error, unexpected ',', expecting ')'.
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
