stdout of test 'test_01` in directory 'tests/suite_06` itself:

#> Mtest:	milS test_01 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_06 -single test_01.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:test_01.milS

# 19:56:42 >  
# 19:56:42 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux//var/MonetDB5/log" --set mapi_port=43717 --set sql_port=51212 --set monet_prompt= --trace --dbname=mTests_tests_suite_06  test_01.mal </dev/null
# 19:56:42 >  





!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock.
!WARNING: BBPdir: initializing BBP.
# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_06
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("#check out arithmatic against using Multi-cast operator\n");
#	mil.line("");
#	mil.line("var t:= new(int, int);");
#	t := new(nil:int,nil:int);
#	mil.line("t.insert(1,2);");
#	ca_a := insert(t,1,2);
#	mil.line("t.insert(3,6);");
#	da_a := insert(t,3,6);
#	mil.line("t.insert(13,14);");
#	ea_a := insert(t,13,14);
#	mil.line("t.insert(17,16);");
#	fa_a := insert(t,17,16);
#	mil.line("t.insert(19,18);");
#	ga_a := insert(t,19,18);
#	mil.line("t.insert(5,8);");
#	ha_a := insert(t,5,8);
#	mil.line("t.insert(7,10);");
#	ia_a := insert(t,7,10);
#	mil.line("t.insert(2,4);");
#	ja_a := insert(t,2,4);
#	mil.line("t.insert(11,12);");
#	ka_a := insert(t,11,12);
#	mil.line("var z:= t[+]t;");
#	z := multiplex.tactics("+",t,t);
#	mil.line("z.print();");
#	la_a := print(z);
#	mil.line("z:= t [*] z;");
#	z := multiplex.tactics("*",t,z);
#	mil.line("z.print();");
#	ma_a := print(z);
#	mil.line("z:= t [/] t;");
#	z := multiplex.tactics("/",t,t);
#	mil.line("z.print();");
#	na_a := print(z);
#	mil.line("quit();");
#	oa_a := quit();
#
function user.main():int;	# 0  (main:int)
# Monet Mil to Mal compiler 	# 1  ($2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  ($4:str)
#Predefined code segment 	# 3  ($6:str)
#The compiler can not guarantee an accurate compilation, 	# 4  ($8:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  ($10:str)
#A few guidelines to maximize usefullness. 	# 6  ($12:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  ($14:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  ($16:str)
#include "mil_prelude"; 	# 9  ($18:str)
    mil.line("setoid(oid(20000000));");	# 10 MILline ($19:void)<-($20:str)
    aa_a := calc.oid(20000000);	# 11 CALCint2oid (aa_a:oid)<-($22:int)
    ba_a := calc.setoid(aa_a);	# 12 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#check out arithmatic against using Multi-cast operator\n");	# 13 MILline ($24:void)<-($25:str)
    mil.line("");	# 14 MILline ($26:void)<-($27:str)
    mil.line("var t:= new(int, int);");	# 15 MILline ($28:void)<-($29:str)
    t := bbp.new(nil:int,nil:int);	# 16 CMDBATnew (t:bat[:int,:int])<-($31:int)($31:int)
    mil.line("t.insert(1,2);");	# 17 MILline ($32:void)<-($33:str)
    ca_a := bat.insert(t,1,2);	# 18 BKCinsert_bun (ca_a:bat[:int,:int])<-(t:bat[:int,:int])($35:int)($36:int)
    mil.line("t.insert(3,6);");	# 19 MILline ($37:void)<-($38:str)
    da_a := bat.insert(t,3,6);	# 20 BKCinsert_bun (da_a:bat[:int,:int])<-(t:bat[:int,:int])($40:int)($41:int)
    mil.line("t.insert(13,14);");	# 21 MILline ($42:void)<-($43:str)
    ea_a := bat.insert(t,13,14);	# 22 BKCinsert_bun (ea_a:bat[:int,:int])<-(t:bat[:int,:int])($45:int)($46:int)
    mil.line("t.insert(17,16);");	# 23 MILline ($47:void)<-($48:str)
    fa_a := bat.insert(t,17,16);	# 24 BKCinsert_bun (fa_a:bat[:int,:int])<-(t:bat[:int,:int])($50:int)($51:int)
    mil.line("t.insert(19,18);");	# 25 MILline ($52:void)<-($53:str)
    ga_a := bat.insert(t,19,18);	# 26 BKCinsert_bun (ga_a:bat[:int,:int])<-(t:bat[:int,:int])($55:int)($56:int)
    mil.line("t.insert(5,8);");	# 27 MILline ($57:void)<-($58:str)
    ha_a := bat.insert(t,5,8);	# 28 BKCinsert_bun (ha_a:bat[:int,:int])<-(t:bat[:int,:int])($60:int)($61:int)
    mil.line("t.insert(7,10);");	# 29 MILline ($62:void)<-($63:str)
    ia_a := bat.insert(t,7,10);	# 30 BKCinsert_bun (ia_a:bat[:int,:int])<-(t:bat[:int,:int])($65:int)($66:int)
    mil.line("t.insert(2,4);");	# 31 MILline ($67:void)<-($68:str)
    ja_a := bat.insert(t,2,4);	# 32 BKCinsert_bun (ja_a:bat[:int,:int])<-(t:bat[:int,:int])($70:int)($71:int)
    mil.line("t.insert(11,12);");	# 33 MILline ($72:void)<-($73:str)
    ka_a := bat.insert(t,11,12);	# 34 BKCinsert_bun (ka_a:bat[:int,:int])<-(t:bat[:int,:int])($75:int)($76:int)
    mil.line("var z:= t[+]t;");	# 35 MILline ($77:void)<-($78:str)
    z := batcalc.+(t,t);	# 36 CMDbatADD (z:bat[:int,:int])<-(t:bat[:int,:int])(t:bat[:int,:int])
    mil.line("z.print();");	# 37 MILline ($80:void)<-($81:str)
    la_a := io.print(z);	# 38 IOprint_val (la_a:int)<-(z:bat[:int,:int])
    mil.line("z:= t [*] z;");	# 39 MILline ($83:void)<-($84:str)
    z := batcalc.*(t,z);	# 40 CMDbatMUL (z:bat[:int,:int])<-(t:bat[:int,:int])(z:bat[:int,:int])
    mil.line("z.print();");	# 41 MILline ($85:void)<-($81:str)
    ma_a := io.print(z);	# 42 IOprint_val (ma_a:int)<-(z:bat[:int,:int])
    mil.line("z:= t [/] t;");	# 43 MILline ($87:void)<-($88:str)
    z := batcalc./(t,t);	# 44 CMDbatDIV (z:bat[:int,:int])<-(t:bat[:int,:int])(t:bat[:int,:int])
    mil.line("z.print();");	# 45 MILline ($89:void)<-($81:str)
    na_a := io.print(z);	# 46 IOprint_val (na_a:int)<-(z:bat[:int,:int])
    mil.line("quit();");	# 47 MILline ($91:void)<-($92:str)
    oa_a := clients.quit();	# 48 CLTquit (oa_a:void)
end main;	# 49  
#setoid(oid(20000000));
##check out arithmatic against using Multi-cast operator
#
#var t:= new(int, int);
#t.insert(1,2);
#t.insert(3,6);
#t.insert(13,14);
#t.insert(17,16);
#t.insert(19,18);
#t.insert(5,8);
#t.insert(7,10);
#t.insert(2,4);
#t.insert(11,12);
#var z:= t[+]t;
#z.print();
#-----------------#
# BAT:	  tmp_26  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  4	  ]
[ 3,	  12	  ]
[ 13,	  28	  ]
[ 17,	  32	  ]
[ 19,	  36	  ]
[ 5,	  16	  ]
[ 7,	  20	  ]
[ 2,	  8	  ]
[ 11,	  24	  ]
#z:= t [*] z;
#z.print();
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  8	  ]
[ 3,	  72	  ]
[ 13,	  392	  ]
[ 17,	  512	  ]
[ 19,	  648	  ]
[ 5,	  128	  ]
[ 7,	  200	  ]
[ 2,	  32	  ]
[ 11,	  288	  ]
#z:= t [/] t;
#z.print();
#-----------------#
# BAT:	  tmp_26  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 3,	  1	  ]
[ 13,	  1	  ]
[ 17,	  1	  ]
[ 19,	  1	  ]
[ 5,	  1	  ]
[ 7,	  1	  ]
[ 2,	  1	  ]
[ 11,	  1	  ]

# 19:56:42 >  
# 19:56:42 >  Done.
# 19:56:42 >  

