# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#var t:= new(int, int);
	t := new(:int,:int);
#t.insert(1,2);
	ca_a := insert(t,1,2);
#t.insert(3,6);
	da_a := insert(t,3,6);
#t.insert(13,14);
	ea_a := insert(t,13,14);
#t.insert(17,16);
	fa_a := insert(t,17,16);
#t.insert(19,18);
	ga_a := insert(t,19,18);
#t.insert(5,8);
	ha_a := insert(t,5,8);
#t.insert(7,10);
	ia_a := insert(t,7,10);
#t.insert(2,4);
	ja_a := insert(t,2,4);
#t.insert(11,12);
	ka_a := insert(t,11,12);
#var z:= t[+]t;
	z := multiplex.tactics("+",t,t);
#z.print();
	la_a := print(z,);
#z:= t [*] z;
	z := multiplex.tactics("*",t,z);
#z.print();
	ma_a := print(z,);
#z:= t [/] t;
	z := multiplex.tactics("/",t,t);
#z.print();
	na_a := print(z,);
#quit();
	oa_a := quit();
