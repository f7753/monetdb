stdout of test 'no.169` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.169 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.169.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.169.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# 
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("# \n");
#	mil.line("#>Number:         169");
#	mil.line("#>Number:         169\n");
#	mil.line("#>Category:       Mserver");
#	mil.line("#>Category:       Mserver\n");
#	mil.line("#>Synopsis:       str(nil).print hangs");
#	mil.line("#>Synopsis:       str(nil).print hangs\n");
#	mil.line("#>Confidential:   no");
#	mil.line("#>Confidential:   no\n");
#	mil.line("#>Severity:       critical");
#	mil.line("#>Severity:       critical\n");
#	mil.line("#>Priority:       high");
#	mil.line("#>Priority:       high\n");
#	mil.line("#>Responsible:    boncz (Peter Boncz)");
#	mil.line("#>Responsible:    boncz (Peter Boncz)\n");
#	mil.line("#>State:          open");
#	mil.line("#>State:          open\n");
#	mil.line("#>Class:          sw-bug");
#	mil.line("#>Class:          sw-bug\n");
#	mil.line("#>Submitter-Id:   unknown");
#	mil.line("#>Submitter-Id:   unknown\n");
#	mil.line("#>Arrival-Date:   Thu Sep  3 15:30:20 1998");
#	mil.line("#>Arrival-Date:   Thu Sep  3 15:30:20 1998\n");
#	mil.line("#>Originator:     windhouw@cwi.nl");
#	mil.line("#>Originator:     windhouw@cwi.nl\n");
#	mil.line("#>Organization:");
#	mil.line("#>Organization:\n");
#	mil.line("#CWI");
#	mil.line("#CWI\n");
#	mil.line("#>Release:        980101");
#	mil.line("#>Release:        980101\n");
#	mil.line("#>Environment:");
#	mil.line("#>Environment:\n");
#	mil.line("#IRIX646.5");
#	mil.line("#IRIX646.5\n");
#	mil.line("#>Description:");
#	mil.line("#>Description:\n");
#	mil.line("#On the medusa (IRIX646.5 64bit) the following");
#	mil.line("#On the medusa (IRIX646.5 64bit) the following\n");
#	mil.line("#script hangs Mserver:");
#	mil.line("#script hangs Mserver:\n");
#	mil.line("#> str(nil).print;");
#	mil.line("#> str(nil).print;\n");
#	mil.line("#[ nil ]");
#	mil.line("#[ nil ]\n");
#	mil.line("#>How-To-Repeat:");
#	mil.line("#>How-To-Repeat:\n");
#	mil.line("#>Fix:");
#	mil.line("#>Fix:\n");
#	mil.line("#>Audit-Trail:");
#	mil.line("#>Audit-Trail:\n");
#	mil.line("#>Unformatted:");
#	mil.line("#>Unformatted:\n");
#	mil.line("");
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("str(nil).print();");
#	ca_a := str(nil);
#	da_a := print(ca_a);
#	mil.line("quit();");
#	ea_a := quit();
#
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  ($32:str)
#Predefined code segment 	# 2  ($34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  ($36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  ($38:str)
#A few guidelines to maximize usefullness. 	# 5  ($40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  ($42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  ($44:str)
#use the "mil_schema" for additional support routines 	# 8  ($46:str)
    mil.line("# \n");	# 9 MILline ($47:void)<-($48:str)
    mil.line("#>Number:         169\n");	# 10 MILline ($49:void)<-($50:str)
    mil.line("#>Category:       Mserver\n");	# 11 MILline ($51:void)<-($52:str)
    mil.line("#>Synopsis:       calc.str(nil).print hangs\n");	# 12 MILline ($53:void)<-($54:str)
    mil.line("#>Confidential:   no\n");	# 13 MILline ($55:void)<-($56:str)
    mil.line("#>Severity:       critical\n");	# 14 MILline ($57:void)<-($58:str)
    mil.line("#>Priority:       high\n");	# 15 MILline ($59:void)<-($60:str)
    mil.line("#>Responsible:    boncz (Peter Boncz)\n");	# 16 MILline ($61:void)<-($62:str)
    mil.line("#>State:          open\n");	# 17 MILline ($63:void)<-($64:str)
    mil.line("#>Class:          sw-bug\n");	# 18 MILline ($65:void)<-($66:str)
    mil.line("#>Submitter-Id:   unknown\n");	# 19 MILline ($67:void)<-($68:str)
    mil.line("#>Arrival-Date:   Thu Sep  3 15:30:20 1998\n");	# 20 MILline ($69:void)<-($70:str)
    mil.line("#>Originator:     windhouw@cwi.nl\n");	# 21 MILline ($71:void)<-($72:str)
    mil.line("#>Organization:\n");	# 22 MILline ($73:void)<-($74:str)
    mil.line("#CWI\n");	# 23 MILline ($75:void)<-($76:str)
    mil.line("#>Release:        980101\n");	# 24 MILline ($77:void)<-($78:str)
    mil.line("#>Environment:\n");	# 25 MILline ($79:void)<-($80:str)
    mil.line("#IRIX646.5\n");	# 26 MILline ($81:void)<-($82:str)
    mil.line("#>Description:\n");	# 27 MILline ($83:void)<-($84:str)
    mil.line("#On the medusa (IRIX646.5 64bit) the following\n");	# 28 MILline ($85:void)<-($86:str)
    mil.line("#script hangs Mserver:\n");	# 29 MILline ($87:void)<-($88:str)
    mil.line("#> calc.str(nil).print;\n");	# 30 MILline ($89:void)<-($90:str)
    mil.line("#[ nil ]\n");	# 31 MILline ($91:void)<-($92:str)
    mil.line("#>How-To-Repeat:\n");	# 32 MILline ($93:void)<-($94:str)
    mil.line("#>Fix:\n");	# 33 MILline ($95:void)<-($96:str)
    mil.line("#>Audit-Trail:\n");	# 34 MILline ($97:void)<-($98:str)
    mil.line("#>Unformatted:\n");	# 35 MILline ($99:void)<-($100:str)
    mil.line("setoid(oid(20000000));");	# 36 MILline ($101:void)<-($102:str)
    aa_a := calc.oid(20000000);	# 37 CALCint2oid (aa_a:oid)<-($104:int)
    ba_a := calc.setoid(aa_a);	# 38 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("str(nil).print();");	# 39 MILline ($106:void)<-($107:str)
    ca_a := calc.str(nil);	# 40 CALCnil2str (ca_a:str)<-($109:void)
    da_a := io.print(ca_a);	# 41 IOprint_val (da_a:int)<-(ca_a:str)
    mil.line("quit();");	# 42 MILline ($111:void)<-($112:str)
    ea_a := clients.quit();	# 43 CLTquit (ea_a:void)
end main;	# 44  
## \n
##>Number:         169\n
##>Category:       Mserver\n
##>Synopsis:       calc.str(nil).print hangs\n
##>Confidential:   no\n
##>Severity:       critical\n
##>Priority:       high\n
##>Responsible:    boncz (Peter Boncz)\n
##>State:          open\n
##>Class:          sw-bug\n
##>Submitter-Id:   unknown\n
##>Arrival-Date:   Thu Sep  3 15:30:20 1998\n
##>Originator:     windhouw@cwi.nl\n
##>Organization:\n
##CWI\n
##>Release:        980101\n
##>Environment:\n
##IRIX646.5\n
##>Description:\n
##On the medusa (IRIX646.5 64bit) the following\n
##script hangs Mserver:\n
##> calc.str(nil).print;\n
##[ nil ]\n
##>How-To-Repeat:\n
##>Fix:\n
##>Audit-Trail:\n
##>Unformatted:\n
#setoid(oid(20000000));
#str(nil).print();
[ nil ]

# 08:27:59 >  
# 08:27:59 >  Done.
# 08:27:59 >  

