# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
function create(b:bat[:any,:any]):bat[:any,:any];
#        var a := new (oid,flt);
	a := new(:oid,:flt);
#        b@batloop(){
barrier	aa_a := bunStream(b,aa_aH,aa_aT);
#                if (a.count() = 0)
	ba_a := count(a,);
barrier	ca_a := =(ba_a,0);
#                        return a;
	return da_a :=a;
exit	ca_a;
redo	aa_a;
exit	aa_a;
#        return a;
	return ea_a :=a;
end create;
#var b := new (oid,flt);
	b := new(:oid,:flt);
#b.insert(oid(1),flt(2));
	fa_a := oid(1);
	ga_a := flt(2);
	ha_a := insert(b,fa_a,ga_a);
#b.print();
	ia_a := print(b,);
#var c := create(b);
	c := create(b);
#b.print();
	ja_a := print(b,);
#c.print();
	ka_a := print(c,);
#b.semijoin(c).print();
	la_a := semijoin(b,c);
	ma_a := print(la_a,);
#quit();
	na_a := quit();
