stdout of test 'no.119` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.119 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.119.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.119.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("# >Number:         119\n");
#	mil.line("# >Category:       Module_kernel");
#	mil.line("# >Category:       Module_kernel\n");
#	mil.line("# >Synopsis:       thetajoin gives incorrect output");
#	mil.line("# >Synopsis:       thetajoin gives incorrect output\n");
#	mil.line("# >Confidential:   no");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       serious");
#	mil.line("# >Severity:       serious\n");
#	mil.line("# >Priority:       medium");
#	mil.line("# >Priority:       medium\n");
#	mil.line("# >Responsible:    boncz");
#	mil.line("# >Responsible:    boncz\n");
#	mil.line("# >State:          open");
#	mil.line("# >State:          open\n");
#	mil.line("# >Class:          sw-bug");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Wed Feb 11 11:26:18 1998");
#	mil.line("# >Arrival-Date:   Wed Feb 11 11:26:18 1998\n");
#	mil.line("# >Originator:     niels");
#	mil.line("# >Originator:     niels\n");
#	mil.line("# >Organization:");
#	mil.line("# >Organization:\n");
#	mil.line("# CWI");
#	mil.line("# CWI\n");
#	mil.line("# >Release:        971007");
#	mil.line("# >Release:        971007\n");
#	mil.line("# >Environment:");
#	mil.line("# >Environment:\n");
#	mil.line("# All");
#	mil.line("# All\n");
#	mil.line("# >Description:");
#	mil.line("# >Description:\n");
#	mil.line("# Simple script ");
#	mil.line("# Simple script \n");
#	mil.line("# a.insert(1,2);");
#	mil.line("# a.insert(1,2);\n");
#	mil.line("# a.insert(2,1);");
#	mil.line("# a.insert(2,1);\n");
#	mil.line("# a.thetajoin(a,LT).print();");
#	mil.line("# a.thetajoin(a,LT).print();\n");
#	mil.line("# 2 1");
#	mil.line("# 2 1\n");
#	mil.line("# 2 2");
#	mil.line("# 2 2\n");
#	mil.line("# 1 1 ");
#	mil.line("# 1 1 \n");
#	mil.line("# 1 2");
#	mil.line("# 1 2\n");
#	mil.line("");
#	mil.line("# Since this report was submitted, thetajoin has grown a 4th argument:\n");
#	mil.line("# the estimated length of the result");
#	mil.line("# the estimated length of the result\n");
#	mil.line("");
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("var a := new(int,int);");
#	a := new(nil:int,nil:int);
#	mil.line("a.insert(1,3);");
#	ca_a := insert(a,1,3);
#	mil.line("a.insert(2,2);");
#	da_a := insert(a,2,2);
#	mil.line("a.insert(3,1);");
#	ea_a := insert(a,3,1);
#	mil.line("a.thetajoin(a,LT,lng(nil)).print();");
#	LT:= mil.take("LT");
#	fa_a := lng(nil);
#	ga_a := thetajoin(a,a,LT,fa_a);
#	ha_a := print(ga_a);
#	mil.line("a.thetajoin(a,LE,lng(nil)).print();");
#	LE:= mil.take("LE");
#	ia_a := lng(nil);
#	ja_a := thetajoin(a,a,LE,ia_a);
#	ka_a := print(ja_a);
#	mil.line("a.thetajoin(a,EQ,lng(nil)).print();");
#	EQ:= mil.take("EQ");
#	la_a := lng(nil);
#	ma_a := thetajoin(a,a,EQ,la_a);
#	na_a := print(ma_a);
#	mil.line("a.thetajoin(a,GE,lng(nil)).print();");
#	GE:= mil.take("GE");
#	oa_a := lng(nil);
#	pa_a := thetajoin(a,a,GE,oa_a);
#	qa_a := print(pa_a);
#	mil.line("a.thetajoin(a,GT,lng(nil)).print();");
#	GT:= mil.take("GT");
#	ra_a := lng(nil);
#	sa_a := thetajoin(a,a,GT,ra_a);
#	ta_a := print(sa_a);
#	mil.line("quit();");
#	ua_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("# >Number:         119\n");	# 1 MILline ($1:void)<-($2:str)
    mil.line("# >Category:       Module_kernel\n");	# 2 MILline ($3:void)<-($4:str)
    mil.line("# >Synopsis:       thetajoin gives incorrect output\n");	# 3 MILline ($5:void)<-($6:str)
    mil.line("# >Confidential:   no\n");	# 4 MILline ($7:void)<-($8:str)
    mil.line("# >Severity:       serious\n");	# 5 MILline ($9:void)<-($10:str)
    mil.line("# >Priority:       medium\n");	# 6 MILline ($11:void)<-($12:str)
    mil.line("# >Responsible:    boncz\n");	# 7 MILline ($13:void)<-($14:str)
    mil.line("# >State:          open\n");	# 8 MILline ($15:void)<-($16:str)
    mil.line("# >Class:          sw-bug\n");	# 9 MILline ($17:void)<-($18:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Arrival-Date:   Wed Feb 11 11:26:18 1998\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Originator:     niels\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Organization:\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# CWI\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Release:        971007\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >Environment:\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# All\n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >Description:\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# Simple script \n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# a.insert(1,2);\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# a.insert(2,1);\n");	# 21 MILline ($41:void)<-($42:str)
    mil.line("# a.thetajoin(a,LT).print();\n");	# 22 MILline ($43:void)<-($44:str)
    mil.line("# 2 1\n");	# 23 MILline ($45:void)<-($46:str)
    mil.line("# 2 2\n");	# 24 MILline ($47:void)<-($48:str)
    mil.line("# 1 1 \n");	# 25 MILline ($49:void)<-($50:str)
    mil.line("# 1 2\n");	# 26 MILline ($51:void)<-($52:str)
    mil.line("# Since this report was submitted, thetajoin has grown a 4th argument:\n");	# 27 MILline ($53:void)<-($54:str)
    mil.line("# the estimated length of the result\n");	# 28 MILline ($55:void)<-($56:str)
    mil.line("setoid(oid(20000000));");	# 29 MILline ($57:void)<-($58:str)
    aa_a := calc.oid(20000000);	# 30 CALCint2oid (aa_a:oid)<-($60:int)
    ba_a := calc.setoid(aa_a);	# 31 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("var a := new(int,int);");	# 32 MILline ($62:void)<-($63:str)
    a := bbp.new(nil:int,nil:int);	# 33 CMDBATnew (a:bat[:int,:int])<-($65:int)($65:int)
    mil.line("a.insert(1,3);");	# 34 MILline ($66:void)<-($67:str)
    ca_a := bat.insert(a,1,3);	# 35 BKCinsert_bun (ca_a:void)<-(a:bat[:int,:int])($69:int)($70:int)
    mil.line("a.insert(2,2);");	# 36 MILline ($71:void)<-($72:str)
    da_a := bat.insert(a,2,2);	# 37 BKCinsert_bun (da_a:void)<-(a:bat[:int,:int])($74:int)($74:int)
    mil.line("a.insert(3,1);");	# 38 MILline ($75:void)<-($76:str)
    ea_a := bat.insert(a,3,1);	# 39 BKCinsert_bun (ea_a:void)<-(a:bat[:int,:int])($70:int)($69:int)
    mil.line("a.thetajoin(a,LT,lng(nil)).print();");	# 40 MILline ($78:void)<-($79:str)
    LT := mil.take("LT");	# 41 MILtake (LT:any)<-($81:str)
    fa_a := calc.lng(nil);	# 42 CALCnil2lng (fa_a:lng)<-($83:void)
    ga_a := algebra.thetajoin(a,a,LT,fa_a);	# 43 ALGthetajoinEstimate (ga_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(LT:any)(fa_a:lng)
    ha_a := io.print(ga_a);	# 44 IOprint_val (ha_a:int)<-(ga_a:bat[:int,:int])
    mil.line("a.thetajoin(a,LE,lng(nil)).print();");	# 45 MILline ($86:void)<-($87:str)
    LE := mil.take("LE");	# 46 MILtake (LE:any)<-($89:str)
    ia_a := calc.lng(nil);	# 47 CALCnil2lng (ia_a:lng)<-($83:void)
    ja_a := algebra.thetajoin(a,a,LE,ia_a);	# 48 ALGthetajoinEstimate (ja_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(LE:any)(ia_a:lng)
    ka_a := io.print(ja_a);	# 49 IOprint_val (ka_a:int)<-(ja_a:bat[:int,:int])
    mil.line("a.thetajoin(a,EQ,lng(nil)).print();");	# 50 MILline ($93:void)<-($94:str)
    EQ := mil.take("EQ");	# 51 MILtake (EQ:any)<-($96:str)
    la_a := calc.lng(nil);	# 52 CALCnil2lng (la_a:lng)<-($83:void)
    ma_a := algebra.thetajoin(a,a,EQ,la_a);	# 53 ALGthetajoinEstimate (ma_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(EQ:any)(la_a:lng)
    na_a := io.print(ma_a);	# 54 IOprint_val (na_a:int)<-(ma_a:bat[:int,:int])
    mil.line("a.thetajoin(a,GE,lng(nil)).print();");	# 55 MILline ($100:void)<-($101:str)
    GE := mil.take("GE");	# 56 MILtake (GE:any)<-($103:str)
    oa_a := calc.lng(nil);	# 57 CALCnil2lng (oa_a:lng)<-($83:void)
    pa_a := algebra.thetajoin(a,a,GE,oa_a);	# 58 ALGthetajoinEstimate (pa_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(GE:any)(oa_a:lng)
    qa_a := io.print(pa_a);	# 59 IOprint_val (qa_a:int)<-(pa_a:bat[:int,:int])
    mil.line("a.thetajoin(a,GT,lng(nil)).print();");	# 60 MILline ($107:void)<-($108:str)
    GT := mil.take("GT");	# 61 MILtake (GT:any)<-($110:str)
    ra_a := calc.lng(nil);	# 62 CALCnil2lng (ra_a:lng)<-($83:void)
    sa_a := algebra.thetajoin(a,a,GT,ra_a);	# 63 ALGthetajoinEstimate (sa_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(GT:any)(ra_a:lng)
    ta_a := io.print(sa_a);	# 64 IOprint_val (ta_a:int)<-(sa_a:bat[:int,:int])
    mil.line("quit();");	# 65 MILline ($114:void)<-($115:str)
    ua_a := clients.quit();	# 66 CLTquit (ua_a:void)
end main;	# 67  
## >Number:         119
## >Category:       Module_kernel
## >Category:       Module_kernel
## >Synopsis:       thetajoin gives incorrect output
## >Synopsis:       thetajoin gives incorrect output
## >Confidential:   no
## >Confidential:   no
## >Severity:       serious
## >Severity:       serious
## >Priority:       medium
## >Priority:       medium
## >Responsible:    boncz
## >Responsible:    boncz
## >State:          open
## >State:          open
## >Class:          sw-bug
## >Class:          sw-bug
## >Submitter-Id:   unknown
## >Submitter-Id:   unknown
## >Arrival-Date:   Wed Feb 11 11:26:18 1998
## >Arrival-Date:   Wed Feb 11 11:26:18 1998
## >Originator:     niels
## >Originator:     niels
## >Organization:
## >Organization:
## CWI
## CWI
## >Release:        971007
## >Release:        971007
## >Environment:
## >Environment:
## All
## All
## >Description:
## >Description:
## Simple script 
## Simple script 
## a.insert(1,2);
## a.insert(1,2);
## a.insert(2,1);
## a.insert(2,1);
## a.thetajoin(a,LT).print();
## a.thetajoin(a,LT).print();
## 2 1
## 2 1
## 2 2
## 2 2
## 1 1 
## 1 1 
## 1 2
## 1 2
#
## Since this report was submitted, thetajoin has grown a 4th argument:
## the estimated length of the result
## the estimated length of the result
#
#setoid(oid(20000000));
#var a := new(int,int);
#a.insert(1,3);
#a.insert(2,2);
#a.insert(3,1);
#a.thetajoin(a,LT,lng(nil)).print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  1	  ]
[ 3,	  2	  ]
[ 3,	  1	  ]
#a.thetajoin(a,LE,lng(nil)).print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 3,	  2	  ]
[ 3,	  1	  ]
#a.thetajoin(a,EQ,lng(nil)).print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  3	  ]
#a.thetajoin(a,GE,lng(nil)).print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  3	  ]
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  3	  ]
[ 2,	  2	  ]
[ 3,	  3	  ]
#a.thetajoin(a,GT,lng(nil)).print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  3	  ]
[ 1,	  2	  ]
[ 2,	  3	  ]
#quit();

# 17:06:57 >  
# 17:06:57 >  Done.
# 17:06:57 >  

