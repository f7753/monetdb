# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#VAR left := new(int,int);
	left := new(:int,:int);
#left.insert(4,-3);
	ca_a := insert(left,4,-3);
#left.insert(3,-2);
	da_a := insert(left,3,-2);
#left.insert(2,-1);
	ea_a := insert(left,2,-1);
#left.insert(1,0);
	fa_a := insert(left,1,0);
#VAR right := new(int,str);
	right := new(:int,:str);
#right.insert(-3,"vier");
	ga_a := insert(right,-3,"vier");
#right.insert(-2,"drie");
	ha_a := insert(right,-2,"drie");
#right.insert(-1,"twee");
	ia_a := insert(right,-1,"twee");
#right.insert(0,"een");
	ja_a := insert(right,0,"een");
#join(left,right).print();
	ka_a := join(left,right);
	la_a := print(ka_a,);
#quit();
	ma_a := quit();
