stdout of test 'no.062` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.062 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.062.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 19:36:03 MET 2000.
#script:no.062.milS


# Monet Database Server V4.7.3
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
# 
# >Description:
# Handlin>t:= new(int,int);
# >t.insert(0,0);
# >t.insert(1+1,0);
# >t.insert(-1,-0);
# >print(t);
# #-----------------#
# # int   | tmp_32  #
# #-----------------#
# [ 0,      0       ]
# [ 2,      0       ]
# [ -1,     0       ]
# ># alles zover is goed
# >t.insert(-1+1,0);
# >t.insert(-1-1,0);
# !ERROR: in syntax at "t.insert(-1-1,0);"
# !                                      ^
# >t.insert(-1 -1, 0);
# !ERROR: in syntax at "t.insert(-1 -1, 0);"
# !                                        ^
# >#not what is expected from nested expression
# >t.print;
# #-----------------#
# # int   | tmp_32  #
# #-----------------#
# [ 0,      0       ]
# [ 2,      0       ]
# [ -1,     0       ]
# [ 0,      0       ]
# >t.insert(0-1+ -1, 0);
# !ERROR: in syntax at "t.insert(0-1+ -1, 0);"
# 
function user.main():int;	# 0  (main:int)
# Monet Mil to Mal compiler 	# 1  ($2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  ($4:str)
#Predefined code segment 	# 3  ($6:str)
#The compiler can not guarantee an accurate compilation, 	# 4  ($8:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  ($10:str)
#A few guidelines to maximize usefullness. 	# 6  ($12:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  ($14:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  ($16:str)
#use the "mil_schema" for additional support routines 	# 9  ($18:str)
    mil.line("# >Number:         62\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Category:       MIL\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Synopsis:       Handling of nested arithmetic expressions is inconsistent\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Confidential:   no\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# >Severity:       critical\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Priority:       high\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >Responsible:    mk\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# >State:          feedback\n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >Class:          sw-bug\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# >Arrival-Date:   Fri Oct 24 14:09:23 1997\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# >Originator:     mk\n");	# 21 MILline ($41:void)<-($42:str)
    mil.line("# >Organization:\n");	# 22 MILline ($43:void)<-($44:str)
    mil.line("# >Release:        971007\n");	# 23 MILline ($45:void)<-($46:str)
    mil.line("# >Environment:\n");	# 24 MILline ($47:void)<-($48:str)
    mil.line("# \n");	# 25 MILline ($49:void)<-($50:str)
    mil.line("# >Description:\n");	# 26 MILline ($51:void)<-($52:str)
    mil.line("# Handlin>t:= bbp.new(int,int);\n");	# 27 MILline ($53:void)<-($54:str)
    mil.line("# >t.insert(0,0);\n");	# 28 MILline ($55:void)<-($56:str)
    mil.line("# >t.insert(1+1,0);\n");	# 29 MILline ($57:void)<-($58:str)
    mil.line("# >t.insert(-1,-0);\n");	# 30 MILline ($59:void)<-($60:str)
    mil.line("# >print(t);\n");	# 31 MILline ($61:void)<-($62:str)
    mil.line("# #-----------------#\n");	# 32 MILline ($63:void)<-($64:str)
    mil.line("# # int   | tmp_32  #\n");	# 33 MILline ($65:void)<-($66:str)
    mil.line("# #-----------------#\n");	# 34 MILline ($67:void)<-($64:str)
    mil.line("# [ 0,      0       ]\n");	# 35 MILline ($68:void)<-($69:str)
    mil.line("# [ 2,      0       ]\n");	# 36 MILline ($70:void)<-($71:str)
    mil.line("# [ -1,     0       ]\n");	# 37 MILline ($72:void)<-($73:str)
    mil.line("# ># alles zover is goed\n");	# 38 MILline ($74:void)<-($75:str)
    mil.line("# >t.insert(-1+1,0);\n");	# 39 MILline ($76:void)<-($77:str)
    mil.line("# >t.insert(-1 - 1,0);\n");	# 40 MILline ($78:void)<-($79:str)
    mil.line("# !ERROR: in syntax at \"t.insert(-1 - 1,0);\"\n");	# 41 MILline ($80:void)<-($81:str)
    mil.line("# !                                      ^\n");	# 42 MILline ($82:void)<-($83:str)
    mil.line("# >t.insert(-1 -1, 0);\n");	# 43 MILline ($84:void)<-($85:str)
    mil.line("# !ERROR: in syntax at \"t.insert(-1 -1, 0);\"\n");	# 44 MILline ($86:void)<-($87:str)
    mil.line("# !                                        ^\n");	# 45 MILline ($88:void)<-($89:str)
    mil.line("# >#not what is expected from nested expression\n");	# 46 MILline ($90:void)<-($91:str)
    mil.line("# >t.print;\n");	# 47 MILline ($92:void)<-($93:str)
    mil.line("# #-----------------#\n");	# 48 MILline ($94:void)<-($64:str)
    mil.line("# # int   | tmp_32  #\n");	# 49 MILline ($95:void)<-($66:str)
    mil.line("# #-----------------#\n");	# 50 MILline ($96:void)<-($97:str)
    mil.line("# [ 0,      0       ]\n");	# 51 MILline ($98:void)<-($69:str)
    mil.line("# [ 2,      0       ]\n");	# 52 MILline ($99:void)<-($71:str)
    mil.line("# [ -1,     0       ]\n");	# 53 MILline ($100:void)<-($73:str)
    mil.line("# [ 0,      0       ]\n");	# 54 MILline ($101:void)<-($102:str)
    mil.line("# >t.insert(0-1+ -1, 0);\n");	# 55 MILline ($103:void)<-($104:str)
    mil.line("# !ERROR: in syntax at \"t.insert(0-1+ -1, 0);\"\n");	# 56 MILline ($105:void)<-($106:str)
    mil.line("# \n");	# 57 MILline ($107:void)<-($108:str)
    mil.line("# This is not what a user would expect\n");	# 58 MILline ($109:void)<-($110:str)
    mil.line("setoid(oid(20000000));");	# 59 MILline ($111:void)<-($112:str)
    aa_a := calc.oid(20000000);	# 60 CALCint2oid (aa_a:oid)<-($114:int)
    ba_a := calc.setoid(aa_a);	# 61 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("var t:= bbp.new(int,int);");	# 62 MILline ($116:void)<-($117:str)
    t := bbp.new(nil:int,nil:int);	# 63 CMDBATnew (t:bat[:int,:int])<-($119:int)($119:int)
    mil.line("t.insert(0,0);");	# 64 MILline ($120:void)<-($121:str)
    ca_a := bat.insert(t,0,0);	# 65 BKCinsert_bun (ca_a:bat[:int,:int])<-(t:bat[:int,:int])($123:int)($123:int)
    mil.line("t.insert(1+1,0);");	# 66 MILline ($124:void)<-($125:str)
    da_a := calc.+(1,1);	# 67 CALCbinaryADDintint (da_a:int)<-($127:int)($127:int)
    ea_a := bat.insert(t,da_a,0);	# 68 BKCinsert_bun (ea_a:bat[:int,:int])<-(t:bat[:int,:int])(da_a:int)($123:int)
    mil.line("t.insert(-1,-0);");	# 69 MILline ($129:void)<-($130:str)
    fa_a := bat.insert(t,-1,-0);	# 70 BKCinsert_bun (fa_a:bat[:int,:int])<-(t:bat[:int,:int])($132:int)($133:int)
    mil.line("t.insert(0,0);");	# 71 MILline ($134:void)<-($121:str)
    ga_a := bat.insert(t,0,0);	# 72 BKCinsert_bun (ga_a:bat[:int,:int])<-(t:bat[:int,:int])($123:int)($123:int)
    mil.line("t.insert(-1+1,0);");	# 73 MILline ($136:void)<-($137:str)
    ha_a := calc.+(-1,1);	# 74 CALCbinaryADDintint (ha_a:int)<-($132:int)($127:int)
    ia_a := bat.insert(t,ha_a,0);	# 75 BKCinsert_bun (ia_a:bat[:int,:int])<-(t:bat[:int,:int])(ha_a:int)($123:int)
    mil.line("print(t);");	# 76 MILline ($140:void)<-($141:str)
    ja_a := io.print(t);	# 77 IOprint_val (ja_a:int)<-(t:bat[:int,:int])
    mil.line("# alles zover is goed\n");	# 78 MILline ($143:void)<-($144:str)
end main;	# 79  
## >Number:         62\n
## >Category:       MIL\n
## >Synopsis:       Handling of nested arithmetic expressions is inconsistent\n
## >Confidential:   no\n
## >Severity:       critical\n
## >Priority:       high\n
## >Responsible:    mk\n
## >State:          feedback\n
## >Class:          sw-bug\n
## >Submitter-Id:   unknown\n
## >Arrival-Date:   Fri Oct 24 14:09:23 1997\n
## >Originator:     mk\n
## >Organization:\n
## >Release:        971007\n
## >Environment:\n
## \n
## >Description:\n
## Handlin>t:= bbp.new(int,int);\n
## >t.insert(0,0);\n
## >t.insert(1+1,0);\n
## >t.insert(-1,-0);\n
## >print(t);\n
## #-----------------#\n
## # int   | tmp_32  #\n
## #-----------------#\n
## [ 0,      0       ]\n
## [ 2,      0       ]\n
## [ -1,     0       ]\n
## ># alles zover is goed\n
## >t.insert(-1+1,0);\n
## >t.insert(-1 - 1,0);\n
## !ERROR: in syntax at \"t.insert(-1 - 1,0);\"\n
## !                                      ^\n
## >t.insert(-1 -1, 0);\n
## !ERROR: in syntax at \"t.insert(-1 -1, 0);\"\n
## !                                        ^\n
## >#not what is expected from nested expression\n
## >t.print;\n
## #-----------------#\n
## # int   | tmp_32  #\n
## #-----------------#\n
## [ 0,      0       ]\n
## [ 2,      0       ]\n
## [ -1,     0       ]\n
## [ 0,      0       ]\n
## >t.insert(0-1+ -1, 0);\n
## !ERROR: in syntax at \"t.insert(0-1+ -1, 0);\"\n
## \n
## This is not what a user would expect\n
#setoid(oid(20000000));
#var t:= new(int,int);
#t.insert(0,0);
#t.insert(1+1,0);
#t.insert(-1,-0);
#t.insert(0,0);
#t.insert(-1+1,0);
#print(t);
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 0,	  0	  ]
[ 2,	  0	  ]
[ -1,	  0	  ]
[ 0,	  0	  ]
[ 0,	  0	  ]
## alles zover is goed

# 22:47:44 >  
# 22:47:44 >  Done.
# 22:47:44 >  

