# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.
include "mil_insert";
include "mil_system_procs";
include "mil_algebra_procs";

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("# >Number:         119\n");
	mil.line("# >Category:       Module_kernel\n");
	mil.line("# >Synopsis:       thetajoin gives incorrect output\n");
	mil.line("# >Confidential:   no\n");
	mil.line("# >Severity:       serious\n");
	mil.line("# >Priority:       medium\n");
	mil.line("# >Responsible:    boncz\n");
	mil.line("# >State:          open\n");
	mil.line("# >Class:          sw-bug\n");
	mil.line("# >Submitter-Id:   unknown\n");
	mil.line("# >Arrival-Date:   Wed Feb 11 11:26:18 1998\n");
	mil.line("# >Originator:     niels\n");
	mil.line("# >Organization:\n");
	mil.line("# CWI\n");
	mil.line("# >Release:        971007\n");
	mil.line("# >Environment:\n");
	mil.line("# All\n");
	mil.line("# >Description:\n");
	mil.line("# Simple script \n");
	mil.line("# a.insert(1,2);\n");
	mil.line("# a.insert(2,1);\n");
	mil.line("# a.thetajoin(a,LT).print();\n");
	mil.line("# 2 1\n");
	mil.line("# 2 2\n");
	mil.line("# 1 1 \n");
	mil.line("# 1 2\n");
	mil.line("# Since this report was submitted, thetajoin has grown a 4th argument:\n");
	mil.line("# the estimated length of the result\n");
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("var a := new(int,int);");
	a := new(nil:int,nil:int);
	mil.line("a.insert(1,3);");
	ca_a := insert(a,1,3);
	mil.line("a.insert(2,2);");
	da_a := insert(a,2,2);
	mil.line("a.insert(3,1);");
	ea_a := insert(a,3,1);
	mil.line("a.thetajoin(a,LT,lng(nil)).print();");
	LT:= mil.take("LT");
	fa_a := lng(nil);
	ga_a := thetajoin(a,a,LT,fa_a);
	ha_a := print(ga_a);
	mil.line("a.thetajoin(a,LE,lng(nil)).print();");
	LE:= mil.take("LE");
	ia_a := lng(nil);
	ja_a := thetajoin(a,a,LE,ia_a);
	ka_a := print(ja_a);
	mil.line("a.thetajoin(a,EQ,lng(nil)).print();");
	EQ:= mil.take("EQ");
	la_a := lng(nil);
	ma_a := thetajoin(a,a,EQ,la_a);
	na_a := print(ma_a);
	mil.line("a.thetajoin(a,GE,lng(nil)).print();");
	GE:= mil.take("GE");
	oa_a := lng(nil);
	pa_a := thetajoin(a,a,GE,oa_a);
	qa_a := print(pa_a);
	mil.line("a.thetajoin(a,GT,lng(nil)).print();");
	GT:= mil.take("GT");
	ra_a := lng(nil);
	sa_a := thetajoin(a,a,GT,ra_a);
	ta_a := print(sa_a);
	mil.line("quit();");
	ua_a := quit();
