# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#var a := new (oid,int);
	a := new(:oid,:int);
#a.insert( oid(1), 100 );
	aa_a := oid(1);
	ba_a := insert(a,aa_a,100);
#a.insert( oid(2), 1000 );
	ca_a := oid(2);
	da_a := insert(a,ca_a,1000);
#a.insert( oid(4), 10 );
	ea_a := oid(4);
	fa_a := insert(a,ea_a,10);
#a.insert( oid(5), 15 );
	ga_a := oid(5);
	ha_a := insert(a,ga_a,15);
#a.print();
	ia_a := print(a,);
#a.reverse().accbuild("index");
	ja_a := reverse(a,);
	ka_a := accbuild(ja_a,"index");
#a.print();
	la_a := print(a,);
#a.select( 94, 110 ).print();
	ma_a := select(a,94,110);
	na_a := print(ma_a,);
#quit();
	oa_a := quit();
