stdout of test 'no.100` in directory 'tests/BugReports` itself:


# 04:45:15 >  
# 04:45:15 >  Mtimeout -timeout 432 Mserver -monetrc /export/scratch1/monet/tmp/monet.GNU_32-d.15730/monet/.GNU_32-d/Linux2.4.2-0.1.28smp/share/Monet/monet.Mtest.conf -db Tests_tests_BugReports  < no.100.milS
# 04:45:15 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("# >Number:         100\n");
#	mil.line("# >Category:       MIL\n");
#	mil.line("# >Synopsis:       Virtual oids behave in a strange way.\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       serious\n");
#	mil.line("# >Priority:       medium\n");
#	mil.line("# >Responsible:    boncz\n");
#	mil.line("# >State:          open\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n");
#	mil.line("# >Originator:     quak\n");
#	mil.line("# >Organization:\n");
#	mil.line("# UvA\n");
#	mil.line("# >Release:        971007\n");
#	mil.line("# >Environment:\n");
#	mil.line("# all\n");
#	mil.line("# >Description:\n");
#	mil.line("# Try this out:\n");
#	mil.line("# > a := new(int,str);\n");
#	mil.line("# > a.insert(1,\"hello world\");\n");
#	mil.line("# > a.seqbase(100@0);\n");
#	mil.line("# > [oid]([a~]).reverse.print();\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # oid   | tmp_92  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 100@0,  1       ]\n");
#	mil.line("# > [oid]([a~]).reverse.copy.print();\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # oid   | tmp_93  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 1@0,    100     ]\n");
#	mil.line("# \n");
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("var a := new(int,str);");
#	a := new(nil:int,nil:str);
#	mil.line("a.insert(1,\"hello world\");");
#	ca_a := insert(a,1,"hello world");
#	mil.line("a.print();");
#	da_a := print(a);
#	mil.line("a.mark(nil).print();");
#	ea_a := mark(a,nil);
#	fa_a := print(ea_a);
#	mil.line("a.mark(nil).reverse().print();");
#	ga_a := mark(a,nil);
#	ha_a := reverse(ga_a);
#	ia_a := print(ha_a);
#	mil.line("[oid](a.mark(nil)).reverse().print();");
#	ja_a := mark(a,nil);
#	ka_a := multiplex.tactics("oid",ja_a);
#	la_a := reverse(ka_a);
#	ma_a := print(la_a);
#	mil.line("a.seqbase(100@0);");
#	na_a := bat.setSequenceBase(a,100@0);
#	mil.line("[oid](a.mark(nil)).reverse().print();");
#	oa_a := mark(a,nil);
#	pa_a := multiplex.tactics("oid",oa_a);
#	qa_a := reverse(pa_a);
#	ra_a := print(qa_a);
#	mil.line("[oid](a.mark(nil)).reverse().copy().print();");
#	sa_a := mark(a,nil);
#	ta_a := multiplex.tactics("oid",sa_a);
#	ua_a := reverse(ta_a);
#	va_a := copy(ua_a);
#	wa_a := print(va_a);
#	mil.line("quit();");
#	xa_a := quit();
##Identifer 'seqbase' mapped to 'bat.setSequenceBase'
#
!ERROR: 'bat.setSequenceBase' undefined in Admin.main[56]
function Admin.main():int;	# 0  (main:int)
    mil.line("# >Number:         100\n");	# 1 MILline ($1:void)<-($2:str)
    mil.line("# >Category:       MIL\n");	# 2 MILline ($3:void)<-($4:str)
    mil.line("# >Synopsis:       Virtual oids behave in a strange way.\n");	# 3 MILline ($5:void)<-($6:str)
    mil.line("# >Confidential:   no\n");	# 4 MILline ($7:void)<-($8:str)
    mil.line("# >Severity:       serious\n");	# 5 MILline ($9:void)<-($10:str)
    mil.line("# >Priority:       medium\n");	# 6 MILline ($11:void)<-($12:str)
    mil.line("# >Responsible:    boncz\n");	# 7 MILline ($13:void)<-($14:str)
    mil.line("# >State:          open\n");	# 8 MILline ($15:void)<-($16:str)
    mil.line("# >Class:          sw-bug\n");	# 9 MILline ($17:void)<-($18:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Originator:     quak\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Organization:\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# UvA\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Release:        971007\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >Environment:\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# all\n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >Description:\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# Try this out:\n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# > a := new(int,str);\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# > a.insert(1,\"hello world\");\n");	# 21 MILline ($41:void)<-($42:str)
    mil.line("# > a.seqbase(100@0);\n");	# 22 MILline ($43:void)<-($44:str)
    mil.line("# > [oid]([a~]).reverse.print();\n");	# 23 MILline ($45:void)<-($46:str)
    mil.line("# #-----------------#\n");	# 24 MILline ($47:void)<-($48:str)
    mil.line("# # oid   | tmp_92  #\n");	# 25 MILline ($49:void)<-($50:str)
    mil.line("# #-----------------#\n");	# 26 MILline ($51:void)<-($48:str)
    mil.line("# [ 100@0,  1       ]\n");	# 27 MILline ($52:void)<-($53:str)
    mil.line("# > [oid]([a~]).reverse.copy.print();\n");	# 28 MILline ($54:void)<-($55:str)
    mil.line("# #-----------------#\n");	# 29 MILline ($56:void)<-($48:str)
    mil.line("# # oid   | tmp_93  #\n");	# 30 MILline ($57:void)<-($58:str)
    mil.line("# #-----------------#\n");	# 31 MILline ($59:void)<-($48:str)
    mil.line("# [ 1@0,    100     ]\n");	# 32 MILline ($60:void)<-($61:str)
    mil.line("# \n");	# 33 MILline ($62:void)<-($63:str)
    mil.line("setoid(oid(20000000));");	# 34 MILline ($64:void)<-($65:str)
    aa_a := calc.oid(20000000);	# 35 CALCint2oid (aa_a:oid)<-($67:int)
    ba_a := calc.setoid(aa_a);	# 36 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("var a := new(int,str);");	# 37 MILline ($69:void)<-($70:str)
    a := bbp.new(nil:int,"nil:str");	# 38 CMDBATnew (a:bat[:int,:str])<-($72:int)($73:str)
    mil.line("a.insert(1,\"hello world\");");	# 39 MILline ($74:void)<-($75:str)
    ca_a := bat.insert(a,1,"hello world");	# 40 BKCinsert_bun (ca_a:void)<-(a:bat[:int,:str])($77:int)($78:str)
    mil.line("a.print();");	# 41 MILline ($79:void)<-($80:str)
    da_a := io.print(a);	# 42 IOprint_val (da_a:int)<-(a:bat[:int,:str])
    mil.line("a.mark(nil).print();");	# 43 MILline ($82:void)<-($83:str)
    ea_a := algebra.tmark(a);	# 44 ALGtmark0 (ea_a:bat[:int,:void])<-(a:bat[:int,:str])
    fa_a := io.print(ea_a);	# 45 IOprint_val (fa_a:int)<-(ea_a:bat[:int,:void])
    mil.line("a.mark(nil).reverse().print();");	# 46 MILline ($86:void)<-($87:str)
    ga_a := algebra.tmark(a);	# 47 ALGtmark0 (ga_a:bat[:int,:void])<-(a:bat[:int,:str])
    ha_a := bat.reverse(ga_a);	# 48 BKCreverse (ha_a:bat[:void,:int])<-(ga_a:bat[:int,:void])
    ia_a := io.print(ha_a);	# 49 IOprint_val (ia_a:int)<-(ha_a:bat[:void,:int])
    mil.line("[oid](a.mark(nil)).reverse().print();");	# 50 MILline ($91:void)<-($92:str)
    ja_a := algebra.tmark(a);	# 51 ALGtmark0 (ja_a:bat[:int,:void])<-(a:bat[:int,:str])
    ka_a := multiplex.script("oid",ja_a);	# 52  (ka_a:bat[:int,:oid])<-($95:str)(ja_a:bat[:int,:void])
    la_a := bat.reverse(ka_a);	# 53 BKCreverse (la_a:bat[:oid,:int])<-(ka_a:bat[:int,:oid])
    ma_a := io.print(la_a);	# 54 IOprint_val (ma_a:int)<-(la_a:bat[:oid,:int])
    mil.line("a.seqbase(100@0);");	# 55 MILline ($98:void)<-($99:str)
    na_a := bat.setSequenceBase(a,100@0);	# 56  unknown (na_a:any)<-(a:bat[:int,:str])($101:oid)
    mil.line("[oid](a.mark(nil)).reverse().print();");	# 57 MILline ($102:void)<-($92:str)
    oa_a := algebra.tmark(a);	# 58 ALGtmark0 (oa_a:bat[:int,:void])<-(a:bat[:int,:str])
    pa_a := multiplex.script("oid",oa_a);	# 59  (pa_a:bat[:int,:oid])<-($95:str)(oa_a:bat[:int,:void])
    qa_a := bat.reverse(pa_a);	# 60 BKCreverse (qa_a:bat[:oid,:int])<-(pa_a:bat[:int,:oid])
    ra_a := io.print(qa_a);	# 61 IOprint_val (ra_a:int)<-(qa_a:bat[:oid,:int])
    mil.line("[oid](a.mark(nil)).reverse().copy().print();");	# 62 MILline ($107:void)<-($108:str)
    sa_a := algebra.tmark(a);	# 63 ALGtmark0 (sa_a:bat[:int,:void])<-(a:bat[:int,:str])
    ta_a := multiplex.script("oid",sa_a);	# 64  (ta_a:bat[:int,:oid])<-($95:str)(sa_a:bat[:int,:void])
    ua_a := bat.reverse(ta_a);	# 65 BKCreverse (ua_a:bat[:oid,:int])<-(ta_a:bat[:int,:oid])
    va_a := algebra.copy(ua_a);	# 66 ALGcopy (va_a:bat[:oid,:int])<-(ua_a:bat[:oid,:int])
    wa_a := io.print(va_a);	# 67 IOprint_val (wa_a:int)<-(va_a:bat[:oid,:int])
    mil.line("quit();");	# 68 MILline ($114:void)<-($115:str)
    xa_a := clients.quit();	# 69 CLTquit (xa_a:void)
end main;	# 70  

# 22:47:45 >  
# 22:47:45 >  Done.
# 22:47:45 >  

