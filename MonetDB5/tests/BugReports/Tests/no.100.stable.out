stdout of test 'no.100` in directory 'tests/BugReports` itself:


# 04:45:15 >  
# 04:45:15 >  Mtimeout -timeout 432 Mserver -monetrc /export/scratch1/monet/tmp/monet.GNU_32-d.15730/monet/.GNU_32-d/Linux2.4.2-0.1.28smp/share/Monet/monet.Mtest.conf -db Tests_tests_BugReports  < no.100.milS
# 04:45:15 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("# >Number:         100\n");
#	mil.line("# >Category:       MIL\n");
#	mil.line("# >Synopsis:       Virtual oids behave in a strange way.\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       serious\n");
#	mil.line("# >Priority:       medium\n");
#	mil.line("# >Responsible:    boncz\n");
#	mil.line("# >State:          open\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n");
#	mil.line("# >Originator:     quak\n");
#	mil.line("# >Organization:\n");
#	mil.line("# UvA\n");
#	mil.line("# >Release:        971007\n");
#	mil.line("# >Environment:\n");
#	mil.line("# all\n");
#	mil.line("# >Description:\n");
#	mil.line("# Try this out:\n");
#	mil.line("# > a := new(int,str);\n");
#	mil.line("# > a.insert(1,\"hello world\");\n");
#	mil.line("# > a.seqbase(100@0);\n");
#	mil.line("# > [oid]([a~]).reverse.print();\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # oid   | tmp_92  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 100@0,  1       ]\n");
#	mil.line("# > [oid]([a~]).reverse.copy.print();\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # oid   | tmp_93  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 1@0,    100     ]\n");
#	mil.line("# \n");
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("var a := new(int,str);");
#	a := new(nil:int,nil:str);
#	mil.line("a.insert(1,\"hello world\");");
#	ca_a := insert(a,1,"hello world");
#	mil.line("a.print();");
#	da_a := print(a);
#	mil.line("a.mark(nil).print();");
#	ea_a := mark(a,nil);
#	fa_a := print(ea_a);
#	mil.line("a.mark(nil).reverse().print();");
#	ga_a := mark(a,nil);
#	ha_a := reverse(ga_a);
#	ia_a := print(ha_a);
#	mil.line("[oid](a.mark(nil)).reverse().print();");
#	ja_a := mark(a,nil);
#	ka_a := multiplex.tactics("oid",ja_a);
#	la_a := reverse(ka_a);
#	ma_a := print(la_a);
#	mil.line("a.seqbase(100@0);");
#	na_a := bat.setSequenceBase(a,100@0);
#	mil.line("[oid](a.mark(nil)).reverse().print();");
#	oa_a := mark(a,nil);
#	pa_a := multiplex.tactics("oid",oa_a);
#	qa_a := reverse(pa_a);
#	ra_a := print(qa_a);
#	mil.line("[oid](a.mark(nil)).reverse().copy().print();");
#	sa_a := mark(a,nil);
#	ta_a := multiplex.tactics("oid",sa_a);
#	ua_a := reverse(ta_a);
#	va_a := copy(ua_a);
#	wa_a := print(va_a);
#	mil.line("quit();");
#	xa_a := quit();
##Identifer 'seqbase' mapped to 'bat.setSequenceBase'
#
!ERROR: 'batcalc.oid' undefined in user.main[61]
!ERROR: 'bat.reverse' undefined in user.main[62]
!ERROR: 'bat.setSequenceBase' undefined in user.main[65]
!ERROR: 'batcalc.oid' undefined in user.main[68]
!ERROR: 'bat.reverse' undefined in user.main[69]
!ERROR: 'batcalc.oid' undefined in user.main[73]
!ERROR: 'bat.reverse' undefined in user.main[74]
!ERROR: 'algebra.copy' undefined in user.main[75]
function user.main():int;	# 0  (main:int)
# Monet Mil to Mal compiler 	# 1  ($2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  ($4:str)
#Predefined code segment 	# 3  ($6:str)
#The compiler can not guarantee an accurate compilation, 	# 4  ($8:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  ($10:str)
#A few guidelines to maximize usefullness. 	# 6  ($12:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  ($14:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  ($16:str)
#use the "mil_schema" for additional support routines 	# 9  ($18:str)
    mil.line("# >Number:         100\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Category:       MIL\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Synopsis:       Virtual oids behave in a strange way.\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Confidential:   no\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# >Severity:       serious\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Priority:       medium\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >Responsible:    boncz\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# >State:          open\n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >Class:          sw-bug\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# >Originator:     quak\n");	# 21 MILline ($41:void)<-($42:str)
    mil.line("# >Organization:\n");	# 22 MILline ($43:void)<-($44:str)
    mil.line("# UvA\n");	# 23 MILline ($45:void)<-($46:str)
    mil.line("# >Release:        971007\n");	# 24 MILline ($47:void)<-($48:str)
    mil.line("# >Environment:\n");	# 25 MILline ($49:void)<-($50:str)
    mil.line("# all\n");	# 26 MILline ($51:void)<-($52:str)
    mil.line("# >Description:\n");	# 27 MILline ($53:void)<-($54:str)
    mil.line("# Try this out:\n");	# 28 MILline ($55:void)<-($56:str)
    mil.line("# > a := bbp.new(int,str);\n");	# 29 MILline ($57:void)<-($58:str)
    mil.line("# > a.insert(1,\"hello world\");\n");	# 30 MILline ($59:void)<-($60:str)
    mil.line("# > a.seqbase(100@0);\n");	# 31 MILline ($61:void)<-($62:str)
    mil.line("# > [oid]([a~]).reverse.print();\n");	# 32 MILline ($63:void)<-($64:str)
    mil.line("# #-----------------#\n");	# 33 MILline ($65:void)<-($66:str)
    mil.line("# # oid   | tmp_92  #\n");	# 34 MILline ($67:void)<-($68:str)
    mil.line("# #-----------------#\n");	# 35 MILline ($69:void)<-($66:str)
    mil.line("# [ 100@0,  1       ]\n");	# 36 MILline ($70:void)<-($71:str)
    mil.line("# > [oid]([a~]).reverse.copy.print();\n");	# 37 MILline ($72:void)<-($73:str)
    mil.line("# #-----------------#\n");	# 38 MILline ($74:void)<-($66:str)
    mil.line("# # oid   | tmp_93  #\n");	# 39 MILline ($75:void)<-($76:str)
    mil.line("# #-----------------#\n");	# 40 MILline ($77:void)<-($66:str)
    mil.line("# [ 1@0,    100     ]\n");	# 41 MILline ($78:void)<-($79:str)
    mil.line("# \n");	# 42 MILline ($80:void)<-($81:str)
    mil.line("setoid(oid(20000000));");	# 43 MILline ($82:void)<-($83:str)
    aa_a := calc.oid(20000000);	# 44 CALCint2oid (aa_a:oid)<-($85:int)
    ba_a := calc.setoid(aa_a);	# 45 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("var a := bbp.new(int,str);");	# 46 MILline ($87:void)<-($88:str)
    a := bbp.new(nil:int,"nil:str");	# 47 CMDBATnew (a:bat[:int,:str])<-($90:int)($91:str)
    mil.line("a.insert(1,\"hello world\");");	# 48 MILline ($92:void)<-($93:str)
    ca_a := bat.insert(a,1,"hello world");	# 49 BKCinsert_bun (ca_a:bat[:int,:str])<-(a:bat[:int,:str])($95:int)($96:str)
    mil.line("a.print();");	# 50 MILline ($97:void)<-($98:str)
    da_a := io.print(a);	# 51 IOprint_val (da_a:int)<-(a:bat[:int,:str])
    mil.line("a.mark(nil).print();");	# 52 MILline ($100:void)<-($101:str)
    ea_a := algebra.markT(a);	# 53 ALGtmark_default (ea_a:bat[:int,:void])<-(a:bat[:int,:str])
    fa_a := io.print(ea_a);	# 54 IOprint_val (fa_a:int)<-(ea_a:bat[:int,:void])
    mil.line("a.mark(nil).reverse().print();");	# 55 MILline ($104:void)<-($105:str)
    ga_a := algebra.markT(a);	# 56 ALGtmark_default (ga_a:bat[:int,:void])<-(a:bat[:int,:str])
    ha_a := bat.reverse(ga_a);	# 57 BKCreverse (ha_a:bat[:void,:int])<-(ga_a:bat[:int,:void])
    ia_a := io.print(ha_a);	# 58 IOprint_val (ia_a:int)<-(ha_a:bat[:void,:int])
    mil.line("[oid](a.mark(nil)).reverse().print();");	# 59 MILline ($109:void)<-($110:str)
    ja_a := algebra.markT(a);	# 60 ALGtmark_default (ja_a:bat[:int,:void])<-(a:bat[:int,:str])
    ka_a := batcalc.oid(ja_a);	# 61  unknown (ka_a:any)<-(ja_a:bat[:int,:void])
    la_a := bat.reverse(ka_a);	# 62  unknown (la_a:any)<-(ka_a:any)
    ma_a := io.print(la_a);	# 63 IOprint_val (ma_a:int)<-(la_a:any)
    mil.line("a.seqbase(100@0);");	# 64 MILline ($115:void)<-($116:str)
    na_a := bat.setSequenceBase(a,100@0);	# 65  unknown (na_a:any)<-(a:bat[:int,:str])($118:oid)
    mil.line("[oid](a.mark(nil)).reverse().print();");	# 66 MILline ($119:void)<-($110:str)
    oa_a := algebra.markT(a);	# 67 ALGtmark_default (oa_a:bat[:int,:void])<-(a:bat[:int,:str])
    pa_a := batcalc.oid(oa_a);	# 68  unknown (pa_a:any)<-(oa_a:bat[:int,:void])
    qa_a := bat.reverse(pa_a);	# 69  unknown (qa_a:any)<-(pa_a:any)
    ra_a := io.print(qa_a);	# 70 IOprint_val (ra_a:int)<-(qa_a:any)
    mil.line("[oid](a.mark(nil)).reverse().copy().print();");	# 71 MILline ($124:void)<-($125:str)
    sa_a := algebra.markT(a);	# 72 ALGtmark_default (sa_a:bat[:int,:void])<-(a:bat[:int,:str])
    ta_a := batcalc.oid(sa_a);	# 73  unknown (ta_a:any)<-(sa_a:bat[:int,:void])
    ua_a := bat.reverse(ta_a);	# 74  unknown (ua_a:any)<-(ta_a:any)
    va_a := algebra.copy(ua_a);	# 75  unknown (va_a:any)<-(ua_a:any)
    wa_a := io.print(va_a);	# 76 IOprint_val (wa_a:int)<-(va_a:any)
    mil.line("quit();");	# 77 MILline ($131:void)<-($132:str)
    xa_a := clients.quit();	# 78 CLTquit (xa_a:void)
#Identifer 'seqbase' mapped to 'bat.setSequenceBase' 	# 79  ($135:str)
end main;	# 80  

# 22:47:45 >  
# 22:47:45 >  Done.
# 22:47:45 >  

