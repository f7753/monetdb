stdout of test 'no.165` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.165 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.165.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.165.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# 
# >Number:         165
# >Category:       Module_libgdk
# >Synopsis:       mark(BAT) fails
# >Confidential:   no
# >Severity:       serious
# >Priority:       medium
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Wed Aug 12 15:18:26 1998
# >Originator:     manegold@cwi.nl
# >Organization:
# CWI
# >Release:        980101
# >Environment:
# any
# >Description:
# mark(BAT) fails with
# !ERROR: CMDmark_default: returned BAT has unexpected head.
# 
function user.main():int;	# 0  (main:int)
# Monet Mil to Mal compiler 	# 1  ($2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  ($4:str)
#Predefined code segment 	# 3  ($6:str)
#The compiler can not guarantee an accurate compilation, 	# 4  ($8:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  ($10:str)
#A few guidelines to maximize usefullness. 	# 6  ($12:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  ($14:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  ($16:str)
#use the "mil_schema" for additional support routines 	# 9  ($18:str)
    mil.line("# \n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Number:         165\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Category:       Module_libgdk\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Synopsis:       mark(BAT) fails\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# >Confidential:   no\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Severity:       serious\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >Priority:       medium\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >State:          open\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# >Class:          sw-bug\n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# >Arrival-Date:   Wed Aug 12 15:18:26 1998\n");	# 21 MILline ($41:void)<-($42:str)
    mil.line("# >Originator:     manegold@cwi.nl\n");	# 22 MILline ($43:void)<-($44:str)
    mil.line("# >Organization:\n");	# 23 MILline ($45:void)<-($46:str)
    mil.line("# CWI\n");	# 24 MILline ($47:void)<-($48:str)
    mil.line("# >Release:        980101\n");	# 25 MILline ($49:void)<-($50:str)
    mil.line("# >Environment:\n");	# 26 MILline ($51:void)<-($52:str)
    mil.line("# any\n");	# 27 MILline ($53:void)<-($54:str)
    mil.line("# >Description:\n");	# 28 MILline ($55:void)<-($56:str)
    mil.line("# mark(BAT) fails with\n");	# 29 MILline ($57:void)<-($58:str)
    mil.line("# !ERROR: CMDmark_default: returned BAT has unexpected head.\n");	# 30 MILline ($59:void)<-($60:str)
    mil.line("# \n");	# 31 MILline ($61:void)<-($62:str)
    mil.line("# ========\n");	# 32 MILline ($63:void)<-($64:str)
    mil.line("# test script\n");	# 33 MILline ($65:void)<-($66:str)
    mil.line("# --------\n");	# 34 MILline ($67:void)<-($68:str)
    mil.line("# b:= bbp.new(str,int);\n");	# 35 MILline ($69:void)<-($70:str)
    mil.line("# b.insert(\"the\",1);\n");	# 36 MILline ($71:void)<-($72:str)
    mil.line("# b.insert(\"quick\",20);\n");	# 37 MILline ($73:void)<-($74:str)
    mil.line("# b.insert(\"brown\",30);\n");	# 38 MILline ($75:void)<-($76:str)
    mil.line("# b.insert(\"fox\",40);\n");	# 39 MILline ($77:void)<-($78:str)
    mil.line("# b.insert(\"jumps\",50);\n");	# 40 MILline ($79:void)<-($80:str)
    mil.line("# b.insert(\"over\",60);\n");	# 41 MILline ($81:void)<-($82:str)
    mil.line("# b.insert(\"lazy\",70);\n");	# 42 MILline ($83:void)<-($84:str)
    mil.line("# b.insert(\"dog\",80);\n");	# 43 MILline ($85:void)<-($86:str)
    mil.line("# b.insert(str(nil),90);\n");	# 44 MILline ($87:void)<-($88:str)
    mil.line("# b.insert(\".\",100);\n");	# 45 MILline ($89:void)<-($90:str)
    mil.line("# b.insert(\"\",int(nil));\n");	# 46 MILline ($91:void)<-($92:str)
    mil.line("# b.insert(str(nil),int(nil));\n");	# 47 MILline ($93:void)<-($94:str)
    mil.line("# b.print;\n");	# 48 MILline ($95:void)<-($96:str)
    mil.line("# \n");	# 49 MILline ($97:void)<-($98:str)
    mil.line("# c:= mark(b);\n");	# 50 MILline ($99:void)<-($100:str)
    mil.line("# bat.print(c);\n");	# 51 MILline ($101:void)<-($102:str)
    mil.line("# quit;\n");	# 52 MILline ($103:void)<-($104:str)
    mil.line("# \n");	# 53 MILline ($105:void)<-($98:str)
    mil.line("# ========\n");	# 54 MILline ($106:void)<-($107:str)
    mil.line("# output\n");	# 55 MILline ($108:void)<-($109:str)
    mil.line("# --------\n");	# 56 MILline ($110:void)<-($111:str)
    mil.line("# [...]\n");	# 57 MILline ($112:void)<-($113:str)
    mil.line("# b.print;\n");	# 58 MILline ($114:void)<-($96:str)
    mil.line("# #-------------------------#\n");	# 59 MILline ($115:void)<-($116:str)
    mil.line("# # BAT:            tmp_23  #\n");	# 60 MILline ($117:void)<-($118:str)
    mil.line("# # (str)           (int)   #\n");	# 61 MILline ($119:void)<-($120:str)
    mil.line("# #-------------------------#\n");	# 62 MILline ($121:void)<-($116:str)
    mil.line("# [ \"the\",          1       ]\n");	# 63 MILline ($122:void)<-($123:str)
    mil.line("# [ \"quick\",        20      ]\n");	# 64 MILline ($124:void)<-($125:str)
    mil.line("# [ \"brown\",        30      ]\n");	# 65 MILline ($126:void)<-($127:str)
    mil.line("# [ \"fox\",          40      ]\n");	# 66 MILline ($128:void)<-($129:str)
    mil.line("# [ \"jumps\",        50      ]\n");	# 67 MILline ($130:void)<-($131:str)
    mil.line("# [ \"over\",         60      ]\n");	# 68 MILline ($132:void)<-($133:str)
    mil.line("# [ \"lazy\",         70      ]\n");	# 69 MILline ($134:void)<-($135:str)
    mil.line("# [ \"dog\",          80      ]\n");	# 70 MILline ($136:void)<-($137:str)
    mil.line("# [ nil,            90      ]\n");	# 71 MILline ($138:void)<-($139:str)
    mil.line("# [ \".\",            100     ]\n");	# 72 MILline ($140:void)<-($141:str)
    mil.line("# [ \"\",             nil     ]\n");	# 73 MILline ($142:void)<-($143:str)
    mil.line("# [ nil,            nil     ]\n");	# 74 MILline ($144:void)<-($145:str)
    mil.line("# \n");	# 75 MILline ($146:void)<-($147:str)
    mil.line("# c:= mark(b);\n");	# 76 MILline ($148:void)<-($149:str)
    mil.line("# !ERROR: CMDmark_default: returned BAT has unexpected head.\n");	# 77 MILline ($150:void)<-($151:str)
    mil.line("# bat.print(c);\n");	# 78 MILline ($152:void)<-($153:str)
    mil.line("# !WARNING: BATdescriptor: range error\n");	# 79 MILline ($154:void)<-($155:str)
    mil.line("# !ERROR: interpret operator: 1nd param: invalid BAT.\n");	# 80 MILline ($156:void)<-($157:str)
    mil.line("# quit;\n");	# 81 MILline ($158:void)<-($159:str)
    mil.line("# \n");	# 82 MILline ($160:void)<-($147:str)
    mil.line("# ========\n");	# 83 MILline ($161:void)<-($162:str)
    mil.line("setoid(oid(20000000));");	# 84 MILline ($163:void)<-($164:str)
    aa_a := calc.oid(20000000);	# 85 CALCint2oid (aa_a:oid)<-($166:int)
    ba_a := calc.setoid(aa_a);	# 86 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("var b:= bbp.new(str,int);");	# 87 MILline ($168:void)<-($169:str)
    b := bbp.new("nil:str",nil:int);	# 88 CMDBATnew (b:bat[:str,:int])<-($171:str)($172:int)
    mil.line("b.insert(\"the\",1);");	# 89 MILline ($173:void)<-($174:str)
    ca_a := bat.insert(b,"the",1);	# 90 BKCinsert_bun (ca_a:bat[:str,:int])<-(b:bat[:str,:int])($176:str)($177:int)
    mil.line("b.insert(\"quick\",20);");	# 91 MILline ($178:void)<-($179:str)
    da_a := bat.insert(b,"quick",20);	# 92 BKCinsert_bun (da_a:bat[:str,:int])<-(b:bat[:str,:int])($181:str)($182:int)
    mil.line("b.insert(\"brown\",30);");	# 93 MILline ($183:void)<-($184:str)
    ea_a := bat.insert(b,"brown",30);	# 94 BKCinsert_bun (ea_a:bat[:str,:int])<-(b:bat[:str,:int])($186:str)($187:int)
    mil.line("b.insert(\"fox\",40);");	# 95 MILline ($188:void)<-($189:str)
    fa_a := bat.insert(b,"fox",40);	# 96 BKCinsert_bun (fa_a:bat[:str,:int])<-(b:bat[:str,:int])($191:str)($192:int)
    mil.line("b.insert(\"jumps\",50);");	# 97 MILline ($193:void)<-($194:str)
    ga_a := bat.insert(b,"jumps",50);	# 98 BKCinsert_bun (ga_a:bat[:str,:int])<-(b:bat[:str,:int])($196:str)($197:int)
    mil.line("b.insert(\"over\",60);");	# 99 MILline ($198:void)<-($199:str)
    ha_a := bat.insert(b,"over",60);	# 100 BKCinsert_bun (ha_a:bat[:str,:int])<-(b:bat[:str,:int])($201:str)($202:int)
    mil.line("b.insert(\"lazy\",70);");	# 101 MILline ($203:void)<-($204:str)
    ia_a := bat.insert(b,"lazy",70);	# 102 BKCinsert_bun (ia_a:bat[:str,:int])<-(b:bat[:str,:int])($206:str)($207:int)
    mil.line("b.insert(\"dog\",80);");	# 103 MILline ($208:void)<-($209:str)
    ja_a := bat.insert(b,"dog",80);	# 104 BKCinsert_bun (ja_a:bat[:str,:int])<-(b:bat[:str,:int])($211:str)($212:int)
    mil.line("b.insert(str(nil),90);");	# 105 MILline ($213:void)<-($214:str)
    ka_a := calc.str(nil);	# 106 CALCnil2str (ka_a:str)<-($216:void)
    la_a := bat.insert(b,ka_a,90);	# 107 BKCinsert_bun (la_a:bat[:str,:int])<-(b:bat[:str,:int])(ka_a:str)($218:int)
    mil.line("b.insert(\".\",100);");	# 108 MILline ($219:void)<-($220:str)
    ma_a := bat.insert(b,".",100);	# 109 BKCinsert_bun (ma_a:bat[:str,:int])<-(b:bat[:str,:int])($222:str)($223:int)
    mil.line("b.insert(\"\",int(nil));");	# 110 MILline ($224:void)<-($225:str)
    na_a := calc.int(nil);	# 111 CALCnil2int (na_a:int)<-($216:void)
    oa_a := bat.insert(b,"",na_a);	# 112 BKCinsert_bun (oa_a:bat[:str,:int])<-(b:bat[:str,:int])($228:str)(na_a:int)
    mil.line("b.insert(str(nil),int(nil));");	# 113 MILline ($229:void)<-($230:str)
    pa_a := calc.str(nil);	# 114 CALCnil2str (pa_a:str)<-($216:void)
    qa_a := calc.int(nil);	# 115 CALCnil2int (qa_a:int)<-($216:void)
    ra_a := bat.insert(b,pa_a,qa_a);	# 116 BKCinsert_bun (ra_a:bat[:str,:int])<-(b:bat[:str,:int])(pa_a:str)(qa_a:int)
    mil.line("b.print();");	# 117 MILline ($234:void)<-($235:str)
    sa_a := io.print(b);	# 118 IOprint_val (sa_a:int)<-(b:bat[:str,:int])
    mil.line("var c:= mark(b,oid(20000050));");	# 119 MILline ($237:void)<-($238:str)
    ta_a := calc.oid(20000050);	# 120 CALCint2oid (ta_a:oid)<-($240:int)
    c := algebra.markT(b,ta_a);	# 121 ALGtmark (c:bat[:str,:void])<-(b:bat[:str,:int])(ta_a:oid)
    mil.line("print(c);");	# 122 MILline ($242:void)<-($243:str)
    ua_a := io.print(c);	# 123 IOprint_val (ua_a:int)<-(c:bat[:str,:void])
    mil.line("quit();");	# 124 MILline ($245:void)<-($246:str)
    va_a := clients.quit();	# 125 CLTquit (va_a:void)
end main;	# 126  
## \n
## >Number:         165\n
## >Category:       Module_libgdk\n
## >Synopsis:       mark(BAT) fails\n
## >Confidential:   no\n
## >Severity:       serious\n
## >Priority:       medium\n
## >Responsible:    boncz (Peter Boncz)\n
## >State:          open\n
## >Class:          sw-bug\n
## >Submitter-Id:   unknown\n
## >Arrival-Date:   Wed Aug 12 15:18:26 1998\n
## >Originator:     manegold@cwi.nl\n
## >Organization:\n
## CWI\n
## >Release:        980101\n
## >Environment:\n
## any\n
## >Description:\n
## mark(BAT) fails with\n
## !ERROR: CMDmark_default: returned BAT has unexpected head.\n
## \n
## ========\n
## test script\n
## --------\n
## b:= bbp.new(str,int);\n
## b.insert(\"the\",1);\n
## b.insert(\"quick\",20);\n
## b.insert(\"brown\",30);\n
## b.insert(\"fox\",40);\n
## b.insert(\"jumps\",50);\n
## b.insert(\"over\",60);\n
## b.insert(\"lazy\",70);\n
## b.insert(\"dog\",80);\n
## b.insert(str(nil),90);\n
## b.insert(\".\",100);\n
## b.insert(\"\",int(nil));\n
## b.insert(str(nil),int(nil));\n
## b.print;\n
## \n
## c:= mark(b);\n
## bat.print(c);\n
## quit;\n
## \n
## ========\n
## output\n
## --------\n
## [...]\n
## b.print;\n
## #-------------------------#\n
## # BAT:            tmp_23  #\n
## # (str)           (int)   #\n
## #-------------------------#\n
## [ \"the\",          1       ]\n
## [ \"quick\",        20      ]\n
## [ \"brown\",        30      ]\n
## [ \"fox\",          40      ]\n
## [ \"jumps\",        50      ]\n
## [ \"over\",         60      ]\n
## [ \"lazy\",         70      ]\n
## [ \"dog\",          80      ]\n
## [ nil,            90      ]\n
## [ \".\",            100     ]\n
## [ \"\",             nil     ]\n
## [ nil,            nil     ]\n
## \n
## c:= mark(b);\n
## !ERROR: CMDmark_default: returned BAT has unexpected head.\n
## bat.print(c);\n
## !WARNING: BATdescriptor: range error\n
## !ERROR: interpret operator: 1nd param: invalid BAT.\n
## quit;\n
## \n
## ========\n
#setoid(oid(20000000));
#var b:= new(str,int);
#b.insert("the",1);
#b.insert("quick",20);
#b.insert("brown",30);
#b.insert("fox",40);
#b.insert("jumps",50);
#b.insert("over",60);
#b.insert("lazy",70);
#b.insert("dog",80);
#b.insert(str(nil),90);
#b.insert(".",100);
#b.insert("",int(nil));
#b.insert(str(nil),int(nil));
#b.print();
#-------------------------#
# BAT:		  tmp_30  #
# (str)		  (int)	  #
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  20	  ]
[ "brown",	  30	  ]
[ "fox",	  40	  ]
[ "jumps",	  50	  ]
[ "over",	  60	  ]
[ "lazy",	  70	  ]
[ "dog",	  80	  ]
[ nil,		  90	  ]
[ ".",		  100	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
#var c:= mark(b,oid(20000050));
#print(c);
#---------------------------------#
# BAT:		  tmp_70	  #
# (str)		  (void)	  #
#---------------------------------#
[ "the",	  20000050@0	  ]
[ "quick",	  20000051@0	  ]
[ "brown",	  20000052@0	  ]
[ "fox",	  20000053@0	  ]
[ "jumps",	  20000054@0	  ]
[ "over",	  20000055@0	  ]
[ "lazy",	  20000056@0	  ]
[ "dog",	  20000057@0	  ]
[ nil,		  20000058@0	  ]
[ ".",		  20000059@0	  ]
[ "",		  20000060@0	  ]
[ nil,		  20000061@0	  ]

# 08:27:56 >  
# 08:27:56 >  Done.
# 08:27:56 >  

