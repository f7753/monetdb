# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#include "mil_prelude";
	mil.line("# \n");
	mil.line("# >Number:         165");
	mil.line("# >Number:         165\n");
	mil.line("# >Category:       Module_libgdk");
	mil.line("# >Category:       Module_libgdk\n");
	mil.line("# >Synopsis:       mark(BAT) fails");
	mil.line("# >Synopsis:       mark(BAT) fails\n");
	mil.line("# >Confidential:   no");
	mil.line("# >Confidential:   no\n");
	mil.line("# >Severity:       serious");
	mil.line("# >Severity:       serious\n");
	mil.line("# >Priority:       medium");
	mil.line("# >Priority:       medium\n");
	mil.line("# >Responsible:    boncz (Peter Boncz)");
	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
	mil.line("# >State:          open");
	mil.line("# >State:          open\n");
	mil.line("# >Class:          sw-bug");
	mil.line("# >Class:          sw-bug\n");
	mil.line("# >Submitter-Id:   unknown");
	mil.line("# >Submitter-Id:   unknown\n");
	mil.line("# >Arrival-Date:   Wed Aug 12 15:18:26 1998");
	mil.line("# >Arrival-Date:   Wed Aug 12 15:18:26 1998\n");
	mil.line("# >Originator:     manegold@cwi.nl");
	mil.line("# >Originator:     manegold@cwi.nl\n");
	mil.line("# >Organization:");
	mil.line("# >Organization:\n");
	mil.line("# CWI");
	mil.line("# CWI\n");
	mil.line("# >Release:        980101");
	mil.line("# >Release:        980101\n");
	mil.line("# >Environment:");
	mil.line("# >Environment:\n");
	mil.line("# any");
	mil.line("# any\n");
	mil.line("# >Description:");
	mil.line("# >Description:\n");
	mil.line("# mark(BAT) fails with");
	mil.line("# mark(BAT) fails with\n");
	mil.line("# !ERROR: CMDmark_default: returned BAT has unexpected head.");
	mil.line("# !ERROR: CMDmark_default: returned BAT has unexpected head.\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# ========");
	mil.line("# ========\n");
	mil.line("# test script");
	mil.line("# test script\n");
	mil.line("# --------");
	mil.line("# --------\n");
	mil.line("# b:= new(str,int);");
	mil.line("# b:= new(str,int);\n");
	mil.line("# b.insert(\"the\",1);");
	mil.line("# b.insert(\"the\",1);\n");
	mil.line("# b.insert(\"quick\",20);");
	mil.line("# b.insert(\"quick\",20);\n");
	mil.line("# b.insert(\"brown\",30);");
	mil.line("# b.insert(\"brown\",30);\n");
	mil.line("# b.insert(\"fox\",40);");
	mil.line("# b.insert(\"fox\",40);\n");
	mil.line("# b.insert(\"jumps\",50);");
	mil.line("# b.insert(\"jumps\",50);\n");
	mil.line("# b.insert(\"over\",60);");
	mil.line("# b.insert(\"over\",60);\n");
	mil.line("# b.insert(\"lazy\",70);");
	mil.line("# b.insert(\"lazy\",70);\n");
	mil.line("# b.insert(\"dog\",80);");
	mil.line("# b.insert(\"dog\",80);\n");
	mil.line("# b.insert(str(nil),90);");
	mil.line("# b.insert(str(nil),90);\n");
	mil.line("# b.insert(\".\",100);");
	mil.line("# b.insert(\".\",100);\n");
	mil.line("# b.insert(\"\",int(nil));");
	mil.line("# b.insert(\"\",int(nil));\n");
	mil.line("# b.insert(str(nil),int(nil));");
	mil.line("# b.insert(str(nil),int(nil));\n");
	mil.line("# b.print;");
	mil.line("# b.print;\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# c:= mark(b);");
	mil.line("# c:= mark(b);\n");
	mil.line("# print(c);");
	mil.line("# print(c);\n");
	mil.line("# quit;");
	mil.line("# quit;\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# ========");
	mil.line("# ========\n");
	mil.line("# output");
	mil.line("# output\n");
	mil.line("# --------");
	mil.line("# --------\n");
	mil.line("# [...]");
	mil.line("# [...]\n");
	mil.line("# b.print;");
	mil.line("# b.print;\n");
	mil.line("# #-------------------------#");
	mil.line("# #-------------------------#\n");
	mil.line("# # BAT:            tmp_23  #");
	mil.line("# # BAT:            tmp_23  #\n");
	mil.line("# # (str)           (int)   #");
	mil.line("# # (str)           (int)   #\n");
	mil.line("# #-------------------------#");
	mil.line("# #-------------------------#\n");
	mil.line("# [ \"the\",          1       ]");
	mil.line("# [ \"the\",          1       ]\n");
	mil.line("# [ \"quick\",        20      ]");
	mil.line("# [ \"quick\",        20      ]\n");
	mil.line("# [ \"brown\",        30      ]");
	mil.line("# [ \"brown\",        30      ]\n");
	mil.line("# [ \"fox\",          40      ]");
	mil.line("# [ \"fox\",          40      ]\n");
	mil.line("# [ \"jumps\",        50      ]");
	mil.line("# [ \"jumps\",        50      ]\n");
	mil.line("# [ \"over\",         60      ]");
	mil.line("# [ \"over\",         60      ]\n");
	mil.line("# [ \"lazy\",         70      ]");
	mil.line("# [ \"lazy\",         70      ]\n");
	mil.line("# [ \"dog\",          80      ]");
	mil.line("# [ \"dog\",          80      ]\n");
	mil.line("# [ nil,            90      ]");
	mil.line("# [ nil,            90      ]\n");
	mil.line("# [ \".\",            100     ]");
	mil.line("# [ \".\",            100     ]\n");
	mil.line("# [ \"\",             nil     ]");
	mil.line("# [ \"\",             nil     ]\n");
	mil.line("# [ nil,            nil     ]");
	mil.line("# [ nil,            nil     ]\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# c:= mark(b);");
	mil.line("# c:= mark(b);\n");
	mil.line("# !ERROR: CMDmark_default: returned BAT has unexpected head.");
	mil.line("# !ERROR: CMDmark_default: returned BAT has unexpected head.\n");
	mil.line("# print(c);");
	mil.line("# print(c);\n");
	mil.line("# !WARNING: BATdescriptor: range error");
	mil.line("# !WARNING: BATdescriptor: range error\n");
	mil.line("# !ERROR: interpret operator: 1nd param: invalid BAT.");
	mil.line("# !ERROR: interpret operator: 1nd param: invalid BAT.\n");
	mil.line("# quit;");
	mil.line("# quit;\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# ========");
	mil.line("# ========\n");
	mil.line("");
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("var b:= new(str,int);");
	b := new(nil:str,nil:int);
	mil.line("b.insert(\"the\",1);");
	ca_a := insert(b,"the",1);
	mil.line("b.insert(\"quick\",20);");
	da_a := insert(b,"quick",20);
	mil.line("b.insert(\"brown\",30);");
	ea_a := insert(b,"brown",30);
	mil.line("b.insert(\"fox\",40);");
	fa_a := insert(b,"fox",40);
	mil.line("b.insert(\"jumps\",50);");
	ga_a := insert(b,"jumps",50);
	mil.line("b.insert(\"over\",60);");
	ha_a := insert(b,"over",60);
	mil.line("b.insert(\"lazy\",70);");
	ia_a := insert(b,"lazy",70);
	mil.line("b.insert(\"dog\",80);");
	ja_a := insert(b,"dog",80);
	mil.line("b.insert(str(nil),90);");
	ka_a := str(nil);
	la_a := insert(b,ka_a,90);
	mil.line("b.insert(\".\",100);");
	ma_a := insert(b,".",100);
	mil.line("b.insert(\"\",int(nil));");
	na_a := int(nil);
	oa_a := insert(b,"",na_a);
	mil.line("b.insert(str(nil),int(nil));");
	pa_a := str(nil);
	qa_a := int(nil);
	ra_a := insert(b,pa_a,qa_a);
	mil.line("b.print();");
	sa_a := print(b);
	mil.line("var c:= mark(b,oid(20000050));");
	ta_a := oid(20000050);
	c := mark(b,ta_a);
	mil.line("print(c);");
	ua_a := print(c);
	mil.line("quit();");
	va_a := quit();
