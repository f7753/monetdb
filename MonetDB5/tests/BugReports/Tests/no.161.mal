# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
function test_inner(in:any):void;
#   printf("test_inner.in: %s\n",str(in));
	ca_a := str(in);
	da_a := printf("test_inner.in: %s\n",ca_a);
end test_inner;
function test_outer(in:any):void;
#   printf("test_outer.in: %s\n",str(in));
	ea_a := str(in);
	fa_a := printf("test_outer.in: %s\n",ea_a);
#   test_inner(in);
	ga_a := test_inner(in);
end test_outer;
#test_outer("chr");
	ha_a := test_outer("chr");
#test_outer("chr");
	ia_a := test_outer("chr");
#quit();
	ja_a := quit();
