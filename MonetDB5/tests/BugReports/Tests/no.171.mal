# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#var s:=new(int,int);
	s := new(:int,:int);
#insert(s,5,5);
	aa_a := insert(s,5,5);
#insert(s,3,3);
	ba_a := insert(s,3,3);
#insert(s,4,2);
	ca_a := insert(s,4,2);
#insert(s,2,1);
	da_a := insert(s,2,1);
#insert(s,1,1);
	ea_a := insert(s,1,1);
#insert(s,4,2);
	fa_a := insert(s,4,2);
#insert(s,4,3);
	ga_a := insert(s,4,3);
#s.print();
	ha_a := print(s,);
#s.select(1).print();
	ia_a := select(s,1);
	ja_a := print(ia_a,);
#s.select(2).print();
	ka_a := select(s,2);
	la_a := print(ka_a,);
#s.select(3).print();
	ma_a := select(s,3);
	na_a := print(ma_a,);
#s.select(4).print();
	oa_a := select(s,4);
	pa_a := print(oa_a,);
#s.select(5).print();
	qa_a := select(s,5);
	ra_a := print(qa_a,);
#s.reverse().print();
	sa_a := reverse(s,);
	ta_a := print(sa_a,);
#s.reverse().select(1).print();
	ua_a := reverse(s,);
	va_a := select(ua_a,1);
	wa_a := print(va_a,);
#s.reverse().select(2).print();
	xa_a := reverse(s,);
	ya_a := select(xa_a,2);
	ab_a := print(ya_a,);
#s.reverse().select(3).print();
	bb_a := reverse(s,);
	cb_a := select(bb_a,3);
	db_a := print(cb_a,);
#s.reverse().select(4).print();
	eb_a := reverse(s,);
	fb_a := select(eb_a,4);
	gb_a := print(fb_a,);
#s.reverse().select(5).print();
	hb_a := reverse(s,);
	ib_a := select(hb_a,5);
	jb_a := print(ib_a,);
#printf("#~BeginVariableOutput~#\n");
	kb_a := printf("#~BeginVariableOutput~#\n");
#s.sort().print();
	lb_a := sort(s,);
	mb_a := print(lb_a,);
#printf("#~EndVariableOutput~#\n");
	nb_a := printf("#~EndVariableOutput~#\n");
#s.sort_ht().print();
	ob_a := sort_ht(s,);
	pb_a := print(ob_a,);
#s.select(1).print();
	qb_a := select(s,1);
	rb_a := print(qb_a,);
#s.select(2).print();
	sb_a := select(s,2);
	tb_a := print(sb_a,);
#s.select(3).print();
	ub_a := select(s,3);
	vb_a := print(ub_a,);
#s.select(4).print();
	wb_a := select(s,4);
	xb_a := print(wb_a,);
#s.select(5).print();
	yb_a := select(s,5);
	ac_a := print(yb_a,);
#s.reverse().print();
	bc_a := reverse(s,);
	cc_a := print(bc_a,);
#s.reverse().select(1).print();
	dc_a := reverse(s,);
	ec_a := select(dc_a,1);
	fc_a := print(ec_a,);
#s.reverse().select(2).print();
	gc_a := reverse(s,);
	hc_a := select(gc_a,2);
	ic_a := print(hc_a,);
#s.reverse().select(3).print();
	jc_a := reverse(s,);
	kc_a := select(jc_a,3);
	lc_a := print(kc_a,);
#s.reverse().select(4).print();
	mc_a := reverse(s,);
	nc_a := select(mc_a,4);
	oc_a := print(nc_a,);
#s.reverse().select(4).sort_ht().print();
	pc_a := reverse(s,);
	qc_a := select(pc_a,4);
	rc_a := sort_ht(qc_a,);
	sc_a := print(rc_a,);
#s.reverse().select(5).print();
	tc_a := reverse(s,);
	uc_a := select(tc_a,5);
	vc_a := print(uc_a,);
#printf("#~BeginVariableOutput~#\n");
	wc_a := printf("#~BeginVariableOutput~#\n");
#s.reverse().sort().print();
	xc_a := reverse(s,);
	yc_a := sort(xc_a,);
	ad_a := print(yc_a,);
#printf("#~EndVariableOutput~#\n");
	bd_a := printf("#~EndVariableOutput~#\n");
#s.reverse().sort_ht().print();
	cd_a := reverse(s,);
	dd_a := sort_ht(cd_a,);
	ed_a := print(dd_a,);
#s.reverse().select(1).print();
	fd_a := reverse(s,);
	gd_a := select(fd_a,1);
	hd_a := print(gd_a,);
#s.reverse().select(2).print();
	id_a := reverse(s,);
	jd_a := select(id_a,2);
	kd_a := print(jd_a,);
#s.reverse().select(3).print();
	ld_a := reverse(s,);
	md_a := select(ld_a,3);
	nd_a := print(md_a,);
#s.reverse().select(4).print();
	od_a := reverse(s,);
	pd_a := select(od_a,4);
	qd_a := print(pd_a,);
#s.reverse().select(4).sort_ht().print();
	rd_a := reverse(s,);
	sd_a := select(rd_a,4);
	td_a := sort_ht(sd_a,);
	ud_a := print(td_a,);
#s.reverse().select(5).print();
	vd_a := reverse(s,);
	wd_a := select(vd_a,5);
	xd_a := print(wd_a,);
#quit();
	yd_a := quit();
