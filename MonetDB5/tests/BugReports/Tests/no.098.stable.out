stdout of test 'no.098` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.098 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.098.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.098.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         98
# >Category:       Mserver
# >Synopsis:       wrong select when a BAT contains one BUN
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Fri Dec 12 19:56:04 1997
# >Originator:     windhouw
# >Organization:
# UvA
# >Release:        971007
# >Environment:
# 
# >Description:
# When a BAT contains only one BUN a select returns this BUN,
# even when it's not in the selection range:
# 
function Admin.main():int;	# 0  (main:int)
    mil.line("# >Number:         98\n");	# 1 MILline ($1:void)<-($2:str)
    mil.line("# >Category:       Mserver\n");	# 2 MILline ($3:void)<-($4:str)
    mil.line("# >Synopsis:       wrong select when a BAT contains one BUN\n");	# 3 MILline ($5:void)<-($6:str)
    mil.line("# >Confidential:   no\n");	# 4 MILline ($7:void)<-($8:str)
    mil.line("# >Severity:       critical\n");	# 5 MILline ($9:void)<-($10:str)
    mil.line("# >Priority:       high\n");	# 6 MILline ($11:void)<-($12:str)
    mil.line("# >Responsible:    boncz\n");	# 7 MILline ($13:void)<-($14:str)
    mil.line("# >State:          open\n");	# 8 MILline ($15:void)<-($16:str)
    mil.line("# >Class:          sw-bug\n");	# 9 MILline ($17:void)<-($18:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Arrival-Date:   Fri Dec 12 19:56:04 1997\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Originator:     windhouw\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Organization:\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# UvA\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Release:        971007\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >Environment:\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# \n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >Description:\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# When a BAT contains only one BUN a select returns this BUN,\n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# even when it's not in the selection range:\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# \n");	# 21 MILline ($41:void)<-($34:str)
    mil.line("# #You are system administrator (adm)!\n");	# 22 MILline ($42:void)<-($43:str)
    mil.line("# >b:=new(oid,oid);\n");	# 23 MILline ($44:void)<-($45:str)
    mil.line("# >b.insert(oid(1),oid(2));\n");	# 24 MILline ($46:void)<-($47:str)
    mil.line("# >b.select(oid(3)).print;\n");	# 25 MILline ($48:void)<-($49:str)
    mil.line("# #-----------------#\n");	# 26 MILline ($50:void)<-($51:str)
    mil.line("# # oid   | tmp_25  #\n");	# 27 MILline ($52:void)<-($53:str)
    mil.line("# #-----------------#\n");	# 28 MILline ($54:void)<-($51:str)
    mil.line("# [ 1@0,    2@0     ]\n");	# 29 MILline ($55:void)<-($56:str)
    mil.line("# >b.select(oid(3)).print;\n");	# 30 MILline ($57:void)<-($49:str)
    mil.line("# #-----------------#\n");	# 31 MILline ($58:void)<-($51:str)
    mil.line("# # oid   | tmp_25  #\n");	# 32 MILline ($59:void)<-($53:str)
    mil.line("# #-----------------#\n");	# 33 MILline ($60:void)<-($51:str)
    mil.line("setoid(oid(20000000));");	# 34 MILline ($61:void)<-($62:str)
    aa_a := calc.oid(20000000);	# 35 CALCint2oid (aa_a:oid)<-($64:int)
    ba_a := calc.setoid(aa_a);	# 36 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("var b:=new(oid,oid);");	# 37 MILline ($66:void)<-($67:str)
    b := bbp.new(nil:oid,nil:oid);	# 38 CMDBATnew (b:bat[:oid,:oid])<-($69:oid)($69:oid)
    mil.line("b.insert(oid(1),oid(2));");	# 39 MILline ($70:void)<-($71:str)
    ca_a := calc.oid(1);	# 40 CALCint2oid (ca_a:oid)<-($73:int)
    da_a := calc.oid(2);	# 41 CALCint2oid (da_a:oid)<-($75:int)
    ea_a := bat.insert(b,ca_a,da_a);	# 42 BKCinsert_bun (ea_a:void)<-(b:bat[:oid,:oid])(ca_a:oid)(da_a:oid)
    mil.line("b.select(oid(3)).print();");	# 43 MILline ($77:void)<-($78:str)
    fa_a := calc.oid(3);	# 44 CALCint2oid (fa_a:oid)<-($80:int)
    ga_a := algebra.select(b,fa_a);	# 45 ALGselect1 (ga_a:bat[:oid,:oid])<-(b:bat[:oid,:oid])(fa_a:oid)
    ha_a := io.print(ga_a);	# 46 IOprint_val (ha_a:int)<-(ga_a:bat[:oid,:oid])
    mil.line("b.select(oid(3)).print();");	# 47 MILline ($83:void)<-($78:str)
    ia_a := calc.oid(3);	# 48 CALCint2oid (ia_a:oid)<-($80:int)
    ja_a := algebra.select(b,ia_a);	# 49 ALGselect1 (ja_a:bat[:oid,:oid])<-(b:bat[:oid,:oid])(ia_a:oid)
    ka_a := io.print(ja_a);	# 50 IOprint_val (ka_a:int)<-(ja_a:bat[:oid,:oid])
    mil.line("quit();");	# 51 MILline ($87:void)<-($88:str)
    la_a := clients.quit();	# 52 CLTquit (la_a:void)
end main;	# 53  
## >Number:         98
## >Category:       Mserver
## >Category:       Mserver
## >Synopsis:       wrong select when a BAT contains one BUN
## >Synopsis:       wrong select when a BAT contains one BUN
## >Confidential:   no
## >Confidential:   no
## >Severity:       critical
## >Severity:       critical
## >Priority:       high
## >Priority:       high
## >Responsible:    boncz
## >Responsible:    boncz
## >State:          open
## >State:          open
## >Class:          sw-bug
## >Class:          sw-bug
## >Submitter-Id:   unknown
## >Submitter-Id:   unknown
## >Arrival-Date:   Fri Dec 12 19:56:04 1997
## >Arrival-Date:   Fri Dec 12 19:56:04 1997
## >Originator:     windhouw
## >Originator:     windhouw
## >Organization:
## >Organization:
## UvA
## UvA
## >Release:        971007
## >Release:        971007
## >Environment:
## >Environment:
## 
## 
## >Description:
## >Description:
## When a BAT contains only one BUN a select returns this BUN,
## When a BAT contains only one BUN a select returns this BUN,
## even when it's not in the selection range:
## even when it's not in the selection range:
## 
## 
## #You are system administrator (adm)!
## #You are system administrator (adm)!
## >b:=new(oid,oid);
## >b:=new(oid,oid);
## >b.insert(oid(1),oid(2));
## >b.insert(oid(1),oid(2));
## >b.select(oid(3)).print;
## >b.select(oid(3)).print;
## #-----------------#
## #-----------------#
## # oid   | tmp_25  #
## # oid   | tmp_25  #
## #-----------------#
## #-----------------#
## [ 1@0,    2@0     ]
## [ 1@0,    2@0     ]
## >b.select(oid(3)).print;
## >b.select(oid(3)).print;
## #-----------------#
## #-----------------#
## # oid   | tmp_25  #
## # oid   | tmp_25  #
## #-----------------#
## #-----------------#
#
#setoid(oid(20000000));
#var b:=new(oid,oid);
#b.insert(oid(1),oid(2));
#b.select(oid(3)).print();
#-----------------#
# BAT:	  tmp_28  #
# (oid)	  (oid)	  #
#-----------------#
#b.select(oid(3)).print();
#-----------------#
# BAT:	  tmp_28  #
# (oid)	  (oid)	  #
#-----------------#
#quit();

# 17:06:53 >  
# 17:06:53 >  Done.
# 17:06:53 >  

