stdout of test 'no.098` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.098 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.098.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.098.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         98
# >Category:       Mserver
# >Synopsis:       wrong select when a BAT contains one BUN
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Fri Dec 12 19:56:04 1997
# >Originator:     windhouw
# >Organization:
# UvA
# >Release:        971007
# >Environment:
# 
# >Description:
# When a BAT contains only one BUN a select returns this BUN,
# even when it's not in the selection range:
# 
!ERROR: 	ba_a := setoid(aa_a);
!	               ^module name expected
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  unknown ($32:str)
#Predefined code segment 	# 2  unknown ($34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  unknown ($36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  unknown ($38:str)
#A few guidelines to maximize usefullness. 	# 5  unknown ($40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  unknown ($42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  unknown ($44:str)
#use the "mil_schema" for additional support routines 	# 8  unknown ($46:str)
    mil.line("# >Number:         98\n");	# 9  unknown ($47:any)<-($48:str)
    mil.line("# >Category:       Mserver\n");	# 10  unknown ($49:any)<-($50:str)
    mil.line("# >Synopsis:       wrong select when a BAT contains one BUN\n");	# 11  unknown ($51:any)<-($52:str)
    mil.line("# >Confidential:   no\n");	# 12  unknown ($53:any)<-($54:str)
    mil.line("# >Severity:       critical\n");	# 13  unknown ($55:any)<-($56:str)
    mil.line("# >Priority:       high\n");	# 14  unknown ($57:any)<-($58:str)
    mil.line("# >Responsible:    boncz\n");	# 15  unknown ($59:any)<-($60:str)
    mil.line("# >State:          open\n");	# 16  unknown ($61:any)<-($62:str)
    mil.line("# >Class:          sw-bug\n");	# 17  unknown ($63:any)<-($64:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 18  unknown ($65:any)<-($66:str)
    mil.line("# >Arrival-Date:   Fri Dec 12 19:56:04 1997\n");	# 19  unknown ($67:any)<-($68:str)
    mil.line("# >Originator:     windhouw\n");	# 20  unknown ($69:any)<-($70:str)
    mil.line("# >Organization:\n");	# 21  unknown ($71:any)<-($72:str)
    mil.line("# UvA\n");	# 22  unknown ($73:any)<-($74:str)
    mil.line("# >Release:        971007\n");	# 23  unknown ($75:any)<-($76:str)
    mil.line("# >Environment:\n");	# 24  unknown ($77:any)<-($78:str)
    mil.line("# \n");	# 25  unknown ($79:any)<-($80:str)
    mil.line("# >Description:\n");	# 26  unknown ($81:any)<-($82:str)
    mil.line("# When a BAT contains only one BUN a select returns this BUN,\n");	# 27  unknown ($83:any)<-($84:str)
    mil.line("# even when it's not in the selection range:\n");	# 28  unknown ($85:any)<-($86:str)
    mil.line("# \n");	# 29  unknown ($87:any)<-($80:str)
    mil.line("# #You are system administrator (adm)!\n");	# 30  unknown ($88:any)<-($89:str)
    mil.line("# >b:=new(oid,oid);\n");	# 31  unknown ($90:any)<-($91:str)
    mil.line("# >b.insert(oid(1),oid(2));\n");	# 32  unknown ($92:any)<-($93:str)
    mil.line("# >b.select(oid(3)).print;\n");	# 33  unknown ($94:any)<-($95:str)
    mil.line("# #-----------------#\n");	# 34  unknown ($96:any)<-($97:str)
    mil.line("# # oid   | tmp_25  #\n");	# 35  unknown ($98:any)<-($99:str)
    mil.line("# #-----------------#\n");	# 36  unknown ($100:any)<-($97:str)
    mil.line("# [ 1@0,    2@0     ]\n");	# 37  unknown ($101:any)<-($102:str)
    mil.line("# >b.select(oid(3)).print;\n");	# 38  unknown ($103:any)<-($95:str)
    mil.line("# #-----------------#\n");	# 39  unknown ($104:any)<-($97:str)
    mil.line("# # oid   | tmp_25  #\n");	# 40  unknown ($105:any)<-($99:str)
    mil.line("# #-----------------#\n");	# 41  unknown ($106:any)<-($97:str)
    mil.line("setoid(oid(20000000));");	# 42  unknown ($107:any)<-($108:str)
    aa_a := calc.oid(20000000);	# 43  unknown (aa_a:any)<-($110:int)
    ba_a;	# 44  unknown (ba_a:any)
    mil.line("var b:=new(oid,oid);");	# 45  unknown ($112:any)<-($113:str)
    b := bbp.new(nil:oid,nil:oid);	# 46  unknown (b:any)<-($115:oid)($115:oid)
    mil.line("b.insert(oid(1),oid(2));");	# 47  unknown ($116:any)<-($117:str)
    ca_a := calc.oid(1);	# 48  unknown (ca_a:any)<-($119:int)
    da_a := calc.oid(2);	# 49  unknown (da_a:any)<-($121:int)
    ea_a := bat.insert(b,ca_a,da_a);	# 50  unknown (ea_a:any)<-(b:any)(ca_a:any)(da_a:any)
    mil.line("b.select(oid(3)).print();");	# 51  unknown ($123:any)<-($124:str)
    fa_a := calc.oid(3);	# 52  unknown (fa_a:any)<-($126:int)
    ga_a := algebra.select(b,fa_a);	# 53  unknown (ga_a:any)<-(b:any)(fa_a:any)
    ha_a := io.print(ga_a);	# 54  unknown (ha_a:any)<-(ga_a:any)
    mil.line("b.select(oid(3)).print();");	# 55  unknown ($129:any)<-($124:str)
    ia_a := calc.oid(3);	# 56  unknown (ia_a:any)<-($126:int)
    ja_a := algebra.select(b,ia_a);	# 57  unknown (ja_a:any)<-(b:any)(ia_a:any)
    ka_a := io.print(ja_a);	# 58  unknown (ka_a:any)<-(ja_a:any)
    mil.line("quit();");	# 59  unknown ($133:any)<-($134:str)
    la_a := clients.quit();	# 60  unknown (la_a:any)
end main;	# 61  unknown 

# 17:06:53 >  
# 17:06:53 >  Done.
# 17:06:53 >  

