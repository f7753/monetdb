# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#include "mil_prelude";
	mil.line("# >Number:         156\n");
	mil.line("# >Category:       Mserver");
	mil.line("# >Category:       Mserver\n");
	mil.line("# >Synopsis:       multiplex bug");
	mil.line("# >Synopsis:       multiplex bug\n");
	mil.line("# >Confidential:   no");
	mil.line("# >Confidential:   no\n");
	mil.line("# >Severity:       critical");
	mil.line("# >Severity:       critical\n");
	mil.line("# >Priority:       high");
	mil.line("# >Priority:       high\n");
	mil.line("# >Responsible:    boncz (Peter Boncz)");
	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
	mil.line("# >State:          open");
	mil.line("# >State:          open\n");
	mil.line("# >Class:          sw-bug");
	mil.line("# >Class:          sw-bug\n");
	mil.line("# >Submitter-Id:   unknown");
	mil.line("# >Submitter-Id:   unknown\n");
	mil.line("# >Arrival-Date:   Mon Jun  8 14:53:01 1998");
	mil.line("# >Arrival-Date:   Mon Jun  8 14:53:01 1998\n");
	mil.line("# >Originator:     windhouw@cwi.nl");
	mil.line("# >Originator:     windhouw@cwi.nl\n");
	mil.line("# >Organization:");
	mil.line("# >Organization:\n");
	mil.line("# CWI");
	mil.line("# CWI\n");
	mil.line("# >Release:        980101");
	mil.line("# >Release:        980101\n");
	mil.line("# >Environment:");
	mil.line("# >Environment:\n");
	mil.line("# SunOS5.6");
	mil.line("# SunOS5.6\n");
	mil.line("# >Description:");
	mil.line("# >Description:\n");
	mil.line("# Hoi,");
	mil.line("# Hoi,\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# the following error occurs when I'm using the multiplex operation:");
	mil.line("# the following error occurs when I'm using the multiplex operation:\n");
	mil.line("# > GDKmalloc called with size 0");
	mil.line("# > GDKmalloc called with size 0\n");
	mil.line("# And the server is gone.");
	mil.line("# And the server is gone.\n");
	mil.line("# This happens when I've a multiplex operation in a inner loop. The second time");
	mil.line("# This happens when I've a multiplex operation in a inner loop. The second time\n");
	mil.line("# the loop comes to the inner loop, the multiplex operator recieves different data (garbage).");
	mil.line("# the loop comes to the inner loop, the multiplex operator recieves different data (garbage).\n");
	mil.line("# In mine orginal code there was an own module command as multiplex operation and there I");
	mil.line("# In mine orginal code there was an own module command as multiplex operation and there I\n");
	mil.line("# printed the recieved input values. These were really different in the second loop.");
	mil.line("# printed the recieved input values. These were really different in the second loop.\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# Example script:");
	mil.line("# Example script:\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# 8<----");
	mil.line("# 8<----\n");
	mil.line("# PROC extractBit(any theBitsets,any theBit,any theStr,any loop) : void {");
	mil.line("# PROC extractBit(any theBitsets,any theBit,any theStr,any loop) : void {\n");
	mil.line("#         VAR res;");
	mil.line("#         VAR res;\n");
	mil.line("#         IF (loop = false) {");
	mil.line("#         IF (loop = false) {\n");
	mil.line("# printf(\"!Before multiplex operation\\n\");");
	mil.line("# printf(\"!Before multiplex operation\\n\");\n");
	mil.line("#                 res := [*](theBitsets,theBit);");
	mil.line("#                 res := [*](theBitsets,theBit);\n");
	mil.line("# printf(\"!After multiplex operation\\n\");");
	mil.line("# printf(\"!After multiplex operation\\n\");\n");
	mil.line("#         } ELSE {");
	mil.line("#         } ELSE {\n");
	mil.line("#                 res := new(theBitsets.htype,int);");
	mil.line("#                 res := new(theBitsets.htype,int);\n");
	mil.line("#                 theBitsets@batloop {");
	mil.line("#                 theBitsets@batloop {\n");
	mil.line("#                         VAR b := $t*theBit;");
	mil.line("#                         VAR b := $t*theBit;\n");
	mil.line("#                         res.insert($h,b);");
	mil.line("#                         res.insert($h,b);\n");
	mil.line("#                 }");
	mil.line("#                 }\n");
	mil.line("#         }");
	mil.line("#         }\n");
	mil.line("#         printf(\"%s keer\\n\",theStr);");
	mil.line("#         printf(\"%s keer\\n\",theStr);\n");
	mil.line("#         res.print;");
	mil.line("#         res.print;\n");
	mil.line("# }");
	mil.line("# }\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# PROC bitsetHist(any theEnum,any theBitsets,any loop) : void {");
	mil.line("# PROC bitsetHist(any theEnum,any theBitsets,any loop) : void {\n");
	mil.line("#         theEnum@batloop {");
	mil.line("#         theEnum@batloop {\n");
	mil.line("#                 VAR c := extractBit(theBitsets,$h,$t,false);");
	mil.line("#                 VAR c := extractBit(theBitsets,$h,$t,false);\n");
	mil.line("#         }");
	mil.line("#         }\n");
	mil.line("# }");
	mil.line("# }\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# VAR enum := new(int,str);");
	mil.line("# VAR enum := new(int,str);\n");
	mil.line("# enum.insert(0,\"nul\");");
	mil.line("# enum.insert(0,\"nul\");\n");
	mil.line("# enum.insert(1,\"een\");");
	mil.line("# enum.insert(1,\"een\");\n");
	mil.line("# enum.insert(2,\"twee\");");
	mil.line("# enum.insert(2,\"twee\");\n");
	mil.line("# enum.insert(3,\"drie\");");
	mil.line("# enum.insert(3,\"drie\");\n");
	mil.line("# enum.insert(4,\"vier\");");
	mil.line("# enum.insert(4,\"vier\");\n");
	mil.line("# enum.insert(5,\"vijf\");");
	mil.line("# enum.insert(5,\"vijf\");\n");
	mil.line("# enum.print;");
	mil.line("# enum.print;\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# VAR bitsets := new(oid,int);");
	mil.line("# VAR bitsets := new(oid,int);\n");
	mil.line("# bitsets.insert(oid(1),2);");
	mil.line("# bitsets.insert(oid(1),2);\n");
	mil.line("# bitsets.insert(oid(2),4);");
	mil.line("# bitsets.insert(oid(2),4);\n");
	mil.line("# bitsets.print;");
	mil.line("# bitsets.print;\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# bitsetHist(enum,bitsets);");
	mil.line("# bitsetHist(enum,bitsets);\n");
	mil.line("# 8<----");
	mil.line("# 8<----\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# Output with multiplex operation");
	mil.line("# Output with multiplex operation\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# 8<----");
	mil.line("# 8<----\n");
	mil.line("# # Monet Database Server V4.0 (SunOS5.6) of Wed Jun  3 16:07:27 MET DST 1998");
	mil.line("# # Monet Database Server V4.0 (SunOS5.6) of Wed Jun  3 16:07:27 MET DST 1998\n");
	mil.line("# # Copyright (c) 1993-1998, CWI & SION. All rights reserved.");
	mil.line("# # Copyright (c) 1993-1998, CWI & SION. All rights reserved.\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# loaded;");
	mil.line("# loaded;\n");
	mil.line("# #---------------------------------#");
	mil.line("# #---------------------------------#\n");
	mil.line("# # module        | usage_count     #");
	mil.line("# # module        | usage_count     #\n");
	mil.line("# #---------------------------------#");
	mil.line("# #---------------------------------#\n");
	mil.line("# [ \"kernel\",       1               ]");
	mil.line("# [ \"kernel\",       1               ]\n");
	mil.line("# [ \"arith\",        1               ]");
	mil.line("# [ \"arith\",        1               ]\n");
	mil.line("# [ \"bat\",          1               ]");
	mil.line("# [ \"bat\",          1               ]\n");
	mil.line("# [ \"algebra\",      1               ]");
	mil.line("# [ \"algebra\",      1               ]\n");
	mil.line("# [ \"sys\",          1               ]");
	mil.line("# [ \"sys\",          1               ]\n");
	mil.line("# [ \"trans\",        1               ]");
	mil.line("# [ \"trans\",        1               ]\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# Try: modules;                - for other modules.");
	mil.line("# Try: modules;                - for other modules.\n");
	mil.line("#      ls;                     - for persistent bat listing.");
	mil.line("#      ls;                     - for persistent bat listing.\n");
	mil.line("#      sigs(\"<module>\")        - for available commands per module.");
	mil.line("#      sigs(\"<module>\")        - for available commands per module.\n");
	mil.line("#      help(\"<command>\")       - for help one-liner for a command.");
	mil.line("#      help(\"<command>\")       - for help one-liner for a command.\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# #You are system administrator (adm)!");
	mil.line("# #You are system administrator (adm)!\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# # BAT:    tmp_23  #");
	mil.line("# # BAT:    tmp_23  #\n");
	mil.line("# # (int)   (str)   #");
	mil.line("# # (int)   (str)   #\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# [ 0,      \"nul\"   ]");
	mil.line("# [ 0,      \"nul\"   ]\n");
	mil.line("# [ 1,      \"een\"   ]");
	mil.line("# [ 1,      \"een\"   ]\n");
	mil.line("# [ 2,      \"twee\"  ]");
	mil.line("# [ 2,      \"twee\"  ]\n");
	mil.line("# [ 3,      \"drie\"  ]");
	mil.line("# [ 3,      \"drie\"  ]\n");
	mil.line("# [ 4,      \"vier\"  ]");
	mil.line("# [ 4,      \"vier\"  ]\n");
	mil.line("# [ 5,      \"vijf\"  ]");
	mil.line("# [ 5,      \"vijf\"  ]\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# # BAT:    tmp_24  #");
	mil.line("# # BAT:    tmp_24  #\n");
	mil.line("# # (oid)   (int)   #");
	mil.line("# # (oid)   (int)   #\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# [ 1@0,    2       ]");
	mil.line("# [ 1@0,    2       ]\n");
	mil.line("# [ 2@0,    4       ]");
	mil.line("# [ 2@0,    4       ]\n");
	mil.line("# !Before multiplex operation");
	mil.line("# !Before multiplex operation\n");
	mil.line("# !After multiplex operation");
	mil.line("# !After multiplex operation\n");
	mil.line("# nul keer");
	mil.line("# nul keer\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# # BAT:    tmp_46  #");
	mil.line("# # BAT:    tmp_46  #\n");
	mil.line("# # (oid)   (int)   #");
	mil.line("# # (oid)   (int)   #\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# [ 1@0,    0       ]");
	mil.line("# [ 1@0,    0       ]\n");
	mil.line("# [ 2@0,    0       ]");
	mil.line("# [ 2@0,    0       ]\n");
	mil.line("# !Before multiplex operation");
	mil.line("# !Before multiplex operation\n");
	mil.line("# GDKmalloc called with size 0");
	mil.line("# GDKmalloc called with size 0\n");
	mil.line("# 8<----");
	mil.line("# 8<----\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# Output with batloop");
	mil.line("# Output with batloop\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# 8<----");
	mil.line("# 8<----\n");
	mil.line("# # Monet Database Server V4.0 (SunOS5.6) of Wed Jun  3 16:07:27 MET DST 1998");
	mil.line("# # Monet Database Server V4.0 (SunOS5.6) of Wed Jun  3 16:07:27 MET DST 1998\n");
	mil.line("# # Copyright (c) 1993-1998, CWI & SION. All rights reserved.");
	mil.line("# # Copyright (c) 1993-1998, CWI & SION. All rights reserved.\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# loaded;");
	mil.line("# loaded;\n");
	mil.line("# #---------------------------------#");
	mil.line("# #---------------------------------#\n");
	mil.line("# # module        | usage_count     #");
	mil.line("# # module        | usage_count     #\n");
	mil.line("# #---------------------------------#");
	mil.line("# #---------------------------------#\n");
	mil.line("# [ \"kernel\",       1               ]");
	mil.line("# [ \"kernel\",       1               ]\n");
	mil.line("# [ \"arith\",        1               ]");
	mil.line("# [ \"arith\",        1               ]\n");
	mil.line("# [ \"bat\",          1               ]");
	mil.line("# [ \"bat\",          1               ]\n");
	mil.line("# [ \"algebra\",      1               ]");
	mil.line("# [ \"algebra\",      1               ]\n");
	mil.line("# [ \"sys\",          1               ]");
	mil.line("# [ \"sys\",          1               ]\n");
	mil.line("# [ \"trans\",        1               ]");
	mil.line("# [ \"trans\",        1               ]\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# Try: modules;                - for other modules.");
	mil.line("# Try: modules;                - for other modules.\n");
	mil.line("#      ls;                     - for persistent bat listing.");
	mil.line("#      ls;                     - for persistent bat listing.\n");
	mil.line("#      sigs(\"<module>\")        - for available commands per module.");
	mil.line("#      sigs(\"<module>\")        - for available commands per module.\n");
	mil.line("#      help(\"<command>\")       - for help one-liner for a command.");
	mil.line("#      help(\"<command>\")       - for help one-liner for a command.\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# #You are system administrator (adm)!");
	mil.line("# #You are system administrator (adm)!\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# # BAT:    tmp_23  #");
	mil.line("# # BAT:    tmp_23  #\n");
	mil.line("# # (int)   (str)   #");
	mil.line("# # (int)   (str)   #\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# [ 0,      \"nul\"   ]");
	mil.line("# [ 0,      \"nul\"   ]\n");
	mil.line("# [ 1,      \"een\"   ]");
	mil.line("# [ 1,      \"een\"   ]\n");
	mil.line("# [ 2,      \"twee\"  ]");
	mil.line("# [ 2,      \"twee\"  ]\n");
	mil.line("# [ 3,      \"drie\"  ]");
	mil.line("# [ 3,      \"drie\"  ]\n");
	mil.line("# [ 4,      \"vier\"  ]");
	mil.line("# [ 4,      \"vier\"  ]\n");
	mil.line("# [ 5,      \"vijf\"  ]");
	mil.line("# [ 5,      \"vijf\"  ]\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# # BAT:    tmp_24  #");
	mil.line("# # BAT:    tmp_24  #\n");
	mil.line("# # (oid)   (int)   #");
	mil.line("# # (oid)   (int)   #\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# [ 1@0,    2       ]");
	mil.line("# [ 1@0,    2       ]\n");
	mil.line("# [ 2@0,    4       ]");
	mil.line("# [ 2@0,    4       ]\n");
	mil.line("# nul keer");
	mil.line("# nul keer\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# # BAT:    tmp_46  #");
	mil.line("# # BAT:    tmp_46  #\n");
	mil.line("# # (oid)   (int)   #");
	mil.line("# # (oid)   (int)   #\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# [ 1@0,    0       ]");
	mil.line("# [ 1@0,    0       ]\n");
	mil.line("# [ 2@0,    0       ]");
	mil.line("# [ 2@0,    0       ]\n");
	mil.line("# een keer");
	mil.line("# een keer\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# # BAT:    tmp_46  #");
	mil.line("# # BAT:    tmp_46  #\n");
	mil.line("# # (oid)   (int)   #");
	mil.line("# # (oid)   (int)   #\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# [ 1@0,    2       ]");
	mil.line("# [ 1@0,    2       ]\n");
	mil.line("# [ 2@0,    4       ]");
	mil.line("# [ 2@0,    4       ]\n");
	mil.line("# twee keer");
	mil.line("# twee keer\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# # BAT:    tmp_46  #");
	mil.line("# # BAT:    tmp_46  #\n");
	mil.line("# # (oid)   (int)   #");
	mil.line("# # (oid)   (int)   #\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# [ 1@0,    4       ]");
	mil.line("# [ 1@0,    4       ]\n");
	mil.line("# [ 2@0,    8       ]");
	mil.line("# [ 2@0,    8       ]\n");
	mil.line("# drie keer");
	mil.line("# drie keer\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# # BAT:    tmp_46  #");
	mil.line("# # BAT:    tmp_46  #\n");
	mil.line("# # (oid)   (int)   #");
	mil.line("# # (oid)   (int)   #\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# [ 1@0,    6       ]");
	mil.line("# [ 1@0,    6       ]\n");
	mil.line("# [ 2@0,    12      ]");
	mil.line("# [ 2@0,    12      ]\n");
	mil.line("# vier keer");
	mil.line("# vier keer\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# # BAT:    tmp_46  #");
	mil.line("# # BAT:    tmp_46  #\n");
	mil.line("# # (oid)   (int)   #");
	mil.line("# # (oid)   (int)   #\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# [ 1@0,    8       ]");
	mil.line("# [ 1@0,    8       ]\n");
	mil.line("# [ 2@0,    16      ]");
	mil.line("# [ 2@0,    16      ]\n");
	mil.line("# vijf keer");
	mil.line("# vijf keer\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# # BAT:    tmp_46  #");
	mil.line("# # BAT:    tmp_46  #\n");
	mil.line("# # (oid)   (int)   #");
	mil.line("# # (oid)   (int)   #\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# [ 1@0,    10      ]");
	mil.line("# [ 1@0,    10      ]\n");
	mil.line("# [ 2@0,    20      ]");
	mil.line("# [ 2@0,    20      ]\n");
	mil.line("");
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("PROC extractBit(any theBitsets,any theBit,any theStr,any loop) : void {");
function extractBit(theBitsets:any, theBit:any, theStr:any, loop:any):void;
	mil.line("        IF (loop = false) {");
barrier	ca_a := ==(loop,false);
	mil.line("printf(\"!Before multiplex operation\\n\");");
	da_a := printf("!Before multiplex operation\n");
	mil.line("                res := [*](theBitsets,theBit);");
	res := multiplex.tactics("*",theBitsets,theBit);
	mil.line("printf(\"!After multiplex operation\\n\");");
	ea_a := printf("!After multiplex operation\n");
	mil.line("        } ELSE {");
exit	ca_a;
barrier	fa_a := not(ca_a);
	mil.line("                res := new(theBitsets.htype(),int);");
	ga_a := getHeadType(theBitsets);
	res := new(ga_a,nil:int);
	mil.line("                theBitsets@batloop() {");
barrier	ha_a := bunStream(theBitsets,ha_aH,ha_aT);
	mil.line("                        VAR b := $t*theBit;");
	b := *(ha_aT,theBit);
	mil.line("                        res.insert($h,b);");
	ia_a := insert(res,ha_aH,b);
redo	ha_a;
exit	ha_a;
exit	fa_a;
	mil.line("        printf(\"%s keer\\n\",theStr);");
	ja_a := printf("%s keer\n",theStr);
	mil.line("        res.print();");
	ka_a := print(res);
end extractBit;
	mil.line("PROC bitsetHist(any theEnum,any theBitsets,any loop) : void {");
function bitsetHist(theEnum:any, theBitsets:any, loop:any):void;
	mil.line("        theEnum@batloop() {");
barrier	la_a := bunStream(theEnum,la_aH,la_aT);
	mil.line("                VAR c := extractBit(theBitsets,$h,$t,loop);");
	c := extractBit(theBitsets,la_aH,la_aT,loop);
redo	la_a;
exit	la_a;
end bitsetHist;
	mil.line("VAR enum := new(int,str);");
	enum := new(nil:int,nil:str);
	mil.line("enum.insert(0,\"nul\");");
	ma_a := insert(enum,0,"nul");
	mil.line("enum.insert(1,\"een\");");
	na_a := insert(enum,1,"een");
	mil.line("enum.insert(2,\"twee\");");
	oa_a := insert(enum,2,"twee");
	mil.line("enum.insert(3,\"drie\");");
	pa_a := insert(enum,3,"drie");
	mil.line("enum.insert(4,\"vier\");");
	qa_a := insert(enum,4,"vier");
	mil.line("enum.insert(5,\"vijf\");");
	ra_a := insert(enum,5,"vijf");
	mil.line("enum.print();");
	sa_a := print(enum);
	mil.line("VAR bitsets := new(oid,int);");
	bitsets := new(nil:oid,nil:int);
	mil.line("bitsets.insert(oid(1),2);");
	ta_a := oid(1);
	ua_a := insert(bitsets,ta_a,2);
	mil.line("bitsets.insert(oid(2),4);");
	va_a := oid(2);
	wa_a := insert(bitsets,va_a,4);
	mil.line("bitsets.print();");
	xa_a := print(bitsets);
	mil.line("# with batloop\n");
	mil.line("bitsetHist(enum,bitsets,true);");
	ya_a := bitsetHist(enum,bitsets,true);
	mil.line("# with multiplex\n");
	mil.line("bitsetHist(enum,bitsets,false);");
	ab_a := bitsetHist(enum,bitsets,false);
	mil.line("quit();");
	bb_a := quit();
#Identifer 'htype' mapped to 'getHeadType'
