# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#include "mil_prelude";
	mil.line("# >Number:         100\n");
	mil.line("# >Category:       MIL");
	mil.line("# >Category:       MIL\n");
	mil.line("# >Synopsis:       Virtual oids behave in a strange way.");
	mil.line("# >Synopsis:       Virtual oids behave in a strange way.\n");
	mil.line("# >Confidential:   no");
	mil.line("# >Confidential:   no\n");
	mil.line("# >Severity:       serious");
	mil.line("# >Severity:       serious\n");
	mil.line("# >Priority:       medium");
	mil.line("# >Priority:       medium\n");
	mil.line("# >Responsible:    boncz");
	mil.line("# >Responsible:    boncz\n");
	mil.line("# >State:          open");
	mil.line("# >State:          open\n");
	mil.line("# >Class:          sw-bug");
	mil.line("# >Class:          sw-bug\n");
	mil.line("# >Submitter-Id:   unknown");
	mil.line("# >Submitter-Id:   unknown\n");
	mil.line("# >Arrival-Date:   Mon Dec 15 11:47:39 1997");
	mil.line("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n");
	mil.line("# >Originator:     quak");
	mil.line("# >Originator:     quak\n");
	mil.line("# >Organization:");
	mil.line("# >Organization:\n");
	mil.line("# UvA");
	mil.line("# UvA\n");
	mil.line("# >Release:        971007");
	mil.line("# >Release:        971007\n");
	mil.line("# >Environment:");
	mil.line("# >Environment:\n");
	mil.line("# all");
	mil.line("# all\n");
	mil.line("# >Description:");
	mil.line("# >Description:\n");
	mil.line("# Try this out:");
	mil.line("# Try this out:\n");
	mil.line("# > a := new(int,str);");
	mil.line("# > a := new(int,str);\n");
	mil.line("# > a.insert(1,\"hello world\");");
	mil.line("# > a.insert(1,\"hello world\");\n");
	mil.line("# > a.seqbase(100@0);");
	mil.line("# > a.seqbase(100@0);\n");
	mil.line("# > [oid]([a~]).reverse.print();");
	mil.line("# > [oid]([a~]).reverse.print();\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# # oid   | tmp_92  #");
	mil.line("# # oid   | tmp_92  #\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# [ 100@0,  1       ]");
	mil.line("# [ 100@0,  1       ]\n");
	mil.line("# > [oid]([a~]).reverse.copy.print();");
	mil.line("# > [oid]([a~]).reverse.copy.print();\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# # oid   | tmp_93  #");
	mil.line("# # oid   | tmp_93  #\n");
	mil.line("# #-----------------#");
	mil.line("# #-----------------#\n");
	mil.line("# [ 1@0,    100     ]");
	mil.line("# [ 1@0,    100     ]\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("");
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("var a := new(int,str);");
	a := new(nil:int,nil:str);
	mil.line("a.insert(1,\"hello world\");");
	ca_a := insert(a,1,"hello world");
	mil.line("a.print();");
	da_a := print(a);
	mil.line("a.mark(nil).print();");
	ea_a := mark(a,nil);
	fa_a := print(ea_a);
	mil.line("a.mark(nil).reverse().print();");
	ga_a := mark(a,nil);
	ha_a := reverse(ga_a);
	ia_a := print(ha_a);
	mil.line("[oid](a.mark(nil)).reverse().print();");
	ja_a := mark(a,nil);
	ka_a := multiplex.tactics("oid",ja_a);
	la_a := reverse(ka_a);
	ma_a := print(la_a);
	mil.line("a.seqbase(100@0);");
	na_a := bat.setSequenceBase(a,100@0);
	mil.line("[oid](a.mark(nil)).reverse().print();");
	oa_a := mark(a,nil);
	pa_a := multiplex.tactics("oid",oa_a);
	qa_a := reverse(pa_a);
	ra_a := print(qa_a);
	mil.line("[oid](a.mark(nil)).reverse().copy().print();");
	sa_a := mark(a,nil);
	ta_a := multiplex.tactics("oid",sa_a);
	ua_a := reverse(ta_a);
	va_a := copy(ua_a);
	wa_a := print(va_a);
	mil.line("quit();");
	xa_a := quit();
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
