stdout of test 'no.051` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.051 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.051.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.051.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         51
# >Category:       MIL
# >Synopsis:       returns from within a batloop
# >Confidential:   no
# >Severity:       serious
# >Priority:       medium
# >Responsible:    boncz
# >State:          closed
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Wed Oct 15 13:50:27 1997
# >Originator:     niels
# >Organization:
# >Release:        971007
# >Environment:
# SOLARIS 2.5.1
# >Description:
# When a bat is returned from with a batloop the return value
# is incorrect. 
# proc create(b) := {
#         var a := new (oid,flt);
#         b@batloop(){
#                 if (a.count = 0)
#                         return a;
#         }
#         return a;
# }
# 
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("# >Number:         51\n");
#	mil.line("# >Category:       MIL\n");
#	mil.line("# >Synopsis:       returns from within a batloop\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       serious\n");
#	mil.line("# >Priority:       medium\n");
#	mil.line("# >Responsible:    boncz\n");
#	mil.line("# >State:          closed\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Wed Oct 15 13:50:27 1997\n");
#	mil.line("# >Originator:     niels\n");
#	mil.line("# >Organization:\n");
#	mil.line("# >Release:        971007\n");
#	mil.line("# >Environment:\n");
#	mil.line("# SOLARIS 2.5.1\n");
#	mil.line("# >Description:\n");
#	mil.line("# When a bat is returned from with a batloop the return value\n");
#	mil.line("# is incorrect. \n");
#	mil.line("# proc create(b) : bat {\n");
#	mil.line("#         var a := new (oid,flt);\n");
#	mil.line("#         b@batloop(){\n");
#	mil.line("#                 if (a.count = 0)\n");
#	mil.line("#                         return a;\n");
#	mil.line("#         }\n");
#	mil.line("#         return a;\n");
#	mil.line("# }\n");
#	mil.line("# \n");
#	mil.line("# b := new (oid,flt);\n");
#	mil.line("# b.insert(oid(1),flt(2));\n");
#	mil.line("# var c := create(b);\n");
#	mil.line("# b.semijoin(c).print;\n");
#	mil.line("# #output\n");
#	mil.line("# !WARNING: BATdescriptor: range error\n");
#	mil.line("# !ERROR: interpret command/proc: 2nd param: invalid BAT.\n");
#	mil.line("# [ nil ]\n");
#	mil.line("proc create(bat b) : bat {");
#function create(b:bat[:any,:any]):bat[:any,:any];
#	mil.line("        var a := new (oid,flt);");
#	a := new(nil:oid,nil:flt);
#	mil.line("        b@batloop(){");
#barrier	aa_a := bunStream(b,aa_aH,aa_aT);
#	mil.line("                if (a.count() = 0)");
#	ba_a := count(a);
#barrier	ca_a := ==(ba_a,0);
#	mil.line("                        return a;");
#	return da_a :=a;
#	mil.line("        }");
#exit	ca_a;
#redo	aa_a := bunStream(b,aa_aH,aa_aT);
#exit	aa_a;
#	mil.line("        return a;");
#	return ea_a :=a;
#end create;
function Admin.create(b:bat[:any,:any]):bat[:any,:any];	# 0  (create:bat[:any,:any])<-(b:bat[:any,:any])
    mil.line("        var a := new (oid,flt);");	# 1 MILline ($2:void)<-($3:str)
    a := bbp.new(nil:oid,nil:flt);	# 2 CMDBATnew (a:bat[:oid,:flt])<-($5:oid)($6:flt)
    mil.line("        b@batloop(){");	# 3 MILline ($7:void)<-($8:str)
barrier (aa_a,aa_aH,aa_aT):= chopper.newIterator(b);	# 4 CHPbunIterator (aa_a:lng)(aa_aH:any)(aa_aT:any)<-(b:bat[:any,:any]) jump 13
    mil.line("                if (a.count() = 0)");	# 5 MILline ($12:void)<-($13:str)
    ba_a := algebra.count(a);	# 6 ALGcount_bat (ba_a:lng)<-(a:bat[:oid,:flt])
barrier ca_a := calc.==(ba_a,0);	# 7 CALCcompEQlngint (ca_a:bit)<-(ba_a:lng)($16:int) jump 11
    mil.line("                        return a;");	# 8 MILline ($17:void)<-($18:str)
    return da_a := a;	# 9  (da_a:bat[:oid,:flt])<-(a:bat[:oid,:flt])
    mil.line("        }");	# 10 MILline ($20:void)<-($21:str)
exit ca_a;	# 11  (ca_a:bit)
    redo (aa_a,aa_aH,aa_aT):= chopper.hasMoreElements(b);	# 12 CHPbunHasMoreElements (aa_a:lng)(aa_aH:any)(aa_aT:any)<-(b:bat[:any,:any]) jump 5
exit (aa_a,aa_aH,aa_aT);	# 13  (aa_a:lng)(aa_aH:any)(aa_aT:any)
    mil.line("        return a;");	# 14 MILline ($22:void)<-($23:str)
    return ea_a := a;	# 15  (ea_a:bat[:oid,:flt])<-(a:bat[:oid,:flt])
end create;	# 16  
#	mil.line("var b := new (oid,flt);");
#	b := new(nil:oid,nil:flt);
#	mil.line("b.insert(oid(1),flt(2));");
#	fa_a := oid(1);
#	ga_a := flt(2);
#	ha_a := insert(b,fa_a,ga_a);
#	mil.line("b.print();");
#	ia_a := print(b);
#	mil.line("var c := create(b);");
#	c := create(b);
#	mil.line("b.print();");
#	ja_a := print(b);
#	mil.line("c.print();");
#	ka_a := print(c);
#	mil.line("b.semijoin(c).print();");
#	la_a := semijoin(b,c);
#	ma_a := print(la_a);
#	mil.line("quit();");
#	na_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("# >Number:         51\n");	# 1 MILline ($1:void)<-($2:str)
    mil.line("# >Category:       MIL\n");	# 2 MILline ($3:void)<-($4:str)
    mil.line("# >Synopsis:       returns from within a batloop\n");	# 3 MILline ($5:void)<-($6:str)
    mil.line("# >Confidential:   no\n");	# 4 MILline ($7:void)<-($8:str)
    mil.line("# >Severity:       serious\n");	# 5 MILline ($9:void)<-($10:str)
    mil.line("# >Priority:       medium\n");	# 6 MILline ($11:void)<-($12:str)
    mil.line("# >Responsible:    boncz\n");	# 7 MILline ($13:void)<-($14:str)
    mil.line("# >State:          closed\n");	# 8 MILline ($15:void)<-($16:str)
    mil.line("# >Class:          sw-bug\n");	# 9 MILline ($17:void)<-($18:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Arrival-Date:   Wed Oct 15 13:50:27 1997\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Originator:     niels\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Organization:\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# >Release:        971007\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Environment:\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# SOLARIS 2.5.1\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# >Description:\n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# When a bat is returned from with a batloop the return value\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# is incorrect. \n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# proc create(b) : bat {\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("#         var a := new (oid,flt);\n");	# 21 MILline ($41:void)<-($42:str)
    mil.line("#         b@batloop(){\n");	# 22 MILline ($43:void)<-($44:str)
    mil.line("#                 if (a.count = 0)\n");	# 23 MILline ($45:void)<-($46:str)
    mil.line("#                         return a;\n");	# 24 MILline ($47:void)<-($48:str)
    mil.line("#         }\n");	# 25 MILline ($49:void)<-($50:str)
    mil.line("#         return a;\n");	# 26 MILline ($51:void)<-($52:str)
    mil.line("# }\n");	# 27 MILline ($53:void)<-($54:str)
    mil.line("# \n");	# 28 MILline ($55:void)<-($56:str)
    mil.line("# b := new (oid,flt);\n");	# 29 MILline ($57:void)<-($58:str)
    mil.line("# b.insert(oid(1),flt(2));\n");	# 30 MILline ($59:void)<-($60:str)
    mil.line("# var c := create(b);\n");	# 31 MILline ($61:void)<-($62:str)
    mil.line("# b.semijoin(c).print;\n");	# 32 MILline ($63:void)<-($64:str)
    mil.line("# #output\n");	# 33 MILline ($65:void)<-($66:str)
    mil.line("# !WARNING: BATdescriptor: range error\n");	# 34 MILline ($67:void)<-($68:str)
    mil.line("# !ERROR: interpret command/proc: 2nd param: invalid BAT.\n");	# 35 MILline ($69:void)<-($70:str)
    mil.line("# [ nil ]\n");	# 36 MILline ($71:void)<-($72:str)
    mil.line("proc create(bat b) : bat {");	# 37 MILline ($73:void)<-($74:str)
    mil.line("var b := new (oid,flt);");	# 38 MILline ($75:void)<-($76:str)
    b := bbp.new(nil:oid,nil:flt);	# 39 CMDBATnew (b:bat[:oid,:flt])<-($78:oid)($79:flt)
    mil.line("b.insert(oid(1),flt(2));");	# 40 MILline ($80:void)<-($81:str)
    fa_a := calc.oid(1);	# 41 CALCint2oid (fa_a:oid)<-($83:int)
    ga_a := calc.flt(2);	# 42 CALCint2flt (ga_a:flt)<-($85:int)
    ha_a := bat.insert(b,fa_a,ga_a);	# 43 BKCinsert_bun (ha_a:void)<-(b:bat[:oid,:flt])(fa_a:oid)(ga_a:flt)
    mil.line("b.print();");	# 44 MILline ($87:void)<-($88:str)
    ia_a := io.print(b);	# 45 IOprint_val (ia_a:int)<-(b:bat[:oid,:flt])
    mil.line("var c := create(b);");	# 46 MILline ($90:void)<-($91:str)
    c := Admin.create(b);	# 47  (c:bat[:any,:any])<-(b:bat[:oid,:flt])
    mil.line("b.print();");	# 48 MILline ($93:void)<-($88:str)
    ja_a := io.print(b);	# 49 IOprint_val (ja_a:int)<-(b:bat[:oid,:flt])
    mil.line("c.print();");	# 50 MILline ($95:void)<-($96:str)
    ka_a := io.print(c);	# 51 IOprint_val (ka_a:int)<-(c:bat[:any,:any])
    mil.line("b.semijoin(c).print();");	# 52 MILline ($98:void)<-($99:str)
    la_a := algebra.semijoin(b,c);	# 53 ALGsemijoin (la_a:bat[:oid,:flt])<-(b:bat[:oid,:flt])(c:bat[:any,:any])
    ma_a := io.print(la_a);	# 54 IOprint_val (ma_a:int)<-(la_a:bat[:oid,:flt])
    mil.line("quit();");	# 55 MILline ($102:void)<-($103:str)
    na_a := clients.quit();	# 56 CLTquit (na_a:void)
end main;	# 57  
## >Number:         51
## >Category:       MIL
## >Synopsis:       returns from within a batloop
## >Confidential:   no
## >Severity:       serious
## >Priority:       medium
## >Responsible:    boncz
## >State:          closed
## >Class:          sw-bug
## >Submitter-Id:   unknown
## >Arrival-Date:   Wed Oct 15 13:50:27 1997
## >Originator:     niels
## >Organization:
## >Release:        971007
## >Environment:
## SOLARIS 2.5.1
## >Description:
## When a bat is returned from with a batloop the return value
## is incorrect. 
## proc create(b) : bat {
##         var a := new (oid,flt);
##         b@batloop(){
##                 if (a.count = 0)
##                         return a;
##         }
##         return a;
## }
## 
## b := new (oid,flt);
## b.insert(oid(1),flt(2));
## var c := create(b);
## b.semijoin(c).print;
## #output
## !WARNING: BATdescriptor: range error
## !ERROR: interpret command/proc: 2nd param: invalid BAT.
## [ nil ]
#proc create(bat b) : bat {
#var b := new (oid,flt);
#b.insert(oid(1),flt(2));
#b.print();
#-----------------#
# BAT:	  tmp_25  #
# (oid)	  (flt)	  #
#-----------------#
[ 1@0,	  2	  ]
#var c := create(b);
#        var a := new (oid,flt);
#        b@batloop(){
#                if (a.count() = 0)
#                        return a;
#b.print();
#-----------------#
# BAT:	  tmp_25  #
# (oid)	  (flt)	  #
#-----------------#
[ 1@0,	  2	  ]
#c.print();
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (flt)	  #
#-----------------#
#b.semijoin(c).print();
#-----------------#
# BAT:	  tmp_27  #
# (oid)	  (flt)	  #
#-----------------#

# 20:07:04 >  
# 20:07:04 >  Done.
# 20:07:04 >  

