# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#include "mil_prelude";
	mil.line("# >Number:         11\n");
	mil.line("# >Category:       Mserver");
	mil.line("# >Category:       Mserver\n");
	mil.line("# >Synopsis:       batloop operator on new(int, nil) hangs...");
	mil.line("# >Synopsis:       batloop operator on new(int, nil) hangs...\n");
	mil.line("# >Confidential:   no");
	mil.line("# >Confidential:   no\n");
	mil.line("# >Severity:       serious");
	mil.line("# >Severity:       serious\n");
	mil.line("# >Priority:       low");
	mil.line("# >Priority:       low\n");
	mil.line("# >Responsible:    boncz");
	mil.line("# >Responsible:    boncz\n");
	mil.line("# >State:          closed");
	mil.line("# >State:          closed\n");
	mil.line("# >Class:          sw-bug");
	mil.line("# >Class:          sw-bug\n");
	mil.line("# >Submitter-Id:   unknown");
	mil.line("# >Submitter-Id:   unknown\n");
	mil.line("# >Arrival-Date:   Mon Jul 14 17:30:01 1997");
	mil.line("# >Arrival-Date:   Mon Jul 14 17:30:01 1997\n");
	mil.line("# >Originator:     jonas");
	mil.line("# >Originator:     jonas\n");
	mil.line("# >Organization:");
	mil.line("# >Organization:\n");
	mil.line("# >Release:        970101");
	mil.line("# >Release:        970101\n");
	mil.line("# >Environment:");
	mil.line("# >Environment:\n");
	mil.line("# 3.06 hacked");
	mil.line("# 3.06 hacked\n");
	mil.line("# >Description:");
	mil.line("# >Description:\n");
	mil.line("# The following hangs the Mserver:");
	mil.line("# The following hangs the Mserver:\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# f := new(int, nil);");
	mil.line("# f := new(int, nil);\n");
	mil.line("# f.insert(1,10);");
	mil.line("# f.insert(1,10);\n");
	mil.line("# f.insert(2,20);");
	mil.line("# f.insert(2,20);\n");
	mil.line("# f.insert(3,30);");
	mil.line("# f.insert(3,30);\n");
	mil.line("# f.print();");
	mil.line("# f.print();\n");
	mil.line("# f@batloop()  { $head.print(); $tail.print(); }");
	mil.line("# f@batloop()  { $head.print(); $tail.print(); }\n");
	mil.line("");
	mil.line("var f := new(int, 0);");
	f := new(nil:int,0);
	mil.line("f.insert(1,10);");
	aa_a := insert(f,1,10);
	mil.line("f.insert(2,20);");
	ba_a := insert(f,2,20);
	mil.line("f.insert(3,30);");
	ca_a := insert(f,3,30);
	mil.line("f.print();");
	da_a := print(f);
	mil.line("f@batloop()  { $head.print(); $tail.print(); }");
barrier	ea_a := bunStream(f,ea_aH,ea_aT);
	fa_a := print(ea_aH);
	ga_a := print(ea_aT);
redo	ea_a;
exit	ea_a;
	mil.line("var h := new(int, void);");
	h := new(nil:int,nil:void);
	mil.line("h.insert(1,void(10));");
	ha_a := void(10);
	ia_a := insert(h,1,ha_a);
	mil.line("h.insert(2,void(20));");
	ja_a := void(20);
	ka_a := insert(h,2,ja_a);
	mil.line("h.insert(3,void(30));");
	la_a := void(30);
	ma_a := insert(h,3,la_a);
	mil.line("h.print();");
	na_a := print(h);
	mil.line("h@batloop()  { $head.print(); $tail.print(); }");
barrier	oa_a := bunStream(h,oa_aH,oa_aT);
	pa_a := print(oa_aH);
	qa_a := print(oa_aT);
redo	oa_a;
exit	oa_a;
	mil.line("var k := new(int, void);");
	k := new(nil:int,nil:void);
	mil.line("k.insert(1,void(nil));");
	ra_a := void(nil);
	sa_a := insert(k,1,ra_a);
	mil.line("k.insert(2,void(nil));");
	ta_a := void(nil);
	ua_a := insert(k,2,ta_a);
	mil.line("k.insert(3,void(nil));");
	va_a := void(nil);
	wa_a := insert(k,3,va_a);
	mil.line("k.print();");
	xa_a := print(k);
	mil.line("k@batloop()  { $head.print(); $tail.print(); }");
barrier	ya_a := bunStream(k,ya_aH,ya_aT);
	ab_a := print(ya_aH);
	bb_a := print(ya_aT);
redo	ya_a;
exit	ya_a;
	mil.line("var g := new(int, int);");
	g := new(nil:int,nil:int);
	mil.line("g.insert(1,10);");
	cb_a := insert(g,1,10);
	mil.line("g.insert(2,20);");
	db_a := insert(g,2,20);
	mil.line("g.insert(3,30);");
	eb_a := insert(g,3,30);
	mil.line("g.print();");
	fb_a := print(g);
	mil.line("g@batloop()  { $head.print(); $tail.print(); }");
barrier	gb_a := bunStream(g,gb_aH,gb_aT);
	hb_a := print(gb_aH);
	ib_a := print(gb_aT);
redo	gb_a;
exit	gb_a;
	mil.line("quit();");
	jb_a := quit();
