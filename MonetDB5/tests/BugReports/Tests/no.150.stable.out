stdout of test 'no.150` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.150 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.150.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 19:36:03 MET 2000.
#script:no.150.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         150
# >Category:       MIL
# >Synopsis:       Mserver crashes on non-existing module.
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Wed Apr  8 16:48:12 1998
# >Originator:     quak@cwi.nl
# >Organization:
# UvA
# >Release:        980101
# >Environment:
# solaris
# >Description:
# On solaris if you load a module which does not exist,
# the Mserver crashes. How to repeat:
# 
# Mclient
# > module("jabberwocky");
# 
function user.main():int;	# 0  (main:int)
    mil.line("# >Number:         150\n");	# 1 MILline ($1:void)<-($2:str)
    mil.line("# >Category:       MIL\n");	# 2 MILline ($3:void)<-($4:str)
    mil.line("# >Synopsis:       Mserver crashes on non-existing module.\n");	# 3 MILline ($5:void)<-($6:str)
    mil.line("# >Confidential:   no\n");	# 4 MILline ($7:void)<-($8:str)
    mil.line("# >Severity:       critical\n");	# 5 MILline ($9:void)<-($10:str)
    mil.line("# >Priority:       high\n");	# 6 MILline ($11:void)<-($12:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 7 MILline ($13:void)<-($14:str)
    mil.line("# >State:          open\n");	# 8 MILline ($15:void)<-($16:str)
    mil.line("# >Class:          sw-bug\n");	# 9 MILline ($17:void)<-($18:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Arrival-Date:   Wed Apr  8 16:48:12 1998\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Originator:     quak@cwi.nl\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Organization:\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# UvA\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Release:        980101\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >Environment:\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# solaris\n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >Description:\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# On solaris if you load a module which does not exist,\n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# the Mserver crashes. How to repeat:\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# \n");	# 21 MILline ($41:void)<-($42:str)
    mil.line("# Mclient\n");	# 22 MILline ($43:void)<-($44:str)
    mil.line("# > module(\"jabberwocky\");\n");	# 23 MILline ($45:void)<-($46:str)
    mil.line("# \n");	# 24 MILline ($47:void)<-($42:str)
    mil.line("# (Under the assumption that the module \"jabberwocky\"\n");	# 25 MILline ($48:void)<-($49:str)
    mil.line("# does not exist\n");	# 26 MILline ($50:void)<-($51:str)
    mil.line("setoid(oid(20000000));");	# 27 MILline ($52:void)<-($53:str)
    aa_a := calc.oid(20000000);	# 28 CALCint2oid (aa_a:oid)<-($55:int)
    ba_a := calc.setoid(aa_a);	# 29 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("quit();");	# 30 MILline ($57:void)<-($58:str)
    ca_a := clients.quit();	# 31 CLTquit (ca_a:void)
end main;	# 32  
## >Number:         150
## >Category:       MIL
## >Synopsis:       Mserver crashes on non-existing module.
## >Confidential:   no
## >Severity:       critical
## >Priority:       high
## >Responsible:    boncz (Peter Boncz)
## >State:          open
## >Class:          sw-bug
## >Submitter-Id:   unknown
## >Arrival-Date:   Wed Apr  8 16:48:12 1998
## >Originator:     quak@cwi.nl
## >Organization:
## UvA
## >Release:        980101
## >Environment:
## solaris
## >Description:
## On solaris if you load a module which does not exist,
## the Mserver crashes. How to repeat:
## 
## Mclient
## > module("jabberwocky");
## 
## (Under the assumption that the module "jabberwocky"
## does not exist
#setoid(oid(20000000));
#quit();

# 14:17:55 >  
# 14:17:55 >  Done.
# 14:17:55 >  

