stdout of test 'no.150` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.150 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.150.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 19:36:03 MET 2000.
#script:no.150.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         150
# >Category:       MIL
# >Synopsis:       Mserver crashes on non-existing module.
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Wed Apr  8 16:48:12 1998
# >Originator:     quak@cwi.nl
# >Organization:
# UvA
# >Release:        980101
# >Environment:
# solaris
# >Description:
# On solaris if you load a module which does not exist,
# the Mserver crashes. How to repeat:
# 
# Mclient
# > module("jabberwocky");
# 
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  ($32:str)
#Predefined code segment 	# 2  ($34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  ($36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  ($38:str)
#A few guidelines to maximize usefullness. 	# 5  ($40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  ($42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  ($44:str)
#use the "mil_schema" for additional support routines 	# 8  ($46:str)
    mil.line("# >Number:         150\n");	# 9 MILline ($47:void)<-($48:str)
    mil.line("# >Category:       MIL\n");	# 10 MILline ($49:void)<-($50:str)
    mil.line("# >Synopsis:       Mserver crashes on non-existing module.\n");	# 11 MILline ($51:void)<-($52:str)
    mil.line("# >Confidential:   no\n");	# 12 MILline ($53:void)<-($54:str)
    mil.line("# >Severity:       critical\n");	# 13 MILline ($55:void)<-($56:str)
    mil.line("# >Priority:       high\n");	# 14 MILline ($57:void)<-($58:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 15 MILline ($59:void)<-($60:str)
    mil.line("# >State:          open\n");	# 16 MILline ($61:void)<-($62:str)
    mil.line("# >Class:          sw-bug\n");	# 17 MILline ($63:void)<-($64:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 18 MILline ($65:void)<-($66:str)
    mil.line("# >Arrival-Date:   Wed Apr  8 16:48:12 1998\n");	# 19 MILline ($67:void)<-($68:str)
    mil.line("# >Originator:     quak@cwi.nl\n");	# 20 MILline ($69:void)<-($70:str)
    mil.line("# >Organization:\n");	# 21 MILline ($71:void)<-($72:str)
    mil.line("# UvA\n");	# 22 MILline ($73:void)<-($74:str)
    mil.line("# >Release:        980101\n");	# 23 MILline ($75:void)<-($76:str)
    mil.line("# >Environment:\n");	# 24 MILline ($77:void)<-($78:str)
    mil.line("# solaris\n");	# 25 MILline ($79:void)<-($80:str)
    mil.line("# >Description:\n");	# 26 MILline ($81:void)<-($82:str)
    mil.line("# On solaris if you load a module which does not exist,\n");	# 27 MILline ($83:void)<-($84:str)
    mil.line("# the Mserver crashes. How to repeat:\n");	# 28 MILline ($85:void)<-($86:str)
    mil.line("# \n");	# 29 MILline ($87:void)<-($88:str)
    mil.line("# Mclient\n");	# 30 MILline ($89:void)<-($90:str)
    mil.line("# > module(\"jabberwocky\");\n");	# 31 MILline ($91:void)<-($92:str)
    mil.line("# \n");	# 32 MILline ($93:void)<-($88:str)
    mil.line("# (Under the assumption that the module \"jabberwocky\"\n");	# 33 MILline ($94:void)<-($95:str)
    mil.line("# does not exist\n");	# 34 MILline ($96:void)<-($97:str)
    mil.line("setoid(oid(20000000));");	# 35 MILline ($98:void)<-($99:str)
    aa_a := calc.oid(20000000);	# 36 CALCint2oid (aa_a:oid)<-($101:int)
    ba_a := calc.setoid(aa_a);	# 37 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("quit();");	# 38 MILline ($103:void)<-($104:str)
    ca_a := clients.quit();	# 39 CLTquit (ca_a:void)
end main;	# 40  
## >Number:         150\n
## >Category:       MIL\n
## >Synopsis:       Mserver crashes on non-existing module.\n
## >Confidential:   no\n
## >Severity:       critical\n
## >Priority:       high\n
## >Responsible:    boncz (Peter Boncz)\n
## >State:          open\n
## >Class:          sw-bug\n
## >Submitter-Id:   unknown\n
## >Arrival-Date:   Wed Apr  8 16:48:12 1998\n
## >Originator:     quak@cwi.nl\n
## >Organization:\n
## UvA\n
## >Release:        980101\n
## >Environment:\n
## solaris\n
## >Description:\n
## On solaris if you load a module which does not exist,\n
## the Mserver crashes. How to repeat:\n
## \n
## Mclient\n
## > module(\"jabberwocky\");\n
## \n
## (Under the assumption that the module \"jabberwocky\"\n
## does not exist\n
#setoid(oid(20000000));
#quit();

# 14:17:55 >  
# 14:17:55 >  Done.
# 14:17:55 >  

