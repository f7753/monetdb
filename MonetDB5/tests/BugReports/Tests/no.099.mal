# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
function comp(left:any, right:any):any;
#  IF (left = right) {
barrier	ca_a := =(left,right);
#    printf("left equals right\n");
	da_a := printf("left equals right\n");
exit	ca_a;
#  } ELSE {
barrier	ea_a := not(ca_a);
#    printf("left is not equal to right\n");
	fa_a := printf("left is not equal to right\n");
exit	ea_a;
#  IF (left != right) {
barrier	ga_a := !=(left,right);
#    printf("left is not equal to right\n");
	ha_a := printf("left is not equal to right\n");
exit	ga_a;
#  } ELSE {
barrier	ia_a := not(ga_a);
#    printf("left equals right\n");
	ja_a := printf("left equals right\n");
exit	ia_a;
end comp;
#comp(oid(nil),oid(nil));
	nil:= mil.take("nil");
	ka_a := oid(nil);
	la_a := oid(nil);
	ma_a := comp(ka_a,la_a);
#comp(oid(1),oid(nil));
	na_a := oid(1);
	oa_a := oid(nil);
	pa_a := comp(na_a,oa_a);
#comp(oid(1),oid(1));
	qa_a := oid(1);
	ra_a := oid(1);
	sa_a := comp(qa_a,ra_a);
#comp(str(nil),str(nil));
	ta_a := str(nil);
	ua_a := str(nil);
	va_a := comp(ta_a,ua_a);
#comp(str("a"),str(nil));
	wa_a := str("a");
	xa_a := str(nil);
	ya_a := comp(wa_a,xa_a);
#comp(str("a"),str("a"));
	ab_a := str("a");
	bb_a := str("a");
	cb_a := comp(ab_a,bb_a);
#quit();
	db_a := quit();
