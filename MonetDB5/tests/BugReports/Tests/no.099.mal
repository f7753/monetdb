# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#include "mil_prelude";
	mil.line("# >Number:         99\n");
	mil.line("# >Category:       Mserver");
	mil.line("# >Category:       Mserver\n");
	mil.line("# >Synopsis:       comparison of nil values is not reliable");
	mil.line("# >Synopsis:       comparison of nil values is not reliable\n");
	mil.line("# >Confidential:   no");
	mil.line("# >Confidential:   no\n");
	mil.line("# >Severity:       critical");
	mil.line("# >Severity:       critical\n");
	mil.line("# >Priority:       high");
	mil.line("# >Priority:       high\n");
	mil.line("# >Responsible:    boncz");
	mil.line("# >Responsible:    boncz\n");
	mil.line("# >State:          open");
	mil.line("# >State:          open\n");
	mil.line("# >Class:          sw-bug");
	mil.line("# >Class:          sw-bug\n");
	mil.line("# >Submitter-Id:   unknown");
	mil.line("# >Submitter-Id:   unknown\n");
	mil.line("# >Arrival-Date:   Mon Dec 15 11:22:32 1997");
	mil.line("# >Arrival-Date:   Mon Dec 15 11:22:32 1997\n");
	mil.line("# >Originator:     windhouw");
	mil.line("# >Originator:     windhouw\n");
	mil.line("# >Organization:");
	mil.line("# >Organization:\n");
	mil.line("# UvA");
	mil.line("# UvA\n");
	mil.line("# >Release:        971007");
	mil.line("# >Release:        971007\n");
	mil.line("# >Environment:");
	mil.line("# >Environment:\n");
	mil.line("# ");
	mil.line("# \n");
	mil.line("# >Description:");
	mil.line("# >Description:\n");
	mil.line("# #You are system administrator (adm)!");
	mil.line("# #You are system administrator (adm)!\n");
	mil.line("# >PROC comp( any left, any right) : any {");
	mil.line("# >PROC comp( any left, any right) : any {\n");
	mil.line("# >  IF (left = right) {");
	mil.line("# >  IF (left = right) {\n");
	mil.line("# >    printf(\"left equals right\\n\");");
	mil.line("# >    printf(\"left equals right\\n\");\n");
	mil.line("# >  } ELSE {");
	mil.line("# >  } ELSE {\n");
	mil.line("# >    printf(\"left is not equal to right\\n\");");
	mil.line("# >    printf(\"left is not equal to right\\n\");\n");
	mil.line("# >  }");
	mil.line("# >  }\n");
	mil.line("# >  IF (left != right) {");
	mil.line("# >  IF (left != right) {\n");
	mil.line("# >    printf(\"left is not equal to right\\n\");");
	mil.line("# >    printf(\"left is not equal to right\\n\");\n");
	mil.line("# >  } ELSE {");
	mil.line("# >  } ELSE {\n");
	mil.line("# >    printf(\"left equals right\\n\");");
	mil.line("# >    printf(\"left equals right\\n\");\n");
	mil.line("# >  }");
	mil.line("# >  }\n");
	mil.line("# >}");
	mil.line("# >}\n");
	mil.line("# >comp(oid(nil),oid(nil));");
	mil.line("# >comp(oid(nil),oid(nil));\n");
	mil.line("# left equals right");
	mil.line("# left equals right\n");
	mil.line("# left is not equal to right");
	mil.line("# left is not equal to right\n");
	mil.line("# >comp(oid(1),oid(nil));");
	mil.line("# >comp(oid(1),oid(nil));\n");
	mil.line("# left is not equal to right");
	mil.line("# left is not equal to right\n");
	mil.line("# left is not equal to right");
	mil.line("# left is not equal to right\n");
	mil.line("# >comp(oid(1),oid(1));");
	mil.line("# >comp(oid(1),oid(1));\n");
	mil.line("# left equals right");
	mil.line("# left equals right\n");
	mil.line("# left equals right");
	mil.line("# left equals right\n");
	mil.line("# >comp(str(nil),str(nil));");
	mil.line("# >comp(str(nil),str(nil));\n");
	mil.line("# left equals right");
	mil.line("# left equals right\n");
	mil.line("# left is not equal to right");
	mil.line("# left is not equal to right\n");
	mil.line("# >comp(str(\"a\"),str(nil));");
	mil.line("# >comp(str(\"a\"),str(nil));\n");
	mil.line("# left equals right");
	mil.line("# left equals right\n");
	mil.line("# left is not equal to right");
	mil.line("# left is not equal to right\n");
	mil.line("# >comp(str(\"a\"),str(\"a\"));");
	mil.line("# >comp(str(\"a\"),str(\"a\"));\n");
	mil.line("# left equals right");
	mil.line("# left equals right\n");
	mil.line("# left equals right");
	mil.line("# left equals right\n");
	mil.line("");
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("PROC comp(any left, any right) : any {");
function comp(left:any, right:any):any;
	mil.line("  IF (left = right) {");
barrier	ca_a := ==(left,right);
	mil.line("    printf(\"left equals right\\n\");");
	da_a := printf("left equals right\n");
	mil.line("  } ELSE {");
exit	ca_a;
barrier	ea_a := not(ca_a);
	mil.line("    printf(\"left is not equal to right\\n\");");
	fa_a := printf("left is not equal to right\n");
exit	ea_a;
	mil.line("  IF (left != right) {");
barrier	ga_a := !=(left,right);
	mil.line("    printf(\"left is not equal to right\\n\");");
	ha_a := printf("left is not equal to right\n");
	mil.line("  } ELSE {");
exit	ga_a;
barrier	ia_a := not(ga_a);
	mil.line("    printf(\"left equals right\\n\");");
	ja_a := printf("left equals right\n");
exit	ia_a;
end comp;
	mil.line("comp(oid(nil),oid(nil));");
	ka_a := oid(nil);
	la_a := oid(nil);
	ma_a := comp(ka_a,la_a);
	mil.line("comp(oid(1),oid(nil));");
	na_a := oid(1);
	oa_a := oid(nil);
	pa_a := comp(na_a,oa_a);
	mil.line("comp(oid(1),oid(1));");
	qa_a := oid(1);
	ra_a := oid(1);
	sa_a := comp(qa_a,ra_a);
	mil.line("comp(str(nil),str(nil));");
	ta_a := str(nil);
	ua_a := str(nil);
	va_a := comp(ta_a,ua_a);
	mil.line("comp(str(\"a\"),str(nil));");
	wa_a := str("a");
	xa_a := str(nil);
	ya_a := comp(wa_a,xa_a);
	mil.line("comp(str(\"a\"),str(\"a\"));");
	ab_a := str("a");
	bb_a := str("a");
	cb_a := comp(ab_a,bb_a);
	mil.line("quit();");
	db_a := quit();
