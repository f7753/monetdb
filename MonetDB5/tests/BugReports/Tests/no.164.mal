# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#var a:=new(int,str);    
	a := new(:int,:str);
#a.insert(1,"A");
	ca_a := insert(a,1,"A");
#a.insert(2,"B");
	da_a := insert(a,2,"B");
#a.insert(3,"C");
	ea_a := insert(a,3,"C");
#var b:=new(int,str);
	b := new(:int,:str);
#b.insert(3,"A");
	fa_a := insert(b,3,"A");
#b.insert(2,"B");
	ga_a := insert(b,2,"B");
#b.insert(1,"C");
	ha_a := insert(b,1,"C");
#table(a,b);
	ia_a := table(a,b);
#a.heapclustercopy(b);
	ja_a := heapclustercopy(a,b);
#table(a,b);
	ka_a := table(a,b);
#heapclustercopy(a,b);
	la_a := heapclustercopy(a,b);
#table(a,b);
	ma_a := table(a,b);
#b.heapclustercopy(a);
	na_a := heapclustercopy(b,a);
#table(a,b);
	oa_a := table(a,b);
#heapclustercopy(b,a);
	pa_a := heapclustercopy(b,a);
#table(a,b);
	qa_a := table(a,b);
#quit();
	ra_a := quit();
