# Monet Mil to Mal compiler
include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("# [t_i, n_i]\n");
	w:= mil.take("w");
	ca_a := histogram(w);
	da_a := print(ca_a);
	mil.line("#split w in twee tabellen\n");
	docid := new(nil:void,nil:oid);
	mil.line("var tid := new( void, str );");
	tid := new(nil:void,nil:str);
	mil.line("docid.insert( w.mark(nil).reverse() );");
	ea_a := mark(w,nil);
	fa_a := reverse(ea_a);
	ga_a := insert(docid,fa_a);
	mil.line("docid.print();");
	ha_a := print(docid);
	mil.line("tid.insert( w.reverse().mark(nil).reverse() );");
	ia_a := reverse(w);
	ja_a := mark(ia_a,nil);
	ka_a := reverse(ja_a);
	la_a := insert(tid,ka_a);
	mil.line("tid.print();");
	ma_a := print(tid);
	mil.line("docid.seqbase( 1000@0 );");
	na_a := bat.setSequenceBase(docid,1000@0);
	mil.line("docid.print();");
	oa_a := print(docid);
	mil.line("tid.seqbase( 1000@0 );");
	pa_a := bat.setSequenceBase(tid,1000@0);
	mil.line("tid.print();");
	qa_a := print(tid);
	mil.line("tid.reverse().print();");
	ra_a := reverse(tid);
	sa_a := print(ra_a);
	mil.line("var tidx:=tid.copy();");
	tidx := copy(tid);
	mil.line("tidx.print();");
	ta_a := print(tidx);
	mil.line("var tidy:=([oid](tid)).copy();");
	ua_a := multiplex.tactics("oid",tid);
	tidy := copy(ua_a);
	mil.line("tidy.print();");
	va_a := print(tidy);
	mil.line("print( docid, tid );");
	wa_a := print(docid,tid);
	mil.line("CTgroup( docid, tid ).print();");
	xa_a := group(docid,tid);
	ya_a := print(xa_a);
	mil.line("# t_i, tf_ij\n");
	ab_a := reverse(tidx);
	bb_a := group(docid,tid);
	cb_a := histogram(bb_a);
	db_a := join(ab_a,cb_a);
	eb_a := print(db_a);
	mil.line("join( tidy.reverse(), CTgroup( docid, tid ).histogram()).print();");
	fb_a := reverse(tidy);
	gb_a := group(docid,tid);
	hb_a := histogram(gb_a);
	ib_a := join(fb_a,hb_a);
	jb_a := print(ib_a);
	mil.line("join( tid.reverse(), CTgroup( docid, tid ).histogram()).print();");
	kb_a := reverse(tid);
	lb_a := group(docid,tid);
	mb_a := histogram(lb_a);
	nb_a := join(kb_a,mb_a);
	ob_a := print(nb_a);
	mil.line("# d_j, max tf_j\n");
	djtfij := new(nil:oid,nil:int);
	mil.line("djtfij.insert( join( docid.reverse(), CTgroup( docid, tid ).histogram() ) );");
	pb_a := reverse(docid);
	qb_a := group(docid,tid);
	rb_a := histogram(qb_a);
	sb_a := join(pb_a,rb_a);
	tb_a := insert(djtfij,sb_a);
	mil.line("{max}(djtfij).print();");
	ub_a := group.max(djtfij);
	vb_a := print(ub_a);
	mil.line("# This way it works. However, if I do not do an explicit new and insert,\n");
	mil.line("# then the server crashes as follows:\n");
	mil.line("var djtfijx :=join( docid.reverse(), CTgroup( docid, tid ).histogram() );");
	wb_a := reverse(docid);
	xb_a := group(docid,tid);
	yb_a := histogram(xb_a);
	djtfijx := join(wb_a,yb_a);
	mil.line("{max}(djtfijx).print();");
	ac_a := group.max(djtfijx);
	bc_a := print(ac_a);
	mil.line("quit();");
	cc_a := quit();
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
#Identifer 'CTgroup' mapped to 'group'
