# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#w.histogram().print();
	w:= mil.take("w");
	ca_a := histogram(w,);
	da_a := print(ca_a,);
#var docid := new( void, oid );
	docid := new(:void,:oid);
#var tid := new( void, str );
	tid := new(:void,:str);
#docid.insert( w.mark(nil).reverse() );
	nil:= mil.take("nil");
	ea_a := mark(w,nil);
	fa_a := reverse(ea_a,);
	ga_a := insert(docid,fa_a);
#docid.print();
	ha_a := print(docid,);
#tid.insert( w.reverse().mark(nil).reverse() );
	ia_a := reverse(w,);
	ja_a := mark(ia_a,nil);
	ka_a := reverse(ja_a,);
	la_a := insert(tid,ka_a);
#tid.print();
	ma_a := print(tid,);
#docid.seqbase( 1000@0 );
	na_a := bat.setSequenceBase(docid,1000@0);
#docid.print();
	oa_a := print(docid,);
#tid.seqbase( 1000@0 );
	pa_a := bat.setSequenceBase(tid,1000@0);
#tid.print();
	qa_a := print(tid,);
#tid.reverse().print();
	ra_a := reverse(tid,);
	sa_a := print(ra_a,);
#var tidx:=tid.copy();
	tidx := copy(tid,);
#tidx.print();
	ta_a := print(tidx,);
#var tidy:=([oid](tid)).copy();
	ua_a := multiplex.tactics("oid",tid);
	tidy := copy(ua_a,);
#tidy.print();
	va_a := print(tidy,);
#print( docid, tid );
	wa_a := print(docid,tid);
#CTgroup( docid, tid ).print();
	xa_a := group(docid,tid);
	ya_a := print(xa_a,);
#join( tidx.reverse(), CTgroup( docid, tid ).histogram()).print();
	ab_a := reverse(tidx,);
	bb_a := group(docid,tid);
	cb_a := histogram(bb_a,);
	db_a := join(ab_a,cb_a);
	eb_a := print(db_a,);
#join( tidy.reverse(), CTgroup( docid, tid ).histogram()).print();
	fb_a := reverse(tidy,);
	gb_a := group(docid,tid);
	hb_a := histogram(gb_a,);
	ib_a := join(fb_a,hb_a);
	jb_a := print(ib_a,);
#join( tid.reverse(), CTgroup( docid, tid ).histogram()).print();
	kb_a := reverse(tid,);
	lb_a := group(docid,tid);
	mb_a := histogram(lb_a,);
	nb_a := join(kb_a,mb_a);
	ob_a := print(nb_a,);
#var djtfij := new( oid, int );
	djtfij := new(:oid,:int);
#djtfij.insert( join( docid.reverse(), CTgroup( docid, tid ).histogram() ) );
	pb_a := reverse(docid,);
	qb_a := group(docid,tid);
	rb_a := histogram(qb_a,);
	sb_a := join(pb_a,rb_a);
	tb_a := insert(djtfij,sb_a);
#{max}(djtfij).print();
	ub_a := group.max(djtfij);
	vb_a := print(ub_a,);
#var djtfijx :=join( docid.reverse(), CTgroup( docid, tid ).histogram() );
	wb_a := reverse(docid,);
	xb_a := group(docid,tid);
	yb_a := histogram(xb_a,);
	djtfijx := join(wb_a,yb_a);
#{max}(djtfijx).print();
	ac_a := group.max(djtfijx);
	bc_a := print(ac_a,);
#quit();
	cc_a := quit();
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
#Identifer 'CTgroup' mapped to 'group'
