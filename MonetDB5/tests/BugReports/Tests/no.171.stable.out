stdout of test 'no.171` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.171 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.171.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.171.milS


# Monet Database Server V4.7.3
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
#include mil_scenario;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
# sample script:
# ========
# s:=new(int,int);
# insert(s,5,5);
# insert(s,3,3);
# insert(s,4,2);
# insert(s,2,1);
# insert(s,1,1);
# insert(s,4,2);
# insert(s,4,3);
# s.sort.print;
# s.reverse.select(2).print;
# ========
#
function user.main():int;	# 0  (main:int)
# Monet Mil to Mal compiler 	# 1  ($2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  ($4:str)
#Predefined code segment 	# 3  ($6:str)
#The compiler can not guarantee an accurate compilation, 	# 4  ($8:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  ($10:str)
#A few guidelines to maximize usefullness. 	# 6  ($12:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  ($14:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  ($16:str)
#use the "mil_schema" for additional support routines 	# 9  ($18:str)
    mil.line("# >Number:         171\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Category:       MIL\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Synopsis:       X.reverse().select() fails after X.sort()\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Confidential:   no\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# >Severity:       critical\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Priority:       high\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# >State:          open\n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >Class:          sw-bug\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# >Arrival-Date:   Thu Dec 10 22:54:12 1998\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# >Originator:     manegold@cwi.nl\n");	# 21 MILline ($41:void)<-($42:str)
    mil.line("# >Organization:\n");	# 22 MILline ($43:void)<-($44:str)
    mil.line("# CWI\n");	# 23 MILline ($45:void)<-($46:str)
    mil.line("# >Release:        980101\n");	# 24 MILline ($47:void)<-($48:str)
    mil.line("# >Environment:\n");	# 25 MILline ($49:void)<-($50:str)
    mil.line("# IRIX\n");	# 26 MILline ($51:void)<-($52:str)
    mil.line("# >Description:\n");	# 27 MILline ($53:void)<-($54:str)
    mil.line("# a select on an bat.reverse()d BAT returns incorrect result\n");	# 28 MILline ($55:void)<-($56:str)
    mil.line("# when a sort has been done on the same BAT before.\n");	# 29 MILline ($57:void)<-($58:str)
    mil.line("#\n");	# 30 MILline ($59:void)<-($60:str)
    mil.line("# sample script:\n");	# 31 MILline ($61:void)<-($62:str)
    mil.line("# ========\n");	# 32 MILline ($63:void)<-($64:str)
    mil.line("# s:=new(int,int);\n");	# 33 MILline ($65:void)<-($66:str)
    mil.line("# bat.insert(s,5,5);\n");	# 34 MILline ($67:void)<-($68:str)
    mil.line("# bat.insert(s,3,3);\n");	# 35 MILline ($69:void)<-($70:str)
    mil.line("# bat.insert(s,4,2);\n");	# 36 MILline ($71:void)<-($72:str)
    mil.line("# bat.insert(s,2,1);\n");	# 37 MILline ($73:void)<-($74:str)
    mil.line("# bat.insert(s,1,1);\n");	# 38 MILline ($75:void)<-($76:str)
    mil.line("# bat.insert(s,4,2);\n");	# 39 MILline ($77:void)<-($72:str)
    mil.line("# bat.insert(s,4,3);\n");	# 40 MILline ($78:void)<-($79:str)
    mil.line("# s.sort.print();\n");	# 41 MILline ($80:void)<-($81:str)
    mil.line("# s.reverse().select(2).print();\n");	# 42 MILline ($82:void)<-($83:str)
    mil.line("# ========\n");	# 43 MILline ($84:void)<-($64:str)
    mil.line("#\n");	# 44 MILline ($85:void)<-($60:str)
    mil.line("# incorrect output of the last select:\n");	# 45 MILline ($86:void)<-($87:str)
    mil.line("# ========\n");	# 46 MILline ($88:void)<-($64:str)
    mil.line("# s.reverse().select(2).print();\n");	# 47 MILline ($89:void)<-($83:str)
    mil.line("# #-----------------#\n");	# 48 MILline ($90:void)<-($91:str)
    mil.line("# # BAT:    tmp_24  #\n");	# 49 MILline ($92:void)<-($93:str)
    mil.line("# # (int)   (int)   #\n");	# 50 MILline ($94:void)<-($95:str)
    mil.line("# #-----------------#\n");	# 51 MILline ($96:void)<-($91:str)
    mil.line("# [ 1,      1       ]\n");	# 52 MILline ($97:void)<-($98:str)
    mil.line("# [ 1,      2       ]\n");	# 53 MILline ($99:void)<-($100:str)
    mil.line("# ========\n");	# 54 MILline ($101:void)<-($102:str)
    mil.line("#\n");	# 55 MILline ($103:void)<-($104:str)
    mil.line("# correct output of the last select:\n");	# 56 MILline ($105:void)<-($106:str)
    mil.line("# ========\n");	# 57 MILline ($107:void)<-($102:str)
    mil.line("# s.reverse().select(2).print();\n");	# 58 MILline ($108:void)<-($83:str)
    mil.line("# #-----------------#\n");	# 59 MILline ($109:void)<-($91:str)
    mil.line("# # BAT:    tmp_24  #\n");	# 60 MILline ($110:void)<-($93:str)
    mil.line("# # (int)   (int)   #\n");	# 61 MILline ($111:void)<-($95:str)
    mil.line("# #-----------------#\n");	# 62 MILline ($112:void)<-($91:str)
    mil.line("# [ 1,      2       ]\n");	# 63 MILline ($113:void)<-($100:str)
    mil.line("# ========\n");	# 64 MILline ($114:void)<-($102:str)
    mil.line("#\n");	# 65 MILline ($115:void)<-($104:str)
    mil.line("# for a detailed test script see \n");	# 66 MILline ($116:void)<-($117:str)
    mil.line("# tests/BugReports/Tests/no.171.*\n");	# 67 MILline ($118:void)<-($119:str)
    mil.line("# in the Monet source repository.\n");	# 68 MILline ($120:void)<-($121:str)
    mil.line("#\n");	# 69 MILline ($122:void)<-($104:str)
    mil.line("#         stefan\n");	# 70 MILline ($123:void)<-($124:str)
    mil.line("var s:=new(int,int);");	# 71 MILline ($125:void)<-($126:str)
    s := bbp.new(nil:int,nil:int);	# 72 CMDBATnew (s:bat[:int,:int])<-($128:int)($128:int)
    mil.line("insert(s,5,5);");	# 73 MILline ($129:void)<-($130:str)
    aa_a := bat.insert(s,5,5);	# 74 BKCinsert_bun (aa_a:bat[:int,:int])<-(s:bat[:int,:int])($132:int)($132:int)
    mil.line("insert(s,3,3);");	# 75 MILline ($133:void)<-($134:str)
    ba_a := bat.insert(s,3,3);	# 76 BKCinsert_bun (ba_a:bat[:int,:int])<-(s:bat[:int,:int])($136:int)($136:int)
    mil.line("insert(s,4,2);");	# 77 MILline ($137:void)<-($138:str)
    ca_a := bat.insert(s,4,2);	# 78 BKCinsert_bun (ca_a:bat[:int,:int])<-(s:bat[:int,:int])($140:int)($141:int)
    mil.line("insert(s,2,1);");	# 79 MILline ($142:void)<-($143:str)
    da_a := bat.insert(s,2,1);	# 80 BKCinsert_bun (da_a:bat[:int,:int])<-(s:bat[:int,:int])($141:int)($145:int)
    mil.line("insert(s,1,1);");	# 81 MILline ($146:void)<-($147:str)
    ea_a := bat.insert(s,1,1);	# 82 BKCinsert_bun (ea_a:bat[:int,:int])<-(s:bat[:int,:int])($145:int)($145:int)
    mil.line("insert(s,4,2);");	# 83 MILline ($149:void)<-($138:str)
    fa_a := bat.insert(s,4,2);	# 84 BKCinsert_bun (fa_a:bat[:int,:int])<-(s:bat[:int,:int])($140:int)($141:int)
    mil.line("insert(s,4,3);");	# 85 MILline ($151:void)<-($152:str)
    ga_a := bat.insert(s,4,3);	# 86 BKCinsert_bun (ga_a:bat[:int,:int])<-(s:bat[:int,:int])($140:int)($136:int)
    mil.line("s.print();");	# 87 MILline ($154:void)<-($155:str)
    ha_a := io.print(s);	# 88 IOprint_val (ha_a:int)<-(s:bat[:int,:int])
    mil.line("s.select(1).print();");	# 89 MILline ($157:void)<-($158:str)
    ia_a := algebra.select(s,1);	# 90 ALGselect1 (ia_a:bat[:int,:int])<-(s:bat[:int,:int])($145:int)
    ja_a := io.print(ia_a);	# 91 IOprint_val (ja_a:int)<-(ia_a:bat[:int,:int])
    mil.line("s.select(2).print();");	# 92 MILline ($161:void)<-($162:str)
    ka_a := algebra.select(s,2);	# 93 ALGselect1 (ka_a:bat[:int,:int])<-(s:bat[:int,:int])($141:int)
    la_a := io.print(ka_a);	# 94 IOprint_val (la_a:int)<-(ka_a:bat[:int,:int])
    mil.line("s.select(3).print();");	# 95 MILline ($165:void)<-($166:str)
    ma_a := algebra.select(s,3);	# 96 ALGselect1 (ma_a:bat[:int,:int])<-(s:bat[:int,:int])($136:int)
    na_a := io.print(ma_a);	# 97 IOprint_val (na_a:int)<-(ma_a:bat[:int,:int])
    mil.line("s.select(4).print();");	# 98 MILline ($169:void)<-($170:str)
    oa_a := algebra.select(s,4);	# 99 ALGselect1 (oa_a:bat[:int,:int])<-(s:bat[:int,:int])($140:int)
    pa_a := io.print(oa_a);	# 100 IOprint_val (pa_a:int)<-(oa_a:bat[:int,:int])
    mil.line("s.select(5).print();");	# 101 MILline ($173:void)<-($174:str)
    qa_a := algebra.select(s,5);	# 102 ALGselect1 (qa_a:bat[:int,:int])<-(s:bat[:int,:int])($176:int)
    ra_a := io.print(qa_a);	# 103 IOprint_val (ra_a:int)<-(qa_a:bat[:int,:int])
    mil.line("s.reverse().print();");	# 104 MILline ($178:void)<-($179:str)
    sa_a := bat.reverse(s);	# 105 BKCreverse (sa_a:bat[:int,:int])<-(s:bat[:int,:int])
    ta_a := io.print(sa_a);	# 106 IOprint_val (ta_a:int)<-(sa_a:bat[:int,:int])
    mil.line("s.reverse().select(1).print();");	# 107 MILline ($182:void)<-($183:str)
    ua_a := bat.reverse(s);	# 108 BKCreverse (ua_a:bat[:int,:int])<-(s:bat[:int,:int])
    va_a := algebra.select(ua_a,1);	# 109 ALGselect1 (va_a:bat[:int,:int])<-(ua_a:bat[:int,:int])($186:int)
    wa_a := io.print(va_a);	# 110 IOprint_val (wa_a:int)<-(va_a:bat[:int,:int])
    mil.line("s.reverse().select(2).print();");	# 111 MILline ($188:void)<-($189:str)
    xa_a := bat.reverse(s);	# 112 BKCreverse (xa_a:bat[:int,:int])<-(s:bat[:int,:int])
    ya_a := algebra.select(xa_a,2);	# 113 ALGselect1 (ya_a:bat[:int,:int])<-(xa_a:bat[:int,:int])($192:int)
    ab_a := io.print(ya_a);	# 114 IOprint_val (ab_a:int)<-(ya_a:bat[:int,:int])
    mil.line("s.reverse().select(3).print();");	# 115 MILline ($194:void)<-($195:str)
    bb_a := bat.reverse(s);	# 116 BKCreverse (bb_a:bat[:int,:int])<-(s:bat[:int,:int])
    cb_a := algebra.select(bb_a,3);	# 117 ALGselect1 (cb_a:bat[:int,:int])<-(bb_a:bat[:int,:int])($198:int)
    db_a := io.print(cb_a);	# 118 IOprint_val (db_a:int)<-(cb_a:bat[:int,:int])
    mil.line("s.reverse().select(4).print();");	# 119 MILline ($200:void)<-($201:str)
    eb_a := bat.reverse(s);	# 120 BKCreverse (eb_a:bat[:int,:int])<-(s:bat[:int,:int])
    fb_a := algebra.select(eb_a,4);	# 121 ALGselect1 (fb_a:bat[:int,:int])<-(eb_a:bat[:int,:int])($204:int)
    gb_a := io.print(fb_a);	# 122 IOprint_val (gb_a:int)<-(fb_a:bat[:int,:int])
    mil.line("s.reverse().select(5).print();");	# 123 MILline ($206:void)<-($207:str)
    hb_a := bat.reverse(s);	# 124 BKCreverse (hb_a:bat[:int,:int])<-(s:bat[:int,:int])
    ib_a := algebra.select(hb_a,5);	# 125 ALGselect1 (ib_a:bat[:int,:int])<-(hb_a:bat[:int,:int])($210:int)
    jb_a := io.print(ib_a);	# 126 IOprint_val (jb_a:int)<-(ib_a:bat[:int,:int])
    mil.line("printf(\"#~BeginVariableOutput~#\\n\");");	# 127 MILline ($212:void)<-($213:str)
    kb_a := io.printf("#~BeginVariableOutput~#\n");	# 128 IOprint_str (kb_a:int)<-($215:str)
    mil.line("s.sort().print();");	# 129 MILline ($216:void)<-($217:str)
    lb_a := algebra.sortH(s);	# 130 ALGhsort (lb_a:bat[:int,:int])<-(s:bat[:int,:int])
    mb_a := io.print(lb_a);	# 131 IOprint_val (mb_a:int)<-(lb_a:bat[:int,:int])
    mil.line("printf(\"#~EndVariableOutput~#\\n\");");	# 132 MILline ($220:void)<-($221:str)
    nb_a := io.printf("#~EndVariableOutput~#\n");	# 133 IOprint_str (nb_a:int)<-($223:str)
    mil.line("s.sortHT().print();");	# 134 MILline ($224:void)<-($225:str)
    ob_a := algebra.sortHT(s);	# 135 ALGhtsort (ob_a:bat[:int,:int])<-(s:bat[:int,:int])
    pb_a := io.print(ob_a);	# 136 IOprint_val (pb_a:int)<-(ob_a:bat[:int,:int])
    mil.line("s.select(1).print();");	# 137 MILline ($228:void)<-($229:str)
    qb_a := algebra.select(s,1);	# 138 ALGselect1 (qb_a:bat[:int,:int])<-(s:bat[:int,:int])($231:int)
    rb_a := io.print(qb_a);	# 139 IOprint_val (rb_a:int)<-(qb_a:bat[:int,:int])
    mil.line("s.select(2).print();");	# 140 MILline ($233:void)<-($234:str)
    sb_a := algebra.select(s,2);	# 141 ALGselect1 (sb_a:bat[:int,:int])<-(s:bat[:int,:int])($236:int)
    tb_a := io.print(sb_a);	# 142 IOprint_val (tb_a:int)<-(sb_a:bat[:int,:int])
    mil.line("s.select(3).print();");	# 143 MILline ($238:void)<-($239:str)
    ub_a := algebra.select(s,3);	# 144 ALGselect1 (ub_a:bat[:int,:int])<-(s:bat[:int,:int])($241:int)
    vb_a := io.print(ub_a);	# 145 IOprint_val (vb_a:int)<-(ub_a:bat[:int,:int])
    mil.line("s.select(4).print();");	# 146 MILline ($243:void)<-($244:str)
    wb_a := algebra.select(s,4);	# 147 ALGselect1 (wb_a:bat[:int,:int])<-(s:bat[:int,:int])($246:int)
    xb_a := io.print(wb_a);	# 148 IOprint_val (xb_a:int)<-(wb_a:bat[:int,:int])
    mil.line("s.select(5).print();");	# 149 MILline ($248:void)<-($249:str)
    yb_a := algebra.select(s,5);	# 150 ALGselect1 (yb_a:bat[:int,:int])<-(s:bat[:int,:int])($251:int)
    ac_a := io.print(yb_a);	# 151 IOprint_val (ac_a:int)<-(yb_a:bat[:int,:int])
    mil.line("s.reverse().print();");	# 152 MILline ($253:void)<-($254:str)
    bc_a := bat.reverse(s);	# 153 BKCreverse (bc_a:bat[:int,:int])<-(s:bat[:int,:int])
    cc_a := io.print(bc_a);	# 154 IOprint_val (cc_a:int)<-(bc_a:bat[:int,:int])
    mil.line("s.reverse().select(1).print();");	# 155 MILline ($257:void)<-($258:str)
    dc_a := bat.reverse(s);	# 156 BKCreverse (dc_a:bat[:int,:int])<-(s:bat[:int,:int])
    ec_a := algebra.select(dc_a,1);	# 157 ALGselect1 (ec_a:bat[:int,:int])<-(dc_a:bat[:int,:int])($231:int)
    fc_a := io.print(ec_a);	# 158 IOprint_val (fc_a:int)<-(ec_a:bat[:int,:int])
    mil.line("s.reverse().select(2).print();");	# 159 MILline ($262:void)<-($263:str)
    gc_a := bat.reverse(s);	# 160 BKCreverse (gc_a:bat[:int,:int])<-(s:bat[:int,:int])
    hc_a := algebra.select(gc_a,2);	# 161 ALGselect1 (hc_a:bat[:int,:int])<-(gc_a:bat[:int,:int])($236:int)
    ic_a := io.print(hc_a);	# 162 IOprint_val (ic_a:int)<-(hc_a:bat[:int,:int])
    mil.line("s.reverse().select(3).print();");	# 163 MILline ($267:void)<-($268:str)
    jc_a := bat.reverse(s);	# 164 BKCreverse (jc_a:bat[:int,:int])<-(s:bat[:int,:int])
    kc_a := algebra.select(jc_a,3);	# 165 ALGselect1 (kc_a:bat[:int,:int])<-(jc_a:bat[:int,:int])($241:int)
    lc_a := io.print(kc_a);	# 166 IOprint_val (lc_a:int)<-(kc_a:bat[:int,:int])
    mil.line("s.reverse().select(4).print();");	# 167 MILline ($272:void)<-($273:str)
    mc_a := bat.reverse(s);	# 168 BKCreverse (mc_a:bat[:int,:int])<-(s:bat[:int,:int])
    nc_a := algebra.select(mc_a,4);	# 169 ALGselect1 (nc_a:bat[:int,:int])<-(mc_a:bat[:int,:int])($246:int)
    oc_a := io.print(nc_a);	# 170 IOprint_val (oc_a:int)<-(nc_a:bat[:int,:int])
    mil.line("s.reverse().select(4).sortHT().print();");	# 171 MILline ($277:void)<-($278:str)
    pc_a := bat.reverse(s);	# 172 BKCreverse (pc_a:bat[:int,:int])<-(s:bat[:int,:int])
    qc_a := algebra.select(pc_a,4);	# 173 ALGselect1 (qc_a:bat[:int,:int])<-(pc_a:bat[:int,:int])($281:int)
    rc_a := algebra.sortHT(qc_a);	# 174 ALGhtsort (rc_a:bat[:int,:int])<-(qc_a:bat[:int,:int])
    sc_a := io.print(rc_a);	# 175 IOprint_val (sc_a:int)<-(rc_a:bat[:int,:int])
    mil.line("s.reverse().select(5).print();");	# 176 MILline ($284:void)<-($285:str)
    tc_a := bat.reverse(s);	# 177 BKCreverse (tc_a:bat[:int,:int])<-(s:bat[:int,:int])
    uc_a := algebra.select(tc_a,5);	# 178 ALGselect1 (uc_a:bat[:int,:int])<-(tc_a:bat[:int,:int])($288:int)
    vc_a := io.print(uc_a);	# 179 IOprint_val (vc_a:int)<-(uc_a:bat[:int,:int])
    mil.line("printf(\"#~BeginVariableOutput~#\\n\");");	# 180 MILline ($290:void)<-($291:str)
    wc_a := io.printf("#~BeginVariableOutput~#\n");	# 181 IOprint_str (wc_a:int)<-($293:str)
    mil.line("s.reverse().sort().print();");	# 182 MILline ($294:void)<-($295:str)
    xc_a := bat.reverse(s);	# 183 BKCreverse (xc_a:bat[:int,:int])<-(s:bat[:int,:int])
    yc_a := algebra.sortH(xc_a);	# 184 ALGhsort (yc_a:bat[:int,:int])<-(xc_a:bat[:int,:int])
    ad_a := io.print(yc_a);	# 185 IOprint_val (ad_a:int)<-(yc_a:bat[:int,:int])
    mil.line("printf(\"#~EndVariableOutput~#\\n\");");	# 186 MILline ($299:void)<-($300:str)
    bd_a := io.printf("#~EndVariableOutput~#\n");	# 187 IOprint_str (bd_a:int)<-($302:str)
    mil.line("s.reverse().sortHT().print();");	# 188 MILline ($303:void)<-($304:str)
    cd_a := bat.reverse(s);	# 189 BKCreverse (cd_a:bat[:int,:int])<-(s:bat[:int,:int])
    dd_a := algebra.sortHT(cd_a);	# 190 ALGhtsort (dd_a:bat[:int,:int])<-(cd_a:bat[:int,:int])
    ed_a := io.print(dd_a);	# 191 IOprint_val (ed_a:int)<-(dd_a:bat[:int,:int])
    mil.line("s.reverse().select(1).print();");	# 192 MILline ($308:void)<-($309:str)
    fd_a := bat.reverse(s);	# 193 BKCreverse (fd_a:bat[:int,:int])<-(s:bat[:int,:int])
    gd_a := algebra.select(fd_a,1);	# 194 ALGselect1 (gd_a:bat[:int,:int])<-(fd_a:bat[:int,:int])($312:int)
    hd_a := io.print(gd_a);	# 195 IOprint_val (hd_a:int)<-(gd_a:bat[:int,:int])
    mil.line("s.reverse().select(2).print();");	# 196 MILline ($314:void)<-($315:str)
    id_a := bat.reverse(s);	# 197 BKCreverse (id_a:bat[:int,:int])<-(s:bat[:int,:int])
    jd_a := algebra.select(id_a,2);	# 198 ALGselect1 (jd_a:bat[:int,:int])<-(id_a:bat[:int,:int])($318:int)
    kd_a := io.print(jd_a);	# 199 IOprint_val (kd_a:int)<-(jd_a:bat[:int,:int])
    mil.line("s.reverse().select(3).print();");	# 200 MILline ($320:void)<-($321:str)
    ld_a := bat.reverse(s);	# 201 BKCreverse (ld_a:bat[:int,:int])<-(s:bat[:int,:int])
    md_a := algebra.select(ld_a,3);	# 202 ALGselect1 (md_a:bat[:int,:int])<-(ld_a:bat[:int,:int])($324:int)
    nd_a := io.print(md_a);	# 203 IOprint_val (nd_a:int)<-(md_a:bat[:int,:int])
    mil.line("s.reverse().select(4).print();");	# 204 MILline ($326:void)<-($327:str)
    od_a := bat.reverse(s);	# 205 BKCreverse (od_a:bat[:int,:int])<-(s:bat[:int,:int])
    pd_a := algebra.select(od_a,4);	# 206 ALGselect1 (pd_a:bat[:int,:int])<-(od_a:bat[:int,:int])($330:int)
    qd_a := io.print(pd_a);	# 207 IOprint_val (qd_a:int)<-(pd_a:bat[:int,:int])
    mil.line("s.reverse().select(4).sortHT().print();");	# 208 MILline ($332:void)<-($333:str)
    rd_a := bat.reverse(s);	# 209 BKCreverse (rd_a:bat[:int,:int])<-(s:bat[:int,:int])
    sd_a := algebra.select(rd_a,4);	# 210 ALGselect1 (sd_a:bat[:int,:int])<-(rd_a:bat[:int,:int])($330:int)
    td_a := algebra.sortHT(sd_a);	# 211 ALGhtsort (td_a:bat[:int,:int])<-(sd_a:bat[:int,:int])
    ud_a := io.print(td_a);	# 212 IOprint_val (ud_a:int)<-(td_a:bat[:int,:int])
    mil.line("s.reverse().select(5).print();");	# 213 MILline ($338:void)<-($339:str)
    vd_a := bat.reverse(s);	# 214 BKCreverse (vd_a:bat[:int,:int])<-(s:bat[:int,:int])
    wd_a := algebra.select(vd_a,5);	# 215 ALGselect1 (wd_a:bat[:int,:int])<-(vd_a:bat[:int,:int])($342:int)
    xd_a := io.print(wd_a);	# 216 IOprint_val (xd_a:int)<-(wd_a:bat[:int,:int])
    mil.line("quit();");	# 217 MILline ($344:void)<-($345:str)
    yd_a := clients.quit();	# 218 CLTquit (yd_a:void)
end main;	# 219  
## >Number:         171\n
## >Category:       MIL\n
## >Synopsis:       X.reverse().select() fails after X.sort()\n
## >Confidential:   no\n
## >Severity:       critical\n
## >Priority:       high\n
## >Responsible:    boncz (Peter Boncz)\n
## >State:          open\n
## >Class:          sw-bug\n
## >Submitter-Id:   unknown\n
## >Arrival-Date:   Thu Dec 10 22:54:12 1998\n
## >Originator:     manegold@cwi.nl\n
## >Organization:\n
## CWI\n
## >Release:        980101\n
## >Environment:\n
## IRIX\n
## >Description:\n
## a select on an bat.reverse()d BAT returns incorrect result\n
## when a sort has been done on the same BAT before.\n
##\n
## sample script:\n
## ========\n
## s:=new(int,int);\n
## bat.insert(s,5,5);\n
## bat.insert(s,3,3);\n
## bat.insert(s,4,2);\n
## bat.insert(s,2,1);\n
## bat.insert(s,1,1);\n
## bat.insert(s,4,2);\n
## bat.insert(s,4,3);\n
## s.sort.print();\n
## s.reverse().select(2).print();\n
## ========\n
##\n
## incorrect output of the last select:\n
## ========\n
## s.reverse().select(2).print();\n
## #-----------------#\n
## # BAT:    tmp_24  #\n
## # (int)   (int)   #\n
## #-----------------#\n
## [ 1,      1       ]\n
## [ 1,      2       ]\n
## ========\n
##\n
## correct output of the last select:\n
## ========\n
## s.reverse().select(2).print();\n
## #-----------------#\n
## # BAT:    tmp_24  #\n
## # (int)   (int)   #\n
## #-----------------#\n
## [ 1,      2       ]\n
## ========\n
##\n
## for a detailed test script see \n
## tests/BugReports/Tests/no.171.*\n
## in the Monet source repository.\n
##\n
##         stefan\n
#var s:=new(int,int);
#insert(s,5,5);
#insert(s,3,3);
#insert(s,4,2);
#insert(s,2,1);
#insert(s,1,1);
#insert(s,4,2);
#insert(s,4,3);
#s.print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 2,	  1	  ]
[ 1,	  1	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
#s.select(1).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  1	  ]
[ 1,	  1	  ]
#s.select(2).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 4,	  2	  ]
[ 4,	  2	  ]
#s.select(3).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  3	  ]
[ 4,	  3	  ]
#s.select(4).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
#s.select(5).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
#s.reverse().print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
[ 3,	  3	  ]
[ 2,	  4	  ]
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(1).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
#s.reverse().select(2).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
#s.reverse().select(3).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  3	  ]
#s.reverse().select(4).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(5).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
#printf("#~BeginVariableOutput~#\n");
#~BeginVariableOutput~#
#s.sort().print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 5,	  5	  ]
#printf("#~EndVariableOutput~#\n");
#~EndVariableOutput~#
#s.sort_ht().print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
#s.select(1).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  1	  ]
[ 1,	  1	  ]
#s.select(2).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 4,	  2	  ]
[ 4,	  2	  ]
#s.select(3).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  3	  ]
[ 4,	  3	  ]
#s.select(4).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
#s.select(5).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
#s.reverse().print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
[ 3,	  3	  ]
[ 2,	  4	  ]
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(1).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
#s.reverse().select(2).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
#s.reverse().select(3).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  3	  ]
#s.reverse().select(4).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(4).sort_ht().print();
#-----------------#
# BAT:	  tmp_72  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(5).print();
#-----------------#
# BAT:	  tmp_72  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
#printf("#~BeginVariableOutput~#\n");
#~BeginVariableOutput~#
#s.reverse().sort().print();
#-----------------#
# BAT:	  tmp_72  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  3	  ]
[ 3,	  4	  ]
[ 5,	  5	  ]
#printf("#~EndVariableOutput~#\n");
#~EndVariableOutput~#
#s.reverse().sort_ht().print();
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 5,	  5	  ]
#s.reverse().select(1).print();
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
#s.reverse().select(2).print();
#-----------------#
# BAT:	  tmp_72  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
#s.reverse().select(3).print();
#-----------------#
# BAT:	  tmp_72  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  3	  ]
#s.reverse().select(4).print();
#-----------------#
# BAT:	  tmp_72  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(4).sort_ht().print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(5).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]

# 14:18:00 >  
# 14:18:00 >  Done.
# 14:18:00 >  

