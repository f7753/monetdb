stdout of test 'no.171` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.171 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.171.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.171.milS


# Monet Database Server V4.7.3
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
#include mil_scenario;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
# sample script:
# ========
# s:=new(int,int);
# insert(s,5,5);
# insert(s,3,3);
# insert(s,4,2);
# insert(s,2,1);
# insert(s,1,1);
# insert(s,4,2);
# insert(s,4,3);
# s.sort.print;
# s.reverse.select(2).print;
# ========
#
function user.main():int;	# 0  (main:int)
    mil.line("# >Number:         171\n");	# 1 MILline ($31:void)<-($32:str)
    mil.line("# >Category:       MIL\n");	# 2 MILline ($33:void)<-($34:str)
    mil.line("# >Synopsis:       X.reverse().select() fails after X.sort()\n");	# 3 MILline ($35:void)<-($36:str)
    mil.line("# >Confidential:   no\n");	# 4 MILline ($37:void)<-($38:str)
    mil.line("# >Severity:       critical\n");	# 5 MILline ($39:void)<-($40:str)
    mil.line("# >Priority:       high\n");	# 6 MILline ($41:void)<-($42:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 7 MILline ($43:void)<-($44:str)
    mil.line("# >State:          open\n");	# 8 MILline ($45:void)<-($46:str)
    mil.line("# >Class:          sw-bug\n");	# 9 MILline ($47:void)<-($48:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 10 MILline ($49:void)<-($50:str)
    mil.line("# >Arrival-Date:   Thu Dec 10 22:54:12 1998\n");	# 11 MILline ($51:void)<-($52:str)
    mil.line("# >Originator:     manegold@cwi.nl\n");	# 12 MILline ($53:void)<-($54:str)
    mil.line("# >Organization:\n");	# 13 MILline ($55:void)<-($56:str)
    mil.line("# CWI\n");	# 14 MILline ($57:void)<-($58:str)
    mil.line("# >Release:        980101\n");	# 15 MILline ($59:void)<-($60:str)
    mil.line("# >Environment:\n");	# 16 MILline ($61:void)<-($62:str)
    mil.line("# IRIX\n");	# 17 MILline ($63:void)<-($64:str)
    mil.line("# >Description:\n");	# 18 MILline ($65:void)<-($66:str)
    mil.line("# a select on an bat.reverse()d BAT returns incorrect result\n");	# 19 MILline ($67:void)<-($68:str)
    mil.line("# when a sort has been done on the same BAT before.\n");	# 20 MILline ($69:void)<-($70:str)
    mil.line("#\n");	# 21 MILline ($71:void)<-($72:str)
    mil.line("# sample script:\n");	# 22 MILline ($73:void)<-($74:str)
    mil.line("# ========\n");	# 23 MILline ($75:void)<-($76:str)
    mil.line("# s:=new(int,int);\n");	# 24 MILline ($77:void)<-($78:str)
    mil.line("# bat.insert(s,5,5);\n");	# 25 MILline ($79:void)<-($80:str)
    mil.line("# bat.insert(s,3,3);\n");	# 26 MILline ($81:void)<-($82:str)
    mil.line("# bat.insert(s,4,2);\n");	# 27 MILline ($83:void)<-($84:str)
    mil.line("# bat.insert(s,2,1);\n");	# 28 MILline ($85:void)<-($86:str)
    mil.line("# bat.insert(s,1,1);\n");	# 29 MILline ($87:void)<-($88:str)
    mil.line("# bat.insert(s,4,2);\n");	# 30 MILline ($89:void)<-($84:str)
    mil.line("# bat.insert(s,4,3);\n");	# 31 MILline ($90:void)<-($91:str)
    mil.line("# s.sort.print();\n");	# 32 MILline ($92:void)<-($93:str)
    mil.line("# s.reverse().select(2).print();\n");	# 33 MILline ($94:void)<-($95:str)
    mil.line("# ========\n");	# 34 MILline ($96:void)<-($76:str)
    mil.line("#\n");	# 35 MILline ($97:void)<-($72:str)
    mil.line("# incorrect output of the last select:\n");	# 36 MILline ($98:void)<-($99:str)
    mil.line("# ========\n");	# 37 MILline ($100:void)<-($76:str)
    mil.line("# s.reverse().select(2).print();\n");	# 38 MILline ($101:void)<-($95:str)
    mil.line("# #-----------------#\n");	# 39 MILline ($102:void)<-($103:str)
    mil.line("# # BAT:    tmp_24  #\n");	# 40 MILline ($104:void)<-($105:str)
    mil.line("# # (int)   (int)   #\n");	# 41 MILline ($106:void)<-($107:str)
    mil.line("# #-----------------#\n");	# 42 MILline ($108:void)<-($103:str)
    mil.line("# [ 1,      1       ]\n");	# 43 MILline ($109:void)<-($110:str)
    mil.line("# [ 1,      2       ]\n");	# 44 MILline ($111:void)<-($112:str)
    mil.line("# ========\n");	# 45 MILline ($113:void)<-($114:str)
    mil.line("#\n");	# 46 MILline ($115:void)<-($116:str)
    mil.line("# correct output of the last select:\n");	# 47 MILline ($117:void)<-($118:str)
    mil.line("# ========\n");	# 48 MILline ($119:void)<-($114:str)
    mil.line("# s.reverse().select(2).print();\n");	# 49 MILline ($120:void)<-($95:str)
    mil.line("# #-----------------#\n");	# 50 MILline ($121:void)<-($103:str)
    mil.line("# # BAT:    tmp_24  #\n");	# 51 MILline ($122:void)<-($105:str)
    mil.line("# # (int)   (int)   #\n");	# 52 MILline ($123:void)<-($107:str)
    mil.line("# #-----------------#\n");	# 53 MILline ($124:void)<-($103:str)
    mil.line("# [ 1,      2       ]\n");	# 54 MILline ($125:void)<-($112:str)
    mil.line("# ========\n");	# 55 MILline ($126:void)<-($114:str)
    mil.line("#\n");	# 56 MILline ($127:void)<-($116:str)
    mil.line("# for a detailed test script see \n");	# 57 MILline ($128:void)<-($129:str)
    mil.line("# tests/BugReports/Tests/no.171.*\n");	# 58 MILline ($130:void)<-($131:str)
    mil.line("# in the Monet source repository.\n");	# 59 MILline ($132:void)<-($133:str)
    mil.line("#\n");	# 60 MILline ($134:void)<-($116:str)
    mil.line("#         stefan\n");	# 61 MILline ($135:void)<-($136:str)
    mil.line("var s:=new(int,int);");	# 62 MILline ($137:void)<-($138:str)
    s := bbp.new(nil:int,nil:int);	# 63 CMDBATnew (s:bat[:int,:int])<-($140:int)($140:int)
    mil.line("insert(s,5,5);");	# 64 MILline ($141:void)<-($142:str)
    aa_a := bat.insert(s,5,5);	# 65 BKCinsert_bun (aa_a:bat[:int,:int])<-(s:bat[:int,:int])($144:int)($144:int)
    mil.line("insert(s,3,3);");	# 66 MILline ($145:void)<-($146:str)
    ba_a := bat.insert(s,3,3);	# 67 BKCinsert_bun (ba_a:bat[:int,:int])<-(s:bat[:int,:int])($148:int)($148:int)
    mil.line("insert(s,4,2);");	# 68 MILline ($149:void)<-($150:str)
    ca_a := bat.insert(s,4,2);	# 69 BKCinsert_bun (ca_a:bat[:int,:int])<-(s:bat[:int,:int])($152:int)($153:int)
    mil.line("insert(s,2,1);");	# 70 MILline ($154:void)<-($155:str)
    da_a := bat.insert(s,2,1);	# 71 BKCinsert_bun (da_a:bat[:int,:int])<-(s:bat[:int,:int])($153:int)($157:int)
    mil.line("insert(s,1,1);");	# 72 MILline ($158:void)<-($159:str)
    ea_a := bat.insert(s,1,1);	# 73 BKCinsert_bun (ea_a:bat[:int,:int])<-(s:bat[:int,:int])($157:int)($157:int)
    mil.line("insert(s,4,2);");	# 74 MILline ($161:void)<-($150:str)
    fa_a := bat.insert(s,4,2);	# 75 BKCinsert_bun (fa_a:bat[:int,:int])<-(s:bat[:int,:int])($152:int)($153:int)
    mil.line("insert(s,4,3);");	# 76 MILline ($163:void)<-($164:str)
    ga_a := bat.insert(s,4,3);	# 77 BKCinsert_bun (ga_a:bat[:int,:int])<-(s:bat[:int,:int])($152:int)($148:int)
    mil.line("s.print();");	# 78 MILline ($166:void)<-($167:str)
    ha_a := io.print(s);	# 79 IOprint_val (ha_a:int)<-(s:bat[:int,:int])
    mil.line("s.select(1).print();");	# 80 MILline ($169:void)<-($170:str)
    ia_a := algebra.select(s,1);	# 81 ALGselect1 (ia_a:bat[:int,:int])<-(s:bat[:int,:int])($157:int)
    ja_a := io.print(ia_a);	# 82 IOprint_val (ja_a:int)<-(ia_a:bat[:int,:int])
    mil.line("s.select(2).print();");	# 83 MILline ($173:void)<-($174:str)
    ka_a := algebra.select(s,2);	# 84 ALGselect1 (ka_a:bat[:int,:int])<-(s:bat[:int,:int])($153:int)
    la_a := io.print(ka_a);	# 85 IOprint_val (la_a:int)<-(ka_a:bat[:int,:int])
    mil.line("s.select(3).print();");	# 86 MILline ($177:void)<-($178:str)
    ma_a := algebra.select(s,3);	# 87 ALGselect1 (ma_a:bat[:int,:int])<-(s:bat[:int,:int])($148:int)
    na_a := io.print(ma_a);	# 88 IOprint_val (na_a:int)<-(ma_a:bat[:int,:int])
    mil.line("s.select(4).print();");	# 89 MILline ($181:void)<-($182:str)
    oa_a := algebra.select(s,4);	# 90 ALGselect1 (oa_a:bat[:int,:int])<-(s:bat[:int,:int])($152:int)
    pa_a := io.print(oa_a);	# 91 IOprint_val (pa_a:int)<-(oa_a:bat[:int,:int])
    mil.line("s.select(5).print();");	# 92 MILline ($185:void)<-($186:str)
    qa_a := algebra.select(s,5);	# 93 ALGselect1 (qa_a:bat[:int,:int])<-(s:bat[:int,:int])($188:int)
    ra_a := io.print(qa_a);	# 94 IOprint_val (ra_a:int)<-(qa_a:bat[:int,:int])
    mil.line("s.reverse().print();");	# 95 MILline ($190:void)<-($191:str)
    sa_a := bat.reverse(s);	# 96 BKCreverse (sa_a:bat[:int,:int])<-(s:bat[:int,:int])
    ta_a := io.print(sa_a);	# 97 IOprint_val (ta_a:int)<-(sa_a:bat[:int,:int])
    mil.line("s.reverse().select(1).print();");	# 98 MILline ($194:void)<-($195:str)
    ua_a := bat.reverse(s);	# 99 BKCreverse (ua_a:bat[:int,:int])<-(s:bat[:int,:int])
    va_a := algebra.select(ua_a,1);	# 100 ALGselect1 (va_a:bat[:int,:int])<-(ua_a:bat[:int,:int])($198:int)
    wa_a := io.print(va_a);	# 101 IOprint_val (wa_a:int)<-(va_a:bat[:int,:int])
    mil.line("s.reverse().select(2).print();");	# 102 MILline ($200:void)<-($201:str)
    xa_a := bat.reverse(s);	# 103 BKCreverse (xa_a:bat[:int,:int])<-(s:bat[:int,:int])
    ya_a := algebra.select(xa_a,2);	# 104 ALGselect1 (ya_a:bat[:int,:int])<-(xa_a:bat[:int,:int])($204:int)
    ab_a := io.print(ya_a);	# 105 IOprint_val (ab_a:int)<-(ya_a:bat[:int,:int])
    mil.line("s.reverse().select(3).print();");	# 106 MILline ($206:void)<-($207:str)
    bb_a := bat.reverse(s);	# 107 BKCreverse (bb_a:bat[:int,:int])<-(s:bat[:int,:int])
    cb_a := algebra.select(bb_a,3);	# 108 ALGselect1 (cb_a:bat[:int,:int])<-(bb_a:bat[:int,:int])($210:int)
    db_a := io.print(cb_a);	# 109 IOprint_val (db_a:int)<-(cb_a:bat[:int,:int])
    mil.line("s.reverse().select(4).print();");	# 110 MILline ($212:void)<-($213:str)
    eb_a := bat.reverse(s);	# 111 BKCreverse (eb_a:bat[:int,:int])<-(s:bat[:int,:int])
    fb_a := algebra.select(eb_a,4);	# 112 ALGselect1 (fb_a:bat[:int,:int])<-(eb_a:bat[:int,:int])($216:int)
    gb_a := io.print(fb_a);	# 113 IOprint_val (gb_a:int)<-(fb_a:bat[:int,:int])
    mil.line("s.reverse().select(5).print();");	# 114 MILline ($218:void)<-($219:str)
    hb_a := bat.reverse(s);	# 115 BKCreverse (hb_a:bat[:int,:int])<-(s:bat[:int,:int])
    ib_a := algebra.select(hb_a,5);	# 116 ALGselect1 (ib_a:bat[:int,:int])<-(hb_a:bat[:int,:int])($222:int)
    jb_a := io.print(ib_a);	# 117 IOprint_val (jb_a:int)<-(ib_a:bat[:int,:int])
    mil.line("printf(\"#~BeginVariableOutput~#\\n\");");	# 118 MILline ($224:void)<-($225:str)
    kb_a := io.printf("#~BeginVariableOutput~#\n");	# 119 IOprint_str (kb_a:int)<-($227:str)
    mil.line("s.sort().print();");	# 120 MILline ($228:void)<-($229:str)
    lb_a := algebra.sortH(s);	# 121 ALGhsort (lb_a:bat[:int,:int])<-(s:bat[:int,:int])
    mb_a := io.print(lb_a);	# 122 IOprint_val (mb_a:int)<-(lb_a:bat[:int,:int])
    mil.line("printf(\"#~EndVariableOutput~#\\n\");");	# 123 MILline ($232:void)<-($233:str)
    nb_a := io.printf("#~EndVariableOutput~#\n");	# 124 IOprint_str (nb_a:int)<-($235:str)
    mil.line("s.sortHT().print();");	# 125 MILline ($236:void)<-($237:str)
    ob_a := algebra.sortHT(s);	# 126 ALGhtsort (ob_a:bat[:int,:int])<-(s:bat[:int,:int])
    pb_a := io.print(ob_a);	# 127 IOprint_val (pb_a:int)<-(ob_a:bat[:int,:int])
    mil.line("s.select(1).print();");	# 128 MILline ($240:void)<-($241:str)
    qb_a := algebra.select(s,1);	# 129 ALGselect1 (qb_a:bat[:int,:int])<-(s:bat[:int,:int])($243:int)
    rb_a := io.print(qb_a);	# 130 IOprint_val (rb_a:int)<-(qb_a:bat[:int,:int])
    mil.line("s.select(2).print();");	# 131 MILline ($245:void)<-($246:str)
    sb_a := algebra.select(s,2);	# 132 ALGselect1 (sb_a:bat[:int,:int])<-(s:bat[:int,:int])($248:int)
    tb_a := io.print(sb_a);	# 133 IOprint_val (tb_a:int)<-(sb_a:bat[:int,:int])
    mil.line("s.select(3).print();");	# 134 MILline ($250:void)<-($251:str)
    ub_a := algebra.select(s,3);	# 135 ALGselect1 (ub_a:bat[:int,:int])<-(s:bat[:int,:int])($253:int)
    vb_a := io.print(ub_a);	# 136 IOprint_val (vb_a:int)<-(ub_a:bat[:int,:int])
    mil.line("s.select(4).print();");	# 137 MILline ($255:void)<-($256:str)
    wb_a := algebra.select(s,4);	# 138 ALGselect1 (wb_a:bat[:int,:int])<-(s:bat[:int,:int])($258:int)
    xb_a := io.print(wb_a);	# 139 IOprint_val (xb_a:int)<-(wb_a:bat[:int,:int])
    mil.line("s.select(5).print();");	# 140 MILline ($260:void)<-($261:str)
    yb_a := algebra.select(s,5);	# 141 ALGselect1 (yb_a:bat[:int,:int])<-(s:bat[:int,:int])($263:int)
    ac_a := io.print(yb_a);	# 142 IOprint_val (ac_a:int)<-(yb_a:bat[:int,:int])
    mil.line("s.reverse().print();");	# 143 MILline ($265:void)<-($266:str)
    bc_a := bat.reverse(s);	# 144 BKCreverse (bc_a:bat[:int,:int])<-(s:bat[:int,:int])
    cc_a := io.print(bc_a);	# 145 IOprint_val (cc_a:int)<-(bc_a:bat[:int,:int])
    mil.line("s.reverse().select(1).print();");	# 146 MILline ($269:void)<-($270:str)
    dc_a := bat.reverse(s);	# 147 BKCreverse (dc_a:bat[:int,:int])<-(s:bat[:int,:int])
    ec_a := algebra.select(dc_a,1);	# 148 ALGselect1 (ec_a:bat[:int,:int])<-(dc_a:bat[:int,:int])($243:int)
    fc_a := io.print(ec_a);	# 149 IOprint_val (fc_a:int)<-(ec_a:bat[:int,:int])
    mil.line("s.reverse().select(2).print();");	# 150 MILline ($274:void)<-($275:str)
    gc_a := bat.reverse(s);	# 151 BKCreverse (gc_a:bat[:int,:int])<-(s:bat[:int,:int])
    hc_a := algebra.select(gc_a,2);	# 152 ALGselect1 (hc_a:bat[:int,:int])<-(gc_a:bat[:int,:int])($248:int)
    ic_a := io.print(hc_a);	# 153 IOprint_val (ic_a:int)<-(hc_a:bat[:int,:int])
    mil.line("s.reverse().select(3).print();");	# 154 MILline ($279:void)<-($280:str)
    jc_a := bat.reverse(s);	# 155 BKCreverse (jc_a:bat[:int,:int])<-(s:bat[:int,:int])
    kc_a := algebra.select(jc_a,3);	# 156 ALGselect1 (kc_a:bat[:int,:int])<-(jc_a:bat[:int,:int])($253:int)
    lc_a := io.print(kc_a);	# 157 IOprint_val (lc_a:int)<-(kc_a:bat[:int,:int])
    mil.line("s.reverse().select(4).print();");	# 158 MILline ($284:void)<-($285:str)
    mc_a := bat.reverse(s);	# 159 BKCreverse (mc_a:bat[:int,:int])<-(s:bat[:int,:int])
    nc_a := algebra.select(mc_a,4);	# 160 ALGselect1 (nc_a:bat[:int,:int])<-(mc_a:bat[:int,:int])($258:int)
    oc_a := io.print(nc_a);	# 161 IOprint_val (oc_a:int)<-(nc_a:bat[:int,:int])
    mil.line("s.reverse().select(4).sortHT().print();");	# 162 MILline ($289:void)<-($290:str)
    pc_a := bat.reverse(s);	# 163 BKCreverse (pc_a:bat[:int,:int])<-(s:bat[:int,:int])
    qc_a := algebra.select(pc_a,4);	# 164 ALGselect1 (qc_a:bat[:int,:int])<-(pc_a:bat[:int,:int])($293:int)
    rc_a := algebra.sortHT(qc_a);	# 165 ALGhtsort (rc_a:bat[:int,:int])<-(qc_a:bat[:int,:int])
    sc_a := io.print(rc_a);	# 166 IOprint_val (sc_a:int)<-(rc_a:bat[:int,:int])
    mil.line("s.reverse().select(5).print();");	# 167 MILline ($296:void)<-($297:str)
    tc_a := bat.reverse(s);	# 168 BKCreverse (tc_a:bat[:int,:int])<-(s:bat[:int,:int])
    uc_a := algebra.select(tc_a,5);	# 169 ALGselect1 (uc_a:bat[:int,:int])<-(tc_a:bat[:int,:int])($300:int)
    vc_a := io.print(uc_a);	# 170 IOprint_val (vc_a:int)<-(uc_a:bat[:int,:int])
    mil.line("printf(\"#~BeginVariableOutput~#\\n\");");	# 171 MILline ($302:void)<-($303:str)
    wc_a := io.printf("#~BeginVariableOutput~#\n");	# 172 IOprint_str (wc_a:int)<-($305:str)
    mil.line("s.reverse().sort().print();");	# 173 MILline ($306:void)<-($307:str)
    xc_a := bat.reverse(s);	# 174 BKCreverse (xc_a:bat[:int,:int])<-(s:bat[:int,:int])
    yc_a := algebra.sortH(xc_a);	# 175 ALGhsort (yc_a:bat[:int,:int])<-(xc_a:bat[:int,:int])
    ad_a := io.print(yc_a);	# 176 IOprint_val (ad_a:int)<-(yc_a:bat[:int,:int])
    mil.line("printf(\"#~EndVariableOutput~#\\n\");");	# 177 MILline ($311:void)<-($312:str)
    bd_a := io.printf("#~EndVariableOutput~#\n");	# 178 IOprint_str (bd_a:int)<-($314:str)
    mil.line("s.reverse().sortHT().print();");	# 179 MILline ($315:void)<-($316:str)
    cd_a := bat.reverse(s);	# 180 BKCreverse (cd_a:bat[:int,:int])<-(s:bat[:int,:int])
    dd_a := algebra.sortHT(cd_a);	# 181 ALGhtsort (dd_a:bat[:int,:int])<-(cd_a:bat[:int,:int])
    ed_a := io.print(dd_a);	# 182 IOprint_val (ed_a:int)<-(dd_a:bat[:int,:int])
    mil.line("s.reverse().select(1).print();");	# 183 MILline ($320:void)<-($321:str)
    fd_a := bat.reverse(s);	# 184 BKCreverse (fd_a:bat[:int,:int])<-(s:bat[:int,:int])
    gd_a := algebra.select(fd_a,1);	# 185 ALGselect1 (gd_a:bat[:int,:int])<-(fd_a:bat[:int,:int])($324:int)
    hd_a := io.print(gd_a);	# 186 IOprint_val (hd_a:int)<-(gd_a:bat[:int,:int])
    mil.line("s.reverse().select(2).print();");	# 187 MILline ($326:void)<-($327:str)
    id_a := bat.reverse(s);	# 188 BKCreverse (id_a:bat[:int,:int])<-(s:bat[:int,:int])
    jd_a := algebra.select(id_a,2);	# 189 ALGselect1 (jd_a:bat[:int,:int])<-(id_a:bat[:int,:int])($330:int)
    kd_a := io.print(jd_a);	# 190 IOprint_val (kd_a:int)<-(jd_a:bat[:int,:int])
    mil.line("s.reverse().select(3).print();");	# 191 MILline ($332:void)<-($333:str)
    ld_a := bat.reverse(s);	# 192 BKCreverse (ld_a:bat[:int,:int])<-(s:bat[:int,:int])
    md_a := algebra.select(ld_a,3);	# 193 ALGselect1 (md_a:bat[:int,:int])<-(ld_a:bat[:int,:int])($336:int)
    nd_a := io.print(md_a);	# 194 IOprint_val (nd_a:int)<-(md_a:bat[:int,:int])
    mil.line("s.reverse().select(4).print();");	# 195 MILline ($338:void)<-($339:str)
    od_a := bat.reverse(s);	# 196 BKCreverse (od_a:bat[:int,:int])<-(s:bat[:int,:int])
    pd_a := algebra.select(od_a,4);	# 197 ALGselect1 (pd_a:bat[:int,:int])<-(od_a:bat[:int,:int])($342:int)
    qd_a := io.print(pd_a);	# 198 IOprint_val (qd_a:int)<-(pd_a:bat[:int,:int])
    mil.line("s.reverse().select(4).sortHT().print();");	# 199 MILline ($344:void)<-($345:str)
    rd_a := bat.reverse(s);	# 200 BKCreverse (rd_a:bat[:int,:int])<-(s:bat[:int,:int])
    sd_a := algebra.select(rd_a,4);	# 201 ALGselect1 (sd_a:bat[:int,:int])<-(rd_a:bat[:int,:int])($342:int)
    td_a := algebra.sortHT(sd_a);	# 202 ALGhtsort (td_a:bat[:int,:int])<-(sd_a:bat[:int,:int])
    ud_a := io.print(td_a);	# 203 IOprint_val (ud_a:int)<-(td_a:bat[:int,:int])
    mil.line("s.reverse().select(5).print();");	# 204 MILline ($350:void)<-($351:str)
    vd_a := bat.reverse(s);	# 205 BKCreverse (vd_a:bat[:int,:int])<-(s:bat[:int,:int])
    wd_a := algebra.select(vd_a,5);	# 206 ALGselect1 (wd_a:bat[:int,:int])<-(vd_a:bat[:int,:int])($354:int)
    xd_a := io.print(wd_a);	# 207 IOprint_val (xd_a:int)<-(wd_a:bat[:int,:int])
    mil.line("quit();");	# 208 MILline ($356:void)<-($357:str)
    yd_a := clients.quit();	# 209 CLTquit (yd_a:void)
end main;	# 210  
## >Number:         171
## >Category:       MIL
## >Synopsis:       X.reverse().select() fails after X.sort()
## >Confidential:   no
## >Severity:       critical
## >Priority:       high
## >Responsible:    boncz (Peter Boncz)
## >State:          open
## >Class:          sw-bug
## >Submitter-Id:   unknown
## >Arrival-Date:   Thu Dec 10 22:54:12 1998
## >Originator:     manegold@cwi.nl
## >Organization:
## CWI
## >Release:        980101
## >Environment:
## IRIX
## >Description:
## a select on an reverse()d BAT returns incorrect result
## when a sort has been done on the same BAT before.
##
## sample script:
## ========
## s:=new(int,int);
## insert(s,5,5);
## insert(s,3,3);
## insert(s,4,2);
## insert(s,2,1);
## insert(s,1,1);
## insert(s,4,2);
## insert(s,4,3);
## s.sort.print();
## s.reverse().select(2).print();
## ========
##
## incorrect output of the last select:
## ========
## s.reverse().select(2).print();
## #-----------------#
## # BAT:    tmp_24  #
## # (int)   (int)   #
## #-----------------#
## [ 1,      1       ]
## [ 1,      2       ]
## ========
##
## correct output of the last select:
## ========
## s.reverse().select(2).print();
## #-----------------#
## # BAT:    tmp_24  #
## # (int)   (int)   #
## #-----------------#
## [ 1,      2       ]
## ========
##
## for a detailed test script see 
## tests/BugReports/Tests/no.171.*
## in the Monet source repository.
##
##         stefan
#var s:=new(int,int);
#insert(s,5,5);
#insert(s,3,3);
#insert(s,4,2);
#insert(s,2,1);
#insert(s,1,1);
#insert(s,4,2);
#insert(s,4,3);
#s.print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 2,	  1	  ]
[ 1,	  1	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
#s.select(1).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  1	  ]
[ 1,	  1	  ]
#s.select(2).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 4,	  2	  ]
[ 4,	  2	  ]
#s.select(3).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  3	  ]
[ 4,	  3	  ]
#s.select(4).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
#s.select(5).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
#s.reverse().print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
[ 3,	  3	  ]
[ 2,	  4	  ]
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(1).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
#s.reverse().select(2).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
#s.reverse().select(3).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  3	  ]
#s.reverse().select(4).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(5).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
#printf("#~BeginVariableOutput~#\n");
#~BeginVariableOutput~#
#s.sort().print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 5,	  5	  ]
#printf("#~EndVariableOutput~#\n");
#~EndVariableOutput~#
#s.sort_ht().print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
#s.select(1).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  1	  ]
[ 1,	  1	  ]
#s.select(2).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 4,	  2	  ]
[ 4,	  2	  ]
#s.select(3).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  3	  ]
[ 4,	  3	  ]
#s.select(4).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
#s.select(5).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
#s.reverse().print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
[ 3,	  3	  ]
[ 2,	  4	  ]
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(1).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
#s.reverse().select(2).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
#s.reverse().select(3).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  3	  ]
#s.reverse().select(4).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(4).sort_ht().print();
#-----------------#
# BAT:	  tmp_72  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(5).print();
#-----------------#
# BAT:	  tmp_72  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]
#printf("#~BeginVariableOutput~#\n");
#~BeginVariableOutput~#
#s.reverse().sort().print();
#-----------------#
# BAT:	  tmp_72  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  3	  ]
[ 3,	  4	  ]
[ 5,	  5	  ]
#printf("#~EndVariableOutput~#\n");
#~EndVariableOutput~#
#s.reverse().sort_ht().print();
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 5,	  5	  ]
#s.reverse().select(1).print();
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
#s.reverse().select(2).print();
#-----------------#
# BAT:	  tmp_72  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
#s.reverse().select(3).print();
#-----------------#
# BAT:	  tmp_72  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  3	  ]
#s.reverse().select(4).print();
#-----------------#
# BAT:	  tmp_72  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(4).sort_ht().print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#s.reverse().select(5).print();
#-----------------#
# BAT:	  tmp_70  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  5	  ]

# 14:18:00 >  
# 14:18:00 >  Done.
# 14:18:00 >  

