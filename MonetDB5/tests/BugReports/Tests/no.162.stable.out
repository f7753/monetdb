stdout of test 'no.162` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.162 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.162.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.162.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         162
# >Category:       Mserver
# >Synopsis:       ghost BUN in join result
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Wed Jul 15 16:13:00 1998
# >Originator:     windhouw@cwi.nl
# >Organization:
# CWI
# >Release:        980101
# >Environment:
# 
# >Description:
# A ghost BUN appears in the following script:
# 
function Admin.main():int;	# 0  (main:int)
    mil.line("# >Number:         162\n");	# 1 MILline ($1:void)<-($2:str)
    mil.line("# >Category:       Mserver\n");	# 2 MILline ($3:void)<-($4:str)
    mil.line("# >Synopsis:       ghost BUN in join result\n");	# 3 MILline ($5:void)<-($6:str)
    mil.line("# >Confidential:   no\n");	# 4 MILline ($7:void)<-($8:str)
    mil.line("# >Severity:       critical\n");	# 5 MILline ($9:void)<-($10:str)
    mil.line("# >Priority:       high\n");	# 6 MILline ($11:void)<-($12:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 7 MILline ($13:void)<-($14:str)
    mil.line("# >State:          open\n");	# 8 MILline ($15:void)<-($16:str)
    mil.line("# >Class:          sw-bug\n");	# 9 MILline ($17:void)<-($18:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Arrival-Date:   Wed Jul 15 16:13:00 1998\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Originator:     windhouw@cwi.nl\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Organization:\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# CWI\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Release:        980101\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >Environment:\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# \n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >Description:\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# A ghost BUN appears in the following script:\n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# \n");	# 20 MILline ($39:void)<-($34:str)
    mil.line("# script\n");	# 21 MILline ($40:void)<-($41:str)
    mil.line("# 8<-----\n");	# 22 MILline ($42:void)<-($43:str)
    mil.line("# VAR left := new(int,int);\n");	# 23 MILline ($44:void)<-($45:str)
    mil.line("# left.insert(4,-3);\n");	# 24 MILline ($46:void)<-($47:str)
    mil.line("# left.insert(3,-2);\n");	# 25 MILline ($48:void)<-($49:str)
    mil.line("# left.insert(2,-1);\n");	# 26 MILline ($50:void)<-($51:str)
    mil.line("# left.insert(1,0);\n");	# 27 MILline ($52:void)<-($53:str)
    mil.line("#  \n");	# 28 MILline ($54:void)<-($55:str)
    mil.line("# VAR right := new(int,str);\n");	# 29 MILline ($56:void)<-($57:str)
    mil.line("# right.insert(-3,\"vier\");\n");	# 30 MILline ($58:void)<-($59:str)
    mil.line("# right.insert(-2,\"drie\");\n");	# 31 MILline ($60:void)<-($61:str)
    mil.line("# right.insert(-1,\"twee\");\n");	# 32 MILline ($62:void)<-($63:str)
    mil.line("# right.insert(0,\"een\");\n");	# 33 MILline ($64:void)<-($65:str)
    mil.line("# \n");	# 34 MILline ($66:void)<-($67:str)
    mil.line("# join(left,right).print;\n");	# 35 MILline ($68:void)<-($69:str)
    mil.line("# \n");	# 36 MILline ($70:void)<-($67:str)
    mil.line("# 8<-----\n");	# 37 MILline ($71:void)<-($43:str)
    mil.line("# output\n");	# 38 MILline ($72:void)<-($73:str)
    mil.line("# 8<-----\n");	# 39 MILline ($74:void)<-($43:str)
    mil.line("# >join(left,right).print;\n");	# 40 MILline ($75:void)<-($76:str)
    mil.line("# #-----------------#\n");	# 41 MILline ($77:void)<-($78:str)
    mil.line("# # BAT:    tmp_37  #\n");	# 42 MILline ($79:void)<-($80:str)
    mil.line("# # (int)   (str)   #\n");	# 43 MILline ($81:void)<-($82:str)
    mil.line("# #-----------------#\n");	# 44 MILline ($83:void)<-($78:str)
    mil.line("# [ 4,      \"vier\"  ]\n");	# 45 MILline ($84:void)<-($85:str)
    mil.line("# [ 3,      \"drie\"  ]\n");	# 46 MILline ($86:void)<-($87:str)
    mil.line("# [ 2,      \"twee\"  ]\n");	# 47 MILline ($88:void)<-($89:str)
    mil.line("# [ 1,      \"een\"   ]\n");	# 48 MILline ($90:void)<-($91:str)
    mil.line("# [ 1,      \"\"      ]\n");	# 49 MILline ($92:void)<-($93:str)
    mil.line("setoid(oid(20000000));");	# 50 MILline ($94:void)<-($95:str)
    aa_a := calc.oid(20000000);	# 51 CALCint2oid (aa_a:oid)<-($97:int)
    ba_a := calc.setoid(aa_a);	# 52 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("VAR left := new(int,int);");	# 53 MILline ($99:void)<-($100:str)
    left := bbp.new(nil:int,nil:int);	# 54 CMDBATnew (left:bat[:int,:int])<-($102:int)($102:int)
    mil.line("left.insert(4,-3);");	# 55 MILline ($103:void)<-($104:str)
    ca_a := bat.insert(left,4,-3);	# 56 BKCinsert_bun (ca_a:bat[:int,:int])<-(left:bat[:int,:int])($106:int)($107:int)
    mil.line("left.insert(3,-2);");	# 57 MILline ($108:void)<-($109:str)
    da_a := bat.insert(left,3,-2);	# 58 BKCinsert_bun (da_a:bat[:int,:int])<-(left:bat[:int,:int])($111:int)($112:int)
    mil.line("left.insert(2,-1);");	# 59 MILline ($113:void)<-($114:str)
    ea_a := bat.insert(left,2,-1);	# 60 BKCinsert_bun (ea_a:bat[:int,:int])<-(left:bat[:int,:int])($116:int)($117:int)
    mil.line("left.insert(1,0);");	# 61 MILline ($118:void)<-($119:str)
    fa_a := bat.insert(left,1,0);	# 62 BKCinsert_bun (fa_a:bat[:int,:int])<-(left:bat[:int,:int])($121:int)($122:int)
    mil.line("VAR right := new(int,str);");	# 63 MILline ($123:void)<-($124:str)
    right := bbp.new(nil:int,"nil:str");	# 64 CMDBATnew (right:bat[:int,:str])<-($102:int)($126:str)
    mil.line("right.insert(-3,\"vier\");");	# 65 MILline ($127:void)<-($128:str)
    ga_a := bat.insert(right,-3,"vier");	# 66 BKCinsert_bun (ga_a:bat[:int,:str])<-(right:bat[:int,:str])($107:int)($130:str)
    mil.line("right.insert(-2,\"drie\");");	# 67 MILline ($131:void)<-($132:str)
    ha_a := bat.insert(right,-2,"drie");	# 68 BKCinsert_bun (ha_a:bat[:int,:str])<-(right:bat[:int,:str])($112:int)($134:str)
    mil.line("right.insert(-1,\"twee\");");	# 69 MILline ($135:void)<-($136:str)
    ia_a := bat.insert(right,-1,"twee");	# 70 BKCinsert_bun (ia_a:bat[:int,:str])<-(right:bat[:int,:str])($117:int)($138:str)
    mil.line("right.insert(0,\"een\");");	# 71 MILline ($139:void)<-($140:str)
    ja_a := bat.insert(right,0,"een");	# 72 BKCinsert_bun (ja_a:bat[:int,:str])<-(right:bat[:int,:str])($122:int)($142:str)
    mil.line("join(left,right).print();");	# 73 MILline ($143:void)<-($144:str)
    ka_a := algebra.join(left,right);	# 74 ALGjoin (ka_a:bat[:int,:str])<-(left:bat[:int,:int])(right:bat[:int,:str])
    la_a := io.print(ka_a);	# 75 IOprint_val (la_a:int)<-(ka_a:bat[:int,:str])
    mil.line("quit();");	# 76 MILline ($147:void)<-($148:str)
    ma_a := clients.quit();	# 77 CLTquit (ma_a:void)
end main;	# 78  
## >Number:         162
## >Category:       Mserver
## >Category:       Mserver
## >Synopsis:       ghost BUN in join result
## >Synopsis:       ghost BUN in join result
## >Confidential:   no
## >Confidential:   no
## >Severity:       critical
## >Severity:       critical
## >Priority:       high
## >Priority:       high
## >Responsible:    boncz (Peter Boncz)
## >Responsible:    boncz (Peter Boncz)
## >State:          open
## >State:          open
## >Class:          sw-bug
## >Class:          sw-bug
## >Submitter-Id:   unknown
## >Submitter-Id:   unknown
## >Arrival-Date:   Wed Jul 15 16:13:00 1998
## >Arrival-Date:   Wed Jul 15 16:13:00 1998
## >Originator:     windhouw@cwi.nl
## >Originator:     windhouw@cwi.nl
## >Organization:
## >Organization:
## CWI
## CWI
## >Release:        980101
## >Release:        980101
## >Environment:
## >Environment:
## 
## 
## >Description:
## >Description:
## A ghost BUN appears in the following script:
## A ghost BUN appears in the following script:
## 
## 
## script
## script
## 8<-----
## 8<-----
## VAR left := new(int,int);
## VAR left := new(int,int);
## left.insert(4,-3);
## left.insert(4,-3);
## left.insert(3,-2);
## left.insert(3,-2);
## left.insert(2,-1);
## left.insert(2,-1);
## left.insert(1,0);
## left.insert(1,0);
##  
##  
## VAR right := new(int,str);
## VAR right := new(int,str);
## right.insert(-3,"vier");
## right.insert(-3,"vier");
## right.insert(-2,"drie");
## right.insert(-2,"drie");
## right.insert(-1,"twee");
## right.insert(-1,"twee");
## right.insert(0,"een");
## right.insert(0,"een");
## 
## 
## join(left,right).print;
## join(left,right).print;
## 
## 
## 8<-----
## 8<-----
## output
## output
## 8<-----
## 8<-----
## >join(left,right).print;
## >join(left,right).print;
## #-----------------#
## #-----------------#
## # BAT:    tmp_37  #
## # BAT:    tmp_37  #
## # (int)   (str)   #
## # (int)   (str)   #
## #-----------------#
## #-----------------#
## [ 4,      "vier"  ]
## [ 4,      "vier"  ]
## [ 3,      "drie"  ]
## [ 3,      "drie"  ]
## [ 2,      "twee"  ]
## [ 2,      "twee"  ]
## [ 1,      "een"   ]
## [ 1,      "een"   ]
## [ 1,      ""      ]
## [ 1,      ""      ]
#  
#setoid(oid(20000000));
#VAR left := new(int,int);
#left.insert(4,-3);
#left.insert(3,-2);
#left.insert(2,-1);
#left.insert(1,0);
#VAR right := new(int,str);
#right.insert(-3,"vier");
#right.insert(-2,"drie");
#right.insert(-1,"twee");
#right.insert(0,"een");
#join(left,right).print();
#-----------------#
# BAT:	  tmp_71  #
# (int)	  (str)	  #
#-----------------#
[ 4,	  "vier"  ]
[ 3,	  "drie"  ]
[ 2,	  "twee"  ]
[ 1,	  "een"	  ]

# 08:27:51 >  
# 08:27:51 >  Done.
# 08:27:51 >  

