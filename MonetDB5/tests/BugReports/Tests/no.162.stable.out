stdout of test 'no.162` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.162 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.162.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.162.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         162
# >Category:       Mserver
# >Synopsis:       ghost BUN in join result
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Wed Jul 15 16:13:00 1998
# >Originator:     windhouw@cwi.nl
# >Organization:
# CWI
# >Release:        980101
# >Environment:
# 
# >Description:
# A ghost BUN appears in the following script:
# 
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  ($32:str)
#Predefined code segment 	# 2  ($34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  ($36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  ($38:str)
#A few guidelines to maximize usefullness. 	# 5  ($40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  ($42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  ($44:str)
#use the "mil_schema" for additional support routines 	# 8  ($46:str)
    mil.line("# >Number:         162\n");	# 9 MILline ($47:void)<-($48:str)
    mil.line("# >Category:       Mserver\n");	# 10 MILline ($49:void)<-($50:str)
    mil.line("# >Synopsis:       ghost BUN in join result\n");	# 11 MILline ($51:void)<-($52:str)
    mil.line("# >Confidential:   no\n");	# 12 MILline ($53:void)<-($54:str)
    mil.line("# >Severity:       critical\n");	# 13 MILline ($55:void)<-($56:str)
    mil.line("# >Priority:       high\n");	# 14 MILline ($57:void)<-($58:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 15 MILline ($59:void)<-($60:str)
    mil.line("# >State:          open\n");	# 16 MILline ($61:void)<-($62:str)
    mil.line("# >Class:          sw-bug\n");	# 17 MILline ($63:void)<-($64:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 18 MILline ($65:void)<-($66:str)
    mil.line("# >Arrival-Date:   Wed Jul 15 16:13:00 1998\n");	# 19 MILline ($67:void)<-($68:str)
    mil.line("# >Originator:     windhouw@cwi.nl\n");	# 20 MILline ($69:void)<-($70:str)
    mil.line("# >Organization:\n");	# 21 MILline ($71:void)<-($72:str)
    mil.line("# CWI\n");	# 22 MILline ($73:void)<-($74:str)
    mil.line("# >Release:        980101\n");	# 23 MILline ($75:void)<-($76:str)
    mil.line("# >Environment:\n");	# 24 MILline ($77:void)<-($78:str)
    mil.line("# \n");	# 25 MILline ($79:void)<-($80:str)
    mil.line("# >Description:\n");	# 26 MILline ($81:void)<-($82:str)
    mil.line("# A ghost BUN appears in the following script:\n");	# 27 MILline ($83:void)<-($84:str)
    mil.line("# \n");	# 28 MILline ($85:void)<-($80:str)
    mil.line("# script\n");	# 29 MILline ($86:void)<-($87:str)
    mil.line("# 8<-----\n");	# 30 MILline ($88:void)<-($89:str)
    mil.line("# VAR left := bbp.new(int,int);\n");	# 31 MILline ($90:void)<-($91:str)
    mil.line("# left.insert(4,-3);\n");	# 32 MILline ($92:void)<-($93:str)
    mil.line("# left.insert(3,-2);\n");	# 33 MILline ($94:void)<-($95:str)
    mil.line("# left.insert(2,-1);\n");	# 34 MILline ($96:void)<-($97:str)
    mil.line("# left.insert(1,0);\n");	# 35 MILline ($98:void)<-($99:str)
    mil.line("#  \n");	# 36 MILline ($100:void)<-($101:str)
    mil.line("# VAR right := bbp.new(int,str);\n");	# 37 MILline ($102:void)<-($103:str)
    mil.line("# right.insert(-3,\"vier\");\n");	# 38 MILline ($104:void)<-($105:str)
    mil.line("# right.insert(-2,\"drie\");\n");	# 39 MILline ($106:void)<-($107:str)
    mil.line("# right.insert(-1,\"twee\");\n");	# 40 MILline ($108:void)<-($109:str)
    mil.line("# right.insert(0,\"een\");\n");	# 41 MILline ($110:void)<-($111:str)
    mil.line("# \n");	# 42 MILline ($112:void)<-($113:str)
    mil.line("# algebra.join(left,right).print;\n");	# 43 MILline ($114:void)<-($115:str)
    mil.line("# \n");	# 44 MILline ($116:void)<-($113:str)
    mil.line("# 8<-----\n");	# 45 MILline ($117:void)<-($89:str)
    mil.line("# output\n");	# 46 MILline ($118:void)<-($119:str)
    mil.line("# 8<-----\n");	# 47 MILline ($120:void)<-($89:str)
    mil.line("# >join(left,right).print;\n");	# 48 MILline ($121:void)<-($122:str)
    mil.line("# #-----------------#\n");	# 49 MILline ($123:void)<-($124:str)
    mil.line("# # BAT:    tmp_37  #\n");	# 50 MILline ($125:void)<-($126:str)
    mil.line("# # (int)   (str)   #\n");	# 51 MILline ($127:void)<-($128:str)
    mil.line("# #-----------------#\n");	# 52 MILline ($129:void)<-($124:str)
    mil.line("# [ 4,      \"vier\"  ]\n");	# 53 MILline ($130:void)<-($131:str)
    mil.line("# [ 3,      \"drie\"  ]\n");	# 54 MILline ($132:void)<-($133:str)
    mil.line("# [ 2,      \"twee\"  ]\n");	# 55 MILline ($134:void)<-($135:str)
    mil.line("# [ 1,      \"een\"   ]\n");	# 56 MILline ($136:void)<-($137:str)
    mil.line("# [ 1,      \"\"      ]\n");	# 57 MILline ($138:void)<-($139:str)
    mil.line("setoid(oid(20000000));");	# 58 MILline ($140:void)<-($141:str)
    aa_a := calc.oid(20000000);	# 59 CALCint2oid (aa_a:oid)<-($143:int)
    ba_a := calc.setoid(aa_a);	# 60 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("VAR left := bbp.new(int,int);");	# 61 MILline ($145:void)<-($146:str)
    left := bbp.new(nil:int,nil:int);	# 62 CMDBATnew (left:bat[:int,:int])<-($148:int)($148:int)
    mil.line("left.insert(4,-3);");	# 63 MILline ($149:void)<-($150:str)
    ca_a := bat.insert(left,4,-3);	# 64 BKCinsert_bun (ca_a:bat[:int,:int])<-(left:bat[:int,:int])($152:int)($153:int)
    mil.line("left.insert(3,-2);");	# 65 MILline ($154:void)<-($155:str)
    da_a := bat.insert(left,3,-2);	# 66 BKCinsert_bun (da_a:bat[:int,:int])<-(left:bat[:int,:int])($157:int)($158:int)
    mil.line("left.insert(2,-1);");	# 67 MILline ($159:void)<-($160:str)
    ea_a := bat.insert(left,2,-1);	# 68 BKCinsert_bun (ea_a:bat[:int,:int])<-(left:bat[:int,:int])($162:int)($163:int)
    mil.line("left.insert(1,0);");	# 69 MILline ($164:void)<-($165:str)
    fa_a := bat.insert(left,1,0);	# 70 BKCinsert_bun (fa_a:bat[:int,:int])<-(left:bat[:int,:int])($167:int)($168:int)
    mil.line("VAR right := bbp.new(int,str);");	# 71 MILline ($169:void)<-($170:str)
    right := bbp.new(nil:int,"nil:str");	# 72 CMDBATnew (right:bat[:int,:str])<-($148:int)($172:str)
    mil.line("right.insert(-3,\"vier\");");	# 73 MILline ($173:void)<-($174:str)
    ga_a := bat.insert(right,-3,"vier");	# 74 BKCinsert_bun (ga_a:bat[:int,:str])<-(right:bat[:int,:str])($153:int)($176:str)
    mil.line("right.insert(-2,\"drie\");");	# 75 MILline ($177:void)<-($178:str)
    ha_a := bat.insert(right,-2,"drie");	# 76 BKCinsert_bun (ha_a:bat[:int,:str])<-(right:bat[:int,:str])($158:int)($180:str)
    mil.line("right.insert(-1,\"twee\");");	# 77 MILline ($181:void)<-($182:str)
    ia_a := bat.insert(right,-1,"twee");	# 78 BKCinsert_bun (ia_a:bat[:int,:str])<-(right:bat[:int,:str])($163:int)($184:str)
    mil.line("right.insert(0,\"een\");");	# 79 MILline ($185:void)<-($186:str)
    ja_a := bat.insert(right,0,"een");	# 80 BKCinsert_bun (ja_a:bat[:int,:str])<-(right:bat[:int,:str])($168:int)($188:str)
    mil.line("join(left,right).print();");	# 81 MILline ($189:void)<-($190:str)
    ka_a := algebra.join(left,right);	# 82 ALGjoin (ka_a:bat[:int,:str])<-(left:bat[:int,:int])(right:bat[:int,:str])
    la_a := io.print(ka_a);	# 83 IOprint_val (la_a:int)<-(ka_a:bat[:int,:str])
    mil.line("quit();");	# 84 MILline ($193:void)<-($194:str)
    ma_a := clients.quit();	# 85 CLTquit (ma_a:void)
end main;	# 86  
## >Number:         162\n
## >Category:       Mserver\n
## >Synopsis:       ghost BUN in join result\n
## >Confidential:   no\n
## >Severity:       critical\n
## >Priority:       high\n
## >Responsible:    boncz (Peter Boncz)\n
## >State:          open\n
## >Class:          sw-bug\n
## >Submitter-Id:   unknown\n
## >Arrival-Date:   Wed Jul 15 16:13:00 1998\n
## >Originator:     windhouw@cwi.nl\n
## >Organization:\n
## CWI\n
## >Release:        980101\n
## >Environment:\n
## \n
## >Description:\n
## A ghost BUN appears in the following script:\n
## \n
## script\n
## 8<-----\n
## VAR left := bbp.new(int,int);\n
## left.insert(4,-3);\n
## left.insert(3,-2);\n
## left.insert(2,-1);\n
## left.insert(1,0);\n
##  \n
## VAR right := bbp.new(int,str);\n
## right.insert(-3,\"vier\");\n
## right.insert(-2,\"drie\");\n
## right.insert(-1,\"twee\");\n
## right.insert(0,\"een\");\n
## \n
## algebra.join(left,right).print;\n
## \n
## 8<-----\n
## output\n
## 8<-----\n
## >join(left,right).print;\n
## #-----------------#\n
## # BAT:    tmp_37  #\n
## # (int)   (str)   #\n
## #-----------------#\n
## [ 4,      \"vier\"  ]\n
## [ 3,      \"drie\"  ]\n
## [ 2,      \"twee\"  ]\n
## [ 1,      \"een\"   ]\n
## [ 1,      \"\"      ]\n
#setoid(oid(20000000));
#VAR left := new(int,int);
#left.insert(4,-3);
#left.insert(3,-2);
#left.insert(2,-1);
#left.insert(1,0);
#VAR right := new(int,str);
#right.insert(-3,"vier");
#right.insert(-2,"drie");
#right.insert(-1,"twee");
#right.insert(0,"een");
#join(left,right).print();
#-----------------#
# BAT:	  tmp_71  #
# (int)	  (str)	  #
#-----------------#
[ 4,	  "vier"  ]
[ 3,	  "drie"  ]
[ 2,	  "twee"  ]
[ 1,	  "een"	  ]

# 08:27:51 >  
# 08:27:51 >  Done.
# 08:27:51 >  

