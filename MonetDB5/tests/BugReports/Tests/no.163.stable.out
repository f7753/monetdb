stdout of test 'no.163` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.163 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.163.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.163.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.

# >Number:         163
# >Category:       MIL
# >Synopsis:       multi[lex bug
# >Confidential:   no
# >Severity:       serious
# >Priority:       medium
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Mon Jul 20 09:56:02 1998
# >Originator:     manegold@cwi.nl
# >Organization:
# >Release:        980101
# >Environment:
# any
# >Description:
# Tim Ruhl (DDi) reported this bug:
# 
# The following script fails with "GDKmalloc called with size 0".
# (cf. output below)
# 
# -8<-----
# 
# proc tst(BAT[any, int] b) :=
# {  
#   var i;
# 
#   i := 0;
#	mil.line("  i := 0;");
#barrier	ca_a := true;
#barrier	da_a := <(i,2);
#	mil.line("  while (i < 2) {");
#	b := multiplex.tactics("+",b,1);
#	mil.line("    b := [+](b, 1);");
#	i := +(i,1);
#	mil.line("    i := i + 1;");
#redo	ca_a;
#exit	da_a;
#exit	ca_a;
#	mil.line("");
#	return ea_a :=b;
#end tst;
function Admin.tst(b:bat[:any,:int]):bat[:any,:any];	# 0  (tst:bat[:any,:any])<-(b:bat[:any,:int])
    mil.line("");	# 1 MILline ($2:void)<-($3:str)
    i := 0;	# 2  (i:int)<-($5:int)
    mil.line("  i := 0;");	# 3 MILline ($6:void)<-($7:str)
barrier ca_a := true;	# 4  (ca_a:bit)<-($9:bit) jump 13
barrier da_a := calc.<(i,2);	# 5 CALCcompLTintint (da_a:bit)<-(i:int)($11:int) jump 12
    mil.line("  while (i < 2) {");	# 6 MILline ($12:void)<-($13:str)
    b := batcalc.+(b,1);	# 7 CMDbatADDcst (b:bat[:any,:int])<-(b:bat[:any,:int])($15:int)
    mil.line("    b := [+](b, 1);");	# 8 MILline ($16:void)<-($17:str)
    i := calc.+(i,1);	# 9 CALCbinaryADDintint (i:int)<-(i:int)($15:int)
    mil.line("    i := i + 1;");	# 10 MILline ($18:void)<-($19:str)
    redo ca_a;	# 11  (ca_a:bit) jump 5
exit da_a;	# 12  (da_a:bit)
exit ca_a;	# 13  (ca_a:bit)
    mil.line("");	# 14 MILline ($20:void)<-($3:str)
    return ea_a := b;	# 15  (ea_a:bat[:any,:int])<-(b:bat[:any,:int])
end tst;	# 16  
#	mil.line("");
#	b1 := new(nil:int,nil:int);
#	mil.line("var b1 := new(int, int);");
#	fa_a := insert(b1,0,0);
#	mil.line("b1.insert(0, 0);");
#	ga_a := insert(b1,0,1);
#	mil.line("");
# bn := tst(b1);
#	mil.line("var bn := tst(b1);  ");
#	ha_a := print(bn);
#	mil.line("");
#	ia_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("# >Number:         163\n");	# 1 MILline ($1:void)<-($2:str)
    mil.line("# >Category:       MIL\n");	# 2 MILline ($3:void)<-($4:str)
    mil.line("# >Synopsis:       multi[lex bug\n");	# 3 MILline ($5:void)<-($6:str)
    mil.line("# >Confidential:   no\n");	# 4 MILline ($7:void)<-($8:str)
    mil.line("# >Severity:       serious\n");	# 5 MILline ($9:void)<-($10:str)
    mil.line("# >Priority:       medium\n");	# 6 MILline ($11:void)<-($12:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 7 MILline ($13:void)<-($14:str)
    mil.line("# >State:          open\n");	# 8 MILline ($15:void)<-($16:str)
    mil.line("# >Class:          sw-bug\n");	# 9 MILline ($17:void)<-($18:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Arrival-Date:   Mon Jul 20 09:56:02 1998\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Originator:     manegold@cwi.nl\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Organization:\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# >Release:        980101\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Environment:\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# any\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# >Description:\n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# Tim Ruhl (DDi) reported this bug:\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# \n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# The following script fails with \"GDKmalloc called with size 0\".\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# (cf. output below)\n");	# 21 MILline ($41:void)<-($42:str)
    mil.line("# \n");	# 22 MILline ($43:void)<-($38:str)
    mil.line("# -8<-----\n");	# 23 MILline ($44:void)<-($45:str)
    mil.line("# \n");	# 24 MILline ($46:void)<-($38:str)
    mil.line("# proc tst(BAT[any, int] b) : bat\n");	# 25 MILline ($47:void)<-($48:str)
    mil.line("# {  \n");	# 26 MILline ($49:void)<-($50:str)
    mil.line("#   var i;\n");	# 27 MILline ($51:void)<-($52:str)
    mil.line("# \n");	# 28 MILline ($53:void)<-($38:str)
    mil.line("#   i := 0;\n");	# 29 MILline ($54:void)<-($55:str)
    mil.line("#   while (i < 2) {\n");	# 30 MILline ($56:void)<-($57:str)
    mil.line("#     b := [+](b, 1);\n");	# 31 MILline ($58:void)<-($59:str)
    mil.line("#     i := i + 1;\n");	# 32 MILline ($60:void)<-($61:str)
    mil.line("#   }\n");	# 33 MILline ($62:void)<-($63:str)
    mil.line("# \n");	# 34 MILline ($64:void)<-($38:str)
    mil.line("#   return b;\n");	# 35 MILline ($65:void)<-($66:str)
    mil.line("# }\n");	# 36 MILline ($67:void)<-($68:str)
    mil.line("# \n");	# 37 MILline ($69:void)<-($38:str)
    mil.line("# b1 := new(int, int);\n");	# 38 MILline ($70:void)<-($71:str)
    mil.line("# b1.insert(0, 0);\n");	# 39 MILline ($72:void)<-($73:str)
    mil.line("# b1.insert(0, 1);\n");	# 40 MILline ($74:void)<-($75:str)
    mil.line("# \n");	# 41 MILline ($76:void)<-($77:str)
    mil.line("# bn := tst(b1);\n");	# 42 MILline ($78:void)<-($79:str)
    mil.line("# bn.print;\n");	# 43 MILline ($80:void)<-($81:str)
    mil.line("# \n");	# 44 MILline ($82:void)<-($77:str)
    mil.line("# quit;\n");	# 45 MILline ($83:void)<-($84:str)
    mil.line("# \n");	# 46 MILline ($85:void)<-($77:str)
    mil.line("# -8<-----\n");	# 47 MILline ($86:void)<-($87:str)
    mil.line("# \n");	# 48 MILline ($88:void)<-($77:str)
    mil.line("# # Monet Database Server V4.0 (IRIX5.3/32bit) of Fri Jul 17 21:30:49 MET DST 1998\n");	# 49 MILline ($89:void)<-($90:str)
    mil.line("# # Copyright (c) 1993-1998, CWI & SION. All rights reserved.\n");	# 50 MILline ($91:void)<-($92:str)
    mil.line("# #script:../tim.mil\n");	# 51 MILline ($93:void)<-($94:str)
    mil.line("# \n");	# 52 MILline ($95:void)<-($77:str)
    mil.line("# loaded;\n");	# 53 MILline ($96:void)<-($97:str)
    mil.line("# #---------------------------------#\n");	# 54 MILline ($98:void)<-($99:str)
    mil.line("# # module        | usage_count     #\n");	# 55 MILline ($100:void)<-($101:str)
    mil.line("# #---------------------------------#\n");	# 56 MILline ($102:void)<-($99:str)
    mil.line("# [ \"kernel\",       1               ]\n");	# 57 MILline ($103:void)<-($104:str)
    mil.line("# [ \"arith\",        1               ]\n");	# 58 MILline ($105:void)<-($106:str)
    mil.line("# [ \"bat\",          1               ]\n");	# 59 MILline ($107:void)<-($108:str)
    mil.line("# [ \"algebra\",      1               ]\n");	# 60 MILline ($109:void)<-($110:str)
    mil.line("# [ \"sys\",          1               ]\n");	# 61 MILline ($111:void)<-($112:str)
    mil.line("# [ \"trans\",        1               ]\n");	# 62 MILline ($113:void)<-($114:str)
    mil.line("# \n");	# 63 MILline ($115:void)<-($116:str)
    mil.line("# Try: modules;                - for other modules.\n");	# 64 MILline ($117:void)<-($118:str)
    mil.line("#      ls;                     - for persistent bat listing.\n");	# 65 MILline ($119:void)<-($120:str)
    mil.line("#      sigs(\"<module>\")        - for available commands per module.\n");	# 66 MILline ($121:void)<-($122:str)
    mil.line("#      help(\"<command>\")       - for help one-liner for a command.\n");	# 67 MILline ($123:void)<-($124:str)
    mil.line("# \n");	# 68 MILline ($125:void)<-($116:str)
    mil.line("# #You are system administrator (adm)!\n");	# 69 MILline ($126:void)<-($127:str)
    mil.line("#  \n");	# 70 MILline ($128:void)<-($129:str)
    mil.line("# proc tst(BAT[any, int] b) : bat\n");	# 71 MILline ($130:void)<-($131:str)
    mil.line("# {\n");	# 72 MILline ($132:void)<-($133:str)
    mil.line("#   var i;\n");	# 73 MILline ($134:void)<-($135:str)
    mil.line("# \n");	# 74 MILline ($136:void)<-($116:str)
    mil.line("#   i := 0;\n");	# 75 MILline ($137:void)<-($138:str)
    mil.line("#   while (i < 2) {\n");	# 76 MILline ($139:void)<-($140:str)
    mil.line("#     b := [+](b, 1);\n");	# 77 MILline ($141:void)<-($142:str)
    mil.line("#     i := i + 1;\n");	# 78 MILline ($143:void)<-($144:str)
    mil.line("#   }\n");	# 79 MILline ($145:void)<-($146:str)
    mil.line("# \n");	# 80 MILline ($147:void)<-($116:str)
    mil.line("#   return b;\n");	# 81 MILline ($148:void)<-($149:str)
    mil.line("# }\n");	# 82 MILline ($150:void)<-($151:str)
    mil.line("# \n");	# 83 MILline ($152:void)<-($153:str)
    mil.line("# b1 := new(int, int);\n");	# 84 MILline ($154:void)<-($155:str)
    mil.line("# b1.insert(0, 0);\n");	# 85 MILline ($156:void)<-($157:str)
    mil.line("# b1.insert(0, 1);\n");	# 86 MILline ($158:void)<-($159:str)
    mil.line("# \n");	# 87 MILline ($160:void)<-($153:str)
    mil.line("# bn := tst(b1);\n");	# 88 MILline ($161:void)<-($162:str)
    mil.line("# GDKmalloc called with size 0\n");	# 89 MILline ($163:void)<-($164:str)
    mil.line("# \n");	# 90 MILline ($165:void)<-($153:str)
    mil.line("# -8<-----\n");	# 91 MILline ($166:void)<-($167:str)
    mil.line("# \n");	# 92 MILline ($168:void)<-($153:str)
    mil.line("# As Tim sais, it has probably to do with rewriting the\n");	# 93 MILline ($169:void)<-($170:str)
    mil.line("# MIL parse tree after the first iteration of the while loop.\n");	# 94 MILline ($171:void)<-($172:str)
    mil.line("# \n");	# 95 MILline ($173:void)<-($153:str)
    mil.line("# ========\n");	# 96 MILline ($174:void)<-($175:str)
    mil.line("# \n");	# 97 MILline ($176:void)<-($153:str)
    mil.line("# As I just noticed, similar (the same\?) bugs have already been\n");	# 98 MILline ($177:void)<-($178:str)
    mil.line("# reported in bug reports #117 & #156.\n");	# 99 MILline ($179:void)<-($180:str)
    mil.line("# \n");	# 100 MILline ($181:void)<-($153:str)
    mil.line("#\t\tStefan\n");	# 101 MILline ($182:void)<-($183:str)
    mil.line("");	# 102 MILline ($184:void)<-($185:str)
    aa_a := calc.oid(20000000);	# 103 CALCint2oid (aa_a:oid)<-($187:int)
    ba_a := calc.setoid(aa_a);	# 104 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("");	# 105 MILline ($189:void)<-($185:str)
    mil.line("");	# 106 MILline ($190:void)<-($185:str)
    b1 := bbp.new(nil,nil);	# 107 CMDBATnew (b1:bat[:int,:int])<-($192:int)($192:int)
    mil.line("var b1 := new(int, int);");	# 108 MILline ($193:void)<-($194:str)
    fa_a := bat.insert(b1,0,0);	# 109 BKCinsert_bun (fa_a:void)<-(b1:bat[:int,:int])($196:int)($196:int)
    mil.line("b1.insert(0, 0);");	# 110 MILline ($197:void)<-($198:str)
    ga_a := bat.insert(b1,0,1);	# 111 BKCinsert_bun (ga_a:void)<-(b1:bat[:int,:int])($196:int)($200:int)
    mil.line("");	# 112 MILline ($201:void)<-($185:str)
    bn := Admin.tst(b1);	# 113  (bn:bat[:any,:any])<-(b1:bat[:int,:int])
    mil.line("var bn := tst(b1);  ");	# 114 MILline ($203:void)<-($204:str)
    ha_a := io.print(bn);	# 115 IOprint_val (ha_a:int)<-(bn:bat[:any,:any])
    mil.line("");	# 116 MILline ($206:void)<-($185:str)
    ia_a := clients.quit();	# 117 CLTquit (ia_a:void)
end main;	# 118  
## >Number:         163
## >Category:       MIL
## >Synopsis:       multi[lex bug
## >Confidential:   no
## >Severity:       serious
## >Priority:       medium
## >Responsible:    boncz (Peter Boncz)
## >State:          open
## >Class:          sw-bug
## >Submitter-Id:   unknown
## >Arrival-Date:   Mon Jul 20 09:56:02 1998
## >Originator:     manegold@cwi.nl
## >Organization:
## >Release:        980101
## >Environment:
## any
## >Description:
## Tim Ruhl (DDi) reported this bug:
## 
## The following script fails with "GDKmalloc called with size 0".
## (cf. output below)
## 
## -8<-----
## 
## proc tst(BAT[any, int] b) : bat
## {  
##   var i;
## 
##   i := 0;
##   while (i < 2) {
##     b := [+](b, 1);
##     i := i + 1;
##   }
## 
##   return b;
## }
## 
## b1 := new(int, int);
## b1.insert(0, 0);
## b1.insert(0, 1);
## 
## bn := tst(b1);
## bn.print;
## 
## quit;
## 
## -8<-----
## 
## # Monet Database Server V4.0 (IRIX5.3/32bit) of Fri Jul 17 21:30:49 MET DST 1998
## # Copyright (c) 1993-1998, CWI & SION. All rights reserved.
## #script:../tim.mil
## 
## loaded;
## #---------------------------------#
## # module        | usage_count     #
## #---------------------------------#
## [ "kernel",       1               ]
## [ "arith",        1               ]
## [ "bat",          1               ]
## [ "algebra",      1               ]
## [ "sys",          1               ]
## [ "trans",        1               ]
## 
## Try: modules;                - for other modules.
##      ls;                     - for persistent bat listing.
##      sigs("<module>")        - for available commands per module.
##      help("<command>")       - for help one-liner for a command.
## 
## #You are system administrator (adm)!
##  
## proc tst(BAT[any, int] b) : bat
## {
##   var i;
## 
##   i := 0;
##   while (i < 2) {
##     b := [+](b, 1);
##     i := i + 1;
##   }
## 
##   return b;
## }
## 
## b1 := new(int, int);
## b1.insert(0, 0);
## b1.insert(0, 1);
## 
## bn := tst(b1);
## GDKmalloc called with size 0
## 
## -8<-----
## 
## As Tim sais, it has probably to do with rewriting the
## MIL parse tree after the first iteration of the while loop.
## 
## ========
## 
## As I just noticed, similar (the same?) bugs have already been
## reported in bug reports #117 & #156.
## 
##		Stefan
#
# 
# quit;
# 
# -8<-----
# 
# # Monet Database Server V4.0 (IRIX5.3/32bit) of Fri Jul 17 21:30:49 MET DST 1998
# # Copyright (c) 1993-1998, CWI & SION. All rights reserved.
# #script:../tim.mil
# 
# loaded;
# #---------------------------------#
# # module        | usage_count     #
# #---------------------------------#
# [ "kernel",       1               ]
# [ "arith",        1               ]
# [ "bat",          1               ]
# [ "algebra",      1               ]
# [ "sys",          1               ]
# [ "trans",        1               ]
# 
# Try: modules;                - for other modules.
#      ls;                     - for persistent bat listing.
#      sigs("<module>")        - for available commands per module.
#      help("<command>")       - for help one-liner for a command.
# 
# #You are system administrator (adm)!
#  
# proc tst(BAT[any, int] b) :=
# {
#   var i;
# 
#   i := 0;
#   while (i < 2) {
#     b := [+](b, 1);
#     i := i + 1;
#   }
# 
#   return b;
# }
# 
# b1 := new(int, int);
# b1.insert(0, 0);
# b1.insert(0, 1);
# 
# bn := tst(b1);
# GDKmalloc called with size 0
# 
# -8<-----
# 
# As Tim sais, it has probably to do with rewriting the
# MIL parse tree after the first iteration of the while loop.
# 
# ========
# 
# As I just noticed, similar (the same?) bugs have already been
# reported in bug reports #117 & #156.
# 
#var bn := tst(b1);  
#-----------------#
# BAT:	  tmp_71  #
# (int)	  (int)	  #
#-----------------#
[ 0,	  2	  ]
[ 0,	  3	  ]

# 14:17:57 >  
# 14:17:57 >  Done.
# 14:17:57 >  

