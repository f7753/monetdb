stdout of test 'no.168` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.168 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.168.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.168.milS


# Monet Database Server V4.7.3
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
#include mil_scenario;
#include mil_system_procs;
## Copyright (c) 2001-2004, CWI. All rights reserved.
# 
# >Number:         168
# >Category:       Module_url
# >Synopsis:       cast url(str) returns nil
# >Confidential:   no
# >Severity:       serious
# >Priority:       medium
# >Responsible:    mk (Martin Kersten)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Thu Aug 13 22:21:00 1998
# >Originator:     manegold@cwi.nl
# >Organization:
# CWI
# >Release:        980101
# >Environment:
# any
# >Description:
# cast url(str) returns nil.
# this bug occurs only today, i.e. after the recent checkins by Menzo & Peter.
# so, it's no bug in module url, but somewhere else.
# 
!ERROR: 	u := url("http://www.cwi.nl/~mk/Acoi/index.html");
!	               ^module name missing
!ERROR: 	mil.line("u.print();");
!	                        	  ^<identifier> expected
!ERROR: 	da_a := getHost(u);
!	                    	 ^module name missing
!ERROR: 	fa_a := getPort(u);
!	                    	 ^module name missing
!ERROR: 	ha_a := getDomain(u);
!	                      	 ^module name missing
!ERROR: 	ja_a := getFile(u);
!	                    	 ^module name missing
!ERROR: 	la_a := getAnchor(u);
!	                      	 ^module name missing
!ERROR: 	na_a := getBasename(u);
!	                        	 ^module name missing
!ERROR: 	pa_a := getProtocol(u);
!	                        	 ^module name missing
!ERROR: 	ra_a := getUser(u);
!	                    	 ^module name missing
!ERROR: 	ta_a := getDirectory(u);
!	                         	 ^module name missing
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  unknown ($32:str)
#Predefined code segment 	# 2  unknown ($34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  unknown ($36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  unknown ($38:str)
#A few guidelines to maximize usefullness. 	# 5  unknown ($40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  unknown ($42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  unknown ($44:str)
#use the "mil_schema" for additional support routines 	# 8  unknown ($46:str)
    mil.line("# \n");	# 9  unknown ($47:any)<-($48:str)
    mil.line("# >Number:         168\n");	# 10  unknown ($49:any)<-($50:str)
    mil.line("# >Category:       Module_url\n");	# 11  unknown ($51:any)<-($52:str)
    mil.line("# >Synopsis:       cast url(str) returns nil\n");	# 12  unknown ($53:any)<-($54:str)
    mil.line("# >Confidential:   no\n");	# 13  unknown ($55:any)<-($56:str)
    mil.line("# >Severity:       serious\n");	# 14  unknown ($57:any)<-($58:str)
    mil.line("# >Priority:       medium\n");	# 15  unknown ($59:any)<-($60:str)
    mil.line("# >Responsible:    mk (Martin Kersten)\n");	# 16  unknown ($61:any)<-($62:str)
    mil.line("# >State:          open\n");	# 17  unknown ($63:any)<-($64:str)
    mil.line("# >Class:          sw-bug\n");	# 18  unknown ($65:any)<-($66:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 19  unknown ($67:any)<-($68:str)
    mil.line("# >Arrival-Date:   Thu Aug 13 22:21:00 1998\n");	# 20  unknown ($69:any)<-($70:str)
    mil.line("# >Originator:     manegold@cwi.nl\n");	# 21  unknown ($71:any)<-($72:str)
    mil.line("# >Organization:\n");	# 22  unknown ($73:any)<-($74:str)
    mil.line("# CWI\n");	# 23  unknown ($75:any)<-($76:str)
    mil.line("# >Release:        980101\n");	# 24  unknown ($77:any)<-($78:str)
    mil.line("# >Environment:\n");	# 25  unknown ($79:any)<-($80:str)
    mil.line("# any\n");	# 26  unknown ($81:any)<-($82:str)
    mil.line("# >Description:\n");	# 27  unknown ($83:any)<-($84:str)
    mil.line("# cast url(str) returns nil.\n");	# 28  unknown ($85:any)<-($86:str)
    mil.line("# this bug occurs only today, i.e. after the recent checkins by Menzo & Peter.\n");	# 29  unknown ($87:any)<-($88:str)
    mil.line("# so, it's no bug in module url, but somewhere else.\n");	# 30  unknown ($89:any)<-($90:str)
    mil.line("# \n");	# 31  unknown ($91:any)<-($92:str)
    mil.line("# ========\n");	# 32  unknown ($93:any)<-($94:str)
    mil.line("# test script\n");	# 33  unknown ($95:any)<-($96:str)
    mil.line("# --------\n");	# 34  unknown ($97:any)<-($98:str)
    mil.line("# module(url);\n");	# 35  unknown ($99:any)<-($100:str)
    mil.line("# u:= url(\"http://www.cwi.nl/~mk/Acoi/index.html\");\n");	# 36  unknown ($101:any)<-($102:str)
    mil.line("# u.print();\n");	# 37  unknown ($103:any)<-($104:str)
    mil.line("# u.getHost.print();\n");	# 38  unknown ($105:any)<-($106:str)
    mil.line("# u.getPort.print();\n");	# 39  unknown ($107:any)<-($108:str)
    mil.line("# u.getDomain.print();\n");	# 40  unknown ($109:any)<-($110:str)
    mil.line("# u.getFile.print();\n");	# 41  unknown ($111:any)<-($112:str)
    mil.line("# u.getAnchor.print();\n");	# 42  unknown ($113:any)<-($114:str)
    mil.line("# u.getBasename.print();\n");	# 43  unknown ($115:any)<-($116:str)
    mil.line("# u.getProtocol.print();\n");	# 44  unknown ($117:any)<-($118:str)
    mil.line("# u.getUser.print();\n");	# 45  unknown ($119:any)<-($120:str)
    mil.line("# u.getDirectory.print();\n");	# 46  unknown ($121:any)<-($122:str)
    mil.line("# quit;\n");	# 47  unknown ($123:any)<-($124:str)
    mil.line("# ========\n");	# 48  unknown ($125:any)<-($94:str)
    mil.line("# \n");	# 49  unknown ($126:any)<-($127:str)
    mil.line("# ========\n");	# 50  unknown ($128:any)<-($129:str)
    mil.line("# output\n");	# 51  unknown ($130:any)<-($131:str)
    mil.line("# --------\n");	# 52  unknown ($132:any)<-($133:str)
    mil.line("# [...]\n");	# 53  unknown ($134:any)<-($135:str)
    mil.line("# module(url);\n");	# 54  unknown ($136:any)<-($137:str)
    mil.line("# u:= url(\"http://www.cwi.nl/~mk/Acoi/index.html\");\n");	# 55  unknown ($138:any)<-($139:str)
    mil.line("# u.print();\n");	# 56  unknown ($140:any)<-($141:str)
    mil.line("# [ nil ]\n");	# 57  unknown ($142:any)<-($143:str)
    mil.line("# u.getHost.print();\n");	# 58  unknown ($144:any)<-($145:str)
    mil.line("# [ nil ]\n");	# 59  unknown ($146:any)<-($143:str)
    mil.line("# u.getPort.print();\n");	# 60  unknown ($147:any)<-($148:str)
    mil.line("# [ nil ]\n");	# 61  unknown ($149:any)<-($143:str)
    mil.line("# u.getDomain.print();\n");	# 62  unknown ($150:any)<-($151:str)
    mil.line("# [ nil ]\n");	# 63  unknown ($152:any)<-($143:str)
    mil.line("# u.getFile.print();\n");	# 64  unknown ($153:any)<-($154:str)
    mil.line("# [ nil ]\n");	# 65  unknown ($155:any)<-($143:str)
    mil.line("# u.getAnchor.print();\n");	# 66  unknown ($156:any)<-($157:str)
    mil.line("# [ nil ]\n");	# 67  unknown ($158:any)<-($143:str)
    mil.line("# u.getBasename.print();\n");	# 68  unknown ($159:any)<-($160:str)
    mil.line("# [ nil ]\n");	# 69  unknown ($161:any)<-($143:str)
    mil.line("# u.getProtocol.print();\n");	# 70  unknown ($162:any)<-($163:str)
    mil.line("# [ nil ]\n");	# 71  unknown ($164:any)<-($143:str)
    mil.line("# u.getUser.print();\n");	# 72  unknown ($165:any)<-($166:str)
    mil.line("# [ nil ]\n");	# 73  unknown ($167:any)<-($143:str)
    mil.line("# u.getDirectory.print();\n");	# 74  unknown ($168:any)<-($169:str)
    mil.line("# ========\n");	# 75  unknown ($170:any)<-($171:str)
    mil.line("setoid(oid(20000000));");	# 76  unknown ($172:any)<-($173:str)
    aa_a := calc.oid(20000000);	# 77  unknown (aa_a:any)<-($175:int)
    ba_a := calc.setoid(aa_a);	# 78  unknown (ba_a:any)<-(aa_a:any)
    mil.line("var u:= url(\"http://www.cwi.nl/~mk/Acoi/index.html\");");	# 79  unknown ($177:any)<-($178:str)
    u := url;	# 80  unknown (u:any)<-(url:any)
    ;	# 81  unknown ($181:any)
    ca_a := bat.print(u);	# 82  unknown (ca_a:any)<-(u:any)
    mil.line("u.getHost().print();");	# 83  unknown ($183:any)<-($184:str)
    da_a := getHost;	# 84  unknown (da_a:any)<-(getHost:any)
    mil.line("u.getPort().print();");	# 85  unknown ($187:any)<-($188:str)
    fa_a := getPort;	# 86  unknown (fa_a:any)<-(getPort:any)
    mil.line("u.getDomain().print();");	# 87  unknown ($191:any)<-($192:str)
    ha_a := getDomain;	# 88  unknown (ha_a:any)<-(getDomain:any)
    mil.line("u.getFile().print();");	# 89  unknown ($195:any)<-($196:str)
    ja_a := getFile;	# 90  unknown (ja_a:any)<-(getFile:any)
    mil.line("u.getAnchor().print();");	# 91  unknown ($199:any)<-($200:str)
    la_a := getAnchor;	# 92  unknown (la_a:any)<-(getAnchor:any)
    mil.line("u.getBasename().print();");	# 93  unknown ($203:any)<-($204:str)
    na_a := getBasename;	# 94  unknown (na_a:any)<-(getBasename:any)
    mil.line("u.getProtocol().print();");	# 95  unknown ($207:any)<-($208:str)
    pa_a := getProtocol;	# 96  unknown (pa_a:any)<-(getProtocol:any)
    mil.line("u.getUser().print();");	# 97  unknown ($211:any)<-($212:str)
    ra_a := getUser;	# 98  unknown (ra_a:any)<-(getUser:any)
    mil.line("u.getDirectory().print();");	# 99  unknown ($215:any)<-($216:str)
    ta_a := getDirectory;	# 100  unknown (ta_a:any)<-(getDirectory:any)
    mil.line("quit();");	# 101  unknown ($219:any)<-($220:str)
    va_a := clients.quit();	# 102  unknown (va_a:any)
end main;	# 103  unknown 

# 14:17:59 >  
# 14:17:59 >  Done.
# 14:17:59 >  

