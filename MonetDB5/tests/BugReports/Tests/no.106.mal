# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#var docid := new( void, oid );
	docid := new(:void,:oid);
#var tid := new( void, str );
	tid := new(:void,:str);
#docid := w.mark(nil).reverse();
	w:= mil.take("w");
	nil:= mil.take("nil");
	ca_a := mark(w,nil);
	docid := reverse(ca_a,);
#docid.print();
	da_a := print(docid,);
#tid := w.reverse().mark(nil).reverse();
	ea_a := reverse(w,);
	fa_a := mark(ea_a,nil);
	tid := reverse(fa_a,);
#tid.print();
	ga_a := print(tid,);
#docid.seqbase( 1000@0 );
	ha_a := bat.setSequenceBase(docid,1000@0);
#docid.print();
	ia_a := print(docid,);
#tid.seqbase( 1000@0 );
	ja_a := bat.setSequenceBase(tid,1000@0);
#tid.print();
	ka_a := print(tid,);
#CTgroup( docid, tid ).print();
	la_a := group(docid,tid);
	ma_a := print(la_a,);
#quit();
	na_a := quit();
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
#Identifer 'CTgroup' mapped to 'group'
