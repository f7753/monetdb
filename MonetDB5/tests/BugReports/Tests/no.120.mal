# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#var a := new(int,int);
	a := new(:int,:int);
#a.insert(1,2);
	ca_a := insert(a,1,2);
#a.insert(2,3);
	da_a := insert(a,2,3);
#a.insert(3,4);
	ea_a := insert(a,3,4);
#a.seqbase(newoid(a.count()));
	fa_a := count(a,);
	ga_a := newoid(fa_a);
	ha_a := bat.setSequenceBase(a,ga_a);
#[oid](a.mark(nil)).print();
	nil:= mil.take("nil");
	ia_a := mark(a,nil);
	ja_a := multiplex.tactics("oid",ia_a);
	ka_a := print(ja_a,);
#quit();
	la_a := quit();
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
