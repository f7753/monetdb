stdout of test 'no.125` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.125 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.125.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.125.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         125
# >Category:       Module_math
# >Synopsis:       (almost) all functions of mmath return strange results on IRIX.
# >Confidential:   no
# >Severity:       serious
# >Priority:       medium
# >Responsible:    niels
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Fri Feb 27 16:36:42 1998
# >Originator:     manegold
# >Organization:
# >Release:        
# >Environment:
# IRIX
# >Description:
# (almost) all functions of mmath return strange results on IRIX.             
# 
# test script and output for both GNU=ON & GNU=OFF follow.
# 
function Admin.main():int;	# 0  (main:int)
    mil.line("# >Number:         125\n");	# 1 MILline ($1:void)<-($2:str)
    mil.line("# >Category:       Module_math\n");	# 2 MILline ($3:void)<-($4:str)
    mil.line("# >Synopsis:       (almost) all functions of mmath return strange results on IRIX.\n");	# 3 MILline ($5:void)<-($6:str)
    mil.line("# >Confidential:   no\n");	# 4 MILline ($7:void)<-($8:str)
    mil.line("# >Severity:       serious\n");	# 5 MILline ($9:void)<-($10:str)
    mil.line("# >Priority:       medium\n");	# 6 MILline ($11:void)<-($12:str)
    mil.line("# >Responsible:    niels\n");	# 7 MILline ($13:void)<-($14:str)
    mil.line("# >State:          open\n");	# 8 MILline ($15:void)<-($16:str)
    mil.line("# >Class:          sw-bug\n");	# 9 MILline ($17:void)<-($18:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Arrival-Date:   Fri Feb 27 16:36:42 1998\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Originator:     manegold\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Organization:\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# >Release:        \n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Environment:\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# IRIX\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# >Description:\n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# (almost) all functions of mmath return strange results on IRIX.             \n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# \n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# test script and output for both GNU=ON & GNU=OFF follow.\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# \n");	# 21 MILline ($41:void)<-($38:str)
    mil.line("#         stefan\n");	# 22 MILline ($42:void)<-($43:str)
    mil.line("# \n");	# 23 MILline ($44:void)<-($38:str)
    mil.line("# ================================================================================\n");	# 24 MILline ($45:void)<-($46:str)
    mil.line("# test script (also available as 'testing/plain/mmath2/script.mil')\n");	# 25 MILline ($47:void)<-($48:str)
    mil.line("# --------------------------------------------------------------------------------\n");	# 26 MILline ($49:void)<-($50:str)
    mil.line("# setoid(oid(20000000));\n");	# 27 MILline ($51:void)<-($52:str)
    mil.line("# module(mmath);\n");	# 28 MILline ($53:void)<-($54:str)
    mil.line("# sin(dbl(0)).print();\n");	# 29 MILline ($55:void)<-($56:str)
    mil.line("# sin(M_PI_4).print();\n");	# 30 MILline ($57:void)<-($58:str)
    mil.line("# sin(M_PI_2).print();\n");	# 31 MILline ($59:void)<-($60:str)
    mil.line("# sin(M_PI).print();\n");	# 32 MILline ($61:void)<-($62:str)
    mil.line("# sin(3*M_PI_2).print();\n");	# 33 MILline ($63:void)<-($64:str)
    mil.line("# cos(dbl(0)).print();\n");	# 34 MILline ($65:void)<-($66:str)
    mil.line("# cos(M_PI_4).print();\n");	# 35 MILline ($67:void)<-($68:str)
    mil.line("# cos(M_PI_2).print();\n");	# 36 MILline ($69:void)<-($70:str)
    mil.line("# cos(M_PI).print();\n");	# 37 MILline ($71:void)<-($72:str)
    mil.line("# cos(3*M_PI_2).print();\n");	# 38 MILline ($73:void)<-($74:str)
    mil.line("# tan(dbl(0)).print();\n");	# 39 MILline ($75:void)<-($76:str)
    mil.line("# tan(M_PI_4).print();\n");	# 40 MILline ($77:void)<-($78:str)
    mil.line("# tan(M_PI_2).print();\n");	# 41 MILline ($79:void)<-($80:str)
    mil.line("# tan(M_PI).print();\n");	# 42 MILline ($81:void)<-($82:str)
    mil.line("# tan(3*M_PI_2).print();\n");	# 43 MILline ($83:void)<-($84:str)
    mil.line("# asin(dbl(-1)).print();\n");	# 44 MILline ($85:void)<-($86:str)
    mil.line("# asin(dbl(-0.5)).print();\n");	# 45 MILline ($87:void)<-($88:str)
    mil.line("# asin(dbl(0)).print();\n");	# 46 MILline ($89:void)<-($90:str)
    mil.line("# asin(dbl(0.5)).print();\n");	# 47 MILline ($91:void)<-($92:str)
    mil.line("# asin(dbl(1)).print();\n");	# 48 MILline ($93:void)<-($94:str)
    mil.line("# acos(dbl(-1)).print();\n");	# 49 MILline ($95:void)<-($96:str)
    mil.line("# acos(dbl(-0.5)).print();\n");	# 50 MILline ($97:void)<-($98:str)
    mil.line("# acos(dbl(0)).print();\n");	# 51 MILline ($99:void)<-($100:str)
    mil.line("# acos(dbl(0.5)).print();\n");	# 52 MILline ($101:void)<-($102:str)
    mil.line("# acos(dbl(1)).print();\n");	# 53 MILline ($103:void)<-($104:str)
    mil.line("# atan(dbl(-1)).print();\n");	# 54 MILline ($105:void)<-($106:str)
    mil.line("# atan(dbl(-0.5)).print();\n");	# 55 MILline ($107:void)<-($108:str)
    mil.line("# atan(dbl(0)).print();\n");	# 56 MILline ($109:void)<-($110:str)
    mil.line("# atan(dbl(0.5)).print();\n");	# 57 MILline ($111:void)<-($112:str)
    mil.line("# atan(dbl(1)).print();\n");	# 58 MILline ($113:void)<-($114:str)
    mil.line("# \n");	# 59 MILline ($115:void)<-($116:str)
    mil.line("# asin(sin(M_PI)).print();\n");	# 60 MILline ($117:void)<-($118:str)
    mil.line("# acos(cos(M_PI)).print();\n");	# 61 MILline ($119:void)<-($120:str)
    mil.line("# atan(tan(M_PI_2)).print();\n");	# 62 MILline ($121:void)<-($122:str)
    mil.line("# atan(tan(M_PI_4)).print();\n");	# 63 MILline ($123:void)<-($124:str)
    mil.line("# sqrt(pow(dbl(2),dbl(2))).print();\n");	# 64 MILline ($125:void)<-($126:str)
    mil.line("# \n");	# 65 MILline ($127:void)<-($116:str)
    mil.line("# exp(dbl(10)).print(); \n");	# 66 MILline ($128:void)<-($129:str)
    mil.line("# log(dbl(10)).print();\n");	# 67 MILline ($130:void)<-($131:str)
    mil.line("# log10(dbl(10)).print();\n");	# 68 MILline ($132:void)<-($133:str)
    mil.line("# \n");	# 69 MILline ($134:void)<-($116:str)
    mil.line("# ceil(dbl(1.2)).print();\n");	# 70 MILline ($135:void)<-($136:str)
    mil.line("# fabs(dbl(1.2)).print();\n");	# 71 MILline ($137:void)<-($138:str)
    mil.line("# floor(dbl(1.2)).print();\n");	# 72 MILline ($139:void)<-($140:str)
    mil.line("# fmod(dbl(15.2),dbl(2.5)).print();\n");	# 73 MILline ($141:void)<-($142:str)
    mil.line("# --------------------------------------------------------------------------------\n");	# 74 MILline ($143:void)<-($144:str)
    mil.line("# ================================================================================\n");	# 75 MILline ($145:void)<-($146:str)
    mil.line("# differences between SunOS5.5 and IRIX6.2                  compiled with GNU=ON\n");	# 76 MILline ($147:void)<-($148:str)
    mil.line("# --------------------------------------------------------------------------------\n");	# 77 MILline ($149:void)<-($144:str)
    mil.line("# --- .SunOS5.5/plain/mmath2/111.out      Fri Feb 27 16:00:24 1998\n");	# 78 MILline ($150:void)<-($151:str)
    mil.line("# +++ .IRIX6.2/plain/mmath2/111.out       Fri Feb 27 16:00:01 1998\n");	# 79 MILline ($152:void)<-($153:str)
    mil.line("# @@ -1,3 +1,3 @@\n");	# 80 MILline ($154:void)<-($155:str)
    mil.line("#  Statistics about the output of plain/mmath2:\n");	# 81 MILline ($156:void)<-($157:str)
    mil.line("# -  143 lines,  385 words,  3505 chars\n");	# 82 MILline ($158:void)<-($159:str)
    mil.line("# +  143 lines,  385 words,  3751 chars\n");	# 83 MILline ($160:void)<-($161:str)
    mil.line("# \n");	# 84 MILline ($162:void)<-($163:str)
    mil.line("# @@ -8,3 +8,3 @@\n");	# 85 MILline ($164:void)<-($165:str)
    mil.line("#  Mcreatedb -db plain\n");	# 86 MILline ($166:void)<-($167:str)
    mil.line("# -Mcreatedb: processing database 'plain' in /ufs/manegold/programming/Monet/testing/.SunOS5.5/dbfarm/plain.\n");	# 87 MILline ($168:void)<-($169:str)
    mil.line("# +Mcreatedb: processing database 'plain' in /ufs/manegold/programming/Monet/testing/.IRIX6.2/dbfarm/plain.\n");	# 88 MILline ($170:void)<-($171:str)
    mil.line("#  Mcreatedb: calling 'Mserver -db plain' for the first time..\n");	# 89 MILline ($172:void)<-($173:str)
    mil.line("# @@ -68,3 +68,3 @@\n");	# 90 MILline ($174:void)<-($175:str)
    mil.line("#  sin(M_PI).print();\n");	# 91 MILline ($176:void)<-($177:str)
    mil.line("# -[ -0.000000 ]\n");	# 92 MILline ($178:void)<-($179:str)
    mil.line("# +[ 0.000000 ]\n");	# 93 MILline ($180:void)<-($181:str)
    mil.line("#  sin(3*M_PI_2).print();\n");	# 94 MILline ($182:void)<-($183:str)
    mil.line("# @@ -76,3 +76,3 @@\n");	# 95 MILline ($184:void)<-($185:str)
    mil.line("#  cos(M_PI_2).print();\n");	# 96 MILline ($186:void)<-($187:str)
    mil.line("# -[ -0.000000 ]\n");	# 97 MILline ($188:void)<-($179:str)
    mil.line("# +[ 0.000000 ]\n");	# 98 MILline ($189:void)<-($181:str)
    mil.line("#  cos(M_PI).print();\n");	# 99 MILline ($190:void)<-($191:str)
    mil.line("# @@ -82,62 +82,62 @@\n");	# 100 MILline ($192:void)<-($193:str)
    mil.line("#  tan(dbl(0)).print();\n");	# 101 MILline ($194:void)<-($195:str)
    mil.line("# -[ 0.000000 ]\n");	# 102 MILline ($196:void)<-($197:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 103 MILline ($198:void)<-($199:str)
    mil.line("#  tan(M_PI_4).print();\n");	# 104 MILline ($200:void)<-($201:str)
    mil.line("# -[ 1.000000 ]\n");	# 105 MILline ($202:void)<-($203:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 106 MILline ($204:void)<-($199:str)
    mil.line("#  tan(M_PI_2).print();\n");	# 107 MILline ($205:void)<-($206:str)
    mil.line("# -[ -22877332.428856 ]\n");	# 108 MILline ($207:void)<-($208:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 109 MILline ($209:void)<-($199:str)
    mil.line("#  tan(M_PI).print();\n");	# 110 MILline ($210:void)<-($211:str)
    mil.line("# -[ 0.000000 ]\n");	# 111 MILline ($212:void)<-($197:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 112 MILline ($213:void)<-($199:str)
    mil.line("#  tan(3*M_PI_2).print();\n");	# 113 MILline ($214:void)<-($215:str)
    mil.line("# -[ -7625777.476285 ]\n");	# 114 MILline ($216:void)<-($217:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 115 MILline ($218:void)<-($199:str)
    mil.line("#  asin(dbl(-1)).print();\n");	# 116 MILline ($219:void)<-($220:str)
    mil.line("# -[ -1.570796 ]\n");	# 117 MILline ($221:void)<-($222:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 118 MILline ($223:void)<-($199:str)
    mil.line("#  asin(dbl(-0.5)).print();\n");	# 119 MILline ($224:void)<-($225:str)
    mil.line("# -[ -0.523599 ]\n");	# 120 MILline ($226:void)<-($227:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 121 MILline ($228:void)<-($199:str)
    mil.line("#  asin(dbl(0)).print();\n");	# 122 MILline ($229:void)<-($230:str)
    mil.line("# -[ 0.000000 ]\n");	# 123 MILline ($231:void)<-($232:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 124 MILline ($233:void)<-($234:str)
    mil.line("#  asin(dbl(0.5)).print();\n");	# 125 MILline ($235:void)<-($236:str)
    mil.line("# -[ 0.523599 ]\n");	# 126 MILline ($237:void)<-($238:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 127 MILline ($239:void)<-($234:str)
    mil.line("#  asin(dbl(1)).print();\n");	# 128 MILline ($240:void)<-($241:str)
    mil.line("# -[ 1.570796 ]\n");	# 129 MILline ($242:void)<-($243:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 130 MILline ($244:void)<-($234:str)
    mil.line("#  acos(dbl(-1)).print();\n");	# 131 MILline ($245:void)<-($246:str)
    mil.line("# -[ 3.141593 ]\n");	# 132 MILline ($247:void)<-($248:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 133 MILline ($249:void)<-($234:str)
    mil.line("#  acos(dbl(-0.5)).print();\n");	# 134 MILline ($250:void)<-($251:str)
    mil.line("# -[ 2.094395 ]\n");	# 135 MILline ($252:void)<-($253:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 136 MILline ($254:void)<-($234:str)
    mil.line("#  acos(dbl(0)).print();\n");	# 137 MILline ($255:void)<-($256:str)
    mil.line("# -[ 1.570796 ]\n");	# 138 MILline ($257:void)<-($243:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 139 MILline ($258:void)<-($234:str)
    mil.line("#  acos(dbl(0.5)).print();\n");	# 140 MILline ($259:void)<-($260:str)
    mil.line("# -[ 1.047198 ]\n");	# 141 MILline ($261:void)<-($262:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 142 MILline ($263:void)<-($234:str)
    mil.line("#  acos(dbl(1)).print();\n");	# 143 MILline ($264:void)<-($265:str)
    mil.line("# -[ 0.000000 ]\n");	# 144 MILline ($266:void)<-($267:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 145 MILline ($268:void)<-($269:str)
    mil.line("#  atan(tan(M_PI_2)).print();\n");	# 146 MILline ($270:void)<-($271:str)
    mil.line("# -[ -1.570796 ]\n");	# 147 MILline ($272:void)<-($273:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 148 MILline ($274:void)<-($269:str)
    mil.line("#  atan(tan(M_PI_4)).print();\n");	# 149 MILline ($275:void)<-($276:str)
    mil.line("# -[ 0.785398 ]\n");	# 150 MILline ($277:void)<-($278:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 151 MILline ($279:void)<-($269:str)
    mil.line("#  sqrt(pow(dbl(2),dbl(2))).print();\n");	# 152 MILline ($280:void)<-($281:str)
    mil.line("# -[ 2.000000 ]\n");	# 153 MILline ($282:void)<-($283:str)
    mil.line("# +[ 45610.384256 ]\n");	# 154 MILline ($284:void)<-($285:str)
    mil.line("# \n");	# 155 MILline ($286:void)<-($287:str)
    mil.line("#  exp(dbl(10)).print();\n");	# 156 MILline ($288:void)<-($289:str)
    mil.line("# -[ 22026.465795 ]\n");	# 157 MILline ($290:void)<-($291:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 158 MILline ($292:void)<-($269:str)
    mil.line("#  log(dbl(10)).print();\n");	# 159 MILline ($293:void)<-($294:str)
    mil.line("# -[ 2.302585 ]\n");	# 160 MILline ($295:void)<-($296:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 161 MILline ($297:void)<-($269:str)
    mil.line("#  log10(dbl(10)).print();\n");	# 162 MILline ($298:void)<-($299:str)
    mil.line("# -[ 1.000000 ]\n");	# 163 MILline ($300:void)<-($301:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 164 MILline ($302:void)<-($303:str)
    mil.line("# \n");	# 165 MILline ($304:void)<-($287:str)
    mil.line("#  ceil(dbl(1.2)).print();\n");	# 166 MILline ($305:void)<-($306:str)
    mil.line("# -[ 2.000000 ]\n");	# 167 MILline ($307:void)<-($283:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 168 MILline ($308:void)<-($303:str)
    mil.line("#  fabs(dbl(1.2)).print();\n");	# 169 MILline ($309:void)<-($310:str)
    mil.line("# @@ -145,4 +145,4 @@\n");	# 170 MILline ($311:void)<-($312:str)
    mil.line("#  floor(dbl(1.2)).print();\n");	# 171 MILline ($313:void)<-($314:str)
    mil.line("# -[ 1.000000 ]\n");	# 172 MILline ($315:void)<-($301:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 173 MILline ($316:void)<-($303:str)
    mil.line("#  fmod(dbl(15.2),dbl(2.5)).print();\n");	# 174 MILline ($317:void)<-($318:str)
    mil.line("# -[ 0.200000 ]\n");	# 175 MILline ($319:void)<-($320:str)
    mil.line("# +[ 2080315712.000000 ]\n");	# 176 MILline ($321:void)<-($303:str)
    mil.line("# --------------------------------------------------------------------------------\n");	# 177 MILline ($322:void)<-($323:str)
    mil.line("# ================================================================================\n");	# 178 MILline ($324:void)<-($325:str)
    mil.line("# differences between SunOS5.5 and IRIX6.2                  compiled with GNU=OFF\n");	# 179 MILline ($326:void)<-($327:str)
    mil.line("# --------------------------------------------------------------------------------\n");	# 180 MILline ($328:void)<-($323:str)
    mil.line("# --- plain/mmath2/stable.out     Fri Feb 27 16:11:45 1998\n");	# 181 MILline ($329:void)<-($330:str)
    mil.line("# +++ .IRIX6.2/plain/mmath2/1998.02.27,16:51:37.out       Fri Feb 27 17:23:28 1998\n");	# 182 MILline ($331:void)<-($332:str)
    mil.line("# @@ -1,3 +1,3 @@\n");	# 183 MILline ($333:void)<-($334:str)
    mil.line("#  Statistics about the output of plain/mmath2:\n");	# 184 MILline ($335:void)<-($336:str)
    mil.line("# -  143 lines,  385 words,  3505 chars\n");	# 185 MILline ($337:void)<-($338:str)
    mil.line("# +  138 lines,  360 words,  3229 chars\n");	# 186 MILline ($339:void)<-($340:str)
    mil.line("#  \n");	# 187 MILline ($341:void)<-($342:str)
    mil.line("# @@ -7,7 +7,2 @@\n");	# 188 MILline ($343:void)<-($344:str)
    mil.line("#  \n");	# 189 MILline ($345:void)<-($342:str)
    mil.line("# -Mcreatedb -db plain\n");	# 190 MILline ($346:void)<-($347:str)
    mil.line("# -Mcreatedb: processing database 'plain' in /ufs/manegold/programming/Monet/testing/.SunOS5.5/dbfarm/plain.\n");	# 191 MILline ($348:void)<-($349:str)
    mil.line("# -Mcreatedb: calling 'Mserver -db plain' for the first time..\n");	# 192 MILline ($350:void)<-($351:str)
    mil.line("# -Mcreatedb: database 'plain' has been initialized succesfully!\n");	# 193 MILline ($352:void)<-($353:str)
    mil.line("# -\n");	# 194 MILline ($354:void)<-($355:str)
    mil.line("#  Mserver -db plain  script.mil\n");	# 195 MILline ($356:void)<-($357:str)
    mil.line("# @@ -68,3 +63,3 @@\n");	# 196 MILline ($358:void)<-($359:str)
    mil.line("#  sin(M_PI).print();\n");	# 197 MILline ($360:void)<-($361:str)
    mil.line("# -[ -0.000000 ]\n");	# 198 MILline ($362:void)<-($363:str)
    mil.line("# +[ 0.000000 ]\n");	# 199 MILline ($364:void)<-($365:str)
    mil.line("#  sin(3*M_PI_2).print();\n");	# 200 MILline ($366:void)<-($367:str)
    mil.line("# @@ -76,3 +71,3 @@\n");	# 201 MILline ($368:void)<-($369:str)
    mil.line("#  cos(M_PI_2).print();\n");	# 202 MILline ($370:void)<-($371:str)
    mil.line("# -[ -0.000000 ]\n");	# 203 MILline ($372:void)<-($363:str)
    mil.line("# +[ 0.000000 ]\n");	# 204 MILline ($373:void)<-($365:str)
    mil.line("#  cos(M_PI).print();\n");	# 205 MILline ($374:void)<-($375:str)
    mil.line("# @@ -82,3 +77,3 @@\n");	# 206 MILline ($376:void)<-($377:str)
    mil.line("#  tan(dbl(0)).print();\n");	# 207 MILline ($378:void)<-($379:str)
    mil.line("# -[ 0.000000 ]\n");	# 208 MILline ($380:void)<-($381:str)
    mil.line("# +[ 1.000000 ]\n");	# 209 MILline ($382:void)<-($383:str)
    mil.line("#  tan(M_PI_4).print();\n");	# 210 MILline ($384:void)<-($385:str)
    mil.line("# @@ -86,53 +81,53 @@\n");	# 211 MILline ($386:void)<-($387:str)
    mil.line("#  tan(M_PI_2).print();\n");	# 212 MILline ($388:void)<-($389:str)
    mil.line("# -[ -22877332.428856 ]\n");	# 213 MILline ($390:void)<-($391:str)
    mil.line("# +[ 1.000000 ]\n");	# 214 MILline ($392:void)<-($383:str)
    mil.line("#  tan(M_PI).print();\n");	# 215 MILline ($393:void)<-($394:str)
    mil.line("# -[ 0.000000 ]\n");	# 216 MILline ($395:void)<-($381:str)
    mil.line("# +[ 1.000000 ]\n");	# 217 MILline ($396:void)<-($383:str)
    mil.line("#  tan(3*M_PI_2).print();\n");	# 218 MILline ($397:void)<-($398:str)
    mil.line("# -[ -7625777.476285 ]\n");	# 219 MILline ($399:void)<-($400:str)
    mil.line("# +[ 1.000000 ]\n");	# 220 MILline ($401:void)<-($383:str)
    mil.line("#  asin(dbl(-1)).print();\n");	# 221 MILline ($402:void)<-($403:str)
    mil.line("# -[ -1.570796 ]\n");	# 222 MILline ($404:void)<-($405:str)
    mil.line("# +[ 1.000000 ]\n");	# 223 MILline ($406:void)<-($383:str)
    mil.line("#  asin(dbl(-0.5)).print();\n");	# 224 MILline ($407:void)<-($408:str)
    mil.line("# -[ -0.523599 ]\n");	# 225 MILline ($409:void)<-($410:str)
    mil.line("# +[ 1.000000 ]\n");	# 226 MILline ($411:void)<-($383:str)
    mil.line("#  asin(dbl(0)).print();\n");	# 227 MILline ($412:void)<-($413:str)
    mil.line("# -[ 0.000000 ]\n");	# 228 MILline ($414:void)<-($415:str)
    mil.line("# +[ 1.000000 ]\n");	# 229 MILline ($416:void)<-($417:str)
    mil.line("#  asin(dbl(0.5)).print();\n");	# 230 MILline ($418:void)<-($419:str)
    mil.line("# -[ 0.523599 ]\n");	# 231 MILline ($420:void)<-($421:str)
    mil.line("# +[ 1.000000 ]\n");	# 232 MILline ($422:void)<-($417:str)
    mil.line("#  asin(dbl(1)).print();\n");	# 233 MILline ($423:void)<-($424:str)
    mil.line("# -[ 1.570796 ]\n");	# 234 MILline ($425:void)<-($426:str)
    mil.line("# +[ 1.000000 ]\n");	# 235 MILline ($427:void)<-($417:str)
    mil.line("#  acos(dbl(-1)).print();\n");	# 236 MILline ($428:void)<-($429:str)
    mil.line("# -[ 3.141593 ]\n");	# 237 MILline ($430:void)<-($431:str)
    mil.line("# +[ 1.000000 ]\n");	# 238 MILline ($432:void)<-($417:str)
    mil.line("#  acos(dbl(-0.5)).print();\n");	# 239 MILline ($433:void)<-($434:str)
    mil.line("# -[ 2.094395 ]\n");	# 240 MILline ($435:void)<-($436:str)
    mil.line("# +[ 1.000000 ]\n");	# 241 MILline ($437:void)<-($417:str)
    mil.line("#  acos(dbl(0)).print();\n");	# 242 MILline ($438:void)<-($439:str)
    mil.line("# -[ 1.570796 ]\n");	# 243 MILline ($440:void)<-($426:str)
    mil.line("# +[ 1.000000 ]\n");	# 244 MILline ($441:void)<-($417:str)
    mil.line("#  acos(dbl(0.5)).print();\n");	# 245 MILline ($442:void)<-($443:str)
    mil.line("# -[ 1.047198 ]\n");	# 246 MILline ($444:void)<-($445:str)
    mil.line("# +[ 1.000000 ]\n");	# 247 MILline ($446:void)<-($417:str)
    mil.line("#  acos(dbl(1)).print();\n");	# 248 MILline ($447:void)<-($448:str)
    mil.line("# -[ 0.000000 ]\n");	# 249 MILline ($449:void)<-($450:str)
    mil.line("# +[ 1.000000 ]\n");	# 250 MILline ($451:void)<-($452:str)
    mil.line("#  atan(dbl(-1)).print();\n");	# 251 MILline ($453:void)<-($454:str)
    mil.line("# -[ -0.785398 ]\n");	# 252 MILline ($455:void)<-($456:str)
    mil.line("# +[ 1.000000 ]\n");	# 253 MILline ($457:void)<-($452:str)
    mil.line("#  atan(dbl(-0.5)).print();\n");	# 254 MILline ($458:void)<-($459:str)
    mil.line("# -[ -0.463648 ]\n");	# 255 MILline ($460:void)<-($461:str)
    mil.line("# +[ 1.000000 ]\n");	# 256 MILline ($462:void)<-($452:str)
    mil.line("#  atan(dbl(0)).print();\n");	# 257 MILline ($463:void)<-($464:str)
    mil.line("# -[ 0.000000 ]\n");	# 258 MILline ($465:void)<-($450:str)
    mil.line("# +[ 1.000000 ]\n");	# 259 MILline ($466:void)<-($452:str)
    mil.line("#  atan(dbl(0.5)).print();\n");	# 260 MILline ($467:void)<-($468:str)
    mil.line("# -[ 0.463648 ]\n");	# 261 MILline ($469:void)<-($470:str)
    mil.line("# +[ 1.000000 ]\n");	# 262 MILline ($471:void)<-($452:str)
    mil.line("#  atan(dbl(1)).print();\n");	# 263 MILline ($472:void)<-($473:str)
    mil.line("# -[ 0.785398 ]\n");	# 264 MILline ($474:void)<-($475:str)
    mil.line("# +[ 1.000000 ]\n");	# 265 MILline ($476:void)<-($452:str)
    mil.line("#  \n");	# 266 MILline ($477:void)<-($478:str)
    mil.line("#  asin(sin(M_PI)).print();\n");	# 267 MILline ($479:void)<-($480:str)
    mil.line("# -[ -0.000000 ]\n");	# 268 MILline ($481:void)<-($482:str)
    mil.line("# +[ 1.000000 ]\n");	# 269 MILline ($483:void)<-($452:str)
    mil.line("#  acos(cos(M_PI)).print();\n");	# 270 MILline ($484:void)<-($485:str)
    mil.line("# -[ 3.141593 ]\n");	# 271 MILline ($486:void)<-($487:str)
    mil.line("# +[ 1.000000 ]\n");	# 272 MILline ($488:void)<-($489:str)
    mil.line("#  atan(tan(M_PI_2)).print();\n");	# 273 MILline ($490:void)<-($491:str)
    mil.line("# -[ -1.570796 ]\n");	# 274 MILline ($492:void)<-($493:str)
    mil.line("# +[ 1.000000 ]\n");	# 275 MILline ($494:void)<-($489:str)
    mil.line("#  atan(tan(M_PI_4)).print();\n");	# 276 MILline ($495:void)<-($496:str)
    mil.line("# -[ 0.785398 ]\n");	# 277 MILline ($497:void)<-($475:str)
    mil.line("# +[ 1.000000 ]\n");	# 278 MILline ($498:void)<-($489:str)
    mil.line("#  sqrt(pow(dbl(2),dbl(2))).print();\n");	# 279 MILline ($499:void)<-($500:str)
    mil.line("# -[ 2.000000 ]\n");	# 280 MILline ($501:void)<-($502:str)
    mil.line("# +[ 1.000000 ]\n");	# 281 MILline ($503:void)<-($489:str)
    mil.line("#  \n");	# 282 MILline ($504:void)<-($478:str)
    mil.line("#  exp(dbl(10)).print();\n");	# 283 MILline ($505:void)<-($506:str)
    mil.line("# -[ 22026.465795 ]\n");	# 284 MILline ($507:void)<-($508:str)
    mil.line("# +[ 1.000000 ]\n");	# 285 MILline ($509:void)<-($489:str)
    mil.line("#  log(dbl(10)).print();\n");	# 286 MILline ($510:void)<-($511:str)
    mil.line("# -[ 2.302585 ]\n");	# 287 MILline ($512:void)<-($513:str)
    mil.line("# +[ 1.000000 ]\n");	# 288 MILline ($514:void)<-($489:str)
    mil.line("#  log10(dbl(10)).print();\n");	# 289 MILline ($515:void)<-($516:str)
    mil.line("# @@ -141,3 +136,3 @@\n");	# 290 MILline ($517:void)<-($518:str)
    mil.line("#  ceil(dbl(1.2)).print();\n");	# 291 MILline ($519:void)<-($520:str)
    mil.line("# -[ 2.000000 ]\n");	# 292 MILline ($521:void)<-($502:str)
    mil.line("# +[ 1.000000 ]\n");	# 293 MILline ($522:void)<-($523:str)
    mil.line("#  fabs(dbl(1.2)).print();\n");	# 294 MILline ($524:void)<-($525:str)
    mil.line("# @@ -147,2 +142,2 @@\n");	# 295 MILline ($526:void)<-($527:str)
    mil.line("#  fmod(dbl(15.2),dbl(2.5)).print();\n");	# 296 MILline ($528:void)<-($529:str)
    mil.line("# -[ 0.200000 ]\n");	# 297 MILline ($530:void)<-($531:str)
    mil.line("# +[ 1.000000 ]\n");	# 298 MILline ($532:void)<-($523:str)
    mil.line("# ================================================================================>How-To-Repeat:\n");	# 299 MILline ($533:void)<-($534:str)
    mil.line("setoid(oid(20000000));");	# 300 MILline ($535:void)<-($536:str)
    aa_a := calc.oid(20000000);	# 301 CALCint2oid (aa_a:oid)<-($538:int)
    ba_a := calc.setoid(aa_a);	# 302 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("sin(dbl(0)).print();");	# 303 MILline ($540:void)<-($541:str)
    ca_a := calc.dbl(0);	# 304 CALCint2dbl (ca_a:dbl)<-($543:int)
    da_a := mmath.sin(ca_a);	# 305 MATHunary_SINdbl (da_a:dbl)<-(ca_a:dbl)
    ea_a := io.print(da_a);	# 306 IOprint_val (ea_a:int)<-(da_a:dbl)
    mil.line("sin(M_PI_4).print();");	# 307 MILline ($546:void)<-($547:str)
    M_PI_4 := mil.take("M_PI_4");	# 308 MILtake (M_PI_4:dbl)<-($549:str)
    fa_a := mmath.sin(M_PI_4);	# 309 MATHunary_SINdbl (fa_a:dbl)<-(M_PI_4:dbl)
    ga_a := io.print(fa_a);	# 310 IOprint_val (ga_a:int)<-(fa_a:dbl)
    mil.line("sin(M_PI_2).print();");	# 311 MILline ($552:void)<-($553:str)
    M_PI_2 := mil.take("M_PI_2");	# 312 MILtake (M_PI_2:dbl)<-($555:str)
    ha_a := mmath.sin(M_PI_2);	# 313 MATHunary_SINdbl (ha_a:dbl)<-(M_PI_2:dbl)
    ia_a := io.print(ha_a);	# 314 IOprint_val (ia_a:int)<-(ha_a:dbl)
    mil.line("sin(M_PI).print();");	# 315 MILline ($558:void)<-($559:str)
    M_PI := mil.take("M_PI");	# 316 MILtake (M_PI:dbl)<-($561:str)
    ja_a := mmath.sin(M_PI);	# 317 MATHunary_SINdbl (ja_a:dbl)<-(M_PI:dbl)
    ka_a := io.print(ja_a);	# 318 IOprint_val (ka_a:int)<-(ja_a:dbl)
    mil.line("sin(3*M_PI_2).print();");	# 319 MILline ($564:void)<-($565:str)
    la_a := calc.*(3,M_PI_2);	# 320 CALCbinaryMULintdbl (la_a:dbl)<-($567:int)(M_PI_2:dbl)
    ma_a := mmath.sin(la_a);	# 321 MATHunary_SINdbl (ma_a:dbl)<-(la_a:dbl)
    na_a := io.print(ma_a);	# 322 IOprint_val (na_a:int)<-(ma_a:dbl)
    mil.line("cos(dbl(0)).print();");	# 323 MILline ($570:void)<-($571:str)
    oa_a := calc.dbl(0);	# 324 CALCint2dbl (oa_a:dbl)<-($543:int)
    pa_a := mmath.cos(oa_a);	# 325 MATHunary_COSdbl (pa_a:dbl)<-(oa_a:dbl)
    qa_a := io.print(pa_a);	# 326 IOprint_val (qa_a:int)<-(pa_a:dbl)
    mil.line("cos(M_PI_4).print();");	# 327 MILline ($575:void)<-($576:str)
    ra_a := mmath.cos(M_PI_4);	# 328 MATHunary_COSdbl (ra_a:dbl)<-(M_PI_4:dbl)
    sa_a := io.print(ra_a);	# 329 IOprint_val (sa_a:int)<-(ra_a:dbl)
    mil.line("cos(M_PI_2).print();");	# 330 MILline ($579:void)<-($580:str)
    ta_a := mmath.cos(M_PI_2);	# 331 MATHunary_COSdbl (ta_a:dbl)<-(M_PI_2:dbl)
    ua_a := io.print(ta_a);	# 332 IOprint_val (ua_a:int)<-(ta_a:dbl)
    mil.line("cos(M_PI).print();");	# 333 MILline ($583:void)<-($584:str)
    va_a := mmath.cos(M_PI);	# 334 MATHunary_COSdbl (va_a:dbl)<-(M_PI:dbl)
    wa_a := io.print(va_a);	# 335 IOprint_val (wa_a:int)<-(va_a:dbl)
    mil.line("cos(3*M_PI_2).print();");	# 336 MILline ($587:void)<-($588:str)
    xa_a := calc.*(3,M_PI_2);	# 337 CALCbinaryMULintdbl (xa_a:dbl)<-($567:int)(M_PI_2:dbl)
    ya_a := mmath.cos(xa_a);	# 338 MATHunary_COSdbl (ya_a:dbl)<-(xa_a:dbl)
    ab_a := io.print(ya_a);	# 339 IOprint_val (ab_a:int)<-(ya_a:dbl)
    mil.line("tan(dbl(0)).print();");	# 340 MILline ($592:void)<-($593:str)
    bb_a := calc.dbl(0);	# 341 CALCint2dbl (bb_a:dbl)<-($595:int)
    cb_a := mmath.tan(bb_a);	# 342 MATHunary_TANdbl (cb_a:dbl)<-(bb_a:dbl)
    db_a := io.print(cb_a);	# 343 IOprint_val (db_a:int)<-(cb_a:dbl)
    mil.line("tan(M_PI_4).print();");	# 344 MILline ($598:void)<-($599:str)
    eb_a := mmath.tan(M_PI_4);	# 345 MATHunary_TANdbl (eb_a:dbl)<-(M_PI_4:dbl)
    fb_a := io.print(eb_a);	# 346 IOprint_val (fb_a:int)<-(eb_a:dbl)
    mil.line("tan(M_PI_2).print();");	# 347 MILline ($602:void)<-($603:str)
    gb_a := mmath.tan(M_PI_2);	# 348 MATHunary_TANdbl (gb_a:dbl)<-(M_PI_2:dbl)
    hb_a := io.print(gb_a);	# 349 IOprint_val (hb_a:int)<-(gb_a:dbl)
    mil.line("tan(M_PI).print();");	# 350 MILline ($606:void)<-($607:str)
    ib_a := mmath.tan(M_PI);	# 351 MATHunary_TANdbl (ib_a:dbl)<-(M_PI:dbl)
    jb_a := io.print(ib_a);	# 352 IOprint_val (jb_a:int)<-(ib_a:dbl)
    mil.line("tan(3*M_PI_2).print();");	# 353 MILline ($610:void)<-($611:str)
    kb_a := calc.*(3,M_PI_2);	# 354 CALCbinaryMULintdbl (kb_a:dbl)<-($613:int)(M_PI_2:dbl)
    lb_a := mmath.tan(kb_a);	# 355 MATHunary_TANdbl (lb_a:dbl)<-(kb_a:dbl)
    mb_a := io.print(lb_a);	# 356 IOprint_val (mb_a:int)<-(lb_a:dbl)
    mil.line("asin(dbl(-1)).print();");	# 357 MILline ($616:void)<-($617:str)
    nb_a := calc.dbl(-1);	# 358 CALCint2dbl (nb_a:dbl)<-($619:int)
    ob_a := mmath.asin(nb_a);	# 359 MATHunary_ASINdbl (ob_a:dbl)<-(nb_a:dbl)
    pb_a := io.print(ob_a);	# 360 IOprint_val (pb_a:int)<-(ob_a:dbl)
    mil.line("asin(dbl(-0.5)).print();");	# 361 MILline ($622:void)<-($623:str)
    qb_a := calc.dbl(-0.5);	# 362 CALCflt2dbl (qb_a:dbl)<-($625:flt)
    rb_a := mmath.asin(qb_a);	# 363 MATHunary_ASINdbl (rb_a:dbl)<-(qb_a:dbl)
    sb_a := io.print(rb_a);	# 364 IOprint_val (sb_a:int)<-(rb_a:dbl)
    mil.line("asin(dbl(0)).print();");	# 365 MILline ($628:void)<-($629:str)
    tb_a := calc.dbl(0);	# 366 CALCint2dbl (tb_a:dbl)<-($631:int)
    ub_a := mmath.asin(tb_a);	# 367 MATHunary_ASINdbl (ub_a:dbl)<-(tb_a:dbl)
    vb_a := io.print(ub_a);	# 368 IOprint_val (vb_a:int)<-(ub_a:dbl)
    mil.line("asin(dbl(0.5)).print();");	# 369 MILline ($634:void)<-($635:str)
    wb_a := calc.dbl(0.5);	# 370 CALCflt2dbl (wb_a:dbl)<-($637:flt)
    xb_a := mmath.asin(wb_a);	# 371 MATHunary_ASINdbl (xb_a:dbl)<-(wb_a:dbl)
    yb_a := io.print(xb_a);	# 372 IOprint_val (yb_a:int)<-(xb_a:dbl)
    mil.line("asin(dbl(1)).print();");	# 373 MILline ($640:void)<-($641:str)
    ac_a := calc.dbl(1);	# 374 CALCint2dbl (ac_a:dbl)<-($643:int)
    bc_a := mmath.asin(ac_a);	# 375 MATHunary_ASINdbl (bc_a:dbl)<-(ac_a:dbl)
    cc_a := io.print(bc_a);	# 376 IOprint_val (cc_a:int)<-(bc_a:dbl)
    mil.line("acos(dbl(-1)).print();");	# 377 MILline ($646:void)<-($647:str)
    dc_a := calc.dbl(-1);	# 378 CALCint2dbl (dc_a:dbl)<-($619:int)
    ec_a := mmath.acos(dc_a);	# 379 MATHunary_ACOSdbl (ec_a:dbl)<-(dc_a:dbl)
    fc_a := io.print(ec_a);	# 380 IOprint_val (fc_a:int)<-(ec_a:dbl)
    mil.line("acos(dbl(-0.5)).print();");	# 381 MILline ($651:void)<-($652:str)
    gc_a := calc.dbl(-0.5);	# 382 CALCflt2dbl (gc_a:dbl)<-($625:flt)
    hc_a := mmath.acos(gc_a);	# 383 MATHunary_ACOSdbl (hc_a:dbl)<-(gc_a:dbl)
    ic_a := io.print(hc_a);	# 384 IOprint_val (ic_a:int)<-(hc_a:dbl)
    mil.line("acos(dbl(0)).print();");	# 385 MILline ($656:void)<-($657:str)
    jc_a := calc.dbl(0);	# 386 CALCint2dbl (jc_a:dbl)<-($631:int)
    kc_a := mmath.acos(jc_a);	# 387 MATHunary_ACOSdbl (kc_a:dbl)<-(jc_a:dbl)
    lc_a := io.print(kc_a);	# 388 IOprint_val (lc_a:int)<-(kc_a:dbl)
    mil.line("acos(dbl(0.5)).print();");	# 389 MILline ($661:void)<-($662:str)
    mc_a := calc.dbl(0.5);	# 390 CALCflt2dbl (mc_a:dbl)<-($637:flt)
    nc_a := mmath.acos(mc_a);	# 391 MATHunary_ACOSdbl (nc_a:dbl)<-(mc_a:dbl)
    oc_a := io.print(nc_a);	# 392 IOprint_val (oc_a:int)<-(nc_a:dbl)
    mil.line("acos(dbl(1)).print();");	# 393 MILline ($666:void)<-($667:str)
    pc_a := calc.dbl(1);	# 394 CALCint2dbl (pc_a:dbl)<-($643:int)
    qc_a := mmath.acos(pc_a);	# 395 MATHunary_ACOSdbl (qc_a:dbl)<-(pc_a:dbl)
    rc_a := io.print(qc_a);	# 396 IOprint_val (rc_a:int)<-(qc_a:dbl)
    mil.line("atan(dbl(-1)).print();");	# 397 MILline ($671:void)<-($672:str)
    sc_a := calc.dbl(-1);	# 398 CALCint2dbl (sc_a:dbl)<-($674:int)
    tc_a := mmath.atan(sc_a);	# 399 MATHunary_ATANdbl (tc_a:dbl)<-(sc_a:dbl)
    uc_a := io.print(tc_a);	# 400 IOprint_val (uc_a:int)<-(tc_a:dbl)
    mil.line("atan(dbl(-0.5)).print();");	# 401 MILline ($677:void)<-($678:str)
    vc_a := calc.dbl(-0.5);	# 402 CALCflt2dbl (vc_a:dbl)<-($680:flt)
    wc_a := mmath.atan(vc_a);	# 403 MATHunary_ATANdbl (wc_a:dbl)<-(vc_a:dbl)
    xc_a := io.print(wc_a);	# 404 IOprint_val (xc_a:int)<-(wc_a:dbl)
    mil.line("atan(dbl(0)).print();");	# 405 MILline ($683:void)<-($684:str)
    yc_a := calc.dbl(0);	# 406 CALCint2dbl (yc_a:dbl)<-($686:int)
    ad_a := mmath.atan(yc_a);	# 407 MATHunary_ATANdbl (ad_a:dbl)<-(yc_a:dbl)
    bd_a := io.print(ad_a);	# 408 IOprint_val (bd_a:int)<-(ad_a:dbl)
    mil.line("atan(dbl(0.5)).print();");	# 409 MILline ($689:void)<-($690:str)
    cd_a := calc.dbl(0.5);	# 410 CALCflt2dbl (cd_a:dbl)<-($692:flt)
    dd_a := mmath.atan(cd_a);	# 411 MATHunary_ATANdbl (dd_a:dbl)<-(cd_a:dbl)
    ed_a := io.print(dd_a);	# 412 IOprint_val (ed_a:int)<-(dd_a:dbl)
    mil.line("atan(dbl(1)).print();");	# 413 MILline ($695:void)<-($696:str)
    fd_a := calc.dbl(1);	# 414 CALCint2dbl (fd_a:dbl)<-($698:int)
    gd_a := mmath.atan(fd_a);	# 415 MATHunary_ATANdbl (gd_a:dbl)<-(fd_a:dbl)
    hd_a := io.print(gd_a);	# 416 IOprint_val (hd_a:int)<-(gd_a:dbl)
    mil.line("asin(sin(M_PI)).print();");	# 417 MILline ($701:void)<-($702:str)
    id_a := mmath.sin(M_PI);	# 418 MATHunary_SINdbl (id_a:dbl)<-(M_PI:dbl)
    jd_a := mmath.asin(id_a);	# 419 MATHunary_ASINdbl (jd_a:dbl)<-(id_a:dbl)
    kd_a := io.print(jd_a);	# 420 IOprint_val (kd_a:int)<-(jd_a:dbl)
    mil.line("acos(cos(M_PI)).print();");	# 421 MILline ($706:void)<-($707:str)
    ld_a := mmath.cos(M_PI);	# 422 MATHunary_COSdbl (ld_a:dbl)<-(M_PI:dbl)
    md_a := mmath.acos(ld_a);	# 423 MATHunary_ACOSdbl (md_a:dbl)<-(ld_a:dbl)
    nd_a := io.print(md_a);	# 424 IOprint_val (nd_a:int)<-(md_a:dbl)
    mil.line("atan(tan(M_PI_2)).print();");	# 425 MILline ($711:void)<-($712:str)
    od_a := mmath.tan(M_PI_2);	# 426 MATHunary_TANdbl (od_a:dbl)<-(M_PI_2:dbl)
    pd_a := mmath.atan(od_a);	# 427 MATHunary_ATANdbl (pd_a:dbl)<-(od_a:dbl)
    qd_a := io.print(pd_a);	# 428 IOprint_val (qd_a:int)<-(pd_a:dbl)
    mil.line("atan(tan(M_PI_4)).print();");	# 429 MILline ($716:void)<-($717:str)
    rd_a := mmath.tan(M_PI_4);	# 430 MATHunary_TANdbl (rd_a:dbl)<-(M_PI_4:dbl)
    sd_a := mmath.atan(rd_a);	# 431 MATHunary_ATANdbl (sd_a:dbl)<-(rd_a:dbl)
    td_a := io.print(sd_a);	# 432 IOprint_val (td_a:int)<-(sd_a:dbl)
    mil.line("sqrt(pow(dbl(2),dbl(2))).print();");	# 433 MILline ($721:void)<-($722:str)
    ud_a := calc.dbl(2);	# 434 CALCint2dbl (ud_a:dbl)<-($724:int)
    vd_a := calc.dbl(2);	# 435 CALCint2dbl (vd_a:dbl)<-($724:int)
    wd_a := mmath.pow(ud_a,vd_a);	# 436 MATHbinary_POWdbl (wd_a:dbl)<-(ud_a:dbl)(vd_a:dbl)
    xd_a := mmath.sqrt(wd_a);	# 437 MATHunary_SQRTdbl (xd_a:dbl)<-(wd_a:dbl)
    yd_a := io.print(xd_a);	# 438 IOprint_val (yd_a:int)<-(xd_a:dbl)
    mil.line("exp(dbl(10)).print();");	# 439 MILline ($729:void)<-($730:str)
    ae_a := calc.dbl(10);	# 440 CALCint2dbl (ae_a:dbl)<-($732:int)
    be_a := mmath.exp(ae_a);	# 441 MATHunary_EXPdbl (be_a:dbl)<-(ae_a:dbl)
    ce_a := io.print(be_a);	# 442 IOprint_val (ce_a:int)<-(be_a:dbl)
    mil.line("log(dbl(10)).print();");	# 443 MILline ($735:void)<-($736:str)
    de_a := calc.dbl(10);	# 444 CALCint2dbl (de_a:dbl)<-($732:int)
    ee_a := mmath.log(de_a);	# 445 MATHunary_LOGdbl (ee_a:dbl)<-(de_a:dbl)
    fe_a := io.print(ee_a);	# 446 IOprint_val (fe_a:int)<-(ee_a:dbl)
    mil.line("log10(dbl(10)).print();");	# 447 MILline ($740:void)<-($741:str)
    ge_a := calc.dbl(10);	# 448 CALCint2dbl (ge_a:dbl)<-($732:int)
    he_a := mmath.log10(ge_a);	# 449 MATHunary_LOG10dbl (he_a:dbl)<-(ge_a:dbl)
    ie_a := io.print(he_a);	# 450 IOprint_val (ie_a:int)<-(he_a:dbl)
    mil.line("ceil(dbl(1.2)).print();");	# 451 MILline ($745:void)<-($746:str)
    je_a := calc.dbl(1.2);	# 452 CALCflt2dbl (je_a:dbl)<-($748:flt)
    ke_a := mmath.ceil(je_a);	# 453 MATHunary_CEILdbl (ke_a:dbl)<-(je_a:dbl)
    le_a := io.print(ke_a);	# 454 IOprint_val (le_a:int)<-(ke_a:dbl)
    mil.line("fabs(dbl(1.2)).print();");	# 455 MILline ($751:void)<-($752:str)
    me_a := calc.dbl(1.2);	# 456 CALCflt2dbl (me_a:dbl)<-($748:flt)
    ne_a := mmath.fabs(me_a);	# 457 MATHunary_FABSdbl (ne_a:dbl)<-(me_a:dbl)
    oe_a := io.print(ne_a);	# 458 IOprint_val (oe_a:int)<-(ne_a:dbl)
    mil.line("floor(dbl(1.2)).print();");	# 459 MILline ($756:void)<-($757:str)
    pe_a := calc.dbl(1.2);	# 460 CALCflt2dbl (pe_a:dbl)<-($748:flt)
    qe_a := mmath.floor(pe_a);	# 461 MATHunary_FLOORdbl (qe_a:dbl)<-(pe_a:dbl)
    re_a := io.print(qe_a);	# 462 IOprint_val (re_a:int)<-(qe_a:dbl)
    mil.line("fmod(dbl(15.2),dbl(2.5)).print();");	# 463 MILline ($761:void)<-($762:str)
    se_a := calc.dbl(15.2);	# 464 CALCflt2dbl (se_a:dbl)<-($764:flt)
    te_a := calc.dbl(2.5);	# 465 CALCflt2dbl (te_a:dbl)<-($766:flt)
    ue_a := mmath.fmod(se_a,te_a);	# 466 MATHbinary_FMODdbl (ue_a:dbl)<-(se_a:dbl)(te_a:dbl)
    ve_a := io.print(ue_a);	# 467 IOprint_val (ve_a:int)<-(ue_a:dbl)
    mil.line("quit();");	# 468 MILline ($769:void)<-($770:str)
    we_a := clients.quit();	# 469 CLTquit (we_a:void)
end main;	# 470  
## >Number:         125
## >Category:       Module_math
## >Synopsis:       (almost) all functions of mmath return strange results on IRIX.
## >Confidential:   no
## >Severity:       serious
## >Priority:       medium
## >Responsible:    niels
## >State:          open
## >Class:          sw-bug
## >Submitter-Id:   unknown
## >Arrival-Date:   Fri Feb 27 16:36:42 1998
## >Originator:     manegold
## >Organization:
## >Release:        
## >Environment:
## IRIX
## >Description:
## (almost) all functions of mmath return strange results on IRIX.             
## 
## test script and output for both GNU=ON & GNU=OFF follow.
## 
##         stefan
## 
## ================================================================================
## test script (also available as 'testing/plain/mmath2/script.mil')
## --------------------------------------------------------------------------------
## setoid(oid(20000000));
## module(mmath);
## sin(dbl(0)).print();
## sin(M_PI_4).print();
## sin(M_PI_2).print();
## sin(M_PI).print();
## sin(3*M_PI_2).print();
## cos(dbl(0)).print();
## cos(M_PI_4).print();
## cos(M_PI_2).print();
## cos(M_PI).print();
## cos(3*M_PI_2).print();
## tan(dbl(0)).print();
## tan(M_PI_4).print();
## tan(M_PI_2).print();
## tan(M_PI).print();
## tan(3*M_PI_2).print();
## asin(dbl(-1)).print();
## asin(dbl(-0.5)).print();
## asin(dbl(0)).print();
## asin(dbl(0.5)).print();
## asin(dbl(1)).print();
## acos(dbl(-1)).print();
## acos(dbl(-0.5)).print();
## acos(dbl(0)).print();
## acos(dbl(0.5)).print();
## acos(dbl(1)).print();
## atan(dbl(-1)).print();
## atan(dbl(-0.5)).print();
## atan(dbl(0)).print();
## atan(dbl(0.5)).print();
## atan(dbl(1)).print();
## 
## asin(sin(M_PI)).print();
## acos(cos(M_PI)).print();
## atan(tan(M_PI_2)).print();
## atan(tan(M_PI_4)).print();
## sqrt(pow(dbl(2),dbl(2))).print();
## 
## exp(dbl(10)).print(); 
## log(dbl(10)).print();
## log10(dbl(10)).print();
## 
## ceil(dbl(1.2)).print();
## fabs(dbl(1.2)).print();
## floor(dbl(1.2)).print();
## fmod(dbl(15.2),dbl(2.5)).print();
## --------------------------------------------------------------------------------
## ================================================================================
## differences between SunOS5.5 and IRIX6.2                  compiled with GNU=ON
## --------------------------------------------------------------------------------
## --- .SunOS5.5/plain/mmath2/111.out      Fri Feb 27 16:00:24 1998
## +++ .IRIX6.2/plain/mmath2/111.out       Fri Feb 27 16:00:01 1998
## @@ -1,3 +1,3 @@
##  Statistics about the output of plain/mmath2:
## -  143 lines,  385 words,  3505 chars
## +  143 lines,  385 words,  3751 chars
## 
## @@ -8,3 +8,3 @@
##  Mcreatedb -db plain
## -Mcreatedb: processing database 'plain' in /ufs/manegold/programming/Monet/testing/.SunOS5.5/dbfarm/plain.
## +Mcreatedb: processing database 'plain' in /ufs/manegold/programming/Monet/testing/.IRIX6.2/dbfarm/plain.
##  Mcreatedb: calling 'Mserver -db plain' for the first time..
## @@ -68,3 +68,3 @@
##  sin(M_PI).print();
## -[ -0.000000 ]
## +[ 0.000000 ]
##  sin(3*M_PI_2).print();
## @@ -76,3 +76,3 @@
##  cos(M_PI_2).print();
## -[ -0.000000 ]
## +[ 0.000000 ]
##  cos(M_PI).print();
## @@ -82,62 +82,62 @@
##  tan(dbl(0)).print();
## -[ 0.000000 ]
## +[ 2080315712.000000 ]
##  tan(M_PI_4).print();
## -[ 1.000000 ]
## +[ 2080315712.000000 ]
##  tan(M_PI_2).print();
## -[ -22877332.428856 ]
## +[ 2080315712.000000 ]
##  tan(M_PI).print();
## -[ 0.000000 ]
## +[ 2080315712.000000 ]
##  tan(3*M_PI_2).print();
## -[ -7625777.476285 ]
## +[ 2080315712.000000 ]
##  asin(dbl(-1)).print();
## -[ -1.570796 ]
## +[ 2080315712.000000 ]
##  asin(dbl(-0.5)).print();
## -[ -0.523599 ]
## +[ 2080315712.000000 ]
##  asin(dbl(0)).print();
## -[ 0.000000 ]
## +[ 2080315712.000000 ]
##  asin(dbl(0.5)).print();
## -[ 0.523599 ]
## +[ 2080315712.000000 ]
##  asin(dbl(1)).print();
## -[ 1.570796 ]
## +[ 2080315712.000000 ]
##  acos(dbl(-1)).print();
## -[ 3.141593 ]
## +[ 2080315712.000000 ]
##  acos(dbl(-0.5)).print();
## -[ 2.094395 ]
## +[ 2080315712.000000 ]
##  acos(dbl(0)).print();
## -[ 1.570796 ]
## +[ 2080315712.000000 ]
##  acos(dbl(0.5)).print();
## -[ 1.047198 ]
## +[ 2080315712.000000 ]
##  acos(dbl(1)).print();
## -[ 0.000000 ]
## +[ 2080315712.000000 ]
##  atan(tan(M_PI_2)).print();
## -[ -1.570796 ]
## +[ 2080315712.000000 ]
##  atan(tan(M_PI_4)).print();
## -[ 0.785398 ]
## +[ 2080315712.000000 ]
##  sqrt(pow(dbl(2),dbl(2))).print();
## -[ 2.000000 ]
## +[ 45610.384256 ]
## 
##  exp(dbl(10)).print();
## -[ 22026.465795 ]
## +[ 2080315712.000000 ]
##  log(dbl(10)).print();
## -[ 2.302585 ]
## +[ 2080315712.000000 ]
##  log10(dbl(10)).print();
## -[ 1.000000 ]
## +[ 2080315712.000000 ]
## 
##  ceil(dbl(1.2)).print();
## -[ 2.000000 ]
## +[ 2080315712.000000 ]
##  fabs(dbl(1.2)).print();
## @@ -145,4 +145,4 @@
##  floor(dbl(1.2)).print();
## -[ 1.000000 ]
## +[ 2080315712.000000 ]
##  fmod(dbl(15.2),dbl(2.5)).print();
## -[ 0.200000 ]
## +[ 2080315712.000000 ]
## --------------------------------------------------------------------------------
## ================================================================================
## differences between SunOS5.5 and IRIX6.2                  compiled with GNU=OFF
## --------------------------------------------------------------------------------
## --- plain/mmath2/stable.out     Fri Feb 27 16:11:45 1998
## +++ .IRIX6.2/plain/mmath2/1998.02.27,16:51:37.out       Fri Feb 27 17:23:28 1998
## @@ -1,3 +1,3 @@
##  Statistics about the output of plain/mmath2:
## -  143 lines,  385 words,  3505 chars
## +  138 lines,  360 words,  3229 chars
##  
## @@ -7,7 +7,2 @@
##  
## -Mcreatedb -db plain
## -Mcreatedb: processing database 'plain' in /ufs/manegold/programming/Monet/testing/.SunOS5.5/dbfarm/plain.
## -Mcreatedb: calling 'Mserver -db plain' for the first time..
## -Mcreatedb: database 'plain' has been initialized succesfully!
## -
##  Mserver -db plain  script.mil
## @@ -68,3 +63,3 @@
##  sin(M_PI).print();
## -[ -0.000000 ]
## +[ 0.000000 ]
##  sin(3*M_PI_2).print();
## @@ -76,3 +71,3 @@
##  cos(M_PI_2).print();
## -[ -0.000000 ]
## +[ 0.000000 ]
##  cos(M_PI).print();
## @@ -82,3 +77,3 @@
##  tan(dbl(0)).print();
## -[ 0.000000 ]
## +[ 1.000000 ]
##  tan(M_PI_4).print();
## @@ -86,53 +81,53 @@
##  tan(M_PI_2).print();
## -[ -22877332.428856 ]
## +[ 1.000000 ]
##  tan(M_PI).print();
## -[ 0.000000 ]
## +[ 1.000000 ]
##  tan(3*M_PI_2).print();
## -[ -7625777.476285 ]
## +[ 1.000000 ]
##  asin(dbl(-1)).print();
## -[ -1.570796 ]
## +[ 1.000000 ]
##  asin(dbl(-0.5)).print();
## -[ -0.523599 ]
## +[ 1.000000 ]
##  asin(dbl(0)).print();
## -[ 0.000000 ]
## +[ 1.000000 ]
##  asin(dbl(0.5)).print();
## -[ 0.523599 ]
## +[ 1.000000 ]
##  asin(dbl(1)).print();
## -[ 1.570796 ]
## +[ 1.000000 ]
##  acos(dbl(-1)).print();
## -[ 3.141593 ]
## +[ 1.000000 ]
##  acos(dbl(-0.5)).print();
## -[ 2.094395 ]
## +[ 1.000000 ]
##  acos(dbl(0)).print();
## -[ 1.570796 ]
## +[ 1.000000 ]
##  acos(dbl(0.5)).print();
## -[ 1.047198 ]
## +[ 1.000000 ]
##  acos(dbl(1)).print();
## -[ 0.000000 ]
## +[ 1.000000 ]
##  atan(dbl(-1)).print();
## -[ -0.785398 ]
## +[ 1.000000 ]
##  atan(dbl(-0.5)).print();
## -[ -0.463648 ]
## +[ 1.000000 ]
##  atan(dbl(0)).print();
## -[ 0.000000 ]
## +[ 1.000000 ]
##  atan(dbl(0.5)).print();
## -[ 0.463648 ]
## +[ 1.000000 ]
##  atan(dbl(1)).print();
## -[ 0.785398 ]
## +[ 1.000000 ]
##  
##  asin(sin(M_PI)).print();
## -[ -0.000000 ]
## +[ 1.000000 ]
##  acos(cos(M_PI)).print();
## -[ 3.141593 ]
## +[ 1.000000 ]
##  atan(tan(M_PI_2)).print();
## -[ -1.570796 ]
## +[ 1.000000 ]
##  atan(tan(M_PI_4)).print();
## -[ 0.785398 ]
## +[ 1.000000 ]
##  sqrt(pow(dbl(2),dbl(2))).print();
## -[ 2.000000 ]
## +[ 1.000000 ]
##  
##  exp(dbl(10)).print();
## -[ 22026.465795 ]
## +[ 1.000000 ]
##  log(dbl(10)).print();
## -[ 2.302585 ]
## +[ 1.000000 ]
##  log10(dbl(10)).print();
## @@ -141,3 +136,3 @@
##  ceil(dbl(1.2)).print();
## -[ 2.000000 ]
## +[ 1.000000 ]
##  fabs(dbl(1.2)).print();
## @@ -147,2 +142,2 @@
##  fmod(dbl(15.2),dbl(2.5)).print();
## -[ 0.200000 ]
## +[ 1.000000 ]
## ================================================================================>How-To-Repeat:
#setoid(oid(20000000));
#sin(dbl(0)).print();
[ 0 ]
#sin(M_PI_4).print();
[ 0.70710678118654746 ]
#sin(M_PI_2).print();
[ 1 ]
#sin(M_PI).print();
[ 1.2246467991473532e-16 ]
#sin(3*M_PI_2).print();
[ -1 ]
#cos(dbl(0)).print();
[ 1 ]
#cos(M_PI_4).print();
[ 0.70710678118654757 ]
#cos(M_PI_2).print();
[ 6.123233995736766e-17 ]
#cos(M_PI).print();
[ -1 ]
#cos(3*M_PI_2).print();
[ -1.8369701987210297e-16 ]
#tan(dbl(0)).print();
[ 0 ]
#tan(M_PI_4).print();
[ 0.99999999999999989 ]
#tan(M_PI_2).print();
[ 16331239353195370 ]
#tan(M_PI).print();
[ -1.2246467991473532e-16 ]
#tan(3*M_PI_2).print();
[ 5443746451065123 ]
#asin(dbl(-1)).print();
[ -1.5707963267948966 ]
#asin(dbl(-0.5)).print();
[ -0.52359877559829893 ]
#asin(dbl(0)).print();
[ 0 ]
#asin(dbl(0.5)).print();
[ 0.52359877559829893 ]
#asin(dbl(1)).print();
[ 1.5707963267948966 ]
#acos(dbl(-1)).print();
[ 3.1415926535897931 ]
#acos(dbl(-0.5)).print();
[ 2.0943951023931957 ]
#acos(dbl(0)).print();
[ 1.5707963267948966 ]
#acos(dbl(0.5)).print();
[ 1.0471975511965979 ]
#acos(dbl(1)).print();
[ 0 ]
#atan(dbl(-1)).print();
[ -0.78539816339744828 ]
#atan(dbl(-0.5)).print();
[ -0.46364760900080609 ]
#atan(dbl(0)).print();
[ 0 ]
#atan(dbl(0.5)).print();
[ 0.46364760900080609 ]
#atan(dbl(1)).print();
[ 0.78539816339744828 ]
#asin(sin(M_PI)).print();
[ 1.2246467991473532e-16 ]
#acos(cos(M_PI)).print();
[ 3.1415926535897931 ]
#atan(tan(M_PI_2)).print();
[ 1.5707963267948966 ]
#atan(tan(M_PI_4)).print();
[ 0.78539816339744828 ]
#sqrt(pow(dbl(2),dbl(2))).print();
[ 2 ]
#exp(dbl(10)).print();
[ 22026.465794806718 ]
#log(dbl(10)).print();
[ 2.3025850929940459 ]
#log10(dbl(10)).print();
[ 1 ]
#ceil(dbl(1.2)).print();
[ 2 ]
#fabs(dbl(1.2)).print();
[ 1.2000000476837158 ]
#floor(dbl(1.2)).print();
[ 1 ]
#fmod(dbl(15.2),dbl(2.5)).print();
[ 0.19999980926513672 ]
#quit();

# 17:06:59 >  
# 17:06:59 >  Done.
# 17:06:59 >  

