# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#var u:= url("http://www.cwi.nl/~mk/Acoi/index.html");
	u := url("http://www.cwi.nl/~mk/Acoi/index.html");
#u.print();
	ca_a := print(u,);
#u.getHost().print();
	da_a := getHost(u,);
	ea_a := print(da_a,);
#u.getPort().print();
	fa_a := getPort(u,);
	ga_a := print(fa_a,);
#u.getDomain().print();
	ha_a := getDomain(u,);
	ia_a := print(ha_a,);
#u.getFile().print();
	ja_a := getFile(u,);
	ka_a := print(ja_a,);
#u.getAnchor().print();
	la_a := getAnchor(u,);
	ma_a := print(la_a,);
#u.getBasename().print();
	na_a := getBasename(u,);
	oa_a := print(na_a,);
#u.getProtocol().print();
	pa_a := getProtocol(u,);
	qa_a := print(pa_a,);
#u.getUser().print();
	ra_a := getUser(u,);
	sa_a := print(ra_a,);
#u.getDirectory().print();
	ta_a := getDirectory(u,);
	ua_a := print(ta_a,);
#quit();
	va_a := quit();
