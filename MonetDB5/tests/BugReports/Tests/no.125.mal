# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#sin(dbl(0)).print();
	ca_a := dbl(0);
	da_a := sin(ca_a);
	ea_a := print(da_a,);
#sin(M_PI_4).print();
	M_PI_4:= mil.take("M_PI_4");
	fa_a := sin(M_PI_4);
	ga_a := print(fa_a,);
#sin(M_PI_2).print();
	M_PI_2:= mil.take("M_PI_2");
	ha_a := sin(M_PI_2);
	ia_a := print(ha_a,);
#sin(M_PI).print();
	M_PI:= mil.take("M_PI");
	ja_a := sin(M_PI);
	ka_a := print(ja_a,);
#sin(3*M_PI_2).print();
	la_a := *(3,M_PI_2);
	ma_a := sin(la_a);
	na_a := print(ma_a,);
#cos(dbl(0)).print();
	oa_a := dbl(0);
	pa_a := cos(oa_a);
	qa_a := print(pa_a,);
#cos(M_PI_4).print();
	ra_a := cos(M_PI_4);
	sa_a := print(ra_a,);
#cos(M_PI_2).print();
	ta_a := cos(M_PI_2);
	ua_a := print(ta_a,);
#cos(M_PI).print();
	va_a := cos(M_PI);
	wa_a := print(va_a,);
#cos(3*M_PI_2).print();
	xa_a := *(3,M_PI_2);
	ya_a := cos(xa_a);
	ab_a := print(ya_a,);
#tan(dbl(0)).print();
	bb_a := dbl(0);
	cb_a := tan(bb_a);
	db_a := print(cb_a,);
#tan(M_PI_4).print();
	eb_a := tan(M_PI_4);
	fb_a := print(eb_a,);
#tan(M_PI_2).print();
	gb_a := tan(M_PI_2);
	hb_a := print(gb_a,);
#tan(M_PI).print();
	ib_a := tan(M_PI);
	jb_a := print(ib_a,);
#tan(3*M_PI_2).print();
	kb_a := *(3,M_PI_2);
	lb_a := tan(kb_a);
	mb_a := print(lb_a,);
#asin(dbl(-1)).print();
	nb_a := dbl(-1);
	ob_a := asin(nb_a);
	pb_a := print(ob_a,);
#asin(dbl(-0.5)).print();
	qb_a := dbl(-0.5);
	rb_a := asin(qb_a);
	sb_a := print(rb_a,);
#asin(dbl(0)).print();
	tb_a := dbl(0);
	ub_a := asin(tb_a);
	vb_a := print(ub_a,);
#asin(dbl(0.5)).print();
	wb_a := dbl(0.5);
	xb_a := asin(wb_a);
	yb_a := print(xb_a,);
#asin(dbl(1)).print();
	ac_a := dbl(1);
	bc_a := asin(ac_a);
	cc_a := print(bc_a,);
#acos(dbl(-1)).print();
	dc_a := dbl(-1);
	ec_a := acos(dc_a);
	fc_a := print(ec_a,);
#acos(dbl(-0.5)).print();
	gc_a := dbl(-0.5);
	hc_a := acos(gc_a);
	ic_a := print(hc_a,);
#acos(dbl(0)).print();
	jc_a := dbl(0);
	kc_a := acos(jc_a);
	lc_a := print(kc_a,);
#acos(dbl(0.5)).print();
	mc_a := dbl(0.5);
	nc_a := acos(mc_a);
	oc_a := print(nc_a,);
#acos(dbl(1)).print();
	pc_a := dbl(1);
	qc_a := acos(pc_a);
	rc_a := print(qc_a,);
#atan(dbl(-1)).print();
	sc_a := dbl(-1);
	tc_a := atan(sc_a);
	uc_a := print(tc_a,);
#atan(dbl(-0.5)).print();
	vc_a := dbl(-0.5);
	wc_a := atan(vc_a);
	xc_a := print(wc_a,);
#atan(dbl(0)).print();
	yc_a := dbl(0);
	ad_a := atan(yc_a);
	bd_a := print(ad_a,);
#atan(dbl(0.5)).print();
	cd_a := dbl(0.5);
	dd_a := atan(cd_a);
	ed_a := print(dd_a,);
#atan(dbl(1)).print();
	fd_a := dbl(1);
	gd_a := atan(fd_a);
	hd_a := print(gd_a,);
#asin(sin(M_PI)).print();
	id_a := sin(M_PI);
	jd_a := asin(id_a);
	kd_a := print(jd_a,);
#acos(cos(M_PI)).print();
	ld_a := cos(M_PI);
	md_a := acos(ld_a);
	nd_a := print(md_a,);
#atan(tan(M_PI_2)).print();
	od_a := tan(M_PI_2);
	pd_a := atan(od_a);
	qd_a := print(pd_a,);
#atan(tan(M_PI_4)).print();
	rd_a := tan(M_PI_4);
	sd_a := atan(rd_a);
	td_a := print(sd_a,);
#sqrt(pow(dbl(2),dbl(2))).print();
	ud_a := dbl(2);
	vd_a := dbl(2);
	wd_a := pow(ud_a,vd_a);
	xd_a := sqrt(wd_a);
	yd_a := print(xd_a,);
#exp(dbl(10)).print();
	ae_a := dbl(10);
	be_a := exp(ae_a);
	ce_a := print(be_a,);
#log(dbl(10)).print();
	de_a := dbl(10);
	ee_a := log(de_a);
	fe_a := print(ee_a,);
#log10(dbl(10)).print();
	ge_a := dbl(10);
	he_a := log10(ge_a);
	ie_a := print(he_a,);
#ceil(dbl(1.2)).print();
	je_a := dbl(1.2);
	ke_a := ceil(je_a);
	le_a := print(ke_a,);
#fabs(dbl(1.2)).print();
	me_a := dbl(1.2);
	ne_a := fabs(me_a);
	oe_a := print(ne_a,);
#floor(dbl(1.2)).print();
	pe_a := dbl(1.2);
	qe_a := floor(pe_a);
	re_a := print(qe_a,);
#fmod(dbl(15.2),dbl(2.5)).print();
	se_a := dbl(15.2);
	te_a := dbl(2.5);
	ue_a := fmod(se_a,te_a);
	ve_a := print(ue_a,);
#quit();
	we_a := quit();
