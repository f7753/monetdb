stdout of test 'no.050` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.050 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.050.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.050.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("# >Number:         50\n");
#	mil.line("# >Category:       MIL\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       critical\n");
#	mil.line("# >Priority:       high\n");
#	mil.line("# >Responsible:    boncz\n");
#	mil.line("# >State:          closed\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Wed Oct 15 10:23:33 1997\n");
#	mil.line("# >Originator:     niels\n");
#	mil.line("# >Organization:\n");
#	mil.line("# >Release:        971007\n");
#	mil.line("# >Environment:\n");
#	mil.line("# SunOS5.5.1\n");
#	mil.line("# >Description:\n");
#	mil.line("# a := new (oid,int);\n");
#	mil.line("# a.insert( oid(1), 100 );\n");
#	mil.line("# a.insert( oid(2), 1000 );\n");
#	mil.line("# a.insert( oid(4), 10 );\n");
#	mil.line("# a.insert( oid(5), 15 );\n");
#	mil.line("# a.select( 94, 110 ).print;\n");
#	mil.line("# #output\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # oid   | tmp_27  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 1@0,    100     ]\n");
#	mil.line("# [ 2@0,    1000    ]\n");
#	mil.line("var a := new (oid,int);");
#	a := new(nil:oid,nil:int);
#	mil.line("a.insert( oid(1), 100 );");
#	aa_a := oid(1);
#	ba_a := insert(a,aa_a,100);
#	mil.line("a.insert( oid(2), 1000 );");
#	ca_a := oid(2);
#	da_a := insert(a,ca_a,1000);
#	mil.line("a.insert( oid(4), 10 );");
#	ea_a := oid(4);
#	fa_a := insert(a,ea_a,10);
#	mil.line("a.insert( oid(5), 15 );");
#	ga_a := oid(5);
#	ha_a := insert(a,ga_a,15);
#	mil.line("a.print();");
#	ia_a := print(a);
#	ja_a := reverse(a);
#	mil.line("a.print();");
#	la_a := print(a);
#	mil.line("a.select( 94, 110 ).print();");
#	ma_a := select(a,94,110);
#	na_a := print(ma_a);
#	mil.line("quit();");
#	oa_a := quit();
#
function user.main():int;	# 0  (main:int)
# Monet Mil to Mal compiler 	# 1  ($2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  ($4:str)
#Predefined code segment 	# 3  ($6:str)
#The compiler can not guarantee an accurate compilation, 	# 4  ($8:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  ($10:str)
#A few guidelines to maximize usefullness. 	# 6  ($12:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  ($14:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  ($16:str)
#use the "mil_schema" for additional support routines 	# 9  ($18:str)
    mil.line("# >Number:         50\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Category:       MIL\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Confidential:   no\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Severity:       critical\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# >Priority:       high\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Responsible:    boncz\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >State:          closed\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# >Class:          sw-bug\n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# >Arrival-Date:   Wed Oct 15 10:23:33 1997\n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# >Originator:     niels\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# >Organization:\n");	# 21 MILline ($41:void)<-($42:str)
    mil.line("# >Release:        971007\n");	# 22 MILline ($43:void)<-($44:str)
    mil.line("# >Environment:\n");	# 23 MILline ($45:void)<-($46:str)
    mil.line("# SunOS5.5.1\n");	# 24 MILline ($47:void)<-($48:str)
    mil.line("# >Description:\n");	# 25 MILline ($49:void)<-($50:str)
    mil.line("# a := new (oid,int);\n");	# 26 MILline ($51:void)<-($52:str)
    mil.line("# a.insert( calc.oid(1), 100 );\n");	# 27 MILline ($53:void)<-($54:str)
    mil.line("# a.insert( calc.oid(2), 1000 );\n");	# 28 MILline ($55:void)<-($56:str)
    mil.line("# a.insert( calc.oid(4), 10 );\n");	# 29 MILline ($57:void)<-($58:str)
    mil.line("# a.insert( calc.oid(5), 15 );\n");	# 30 MILline ($59:void)<-($60:str)
    mil.line("# a.select( 94, 110 ).print;\n");	# 31 MILline ($61:void)<-($62:str)
    mil.line("# #output\n");	# 32 MILline ($63:void)<-($64:str)
    mil.line("# #-----------------#\n");	# 33 MILline ($65:void)<-($66:str)
    mil.line("# # oid   | tmp_27  #\n");	# 34 MILline ($67:void)<-($68:str)
    mil.line("# #-----------------#\n");	# 35 MILline ($69:void)<-($66:str)
    mil.line("# [ 1@0,    100     ]\n");	# 36 MILline ($70:void)<-($71:str)
    mil.line("# [ 2@0,    1000    ]\n");	# 37 MILline ($72:void)<-($73:str)
    mil.line("var a := new (oid,int);");	# 38 MILline ($74:void)<-($75:str)
    a := bbp.new(nil:oid,nil:int);	# 39 CMDBATnew (a:bat[:oid,:int])<-($77:oid)($78:int)
    mil.line("a.insert( calc.oid(1), 100 );");	# 40 MILline ($79:void)<-($80:str)
    aa_a := calc.oid(1);	# 41 CALCint2oid (aa_a:oid)<-($82:int)
    ba_a := bat.insert(a,aa_a,100);	# 42 BKCinsert_bun (ba_a:bat[:oid,:int])<-(a:bat[:oid,:int])(aa_a:oid)($84:int)
    mil.line("a.insert( calc.oid(2), 1000 );");	# 43 MILline ($85:void)<-($86:str)
    ca_a := calc.oid(2);	# 44 CALCint2oid (ca_a:oid)<-($88:int)
    da_a := bat.insert(a,ca_a,1000);	# 45 BKCinsert_bun (da_a:bat[:oid,:int])<-(a:bat[:oid,:int])(ca_a:oid)($90:int)
    mil.line("a.insert( calc.oid(4), 10 );");	# 46 MILline ($91:void)<-($92:str)
    ea_a := calc.oid(4);	# 47 CALCint2oid (ea_a:oid)<-($94:int)
    fa_a := bat.insert(a,ea_a,10);	# 48 BKCinsert_bun (fa_a:bat[:oid,:int])<-(a:bat[:oid,:int])(ea_a:oid)($96:int)
    mil.line("a.insert( calc.oid(5), 15 );");	# 49 MILline ($97:void)<-($98:str)
    ga_a := calc.oid(5);	# 50 CALCint2oid (ga_a:oid)<-($100:int)
    ha_a := bat.insert(a,ga_a,15);	# 51 BKCinsert_bun (ha_a:bat[:oid,:int])<-(a:bat[:oid,:int])(ga_a:oid)($102:int)
    mil.line("a.print();");	# 52 MILline ($103:void)<-($104:str)
    ia_a := io.print(a);	# 53 IOprint_val (ia_a:int)<-(a:bat[:oid,:int])
    ja_a := bat.reverse(a);	# 54 BKCreverse (ja_a:bat[:int,:oid])<-(a:bat[:oid,:int])
    mil.line("a.print();");	# 55 MILline ($107:void)<-($104:str)
    la_a := io.print(a);	# 56 IOprint_val (la_a:int)<-(a:bat[:oid,:int])
    mil.line("a.select( 94, 110 ).print();");	# 57 MILline ($109:void)<-($110:str)
    ma_a := algebra.select(a,94,110);	# 58 ALGselect (ma_a:bat[:oid,:int])<-(a:bat[:oid,:int])($112:int)($113:int)
    na_a := io.print(ma_a);	# 59 IOprint_val (na_a:int)<-(ma_a:bat[:oid,:int])
    mil.line("quit();");	# 60 MILline ($115:void)<-($116:str)
    oa_a := clients.quit();	# 61 CLTquit (oa_a:void)
end main;	# 62  
## >Number:         50\n
## >Category:       MIL\n
## >Confidential:   no\n
## >Severity:       critical\n
## >Priority:       high\n
## >Responsible:    boncz\n
## >State:          closed\n
## >Class:          sw-bug\n
## >Submitter-Id:   unknown\n
## >Arrival-Date:   Wed Oct 15 10:23:33 1997\n
## >Originator:     niels\n
## >Organization:\n
## >Release:        971007\n
## >Environment:\n
## SunOS5.5.1\n
## >Description:\n
## a := new (oid,int);\n
## a.insert( calc.oid(1), 100 );\n
## a.insert( calc.oid(2), 1000 );\n
## a.insert( calc.oid(4), 10 );\n
## a.insert( calc.oid(5), 15 );\n
## a.select( 94, 110 ).print;\n
## #output\n
## #-----------------#\n
## # oid   | tmp_27  #\n
## #-----------------#\n
## [ 1@0,    100     ]\n
## [ 2@0,    1000    ]\n
#var a := new (oid,int);
#a.insert( oid(1), 100 );
#a.insert( oid(2), 1000 );
#a.insert( oid(4), 10 );
#a.insert( oid(5), 15 );
#a.print();
#-----------------#
# BAT:	  tmp_25  #
# (oid)	  (int)	  #
#-----------------#
[ 1@0,	  100	  ]
[ 2@0,	  1000	  ]
[ 4@0,	  10	  ]
[ 5@0,	  15	  ]
#a.print();
#-----------------#
# BAT:	  tmp_25  #
# (oid)	  (int)	  #
#-----------------#
[ 1@0,	  100	  ]
[ 2@0,	  1000	  ]
[ 4@0,	  10	  ]
[ 5@0,	  15	  ]
#a.select( 94, 110 ).print();
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (int)	  #
#-----------------#
[ 1@0,	  100	  ]
#quit();

# 17:06:48 >  
# 17:06:48 >  Done.
# 17:06:48 >  

