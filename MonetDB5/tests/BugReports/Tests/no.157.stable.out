stdout of test 'no.157` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.157 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.157.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.157.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         157
# >Category:       Mserver
# >Synopsis:       long selects
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Tue Jun 23 13:42:30 1998
# >Originator:     windhouw@cwi.nl
# >Organization:
# CWI
# >Release:        980101
# >Environment:
# 
# >Description:
# Selection of longs results in rather strange results:
# 
function user.main():int;	# 0  (main:int)
# Monet Mil to Mal compiler 	# 1  ($2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  ($4:str)
#Predefined code segment 	# 3  ($6:str)
#The compiler can not guarantee an accurate compilation, 	# 4  ($8:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  ($10:str)
#A few guidelines to maximize usefullness. 	# 6  ($12:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  ($14:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  ($16:str)
#use the "mil_schema" for additional support routines 	# 9  ($18:str)
    mil.line("# >Number:         157\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Category:       Mserver\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Synopsis:       long selects\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Confidential:   no\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# >Severity:       critical\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Priority:       high\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# >State:          open\n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >Class:          sw-bug\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# >Arrival-Date:   Tue Jun 23 13:42:30 1998\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# >Originator:     windhouw@cwi.nl\n");	# 21 MILline ($41:void)<-($42:str)
    mil.line("# >Organization:\n");	# 22 MILline ($43:void)<-($44:str)
    mil.line("# CWI\n");	# 23 MILline ($45:void)<-($46:str)
    mil.line("# >Release:        980101\n");	# 24 MILline ($47:void)<-($48:str)
    mil.line("# >Environment:\n");	# 25 MILline ($49:void)<-($50:str)
    mil.line("# \n");	# 26 MILline ($51:void)<-($52:str)
    mil.line("# >Description:\n");	# 27 MILline ($53:void)<-($54:str)
    mil.line("# Selection of longs results in rather strange results:\n");	# 28 MILline ($55:void)<-($56:str)
    mil.line("# \n");	# 29 MILline ($57:void)<-($52:str)
    mil.line("# Test script\n");	# 30 MILline ($58:void)<-($59:str)
    mil.line("# 8<----\n");	# 31 MILline ($60:void)<-($61:str)
    mil.line("# test := bbp.new(oid,lng);\n");	# 32 MILline ($62:void)<-($63:str)
    mil.line("# test.insert(oid(53991617),lng(60000401));\n");	# 33 MILline ($64:void)<-($65:str)
    mil.line("# test.insert(oid(53996584),lng(60000400));\n");	# 34 MILline ($66:void)<-($67:str)
    mil.line("# test.insert(oid(55526089),lng(50015637));\n");	# 35 MILline ($68:void)<-($69:str)
    mil.line("# test.print;\n");	# 36 MILline ($70:void)<-($71:str)
    mil.line("# test.select(lng(0)).print;\n");	# 37 MILline ($72:void)<-($73:str)
    mil.line("# test.select(lng(60000401)).print;\n");	# 38 MILline ($74:void)<-($75:str)
    mil.line("# test.select(lng(0),lng(1)).print;\n");	# 39 MILline ($76:void)<-($77:str)
    mil.line("# test.insert(oid(1),lng(1));\n");	# 40 MILline ($78:void)<-($79:str)
    mil.line("# test.select(lng(0)).print;\n");	# 41 MILline ($80:void)<-($73:str)
    mil.line("# test.select(lng(60000401)).print;\n");	# 42 MILline ($81:void)<-($75:str)
    mil.line("# test.select(lng(0),lng(1)).print;\n");	# 43 MILline ($82:void)<-($77:str)
    mil.line("# \n");	# 44 MILline ($83:void)<-($52:str)
    mil.line("# 8<-----\n");	# 45 MILline ($84:void)<-($85:str)
    mil.line("# Test output\n");	# 46 MILline ($86:void)<-($87:str)
    mil.line("# 8<-----\n");	# 47 MILline ($88:void)<-($85:str)
    mil.line("# #You are system administrator (adm)!\n");	# 48 MILline ($89:void)<-($90:str)
    mil.line("# >>>>>#---------------------------------#\n");	# 49 MILline ($91:void)<-($92:str)
    mil.line("# # BAT:            tmp_23          #\n");	# 50 MILline ($93:void)<-($94:str)
    mil.line("# # (oid)           (lng)           #\n");	# 51 MILline ($95:void)<-($96:str)
    mil.line("# #---------------------------------#\n");	# 52 MILline ($97:void)<-($98:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 53 MILline ($99:void)<-($100:str)
    mil.line("# [ 53996584@0,     60000400        ]\n");	# 54 MILline ($101:void)<-($102:str)
    mil.line("# [ 55526089@0,     50015637        ]\n");	# 55 MILline ($103:void)<-($104:str)
    mil.line("# >#-------------------------#\n");	# 56 MILline ($105:void)<-($106:str)
    mil.line("# # BAT:            tmp_24  #\n");	# 57 MILline ($107:void)<-($108:str)
    mil.line("# # (oid)           (lng)   #\n");	# 58 MILline ($109:void)<-($110:str)
    mil.line("# #-------------------------#\n");	# 59 MILline ($111:void)<-($112:str)
    mil.line("# [ 53991617@0,     0       ]\n");	# 60 MILline ($113:void)<-($114:str)
    mil.line("# [ 53996584@0,     0       ]\n");	# 61 MILline ($115:void)<-($116:str)
    mil.line("# [ 55526089@0,     0       ]\n");	# 62 MILline ($117:void)<-($118:str)
    mil.line("# >#---------------------------------#\n");	# 63 MILline ($119:void)<-($120:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 64 MILline ($121:void)<-($122:str)
    mil.line("# # (oid)           (lng)           #\n");	# 65 MILline ($123:void)<-($96:str)
    mil.line("# #---------------------------------#\n");	# 66 MILline ($124:void)<-($98:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 67 MILline ($125:void)<-($100:str)
    mil.line("# [ 53996584@0,     60000401        ]\n");	# 68 MILline ($126:void)<-($127:str)
    mil.line("# [ 55526089@0,     60000401        ]\n");	# 69 MILline ($128:void)<-($129:str)
    mil.line("# >#---------------------------------#\n");	# 70 MILline ($130:void)<-($120:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 71 MILline ($131:void)<-($122:str)
    mil.line("# # (oid)           (lng)           #\n");	# 72 MILline ($132:void)<-($133:str)
    mil.line("# #---------------------------------#\n");	# 73 MILline ($134:void)<-($135:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 74 MILline ($136:void)<-($137:str)
    mil.line("# [ 53996584@0,     60000400        ]\n");	# 75 MILline ($138:void)<-($139:str)
    mil.line("# [ 55526089@0,     50015637        ]\n");	# 76 MILline ($140:void)<-($141:str)
    mil.line("# >>#-------------------------#\n");	# 77 MILline ($142:void)<-($143:str)
    mil.line("# # BAT:            tmp_24  #\n");	# 78 MILline ($144:void)<-($145:str)
    mil.line("# # (oid)           (lng)   #\n");	# 79 MILline ($146:void)<-($147:str)
    mil.line("# #-------------------------#\n");	# 80 MILline ($148:void)<-($149:str)
    mil.line("# [ 53991617@0,     0       ]\n");	# 81 MILline ($150:void)<-($151:str)
    mil.line("# [ 53996584@0,     0       ]\n");	# 82 MILline ($152:void)<-($153:str)
    mil.line("# [ 55526089@0,     0       ]\n");	# 83 MILline ($154:void)<-($155:str)
    mil.line("# [ 1@0,            0       ]\n");	# 84 MILline ($156:void)<-($157:str)
    mil.line("# >#---------------------------------#\n");	# 85 MILline ($158:void)<-($159:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 86 MILline ($160:void)<-($161:str)
    mil.line("# # (oid)           (lng)           #\n");	# 87 MILline ($162:void)<-($133:str)
    mil.line("# #---------------------------------#\n");	# 88 MILline ($163:void)<-($135:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 89 MILline ($164:void)<-($137:str)
    mil.line("# [ 53996584@0,     60000401        ]\n");	# 90 MILline ($165:void)<-($166:str)
    mil.line("# [ 55526089@0,     60000401        ]\n");	# 91 MILline ($167:void)<-($168:str)
    mil.line("# [ 1@0,            60000401        ]\n");	# 92 MILline ($169:void)<-($170:str)
    mil.line("# >#---------------------------------#\n");	# 93 MILline ($171:void)<-($159:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 94 MILline ($172:void)<-($161:str)
    mil.line("# # (oid)           (lng)           #\n");	# 95 MILline ($173:void)<-($174:str)
    mil.line("# #---------------------------------#\n");	# 96 MILline ($175:void)<-($176:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 97 MILline ($177:void)<-($178:str)
    mil.line("# [ 53996584@0,     60000400        ]\n");	# 98 MILline ($179:void)<-($180:str)
    mil.line("# [ 55526089@0,     50015637        ]\n");	# 99 MILline ($181:void)<-($182:str)
    mil.line("# [ 1@0,            1               ]\n");	# 100 MILline ($183:void)<-($184:str)
    mil.line("setoid(oid(20000000));");	# 101 MILline ($185:void)<-($186:str)
    aa_a := calc.oid(20000000);	# 102 CALCint2oid (aa_a:oid)<-($188:int)
    ba_a := calc.setoid(aa_a);	# 103 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("var test := bbp.new(oid,lng);");	# 104 MILline ($190:void)<-($191:str)
    test := bbp.new(nil:oid,nil:lng);	# 105 CMDBATnew (test:bat[:oid,:lng])<-($193:oid)($194:lng)
    mil.line("test.insert(oid(53991617),lng(60000401));");	# 106 MILline ($195:void)<-($196:str)
    ca_a := calc.oid(53991617);	# 107 CALCint2oid (ca_a:oid)<-($198:int)
    da_a := calc.lng(60000401);	# 108 CALCint2lng (da_a:lng)<-($200:int)
    ea_a := bat.insert(test,ca_a,da_a);	# 109 BKCinsert_bun (ea_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ca_a:oid)(da_a:lng)
    mil.line("test.insert(oid(53996584),lng(60000400));");	# 110 MILline ($202:void)<-($203:str)
    fa_a := calc.oid(53996584);	# 111 CALCint2oid (fa_a:oid)<-($205:int)
    ga_a := calc.lng(60000400);	# 112 CALCint2lng (ga_a:lng)<-($207:int)
    ha_a := bat.insert(test,fa_a,ga_a);	# 113 BKCinsert_bun (ha_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(fa_a:oid)(ga_a:lng)
    mil.line("test.insert(oid(55526089),lng(50015637));");	# 114 MILline ($209:void)<-($210:str)
    ia_a := calc.oid(55526089);	# 115 CALCint2oid (ia_a:oid)<-($212:int)
    ja_a := calc.lng(50015637);	# 116 CALCint2lng (ja_a:lng)<-($214:int)
    ka_a := bat.insert(test,ia_a,ja_a);	# 117 BKCinsert_bun (ka_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ia_a:oid)(ja_a:lng)
    mil.line("test.print();");	# 118 MILline ($216:void)<-($217:str)
    la_a := io.print(test);	# 119 IOprint_val (la_a:int)<-(test:bat[:oid,:lng])
    mil.line("test.select(lng(0)).print();");	# 120 MILline ($219:void)<-($220:str)
    ma_a := calc.lng(0);	# 121 CALCint2lng (ma_a:lng)<-($222:int)
    na_a := algebra.select(test,ma_a);	# 122 ALGselect1 (na_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ma_a:lng)
    oa_a := io.print(na_a);	# 123 IOprint_val (oa_a:int)<-(na_a:bat[:oid,:lng])
    mil.line("test.select(lng(60000401)).print();");	# 124 MILline ($225:void)<-($226:str)
    pa_a := calc.lng(60000401);	# 125 CALCint2lng (pa_a:lng)<-($200:int)
    qa_a := algebra.select(test,pa_a);	# 126 ALGselect1 (qa_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(pa_a:lng)
    ra_a := io.print(qa_a);	# 127 IOprint_val (ra_a:int)<-(qa_a:bat[:oid,:lng])
    mil.line("test.select(lng(0),lng(1)).print();");	# 128 MILline ($230:void)<-($231:str)
    sa_a := calc.lng(0);	# 129 CALCint2lng (sa_a:lng)<-($222:int)
    ta_a := calc.lng(1);	# 130 CALCint2lng (ta_a:lng)<-($234:int)
    ua_a := algebra.select(test,sa_a,ta_a);	# 131 ALGselect (ua_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(sa_a:lng)(ta_a:lng)
    va_a := io.print(ua_a);	# 132 IOprint_val (va_a:int)<-(ua_a:bat[:oid,:lng])
    mil.line("test.insert(oid(1),lng(1));");	# 133 MILline ($237:void)<-($238:str)
    wa_a := calc.oid(1);	# 134 CALCint2oid (wa_a:oid)<-($234:int)
    xa_a := calc.lng(1);	# 135 CALCint2lng (xa_a:lng)<-($234:int)
    ya_a := bat.insert(test,wa_a,xa_a);	# 136 BKCinsert_bun (ya_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(wa_a:oid)(xa_a:lng)
    mil.line("test.select(lng(0)).print();");	# 137 MILline ($242:void)<-($220:str)
    ab_a := calc.lng(0);	# 138 CALCint2lng (ab_a:lng)<-($222:int)
    bb_a := algebra.select(test,ab_a);	# 139 ALGselect1 (bb_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ab_a:lng)
    cb_a := io.print(bb_a);	# 140 IOprint_val (cb_a:int)<-(bb_a:bat[:oid,:lng])
    mil.line("test.select(lng(60000401)).print();");	# 141 MILline ($246:void)<-($226:str)
    db_a := calc.lng(60000401);	# 142 CALCint2lng (db_a:lng)<-($248:int)
    eb_a := algebra.select(test,db_a);	# 143 ALGselect1 (eb_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(db_a:lng)
    fb_a := io.print(eb_a);	# 144 IOprint_val (fb_a:int)<-(eb_a:bat[:oid,:lng])
    mil.line("test.select(lng(0),lng(1)).print();");	# 145 MILline ($251:void)<-($231:str)
    gb_a := calc.lng(0);	# 146 CALCint2lng (gb_a:lng)<-($222:int)
    hb_a := calc.lng(1);	# 147 CALCint2lng (hb_a:lng)<-($234:int)
    ib_a := algebra.select(test,gb_a,hb_a);	# 148 ALGselect (ib_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(gb_a:lng)(hb_a:lng)
    jb_a := io.print(ib_a);	# 149 IOprint_val (jb_a:int)<-(ib_a:bat[:oid,:lng])
    mil.line("quit();");	# 150 MILline ($256:void)<-($257:str)
    kb_a := clients.quit();	# 151 CLTquit (kb_a:void)
end main;	# 152  
## >Number:         157\n
## >Category:       Mserver\n
## >Synopsis:       long selects\n
## >Confidential:   no\n
## >Severity:       critical\n
## >Priority:       high\n
## >Responsible:    boncz (Peter Boncz)\n
## >State:          open\n
## >Class:          sw-bug\n
## >Submitter-Id:   unknown\n
## >Arrival-Date:   Tue Jun 23 13:42:30 1998\n
## >Originator:     windhouw@cwi.nl\n
## >Organization:\n
## CWI\n
## >Release:        980101\n
## >Environment:\n
## \n
## >Description:\n
## Selection of longs results in rather strange results:\n
## \n
## Test script\n
## 8<----\n
## test := bbp.new(oid,lng);\n
## test.insert(oid(53991617),lng(60000401));\n
## test.insert(oid(53996584),lng(60000400));\n
## test.insert(oid(55526089),lng(50015637));\n
## test.print;\n
## test.select(lng(0)).print;\n
## test.select(lng(60000401)).print;\n
## test.select(lng(0),lng(1)).print;\n
## test.insert(oid(1),lng(1));\n
## test.select(lng(0)).print;\n
## test.select(lng(60000401)).print;\n
## test.select(lng(0),lng(1)).print;\n
## \n
## 8<-----\n
## Test output\n
## 8<-----\n
## #You are system administrator (adm)!\n
## >>>>>#---------------------------------#\n
## # BAT:            tmp_23          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000400        ]\n
## [ 55526089@0,     50015637        ]\n
## >#-------------------------#\n
## # BAT:            tmp_24  #\n
## # (oid)           (lng)   #\n
## #-------------------------#\n
## [ 53991617@0,     0       ]\n
## [ 53996584@0,     0       ]\n
## [ 55526089@0,     0       ]\n
## >#---------------------------------#\n
## # BAT:            tmp_24          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000401        ]\n
## [ 55526089@0,     60000401        ]\n
## >#---------------------------------#\n
## # BAT:            tmp_24          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000400        ]\n
## [ 55526089@0,     50015637        ]\n
## >>#-------------------------#\n
## # BAT:            tmp_24  #\n
## # (oid)           (lng)   #\n
## #-------------------------#\n
## [ 53991617@0,     0       ]\n
## [ 53996584@0,     0       ]\n
## [ 55526089@0,     0       ]\n
## [ 1@0,            0       ]\n
## >#---------------------------------#\n
## # BAT:            tmp_24          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000401        ]\n
## [ 55526089@0,     60000401        ]\n
## [ 1@0,            60000401        ]\n
## >#---------------------------------#\n
## # BAT:            tmp_24          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000400        ]\n
## [ 55526089@0,     50015637        ]\n
## [ 1@0,            1               ]\n
#setoid(oid(20000000));
#var test := new(oid,lng);
#test.insert(oid(53991617),lng(60000401));
#test.insert(oid(53996584),lng(60000400));
#test.insert(oid(55526089),lng(50015637));
#test.print();
#---------------------------------#
# BAT:		  tmp_30	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
[ 53996584@0,	  60000400	  ]
[ 55526089@0,	  50015637	  ]
#test.select(lng(0)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.select(lng(60000401)).print();
#---------------------------------#
# BAT:		  tmp_70	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#test.select(lng(0),lng(1)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.insert(oid(1),lng(1));
#test.select(lng(0)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.select(lng(60000401)).print();
#---------------------------------#
# BAT:		  tmp_70	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#test.select(lng(0),lng(1)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
[ 1@0,	  1	  ]

# 14:17:56 >  
# 14:17:56 >  Done.
# 14:17:56 >  

