stdout of test 'no.157` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.157 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.157.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.157.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         157
# >Category:       Mserver
# >Synopsis:       long selects
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Tue Jun 23 13:42:30 1998
# >Originator:     windhouw@cwi.nl
# >Organization:
# CWI
# >Release:        980101
# >Environment:
# 
# >Description:
# Selection of longs results in rather strange results:
# 
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  ($32:str)
#Predefined code segment 	# 2  ($34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  ($36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  ($38:str)
#A few guidelines to maximize usefullness. 	# 5  ($40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  ($42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  ($44:str)
#use the "mil_schema" for additional support routines 	# 8  ($46:str)
    mil.line("# >Number:         157\n");	# 9 MILline ($47:void)<-($48:str)
    mil.line("# >Category:       Mserver\n");	# 10 MILline ($49:void)<-($50:str)
    mil.line("# >Synopsis:       long selects\n");	# 11 MILline ($51:void)<-($52:str)
    mil.line("# >Confidential:   no\n");	# 12 MILline ($53:void)<-($54:str)
    mil.line("# >Severity:       critical\n");	# 13 MILline ($55:void)<-($56:str)
    mil.line("# >Priority:       high\n");	# 14 MILline ($57:void)<-($58:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 15 MILline ($59:void)<-($60:str)
    mil.line("# >State:          open\n");	# 16 MILline ($61:void)<-($62:str)
    mil.line("# >Class:          sw-bug\n");	# 17 MILline ($63:void)<-($64:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 18 MILline ($65:void)<-($66:str)
    mil.line("# >Arrival-Date:   Tue Jun 23 13:42:30 1998\n");	# 19 MILline ($67:void)<-($68:str)
    mil.line("# >Originator:     windhouw@cwi.nl\n");	# 20 MILline ($69:void)<-($70:str)
    mil.line("# >Organization:\n");	# 21 MILline ($71:void)<-($72:str)
    mil.line("# CWI\n");	# 22 MILline ($73:void)<-($74:str)
    mil.line("# >Release:        980101\n");	# 23 MILline ($75:void)<-($76:str)
    mil.line("# >Environment:\n");	# 24 MILline ($77:void)<-($78:str)
    mil.line("# \n");	# 25 MILline ($79:void)<-($80:str)
    mil.line("# >Description:\n");	# 26 MILline ($81:void)<-($82:str)
    mil.line("# Selection of longs results in rather strange results:\n");	# 27 MILline ($83:void)<-($84:str)
    mil.line("# \n");	# 28 MILline ($85:void)<-($80:str)
    mil.line("# Test script\n");	# 29 MILline ($86:void)<-($87:str)
    mil.line("# 8<----\n");	# 30 MILline ($88:void)<-($89:str)
    mil.line("# test := bbp.new(oid,lng);\n");	# 31 MILline ($90:void)<-($91:str)
    mil.line("# test.insert(oid(53991617),lng(60000401));\n");	# 32 MILline ($92:void)<-($93:str)
    mil.line("# test.insert(oid(53996584),lng(60000400));\n");	# 33 MILline ($94:void)<-($95:str)
    mil.line("# test.insert(oid(55526089),lng(50015637));\n");	# 34 MILline ($96:void)<-($97:str)
    mil.line("# test.print;\n");	# 35 MILline ($98:void)<-($99:str)
    mil.line("# test.select(lng(0)).print;\n");	# 36 MILline ($100:void)<-($101:str)
    mil.line("# test.select(lng(60000401)).print;\n");	# 37 MILline ($102:void)<-($103:str)
    mil.line("# test.select(lng(0),lng(1)).print;\n");	# 38 MILline ($104:void)<-($105:str)
    mil.line("# test.insert(oid(1),lng(1));\n");	# 39 MILline ($106:void)<-($107:str)
    mil.line("# test.select(lng(0)).print;\n");	# 40 MILline ($108:void)<-($101:str)
    mil.line("# test.select(lng(60000401)).print;\n");	# 41 MILline ($109:void)<-($103:str)
    mil.line("# test.select(lng(0),lng(1)).print;\n");	# 42 MILline ($110:void)<-($105:str)
    mil.line("# \n");	# 43 MILline ($111:void)<-($80:str)
    mil.line("# 8<-----\n");	# 44 MILline ($112:void)<-($113:str)
    mil.line("# Test output\n");	# 45 MILline ($114:void)<-($115:str)
    mil.line("# 8<-----\n");	# 46 MILline ($116:void)<-($113:str)
    mil.line("# #You are system administrator (adm)!\n");	# 47 MILline ($117:void)<-($118:str)
    mil.line("# >>>>>#---------------------------------#\n");	# 48 MILline ($119:void)<-($120:str)
    mil.line("# # BAT:            tmp_23          #\n");	# 49 MILline ($121:void)<-($122:str)
    mil.line("# # (oid)           (lng)           #\n");	# 50 MILline ($123:void)<-($124:str)
    mil.line("# #---------------------------------#\n");	# 51 MILline ($125:void)<-($126:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 52 MILline ($127:void)<-($128:str)
    mil.line("# [ 53996584@0,     60000400        ]\n");	# 53 MILline ($129:void)<-($130:str)
    mil.line("# [ 55526089@0,     50015637        ]\n");	# 54 MILline ($131:void)<-($132:str)
    mil.line("# >#-------------------------#\n");	# 55 MILline ($133:void)<-($134:str)
    mil.line("# # BAT:            tmp_24  #\n");	# 56 MILline ($135:void)<-($136:str)
    mil.line("# # (oid)           (lng)   #\n");	# 57 MILline ($137:void)<-($138:str)
    mil.line("# #-------------------------#\n");	# 58 MILline ($139:void)<-($140:str)
    mil.line("# [ 53991617@0,     0       ]\n");	# 59 MILline ($141:void)<-($142:str)
    mil.line("# [ 53996584@0,     0       ]\n");	# 60 MILline ($143:void)<-($144:str)
    mil.line("# [ 55526089@0,     0       ]\n");	# 61 MILline ($145:void)<-($146:str)
    mil.line("# >#---------------------------------#\n");	# 62 MILline ($147:void)<-($148:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 63 MILline ($149:void)<-($150:str)
    mil.line("# # (oid)           (lng)           #\n");	# 64 MILline ($151:void)<-($124:str)
    mil.line("# #---------------------------------#\n");	# 65 MILline ($152:void)<-($126:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 66 MILline ($153:void)<-($128:str)
    mil.line("# [ 53996584@0,     60000401        ]\n");	# 67 MILline ($154:void)<-($155:str)
    mil.line("# [ 55526089@0,     60000401        ]\n");	# 68 MILline ($156:void)<-($157:str)
    mil.line("# >#---------------------------------#\n");	# 69 MILline ($158:void)<-($148:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 70 MILline ($159:void)<-($150:str)
    mil.line("# # (oid)           (lng)           #\n");	# 71 MILline ($160:void)<-($161:str)
    mil.line("# #---------------------------------#\n");	# 72 MILline ($162:void)<-($163:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 73 MILline ($164:void)<-($165:str)
    mil.line("# [ 53996584@0,     60000400        ]\n");	# 74 MILline ($166:void)<-($167:str)
    mil.line("# [ 55526089@0,     50015637        ]\n");	# 75 MILline ($168:void)<-($169:str)
    mil.line("# >>#-------------------------#\n");	# 76 MILline ($170:void)<-($171:str)
    mil.line("# # BAT:            tmp_24  #\n");	# 77 MILline ($172:void)<-($173:str)
    mil.line("# # (oid)           (lng)   #\n");	# 78 MILline ($174:void)<-($175:str)
    mil.line("# #-------------------------#\n");	# 79 MILline ($176:void)<-($177:str)
    mil.line("# [ 53991617@0,     0       ]\n");	# 80 MILline ($178:void)<-($179:str)
    mil.line("# [ 53996584@0,     0       ]\n");	# 81 MILline ($180:void)<-($181:str)
    mil.line("# [ 55526089@0,     0       ]\n");	# 82 MILline ($182:void)<-($183:str)
    mil.line("# [ 1@0,            0       ]\n");	# 83 MILline ($184:void)<-($185:str)
    mil.line("# >#---------------------------------#\n");	# 84 MILline ($186:void)<-($187:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 85 MILline ($188:void)<-($189:str)
    mil.line("# # (oid)           (lng)           #\n");	# 86 MILline ($190:void)<-($161:str)
    mil.line("# #---------------------------------#\n");	# 87 MILline ($191:void)<-($163:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 88 MILline ($192:void)<-($165:str)
    mil.line("# [ 53996584@0,     60000401        ]\n");	# 89 MILline ($193:void)<-($194:str)
    mil.line("# [ 55526089@0,     60000401        ]\n");	# 90 MILline ($195:void)<-($196:str)
    mil.line("# [ 1@0,            60000401        ]\n");	# 91 MILline ($197:void)<-($198:str)
    mil.line("# >#---------------------------------#\n");	# 92 MILline ($199:void)<-($187:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 93 MILline ($200:void)<-($189:str)
    mil.line("# # (oid)           (lng)           #\n");	# 94 MILline ($201:void)<-($202:str)
    mil.line("# #---------------------------------#\n");	# 95 MILline ($203:void)<-($204:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 96 MILline ($205:void)<-($206:str)
    mil.line("# [ 53996584@0,     60000400        ]\n");	# 97 MILline ($207:void)<-($208:str)
    mil.line("# [ 55526089@0,     50015637        ]\n");	# 98 MILline ($209:void)<-($210:str)
    mil.line("# [ 1@0,            1               ]\n");	# 99 MILline ($211:void)<-($212:str)
    mil.line("setoid(oid(20000000));");	# 100 MILline ($213:void)<-($214:str)
    aa_a := calc.oid(20000000);	# 101 CALCint2oid (aa_a:oid)<-($216:int)
    ba_a := calc.setoid(aa_a);	# 102 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("var test := bbp.new(oid,lng);");	# 103 MILline ($218:void)<-($219:str)
    test := bbp.new(nil:oid,nil:lng);	# 104 CMDBATnew (test:bat[:oid,:lng])<-($221:oid)($222:lng)
    mil.line("test.insert(oid(53991617),lng(60000401));");	# 105 MILline ($223:void)<-($224:str)
    ca_a := calc.oid(53991617);	# 106 CALCint2oid (ca_a:oid)<-($226:int)
    da_a := calc.lng(60000401);	# 107 CALCint2lng (da_a:lng)<-($228:int)
    ea_a := bat.insert(test,ca_a,da_a);	# 108 BKCinsert_bun (ea_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ca_a:oid)(da_a:lng)
    mil.line("test.insert(oid(53996584),lng(60000400));");	# 109 MILline ($230:void)<-($231:str)
    fa_a := calc.oid(53996584);	# 110 CALCint2oid (fa_a:oid)<-($233:int)
    ga_a := calc.lng(60000400);	# 111 CALCint2lng (ga_a:lng)<-($235:int)
    ha_a := bat.insert(test,fa_a,ga_a);	# 112 BKCinsert_bun (ha_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(fa_a:oid)(ga_a:lng)
    mil.line("test.insert(oid(55526089),lng(50015637));");	# 113 MILline ($237:void)<-($238:str)
    ia_a := calc.oid(55526089);	# 114 CALCint2oid (ia_a:oid)<-($240:int)
    ja_a := calc.lng(50015637);	# 115 CALCint2lng (ja_a:lng)<-($242:int)
    ka_a := bat.insert(test,ia_a,ja_a);	# 116 BKCinsert_bun (ka_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ia_a:oid)(ja_a:lng)
    mil.line("test.print();");	# 117 MILline ($244:void)<-($245:str)
    la_a := io.print(test);	# 118 IOprint_val (la_a:int)<-(test:bat[:oid,:lng])
    mil.line("test.select(lng(0)).print();");	# 119 MILline ($247:void)<-($248:str)
    ma_a := calc.lng(0);	# 120 CALCint2lng (ma_a:lng)<-($250:int)
    na_a := algebra.select(test,ma_a);	# 121 ALGselect1 (na_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ma_a:lng)
    oa_a := io.print(na_a);	# 122 IOprint_val (oa_a:int)<-(na_a:bat[:oid,:lng])
    mil.line("test.select(lng(60000401)).print();");	# 123 MILline ($253:void)<-($254:str)
    pa_a := calc.lng(60000401);	# 124 CALCint2lng (pa_a:lng)<-($228:int)
    qa_a := algebra.select(test,pa_a);	# 125 ALGselect1 (qa_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(pa_a:lng)
    ra_a := io.print(qa_a);	# 126 IOprint_val (ra_a:int)<-(qa_a:bat[:oid,:lng])
    mil.line("test.select(lng(0),lng(1)).print();");	# 127 MILline ($258:void)<-($259:str)
    sa_a := calc.lng(0);	# 128 CALCint2lng (sa_a:lng)<-($250:int)
    ta_a := calc.lng(1);	# 129 CALCint2lng (ta_a:lng)<-($262:int)
    ua_a := algebra.select(test,sa_a,ta_a);	# 130 ALGselect (ua_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(sa_a:lng)(ta_a:lng)
    va_a := io.print(ua_a);	# 131 IOprint_val (va_a:int)<-(ua_a:bat[:oid,:lng])
    mil.line("test.insert(oid(1),lng(1));");	# 132 MILline ($265:void)<-($266:str)
    wa_a := calc.oid(1);	# 133 CALCint2oid (wa_a:oid)<-($262:int)
    xa_a := calc.lng(1);	# 134 CALCint2lng (xa_a:lng)<-($262:int)
    ya_a := bat.insert(test,wa_a,xa_a);	# 135 BKCinsert_bun (ya_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(wa_a:oid)(xa_a:lng)
    mil.line("test.select(lng(0)).print();");	# 136 MILline ($270:void)<-($248:str)
    ab_a := calc.lng(0);	# 137 CALCint2lng (ab_a:lng)<-($250:int)
    bb_a := algebra.select(test,ab_a);	# 138 ALGselect1 (bb_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ab_a:lng)
    cb_a := io.print(bb_a);	# 139 IOprint_val (cb_a:int)<-(bb_a:bat[:oid,:lng])
    mil.line("test.select(lng(60000401)).print();");	# 140 MILline ($274:void)<-($254:str)
    db_a := calc.lng(60000401);	# 141 CALCint2lng (db_a:lng)<-($276:int)
    eb_a := algebra.select(test,db_a);	# 142 ALGselect1 (eb_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(db_a:lng)
    fb_a := io.print(eb_a);	# 143 IOprint_val (fb_a:int)<-(eb_a:bat[:oid,:lng])
    mil.line("test.select(lng(0),lng(1)).print();");	# 144 MILline ($279:void)<-($259:str)
    gb_a := calc.lng(0);	# 145 CALCint2lng (gb_a:lng)<-($250:int)
    hb_a := calc.lng(1);	# 146 CALCint2lng (hb_a:lng)<-($262:int)
    ib_a := algebra.select(test,gb_a,hb_a);	# 147 ALGselect (ib_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(gb_a:lng)(hb_a:lng)
    jb_a := io.print(ib_a);	# 148 IOprint_val (jb_a:int)<-(ib_a:bat[:oid,:lng])
    mil.line("quit();");	# 149 MILline ($284:void)<-($285:str)
    kb_a := clients.quit();	# 150 CLTquit (kb_a:void)
end main;	# 151  
## >Number:         157\n
## >Category:       Mserver\n
## >Synopsis:       long selects\n
## >Confidential:   no\n
## >Severity:       critical\n
## >Priority:       high\n
## >Responsible:    boncz (Peter Boncz)\n
## >State:          open\n
## >Class:          sw-bug\n
## >Submitter-Id:   unknown\n
## >Arrival-Date:   Tue Jun 23 13:42:30 1998\n
## >Originator:     windhouw@cwi.nl\n
## >Organization:\n
## CWI\n
## >Release:        980101\n
## >Environment:\n
## \n
## >Description:\n
## Selection of longs results in rather strange results:\n
## \n
## Test script\n
## 8<----\n
## test := bbp.new(oid,lng);\n
## test.insert(oid(53991617),lng(60000401));\n
## test.insert(oid(53996584),lng(60000400));\n
## test.insert(oid(55526089),lng(50015637));\n
## test.print;\n
## test.select(lng(0)).print;\n
## test.select(lng(60000401)).print;\n
## test.select(lng(0),lng(1)).print;\n
## test.insert(oid(1),lng(1));\n
## test.select(lng(0)).print;\n
## test.select(lng(60000401)).print;\n
## test.select(lng(0),lng(1)).print;\n
## \n
## 8<-----\n
## Test output\n
## 8<-----\n
## #You are system administrator (adm)!\n
## >>>>>#---------------------------------#\n
## # BAT:            tmp_23          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000400        ]\n
## [ 55526089@0,     50015637        ]\n
## >#-------------------------#\n
## # BAT:            tmp_24  #\n
## # (oid)           (lng)   #\n
## #-------------------------#\n
## [ 53991617@0,     0       ]\n
## [ 53996584@0,     0       ]\n
## [ 55526089@0,     0       ]\n
## >#---------------------------------#\n
## # BAT:            tmp_24          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000401        ]\n
## [ 55526089@0,     60000401        ]\n
## >#---------------------------------#\n
## # BAT:            tmp_24          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000400        ]\n
## [ 55526089@0,     50015637        ]\n
## >>#-------------------------#\n
## # BAT:            tmp_24  #\n
## # (oid)           (lng)   #\n
## #-------------------------#\n
## [ 53991617@0,     0       ]\n
## [ 53996584@0,     0       ]\n
## [ 55526089@0,     0       ]\n
## [ 1@0,            0       ]\n
## >#---------------------------------#\n
## # BAT:            tmp_24          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000401        ]\n
## [ 55526089@0,     60000401        ]\n
## [ 1@0,            60000401        ]\n
## >#---------------------------------#\n
## # BAT:            tmp_24          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000400        ]\n
## [ 55526089@0,     50015637        ]\n
## [ 1@0,            1               ]\n
#setoid(oid(20000000));
#var test := new(oid,lng);
#test.insert(oid(53991617),lng(60000401));
#test.insert(oid(53996584),lng(60000400));
#test.insert(oid(55526089),lng(50015637));
#test.print();
#---------------------------------#
# BAT:		  tmp_30	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
[ 53996584@0,	  60000400	  ]
[ 55526089@0,	  50015637	  ]
#test.select(lng(0)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.select(lng(60000401)).print();
#---------------------------------#
# BAT:		  tmp_70	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#test.select(lng(0),lng(1)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.insert(oid(1),lng(1));
#test.select(lng(0)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.select(lng(60000401)).print();
#---------------------------------#
# BAT:		  tmp_70	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#test.select(lng(0),lng(1)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
[ 1@0,	  1	  ]

# 14:17:56 >  
# 14:17:56 >  Done.
# 14:17:56 >  

