stdout of test 'no.157` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.157 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.157.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.157.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         157
# >Category:       Mserver
# >Synopsis:       long selects
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Tue Jun 23 13:42:30 1998
# >Originator:     windhouw@cwi.nl
# >Organization:
# CWI
# >Release:        980101
# >Environment:
# 
# >Description:
# Selection of longs results in rather strange results:
# 
function Admin.main():int;	# 0  (main:int)
    mil.line("# >Number:         157\n");	# 1 MILline ($1:void)<-($2:str)
    mil.line("# >Category:       Mserver\n");	# 2 MILline ($3:void)<-($4:str)
    mil.line("# >Synopsis:       long selects\n");	# 3 MILline ($5:void)<-($6:str)
    mil.line("# >Confidential:   no\n");	# 4 MILline ($7:void)<-($8:str)
    mil.line("# >Severity:       critical\n");	# 5 MILline ($9:void)<-($10:str)
    mil.line("# >Priority:       high\n");	# 6 MILline ($11:void)<-($12:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 7 MILline ($13:void)<-($14:str)
    mil.line("# >State:          open\n");	# 8 MILline ($15:void)<-($16:str)
    mil.line("# >Class:          sw-bug\n");	# 9 MILline ($17:void)<-($18:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Arrival-Date:   Tue Jun 23 13:42:30 1998\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Originator:     windhouw@cwi.nl\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Organization:\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# CWI\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Release:        980101\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >Environment:\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# \n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >Description:\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# Selection of longs results in rather strange results:\n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# \n");	# 20 MILline ($39:void)<-($34:str)
    mil.line("# Test script\n");	# 21 MILline ($40:void)<-($41:str)
    mil.line("# 8<----\n");	# 22 MILline ($42:void)<-($43:str)
    mil.line("# test := new(oid,lng);\n");	# 23 MILline ($44:void)<-($45:str)
    mil.line("# test.insert(oid(53991617),lng(60000401));\n");	# 24 MILline ($46:void)<-($47:str)
    mil.line("# test.insert(oid(53996584),lng(60000400));\n");	# 25 MILline ($48:void)<-($49:str)
    mil.line("# test.insert(oid(55526089),lng(50015637));\n");	# 26 MILline ($50:void)<-($51:str)
    mil.line("# test.print;\n");	# 27 MILline ($52:void)<-($53:str)
    mil.line("# test.select(lng(0)).print;\n");	# 28 MILline ($54:void)<-($55:str)
    mil.line("# test.select(lng(60000401)).print;\n");	# 29 MILline ($56:void)<-($57:str)
    mil.line("# test.select(lng(0),lng(1)).print;\n");	# 30 MILline ($58:void)<-($59:str)
    mil.line("# test.insert(oid(1),lng(1));\n");	# 31 MILline ($60:void)<-($61:str)
    mil.line("# test.select(lng(0)).print;\n");	# 32 MILline ($62:void)<-($55:str)
    mil.line("# test.select(lng(60000401)).print;\n");	# 33 MILline ($63:void)<-($57:str)
    mil.line("# test.select(lng(0),lng(1)).print;\n");	# 34 MILline ($64:void)<-($59:str)
    mil.line("# \n");	# 35 MILline ($65:void)<-($34:str)
    mil.line("# 8<-----\n");	# 36 MILline ($66:void)<-($67:str)
    mil.line("# Test output\n");	# 37 MILline ($68:void)<-($69:str)
    mil.line("# 8<-----\n");	# 38 MILline ($70:void)<-($67:str)
    mil.line("# #You are system administrator (adm)!\n");	# 39 MILline ($71:void)<-($72:str)
    mil.line("# >>>>>#---------------------------------#\n");	# 40 MILline ($73:void)<-($74:str)
    mil.line("# # BAT:            tmp_23          #\n");	# 41 MILline ($75:void)<-($76:str)
    mil.line("# # (oid)           (lng)           #\n");	# 42 MILline ($77:void)<-($78:str)
    mil.line("# #---------------------------------#\n");	# 43 MILline ($79:void)<-($80:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 44 MILline ($81:void)<-($82:str)
    mil.line("# [ 53996584@0,     60000400        ]\n");	# 45 MILline ($83:void)<-($84:str)
    mil.line("# [ 55526089@0,     50015637        ]\n");	# 46 MILline ($85:void)<-($86:str)
    mil.line("# >#-------------------------#\n");	# 47 MILline ($87:void)<-($88:str)
    mil.line("# # BAT:            tmp_24  #\n");	# 48 MILline ($89:void)<-($90:str)
    mil.line("# # (oid)           (lng)   #\n");	# 49 MILline ($91:void)<-($92:str)
    mil.line("# #-------------------------#\n");	# 50 MILline ($93:void)<-($94:str)
    mil.line("# [ 53991617@0,     0       ]\n");	# 51 MILline ($95:void)<-($96:str)
    mil.line("# [ 53996584@0,     0       ]\n");	# 52 MILline ($97:void)<-($98:str)
    mil.line("# [ 55526089@0,     0       ]\n");	# 53 MILline ($99:void)<-($100:str)
    mil.line("# >#---------------------------------#\n");	# 54 MILline ($101:void)<-($102:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 55 MILline ($103:void)<-($104:str)
    mil.line("# # (oid)           (lng)           #\n");	# 56 MILline ($105:void)<-($78:str)
    mil.line("# #---------------------------------#\n");	# 57 MILline ($106:void)<-($80:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 58 MILline ($107:void)<-($82:str)
    mil.line("# [ 53996584@0,     60000401        ]\n");	# 59 MILline ($108:void)<-($109:str)
    mil.line("# [ 55526089@0,     60000401        ]\n");	# 60 MILline ($110:void)<-($111:str)
    mil.line("# >#---------------------------------#\n");	# 61 MILline ($112:void)<-($102:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 62 MILline ($113:void)<-($104:str)
    mil.line("# # (oid)           (lng)           #\n");	# 63 MILline ($114:void)<-($115:str)
    mil.line("# #---------------------------------#\n");	# 64 MILline ($116:void)<-($117:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 65 MILline ($118:void)<-($119:str)
    mil.line("# [ 53996584@0,     60000400        ]\n");	# 66 MILline ($120:void)<-($121:str)
    mil.line("# [ 55526089@0,     50015637        ]\n");	# 67 MILline ($122:void)<-($123:str)
    mil.line("# >>#-------------------------#\n");	# 68 MILline ($124:void)<-($125:str)
    mil.line("# # BAT:            tmp_24  #\n");	# 69 MILline ($126:void)<-($127:str)
    mil.line("# # (oid)           (lng)   #\n");	# 70 MILline ($128:void)<-($129:str)
    mil.line("# #-------------------------#\n");	# 71 MILline ($130:void)<-($131:str)
    mil.line("# [ 53991617@0,     0       ]\n");	# 72 MILline ($132:void)<-($133:str)
    mil.line("# [ 53996584@0,     0       ]\n");	# 73 MILline ($134:void)<-($135:str)
    mil.line("# [ 55526089@0,     0       ]\n");	# 74 MILline ($136:void)<-($137:str)
    mil.line("# [ 1@0,            0       ]\n");	# 75 MILline ($138:void)<-($139:str)
    mil.line("# >#---------------------------------#\n");	# 76 MILline ($140:void)<-($141:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 77 MILline ($142:void)<-($143:str)
    mil.line("# # (oid)           (lng)           #\n");	# 78 MILline ($144:void)<-($115:str)
    mil.line("# #---------------------------------#\n");	# 79 MILline ($145:void)<-($117:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 80 MILline ($146:void)<-($119:str)
    mil.line("# [ 53996584@0,     60000401        ]\n");	# 81 MILline ($147:void)<-($148:str)
    mil.line("# [ 55526089@0,     60000401        ]\n");	# 82 MILline ($149:void)<-($150:str)
    mil.line("# [ 1@0,            60000401        ]\n");	# 83 MILline ($151:void)<-($152:str)
    mil.line("# >#---------------------------------#\n");	# 84 MILline ($153:void)<-($141:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 85 MILline ($154:void)<-($143:str)
    mil.line("# # (oid)           (lng)           #\n");	# 86 MILline ($155:void)<-($156:str)
    mil.line("# #---------------------------------#\n");	# 87 MILline ($157:void)<-($158:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 88 MILline ($159:void)<-($160:str)
    mil.line("# [ 53996584@0,     60000400        ]\n");	# 89 MILline ($161:void)<-($162:str)
    mil.line("# [ 55526089@0,     50015637        ]\n");	# 90 MILline ($163:void)<-($164:str)
    mil.line("# [ 1@0,            1               ]\n");	# 91 MILline ($165:void)<-($166:str)
    mil.line("setoid(oid(20000000));");	# 92 MILline ($167:void)<-($168:str)
    aa_a := calc.oid(20000000);	# 93 CALCint2oid (aa_a:oid)<-($170:int)
    ba_a := calc.setoid(aa_a);	# 94 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("var test := new(oid,lng);");	# 95 MILline ($172:void)<-($173:str)
    test := bbp.new(nil:oid,nil:lng);	# 96 CMDBATnew (test:bat[:oid,:lng])<-($175:oid)($176:lng)
    mil.line("test.insert(oid(53991617),lng(60000401));");	# 97 MILline ($177:void)<-($178:str)
    ca_a := calc.oid(53991617);	# 98 CALCint2oid (ca_a:oid)<-($180:int)
    da_a := calc.lng(60000401);	# 99 CALCint2lng (da_a:lng)<-($182:int)
    ea_a := bat.insert(test,ca_a,da_a);	# 100 BKCinsert_bun (ea_a:bat[:any,:lng])<-(test:bat[:oid,:lng])(ca_a:oid)(da_a:lng)
    mil.line("test.insert(oid(53996584),lng(60000400));");	# 101 MILline ($184:void)<-($185:str)
    fa_a := calc.oid(53996584);	# 102 CALCint2oid (fa_a:oid)<-($187:int)
    ga_a := calc.lng(60000400);	# 103 CALCint2lng (ga_a:lng)<-($189:int)
    ha_a := bat.insert(test,fa_a,ga_a);	# 104 BKCinsert_bun (ha_a:bat[:any,:lng])<-(test:bat[:oid,:lng])(fa_a:oid)(ga_a:lng)
    mil.line("test.insert(oid(55526089),lng(50015637));");	# 105 MILline ($191:void)<-($192:str)
    ia_a := calc.oid(55526089);	# 106 CALCint2oid (ia_a:oid)<-($194:int)
    ja_a := calc.lng(50015637);	# 107 CALCint2lng (ja_a:lng)<-($196:int)
    ka_a := bat.insert(test,ia_a,ja_a);	# 108 BKCinsert_bun (ka_a:bat[:any,:lng])<-(test:bat[:oid,:lng])(ia_a:oid)(ja_a:lng)
    mil.line("test.print();");	# 109 MILline ($198:void)<-($199:str)
    la_a := io.print(test);	# 110 IOprint_val (la_a:int)<-(test:bat[:oid,:lng])
    mil.line("test.select(lng(0)).print();");	# 111 MILline ($201:void)<-($202:str)
    ma_a := calc.lng(0);	# 112 CALCint2lng (ma_a:lng)<-($204:int)
    na_a := algebra.select(test,ma_a);	# 113 ALGselect1 (na_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ma_a:lng)
    oa_a := io.print(na_a);	# 114 IOprint_val (oa_a:int)<-(na_a:bat[:oid,:lng])
    mil.line("test.select(lng(60000401)).print();");	# 115 MILline ($207:void)<-($208:str)
    pa_a := calc.lng(60000401);	# 116 CALCint2lng (pa_a:lng)<-($182:int)
    qa_a := algebra.select(test,pa_a);	# 117 ALGselect1 (qa_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(pa_a:lng)
    ra_a := io.print(qa_a);	# 118 IOprint_val (ra_a:int)<-(qa_a:bat[:oid,:lng])
    mil.line("test.select(lng(0),lng(1)).print();");	# 119 MILline ($212:void)<-($213:str)
    sa_a := calc.lng(0);	# 120 CALCint2lng (sa_a:lng)<-($204:int)
    ta_a := calc.lng(1);	# 121 CALCint2lng (ta_a:lng)<-($216:int)
    ua_a := algebra.select(test,sa_a,ta_a);	# 122 ALGselect (ua_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(sa_a:lng)(ta_a:lng)
    va_a := io.print(ua_a);	# 123 IOprint_val (va_a:int)<-(ua_a:bat[:oid,:lng])
    mil.line("test.insert(oid(1),lng(1));");	# 124 MILline ($219:void)<-($220:str)
    wa_a := calc.oid(1);	# 125 CALCint2oid (wa_a:oid)<-($216:int)
    xa_a := calc.lng(1);	# 126 CALCint2lng (xa_a:lng)<-($216:int)
    ya_a := bat.insert(test,wa_a,xa_a);	# 127 BKCinsert_bun (ya_a:bat[:any,:lng])<-(test:bat[:oid,:lng])(wa_a:oid)(xa_a:lng)
    mil.line("test.select(lng(0)).print();");	# 128 MILline ($224:void)<-($202:str)
    ab_a := calc.lng(0);	# 129 CALCint2lng (ab_a:lng)<-($204:int)
    bb_a := algebra.select(test,ab_a);	# 130 ALGselect1 (bb_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ab_a:lng)
    cb_a := io.print(bb_a);	# 131 IOprint_val (cb_a:int)<-(bb_a:bat[:oid,:lng])
    mil.line("test.select(lng(60000401)).print();");	# 132 MILline ($228:void)<-($208:str)
    db_a := calc.lng(60000401);	# 133 CALCint2lng (db_a:lng)<-($230:int)
    eb_a := algebra.select(test,db_a);	# 134 ALGselect1 (eb_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(db_a:lng)
    fb_a := io.print(eb_a);	# 135 IOprint_val (fb_a:int)<-(eb_a:bat[:oid,:lng])
    mil.line("test.select(lng(0),lng(1)).print();");	# 136 MILline ($233:void)<-($213:str)
    gb_a := calc.lng(0);	# 137 CALCint2lng (gb_a:lng)<-($204:int)
    hb_a := calc.lng(1);	# 138 CALCint2lng (hb_a:lng)<-($216:int)
    ib_a := algebra.select(test,gb_a,hb_a);	# 139 ALGselect (ib_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(gb_a:lng)(hb_a:lng)
    jb_a := io.print(ib_a);	# 140 IOprint_val (jb_a:int)<-(ib_a:bat[:oid,:lng])
    mil.line("quit();");	# 141 MILline ($238:void)<-($239:str)
    kb_a := clients.quit();	# 142 CLTquit (kb_a:void)
end main;	# 143  
## >Number:         157
## >Category:       Mserver
## >Synopsis:       long selects
## >Confidential:   no
## >Severity:       critical
## >Priority:       high
## >Responsible:    boncz (Peter Boncz)
## >State:          open
## >Class:          sw-bug
## >Submitter-Id:   unknown
## >Arrival-Date:   Tue Jun 23 13:42:30 1998
## >Originator:     windhouw@cwi.nl
## >Organization:
## CWI
## >Release:        980101
## >Environment:
## 
## >Description:
## Selection of longs results in rather strange results:
## 
## Test script
## 8<----
## test := new(oid,lng);
## test.insert(oid(53991617),lng(60000401));
## test.insert(oid(53996584),lng(60000400));
## test.insert(oid(55526089),lng(50015637));
## test.print;
## test.select(lng(0)).print;
## test.select(lng(60000401)).print;
## test.select(lng(0),lng(1)).print;
## test.insert(oid(1),lng(1));
## test.select(lng(0)).print;
## test.select(lng(60000401)).print;
## test.select(lng(0),lng(1)).print;
## 
## 8<-----
## Test output
## 8<-----
## #You are system administrator (adm)!
## >>>>>#---------------------------------#
## # BAT:            tmp_23          #
## # (oid)           (lng)           #
## #---------------------------------#
## [ 53991617@0,     60000401        ]
## [ 53996584@0,     60000400        ]
## [ 55526089@0,     50015637        ]
## >#-------------------------#
## # BAT:            tmp_24  #
## # (oid)           (lng)   #
## #-------------------------#
## [ 53991617@0,     0       ]
## [ 53996584@0,     0       ]
## [ 55526089@0,     0       ]
## >#---------------------------------#
## # BAT:            tmp_24          #
## # (oid)           (lng)           #
## #---------------------------------#
## [ 53991617@0,     60000401        ]
## [ 53996584@0,     60000401        ]
## [ 55526089@0,     60000401        ]
## >#---------------------------------#
## # BAT:            tmp_24          #
## # (oid)           (lng)           #
## #---------------------------------#
## [ 53991617@0,     60000401        ]
## [ 53996584@0,     60000400        ]
## [ 55526089@0,     50015637        ]
## >>#-------------------------#
## # BAT:            tmp_24  #
## # (oid)           (lng)   #
## #-------------------------#
## [ 53991617@0,     0       ]
## [ 53996584@0,     0       ]
## [ 55526089@0,     0       ]
## [ 1@0,            0       ]
## >#---------------------------------#
## # BAT:            tmp_24          #
## # (oid)           (lng)           #
## #---------------------------------#
## [ 53991617@0,     60000401        ]
## [ 53996584@0,     60000401        ]
## [ 55526089@0,     60000401        ]
## [ 1@0,            60000401        ]
## >#---------------------------------#
## # BAT:            tmp_24          #
## # (oid)           (lng)           #
## #---------------------------------#
## [ 53991617@0,     60000401        ]
## [ 53996584@0,     60000400        ]
## [ 55526089@0,     50015637        ]
## [ 1@0,            1               ]
#setoid(oid(20000000));
#var test := new(oid,lng);
#test.insert(oid(53991617),lng(60000401));
#test.insert(oid(53996584),lng(60000400));
#test.insert(oid(55526089),lng(50015637));
#test.print();
#---------------------------------#
# BAT:		  tmp_30	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
[ 53996584@0,	  60000400	  ]
[ 55526089@0,	  50015637	  ]
#test.select(lng(0)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.select(lng(60000401)).print();
#---------------------------------#
# BAT:		  tmp_70	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#test.select(lng(0),lng(1)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.insert(oid(1),lng(1));
#test.select(lng(0)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.select(lng(60000401)).print();
#---------------------------------#
# BAT:		  tmp_70	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#test.select(lng(0),lng(1)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
[ 1@0,	  1	  ]

# 14:17:56 >  
# 14:17:56 >  Done.
# 14:17:56 >  

