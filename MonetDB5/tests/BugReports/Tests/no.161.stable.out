stdout of test 'no.161` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.161 milS
#> Mtest:	Mtimeout -timeout 900 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.161.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Sat Feb  5 04:39:19 MET 2000.
#script:no.161.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         161
# >Category:       Mserver
# >Synopsis:       tostr problem when str module is loaded
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Wed Jul 15 15:24:01 1998
# >Originator:     windhouw@cwi.nl
# >Organization:
# CWI
# >Release:        980101
# >Environment:
# 
# >Description:
# In the following script the string becomes different
# in the inner procedure (when the str module is loaded):
# 
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("# >Number:         161\n");
#	mil.line("# >Category:       Mserver\n");
#	mil.line("# >Synopsis:       tostr problem when str module is loaded\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       critical\n");
#	mil.line("# >Priority:       high\n");
#	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
#	mil.line("# >State:          open\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Wed Jul 15 15:24:01 1998\n");
#	mil.line("# >Originator:     windhouw@cwi.nl\n");
#	mil.line("# >Organization:\n");
#	mil.line("# CWI\n");
#	mil.line("# >Release:        980101\n");
#	mil.line("# >Environment:\n");
#	mil.line("# \n");
#	mil.line("# >Description:\n");
#	mil.line("# In the following script the string becomes different\n");
#	mil.line("# in the inner procedure (when the str module is loaded):\n");
#	mil.line("# \n");
#	mil.line("# Script\n");
#	mil.line("# 8<-----\n");
#	mil.line("# PROC test_inner(any in) : void {\n");
#	mil.line("#    printf(\"test_inner.in: %s\\n\",str(in));\n");
#	mil.line("# }\n");
#	mil.line("#  \n");
#	mil.line("# PROC test_outer(any in) : void {\n");
#	mil.line("#    printf(\"test_outer.in: %s\\n\",str(in));\n");
#	mil.line("#    test_inner(in);\n");
#	mil.line("# }\n");
#	mil.line("# 8<-----\n");
#	mil.line("# Output\n");
#	mil.line("# 8<-----\n");
#	mil.line("# >test_outer(\"chr\");\n");
#	mil.line("# test_outer.in: chr\n");
#	mil.line("# test_inner.in: chr\n");
#	mil.line("# >module(str);\n");
#	mil.line("# >test_outer(\"chr\");\n");
#	mil.line("# test_outer.in: chr\n");
#	mil.line("# test_inner.in: test_inner.in: %s\n");
#	mil.line("# 8<----\n");
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("PROC test_inner(any in) : void {");
#function test_inner(in:any):void;
#	mil.line("   printf(\"test_inner.in: %s\\n\",str(in));");
#	ca_a := str(in);
#	da_a := printf("test_inner.in: %s\n",ca_a);
#end test_inner;
function Admin.test_inner(in:any):void;	# 0  (test_inner:void)<-(in:any)
    mil.line("   printf(\"test_inner.in: %s\\n\",str(in));");	# 1 MILline ($2:void)<-($3:str)
    ca_a := calc.str(in);	# 2 CALCstr2str (ca_a:str)<-(in:any)
    da_a := io.printf("test_inner.in: %s\n",ca_a);	# 3 IOprint_formatted_str (da_a:int)<-($6:str)(ca_a:str)
end test_inner;	# 4  
#	mil.line("PROC test_outer(any in) : void {");
#function test_outer(in:any):void;
#	mil.line("   printf(\"test_outer.in: %s\\n\",str(in));");
#	ea_a := str(in);
#	fa_a := printf("test_outer.in: %s\n",ea_a);
#	mil.line("   test_inner(in);");
#	ga_a := test_inner(in);
#end test_outer;
function Admin.test_outer(in:any):void;	# 0  (test_outer:void)<-(in:any)
    mil.line("   printf(\"test_outer.in: %s\\n\",str(in));");	# 1 MILline ($2:void)<-($3:str)
    ea_a := calc.str(in);	# 2 CALCstr2str (ea_a:str)<-(in:any)
    fa_a := io.printf("test_outer.in: %s\n",ea_a);	# 3 IOprint_formatted_str (fa_a:int)<-($6:str)(ea_a:str)
    mil.line("   test_inner(in);");	# 4 MILline ($7:void)<-($8:str)
    ga_a := Admin.test_inner(in);	# 5  (ga_a:void)<-(in:any)
end test_outer;	# 6  
#	mil.line("test_outer(\"chr\");");
#	ha_a := test_outer("chr");
#	mil.line("test_outer(\"chr\");");
#	ia_a := test_outer("chr");
#	mil.line("quit();");
#	ja_a := quit();
#  
function Admin.main():int;	# 0  (main:int)
    mil.line("# >Number:         161\n");	# 1 MILline ($1:void)<-($2:str)
    mil.line("# >Category:       Mserver\n");	# 2 MILline ($3:void)<-($4:str)
    mil.line("# >Synopsis:       tostr problem when str module is loaded\n");	# 3 MILline ($5:void)<-($6:str)
    mil.line("# >Confidential:   no\n");	# 4 MILline ($7:void)<-($8:str)
    mil.line("# >Severity:       critical\n");	# 5 MILline ($9:void)<-($10:str)
    mil.line("# >Priority:       high\n");	# 6 MILline ($11:void)<-($12:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 7 MILline ($13:void)<-($14:str)
    mil.line("# >State:          open\n");	# 8 MILline ($15:void)<-($16:str)
    mil.line("# >Class:          sw-bug\n");	# 9 MILline ($17:void)<-($18:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Arrival-Date:   Wed Jul 15 15:24:01 1998\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Originator:     windhouw@cwi.nl\n");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Organization:\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# CWI\n");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >Release:        980101\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >Environment:\n");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# \n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >Description:\n");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# In the following script the string becomes different\n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# in the inner procedure (when the str module is loaded):\n");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# \n");	# 21 MILline ($41:void)<-($34:str)
    mil.line("# Script\n");	# 22 MILline ($42:void)<-($43:str)
    mil.line("# 8<-----\n");	# 23 MILline ($44:void)<-($45:str)
    mil.line("# PROC test_inner(any in) : void {\n");	# 24 MILline ($46:void)<-($47:str)
    mil.line("#    printf(\"test_inner.in: %s\\n\",str(in));\n");	# 25 MILline ($48:void)<-($49:str)
    mil.line("# }\n");	# 26 MILline ($50:void)<-($51:str)
    mil.line("#  \n");	# 27 MILline ($52:void)<-($53:str)
    mil.line("# PROC test_outer(any in) : void {\n");	# 28 MILline ($54:void)<-($55:str)
    mil.line("#    printf(\"test_outer.in: %s\\n\",str(in));\n");	# 29 MILline ($56:void)<-($57:str)
    mil.line("#    test_inner(in);\n");	# 30 MILline ($58:void)<-($59:str)
    mil.line("# }\n");	# 31 MILline ($60:void)<-($51:str)
    mil.line("# 8<-----\n");	# 32 MILline ($61:void)<-($45:str)
    mil.line("# Output\n");	# 33 MILline ($62:void)<-($63:str)
    mil.line("# 8<-----\n");	# 34 MILline ($64:void)<-($45:str)
    mil.line("# >test_outer(\"chr\");\n");	# 35 MILline ($65:void)<-($66:str)
    mil.line("# test_outer.in: chr\n");	# 36 MILline ($67:void)<-($68:str)
    mil.line("# test_inner.in: chr\n");	# 37 MILline ($69:void)<-($70:str)
    mil.line("# >module(str);\n");	# 38 MILline ($71:void)<-($72:str)
    mil.line("# >test_outer(\"chr\");\n");	# 39 MILline ($73:void)<-($66:str)
    mil.line("# test_outer.in: chr\n");	# 40 MILline ($74:void)<-($68:str)
    mil.line("# test_inner.in: test_inner.in: %s\n");	# 41 MILline ($75:void)<-($76:str)
    mil.line("# 8<----\n");	# 42 MILline ($77:void)<-($78:str)
    mil.line("setoid(oid(20000000));");	# 43 MILline ($79:void)<-($80:str)
    aa_a := calc.oid(20000000);	# 44 CALCint2oid (aa_a:oid)<-($82:int)
    ba_a := calc.setoid(aa_a);	# 45 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("PROC test_inner(any in) : void {");	# 46 MILline ($84:void)<-($85:str)
    mil.line("PROC test_outer(any in) : void {");	# 47 MILline ($86:void)<-($87:str)
    mil.line("test_outer(\"chr\");");	# 48 MILline ($88:void)<-($89:str)
    ha_a := Admin.test_outer("chr");	# 49  (ha_a:void)<-($91:str)
    mil.line("test_outer(\"chr\");");	# 50 MILline ($92:void)<-($89:str)
    ia_a := Admin.test_outer("chr");	# 51  (ia_a:str)<-($91:str)
    mil.line("quit();");	# 52 MILline ($94:void)<-($95:str)
    ja_a := clients.quit();	# 53 CLTquit (ja_a:void)
end main;	# 54  
## >Number:         161
## >Category:       Mserver
## >Synopsis:       tostr problem when str module is loaded
## >Confidential:   no
## >Severity:       critical
## >Priority:       high
## >Responsible:    boncz (Peter Boncz)
## >State:          open
## >Class:          sw-bug
## >Submitter-Id:   unknown
## >Arrival-Date:   Wed Jul 15 15:24:01 1998
## >Originator:     windhouw@cwi.nl
## >Organization:
## CWI
## >Release:        980101
## >Environment:
## 
## >Description:
## In the following script the string becomes different
## in the inner procedure (when the str module is loaded):
## 
## Script
## 8<-----
## PROC test_inner(any in) : void {
##    printf("test_inner.in: %s\n",str(in));
## }
##  
## PROC test_outer(any in) : void {
##    printf("test_outer.in: %s\n",str(in));
##    test_inner(in);
## }
## 8<-----
## Output
## 8<-----
## >test_outer("chr");
## test_outer.in: chr
## test_inner.in: chr
## >module(str);
## >test_outer("chr");
## test_outer.in: chr
## test_inner.in: test_inner.in: %s
## 8<----
#setoid(oid(20000000));
#PROC test_inner(any in) : void {
#PROC test_outer(any in) : void {
#test_outer("chr");
#    printf("test_outer.in: %s\n",str(in));
test_outer.in: chr
test_inner.in: chr
#test_outer("chr");
#   printf("test_outer.in: %s\n",str(in));
test_outer.in: chr
test_inner.in: chr

# 21:16:01 >  
# 21:16:01 >  Done.
# 21:16:01 >  

