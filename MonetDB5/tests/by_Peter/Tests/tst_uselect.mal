# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
function genbat(size:int, perc:int):bat[:void,:oid];
#    var b := new(void, oid, size);
	b := new(:void,:oid,size);
#    var t := new(void, oid, 100);
	t := new(:void,:oid,100);
#    var i := 0;
	i := 0;
#    while(i < 100) {
barrier	aa_a := true;
barrier	ba_a := <(i,100);
#        if (i < perc) {
barrier	ca_a := <(i,perc);
#            t.insert(nil,nil);
	nil:= mil.take("nil");
	da_a := insert(t,nil,nil);
exit	ca_a;
#        } else {
barrier	ea_a := not(ca_a);
#            t.insert(nil,oid(i));
	fa_a := oid(i);
	ga_a := insert(t,nil,fa_a);
exit	ea_a;
redo	aa_a;
exit	ba_a;
exit	aa_a;
#    i := size / 100;
	i := /(size,100);
#    while((i :-= 1) >= 0) {
barrier	ha_a := true;
barrier	ia_a := >=(i,0);
#	b.insert(t);
	ja_a := insert(b,t);
redo	ha_a;
exit	ia_a;
exit	ha_a;
#    return b.seqbase(0@0);
	return ka_a :=bat.setSequenceBase(b,0@0);
end genbat;
#var size := 10000;
	size := 10000;
#while(size <= 1000000) {
barrier	la_a := true;
barrier	ma_a := <=(size,1000000);
#    var perc := 0;
	perc := 0;
#    while(perc <= 100) {
barrier	na_a := true;
barrier	oa_a := <=(perc,100);
#	  var m := debugmask();
	m := debugmask();
# 	  debugmask(2);
	pa_a := debugmask(2);
#          var b := genbat(size, perc);
	b := genbat(size,perc);
#          debugmask(m);
	qa_a := debugmask(m);
#          kdiff(b,b.uselect(nil)).count().print(); 
	nil:= mil.take("nil");
	ra_a := uselect(b,nil);
	sa_a := kdiff(b,ra_a);
	ta_a := count(sa_a,);
	ua_a := print(ta_a,);
#          printf("kdiff(b,b.uselect(nil)) size=%d perc=%d\n", size, perc);
	va_a := printf("kdiff(b,b.uselect(nil)) size=%d perc=%d\n",size,perc);
#          [ifelse]([isnil](b), b).count().print(); 
	wa_a := multiplex.tactics("isnil",b);
	xa_a := multiplex.tactics("ifelse",wa_a,b);
	ya_a := count(xa_a,);
	ab_a := print(ya_a,);
#          printf("[ifelse]([isnil](b),b) size=%d perc=%d\n", size, perc);
	bb_a := printf("[ifelse]([isnil](b),b) size=%d perc=%d\n",size,perc);
redo	na_a;
exit	oa_a;
exit	na_a;
redo	la_a;
exit	ma_a;
exit	la_a;
#quit();
	cb_a := quit();
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
