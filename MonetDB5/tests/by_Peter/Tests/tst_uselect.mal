# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("proc genbat(int size, int perc) : bat[void,oid] {");
function genbat(size:int, perc:int):bat[:void,:oid];
	mil.line("    var b := new(void, oid, size);");
	b := new(nil:void,nil:oid,size);
	mil.line("    var t := new(void, oid, 100);");
	t := new(nil:void,nil:oid,100);
	mil.line("    var i := 0;");
	i := 0;
	mil.line("    while(i < 100) {");
barrier	aa_a := true;
barrier	ba_a := <(i,100);
	mil.line("        if (i < perc) {");
barrier	ca_a := <(i,perc);
	mil.line("            t.insert(nil,nil);");
	da_a := insert(t,nil,nil);
	mil.line("        } else {");
exit	ca_a;
barrier	ea_a := not(ca_a);
	mil.line("            t.insert(nil,oid(i));");
	fa_a := oid(i);
	ga_a := insert(t,nil,fa_a);
exit	ea_a;
	mil.line("        i :+= 1;");
	ha_a := +(i,1);
	mil.line("    }");
redo	aa_a;
exit	ba_a;
exit	aa_a;
	mil.line("    i := size / 100;");
	i := /(size,100);
	mil.line("    while((i :-= 1) >= 0) {");
barrier	ia_a := true;
	ka_a := -(i,1);
barrier	ja_a := >=(ka_a,0);
	mil.line("\tb.insert(t);");
	la_a := insert(b,t);
	mil.line("    }");
redo	ia_a;
exit	ja_a;
exit	ia_a;
	mil.line("    return b.seqbase(0@0);");
	return ma_a :=bat.setSequenceBase(b,0@0);
end genbat;
	mil.line("var size := 10000;");
	size := 10000;
	mil.line("while(size <= 1000000) {");
barrier	na_a := true;
barrier	oa_a := <=(size,1000000);
	mil.line("    var perc := 0;");
	perc := 0;
	mil.line("    while(perc <= 100) {");
barrier	pa_a := true;
barrier	qa_a := <=(perc,100);
	mil.line("\t  var m := debugmask();");
	m := setDebug();
	mil.line(" \t  debugmask(2);");
	ra_a := setDebug(2);
	mil.line("          var b := genbat(size, perc);");
	b := genbat(size,perc);
	mil.line("          debugmask(m);");
	sa_a := setDebug(m);
	mil.line("          kdiff(b,b.uselect(nil)).count().print(); ");
	ta_a := uselect(b,nil);
	ua_a := kdiff(b,ta_a);
	va_a := count(ua_a);
	wa_a := print(va_a);
	mil.line("          printf(\"kdiff(b,b.uselect(nil)) size=%d perc=%d\\n\", size, perc);");
	xa_a := printf("kdiff(b,b.uselect(nil)) size=%d perc=%d\n",size,perc);
	mil.line("          [ifelse]([isnil](b), b).count().print(); ");
	ya_a := multiplex.tactics("isnil",b);
	ab_a := multiplex.tactics("ifelse",ya_a,b);
	bb_a := count(ab_a);
	cb_a := print(bb_a);
	mil.line("          printf(\"[ifelse]([isnil](b),b) size=%d perc=%d\\n\", size, perc);");
	db_a := printf("[ifelse]([isnil](b),b) size=%d perc=%d\n",size,perc);
	mil.line("          perc :+= 10;");
	eb_a := +(perc,10);
	mil.line("    }");
redo	pa_a;
exit	qa_a;
exit	pa_a;
	mil.line("    size :*= 10;");
	fb_a := *(size,10);
	mil.line("}");
redo	na_a;
exit	oa_a;
exit	na_a;
	mil.line("quit();");
	gb_a := quit();
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
#Identifer 'debugmask' mapped to 'setDebug'
