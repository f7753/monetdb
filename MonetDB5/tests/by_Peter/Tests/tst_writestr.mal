# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("# test memory map of string heap under append\n");
	aa_a := *(128,1024);
	ba_a := lng(aa_a);
	ca_a := vm_minsize(ba_a);
	mil.line("var i := 0;");
	i := 0;
	mil.line("var b := 500000;");
	b := 500000;
	mil.line("#BIG := new(void,int,50000000); # claim 200MB\n");
	da_a := new(nil:void,nil:int,b);
	d := bat.setSequenceBase(da_a,0@0);
	mil.line("# temporarily disable propmask in order to make this bearable\n");
	m := setDebug();
	mil.line("debugmask(2);");
	ea_a := setDebug(2);
	mil.line("while(i < b) { d.insert(nil,i :+= 1);}");
barrier	fa_a := true;
barrier	ga_a := <(i,b);
	ha_a := +(i,1);
	ia_a := insert(d,nil,ha_a);
redo	fa_a;
exit	ga_a;
exit	fa_a;
	mil.line("debugmask(m);");
	ja_a := setDebug(m);
	mil.line(" new(void,str,1000000).seqbase(0@0).access(BAT_WRITE).rename(\"aa\").persists(true);");
	ka_a := new(nil:void,nil:str,1000000);
	BAT_WRITE:= mil.take("BAT_WRITE");
	la_a := bat.setSequenceBase(ka_a,0@0);
	ma_a := access(la_a,BAT_WRITE);
	na_a := bat.setName(ma_a,"aa");
	oa_a := persists(na_a,true);
	mil.line(" unload(\"aa\");");
	pa_a := unload("aa");
	mil.line("commit;");
	commit:= mil.take("commit");
	mil.line("i := 0;");
	i := 0;
	mil.line("while(true) { ");
barrier	qa_a := true;
barrier	ra_a := true;
	mil.line(" bat(\"aa\").info().reverse().select(\"theap.storage\").reverse().print();");
	sa_a := new("aa");
	ta_a := info(sa_a);
	ua_a := reverse(ta_a);
	va_a := select(ua_a,"theap.storage");
	wa_a := reverse(va_a);
	xa_a := print(wa_a);
	mil.line(" var e := [str]([+](d,b));");
	ya_a := multiplex.tactics("+",d,b);
	e := multiplex.tactics("str",ya_a);
	mil.line("#e := [str]([/](d,10000));\n");
	ab_a := +(b,500000);
	bb_a := print(ab_a);
	mil.line(" bat(\"aa\").insert(e);");
	cb_a := new("aa");
	db_a := insert(cb_a,e);
	mil.line(" bat(\"aa\").mmap(1,1,1,1,1);");
	eb_a := new("aa");
	fb_a := mmap(eb_a,1,1,1,1,1);
	mil.line(" i :+= 1;");
	gb_a := +(i,1);
	mil.line(" if (i = 4) { shutdown(); }");
barrier	hb_a := ==(i,4);
	ib_a := shutdown();
	mil.line(" unload(\"aa\");");
exit	hb_a;
	jb_a := unload("aa");
	mil.line("}");
redo	qa_a;
exit	ra_a;
exit	qa_a;
	mil.line("quit();");
	kb_a := quit();
#Identifer 'rename' mapped to 'bat.setName'
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
#Identifer 'debugmask' mapped to 'setDebug'
