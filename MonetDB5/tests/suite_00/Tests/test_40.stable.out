stdout of test 'test_40` in directory 'tests/suite_00` itself:

#> Mtest (21:55:06):	milS test_40 milS
#> Mtest (21:55:06):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_40.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_40.milS

# 10:14:27 >  
# 10:14:27 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=45534 --set sql_port=55728 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_40.mal </dev/null
# 10:14:27 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("# Some applications may wish to directly access the buns\n");
#	mil.line("# i.e. they use a BAT like an array.");
#	mil.line("# i.e. they use a BAT like an array.\n");
#	mil.line("var b:= new(int,int);");
#	b := new(nil:int,nil:int);
#	mil.line("b.rename(\"b\");");
#	ca_a := bat.setName(b,"b");
#	mil.line("b.insert(1,15);");
#	da_a := insert(b,1,15);
#	mil.line("b.insert(2,4);");
#	ea_a := insert(b,2,4);
#	mil.line("b.insert(3,int(nil));");
#	fa_a := int(nil);
#	ga_a := insert(b,3,fa_a);
#	mil.line("b.insert(4,16);");
#	ha_a := insert(b,4,16);
#	mil.line("b.insert(5,25);");
#	ia_a := insert(b,5,25);
#	mil.line("b.insert(6,36);");
#	ja_a := insert(b,6,36);
#	mil.line("b.insert(7,49);");
#	ka_a := insert(b,7,49);
#	mil.line("b.insert(8,64);");
#	la_a := insert(b,8,64);
#	mil.line("b.insert(9,int(nil));");
#	ma_a := int(nil);
#	na_a := insert(b,9,ma_a);
#	mil.line("b.insert(int(nil),int(nil));");
#	oa_a := int(nil);
#	pa_a := int(nil);
#	qa_a := insert(b,oa_a,pa_a);
#	mil.line("b.insert(int(nil),81);");
#	ra_a := int(nil);
#	sa_a := insert(b,ra_a,81);
#	mil.line("#b.rename(\"b\");\n");
#	mil.line("");
#	mil.line("b.save();");
#	ta_a := bat.save(b);
#	mil.line("load(\"b\");");
#	ua_a := bat.load("b");
#	mil.line("b.position(4).print();");
#	va_a := position(b,4);
#	wa_a := print(va_a);
#	mil.line("b.fetch(5).print();");
#	xa_a := fetch(b,5);
#	ya_a := print(xa_a);
#	mil.line("b.fetch(8).print();");
#	ab_a := fetch(b,8);
#	bb_a := print(ab_a);
#	mil.line("b.slice(5,8).print();");
#	cb_a := slice(b,5,8);
#	db_a := print(cb_a);
#	mil.line("# errors\n");
#	mil.line("b.position(111).print();");
#	eb_a := position(b,111);
#	fb_a := print(eb_a);
#	mil.line("b.fetch(-1).print();");
#	gb_a := fetch(b,-1);
#	hb_a := print(gb_a);
#	mil.line("b.slice(8,5).print();");
#	ib_a := slice(b,8,5);
#	jb_a := print(ib_a);
#	mil.line("quit();");
#	kb_a := quit();
##Identifer 'rename' mapped to 'bat.setName'
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($31:void)<-($32:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($34:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# Some applications may wish to directly access the buns\n");	# 4 MILline ($36:void)<-($37:str)
    mil.line("# i.e. they use a BAT like an array.\n");	# 5 MILline ($38:void)<-($39:str)
    b := bbp.new(nil:int,nil:int);	# 6 CMDBATnew (b:bat[:int,:int])<-($41:int)($41:int)
    mil.line("b.rename(\"b\");");	# 7 MILline ($42:void)<-($43:str)
    ca_a := bat.setName(b,"b");	# 8 BKCsetName (ca_a:void)<-(b:bat[:int,:int])($45:str)
    mil.line("b.insert(1,15);");	# 9 MILline ($46:void)<-($47:str)
    da_a := mil_insert.insert(b,1,15);	# 10 MILinsert_bun (da_a:bat[:int,:int])<-(b:bat[:int,:int])($49:int)($50:int)
    mil.line("b.insert(2,4);");	# 11 MILline ($51:void)<-($52:str)
    ea_a := mil_insert.insert(b,2,4);	# 12 MILinsert_bun (ea_a:bat[:int,:int])<-(b:bat[:int,:int])($54:int)($55:int)
    mil.line("b.insert(3,int(nil));");	# 13 MILline ($56:void)<-($57:str)
    fa_a := calc.int(nil);	# 14 CALCnil2int (fa_a:int)<-($59:void)
    ga_a := mil_insert.insert(b,3,fa_a);	# 15 MILinsert_bun (ga_a:bat[:int,:int])<-(b:bat[:int,:int])($61:int)(fa_a:int)
    mil.line("b.insert(4,16);");	# 16 MILline ($62:void)<-($63:str)
    ha_a := mil_insert.insert(b,4,16);	# 17 MILinsert_bun (ha_a:bat[:int,:int])<-(b:bat[:int,:int])($55:int)($65:int)
    mil.line("b.insert(5,25);");	# 18 MILline ($66:void)<-($67:str)
    ia_a := mil_insert.insert(b,5,25);	# 19 MILinsert_bun (ia_a:bat[:int,:int])<-(b:bat[:int,:int])($69:int)($70:int)
    mil.line("b.insert(6,36);");	# 20 MILline ($71:void)<-($72:str)
    ja_a := mil_insert.insert(b,6,36);	# 21 MILinsert_bun (ja_a:bat[:int,:int])<-(b:bat[:int,:int])($74:int)($75:int)
    mil.line("b.insert(7,49);");	# 22 MILline ($76:void)<-($77:str)
    ka_a := mil_insert.insert(b,7,49);	# 23 MILinsert_bun (ka_a:bat[:int,:int])<-(b:bat[:int,:int])($79:int)($80:int)
    mil.line("b.insert(8,64);");	# 24 MILline ($81:void)<-($82:str)
    la_a := mil_insert.insert(b,8,64);	# 25 MILinsert_bun (la_a:bat[:int,:int])<-(b:bat[:int,:int])($84:int)($85:int)
    mil.line("b.insert(9,int(nil));");	# 26 MILline ($86:void)<-($87:str)
    ma_a := calc.int(nil);	# 27 CALCnil2int (ma_a:int)<-($59:void)
    na_a := mil_insert.insert(b,9,ma_a);	# 28 MILinsert_bun (na_a:bat[:int,:int])<-(b:bat[:int,:int])($90:int)(ma_a:int)
    mil.line("b.insert(int(nil),int(nil));");	# 29 MILline ($91:void)<-($92:str)
    oa_a := calc.int(nil);	# 30 CALCnil2int (oa_a:int)<-($94:void)
    pa_a := calc.int(nil);	# 31 CALCnil2int (pa_a:int)<-($94:void)
    qa_a := mil_insert.insert(b,oa_a,pa_a);	# 32 MILinsert_bun (qa_a:bat[:int,:int])<-(b:bat[:int,:int])(oa_a:int)(pa_a:int)
    mil.line("b.insert(int(nil),81);");	# 33 MILline ($97:void)<-($98:str)
    ra_a := calc.int(nil);	# 34 CALCnil2int (ra_a:int)<-($94:void)
    sa_a := mil_insert.insert(b,ra_a,81);	# 35 MILinsert_bun (sa_a:bat[:int,:int])<-(b:bat[:int,:int])(ra_a:int)($101:int)
    mil.line("#b.rename(\"b\");\n");	# 36 MILline ($102:void)<-($103:str)
    mil.line("b.save();");	# 37 MILline ($104:void)<-($105:str)
    ta_a := bat.save(b);	# 38 BKCsave2 (ta_a:bit)<-(b:bat[:int,:int])
    mil.line("load(\"b\");");	# 39 MILline ($107:void)<-($108:str)
    ua_a := bat.load("b");	# 40 BKCload (ua_a:bat[:any,:any])<-($110:str)
    mil.line("b.position(4).print();");	# 41 MILline ($111:void)<-($112:str)
    va_a := algebra.position(b,4);	# 42 ALGposition (va_a:int)<-(b:bat[:int,:int])($114:int)
    wa_a := io.print(va_a);	# 43 IOprint_val (wa_a:int)<-(va_a:int)
    mil.line("b.fetch(5).print();");	# 44 MILline ($116:void)<-($117:str)
    xa_a := algebra.fetch(b,5);	# 45 ALGfetchint (xa_a:int)<-(b:bat[:int,:int])($119:int)
    ya_a := io.print(xa_a);	# 46 IOprint_val (ya_a:int)<-(xa_a:int)
    mil.line("b.fetch(8).print();");	# 47 MILline ($121:void)<-($122:str)
    ab_a := algebra.fetch(b,8);	# 48 ALGfetchint (ab_a:int)<-(b:bat[:int,:int])($124:int)
    bb_a := io.print(ab_a);	# 49 IOprint_val (bb_a:int)<-(ab_a:int)
    mil.line("b.slice(5,8).print();");	# 50 MILline ($126:void)<-($127:str)
    cb_a := algebra.slice(b,5,8);	# 51 ALGslice (cb_a:bat[:int,:int])<-(b:bat[:int,:int])($119:int)($124:int)
    db_a := io.print(cb_a);	# 52 IOprint_val (db_a:int)<-(cb_a:bat[:int,:int])
    mil.line("# errors\n");	# 53 MILline ($130:void)<-($131:str)
    eb_a := algebra.position(b,111);	# 54 ALGposition (eb_a:int)<-(b:bat[:int,:int])($133:int)
    fb_a := io.print(eb_a);	# 55 IOprint_val (fb_a:int)<-(eb_a:int)
    mil.line("b.fetch(-1).print();");	# 56 MILline ($135:void)<-($136:str)
    gb_a := algebra.fetch(b,-1);	# 57 ALGfetchint (gb_a:int)<-(b:bat[:int,:int])($138:int)
    hb_a := io.print(gb_a);	# 58 IOprint_val (hb_a:int)<-(gb_a:int)
    mil.line("b.slice(8,5).print();");	# 59 MILline ($140:void)<-($141:str)
    ib_a := algebra.slice(b,8,5);	# 60 ALGslice (ib_a:bat[:int,:int])<-(b:bat[:int,:int])($124:int)($119:int)
    jb_a := io.print(ib_a);	# 61 IOprint_val (jb_a:int)<-(ib_a:bat[:int,:int])
    mil.line("quit();");	# 62 MILline ($144:void)<-($145:str)
    kb_a := clients.quit();	# 63 CLTquit (kb_a:void)
end main;	# 64  
#setoid(oid(20000000));
## Some applications may wish to directly access the buns
## i.e. they use a BAT like an array.
## i.e. they use a BAT like an array.
#var b:= new(int,int);
#b.rename("b");
#b.insert(1,15);
#b.insert(2,4);
#b.insert(3,int(nil));
#b.insert(4,16);
#b.insert(5,25);
#b.insert(6,36);
#b.insert(7,49);
#b.insert(8,64);
#b.insert(9,int(nil));
#b.insert(int(nil),int(nil));
#b.insert(int(nil),81);
##b.rename("b");
#
#b.save();
#load("b");
#b.position(4).print();
[ 3 ]
#b.fetch(5).print();
[ 36 ]
#b.fetch(8).print();
[ nil ]
#b.slice(5,8).print();
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
## errors
#b.position(111).print();
[ 0 ]
#b.fetch(-1).print();

!ERROR: CMDposition: item not found
!ERROR: MALexception:algebra.fetch: idx out of range

# 22:47:59 >  
# 22:47:59 >  Done.
# 22:47:59 >  

