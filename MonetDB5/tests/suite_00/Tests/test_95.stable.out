stdout of test 'test_95` in directory 'tests/suite_00` itself:

#> Mtest (20:57:36):	milS test_95 milS
#> Mtest (20:57:36):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_95.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_95.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
## Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("# test the new set operations\n");
#	mil.line("var b := new(int,int);");
#	b := new(:int,:int);
#	mil.line("var c := new(int,int);");
#	c := new(:int,:int);
#	mil.line("b.insert(3,5);");
#	ca_a := insert(b,3,5);
#	mil.line("b.insert(3,6);");
#	da_a := insert(b,3,6);
#	mil.line("b.insert(4,5);");
#	ea_a := insert(b,4,5);
#	mil.line("b.insert(4,6);");
#	fa_a := insert(b,4,6);
#	mil.line("b.insert(8,10);");
#	ga_a := insert(b,8,10);
#	mil.line("b.insert(8,11);");
#	ha_a := insert(b,8,11);
#	mil.line("b.insert(9,10);");
#	ia_a := insert(b,9,10);
#	mil.line("b.insert(9,11);");
#	ja_a := insert(b,9,11);
#	mil.line("b.insert(9,11);");
#	ka_a := insert(b,9,11);
#	mil.line("c.insert(3,10);");
#	la_a := insert(c,3,10);
#	mil.line("c.insert(3,5);");
#	ma_a := insert(c,3,5);
#	mil.line("c.insert(8,10);");
#	na_a := insert(c,8,10);
#	mil.line("c.insert(8,5);");
#	oa_a := insert(c,8,5);
#	mil.line("b.sunique().print();");
#	pa_a := sunique(b);
#	qa_a := print(pa_a);
#	mil.line("b.kunique().print();");
#	ra_a := kunique(b);
#	sa_a := print(ra_a);
#	mil.line("sintersect(c,b).print();");
#	ta_a := sintersect(c,b);
#	ua_a := print(ta_a);
#	mil.line("kintersect(c,b).print();");
#	va_a := kintersect(c,b);
#	wa_a := print(va_a);
#	mil.line("kintersect(b,c).print();");
#	xa_a := kintersect(b,c);
#	ya_a := print(xa_a);
#	mil.line("sdiff(c,b).print();");
#	ab_a := sdiff(c,b);
#	bb_a := print(ab_a);
#	mil.line("kdiff(b,c).print();");
#	cb_a := kdiff(b,c);
#	db_a := print(cb_a);
#	mil.line("sdiff(b,c).print();");
#	eb_a := sdiff(b,c);
#	fb_a := print(eb_a);
#	mil.line("kdiff(b,c).print();");
#	gb_a := kdiff(b,c);
#	hb_a := print(gb_a);
#	mil.line("sunion(c,b).print();");
#	ib_a := sunion(c,b);
#	jb_a := print(ib_a);
#	mil.line("kunion(c,b).print();");
#	kb_a := kunion(c,b);
#	lb_a := print(kb_a);
#	mil.line("kunion(b,c).print();");
#	mb_a := kunion(b,c);
#	nb_a := print(mb_a);
#	mil.line("b.insert(0,0);");
#	ob_a := insert(b,0,0);
#	mil.line("c.insert(0,0);");
#	pb_a := insert(c,0,0);
#	mil.line("b.sunique().print();");
#	qb_a := sunique(b);
#	rb_a := print(qb_a);
#	mil.line("b.kunique().print();");
#	sb_a := kunique(b);
#	tb_a := print(sb_a);
#	mil.line("sintersect(c,b).print();");
#	ub_a := sintersect(c,b);
#	vb_a := print(ub_a);
#	mil.line("kintersect(c,b).print();");
#	wb_a := kintersect(c,b);
#	xb_a := print(wb_a);
#	mil.line("kintersect(b,c).print();");
#	yb_a := kintersect(b,c);
#	ac_a := print(yb_a);
#	mil.line("sdiff(c,b).print();");
#	bc_a := sdiff(c,b);
#	cc_a := print(bc_a);
#	mil.line("kdiff(b,c).print();");
#	dc_a := kdiff(b,c);
#	ec_a := print(dc_a);
#	mil.line("sdiff(b,c).print();");
#	fc_a := sdiff(b,c);
#	gc_a := print(fc_a);
#	mil.line("kdiff(b,c).print();");
#	hc_a := kdiff(b,c);
#	ic_a := print(hc_a);
#	mil.line("sunion(c,b).print();");
#	jc_a := sunion(c,b);
#	kc_a := print(jc_a);
#	mil.line("kunion(c,b).print();");
#	lc_a := kunion(c,b);
#	mc_a := print(lc_a);
#	mil.line("kunion(b,c).print();");
#	nc_a := kunion(b,c);
#	oc_a := print(nc_a);
#	mil.line("quit();");
#	pc_a := quit();
#
function user.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# test the new set operations\n");	# 4 MILline ($6:void)<-($7:str)
    mil.line("var b := bbp.new(int,int);");	# 5 MILline ($8:void)<-($9:str)
    b := bbp.new(nil:int,nil:int);	# 6 CMDBATnew (b:bat[:int,:int])<-($11:int)($11:int)
    mil.line("var c := bbp.new(int,int);");	# 7 MILline ($12:void)<-($13:str)
    c := bbp.new(nil:int,nil:int);	# 8 CMDBATnew (c:bat[:int,:int])<-($11:int)($11:int)
    mil.line("b.insert(3,5);");	# 9 MILline ($15:void)<-($16:str)
    ca_a := bat.insert(b,3,5);	# 10 BKCinsert_bun (ca_a:bat[:int,:int])<-(b:bat[:int,:int])($18:int)($19:int)
    mil.line("b.insert(3,6);");	# 11 MILline ($20:void)<-($21:str)
    da_a := bat.insert(b,3,6);	# 12 BKCinsert_bun (da_a:bat[:int,:int])<-(b:bat[:int,:int])($18:int)($23:int)
    mil.line("b.insert(4,5);");	# 13 MILline ($24:void)<-($25:str)
    ea_a := bat.insert(b,4,5);	# 14 BKCinsert_bun (ea_a:bat[:int,:int])<-(b:bat[:int,:int])($27:int)($19:int)
    mil.line("b.insert(4,6);");	# 15 MILline ($28:void)<-($29:str)
    fa_a := bat.insert(b,4,6);	# 16 BKCinsert_bun (fa_a:bat[:int,:int])<-(b:bat[:int,:int])($27:int)($23:int)
    mil.line("b.insert(8,10);");	# 17 MILline ($31:void)<-($32:str)
    ga_a := bat.insert(b,8,10);	# 18 BKCinsert_bun (ga_a:bat[:int,:int])<-(b:bat[:int,:int])($34:int)($35:int)
    mil.line("b.insert(8,11);");	# 19 MILline ($36:void)<-($37:str)
    ha_a := bat.insert(b,8,11);	# 20 BKCinsert_bun (ha_a:bat[:int,:int])<-(b:bat[:int,:int])($34:int)($39:int)
    mil.line("b.insert(9,10);");	# 21 MILline ($40:void)<-($41:str)
    ia_a := bat.insert(b,9,10);	# 22 BKCinsert_bun (ia_a:bat[:int,:int])<-(b:bat[:int,:int])($43:int)($35:int)
    mil.line("b.insert(9,11);");	# 23 MILline ($44:void)<-($45:str)
    ja_a := bat.insert(b,9,11);	# 24 BKCinsert_bun (ja_a:bat[:int,:int])<-(b:bat[:int,:int])($43:int)($39:int)
    mil.line("b.insert(9,11);");	# 25 MILline ($47:void)<-($45:str)
    ka_a := bat.insert(b,9,11);	# 26 BKCinsert_bun (ka_a:bat[:int,:int])<-(b:bat[:int,:int])($43:int)($39:int)
    mil.line("c.insert(3,10);");	# 27 MILline ($49:void)<-($50:str)
    la_a := bat.insert(c,3,10);	# 28 BKCinsert_bun (la_a:bat[:int,:int])<-(c:bat[:int,:int])($52:int)($35:int)
    mil.line("c.insert(3,5);");	# 29 MILline ($53:void)<-($54:str)
    ma_a := bat.insert(c,3,5);	# 30 BKCinsert_bun (ma_a:bat[:int,:int])<-(c:bat[:int,:int])($52:int)($56:int)
    mil.line("c.insert(8,10);");	# 31 MILline ($57:void)<-($58:str)
    na_a := bat.insert(c,8,10);	# 32 BKCinsert_bun (na_a:bat[:int,:int])<-(c:bat[:int,:int])($34:int)($35:int)
    mil.line("c.insert(8,5);");	# 33 MILline ($60:void)<-($61:str)
    oa_a := bat.insert(c,8,5);	# 34 BKCinsert_bun (oa_a:bat[:int,:int])<-(c:bat[:int,:int])($34:int)($56:int)
    mil.line("b.sunique().print();");	# 35 MILline ($63:void)<-($64:str)
    pa_a := algebra.sunique(b);	# 36 ALGsunique (pa_a:bat[:int,:int])<-(b:bat[:int,:int])
    qa_a := io.print(pa_a);	# 37 IOprint_val (qa_a:int)<-(pa_a:bat[:int,:int])
    mil.line("b.kunique().print();");	# 38 MILline ($67:void)<-($68:str)
    ra_a := algebra.kunique(b);	# 39 ALGkunique (ra_a:bat[:int,:int])<-(b:bat[:int,:int])
    sa_a := io.print(ra_a);	# 40 IOprint_val (sa_a:int)<-(ra_a:bat[:int,:int])
    mil.line("sintersect(c,b).print();");	# 41 MILline ($71:void)<-($72:str)
    ta_a := algebra.sintersect(c,b);	# 42 ALGsintersect (ta_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    ua_a := io.print(ta_a);	# 43 IOprint_val (ua_a:int)<-(ta_a:bat[:int,:int])
    mil.line("kintersect(c,b).print();");	# 44 MILline ($75:void)<-($76:str)
    va_a := algebra.kintersect(c,b);	# 45 ALGsemijoin (va_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    wa_a := io.print(va_a);	# 46 IOprint_val (wa_a:int)<-(va_a:bat[:int,:int])
    mil.line("kintersect(b,c).print();");	# 47 MILline ($79:void)<-($80:str)
    xa_a := algebra.kintersect(b,c);	# 48 ALGsemijoin (xa_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    ya_a := io.print(xa_a);	# 49 IOprint_val (ya_a:int)<-(xa_a:bat[:int,:int])
    mil.line("sdiff(c,b).print();");	# 50 MILline ($83:void)<-($84:str)
    ab_a := algebra.sdiff(c,b);	# 51 ALGsdiff (ab_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    bb_a := io.print(ab_a);	# 52 IOprint_val (bb_a:int)<-(ab_a:bat[:int,:int])
    mil.line("kdiff(b,c).print();");	# 53 MILline ($87:void)<-($88:str)
    cb_a := algebra.kdiff(b,c);	# 54 ALGkdiff (cb_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    db_a := io.print(cb_a);	# 55 IOprint_val (db_a:int)<-(cb_a:bat[:int,:int])
    mil.line("sdiff(b,c).print();");	# 56 MILline ($91:void)<-($92:str)
    eb_a := algebra.sdiff(b,c);	# 57 ALGsdiff (eb_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    fb_a := io.print(eb_a);	# 58 IOprint_val (fb_a:int)<-(eb_a:bat[:int,:int])
    mil.line("kdiff(b,c).print();");	# 59 MILline ($95:void)<-($88:str)
    gb_a := algebra.kdiff(b,c);	# 60 ALGkdiff (gb_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    hb_a := io.print(gb_a);	# 61 IOprint_val (hb_a:int)<-(gb_a:bat[:int,:int])
    mil.line("sunion(c,b).print();");	# 62 MILline ($98:void)<-($99:str)
    ib_a := algebra.sunion(c,b);	# 63 ALGsunion (ib_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    jb_a := io.print(ib_a);	# 64 IOprint_val (jb_a:int)<-(ib_a:bat[:int,:int])
    mil.line("kunion(c,b).print();");	# 65 MILline ($102:void)<-($103:str)
    kb_a := algebra.kunion(c,b);	# 66 ALGkunion (kb_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    lb_a := io.print(kb_a);	# 67 IOprint_val (lb_a:int)<-(kb_a:bat[:int,:int])
    mil.line("kunion(b,c).print();");	# 68 MILline ($106:void)<-($107:str)
    mb_a := algebra.kunion(b,c);	# 69 ALGkunion (mb_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    nb_a := io.print(mb_a);	# 70 IOprint_val (nb_a:int)<-(mb_a:bat[:int,:int])
    mil.line("b.insert(0,0);");	# 71 MILline ($110:void)<-($111:str)
    ob_a := bat.insert(b,0,0);	# 72 BKCinsert_bun (ob_a:bat[:int,:int])<-(b:bat[:int,:int])($113:int)($113:int)
    mil.line("c.insert(0,0);");	# 73 MILline ($114:void)<-($115:str)
    pb_a := bat.insert(c,0,0);	# 74 BKCinsert_bun (pb_a:bat[:int,:int])<-(c:bat[:int,:int])($113:int)($113:int)
    mil.line("b.sunique().print();");	# 75 MILline ($117:void)<-($118:str)
    qb_a := algebra.sunique(b);	# 76 ALGsunique (qb_a:bat[:int,:int])<-(b:bat[:int,:int])
    rb_a := io.print(qb_a);	# 77 IOprint_val (rb_a:int)<-(qb_a:bat[:int,:int])
    mil.line("b.kunique().print();");	# 78 MILline ($121:void)<-($122:str)
    sb_a := algebra.kunique(b);	# 79 ALGkunique (sb_a:bat[:int,:int])<-(b:bat[:int,:int])
    tb_a := io.print(sb_a);	# 80 IOprint_val (tb_a:int)<-(sb_a:bat[:int,:int])
    mil.line("sintersect(c,b).print();");	# 81 MILline ($125:void)<-($126:str)
    ub_a := algebra.sintersect(c,b);	# 82 ALGsintersect (ub_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    vb_a := io.print(ub_a);	# 83 IOprint_val (vb_a:int)<-(ub_a:bat[:int,:int])
    mil.line("kintersect(c,b).print();");	# 84 MILline ($129:void)<-($130:str)
    wb_a := algebra.kintersect(c,b);	# 85 ALGsemijoin (wb_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    xb_a := io.print(wb_a);	# 86 IOprint_val (xb_a:int)<-(wb_a:bat[:int,:int])
    mil.line("kintersect(b,c).print();");	# 87 MILline ($133:void)<-($134:str)
    yb_a := algebra.kintersect(b,c);	# 88 ALGsemijoin (yb_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    ac_a := io.print(yb_a);	# 89 IOprint_val (ac_a:int)<-(yb_a:bat[:int,:int])
    mil.line("sdiff(c,b).print();");	# 90 MILline ($137:void)<-($138:str)
    bc_a := algebra.sdiff(c,b);	# 91 ALGsdiff (bc_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    cc_a := io.print(bc_a);	# 92 IOprint_val (cc_a:int)<-(bc_a:bat[:int,:int])
    mil.line("kdiff(b,c).print();");	# 93 MILline ($141:void)<-($142:str)
    dc_a := algebra.kdiff(b,c);	# 94 ALGkdiff (dc_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    ec_a := io.print(dc_a);	# 95 IOprint_val (ec_a:int)<-(dc_a:bat[:int,:int])
    mil.line("sdiff(b,c).print();");	# 96 MILline ($145:void)<-($146:str)
    fc_a := algebra.sdiff(b,c);	# 97 ALGsdiff (fc_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    gc_a := io.print(fc_a);	# 98 IOprint_val (gc_a:int)<-(fc_a:bat[:int,:int])
    mil.line("kdiff(b,c).print();");	# 99 MILline ($149:void)<-($142:str)
    hc_a := algebra.kdiff(b,c);	# 100 ALGkdiff (hc_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    ic_a := io.print(hc_a);	# 101 IOprint_val (ic_a:int)<-(hc_a:bat[:int,:int])
    mil.line("sunion(c,b).print();");	# 102 MILline ($152:void)<-($153:str)
    jc_a := algebra.sunion(c,b);	# 103 ALGsunion (jc_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    kc_a := io.print(jc_a);	# 104 IOprint_val (kc_a:int)<-(jc_a:bat[:int,:int])
    mil.line("kunion(c,b).print();");	# 105 MILline ($156:void)<-($157:str)
    lc_a := algebra.kunion(c,b);	# 106 ALGkunion (lc_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    mc_a := io.print(lc_a);	# 107 IOprint_val (mc_a:int)<-(lc_a:bat[:int,:int])
    mil.line("kunion(b,c).print();");	# 108 MILline ($160:void)<-($161:str)
    nc_a := algebra.kunion(b,c);	# 109 ALGkunion (nc_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    oc_a := io.print(nc_a);	# 110 IOprint_val (oc_a:int)<-(nc_a:bat[:int,:int])
    mil.line("quit();");	# 111 MILline ($164:void)<-($165:str)
    pc_a := clients.quit();	# 112 CLTquit (pc_a:void)
end main;	# 113  
#setoid(oid(20000000));
## test the new set operations
#var b := new(int,int);
#var c := new(int,int);
#b.insert(3,5);
#b.insert(3,6);
#b.insert(4,5);
#b.insert(4,6);
#b.insert(8,10);
#b.insert(8,11);
#b.insert(9,10);
#b.insert(9,11);
#b.insert(9,11);
#c.insert(3,10);
#c.insert(3,5);
#c.insert(8,10);
#c.insert(8,5);
#b.sunique().print();
#-----------------#
# h	tmp_6	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
#b.kunique().print();
#-----------------#
# h	tmp_7	  # name
# int	int	  # type
#-----------------#
[ 3,	  6	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  11	  ]
#sintersect(c,b).print();
#-----------------#
# h	tmp_8	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 8,	  10	  ]
#kintersect(c,b).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
#kintersect(b,c).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
#sdiff(c,b).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  10	  ]
[ 8,	  5	  ]
#kdiff(b,c).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sdiff(b,c).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kdiff(b,c).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sunion(c,b).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(c,b).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(b,c).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#b.insert(0,0);
#c.insert(0,0);
#b.sunique().print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 0,	  0	  ]
#b.kunique().print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  5	  ]
[ 4,	  5	  ]
[ 8,	  10	  ]
[ 9,	  10	  ]
[ 0,	  0	  ]
#sintersect(c,b).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 0,	  0	  ]
#kintersect(c,b).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 0,	  0	  ]
#kintersect(b,c).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 0,	  0	  ]
#sdiff(c,b).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  10	  ]
[ 8,	  5	  ]
#kdiff(b,c).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sdiff(b,c).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kdiff(b,c).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sunion(c,b).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 0,	  0	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(c,b).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 0,	  0	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(b,c).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
[ 0,	  0	  ]

# 09:25:25 >  
# 09:25:25 >  Done.
# 09:25:25 >  

