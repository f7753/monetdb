stdout of test 'test_02` in directory 'tests/suite_00` itself:


# 10:30:00 >  
# 10:30:00 >  Mtimeout -timeout 60 Mserver "--config=/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/conf/MonetDB5.conf" --debug=10 --set "monet_mod_path=/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/src/compiler/.libs:/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/src/mil/.libs:/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/src/optimizer/.libs:/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/src/scheduler/.libs:/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/src/modules/atoms/.libs:/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/src/modules/kernel/.libs:/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/src/modules/mal/.libs:/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/src/modules/mil/.libs:/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/src/modules/milprocs/.libs:/var/tmp/monet.ntv_64-d.7770/MonetDB/.ntv_64-d/RedHat4WS/lib/MonetDB" --set "gdk_dbfarm=/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/dbfarm" --set "sql_logdir=/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/log" --set mapi_port=33466 --set sql_port=45628 --set xquery_port=54519 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_02.mal </dev/null
# 10:30:00 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for ia64-redhat-linux-gnu/64bit with 64bit OIDs; dynamically linked.
# config:/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/conf/MonetDB5.conf
# dbfarm:/var/tmp/monet.ntv_64-d.7770/monet5/RedHat4WS/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("var s:= bbp.new(str,int);");
#	s := bbp.new(nil:str,nil:int);
#	mil.line("insert(s,\"hello\",1);");
#	ca_a := bat.insert(s,"hello",1);
#	mil.line("print(find(s,\"hello\"));");
#	da_a := algebra.find(s,"hello");
#	ea_a := io.print(da_a);
#	mil.line("insert(s,\"bello\",2);");
#	fa_a := bat.insert(s,"bello",2);
#	mil.line("insert(s,\"cello\",3);");
#	ga_a := bat.insert(s,"cello",3);
#	mil.line("insert(s,\"dello\",4);");
#	ha_a := bat.insert(s,"dello",4);
#	mil.line("insert(s,\"eello\",5);");
#	ia_a := bat.insert(s,"eello",5);
#	mil.line("insert(s,\"fello\",6);");
#	ja_a := bat.insert(s,"fello",6);
#	mil.line("insert(s,\"gello\",7);");
#	ka_a := bat.insert(s,"gello",7);
#	mil.line("insert(s,\"hello\",8);");
#	la_a := bat.insert(s,"hello",8);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); info(s).print(); printf(\"#~EndVariableOutput~#\\n\");");
#	ma_a := io.printf("#~BeginVariableOutput~#\n");
#	na_a := bat.info(s);
#	oa_a := io.print(na_a);
#	pa_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("print(find(s,\"cello\"));");
#	qa_a := algebra.find(s,"cello");
#	ra_a := io.print(qa_a);
#	mil.line("delete(s,\"cello\",3);");
#	sa_a := bat.delete(s,"cello",3);
#	mil.line("print(s);");
#	ta_a := io.print(s);
#	mil.line("var sn:= algebra.select(s,1,5);");
#	sn := algebra.select(s,1,5);
#	mil.line("print(sn);");
#	ua_a := io.print(sn);
#	mil.line("var s2:= semijoin(s.reverse(),sn.reverse());");
#	va_a := bat.reverse(s);
#	wa_a := bat.reverse(sn);
#	s2 := algebra.semijoin(va_a,wa_a);
#	mil.line("print(s2);");
#	xa_a := io.print(s2);
#	mil.line("var x:= algebra.join(s,s2);");
#	x := algebra.join(s,s2);
#	mil.line("print(x);");
#	ya_a := io.print(x);
#	mil.line("quit();");
#	ab_a := clients.quit();
#
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  ($32:str)
#Predefined code segment 	# 2  ($34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  ($36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  ($38:str)
#A few guidelines to maximize usefullness. 	# 5  ($40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  ($42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  ($44:str)
#use the "mil_schema" for additional support routines 	# 8  ($46:str)
    mil.line("setoid(oid(20000000));");	# 9 MILline ($47:void)<-($48:str)
    aa_a := calc.oid(20000000);	# 10 CALCint2oid (aa_a:oid)<-($50:int)
    ba_a := calc.setoid(aa_a);	# 11 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("var s:= bbp.new(str,int);");	# 12 MILline ($52:void)<-($53:str)
    s := bbp.new("nil:str",nil:int);	# 13 CMDBATnew (s:bat[:str,:int])<-($55:str)($56:int)
    mil.line("insert(s,\"hello\",1);");	# 14 MILline ($57:void)<-($58:str)
    ca_a := bat.insert(s,"hello",1);	# 15 BKCinsert_bun (ca_a:bat[:str,:int])<-(s:bat[:str,:int])($60:str)($61:int)
    mil.line("print(find(s,\"hello\"));");	# 16 MILline ($62:void)<-($63:str)
    da_a := algebra.find(s,"hello");	# 17 ALGfind (da_a:int)<-(s:bat[:str,:int])($60:str)
    ea_a := io.print(da_a);	# 18 IOprint_val (ea_a:int)<-(da_a:int)
    mil.line("insert(s,\"bello\",2);");	# 19 MILline ($66:void)<-($67:str)
    fa_a := bat.insert(s,"bello",2);	# 20 BKCinsert_bun (fa_a:bat[:str,:int])<-(s:bat[:str,:int])($69:str)($70:int)
    mil.line("insert(s,\"cello\",3);");	# 21 MILline ($71:void)<-($72:str)
    ga_a := bat.insert(s,"cello",3);	# 22 BKCinsert_bun (ga_a:bat[:str,:int])<-(s:bat[:str,:int])($74:str)($75:int)
    mil.line("insert(s,\"dello\",4);");	# 23 MILline ($76:void)<-($77:str)
    ha_a := bat.insert(s,"dello",4);	# 24 BKCinsert_bun (ha_a:bat[:str,:int])<-(s:bat[:str,:int])($79:str)($80:int)
    mil.line("insert(s,\"eello\",5);");	# 25 MILline ($81:void)<-($82:str)
    ia_a := bat.insert(s,"eello",5);	# 26 BKCinsert_bun (ia_a:bat[:str,:int])<-(s:bat[:str,:int])($84:str)($85:int)
    mil.line("insert(s,\"fello\",6);");	# 27 MILline ($86:void)<-($87:str)
    ja_a := bat.insert(s,"fello",6);	# 28 BKCinsert_bun (ja_a:bat[:str,:int])<-(s:bat[:str,:int])($89:str)($90:int)
    mil.line("insert(s,\"gello\",7);");	# 29 MILline ($91:void)<-($92:str)
    ka_a := bat.insert(s,"gello",7);	# 30 BKCinsert_bun (ka_a:bat[:str,:int])<-(s:bat[:str,:int])($94:str)($95:int)
    mil.line("insert(s,\"hello\",8);");	# 31 MILline ($96:void)<-($97:str)
    la_a := bat.insert(s,"hello",8);	# 32 BKCinsert_bun (la_a:bat[:str,:int])<-(s:bat[:str,:int])($99:str)($100:int)
    mil.line("printf(\"#~BeginVariableOutput~#\\n\"); info(s).print(); printf(\"#~EndVariableOutput~#\\n\");");	# 33 MILline ($101:void)<-($102:str)
    ma_a := io.printf("#~BeginVariableOutput~#\n");	# 34 IOprint_str (ma_a:int)<-($104:str)
    na_a := bat.info(s);	# 35 BKCinfo (na_a:bat[:str,:str])<-(s:bat[:str,:int])
    oa_a := io.print(na_a);	# 36 IOprint_val (oa_a:int)<-(na_a:bat[:str,:str])
    pa_a := io.printf("#~EndVariableOutput~#\n");	# 37 IOprint_str (pa_a:int)<-($108:str)
    mil.line("print(find(s,\"cello\"));");	# 38 MILline ($109:void)<-($110:str)
    qa_a := algebra.find(s,"cello");	# 39 ALGfind (qa_a:int)<-(s:bat[:str,:int])($112:str)
    ra_a := io.print(qa_a);	# 40 IOprint_val (ra_a:int)<-(qa_a:int)
    mil.line("delete(s,\"cello\",3);");	# 41 MILline ($114:void)<-($115:str)
    sa_a := bat.delete(s,"cello",3);	# 42 BKCdelete_bun (sa_a:bat[:str,:int])<-(s:bat[:str,:int])($112:str)($117:int)
    mil.line("print(s);");	# 43 MILline ($118:void)<-($119:str)
    ta_a := io.print(s);	# 44 IOprint_val (ta_a:int)<-(s:bat[:str,:int])
    mil.line("var sn:= algebra.select(s,1,5);");	# 45 MILline ($121:void)<-($122:str)
    sn := algebra.select(s,1,5);	# 46 ALGselect (sn:bat[:str,:int])<-(s:bat[:str,:int])($124:int)($125:int)
    mil.line("print(sn);");	# 47 MILline ($126:void)<-($127:str)
    ua_a := io.print(sn);	# 48 IOprint_val (ua_a:int)<-(sn:bat[:str,:int])
    mil.line("var s2:= semijoin(s.reverse(),sn.reverse());");	# 49 MILline ($129:void)<-($130:str)
    va_a := bat.reverse(s);	# 50 BKCreverse (va_a:bat[:int,:str])<-(s:bat[:str,:int])
    wa_a := bat.reverse(sn);	# 51 BKCreverse (wa_a:bat[:int,:str])<-(sn:bat[:str,:int])
    s2 := algebra.semijoin(va_a,wa_a);	# 52 ALGsemijoin (s2:bat[:int,:str])<-(va_a:bat[:int,:str])(wa_a:bat[:int,:str])
    mil.line("print(s2);");	# 53 MILline ($134:void)<-($135:str)
    xa_a := io.print(s2);	# 54 IOprint_val (xa_a:int)<-(s2:bat[:int,:str])
    mil.line("var x:= algebra.join(s,s2);");	# 55 MILline ($137:void)<-($138:str)
    x := algebra.join(s,s2);	# 56 ALGjoin (x:bat[:str,:str])<-(s:bat[:str,:int])(s2:bat[:int,:str])
    mil.line("print(x);");	# 57 MILline ($140:void)<-($141:str)
    ya_a := io.print(x);	# 58 IOprint_val (ya_a:int)<-(x:bat[:str,:str])
    mil.line("quit();");	# 59 MILline ($143:void)<-($144:str)
    ab_a := clients.quit();	# 60 CLTquit (ab_a:void)
end main;	# 61  
#setoid(oid(20000000));
#var s:= bbp.new(str,int);
#insert(s,\"hello\",1);
#print(find(s,\"hello\"));
[ 1 ]
#insert(s,\"bello\",2);
#insert(s,\"cello\",3);
#insert(s,\"dello\",4);
#insert(s,\"eello\",5);
#insert(s,\"fello\",6);
#insert(s,\"gello\",7);
#insert(s,\"hello\",8);
#printf(\"#~BeginVariableOutput~#\\n\"); info(s).print(); printf(\"#~EndVariableOutput~#\\n\");
#~BeginVariableOutput~#
#-----------------------------------------#
# h			t		  # name
# str			str		  # type
#-----------------------------------------#
[ "version",		  "20749"	  ]
[ "batId",		  "tmp_15"	  ]
[ "batCacheid",		  "13"		  ]
[ "batParentid",	  "0"		  ]
[ "batSharecnt",	  "0"		  ]
[ "head",		  "str"		  ]
[ "tail",		  "int"		  ]
[ "batPersistence",	  "transient"	  ]
[ "batRestricted",	  "updatable"	  ]
[ "batRefcnt",		  "1"		  ]
[ "batLRefcnt",		  "1"		  ]
[ "batDirty",		  "dirty"	  ]
[ "batSet",		  "0"		  ]
[ "void_tid",		  "0"		  ]
[ "void_cnt",		  "0"		  ]
[ "hsorted",		  "0"		  ]
[ "hident",		  "h"		  ]
[ "hdense",		  "0"		  ]
[ "hseqbase",		  "0@0"		  ]
[ "hkey",		  "0"		  ]
[ "hloc",		  "0"		  ]
[ "hvarsized",		  "1"		  ]
[ "halign",		  "0"		  ]
[ "tident",		  "t"		  ]
[ "tdense",		  "0"		  ]
[ "tseqbase",		  "0@0"		  ]
[ "tsorted",		  "0"		  ]
[ "tkey",		  "0"		  ]
[ "tloc",		  "8"		  ]
[ "tvarsized",		  "0"		  ]
[ "talign",		  "0"		  ]
[ "batInserted",	  "0"		  ]
[ "batDeleted",		  "0"		  ]
[ "top",		  "8"		  ]
[ "batStamp",		  "13"		  ]
[ "lastUsed",		  "163"		  ]
[ "curStamp",		  "14"		  ]
[ "batCopiedtodisk",	  "0"		  ]
[ "batDirtydesc",	  "clean"	  ]
[ "batDirtybuns",	  "clean"	  ]
[ "batBuns.free",	  "128"		  ]
[ "batBuns.size",	  "800"		  ]
[ "batBuns.maxsize",	  "800"		  ]
[ "batBuns.storage",	  "malloced"	  ]
[ "batBuns.filename",	  "15.buns"	  ]
[ "hheapdirty",		  "clean"	  ]
[ "hheap->free",	  "8304"	  ]
[ "hheap->size",	  "8800"	  ]
[ "hheap->maxsize",	  "8800"	  ]
[ "hheap->storage",	  "malloced"	  ]
[ "hheap->filename",	  "15.hheap"	  ]
[ "theapdirty",		  "clean"	  ]
[ "hhash->type",	  "str"		  ]
[ "hhash->mask",	  "15"		  ]
[ "hhash->lim",		  "50"		  ]
[ "hhash->collision",	  "8 on 1"	  ]
#~EndVariableOutput~#
#print(find(s,\"cello\"));
[ 3 ]
#delete(s,\"cello\",3);
#print(s);
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "hello",	  1	  ]
[ "bello",	  2	  ]
[ "hello",	  8	  ]
[ "dello",	  4	  ]
[ "eello",	  5	  ]
[ "fello",	  6	  ]
[ "gello",	  7	  ]
#var sn:= algebra.select(s,1,5);
#print(sn);
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "hello",	  1	  ]
[ "bello",	  2	  ]
[ "dello",	  4	  ]
[ "eello",	  5	  ]
#var s2:= semijoin(s.reverse(),sn.reverse());
#print(s2);
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 1,	  "hello"	  ]
[ 2,	  "bello"	  ]
[ 4,	  "dello"	  ]
[ 5,	  "eello"	  ]
#var x:= algebra.join(s,s2);
#print(x);
#---------------------------------#
# h		t		  # name
# str		str		  # type
#---------------------------------#
[ "hello",	  "hello"	  ]
[ "bello",	  "bello"	  ]
[ "dello",	  "dello"	  ]
[ "eello",	  "eello"	  ]
#quit();

# 10:30:00 >  
# 10:30:00 >  Done.
# 10:30:00 >  
