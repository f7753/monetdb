stdout of test 'test_02` in directory 'tests/suite_00` itself:


# 15:33:21 >  
# 15:33:21 >  Mtimeout -timeout 60 Mserver "--config=/ufs/boncz/MonetDB/linux/etc/monet.conf" --debug=10 --set "monet_mod_path=/ufs/boncz/MonetDB/linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/boncz/MonetDB/linux/var/MonetDB/dbfarm" --set "sql_logdir=/ufs/boncz/MonetDB/linux/var/MonetDB/log" --set mapi_port=55437 --set sql_port=50559 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  < test_02.milS
# 15:33:21 >  

# Monet Database Server V4.3.13
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
## Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("var s:= new(str,int);");
#	s := new(:str,:int);
#	mil.line("insert(s,\"hello\",1);");
#	ca_a := insert(s,"hello",1);
#	mil.line("print(find(s,\"hello\"));");
#	da_a := find(s,"hello");
#	ea_a := print(da_a);
#	mil.line("insert(s,\"bello\",2);");
#	fa_a := insert(s,"bello",2);
#	mil.line("insert(s,\"cello\",3);");
#	ga_a := insert(s,"cello",3);
#	mil.line("insert(s,\"dello\",4);");
#	ha_a := insert(s,"dello",4);
#	mil.line("insert(s,\"eello\",5);");
#	ia_a := insert(s,"eello",5);
#	mil.line("insert(s,\"fello\",6);");
#	ja_a := insert(s,"fello",6);
#	mil.line("insert(s,\"gello\",7);");
#	ka_a := insert(s,"gello",7);
#	mil.line("insert(s,\"hello\",8);");
#	la_a := insert(s,"hello",8);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); info(s).print(); printf(\"#~EndVariableOutput~#\\n\");");
#	ma_a := printf("#~BeginVariableOutput~#\n");
#	na_a := info(s);
#	oa_a := print(na_a);
#	pa_a := printf("#~EndVariableOutput~#\n");
#	mil.line("print(find(s,\"cello\"));");
#	qa_a := find(s,"cello");
#	ra_a := print(qa_a);
#	mil.line("delete(s,\"cello\",3);");
#	sa_a := delete(s,"cello",3);
#	mil.line("print(s);");
#	ta_a := print(s);
#	mil.line("var sn:= select(s,1,5);");
#	sn := select(s,1,5);
#	mil.line("print(sn);");
#	ua_a := print(sn);
#	mil.line("var s2:= semijoin(s.reverse(),sn.reverse());");
#	va_a := reverse(s);
#	wa_a := reverse(sn);
#	s2 := semijoin(va_a,wa_a);
#	mil.line("print(s2);");
#	xa_a := print(s2);
#	mil.line("var x:= join(s,s2);");
#	x := join(s,s2);
#	mil.line("print(x);");
#	ya_a := print(x);
#	mil.line("quit();");
#	ab_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("var s:= new(str,int);");	# 4 MILline ($6:void)<-($7:str)
    s := bbp.new("nil:str",nil:int);	# 5 CMDBATnew (s:bat[:str,:int])<-($9:str)($10:int)
    mil.line("insert(s,\"hello\",1);");	# 6 MILline ($11:void)<-($12:str)
    ca_a := bat.insert(s,"hello",1);	# 7 BKCinsert_bun (ca_a:bat[:str,:int])<-(s:bat[:str,:int])($14:str)($15:int)
    mil.line("print(find(s,\"hello\"));");	# 8 MILline ($16:void)<-($17:str)
    da_a := algebra.find(s,"hello");	# 9 ALGfind (da_a:int)<-(s:bat[:str,:int])($14:str)
    ea_a := io.print(da_a);	# 10 IOprint_val (ea_a:int)<-(da_a:int)
    mil.line("insert(s,\"bello\",2);");	# 11 MILline ($20:void)<-($21:str)
    fa_a := bat.insert(s,"bello",2);	# 12 BKCinsert_bun (fa_a:bat[:str,:int])<-(s:bat[:str,:int])($23:str)($24:int)
    mil.line("insert(s,\"cello\",3);");	# 13 MILline ($25:void)<-($26:str)
    ga_a := bat.insert(s,"cello",3);	# 14 BKCinsert_bun (ga_a:bat[:str,:int])<-(s:bat[:str,:int])($28:str)($29:int)
    mil.line("insert(s,\"dello\",4);");	# 15 MILline ($30:void)<-($31:str)
    ha_a := bat.insert(s,"dello",4);	# 16 BKCinsert_bun (ha_a:bat[:str,:int])<-(s:bat[:str,:int])($33:str)($34:int)
    mil.line("insert(s,\"eello\",5);");	# 17 MILline ($35:void)<-($36:str)
    ia_a := bat.insert(s,"eello",5);	# 18 BKCinsert_bun (ia_a:bat[:str,:int])<-(s:bat[:str,:int])($38:str)($39:int)
    mil.line("insert(s,\"fello\",6);");	# 19 MILline ($40:void)<-($41:str)
    ja_a := bat.insert(s,"fello",6);	# 20 BKCinsert_bun (ja_a:bat[:str,:int])<-(s:bat[:str,:int])($43:str)($44:int)
    mil.line("insert(s,\"gello\",7);");	# 21 MILline ($45:void)<-($46:str)
    ka_a := bat.insert(s,"gello",7);	# 22 BKCinsert_bun (ka_a:bat[:str,:int])<-(s:bat[:str,:int])($48:str)($49:int)
    mil.line("insert(s,\"hello\",8);");	# 23 MILline ($50:void)<-($51:str)
    la_a := bat.insert(s,"hello",8);	# 24 BKCinsert_bun (la_a:bat[:str,:int])<-(s:bat[:str,:int])($53:str)($54:int)
    mil.line("printf(\"#~BeginVariableOutput~#\\n\"); info(s).print(); printf(\"#~EndVariableOutput~#\\n\");");	# 25 MILline ($55:void)<-($56:str)
    ma_a := io.printf("#~BeginVariableOutput~#\n");	# 26 IOprint_str (ma_a:int)<-($58:str)
    na_a := bat.info(s);	# 27 BKCinfo (na_a:bat[:str,:str])<-(s:bat[:str,:int])
    oa_a := io.print(na_a);	# 28 IOprint_val (oa_a:int)<-(na_a:bat[:str,:str])
    pa_a := io.printf("#~EndVariableOutput~#\n");	# 29 IOprint_str (pa_a:int)<-($62:str)
    mil.line("print(find(s,\"cello\"));");	# 30 MILline ($63:void)<-($64:str)
    qa_a := algebra.find(s,"cello");	# 31 ALGfind (qa_a:int)<-(s:bat[:str,:int])($66:str)
    ra_a := io.print(qa_a);	# 32 IOprint_val (ra_a:int)<-(qa_a:int)
    mil.line("delete(s,\"cello\",3);");	# 33 MILline ($68:void)<-($69:str)
    sa_a := bat.delete(s,"cello",3);	# 34 BKCdelete_bun (sa_a:bat[:str,:int])<-(s:bat[:str,:int])($66:str)($71:int)
    mil.line("print(s);");	# 35 MILline ($72:void)<-($73:str)
    ta_a := io.print(s);	# 36 IOprint_val (ta_a:int)<-(s:bat[:str,:int])
    mil.line("var sn:= select(s,1,5);");	# 37 MILline ($75:void)<-($76:str)
    sn := algebra.select(s,1,5);	# 38 ALGselect (sn:bat[:str,:int])<-(s:bat[:str,:int])($78:int)($79:int)
    mil.line("print(sn);");	# 39 MILline ($80:void)<-($81:str)
    ua_a := io.print(sn);	# 40 IOprint_val (ua_a:int)<-(sn:bat[:str,:int])
    mil.line("var s2:= semijoin(s.reverse(),sn.reverse());");	# 41 MILline ($83:void)<-($84:str)
    va_a := bat.reverse(s);	# 42 BKCreverse (va_a:bat[:int,:str])<-(s:bat[:str,:int])
    wa_a := bat.reverse(sn);	# 43 BKCreverse (wa_a:bat[:int,:str])<-(sn:bat[:str,:int])
    s2 := algebra.semijoin(va_a,wa_a);	# 44 ALGsemijoin (s2:bat[:int,:str])<-(va_a:bat[:int,:str])(wa_a:bat[:int,:str])
    mil.line("print(s2);");	# 45 MILline ($88:void)<-($89:str)
    xa_a := io.print(s2);	# 46 IOprint_val (xa_a:int)<-(s2:bat[:int,:str])
    mil.line("var x:= join(s,s2);");	# 47 MILline ($91:void)<-($92:str)
    x := algebra.join(s,s2);	# 48 ALGjoin (x:bat[:str,:str])<-(s:bat[:str,:int])(s2:bat[:int,:str])
    mil.line("print(x);");	# 49 MILline ($94:void)<-($95:str)
    ya_a := io.print(x);	# 50 IOprint_val (ya_a:int)<-(x:bat[:str,:str])
    mil.line("quit();");	# 51 MILline ($97:void)<-($98:str)
    ab_a := clients.quit();	# 52 CLTquit (ab_a:void)
end main;	# 53  
#setoid(oid(20000000));
#var s:= new(str,int);
#insert(s,"hello",1);
#print(find(s,"hello"));
[ 1 ]
#insert(s,"bello",2);
#insert(s,"cello",3);
#insert(s,"dello",4);
#insert(s,"eello",5);
#insert(s,"fello",6);
#insert(s,"gello",7);
#insert(s,"hello",8);
#printf("#~BeginVariableOutput~#\n"); info(s).print(); printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-----------------------------------------#
# h			tmp_14		  # name
# str			str		  # type
#-----------------------------------------#
[ "version",		  "20696"	  ]
[ "batId",			  "tmp_13"	  ]
[ "batCacheid",			  "13"		  ]
[ "batParentid",		  "0"		  ]
[ "batSharecnt",		  "0"		  ]
[ "head",			  "str"		  ]
[ "tail",			  "int"		  ]
[ "batPersistence",		  "transient"	  ]
[ "batRestricted",		  "updatable"	  ]
[ "batRefcnt",			  "1"		  ]
[ "batLRefcnt",			  "9"		  ]
[ "batDirty",			  "dirty"	  ]
[ "batSet",			  "0"		  ]
[ "void_tid",			  "0"		  ]
[ "void_cnt",			  "0"		  ]
[ "hsorted",			  "0"		  ]
[ "hident",			  "h"		  ]
[ "hdense",			  "0"		  ]
[ "hseqbase",			  "0@0"		  ]
[ "hkey",			  "0"		  ]
[ "hloc",			  "0"		  ]
[ "hvarsized",			  "1"		  ]
[ "halign",			  "0"		  ]
[ "tident",			  "t"		  ]
[ "tdense",			  "0"		  ]
[ "tseqbase",			  "0@0"		  ]
[ "tsorted",			  "1"		  ]
[ "tkey",			  "1"		  ]
[ "tloc",			  "4"		  ]
[ "tvarsized",			  "0"		  ]
[ "talign",			  "0"		  ]
[ "batInserted",		  "1"		  ]
[ "batDeleted",			  "0"		  ]
[ "batHole",			  "0"		  ]
[ "top",			  "9"		  ]
[ "batStamp",			  "13"		  ]
[ "lastUsed",			  "163"		  ]
[ "curStamp",			  "14"		  ]
[ "batCopiedtodisk",		  "0"		  ]
[ "batDirtydesc",		  "clean"	  ]
[ "batDirtybuns",		  "clean"	  ]
[ "batBuns.free",		  "72"		  ]
[ "batBuns.size",		  "424"		  ]
[ "batBuns.maxsize",		  "424"		  ]
[ "batBuns.storage",		  "malloced"	  ]
[ "batBuns.filename",		  "13.buns"	  ]
[ "hheapdirty",			  "clean"	  ]
[ "hheap.free",			  "4180"	  ]
[ "hheap.size",			  "4724"	  ]
[ "hheap.maxsize",		  "4724"	  ]
[ "hheap.storage",		  "malloced"	  ]
[ "hheap.filename",		  "13.hheap"	  ]
[ "theapdirty",			  "clean"	  ]
[ "theap.free",			  "0"		  ]
[ "theap.size",			  "0"		  ]
[ "theap.maxsize",		  "0"		  ]
[ "theap.storage",		  "absent"	  ]
[ "theap.filename",		  "no file"	  ]
#~EndVariableOutput~#
#print(find(s,"cello"));
[ 3 ]
#delete(s,"cello",3);
#print(s);
#-------------------------#
# BAT:		  tmp_28  #
# (str)		  (int)	  #
#-------------------------#
[ "hello",	  1	  ]
[ "bello",	  2	  ]
[ "hello",	  8	  ]
[ "dello",	  4	  ]
[ "eello",	  5	  ]
[ "fello",	  6	  ]
[ "gello",	  7	  ]
#var sn:= select(s,1,5);
#print(sn);
#-------------------------#
# BAT:		  tmp_29  #
# (str)		  (int)	  #
#-------------------------#
[ "hello",	  1	  ]
[ "bello",	  2	  ]
[ "dello",	  4	  ]
[ "eello",	  5	  ]
#var s2:= semijoin(s.reverse(),sn.reverse());
#print(s2);
#-------------------------#
# BAT:	  tmp_30	  #
# (int)	  (str)		  #
#-------------------------#
[ 1,	  "hello"	  ]
[ 2,	  "bello"	  ]
[ 4,	  "dello"	  ]
[ 5,	  "eello"	  ]
#var x:= join(s,s2);
#print(x);
#---------------------------------#
# BAT:		  tmp_29	  #
# (str)		  (str)		  #
#---------------------------------#
[ "hello",	  "hello"	  ]
[ "bello",	  "bello"	  ]
[ "dello",	  "dello"	  ]
[ "eello",	  "eello"	  ]
#quit();

# 15:33:22 >  
# 15:33:22 >  Done.
# 15:33:22 >  

