# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("## testing transitive closure on cyclic graph;\n");
	mil.line("var c:= new(int,int);");
	c := new(nil:int,nil:int);
	mil.line("insert(c,1,2);");
	ca_a := insert(c,1,2);
	mil.line("insert(c,2,3);");
	da_a := insert(c,2,3);
	mil.line("insert(c,2,7);");
	ea_a := insert(c,2,7);
	mil.line("insert(c,3,4);");
	fa_a := insert(c,3,4);
	mil.line("insert(c,4,5);");
	ga_a := insert(c,4,5);
	mil.line("insert(c,5,1);");
	ha_a := insert(c,5,1);
	mil.line("count(c).print();");
	ia_a := count(c);
	ja_a := print(ia_a);
	mil.line("var d:= closure(c);");
	d := closure(c);
	mil.line("count(d).print();");
	ka_a := count(d);
	la_a := print(ka_a);
	mil.line("print(d);");
	ma_a := print(d);
	mil.line("## testing traversal on directed acyclic graph\n");
	mil.line("## produces the end-points only\n");
	c := new(nil:int,nil:int);
	mil.line("insert(c,1,2);");
	na_a := insert(c,1,2);
	mil.line("insert(c,2,3);");
	oa_a := insert(c,2,3);
	mil.line("insert(c,2,7);");
	pa_a := insert(c,2,7);
	mil.line("insert(c,3,4);");
	qa_a := insert(c,3,4);
	mil.line("insert(c,4,5);");
	ra_a := insert(c,4,5);
	mil.line("insert(c,3,5);");
	sa_a := insert(c,3,5);
	mil.line("count(c).print();");
	ta_a := count(c);
	ua_a := print(ta_a);
	mil.line("var d:= new(int,int);");
	d := new(nil:int,nil:int);
	mil.line("d.insert(1,1);");
	va_a := insert(d,1,1);
	mil.line("d.traverse(c).print();");
	wa_a := traverse(d,c);
	xa_a := print(wa_a);
	mil.line("d.clear();");
	ya_a := clear(d);
	mil.line("d.insert(2,3);");
	ab_a := insert(d,2,3);
	mil.line("d.traverse(c).print();");
	bb_a := traverse(d,c);
	cb_a := print(bb_a);
	mil.line("## The alternative is to extract a subgraph\n");
	db_a := clear(d);
	mil.line("d.insert(2,2);");
	eb_a := insert(d,2,2);
	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); time.print(); var z:=d.subgraph(c); time.print(); printf(\"#~EndVariableOutput~#\\n\");");
	fb_a := printf("#~BeginVariableOutput~#\n");
_t:= alarm.time();	gb_a := print(_t);
	z := subgraph(d,c);
_t:= alarm.time();	hb_a := print(alarm.time);
	ib_a := printf("#~EndVariableOutput~#\n");
	mil.line("z.print();");
	jb_a := print(z);
	mil.line("d.clear();");
	kb_a := clear(d);
	mil.line("d.insert(2,2);");
	lb_a := insert(d,2,2);
	mil.line("d.insert(3,3);");
	mb_a := insert(d,3,3);
	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); time.print(); z:=d.subgraph(c); time.print(); printf(\"#~EndVariableOutput~#\\n\");");
	nb_a := printf("#~BeginVariableOutput~#\n");
	ob_a := print(alarm.time);
	z := subgraph(d,c);
	pb_a := print(alarm.time);
	qb_a := printf("#~EndVariableOutput~#\n");
	mil.line("z.print();");
	rb_a := print(z);
	mil.line("quit();");
	sb_a := quit();
#Identifer 'time' mapped to 'alarm.time'
