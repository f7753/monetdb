# Monet Mil to Mal compiler
include mil_scenario;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("# test the new set operations\n");
	mil.line("var b := new(int,int);");
	b := new(nil:int,nil:int);
	mil.line("var c := new(int,int);");
	c := new(nil:int,nil:int);
	mil.line("b.insert(3,5);");
	ca_a := insert(b,3,5);
	mil.line("b.insert(3,6);");
	da_a := insert(b,3,6);
	mil.line("b.insert(4,5);");
	ea_a := insert(b,4,5);
	mil.line("b.insert(4,6);");
	fa_a := insert(b,4,6);
	mil.line("b.insert(8,10);");
	ga_a := insert(b,8,10);
	mil.line("b.insert(8,11);");
	ha_a := insert(b,8,11);
	mil.line("b.insert(9,10);");
	ia_a := insert(b,9,10);
	mil.line("b.insert(9,11);");
	ja_a := insert(b,9,11);
	mil.line("b.insert(9,11);");
	ka_a := insert(b,9,11);
	mil.line("c.insert(3,10);");
	la_a := insert(c,3,10);
	mil.line("c.insert(3,5);");
	ma_a := insert(c,3,5);
	mil.line("c.insert(8,10);");
	na_a := insert(c,8,10);
	mil.line("c.insert(8,5);");
	oa_a := insert(c,8,5);
	mil.line("b.sunique().print();");
	pa_a := sunique(b);
	qa_a := print(pa_a);
	mil.line("b.kunique().print();");
	ra_a := kunique(b);
	sa_a := print(ra_a);
	mil.line("sintersect(c,b).print();");
	ta_a := sintersect(c,b);
	ua_a := print(ta_a);
	mil.line("kintersect(c,b).print();");
	va_a := kintersect(c,b);
	wa_a := print(va_a);
	mil.line("kintersect(b,c).print();");
	xa_a := kintersect(b,c);
	ya_a := print(xa_a);
	mil.line("sdiff(c,b).print();");
	ab_a := sdiff(c,b);
	bb_a := print(ab_a);
	mil.line("kdiff(b,c).print();");
	cb_a := kdiff(b,c);
	db_a := print(cb_a);
	mil.line("sdiff(b,c).print();");
	eb_a := sdiff(b,c);
	fb_a := print(eb_a);
	mil.line("kdiff(b,c).print();");
	gb_a := kdiff(b,c);
	hb_a := print(gb_a);
	mil.line("sunion(c,b).print();");
	ib_a := sunion(c,b);
	jb_a := print(ib_a);
	mil.line("kunion(c,b).print();");
	kb_a := kunion(c,b);
	lb_a := print(kb_a);
	mil.line("kunion(b,c).print();");
	mb_a := kunion(b,c);
	nb_a := print(mb_a);
	mil.line("b.insert(0,0);");
	ob_a := insert(b,0,0);
	mil.line("c.insert(0,0);");
	pb_a := insert(c,0,0);
	mil.line("b.sunique().print();");
	qb_a := sunique(b);
	rb_a := print(qb_a);
	mil.line("b.kunique().print();");
	sb_a := kunique(b);
	tb_a := print(sb_a);
	mil.line("sintersect(c,b).print();");
	ub_a := sintersect(c,b);
	vb_a := print(ub_a);
	mil.line("kintersect(c,b).print();");
	wb_a := kintersect(c,b);
	xb_a := print(wb_a);
	mil.line("kintersect(b,c).print();");
	yb_a := kintersect(b,c);
	ac_a := print(yb_a);
	mil.line("sdiff(c,b).print();");
	bc_a := sdiff(c,b);
	cc_a := print(bc_a);
	mil.line("kdiff(b,c).print();");
	dc_a := kdiff(b,c);
	ec_a := print(dc_a);
	mil.line("sdiff(b,c).print();");
	fc_a := sdiff(b,c);
	gc_a := print(fc_a);
	mil.line("kdiff(b,c).print();");
	hc_a := kdiff(b,c);
	ic_a := print(hc_a);
	mil.line("sunion(c,b).print();");
	jc_a := sunion(c,b);
	kc_a := print(jc_a);
	mil.line("kunion(c,b).print();");
	lc_a := kunion(c,b);
	mc_a := print(lc_a);
	mil.line("kunion(b,c).print();");
	nc_a := kunion(b,c);
	oc_a := print(nc_a);
	mil.line("quit();");
	pc_a := quit();
