stdout of test 'test_04` in directory 'tests/suite_00` itself:

#> Mtest (20:57:18):	milS test_04 milS
#> Mtest (20:57:18):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_04.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_04.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
## Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("# test correctness of semijoin\n");
#	mil.line("var b:= new(int,int);");
#	b := new(:int,:int);
#	mil.line("var c:= new(int,int);");
#	c := new(:int,:int);
#	mil.line("b.insert(0,0);");
#	ca_a := insert(b,0,0);
#	mil.line("b.insert(1,1);");
#	da_a := insert(b,1,1);
#	mil.line("b.insert(1,2);");
#	ea_a := insert(b,1,2);
#	mil.line("b.insert(1,3);");
#	fa_a := insert(b,1,3);
#	mil.line("b.insert(1,4);");
#	ga_a := insert(b,1,4);
#	mil.line("c.insert(1,5);");
#	ha_a := insert(c,1,5);
#	mil.line("c.insert(1,4);");
#	ia_a := insert(c,1,4);
#	mil.line("c.insert(2,2);");
#	ja_a := insert(c,2,2);
#	mil.line("b.semijoin(c).print();");
#	ka_a := semijoin(b,c);
#	la_a := print(ka_a);
#	mil.line("c.semijoin(b).print();");
#	ma_a := semijoin(c,b);
#	na_a := print(ma_a);
#	mil.line("b.semijoin(b).print();");
#	oa_a := semijoin(b,b);
#	pa_a := print(oa_a);
#	mil.line("quit();");
#	qa_a := quit();
#
function user.main():int;	# 0  (main:int)
# Monet Mil to Mal compiler 	# 1  ($2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  ($4:str)
#Predefined code segment 	# 3  ($6:str)
#The compiler can not guarantee an accurate compilation, 	# 4  ($8:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  ($10:str)
#A few guidelines to maximize usefullness. 	# 6  ($12:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  ($14:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  ($16:str)
#use the "mil_schema" for additional support routines 	# 9  ($18:str)
    mil.line("setoid(oid(20000000));");	# 10 MILline ($19:void)<-($20:str)
    aa_a := calc.oid(20000000);	# 11 CALCint2oid (aa_a:oid)<-($22:int)
    ba_a := calc.setoid(aa_a);	# 12 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# test correctness of semijoin\n");	# 13 MILline ($24:void)<-($25:str)
    b := bbp.new(nil:int,nil:int);	# 14 CMDBATnew (b:bat[:int,:int])<-($27:int)($27:int)
    mil.line("var c:= bbp.new(int,int);");	# 15 MILline ($28:void)<-($29:str)
    c := bbp.new(nil:int,nil:int);	# 16 CMDBATnew (c:bat[:int,:int])<-($27:int)($27:int)
    mil.line("b.insert(0,0);");	# 17 MILline ($31:void)<-($32:str)
    ca_a := bat.insert(b,0,0);	# 18 BKCinsert_bun (ca_a:bat[:int,:int])<-(b:bat[:int,:int])($34:int)($34:int)
    mil.line("b.insert(1,1);");	# 19 MILline ($35:void)<-($36:str)
    da_a := bat.insert(b,1,1);	# 20 BKCinsert_bun (da_a:bat[:int,:int])<-(b:bat[:int,:int])($38:int)($38:int)
    mil.line("b.insert(1,2);");	# 21 MILline ($39:void)<-($40:str)
    ea_a := bat.insert(b,1,2);	# 22 BKCinsert_bun (ea_a:bat[:int,:int])<-(b:bat[:int,:int])($38:int)($42:int)
    mil.line("b.insert(1,3);");	# 23 MILline ($43:void)<-($44:str)
    fa_a := bat.insert(b,1,3);	# 24 BKCinsert_bun (fa_a:bat[:int,:int])<-(b:bat[:int,:int])($38:int)($46:int)
    mil.line("b.insert(1,4);");	# 25 MILline ($47:void)<-($48:str)
    ga_a := bat.insert(b,1,4);	# 26 BKCinsert_bun (ga_a:bat[:int,:int])<-(b:bat[:int,:int])($38:int)($50:int)
    mil.line("c.insert(1,5);");	# 27 MILline ($51:void)<-($52:str)
    ha_a := bat.insert(c,1,5);	# 28 BKCinsert_bun (ha_a:bat[:int,:int])<-(c:bat[:int,:int])($38:int)($54:int)
    mil.line("c.insert(1,4);");	# 29 MILline ($55:void)<-($56:str)
    ia_a := bat.insert(c,1,4);	# 30 BKCinsert_bun (ia_a:bat[:int,:int])<-(c:bat[:int,:int])($38:int)($50:int)
    mil.line("c.insert(2,2);");	# 31 MILline ($58:void)<-($59:str)
    ja_a := bat.insert(c,2,2);	# 32 BKCinsert_bun (ja_a:bat[:int,:int])<-(c:bat[:int,:int])($42:int)($42:int)
    mil.line("b.semijoin(c).print();");	# 33 MILline ($61:void)<-($62:str)
    ka_a := algebra.semijoin(b,c);	# 34 ALGsemijoin (ka_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    la_a := io.print(ka_a);	# 35 IOprint_val (la_a:int)<-(ka_a:bat[:int,:int])
    mil.line("c.semijoin(b).print();");	# 36 MILline ($65:void)<-($66:str)
    ma_a := algebra.semijoin(c,b);	# 37 ALGsemijoin (ma_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    na_a := io.print(ma_a);	# 38 IOprint_val (na_a:int)<-(ma_a:bat[:int,:int])
    mil.line("b.semijoin(b).print();");	# 39 MILline ($69:void)<-($70:str)
    oa_a := algebra.semijoin(b,b);	# 40 ALGsemijoin (oa_a:bat[:int,:int])<-(b:bat[:int,:int])(b:bat[:int,:int])
    pa_a := io.print(oa_a);	# 41 IOprint_val (pa_a:int)<-(oa_a:bat[:int,:int])
    mil.line("quit();");	# 42 MILline ($73:void)<-($74:str)
    qa_a := clients.quit();	# 43 CLTquit (qa_a:void)
end main;	# 44  
#setoid(oid(20000000));
## test correctness of semijoin
#var b:= new(int,int);
#var c:= new(int,int);
#b.insert(0,0);
#b.insert(1,1);
#b.insert(1,2);
#b.insert(1,3);
#b.insert(1,4);
#c.insert(1,5);
#c.insert(1,4);
#c.insert(2,2);
#b.semijoin(c).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 1,	  3	  ]
[ 1,	  4	  ]
#c.semijoin(b).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  5	  ]
[ 1,	  4	  ]
#b.semijoin(b).print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 1,	  3	  ]
[ 1,	  4	  ]

# 09:25:08 >  
# 09:25:08 >  Done.
# 09:25:08 >  

