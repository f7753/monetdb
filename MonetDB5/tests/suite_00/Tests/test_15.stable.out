stdout of test 'test_15` in directory 'tests/suite_00` itself:

#> Mtest (20:57:21):	milS test_15 milS
#> Mtest (20:57:21):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_15.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_15.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("#testing the set operations;\n");
#	mil.line("var b:= new(int,int);");
#	b := new(nil:int,nil:int);
#	mil.line("b.insert(1,15);");
#	ca_a := insert(b,1,15);
#	mil.line("b.insert(2,4);");
#	da_a := insert(b,2,4);
#	mil.line("b.insert(3,int(nil));");
#	ea_a := int(nil);
#	fa_a := insert(b,3,ea_a);
#	mil.line("b.insert(4,16);");
#	ga_a := insert(b,4,16);
#	mil.line("b.insert(5,25);");
#	ha_a := insert(b,5,25);
#	mil.line("b.insert(6,36);");
#	ia_a := insert(b,6,36);
#	mil.line("b.insert(7,49);");
#	ja_a := insert(b,7,49);
#	mil.line("b.insert(8,64);");
#	ka_a := insert(b,8,64);
#	mil.line("b.insert(9,int(nil));");
#	la_a := int(nil);
#	ma_a := insert(b,9,la_a);
#	mil.line("b.insert(int(nil),int(nil));");
#	na_a := int(nil);
#	oa_a := int(nil);
#	pa_a := insert(b,na_a,oa_a);
#	mil.line("b.insert(int(nil),81);");
#	qa_a := int(nil);
#	ra_a := insert(b,qa_a,81);
#	mil.line("var c:= b.copy();");
#	c := copy(b);
#	mil.line("var t:= b.select(80,int(nil)); print(t);");
#	sa_a := int(nil);
#	t := select(b,80,sa_a);
#	ta_a := print(t);
#	mil.line("c.access(BAT_WRITE);");
#	BAT_WRITE:= mil.take("BAT_WRITE");
#	ua_a := access(c,BAT_WRITE);
#	mil.line("insert(c,t);print(c);");
#	va_a := insert(c,t);
#	wa_a := print(c);
#	mil.line("var z:= new(int,int);");
#	z := new(nil:int,nil:int);
#	mil.line("b.replace(1,1);");
#	xa_a := replace(b,1,1);
#	mil.line("z.insert(2,4);");
#	ya_a := insert(z,2,4);
#	mil.line("z.insert(3,9);");
#	ab_a := insert(z,3,9);
#	mil.line("b.replace(z);");
#	bb_a := replace(b,z);
#	mil.line("b.print();");
#	cb_a := print(b);
#	mil.line("c.reverse().print();");
#	db_a := reverse(c);
#	eb_a := print(db_a);
#	mil.line("var d:= intersect(reverse(c),b);");
#	fb_a := reverse(c);
#	d := intersect(fb_a,b);
#	mil.line("print(d);");
#	gb_a := print(d);
#	mil.line("var e:= diff(reverse(c),d);");
#	hb_a := reverse(c);
#	e := diff(hb_a,d);
#	mil.line("print(e);");
#	ib_a := print(e);
#	mil.line("var f:= union(e,b);");
#	f := union(e,b);
#	mil.line("print(f);");
#	jb_a := print(f);
#	mil.line("# specials\n");
#	mil.line("var marcel:= b.kunion(b);");
#	marcel := kunion(b,b);
#	mil.line("marcel.print();");
#	kb_a := print(marcel);
#	mil.line("quit();");
#	lb_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($31:void)<-($32:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($34:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#testing the set operations;\n");	# 4 MILline ($36:void)<-($37:str)
    b := bbp.new(nil:int,nil:int);	# 5 CMDBATnew (b:bat[:int,:int])<-($39:int)($39:int)
    mil.line("b.insert(1,15);");	# 6 MILline ($40:void)<-($41:str)
    ca_a := mil_insert.insert(b,1,15);	# 7 MILinsert_bun (ca_a:bat[:int,:int])<-(b:bat[:int,:int])($43:int)($44:int)
    mil.line("b.insert(2,4);");	# 8 MILline ($45:void)<-($46:str)
    da_a := mil_insert.insert(b,2,4);	# 9 MILinsert_bun (da_a:bat[:int,:int])<-(b:bat[:int,:int])($48:int)($49:int)
    mil.line("b.insert(3,int(nil));");	# 10 MILline ($50:void)<-($51:str)
    ea_a := calc.int(nil);	# 11 CALCnil2int (ea_a:int)<-($53:void)
    fa_a := mil_insert.insert(b,3,ea_a);	# 12 MILinsert_bun (fa_a:bat[:int,:int])<-(b:bat[:int,:int])($55:int)(ea_a:int)
    mil.line("b.insert(4,16);");	# 13 MILline ($56:void)<-($57:str)
    ga_a := mil_insert.insert(b,4,16);	# 14 MILinsert_bun (ga_a:bat[:int,:int])<-(b:bat[:int,:int])($49:int)($59:int)
    mil.line("b.insert(5,25);");	# 15 MILline ($60:void)<-($61:str)
    ha_a := mil_insert.insert(b,5,25);	# 16 MILinsert_bun (ha_a:bat[:int,:int])<-(b:bat[:int,:int])($63:int)($64:int)
    mil.line("b.insert(6,36);");	# 17 MILline ($65:void)<-($66:str)
    ia_a := mil_insert.insert(b,6,36);	# 18 MILinsert_bun (ia_a:bat[:int,:int])<-(b:bat[:int,:int])($68:int)($69:int)
    mil.line("b.insert(7,49);");	# 19 MILline ($70:void)<-($71:str)
    ja_a := mil_insert.insert(b,7,49);	# 20 MILinsert_bun (ja_a:bat[:int,:int])<-(b:bat[:int,:int])($73:int)($74:int)
    mil.line("b.insert(8,64);");	# 21 MILline ($75:void)<-($76:str)
    ka_a := mil_insert.insert(b,8,64);	# 22 MILinsert_bun (ka_a:bat[:int,:int])<-(b:bat[:int,:int])($78:int)($79:int)
    mil.line("b.insert(9,int(nil));");	# 23 MILline ($80:void)<-($81:str)
    la_a := calc.int(nil);	# 24 CALCnil2int (la_a:int)<-($53:void)
    ma_a := mil_insert.insert(b,9,la_a);	# 25 MILinsert_bun (ma_a:bat[:int,:int])<-(b:bat[:int,:int])($84:int)(la_a:int)
    mil.line("b.insert(int(nil),int(nil));");	# 26 MILline ($85:void)<-($86:str)
    na_a := calc.int(nil);	# 27 CALCnil2int (na_a:int)<-($88:void)
    oa_a := calc.int(nil);	# 28 CALCnil2int (oa_a:int)<-($88:void)
    pa_a := mil_insert.insert(b,na_a,oa_a);	# 29 MILinsert_bun (pa_a:bat[:int,:int])<-(b:bat[:int,:int])(na_a:int)(oa_a:int)
    mil.line("b.insert(int(nil),81);");	# 30 MILline ($91:void)<-($92:str)
    qa_a := calc.int(nil);	# 31 CALCnil2int (qa_a:int)<-($88:void)
    ra_a := mil_insert.insert(b,qa_a,81);	# 32 MILinsert_bun (ra_a:bat[:int,:int])<-(b:bat[:int,:int])(qa_a:int)($95:int)
    mil.line("var c:= b.copy();");	# 33 MILline ($96:void)<-($97:str)
    c := algebra.copy(b);	# 34 ALGcopy (c:bat[:int,:int])<-(b:bat[:int,:int])
    mil.line("var t:= b.select(80,int(nil)); print(t);");	# 35 MILline ($99:void)<-($100:str)
    sa_a := calc.int(nil);	# 36 CALCnil2int (sa_a:int)<-($88:void)
    t := algebra.select(b,80,sa_a);	# 37 ALGselect (t:bat[:int,:int])<-(b:bat[:int,:int])($103:int)(sa_a:int)
    ta_a := io.print(t);	# 38 IOprint_val (ta_a:int)<-(t:bat[:int,:int])
    mil.line("c.access(BAT_WRITE);");	# 39 MILline ($105:void)<-($106:str)
    BAT_WRITE := mil.take("BAT_WRITE");	# 40 MILtake (BAT_WRITE:int)<-($107:str)
    ua_a := bat.access(c,BAT_WRITE);	# 41 BKCaccess (ua_a:void)<-(c:bat[:int,:int])(BAT_WRITE:int)
    mil.line("insert(c,t);print(c);");	# 42 MILline ($109:void)<-($110:str)
    va_a := bat.insert(c,t);	# 43 BKCinsert_bat (va_a:void)<-(c:bat[:int,:int])(t:bat[:int,:int])
    wa_a := io.print(c);	# 44 IOprint_val (wa_a:int)<-(c:bat[:int,:int])
    mil.line("var z:= new(int,int);");	# 45 MILline ($113:void)<-($114:str)
    z := bbp.new(nil:int,nil:int);	# 46 CMDBATnew (z:bat[:int,:int])<-($116:int)($116:int)
    mil.line("b.replace(1,1);");	# 47 MILline ($117:void)<-($118:str)
    xa_a := bat.replace(b,1,1);	# 48 BKCreplace_bun (xa_a:void)<-(b:bat[:int,:int])($120:int)($120:int)
    mil.line("z.insert(2,4);");	# 49 MILline ($121:void)<-($122:str)
    ya_a := mil_insert.insert(z,2,4);	# 50 MILinsert_bun (ya_a:bat[:int,:int])<-(z:bat[:int,:int])($124:int)($125:int)
    mil.line("z.insert(3,9);");	# 51 MILline ($126:void)<-($127:str)
    ab_a := mil_insert.insert(z,3,9);	# 52 MILinsert_bun (ab_a:bat[:int,:int])<-(z:bat[:int,:int])($129:int)($130:int)
    mil.line("b.replace(z);");	# 53 MILline ($131:void)<-($132:str)
    bb_a := bat.replace(b,z);	# 54 BKCreplace_bat (bb_a:bat[:int,:int])<-(b:bat[:int,:int])(z:bat[:int,:int])
    mil.line("b.print();");	# 55 MILline ($134:void)<-($135:str)
    cb_a := io.print(b);	# 56 IOprint_val (cb_a:int)<-(b:bat[:int,:int])
    mil.line("c.reverse().print();");	# 57 MILline ($137:void)<-($138:str)
    db_a := bat.reverse(c);	# 58 BKCreverse (db_a:bat[:int,:int])<-(c:bat[:int,:int])
    eb_a := io.print(db_a);	# 59 IOprint_val (eb_a:int)<-(db_a:bat[:int,:int])
    mil.line("var d:= intersect(reverse(c),b);");	# 60 MILline ($141:void)<-($142:str)
    fb_a := bat.reverse(c);	# 61 BKCreverse (fb_a:bat[:int,:int])<-(c:bat[:int,:int])
    d := mil_algebra_procs.intersect(fb_a,b);	# 62  (d:bat[:int,:int])<-(fb_a:bat[:int,:int])(b:bat[:int,:int])
    mil.line("print(d);");	# 63 MILline ($145:void)<-($146:str)
    gb_a := io.print(d);	# 64 IOprint_val (gb_a:int)<-(d:bat[:int,:int])
    mil.line("var e:= diff(reverse(c),d);");	# 65 MILline ($148:void)<-($149:str)
    hb_a := bat.reverse(c);	# 66 BKCreverse (hb_a:bat[:int,:int])<-(c:bat[:int,:int])
    e := mil_algebra_procs.diff(hb_a,d);	# 67  (e:bat[:int,:int])<-(hb_a:bat[:int,:int])(d:bat[:int,:int])
    mil.line("print(e);");	# 68 MILline ($152:void)<-($153:str)
    ib_a := io.print(e);	# 69 IOprint_val (ib_a:int)<-(e:bat[:int,:int])
    mil.line("var f:= union(e,b);");	# 70 MILline ($155:void)<-($156:str)
    f := mil_algebra_procs.union(e,b);	# 71  (f:bat[:int,:int])<-(e:bat[:int,:int])(b:bat[:int,:int])
    mil.line("print(f);");	# 72 MILline ($158:void)<-($159:str)
    jb_a := io.print(f);	# 73 IOprint_val (jb_a:int)<-(f:bat[:int,:int])
    mil.line("# specials\n");	# 74 MILline ($161:void)<-($162:str)
    marcel := algebra.kunion(b,b);	# 75 ALGkunion (marcel:bat[:int,:int])<-(b:bat[:int,:int])(b:bat[:int,:int])
    mil.line("marcel.print();");	# 76 MILline ($164:void)<-($165:str)
    kb_a := io.print(marcel);	# 77 IOprint_val (kb_a:int)<-(marcel:bat[:int,:int])
    mil.line("quit();");	# 78 MILline ($167:void)<-($168:str)
    lb_a := clients.quit();	# 79 CLTquit (lb_a:void)
end main;	# 80  
#setoid(oid(20000000));
##testing the set operations;
#var b:= new(int,int);
#b.insert(1,15);
#b.insert(2,4);
#b.insert(3,int(nil));
#b.insert(4,16);
#b.insert(5,25);
#b.insert(6,36);
#b.insert(7,49);
#b.insert(8,64);
#b.insert(9,int(nil));
#b.insert(int(nil),int(nil));
#b.insert(int(nil),81);
#var c:= b.copy();
#var t:= b.select(80,int(nil)); print(t);
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ nil,	  81	  ]
#c.access(BAT_WRITE);
#insert(c,t);print(c);
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
[ nil,	  81	  ]
#var z:= new(int,int);
#b.replace(1,1);
#z.insert(2,4);
#z.insert(3,9);
#b.replace(z);
#b.print();
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#c.reverse().print();
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 15,	  1	  ]
[ 4,	  2	  ]
[ nil,	  3	  ]
[ 16,	  4	  ]
[ 25,	  5	  ]
[ 36,	  6	  ]
[ 49,	  7	  ]
[ 64,	  8	  ]
[ nil,	  9	  ]
[ nil,	  nil	  ]
[ 81,	  nil	  ]
[ 81,	  nil	  ]
#var d:= intersect(reverse(c),b);
#print(d);
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (int)	  #
#-----------------#
#var e:= diff(reverse(c),d);
#print(e);
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ 15,	  1	  ]
[ 4,	  2	  ]
[ nil,	  3	  ]
[ 16,	  4	  ]
[ 25,	  5	  ]
[ 36,	  6	  ]
[ 49,	  7	  ]
[ 64,	  8	  ]
[ nil,	  9	  ]
[ nil,	  nil	  ]
[ 81,	  nil	  ]
[ 81,	  nil	  ]
#var f:= union(e,b);
#print(f);
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 15,	  1	  ]
[ 4,	  2	  ]
[ nil,	  3	  ]
[ 16,	  4	  ]
[ 25,	  5	  ]
[ 36,	  6	  ]
[ 49,	  7	  ]
[ 64,	  8	  ]
[ nil,	  9	  ]
[ nil,	  nil	  ]
[ 81,	  nil	  ]
[ 81,	  nil	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
## specials
#var marcel:= b.kunion(b);
#marcel.print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#quit();

# 17:08:46 >  
# 17:08:46 >  Done.
# 17:08:46 >  

