stdout of test 'test_10` in directory 'tests/suite_00` itself:

#> Mtest (20:57:20):	milS test_10 milS
#> Mtest (20:57:20):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_10.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_10.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("# Sorting activities\n");
#	mil.line("# left->right shift + left boundary;");
#	mil.line("# left->right shift + left boundary;\n");
#	mil.line("var s:=new(int,int);");
#	s := new(nil:int,nil:int);
#	mil.line("insert(s,5,5);insert(s,3,3);insert(s,4,2);insert(s,2,1);");
#	ca_a := insert(s,5,5);
#	da_a := insert(s,3,3);
#	ea_a := insert(s,4,2);
#	fa_a := insert(s,2,1);
#	mil.line("insert(s,1,1);insert(s,4,2); insert(s,4,3);");
#	ga_a := insert(s,1,1);
#	ha_a := insert(s,4,2);
#	ia_a := insert(s,4,3);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\");");
#	ja_a := printf("#~BeginVariableOutput~#\n");
#	mil.line("sort(s).print();");
#	ka_a := sort(s);
#	la_a := print(ka_a);
#	mil.line("printf(\"#~EndVariableOutput~#\\n\");");
#	ma_a := printf("#~EndVariableOutput~#\n");
#	mil.line("sort_ht(s).print();");
#	na_a := sort_ht(s);
#	oa_a := print(na_a);
#	mil.line("# right->left shift + right boundary;\n");
#	mil.line("s:=new(int,int);");
#	s := new(nil:int,nil:int);
#	mil.line("insert(s,2,1);insert(s,4,1); insert(s,3,1); insert(s,5,1);");
#	pa_a := insert(s,2,1);
#	qa_a := insert(s,4,1);
#	ra_a := insert(s,3,1);
#	sa_a := insert(s,5,1);
#	mil.line("insert(s,6,1);insert(s,4,2);insert(s,1,1);");
#	ta_a := insert(s,6,1);
#	ua_a := insert(s,4,2);
#	va_a := insert(s,1,1);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\");");
#	wa_a := printf("#~BeginVariableOutput~#\n");
#	mil.line("sort(s).print();");
#	xa_a := sort(s);
#	ya_a := print(xa_a);
#	mil.line("printf(\"#~EndVariableOutput~#\\n\");");
#	ab_a := printf("#~EndVariableOutput~#\n");
#	mil.line("sort_ht(s).print();");
#	bb_a := sort_ht(s);
#	cb_a := print(bb_a);
#	mil.line("quit();");
#	db_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# Sorting activities\n");	# 4 MILline ($6:void)<-($7:str)
    mil.line("# left->right shift + left boundary;\n");	# 5 MILline ($8:void)<-($9:str)
    s := bbp.new(nil,nil);	# 6 CMDBATnew (s:bat[:int,:int])<-($11:int)($11:int)
    mil.line("insert(s,5,5);insert(s,3,3);insert(s,4,2);insert(s,2,1);");	# 7 MILline ($12:void)<-($13:str)
    ca_a := bat.insert(s,5,5);	# 8 BKCinsert_bun (ca_a:void)<-(s:bat[:int,:int])($15:int)($15:int)
    da_a := bat.insert(s,3,3);	# 9 BKCinsert_bun (da_a:void)<-(s:bat[:int,:int])($17:int)($17:int)
    ea_a := bat.insert(s,4,2);	# 10 BKCinsert_bun (ea_a:void)<-(s:bat[:int,:int])($19:int)($20:int)
    fa_a := bat.insert(s,2,1);	# 11 BKCinsert_bun (fa_a:void)<-(s:bat[:int,:int])($20:int)($22:int)
    mil.line("insert(s,1,1);insert(s,4,2); insert(s,4,3);");	# 12 MILline ($23:void)<-($24:str)
    ga_a := bat.insert(s,1,1);	# 13 BKCinsert_bun (ga_a:void)<-(s:bat[:int,:int])($22:int)($22:int)
    ha_a := bat.insert(s,4,2);	# 14 BKCinsert_bun (ha_a:void)<-(s:bat[:int,:int])($19:int)($20:int)
    ia_a := bat.insert(s,4,3);	# 15 BKCinsert_bun (ia_a:void)<-(s:bat[:int,:int])($19:int)($17:int)
    mil.line("printf(\"#~BeginVariableOutput~#\\n\");");	# 16 MILline ($28:void)<-($29:str)
    ja_a := io.printf("#~BeginVariableOutput~#\n");	# 17 IOprint_str (ja_a:int)<-($31:str)
    mil.line("sort(s).print();");	# 18 MILline ($32:void)<-($33:str)
    ka_a := algebra.sort(s);	# 19 ALGsort (ka_a:bat[:int,:int])<-(s:bat[:int,:int])
    la_a := io.print(ka_a);	# 20 IOprint_val (la_a:int)<-(ka_a:bat[:int,:int])
    mil.line("printf(\"#~EndVariableOutput~#\\n\");");	# 21 MILline ($36:void)<-($37:str)
    ma_a := io.printf("#~EndVariableOutput~#\n");	# 22 IOprint_str (ma_a:int)<-($39:str)
    mil.line("sort_ht(s).print();");	# 23 MILline ($40:void)<-($41:str)
    na_a := mil_algebra_procs.sort_ht(s);	# 24  (na_a:bat[:int,:int])<-(s:bat[:int,:int])
    oa_a := io.print(na_a);	# 25 IOprint_val (oa_a:int)<-(na_a:bat[:int,:int])
    mil.line("# right->left shift + right boundary;\n");	# 26 MILline ($44:void)<-($45:str)
    s := bbp.new(nil,nil);	# 27 CMDBATnew (s:bat[:int,:int])<-($46:int)($46:int)
    mil.line("insert(s,2,1);insert(s,4,1); insert(s,3,1); insert(s,5,1);");	# 28 MILline ($47:void)<-($48:str)
    pa_a := bat.insert(s,2,1);	# 29 BKCinsert_bun (pa_a:void)<-(s:bat[:int,:int])($20:int)($22:int)
    qa_a := bat.insert(s,4,1);	# 30 BKCinsert_bun (qa_a:void)<-(s:bat[:int,:int])($19:int)($22:int)
    ra_a := bat.insert(s,3,1);	# 31 BKCinsert_bun (ra_a:void)<-(s:bat[:int,:int])($52:int)($22:int)
    sa_a := bat.insert(s,5,1);	# 32 BKCinsert_bun (sa_a:void)<-(s:bat[:int,:int])($54:int)($55:int)
    mil.line("insert(s,6,1);insert(s,4,2);insert(s,1,1);");	# 33 MILline ($56:void)<-($57:str)
    ta_a := bat.insert(s,6,1);	# 34 BKCinsert_bun (ta_a:void)<-(s:bat[:int,:int])($59:int)($55:int)
    ua_a := bat.insert(s,4,2);	# 35 BKCinsert_bun (ua_a:void)<-(s:bat[:int,:int])($61:int)($62:int)
    va_a := bat.insert(s,1,1);	# 36 BKCinsert_bun (va_a:void)<-(s:bat[:int,:int])($55:int)($55:int)
    mil.line("printf(\"#~BeginVariableOutput~#\\n\");");	# 37 MILline ($64:void)<-($65:str)
    wa_a := io.printf("#~BeginVariableOutput~#\n");	# 38 IOprint_str (wa_a:int)<-($67:str)
    mil.line("sort(s).print();");	# 39 MILline ($68:void)<-($69:str)
    xa_a := algebra.sort(s);	# 40 ALGsort (xa_a:bat[:int,:int])<-(s:bat[:int,:int])
    ya_a := io.print(xa_a);	# 41 IOprint_val (ya_a:int)<-(xa_a:bat[:int,:int])
    mil.line("printf(\"#~EndVariableOutput~#\\n\");");	# 42 MILline ($72:void)<-($73:str)
    ab_a := io.printf("#~EndVariableOutput~#\n");	# 43 IOprint_str (ab_a:int)<-($75:str)
    mil.line("sort_ht(s).print();");	# 44 MILline ($76:void)<-($77:str)
    bb_a := mil_algebra_procs.sort_ht(s);	# 45  (bb_a:bat[:int,:int])<-(s:bat[:int,:int])
    cb_a := io.print(bb_a);	# 46 IOprint_val (cb_a:int)<-(bb_a:bat[:int,:int])
    mil.line("quit();");	# 47 MILline ($80:void)<-($81:str)
    db_a := clients.quit();	# 48 CLTquit (db_a:void)
end main;	# 49  
#setoid(oid(20000000));
## Sorting activities
## left->right shift + left boundary;
## left->right shift + left boundary;
#var s:=new(int,int);
#insert(s,5,5);insert(s,3,3);insert(s,4,2);insert(s,2,1);
#insert(s,1,1);insert(s,4,2); insert(s,4,3);
#printf("#~BeginVariableOutput~#\n");
#~BeginVariableOutput~#
#sort(s).print();
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 5,	  5	  ]
#printf("#~EndVariableOutput~#\n");
#~EndVariableOutput~#
#sort_ht(s).print();
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
## right->left shift + right boundary;
#s:=new(int,int);
#insert(s,2,1);insert(s,4,1); insert(s,3,1); insert(s,5,1);
#insert(s,6,1);insert(s,4,2);insert(s,1,1);
#printf("#~BeginVariableOutput~#\n");
#~BeginVariableOutput~#
#sort(s).print();
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  1	  ]
[ 4,	  1	  ]
[ 4,	  2	  ]
[ 5,	  1	  ]
[ 6,	  1	  ]
#printf("#~EndVariableOutput~#\n");
#~EndVariableOutput~#
#sort_ht(s).print();
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  1	  ]
[ 4,	  1	  ]
[ 4,	  2	  ]
[ 5,	  1	  ]
[ 6,	  1	  ]
#quit();

# 17:08:45 >  
# 17:08:45 >  Done.
# 17:08:45 >  

