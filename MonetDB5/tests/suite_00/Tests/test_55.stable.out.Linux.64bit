stdout of test 'test_55` in directory 'tests/suite_00` itself:


# 18:33:08 >  
# 18:33:08 >  Mtimeout -timeout 60 Mserver "--config=/var/tmp/_4.3.13-FixedPetersDDsync_PREFIX_MONET_GNU_32_d_--enable-warning_/etc/monet.conf" --debug=10 --set "monet_mod_path=/var/tmp/_4.3.13-FixedPetersDDsync_PREFIX_MONET_GNU_32_d_--enable-warning_/lib/MonetDB" --set "gdk_dbfarm=/var/tmp/_4.3.13-FixedPetersDDsync_PREFIX_MONET_GNU_32_d_--enable-warning_/var/MonetDB/dbfarm" --set "sql_logdir=/var/tmp/_4.3.13-FixedPetersDDsync_PREFIX_MONET_GNU_32_d_--enable-warning_/var/MonetDB/log" --set mapi_port=53708 --set sql_port=52024 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  < test_55.milS
# 18:33:08 >  

# Monet Database Server V4.3.13
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("# basic nameing problem\n");
#	b := new(nil:int,nil:int);
#	mil.line("b.insert(1,15);");
#	ca_a := insert(b,1,15);
#	mil.line("b.insert(2,4);");
#	da_a := insert(b,2,4);
#	mil.line("b.insert(3,int(nil));");
#	ea_a := int(nil);
#	fa_a := insert(b,3,ea_a);
#	mil.line("b.insert(4,16);");
#	ga_a := insert(b,4,16);
#	mil.line("b.insert(5,25);");
#	ha_a := insert(b,5,25);
#	mil.line("b.insert(6,36);");
#	ia_a := insert(b,6,36);
#	mil.line("b.insert(7,49);");
#	ja_a := insert(b,7,49);
#	mil.line("b.insert(8,64);");
#	ka_a := insert(b,8,64);
#	mil.line("b.insert(9,int(nil));");
#	la_a := int(nil);
#	ma_a := insert(b,9,la_a);
#	mil.line("b.insert(int(nil),int(nil));");
#	na_a := int(nil);
#	oa_a := int(nil);
#	pa_a := insert(b,na_a,oa_a);
#	mil.line("b.insert(int(nil),81);");
#	qa_a := int(nil);
#	ra_a := insert(b,qa_a,81);
#	mil.line("b.print();");
#	sa_a := print(b);
#	mil.line("var h:=b.hashsplit(3);");
#	h := hashsplit(b,3);
#	mil.line("h.print();");
#	ta_a := print(h);
#	mil.line("dir(\"tmp\");");
#	ua_a := dir("tmp");
#	mil.line("h.find(0).rename(\"dummy\");");
#	va_a := find(h,0);
#	wa_a := bat.setName(va_a,"dummy");
#	mil.line("dir(\"dummy\");");
#	xa_a := dir("dummy");
#	mil.line("dir(\"tmp\");");
#	ya_a := dir("tmp");
#	mil.line("quit();");
#	bb_a := quit();
##Identifer 'rename' mapped to 'bat.setName'
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# basic nameing problem\n");	# 4 MILline ($6:void)<-($7:str)
    b := bbp.new(nil,nil);	# 5 CMDBATnew (b:bat[:int,:int])<-($9:int)($9:int)
    mil.line("b.insert(1,15);");	# 6 MILline ($10:void)<-($11:str)
    ca_a := bat.insert(b,1,15);	# 7 BKCinsert_bun (ca_a:void)<-(b:bat[:int,:int])($13:int)($14:int)
    mil.line("b.insert(2,4);");	# 8 MILline ($15:void)<-($16:str)
    da_a := bat.insert(b,2,4);	# 9 BKCinsert_bun (da_a:void)<-(b:bat[:int,:int])($18:int)($19:int)
    mil.line("b.insert(3,int(nil));");	# 10 MILline ($20:void)<-($21:str)
    ea_a := calc.int(nil);	# 11 CALCnil2int (ea_a:int)<-($23:void)
    fa_a := bat.insert(b,3,ea_a);	# 12 BKCinsert_bun (fa_a:void)<-(b:bat[:int,:int])($25:int)(ea_a:int)
    mil.line("b.insert(4,16);");	# 13 MILline ($26:void)<-($27:str)
    ga_a := bat.insert(b,4,16);	# 14 BKCinsert_bun (ga_a:void)<-(b:bat[:int,:int])($19:int)($29:int)
    mil.line("b.insert(5,25);");	# 15 MILline ($30:void)<-($31:str)
    ha_a := bat.insert(b,5,25);	# 16 BKCinsert_bun (ha_a:void)<-(b:bat[:int,:int])($33:int)($34:int)
    mil.line("b.insert(6,36);");	# 17 MILline ($35:void)<-($36:str)
    ia_a := bat.insert(b,6,36);	# 18 BKCinsert_bun (ia_a:void)<-(b:bat[:int,:int])($38:int)($39:int)
    mil.line("b.insert(7,49);");	# 19 MILline ($40:void)<-($41:str)
    ja_a := bat.insert(b,7,49);	# 20 BKCinsert_bun (ja_a:void)<-(b:bat[:int,:int])($43:int)($44:int)
    mil.line("b.insert(8,64);");	# 21 MILline ($45:void)<-($46:str)
    ka_a := bat.insert(b,8,64);	# 22 BKCinsert_bun (ka_a:void)<-(b:bat[:int,:int])($48:int)($49:int)
    mil.line("b.insert(9,int(nil));");	# 23 MILline ($50:void)<-($51:str)
    la_a := calc.int(nil);	# 24 CALCnil2int (la_a:int)<-($23:void)
    ma_a := bat.insert(b,9,la_a);	# 25 BKCinsert_bun (ma_a:void)<-(b:bat[:int,:int])($54:int)(la_a:int)
    mil.line("b.insert(int(nil),int(nil));");	# 26 MILline ($55:void)<-($56:str)
    na_a := calc.int(nil);	# 27 CALCnil2int (na_a:int)<-($58:void)
    oa_a := calc.int(nil);	# 28 CALCnil2int (oa_a:int)<-($58:void)
    pa_a := bat.insert(b,na_a,oa_a);	# 29 BKCinsert_bun (pa_a:void)<-(b:bat[:int,:int])(na_a:int)(oa_a:int)
    mil.line("b.insert(int(nil),81);");	# 30 MILline ($61:void)<-($62:str)
    qa_a := calc.int(nil);	# 31 CALCnil2int (qa_a:int)<-($58:void)
    ra_a := bat.insert(b,qa_a,81);	# 32 BKCinsert_bun (ra_a:void)<-(b:bat[:int,:int])(qa_a:int)($65:int)
    mil.line("b.print();");	# 33 MILline ($66:void)<-($67:str)
    sa_a := io.print(b);	# 34 IOprint_val (sa_a:int)<-(b:bat[:int,:int])
    mil.line("var h:=b.hashsplit(3);");	# 35 MILline ($69:void)<-($70:str)
    h := algebra.hashsplit(b,3);	# 36 ALGhashsplit (h:bat[:int,:BAT])<-(b:bat[:int,:int])($72:int)
    mil.line("h.print();");	# 37 MILline ($73:void)<-($74:str)
    ta_a := io.print(h);	# 38 IOprint_val (ta_a:int)<-(h:bat[:int,:BAT])
    mil.line("dir(\"tmp\");");	# 39 MILline ($76:void)<-($77:str)
    ua_a := mil_sys_procs.dir("tmp");	# 40  (ua_a:void)<-($79:str)
    mil.line("h.find(0).rename(\"dummy\");");	# 41 MILline ($80:void)<-($81:str)
    va_a := algebra.find(h,0);	# 42 ALGfind (va_a:bat[:any,:any])<-(h:bat[:int,:BAT])($83:int)
    wa_a := bat.setName(va_a,"dummy");	# 43 BKCsetName (wa_a:void)<-(va_a:bat[:any,:any])($85:str)
    mil.line("dir(\"dummy\");");	# 44 MILline ($86:void)<-($87:str)
    xa_a := mil_sys_procs.dir("dummy");	# 45  (xa_a:void)<-($85:str)
    mil.line("dir(\"tmp\");");	# 46 MILline ($89:void)<-($77:str)
    ya_a := mil_sys_procs.dir("tmp");	# 47  (ya_a:void)<-($79:str)
    mil.line("quit();");	# 48 MILline ($91:void)<-($92:str)
    bb_a := clients.quit();	# 49 CLTquit (bb_a:void)
end main;	# 50  
#setoid(oid(20000000));
## basic nameing problem
#b.insert(1,15);
#b.insert(2,4);
#b.insert(3,int(nil));
#b.insert(4,16);
#b.insert(5,25);
#b.insert(6,36);
#b.insert(7,49);
#b.insert(8,64);
#b.insert(9,int(nil));
#b.insert(int(nil),int(nil));
#b.insert(int(nil),81);
#b.print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#var h:=b.hashsplit(3);
#h.print();
#-------------------------#
# BAT:	  tmp_30	  #
# (int)	  (BAT)		  #
#-------------------------#
[ 0,	  <tmp_6>	  ]
[ 1,	  <tmp_7>	  ]
[ 2,	  <tmp_8>	  ]
#dir("tmp");
#-----------------------------------------------------------------------------------------------------------------#
# tmp_23		tmp_24	tmp_25	tmp_26	heat	dirty		status	kind		refcnt	lrefcnt		  # name
# str		str	str	lng	int	str		str	str		int	int		  # type
#-----------------------------------------------------------------------------------------------------------------#
[ "tmp_4",	  "int",  "int",  11,	  87,	  "dirty",	  "load", "transient",	  0,	  1		  ]
[ "tmp_5",	  "int",  "BAT",  3,	  169,	  "dirty",	  "load", "transient",	  0,	  1		  ]
[ "tmp_6",	  "int",  "int",  8,	  170,	  "dirty",	  "load", "transient",	  0,	  1		  ]
[ "tmp_7",	  "int",  "int",  3,	  171,	  "dirty",	  "load", "transient",	  0,	  1		  ]
[ "tmp_8",	  "int",  "int",  0,	  172,	  "dirty",	  "load", "transient",	  0,	  1		  ]
#h.find(0).rename("dummy");

# 18:33:09 >  
# 18:33:09 >  Done.
# 18:33:09 >  

