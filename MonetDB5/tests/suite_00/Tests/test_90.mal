# Monet Mil to Mal compiler
include mil_scenario;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("#test mark and number primitives\n");
	mil.line("var b:= new(str,int);");
	b := new(nil:str,nil:int);
	mil.line("b.insert(\"the\",1);");
	ca_a := insert(b,"the",1);
	mil.line("b.insert(\"quick\",20);");
	da_a := insert(b,"quick",20);
	mil.line("b.insert(\"brown\",30);");
	ea_a := insert(b,"brown",30);
	mil.line("b.insert(\"fox\",40);");
	fa_a := insert(b,"fox",40);
	mil.line("b.insert(\"jumps\",50);");
	ga_a := insert(b,"jumps",50);
	mil.line("b.insert(\"over\",60);");
	ha_a := insert(b,"over",60);
	mil.line("b.insert(\"lazy\",70);");
	ia_a := insert(b,"lazy",70);
	mil.line("b.insert(\"dog\",80);");
	ja_a := insert(b,"dog",80);
	mil.line("b.insert(str(nil),90);");
	ka_a := str(nil);
	la_a := insert(b,ka_a,90);
	mil.line("b.insert(\".\",100);");
	ma_a := insert(b,".",100);
	mil.line("b.insert(\"\",int(nil));");
	na_a := int(nil);
	oa_a := insert(b,"",na_a);
	mil.line("b.insert(str(nil),int(nil));");
	pa_a := str(nil);
	qa_a := int(nil);
	ra_a := insert(b,pa_a,qa_a);
	mil.line("b.print();");
	sa_a := print(b);
	mil.line("var c:= mark(b,oid(20000050));");
	ta_a := oid(20000050);
	c := markT(b,ta_a);
	mil.line("print(c);");
	ua_a := print(c);
	mil.line("var d:=number(b);");
	d := number(b);
	mil.line("print(d);");
	va_a := print(d);
	mil.line("quit();");
	wa_a := quit();
