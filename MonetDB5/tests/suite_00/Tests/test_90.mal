# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#var b:= new(str,int);
	b := new(:str,:int);
#b.insert("the",1);
	ca_a := insert(b,"the",1);
#b.insert("quick",20);
	da_a := insert(b,"quick",20);
#b.insert("brown",30);
	ea_a := insert(b,"brown",30);
#b.insert("fox",40);
	fa_a := insert(b,"fox",40);
#b.insert("jumps",50);
	ga_a := insert(b,"jumps",50);
#b.insert("over",60);
	ha_a := insert(b,"over",60);
#b.insert("lazy",70);
	ia_a := insert(b,"lazy",70);
#b.insert("dog",80);
	ja_a := insert(b,"dog",80);
#b.insert(str(nil),90);
	nil:= mil.take("nil");
	ka_a := str(nil);
	la_a := insert(b,ka_a,90);
#b.insert(".",100);
	ma_a := insert(b,".",100);
#b.insert("",int(nil));
	na_a := int(nil);
	oa_a := insert(b,"",na_a);
#b.insert(str(nil),int(nil));
	pa_a := str(nil);
	qa_a := int(nil);
	ra_a := insert(b,pa_a,qa_a);
#b.print();
	sa_a := print(b,);
#var c:= mark(b,oid(20000050));
	ta_a := oid(20000050);
	c := mark(b,ta_a);
#print(c);
	ua_a := print(c);
#var d:=number(b);
	d := number(b);
#print(d);
	va_a := print(d);
#quit();
	wa_a := quit();
