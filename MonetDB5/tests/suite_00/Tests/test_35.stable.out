stdout of test 'test_35` in directory 'tests/suite_00` itself:

#> Mtest (20:57:26):	milS test_35 milS
#> Mtest (20:57:26):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_35.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_35.milS

# 19:43:18 >  
# 19:43:18 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux//var/MonetDB5/log" --set mapi_port=43031 --set sql_port=57193 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_35.mal </dev/null
# 19:43:18 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("# testing merge semijoin\n");
#	mil.line("var c:= new(int,int);");
#	c := new(nil:int,nil:int);
#	mil.line("insert(c,1,1);");
#	ca_a := insert(c,1,1);
#	mil.line("insert(c,2,2);");
#	da_a := insert(c,2,2);
#	mil.line("insert(c,3,4);");
#	ea_a := insert(c,3,4);
#	mil.line("insert(c,4,4);");
#	fa_a := insert(c,4,4);
#	mil.line("insert(c,4,9);");
#	ga_a := insert(c,4,9);
#	mil.line("insert(c,5,int(nil));");
#	ha_a := int(nil);
#	ia_a := insert(c,5,ha_a);
#	mil.line("c.print();");
#	ja_a := print(c);
#	mil.line("var d:= new(int,int);");
#	d := new(nil:int,nil:int);
#	mil.line("insert(d,1,1);");
#	ka_a := insert(d,1,1);
#	mil.line("insert(d,2,2);");
#	la_a := insert(d,2,2);
#	mil.line("insert(d,4,3);");
#	ma_a := insert(d,4,3);
#	mil.line("insert(d,4,4);");
#	na_a := insert(d,4,4);
#	mil.line("insert(d,9,4);");
#	oa_a := insert(d,9,4);
#	mil.line("insert(d,int(nil),5);");
#	pa_a := int(nil);
#	qa_a := insert(d,pa_a,5);
#	mil.line("d.print();");
#	ra_a := print(d);
#	mil.line("var z:=c.semijoin(d);");
#	z := semijoin(c,d);
#	mil.line("z.print();");
#	sa_a := print(z);
#	mil.line("z:=c.reverse().semijoin(d);");
#	ta_a := reverse(c);
#	z := semijoin(ta_a,d);
#	mil.line("z.print();");
#	ua_a := print(z);
#	mil.line("z:=d.semijoin(c);");
#	z := semijoin(d,c);
#	mil.line("z.print();");
#	va_a := print(z);
#	mil.line("# String management\n");
#	mil.line("var b:= new(oid,str);");
#	b := new(nil:oid,nil:str);
#	mil.line("b.insert(oid(1),\"hello\");");
#	wa_a := oid(1);
#	xa_a := insert(b,wa_a,"hello");
#	mil.line("b.insert(oid(2),\"world\");");
#	ya_a := oid(2);
#	ab_a := insert(b,ya_a,"world");
#	mil.line("b.insert(oid(3),\"..\");");
#	bb_a := oid(3);
#	cb_a := insert(b,bb_a,"..");
#	mil.line("var z1:= b.semijoin(b);");
#	z1 := semijoin(b,b);
#	mil.line("z1.print();");
#	db_a := print(z1);
#	mil.line("quit();");
#	eb_a := quit();
#
function user.main():int;	# 0  (main:int)
# Monet Mil to Mal compiler 	# 1  ($2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  ($4:str)
#Predefined code segment 	# 3  ($6:str)
#The compiler can not guarantee an accurate compilation, 	# 4  ($8:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  ($10:str)
#A few guidelines to maximize usefullness. 	# 6  ($12:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  ($14:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  ($16:str)
#use the "mil_schema" for additional support routines 	# 9  ($18:str)
    mil.line("setoid(oid(20000000));");	# 10 MILline ($19:void)<-($20:str)
    aa_a := calc.oid(20000000);	# 11 CALCint2oid (aa_a:oid)<-($22:int)
    ba_a := calc.setoid(aa_a);	# 12 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# testing merge semijoin\n");	# 13 MILline ($24:void)<-($25:str)
    c := bbp.new(nil:int,nil:int);	# 14 CMDBATnew (c:bat[:int,:int])<-($27:int)($27:int)
    mil.line("insert(c,1,1);");	# 15 MILline ($28:void)<-($29:str)
    ca_a := bat.insert(c,1,1);	# 16 BKCinsert_bun (ca_a:bat[:int,:int])<-(c:bat[:int,:int])($31:int)($31:int)
    mil.line("insert(c,2,2);");	# 17 MILline ($32:void)<-($33:str)
    da_a := bat.insert(c,2,2);	# 18 BKCinsert_bun (da_a:bat[:int,:int])<-(c:bat[:int,:int])($35:int)($35:int)
    mil.line("insert(c,3,4);");	# 19 MILline ($36:void)<-($37:str)
    ea_a := bat.insert(c,3,4);	# 20 BKCinsert_bun (ea_a:bat[:int,:int])<-(c:bat[:int,:int])($39:int)($40:int)
    mil.line("insert(c,4,4);");	# 21 MILline ($41:void)<-($42:str)
    fa_a := bat.insert(c,4,4);	# 22 BKCinsert_bun (fa_a:bat[:int,:int])<-(c:bat[:int,:int])($40:int)($40:int)
    mil.line("insert(c,4,9);");	# 23 MILline ($44:void)<-($45:str)
    ga_a := bat.insert(c,4,9);	# 24 BKCinsert_bun (ga_a:bat[:int,:int])<-(c:bat[:int,:int])($40:int)($47:int)
    mil.line("insert(c,5,int(nil));");	# 25 MILline ($48:void)<-($49:str)
    ha_a := calc.int(nil);	# 26 CALCnil2int (ha_a:int)<-($51:void)
    ia_a := bat.insert(c,5,ha_a);	# 27 BKCinsert_bun (ia_a:bat[:int,:int])<-(c:bat[:int,:int])($53:int)(ha_a:int)
    mil.line("c.print();");	# 28 MILline ($54:void)<-($55:str)
    ja_a := io.print(c);	# 29 IOprint_val (ja_a:int)<-(c:bat[:int,:int])
    mil.line("var d:= bbp.new(int,int);");	# 30 MILline ($57:void)<-($58:str)
    d := bbp.new(nil:int,nil:int);	# 31 CMDBATnew (d:bat[:int,:int])<-($60:int)($60:int)
    mil.line("insert(d,1,1);");	# 32 MILline ($61:void)<-($62:str)
    ka_a := bat.insert(d,1,1);	# 33 BKCinsert_bun (ka_a:bat[:int,:int])<-(d:bat[:int,:int])($64:int)($64:int)
    mil.line("insert(d,2,2);");	# 34 MILline ($65:void)<-($66:str)
    la_a := bat.insert(d,2,2);	# 35 BKCinsert_bun (la_a:bat[:int,:int])<-(d:bat[:int,:int])($68:int)($68:int)
    mil.line("insert(d,4,3);");	# 36 MILline ($69:void)<-($70:str)
    ma_a := bat.insert(d,4,3);	# 37 BKCinsert_bun (ma_a:bat[:int,:int])<-(d:bat[:int,:int])($40:int)($72:int)
    mil.line("insert(d,4,4);");	# 38 MILline ($73:void)<-($74:str)
    na_a := bat.insert(d,4,4);	# 39 BKCinsert_bun (na_a:bat[:int,:int])<-(d:bat[:int,:int])($76:int)($76:int)
    mil.line("insert(d,9,4);");	# 40 MILline ($77:void)<-($78:str)
    oa_a := bat.insert(d,9,4);	# 41 BKCinsert_bun (oa_a:bat[:int,:int])<-(d:bat[:int,:int])($80:int)($76:int)
    mil.line("insert(d,int(nil),5);");	# 42 MILline ($81:void)<-($82:str)
    pa_a := calc.int(nil);	# 43 CALCnil2int (pa_a:int)<-($84:void)
    qa_a := bat.insert(d,pa_a,5);	# 44 BKCinsert_bun (qa_a:bat[:int,:int])<-(d:bat[:int,:int])(pa_a:int)($86:int)
    mil.line("d.print();");	# 45 MILline ($87:void)<-($88:str)
    ra_a := io.print(d);	# 46 IOprint_val (ra_a:int)<-(d:bat[:int,:int])
    mil.line("var z:=c.semijoin(d);");	# 47 MILline ($90:void)<-($91:str)
    z := algebra.semijoin(c,d);	# 48 ALGsemijoin (z:bat[:int,:int])<-(c:bat[:int,:int])(d:bat[:int,:int])
    mil.line("z.print();");	# 49 MILline ($93:void)<-($94:str)
    sa_a := io.print(z);	# 50 IOprint_val (sa_a:int)<-(z:bat[:int,:int])
    mil.line("z:=c.reverse().semijoin(d);");	# 51 MILline ($96:void)<-($97:str)
    ta_a := bat.reverse(c);	# 52 BKCreverse (ta_a:bat[:int,:int])<-(c:bat[:int,:int])
    z := algebra.semijoin(ta_a,d);	# 53 ALGsemijoin (z:bat[:int,:int])<-(ta_a:bat[:int,:int])(d:bat[:int,:int])
    mil.line("z.print();");	# 54 MILline ($99:void)<-($94:str)
    ua_a := io.print(z);	# 55 IOprint_val (ua_a:int)<-(z:bat[:int,:int])
    mil.line("z:=d.semijoin(c);");	# 56 MILline ($101:void)<-($102:str)
    z := algebra.semijoin(d,c);	# 57 ALGsemijoin (z:bat[:int,:int])<-(d:bat[:int,:int])(c:bat[:int,:int])
    mil.line("z.print();");	# 58 MILline ($103:void)<-($94:str)
    va_a := io.print(z);	# 59 IOprint_val (va_a:int)<-(z:bat[:int,:int])
    mil.line("# String management\n");	# 60 MILline ($105:void)<-($106:str)
    b := bbp.new(nil:oid,"nil:str");	# 61 CMDBATnew (b:bat[:oid,:str])<-($108:oid)($109:str)
    mil.line("b.insert(oid(1),\"hello\");");	# 62 MILline ($110:void)<-($111:str)
    wa_a := calc.oid(1);	# 63 CALCint2oid (wa_a:oid)<-($113:int)
    xa_a := bat.insert(b,wa_a,"hello");	# 64 BKCinsert_bun (xa_a:bat[:oid,:str])<-(b:bat[:oid,:str])(wa_a:oid)($115:str)
    mil.line("b.insert(oid(2),\"world\");");	# 65 MILline ($116:void)<-($117:str)
    ya_a := calc.oid(2);	# 66 CALCint2oid (ya_a:oid)<-($119:int)
    ab_a := bat.insert(b,ya_a,"world");	# 67 BKCinsert_bun (ab_a:bat[:oid,:str])<-(b:bat[:oid,:str])(ya_a:oid)($121:str)
    mil.line("b.insert(oid(3),\"..\");");	# 68 MILline ($122:void)<-($123:str)
    bb_a := calc.oid(3);	# 69 CALCint2oid (bb_a:oid)<-($125:int)
    cb_a := bat.insert(b,bb_a,"..");	# 70 BKCinsert_bun (cb_a:bat[:oid,:str])<-(b:bat[:oid,:str])(bb_a:oid)($127:str)
    mil.line("var z1:= b.semijoin(b);");	# 71 MILline ($128:void)<-($129:str)
    z1 := algebra.semijoin(b,b);	# 72 ALGsemijoin (z1:bat[:oid,:str])<-(b:bat[:oid,:str])(b:bat[:oid,:str])
    mil.line("z1.print();");	# 73 MILline ($131:void)<-($132:str)
    db_a := io.print(z1);	# 74 IOprint_val (db_a:int)<-(z1:bat[:oid,:str])
    mil.line("quit();");	# 75 MILline ($134:void)<-($135:str)
    eb_a := clients.quit();	# 76 CLTquit (eb_a:void)
end main;	# 77  
#setoid(oid(20000000));
## testing merge semijoin
#var c:= new(int,int);
#insert(c,1,1);
#insert(c,2,2);
#insert(c,3,4);
#insert(c,4,4);
#insert(c,4,9);
#insert(c,5,int(nil));
#c.print();
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  4	  ]
[ 4,	  4	  ]
[ 4,	  9	  ]
[ 5,	  nil	  ]
#var d:= new(int,int);
#insert(d,1,1);
#insert(d,2,2);
#insert(d,4,3);
#insert(d,4,4);
#insert(d,9,4);
#insert(d,int(nil),5);
#d.print();
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
[ 9,	  4	  ]
[ nil,	  5	  ]
#var z:=c.semijoin(d);
#z.print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  4	  ]
[ 4,	  9	  ]
#z:=c.reverse().semijoin(d);
#z.print();
#-----------------#
# BAT:	  tmp_26  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
[ 9,	  4	  ]
#z:=d.semijoin(c);
#z.print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
## String management
#var b:= new(oid,str);
#b.insert(oid(1),"hello");
#b.insert(oid(2),"world");
#b.insert(oid(3),"..");
#var z1:= b.semijoin(b);
#z1.print();
#-------------------------#
# BAT:	  tmp_27	  #
# (void)  (str)		  #
#-------------------------#
[ 1@0,	  "hello"	  ]
[ 2@0,	  "world"	  ]
[ 3@0,	  ".."		  ]

# 19:43:19 >  
# 19:43:19 >  Done.
# 19:43:19 >  

