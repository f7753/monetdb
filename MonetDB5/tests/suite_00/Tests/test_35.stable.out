stdout of test 'test_35` in directory 'tests/suite_00` itself:

#> Mtest (20:57:26):	milS test_35 milS
#> Mtest (20:57:26):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_35.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_35.milS

# 19:43:18 >  
# 19:43:18 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux//var/MonetDB5/log" --set mapi_port=43031 --set sql_port=57193 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_35.mal </dev/null
# 19:43:18 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("# testing merge semijoin\n");
#	mil.line("var c:= new(int,int);");
#	c := new(nil:int,nil:int);
#	mil.line("insert(c,1,1);");
#	ca_a := insert(c,1,1);
#	mil.line("insert(c,2,2);");
#	da_a := insert(c,2,2);
#	mil.line("insert(c,3,4);");
#	ea_a := insert(c,3,4);
#	mil.line("insert(c,4,4);");
#	fa_a := insert(c,4,4);
#	mil.line("insert(c,4,9);");
#	ga_a := insert(c,4,9);
#	mil.line("insert(c,5,int(nil));");
#	ha_a := int(nil);
#	ia_a := insert(c,5,ha_a);
#	mil.line("c.print();");
#	ja_a := print(c);
#	mil.line("var d:= new(int,int);");
#	d := new(nil:int,nil:int);
#	mil.line("insert(d,1,1);");
#	ka_a := insert(d,1,1);
#	mil.line("insert(d,2,2);");
#	la_a := insert(d,2,2);
#	mil.line("insert(d,4,3);");
#	ma_a := insert(d,4,3);
#	mil.line("insert(d,4,4);");
#	na_a := insert(d,4,4);
#	mil.line("insert(d,9,4);");
#	oa_a := insert(d,9,4);
#	mil.line("insert(d,int(nil),5);");
#	pa_a := int(nil);
#	qa_a := insert(d,pa_a,5);
#	mil.line("d.print();");
#	ra_a := print(d);
#	mil.line("var z:=c.semijoin(d);");
#	z := semijoin(c,d);
#	mil.line("z.print();");
#	sa_a := print(z);
#	mil.line("z:=c.reverse().semijoin(d);");
#	ta_a := reverse(c);
#	z := semijoin(ta_a,d);
#	mil.line("z.print();");
#	ua_a := print(z);
#	mil.line("z:=d.semijoin(c);");
#	z := semijoin(d,c);
#	mil.line("z.print();");
#	va_a := print(z);
#	mil.line("# String management\n");
#	mil.line("var b:= new(oid,str);");
#	b := new(nil:oid,nil:str);
#	mil.line("b.insert(oid(1),\"hello\");");
#	wa_a := oid(1);
#	xa_a := insert(b,wa_a,"hello");
#	mil.line("b.insert(oid(2),\"world\");");
#	ya_a := oid(2);
#	ab_a := insert(b,ya_a,"world");
#	mil.line("b.insert(oid(3),\"..\");");
#	bb_a := oid(3);
#	cb_a := insert(b,bb_a,"..");
#	mil.line("var z1:= b.semijoin(b);");
#	z1 := semijoin(b,b);
#	mil.line("z1.print();");
#	db_a := print(z1);
#	mil.line("quit();");
#	eb_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# testing merge semijoin\n");	# 4 MILline ($6:void)<-($7:str)
    c := bbp.new(nil,nil);	# 5 CMDBATnew (c:bat[:int,:int])<-($9:int)($9:int)
    mil.line("insert(c,1,1);");	# 6 MILline ($10:void)<-($11:str)
    ca_a := bat.insert(c,1,1);	# 7 BKCinsert_bun (ca_a:void)<-(c:bat[:int,:int])($13:int)($13:int)
    mil.line("insert(c,2,2);");	# 8 MILline ($14:void)<-($15:str)
    da_a := bat.insert(c,2,2);	# 9 BKCinsert_bun (da_a:void)<-(c:bat[:int,:int])($17:int)($17:int)
    mil.line("insert(c,3,4);");	# 10 MILline ($18:void)<-($19:str)
    ea_a := bat.insert(c,3,4);	# 11 BKCinsert_bun (ea_a:void)<-(c:bat[:int,:int])($21:int)($22:int)
    mil.line("insert(c,4,4);");	# 12 MILline ($23:void)<-($24:str)
    fa_a := bat.insert(c,4,4);	# 13 BKCinsert_bun (fa_a:void)<-(c:bat[:int,:int])($22:int)($22:int)
    mil.line("insert(c,4,9);");	# 14 MILline ($26:void)<-($27:str)
    ga_a := bat.insert(c,4,9);	# 15 BKCinsert_bun (ga_a:void)<-(c:bat[:int,:int])($22:int)($29:int)
    mil.line("insert(c,5,int(nil));");	# 16 MILline ($30:void)<-($31:str)
    ha_a := calc.int(nil);	# 17 CALCnil2int (ha_a:int)<-($33:void)
    ia_a := bat.insert(c,5,ha_a);	# 18 BKCinsert_bun (ia_a:void)<-(c:bat[:int,:int])($35:int)(ha_a:int)
    mil.line("c.print();");	# 19 MILline ($36:void)<-($37:str)
    ja_a := io.print(c);	# 20 IOprint_val (ja_a:int)<-(c:bat[:int,:int])
    mil.line("var d:= new(int,int);");	# 21 MILline ($39:void)<-($40:str)
    d := bbp.new(nil,nil);	# 22 CMDBATnew (d:bat[:int,:int])<-($42:int)($42:int)
    mil.line("insert(d,1,1);");	# 23 MILline ($43:void)<-($44:str)
    ka_a := bat.insert(d,1,1);	# 24 BKCinsert_bun (ka_a:void)<-(d:bat[:int,:int])($46:int)($46:int)
    mil.line("insert(d,2,2);");	# 25 MILline ($47:void)<-($48:str)
    la_a := bat.insert(d,2,2);	# 26 BKCinsert_bun (la_a:void)<-(d:bat[:int,:int])($50:int)($50:int)
    mil.line("insert(d,4,3);");	# 27 MILline ($51:void)<-($52:str)
    ma_a := bat.insert(d,4,3);	# 28 BKCinsert_bun (ma_a:void)<-(d:bat[:int,:int])($22:int)($54:int)
    mil.line("insert(d,4,4);");	# 29 MILline ($55:void)<-($56:str)
    na_a := bat.insert(d,4,4);	# 30 BKCinsert_bun (na_a:void)<-(d:bat[:int,:int])($58:int)($58:int)
    mil.line("insert(d,9,4);");	# 31 MILline ($59:void)<-($60:str)
    oa_a := bat.insert(d,9,4);	# 32 BKCinsert_bun (oa_a:void)<-(d:bat[:int,:int])($62:int)($58:int)
    mil.line("insert(d,int(nil),5);");	# 33 MILline ($63:void)<-($64:str)
    pa_a := calc.int(nil);	# 34 CALCnil2int (pa_a:int)<-($66:void)
    qa_a := bat.insert(d,pa_a,5);	# 35 BKCinsert_bun (qa_a:void)<-(d:bat[:int,:int])(pa_a:int)($68:int)
    mil.line("d.print();");	# 36 MILline ($69:void)<-($70:str)
    ra_a := io.print(d);	# 37 IOprint_val (ra_a:int)<-(d:bat[:int,:int])
    mil.line("var z:=c.semijoin(d);");	# 38 MILline ($72:void)<-($73:str)
    z := algebra.semijoin(c,d);	# 39 ALGsemijoin (z:bat[:int,:int])<-(c:bat[:int,:int])(d:bat[:int,:int])
    mil.line("z.print();");	# 40 MILline ($75:void)<-($76:str)
    sa_a := io.print(z);	# 41 IOprint_val (sa_a:int)<-(z:bat[:int,:int])
    mil.line("z:=c.reverse().semijoin(d);");	# 42 MILline ($78:void)<-($79:str)
    ta_a := bat.reverse(c);	# 43 BKCreverse (ta_a:bat[:int,:int])<-(c:bat[:int,:int])
    z := algebra.semijoin(ta_a,d);	# 44 ALGsemijoin (z:bat[:int,:int])<-(ta_a:bat[:int,:int])(d:bat[:int,:int])
    mil.line("z.print();");	# 45 MILline ($81:void)<-($76:str)
    ua_a := io.print(z);	# 46 IOprint_val (ua_a:int)<-(z:bat[:int,:int])
    mil.line("z:=d.semijoin(c);");	# 47 MILline ($83:void)<-($84:str)
    z := algebra.semijoin(d,c);	# 48 ALGsemijoin (z:bat[:int,:int])<-(d:bat[:int,:int])(c:bat[:int,:int])
    mil.line("z.print();");	# 49 MILline ($85:void)<-($76:str)
    va_a := io.print(z);	# 50 IOprint_val (va_a:int)<-(z:bat[:int,:int])
    mil.line("# String management\n");	# 51 MILline ($87:void)<-($88:str)
    b := bbp.new(nil,"nil");	# 52 CMDBATnew (b:bat[:oid,:str])<-($90:oid)($91:str)
    mil.line("b.insert(oid(1),\"hello\");");	# 53 MILline ($92:void)<-($93:str)
    wa_a := calc.oid(1);	# 54 CALCint2oid (wa_a:oid)<-($95:int)
    xa_a := bat.insert(b,wa_a,"hello");	# 55 BKCinsert_bun (xa_a:void)<-(b:bat[:oid,:str])(wa_a:oid)($97:str)
    mil.line("b.insert(oid(2),\"world\");");	# 56 MILline ($98:void)<-($99:str)
    ya_a := calc.oid(2);	# 57 CALCint2oid (ya_a:oid)<-($101:int)
    ab_a := bat.insert(b,ya_a,"world");	# 58 BKCinsert_bun (ab_a:void)<-(b:bat[:oid,:str])(ya_a:oid)($103:str)
    mil.line("b.insert(oid(3),\"..\");");	# 59 MILline ($104:void)<-($105:str)
    bb_a := calc.oid(3);	# 60 CALCint2oid (bb_a:oid)<-($107:int)
    cb_a := bat.insert(b,bb_a,"..");	# 61 BKCinsert_bun (cb_a:void)<-(b:bat[:oid,:str])(bb_a:oid)($109:str)
    mil.line("var z1:= b.semijoin(b);");	# 62 MILline ($110:void)<-($111:str)
    z1 := algebra.semijoin(b,b);	# 63 ALGsemijoin (z1:bat[:oid,:str])<-(b:bat[:oid,:str])(b:bat[:oid,:str])
    mil.line("z1.print();");	# 64 MILline ($113:void)<-($114:str)
    db_a := io.print(z1);	# 65 IOprint_val (db_a:int)<-(z1:bat[:oid,:str])
    mil.line("quit();");	# 66 MILline ($116:void)<-($117:str)
    eb_a := clients.quit();	# 67 CLTquit (eb_a:void)
end main;	# 68  
#setoid(oid(20000000));
## testing merge semijoin
#var c:= new(int,int);
#insert(c,1,1);
#insert(c,2,2);
#insert(c,3,4);
#insert(c,4,4);
#insert(c,4,9);
#insert(c,5,int(nil));
#c.print();
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  4	  ]
[ 4,	  4	  ]
[ 4,	  9	  ]
[ 5,	  nil	  ]
#var d:= new(int,int);
#insert(d,1,1);
#insert(d,2,2);
#insert(d,4,3);
#insert(d,4,4);
#insert(d,9,4);
#insert(d,int(nil),5);
#d.print();
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
[ 9,	  4	  ]
[ nil,	  5	  ]
#var z:=c.semijoin(d);
#z.print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  4	  ]
[ 4,	  9	  ]
#z:=c.reverse().semijoin(d);
#z.print();
#-----------------#
# BAT:	  tmp_26  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
[ 9,	  4	  ]
#z:=d.semijoin(c);
#z.print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
## String management
#var b:= new(oid,str);
#b.insert(oid(1),"hello");
#b.insert(oid(2),"world");
#b.insert(oid(3),"..");
#var z1:= b.semijoin(b);
#z1.print();
#-------------------------#
# BAT:	  tmp_27	  #
# (void)  (str)		  #
#-------------------------#
[ 1@0,	  "hello"	  ]
[ 2@0,	  "world"	  ]
[ 3@0,	  ".."		  ]

# 19:43:19 >  
# 19:43:19 >  Done.
# 19:43:19 >  

