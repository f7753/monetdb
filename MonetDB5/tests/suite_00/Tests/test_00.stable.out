stdout of test 'test_00` in directory 'tests/suite_00` itself:


# 09:23:24 >  
# 09:23:24 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=44044 --set sql_port=56545 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_00.mal </dev/null
# 09:23:24 >  













!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock.
!WARNING: BBPdir: initializing BBP.
# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
## Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("#test basic functionality of the BAT library.\n");
#	mil.line("#focussed on integers\n");
#	mil.line("#it includes insertions,deletions,selections, and joins.\n");
#	mil.line("var b:= new(int,int);");
#	b := new(:int,:int);
#	mil.line("#b.roles(\"head\",\"tail\"); roles was removed from the kernel ops\n");
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.info().print(); printf(\"#~EndVariableOutput~#\\n\");");
#	ca_a := printf("#~BeginVariableOutput~#\n");
#	da_a := info(b);
#	ea_a := print(da_a);
#	fa_a := printf("#~EndVariableOutput~#\n");
#	mil.line("b.insert(1,15);");
#	ga_a := insert(b,1,15);
#	mil.line("b.insert(2,4);");
#	ha_a := insert(b,2,4);
#	mil.line("b.insert(3,int(nil));");
#	ia_a := int(nil);
#	ja_a := insert(b,3,ia_a);
#	mil.line("b.insert(4,16);");
#	ka_a := insert(b,4,16);
#	mil.line("b.insert(5,25);");
#	la_a := insert(b,5,25);
#	mil.line("b.insert(6,36);");
#	ma_a := insert(b,6,36);
#	mil.line("b.insert(7,49);");
#	na_a := insert(b,7,49);
#	mil.line("b.insert(8,64);");
#	oa_a := insert(b,8,64);
#	mil.line("b.insert(9,int(nil));");
#	pa_a := int(nil);
#	qa_a := insert(b,9,pa_a);
#	mil.line("b.insert(int(nil),int(nil));");
#	ra_a := int(nil);
#	sa_a := int(nil);
#	ta_a := insert(b,ra_a,sa_a);
#	mil.line("b.insert(int(nil),81);");
#	ua_a := int(nil);
#	va_a := insert(b,ua_a,81);
#	mil.line("b.print();");
#	wa_a := print(b);
#	mil.line("# Testing simple retrievals\n");
#	mil.line("b.find(1).print();");
#	xa_a := find(b,1);
#	ya_a := print(xa_a);
#	mil.line("b.find(4).print();");
#	ab_a := find(b,4);
#	bb_a := print(ab_a);
#	mil.line("b.find(int(nil)).print();");
#	cb_a := int(nil);
#	db_a := find(b,cb_a);
#	eb_a := print(db_a);
#	mil.line("# This should cause an error\n");
#	mil.line("b.find(10).print();");
##error	fb_a := find(b,10);
##error	gb_a := print(fb_a);
#	mil.line("# Can we delete them and re-insert them later on\n");
#	mil.line("b.delete(4,16);");
#	hb_a := delete(b,4,16);
#	mil.line("b.delete(1,15);");
#	ib_a := delete(b,1,15);
#	mil.line("b.delete(int(nil),81);");
#	jb_a := int(nil);
#	kb_a := delete(b,jb_a,81);
#	mil.line("b.print();");
#	lb_a := print(b);
#	mil.line("b.insert(4,16);");
#	mb_a := insert(b,4,16);
#	mil.line("b.insert(int(nil),81);");
#	nb_a := int(nil);
#	ob_a := insert(b,nb_a,81);
#	mil.line("b.insert(1,15);");
#	pb_a := insert(b,1,15);
#	mil.line("b.count().print();");
#	qb_a := count(b);
#	rb_a := print(qb_a);
#	mil.line("b.print();");
#	sb_a := print(b);
#	mil.line("# Lets cut out a few sections\n");
#	mil.line("b.select(25,64).print();");
#	tb_a := select(b,25,64);
#	ub_a := print(tb_a);
#	mil.line("b.select(4,15).print();");
#	vb_a := select(b,4,15);
#	wb_a := print(vb_a);
#	mil.line("b.select(4,4).print();");
#	xb_a := select(b,4,4);
#	yb_a := print(xb_a);
#	mil.line("# This should cause an error\n");
#	mil.line("b.select(4,3).print();");
#	ac_a := select(b,4,3);
#	bc_a := print(ac_a);
#	mil.line("b.select(81,int(nil)).print();");
#	cc_a := int(nil);
#	dc_a := select(b,81,cc_a);
#	ec_a := print(dc_a);
#	mil.line("b.select(int(nil),int(nil)).print();");
#	fc_a := int(nil);
#	gc_a := int(nil);
#	hc_a := select(b,fc_a,gc_a);
#	ic_a := print(hc_a);
#	mil.line("# A 2-dimensional cut\n");
#	mil.line("var bn:=b.fragment(1,5,4,15);bn.print();");
#	bn := fragment(b,1,5,4,15);
#	jc_a := print(bn);
#	mil.line("b.fragment(1,5,16,int(nil)).print();");
#	kc_a := int(nil);
#	lc_a := fragment(b,1,5,16,kc_a);
#	mc_a := print(lc_a);
#	mil.line("b.fragment(1,int(nil),16,int(nil)).print();");
#	nc_a := int(nil);
#	oc_a := int(nil);
#	pc_a := fragment(b,1,nc_a,16,oc_a);
#	qc_a := print(pc_a);
#	mil.line("b.fragment(int(nil),int(nil),16,int(nil)).print();");
#	rc_a := int(nil);
#	sc_a := int(nil);
#	tc_a := int(nil);
#	uc_a := fragment(b,rc_a,sc_a,16,tc_a);
#	vc_a := print(uc_a);
#	mil.line("bn:= b.join(bn.reverse());");
#	wc_a := reverse(bn);
#	bn := join(b,wc_a);
#	mil.line("bn.print();");
#	xc_a := print(bn);
#	mil.line("bn:= b.semijoin(bn.reverse());");
#	yc_a := reverse(bn);
#	bn := semijoin(b,yc_a);
#	mil.line("bn.print();");
#	ad_a := print(bn);
#	mil.line("# band join experiment\n");
#	mil.line("var c:= b.copy();");
#	c := copy(b);
#	mil.line("bandjoin(b,c,4,4).print();");
#	bd_a := bandjoin(b,c,4,4);
#	cd_a := print(bd_a);
#	mil.line("#and theta joins\?\n");
#	mil.line("b.thetajoin(c,LT,lng(nil)).print();");
#	LT:= mil.take("LT");
#	dd_a := lng(nil);
#	ed_a := thetajoin(b,c,LT,dd_a);
#	fd_a := print(ed_a);
#	mil.line("quit();");
#	gd_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($31:void)<-($32:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($34:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#test basic functionality of the BAT library.\n");	# 4 MILline ($36:void)<-($37:str)
    mil.line("#focussed on integers\n");	# 5 MILline ($38:void)<-($39:str)
    mil.line("#it includes insertions,deletions,selections, and joins.\n");	# 6 MILline ($40:void)<-($41:str)
    mil.line("var b:= new(int,int);");	# 7 MILline ($42:void)<-($43:str)
    b := bbp.new(nil:int,nil:int);	# 8 CMDBATnew (b:bat[:int,:int])<-($45:int)($45:int)
    mil.line("#b.roles(\"head\",\"tail\"); roles was removed from the kernel ops\n");	# 9 MILline ($46:void)<-($47:str)
    ca_a := io.printf("#~BeginVariableOutput~#\n");	# 10 IOprint_str (ca_a:int)<-($49:str)
    da_a := bat.info(b);	# 11 BKCinfo (da_a:bat[:str,:str])<-(b:bat[:int,:int])
    ea_a := io.print(da_a);	# 12 IOprint_val (ea_a:int)<-(da_a:bat[:str,:str])
    fa_a := io.printf("#~EndVariableOutput~#\n");	# 13 IOprint_str (fa_a:int)<-($53:str)
    mil.line("b.insert(1,15);");	# 14 MILline ($54:void)<-($55:str)
    ga_a := mil.insert(b,1,15);	# 15 MILinsert_bun (ga_a:bat[:int,:int])<-(b:bat[:int,:int])($57:int)($58:int)
    mil.line("b.insert(2,4);");	# 16 MILline ($59:void)<-($60:str)
    ha_a := mil.insert(b,2,4);	# 17 MILinsert_bun (ha_a:bat[:int,:int])<-(b:bat[:int,:int])($62:int)($63:int)
    mil.line("b.insert(3,int(nil));");	# 18 MILline ($64:void)<-($65:str)
    ia_a := calc.int(nil);	# 19 CALCnil2int (ia_a:int)<-($67:void)
    ja_a := mil.insert(b,3,ia_a);	# 20 MILinsert_bun (ja_a:bat[:int,:int])<-(b:bat[:int,:int])($69:int)(ia_a:int)
    mil.line("b.insert(4,16);");	# 21 MILline ($70:void)<-($71:str)
    ka_a := mil.insert(b,4,16);	# 22 MILinsert_bun (ka_a:bat[:int,:int])<-(b:bat[:int,:int])($63:int)($73:int)
    mil.line("b.insert(5,25);");	# 23 MILline ($74:void)<-($75:str)
    la_a := mil.insert(b,5,25);	# 24 MILinsert_bun (la_a:bat[:int,:int])<-(b:bat[:int,:int])($77:int)($78:int)
    mil.line("b.insert(6,36);");	# 25 MILline ($79:void)<-($80:str)
    ma_a := mil.insert(b,6,36);	# 26 MILinsert_bun (ma_a:bat[:int,:int])<-(b:bat[:int,:int])($82:int)($83:int)
    mil.line("b.insert(7,49);");	# 27 MILline ($84:void)<-($85:str)
    na_a := mil.insert(b,7,49);	# 28 MILinsert_bun (na_a:bat[:int,:int])<-(b:bat[:int,:int])($87:int)($88:int)
    mil.line("b.insert(8,64);");	# 29 MILline ($89:void)<-($90:str)
    oa_a := mil.insert(b,8,64);	# 30 MILinsert_bun (oa_a:bat[:int,:int])<-(b:bat[:int,:int])($92:int)($93:int)
    mil.line("b.insert(9,int(nil));");	# 31 MILline ($94:void)<-($95:str)
    pa_a := calc.int(nil);	# 32 CALCnil2int (pa_a:int)<-($67:void)
    qa_a := mil.insert(b,9,pa_a);	# 33 MILinsert_bun (qa_a:bat[:int,:int])<-(b:bat[:int,:int])($98:int)(pa_a:int)
    mil.line("b.insert(int(nil),int(nil));");	# 34 MILline ($99:void)<-($100:str)
    ra_a := calc.int(nil);	# 35 CALCnil2int (ra_a:int)<-($102:void)
    sa_a := calc.int(nil);	# 36 CALCnil2int (sa_a:int)<-($102:void)
    ta_a := mil.insert(b,ra_a,sa_a);	# 37 MILinsert_bun (ta_a:bat[:int,:int])<-(b:bat[:int,:int])(ra_a:int)(sa_a:int)
    mil.line("b.insert(int(nil),81);");	# 38 MILline ($105:void)<-($106:str)
    ua_a := calc.int(nil);	# 39 CALCnil2int (ua_a:int)<-($102:void)
    va_a := mil.insert(b,ua_a,81);	# 40 MILinsert_bun (va_a:bat[:int,:int])<-(b:bat[:int,:int])(ua_a:int)($109:int)
    mil.line("b.print();");	# 41 MILline ($110:void)<-($111:str)
    wa_a := io.print(b);	# 42 IOprint_val (wa_a:int)<-(b:bat[:int,:int])
    mil.line("# Testing simple retrievals\n");	# 43 MILline ($113:void)<-($114:str)
    xa_a := algebra.find(b,1);	# 44 ALGfind (xa_a:int)<-(b:bat[:int,:int])($116:int)
    ya_a := io.print(xa_a);	# 45 IOprint_val (ya_a:int)<-(xa_a:int)
    mil.line("b.find(4).print();");	# 46 MILline ($118:void)<-($119:str)
    ab_a := algebra.find(b,4);	# 47 ALGfind (ab_a:int)<-(b:bat[:int,:int])($121:int)
    bb_a := io.print(ab_a);	# 48 IOprint_val (bb_a:int)<-(ab_a:int)
    mil.line("b.find(int(nil)).print();");	# 49 MILline ($123:void)<-($124:str)
    cb_a := calc.int(nil);	# 50 CALCnil2int (cb_a:int)<-($102:void)
    db_a := algebra.find(b,cb_a);	# 51 ALGfind (db_a:int)<-(b:bat[:int,:int])(cb_a:int)
    eb_a := io.print(db_a);	# 52 IOprint_val (eb_a:int)<-(db_a:int)
    mil.line("# This should cause an error\n");	# 53 MILline ($128:void)<-($129:str)
    mil.line("# Can we delete them and re-insert them later on\n");	# 54 MILline ($130:void)<-($131:str)
    hb_a := bat.delete(b,4,16);	# 55 BKCdelete_bun (hb_a:bat[:int,:int])<-(b:bat[:int,:int])($121:int)($133:int)
    mil.line("b.delete(1,15);");	# 56 MILline ($134:void)<-($135:str)
    ib_a := bat.delete(b,1,15);	# 57 BKCdelete_bun (ib_a:bat[:int,:int])<-(b:bat[:int,:int])($116:int)($137:int)
    mil.line("b.delete(int(nil),81);");	# 58 MILline ($138:void)<-($139:str)
    jb_a := calc.int(nil);	# 59 CALCnil2int (jb_a:int)<-($141:void)
    kb_a := bat.delete(b,jb_a,81);	# 60 BKCdelete_bun (kb_a:bat[:int,:int])<-(b:bat[:int,:int])(jb_a:int)($143:int)
    mil.line("b.print();");	# 61 MILline ($144:void)<-($145:str)
    lb_a := io.print(b);	# 62 IOprint_val (lb_a:int)<-(b:bat[:int,:int])
    mil.line("b.insert(4,16);");	# 63 MILline ($147:void)<-($148:str)
    mb_a := mil.insert(b,4,16);	# 64 MILinsert_bun (mb_a:bat[:int,:int])<-(b:bat[:int,:int])($121:int)($133:int)
    mil.line("b.insert(int(nil),81);");	# 65 MILline ($150:void)<-($151:str)
    nb_a := calc.int(nil);	# 66 CALCnil2int (nb_a:int)<-($141:void)
    ob_a := mil.insert(b,nb_a,81);	# 67 MILinsert_bun (ob_a:bat[:int,:int])<-(b:bat[:int,:int])(nb_a:int)($143:int)
    mil.line("b.insert(1,15);");	# 68 MILline ($154:void)<-($155:str)
    pb_a := mil.insert(b,1,15);	# 69 MILinsert_bun (pb_a:bat[:int,:int])<-(b:bat[:int,:int])($157:int)($137:int)
    mil.line("b.count().print();");	# 70 MILline ($158:void)<-($159:str)
    qb_a := algebra.count(b);	# 71 ALGcount_bat (qb_a:lng)<-(b:bat[:int,:int])
    rb_a := io.print(qb_a);	# 72 IOprint_val (rb_a:int)<-(qb_a:lng)
    mil.line("b.print();");	# 73 MILline ($162:void)<-($145:str)
    sb_a := io.print(b);	# 74 IOprint_val (sb_a:int)<-(b:bat[:int,:int])
    mil.line("# Lets cut out a few sections\n");	# 75 MILline ($164:void)<-($165:str)
    tb_a := algebra.select(b,25,64);	# 76 ALGselect (tb_a:bat[:int,:int])<-(b:bat[:int,:int])($167:int)($168:int)
    ub_a := io.print(tb_a);	# 77 IOprint_val (ub_a:int)<-(tb_a:bat[:int,:int])
    mil.line("b.select(4,15).print();");	# 78 MILline ($170:void)<-($171:str)
    vb_a := algebra.select(b,4,15);	# 79 ALGselect (vb_a:bat[:int,:int])<-(b:bat[:int,:int])($173:int)($174:int)
    wb_a := io.print(vb_a);	# 80 IOprint_val (wb_a:int)<-(vb_a:bat[:int,:int])
    mil.line("b.select(4,4).print();");	# 81 MILline ($176:void)<-($177:str)
    xb_a := algebra.select(b,4,4);	# 82 ALGselect (xb_a:bat[:int,:int])<-(b:bat[:int,:int])($173:int)($173:int)
    yb_a := io.print(xb_a);	# 83 IOprint_val (yb_a:int)<-(xb_a:bat[:int,:int])
    mil.line("# This should cause an error\n");	# 84 MILline ($180:void)<-($181:str)
    ac_a := algebra.select(b,4,3);	# 85 ALGselect (ac_a:bat[:int,:int])<-(b:bat[:int,:int])($173:int)($183:int)
    bc_a := io.print(ac_a);	# 86 IOprint_val (bc_a:int)<-(ac_a:bat[:int,:int])
    mil.line("b.select(81,int(nil)).print();");	# 87 MILline ($185:void)<-($186:str)
    cc_a := calc.int(nil);	# 88 CALCnil2int (cc_a:int)<-($188:void)
    dc_a := algebra.select(b,81,cc_a);	# 89 ALGselect (dc_a:bat[:int,:int])<-(b:bat[:int,:int])($190:int)(cc_a:int)
    ec_a := io.print(dc_a);	# 90 IOprint_val (ec_a:int)<-(dc_a:bat[:int,:int])
    mil.line("b.select(int(nil),int(nil)).print();");	# 91 MILline ($192:void)<-($193:str)
    fc_a := calc.int(nil);	# 92 CALCnil2int (fc_a:int)<-($188:void)
    gc_a := calc.int(nil);	# 93 CALCnil2int (gc_a:int)<-($188:void)
    hc_a := algebra.select(b,fc_a,gc_a);	# 94 ALGselect (hc_a:bat[:int,:int])<-(b:bat[:int,:int])(fc_a:int)(gc_a:int)
    ic_a := io.print(hc_a);	# 95 IOprint_val (ic_a:int)<-(hc_a:bat[:int,:int])
    mil.line("# A 2-dimensional cut\n");	# 96 MILline ($198:void)<-($199:str)
    bn := algebra.fragment(b,1,5,4,15);	# 97 ALGfragment (bn:bat[:int,:int])<-(b:bat[:int,:int])($201:int)($202:int)($173:int)($174:int)
    jc_a := io.print(bn);	# 98 IOprint_val (jc_a:int)<-(bn:bat[:int,:int])
    mil.line("b.fragment(1,5,16,int(nil)).print();");	# 99 MILline ($204:void)<-($205:str)
    kc_a := calc.int(nil);	# 100 CALCnil2int (kc_a:int)<-($188:void)
    lc_a := algebra.fragment(b,1,5,16,kc_a);	# 101 ALGfragment (lc_a:bat[:int,:int])<-(b:bat[:int,:int])($201:int)($202:int)($208:int)(kc_a:int)
    mc_a := io.print(lc_a);	# 102 IOprint_val (mc_a:int)<-(lc_a:bat[:int,:int])
    mil.line("b.fragment(1,int(nil),16,int(nil)).print();");	# 103 MILline ($210:void)<-($211:str)
    nc_a := calc.int(nil);	# 104 CALCnil2int (nc_a:int)<-($188:void)
    oc_a := calc.int(nil);	# 105 CALCnil2int (oc_a:int)<-($188:void)
    pc_a := algebra.fragment(b,1,nc_a,16,oc_a);	# 106 ALGfragment (pc_a:bat[:int,:int])<-(b:bat[:int,:int])($201:int)(nc_a:int)($208:int)(oc_a:int)
    qc_a := io.print(pc_a);	# 107 IOprint_val (qc_a:int)<-(pc_a:bat[:int,:int])
    mil.line("b.fragment(int(nil),int(nil),16,int(nil)).print();");	# 108 MILline ($216:void)<-($217:str)
    rc_a := calc.int(nil);	# 109 CALCnil2int (rc_a:int)<-($188:void)
    sc_a := calc.int(nil);	# 110 CALCnil2int (sc_a:int)<-($188:void)
    tc_a := calc.int(nil);	# 111 CALCnil2int (tc_a:int)<-($221:void)
    uc_a := algebra.fragment(b,rc_a,sc_a,16,tc_a);	# 112 ALGfragment (uc_a:bat[:int,:int])<-(b:bat[:int,:int])(rc_a:int)(sc_a:int)($208:int)(tc_a:int)
    vc_a := io.print(uc_a);	# 113 IOprint_val (vc_a:int)<-(uc_a:bat[:int,:int])
    mil.line("bn:= b.join(bn.reverse());");	# 114 MILline ($224:void)<-($225:str)
    wc_a := bat.reverse(bn);	# 115 BKCreverse (wc_a:bat[:int,:int])<-(bn:bat[:int,:int])
    bn := algebra.join(b,wc_a);	# 116 ALGjoin (bn:bat[:int,:int])<-(b:bat[:int,:int])(wc_a:bat[:int,:int])
    mil.line("bn.print();");	# 117 MILline ($227:void)<-($228:str)
    xc_a := io.print(bn);	# 118 IOprint_val (xc_a:int)<-(bn:bat[:int,:int])
    mil.line("bn:= b.semijoin(bn.reverse());");	# 119 MILline ($230:void)<-($231:str)
    yc_a := bat.reverse(bn);	# 120 BKCreverse (yc_a:bat[:int,:int])<-(bn:bat[:int,:int])
    bn := algebra.semijoin(b,yc_a);	# 121 ALGsemijoin (bn:bat[:int,:int])<-(b:bat[:int,:int])(yc_a:bat[:int,:int])
    mil.line("bn.print();");	# 122 MILline ($233:void)<-($228:str)
    ad_a := io.print(bn);	# 123 IOprint_val (ad_a:int)<-(bn:bat[:int,:int])
    mil.line("# band join experiment\n");	# 124 MILline ($235:void)<-($236:str)
    c := algebra.copy(b);	# 125 ALGcopy (c:bat[:int,:int])<-(b:bat[:int,:int])
    mil.line("bandjoin(b,c,4,4).print();");	# 126 MILline ($238:void)<-($239:str)
    bd_a := algebra.bandjoin(b,c,4,4);	# 127 ALGbandjoin (bd_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])($241:int)($241:int)
    cd_a := io.print(bd_a);	# 128 IOprint_val (cd_a:int)<-(bd_a:bat[:int,:int])
    mil.line("#and theta joins\?\n");	# 129 MILline ($243:void)<-($244:str)
    LT := mil.take("LT");	# 130 MILtake (LT:int)<-($245:str)
    dd_a := calc.lng(nil);	# 131 CALCnil2lng (dd_a:lng)<-($221:void)
    ed_a := algebra.thetajoin(b,c,LT,dd_a);	# 132 ALGthetajoinEstimate (ed_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])(LT:int)(dd_a:lng)
    fd_a := io.print(ed_a);	# 133 IOprint_val (fd_a:int)<-(ed_a:bat[:int,:int])
    mil.line("quit();");	# 134 MILline ($249:void)<-($250:str)
    gd_a := clients.quit();	# 135 CLTquit (gd_a:void)
end main;	# 136  
#setoid(oid(20000000));
##test basic functionality of the BAT library.
##focussed on integers
##it includes insertions,deletions,selections, and joins.
#var b:= new(int,int);
##b.roles("head","tail"); roles was removed from the kernel ops
#printf("#~BeginVariableOutput~#\n"); b.info().print(); printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-----------------------------------------#
# h			tmp_14		  # name
# str			str		  # type
#-----------------------------------------#
[ "version",		  "20696"	  ]
[ "batId",			  "tmp_13"	  ]
[ "batCacheid",			  "13"		  ]
[ "batParentid",		  "0"		  ]
[ "batSharecnt",		  "0"		  ]
[ "head",			  "int"		  ]
[ "tail",			  "int"		  ]
[ "batPersistence",		  "transient"	  ]
[ "batRestricted",		  "updatable"	  ]
[ "batRefcnt",			  "1"		  ]
[ "batLRefcnt",			  "1"		  ]
[ "batDirty",			  "dirty"	  ]
[ "batSet",			  "0"		  ]
[ "void_tid",			  "0"		  ]
[ "void_cnt",			  "0"		  ]
[ "hsorted",			  "1"		  ]
[ "hident",			  "h"		  ]
[ "hdense",			  "0"		  ]
[ "hseqbase",			  "0@0"		  ]
[ "hkey",			  "0"		  ]
[ "hloc",			  "0"		  ]
[ "hvarsized",			  "0"		  ]
[ "halign",			  "20000000"	  ]
[ "tident",			  "t"		  ]
[ "tdense",			  "0"		  ]
[ "tseqbase",			  "0@0"		  ]
[ "tsorted",			  "1"		  ]
[ "tkey",			  "0"		  ]
[ "tloc",			  "4"		  ]
[ "tvarsized",			  "0"		  ]
[ "talign",			  "20000001"	  ]
[ "batInserted",		  "1"		  ]
[ "batDeleted",			  "0"		  ]
[ "batHole",			  "0"		  ]
[ "top",			  "1"		  ]
[ "batStamp",			  "13"		  ]
[ "lastUsed",			  "163"		  ]
[ "curStamp",			  "14"		  ]
[ "batCopiedtodisk",		  "0"		  ]
[ "batDirtydesc",		  "clean"	  ]
[ "batDirtybuns",		  "clean"	  ]
[ "batBuns.free",		  "8"		  ]
[ "batBuns.size",		  "424"		  ]
[ "batBuns.maxsize",		  "424"		  ]
[ "batBuns.storage",		  "malloced"	  ]
[ "batBuns.filename",		  "13.buns"	  ]
[ "hheapdirty",			  "clean"	  ]
[ "hheap.free",			  "0"		  ]
[ "hheap.size",			  "0"		  ]
[ "hheap.maxsize",		  "0"		  ]
[ "hheap.storage",		  "absent"	  ]
[ "hheap.filename",		  "no file"	  ]
[ "theapdirty",			  "clean"	  ]
[ "theap.free",			  "0"		  ]
[ "theap.size",			  "0"		  ]
[ "theap.maxsize",		  "0"		  ]
[ "theap.storage",		  "absent"	  ]
[ "theap.filename",		  "no file"	  ]
#~EndVariableOutput~#
#b.insert(1,15);
#b.insert(2,4);
#b.insert(3,int(nil));
#b.insert(4,16);
#b.insert(5,25);
#b.insert(6,36);
#b.insert(7,49);
#b.insert(8,64);
#b.insert(9,int(nil));
#b.insert(int(nil),int(nil));
#b.insert(int(nil),81);
#b.print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
## Testing simple retrievals
#b.find(1).print();
[ 15 ]
#b.find(4).print();
[ 16 ]
#b.find(int(nil)).print();
[ 81 ]
## This should cause an error
#b.find(10).print();
## Can we delete them and re-insert them later on
#b.delete(4,16);
#b.delete(1,15);
#b.delete(int(nil),81);
#b.print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ nil,	  nil	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 9,	  nil	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
#b.insert(4,16);
#b.insert(int(nil),81);
#b.insert(1,15);
#b.count().print();
[ 11 ]
#b.print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ nil,	  nil	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 9,	  nil	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]
[ 1,	  15	  ]
## Lets cut out a few sections
#b.select(25,64).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
#b.select(4,15).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]
#b.select(4,4).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
## This should cause an error
#b.select(4,3).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
#b.select(81,int(nil)).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ nil,	  81	  ]
#b.select(int(nil),int(nil)).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]
[ 1,	  15	  ]
## A 2-dimensional cut
#var bn:=b.fragment(1,5,4,15);bn.print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]
#b.fragment(1,5,16,int(nil)).print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 4,	  16	  ]
#b.fragment(1,int(nil),16,int(nil)).print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
#b.fragment(int(nil),int(nil),16,int(nil)).print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]
#bn:= b.join(bn.reverse());
#bn.print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  2	  ]
[ 1,	  1	  ]
#bn:= b.semijoin(bn.reverse());
#bn.print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]
## band join experiment
#var c:= b.copy();
#bandjoin(b,c,4,4).print();
#-----------------#
# BAT:	  tmp_31  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  nil	  ]
[ 2,	  25	  ]
[ 2,	  36	  ]
[ 2,	  49	  ]
[ 2,	  64	  ]
[ 2,	  16	  ]
[ 2,	  15	  ]
##and theta joins?
#b.thetajoin(c,LT,lng(nil)).print();
#-----------------#
# BAT:	  tmp_31  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  nil	  ]
[ 2,	  25	  ]
[ 2,	  36	  ]
[ 2,	  49	  ]
[ 2,	  64	  ]
#quit();

# 15:33:19 >  
# 15:33:19 >  Done.
# 15:33:19 >  

