stdout of test 'test_00` in directory 'tests/suite_00` itself:


# 09:23:24 >  
# 09:23:24 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=44044 --set sql_port=56545 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_00.mal </dev/null
# 09:23:24 >  





# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
## Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("#test basic functionality of the BAT library.\n");
#	mil.line("#focussed on integers\n");
#	mil.line("#it includes insertions,deletions,selections, and joins.\n");
#	mil.line("var b:= new(int,int);");
#	b := new(:int,:int);
#	mil.line("#b.roles(\"head\",\"tail\"); roles was removed from the kernel ops\n");
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.info().print(); printf(\"#~EndVariableOutput~#\\n\");");
#	ca_a := printf("#~BeginVariableOutput~#\n");
#	da_a := info(b);
#	ea_a := print(da_a);
#	fa_a := printf("#~EndVariableOutput~#\n");
#	mil.line("b.insert(1,15);");
#	ga_a := insert(b,1,15);
#	mil.line("b.insert(2,4);");
#	ha_a := insert(b,2,4);
#	mil.line("b.insert(3,int(nil));");
#	ia_a := int(nil);
#	ja_a := insert(b,3,ia_a);
#	mil.line("b.insert(4,16);");
#	ka_a := insert(b,4,16);
#	mil.line("b.insert(5,25);");
#	la_a := insert(b,5,25);
#	mil.line("b.insert(6,36);");
#	ma_a := insert(b,6,36);
#	mil.line("b.insert(7,49);");
#	na_a := insert(b,7,49);
#	mil.line("b.insert(8,64);");
#	oa_a := insert(b,8,64);
#	mil.line("b.insert(9,int(nil));");
#	pa_a := int(nil);
#	qa_a := insert(b,9,pa_a);
#	mil.line("b.insert(int(nil),int(nil));");
#	ra_a := int(nil);
#	sa_a := int(nil);
#	ta_a := insert(b,ra_a,sa_a);
#	mil.line("b.insert(int(nil),81);");
#	ua_a := int(nil);
#	va_a := insert(b,ua_a,81);
#	mil.line("b.print();");
#	wa_a := print(b);
#	mil.line("# Testing simple retrievals\n");
#	mil.line("b.find(1).print();");
#	xa_a := find(b,1);
#	ya_a := print(xa_a);
#	mil.line("b.find(4).print();");
#	ab_a := find(b,4);
#	bb_a := print(ab_a);
#	mil.line("b.find(int(nil)).print();");
#	cb_a := int(nil);
#	db_a := find(b,cb_a);
#	eb_a := print(db_a);
#	mil.line("# This should cause an error\n");
#	mil.line("b.find(10).print();");
##error	fb_a := find(b,10);
##error	gb_a := print(fb_a);
#	mil.line("# Can we delete them and re-insert them later on\n");
#	mil.line("b.delete(4,16);");
#	hb_a := delete(b,4,16);
#	mil.line("b.delete(1,15);");
#	ib_a := delete(b,1,15);
#	mil.line("b.delete(int(nil),81);");
#	jb_a := int(nil);
#	kb_a := delete(b,jb_a,81);
#	mil.line("b.print();");
#	lb_a := print(b);
#	mil.line("b.insert(4,16);");
#	mb_a := insert(b,4,16);
#	mil.line("b.insert(int(nil),81);");
#	nb_a := int(nil);
#	ob_a := insert(b,nb_a,81);
#	mil.line("b.insert(1,15);");
#	pb_a := insert(b,1,15);
#	mil.line("b.count().print();");
#	qb_a := count(b);
#	rb_a := print(qb_a);
#	mil.line("b.print();");
#	sb_a := print(b);
#	mil.line("# Lets cut out a few sections\n");
#	mil.line("b.select(25,64).print();");
#	tb_a := select(b,25,64);
#	ub_a := print(tb_a);
#	mil.line("b.select(4,15).print();");
#	vb_a := select(b,4,15);
#	wb_a := print(vb_a);
#	mil.line("b.select(4,4).print();");
#	xb_a := select(b,4,4);
#	yb_a := print(xb_a);
#	mil.line("# This should cause an error\n");
#	mil.line("b.select(4,3).print();");
#	ac_a := select(b,4,3);
#	bc_a := print(ac_a);
#	mil.line("b.select(81,int(nil)).print();");
#	cc_a := int(nil);
#	dc_a := select(b,81,cc_a);
#	ec_a := print(dc_a);
#	mil.line("b.select(int(nil),int(nil)).print();");
#	fc_a := int(nil);
#	gc_a := int(nil);
#	hc_a := select(b,fc_a,gc_a);
#	ic_a := print(hc_a);
#	mil.line("# A 2-dimensional cut\n");
#	mil.line("var bn:=b.fragment(1,5,4,15);bn.print();");
#	bn := fragment(b,1,5,4,15);
#	jc_a := print(bn);
#	mil.line("b.fragment(1,5,16,int(nil)).print();");
#	kc_a := int(nil);
#	lc_a := fragment(b,1,5,16,kc_a);
#	mc_a := print(lc_a);
#	mil.line("b.fragment(1,int(nil),16,int(nil)).print();");
#	nc_a := int(nil);
#	oc_a := int(nil);
#	pc_a := fragment(b,1,nc_a,16,oc_a);
#	qc_a := print(pc_a);
#	mil.line("b.fragment(int(nil),int(nil),16,int(nil)).print();");
#	rc_a := int(nil);
#	sc_a := int(nil);
#	tc_a := int(nil);
#	uc_a := fragment(b,rc_a,sc_a,16,tc_a);
#	vc_a := print(uc_a);
#	mil.line("bn:= b.join(bn.reverse());");
#	wc_a := reverse(bn);
#	bn := join(b,wc_a);
#	mil.line("bn.print();");
#	xc_a := print(bn);
#	mil.line("bn:= b.semijoin(bn.reverse());");
#	yc_a := reverse(bn);
#	bn := semijoin(b,yc_a);
#	mil.line("bn.print();");
#	ad_a := print(bn);
#	mil.line("# band join experiment\n");
#	mil.line("var c:= b.copy();");
#	c := copy(b);
#	mil.line("bandjoin(b,c,4,4).print();");
#	bd_a := bandjoin(b,c,4,4);
#	cd_a := print(bd_a);
#	mil.line("#and theta joins\?\n");
#	mil.line("b.thetajoin(c,LT,lng(nil)).print();");
#	LT:= mil.take("LT");
#	dd_a := lng(nil);
#	ed_a := thetajoin(b,c,LT,dd_a);
#	fd_a := print(ed_a);
#	mil.line("quit();");
#	gd_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#test basic functionality of the BAT library.\n");	# 4 MILline ($6:void)<-($7:str)
    mil.line("#focussed on integers");	# 5 MILline ($8:void)<-($9:str)
    mil.line("#focussed on integers\n");	# 6 MILline ($10:void)<-($11:str)
    mil.line("#it includes insertions,deletions,selections, and joins.");	# 7 MILline ($12:void)<-($13:str)
    mil.line("#it includes insertions,deletions,selections, and joins.\n");	# 8 MILline ($14:void)<-($15:str)
    mil.line("");	# 9 MILline ($16:void)<-($17:str)
    mil.line("var b:= new(int,int);");	# 10 MILline ($18:void)<-($19:str)
    b := bbp.new(nil,nil);	# 11 CMDBATnew (b:bat[:int,:int])<-($21:int)($21:int)
    mil.line("#b.roles(\"head\",\"tail\"); roles was removed from the kernel ops\n");	# 12 MILline ($22:void)<-($23:str)
    mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.info().print(); printf(\"#~EndVariableOutput~#\\n\");");	# 13 MILline ($24:void)<-($25:str)
    ca_a := io.printf("#~BeginVariableOutput~#\n");	# 14 IOprint_str (ca_a:int)<-($27:str)
    da_a := bat.info(b);	# 15 BKCinfo (da_a:bat[:str,:str])<-(b:bat[:int,:int])
    ea_a := io.print(da_a);	# 16 IOprint_val (ea_a:int)<-(da_a:bat[:str,:str])
    fa_a := io.printf("#~EndVariableOutput~#\n");	# 17 IOprint_str (fa_a:int)<-($31:str)
    mil.line("b.insert(1,15);");	# 18 MILline ($32:void)<-($33:str)
    ga_a := bat.insert(b,1,15);	# 19 BKCinsert_bun (ga_a:void)<-(b:bat[:int,:int])($35:int)($36:int)
    mil.line("b.insert(2,4);");	# 20 MILline ($37:void)<-($38:str)
    ha_a := bat.insert(b,2,4);	# 21 BKCinsert_bun (ha_a:void)<-(b:bat[:int,:int])($40:int)($41:int)
    mil.line("b.insert(3,int(nil));");	# 22 MILline ($42:void)<-($43:str)
    ia_a := calc.int(nil);	# 23 CALCnil2int (ia_a:int)<-($45:void)
    ja_a := bat.insert(b,3,ia_a);	# 24 BKCinsert_bun (ja_a:void)<-(b:bat[:int,:int])($47:int)(ia_a:int)
    mil.line("b.insert(4,16);");	# 25 MILline ($48:void)<-($49:str)
    ka_a := bat.insert(b,4,16);	# 26 BKCinsert_bun (ka_a:void)<-(b:bat[:int,:int])($41:int)($51:int)
    mil.line("b.insert(5,25);");	# 27 MILline ($52:void)<-($53:str)
    la_a := bat.insert(b,5,25);	# 28 BKCinsert_bun (la_a:void)<-(b:bat[:int,:int])($55:int)($56:int)
    mil.line("b.insert(6,36);");	# 29 MILline ($57:void)<-($58:str)
    ma_a := bat.insert(b,6,36);	# 30 BKCinsert_bun (ma_a:void)<-(b:bat[:int,:int])($60:int)($61:int)
    mil.line("b.insert(7,49);");	# 31 MILline ($62:void)<-($63:str)
    na_a := bat.insert(b,7,49);	# 32 BKCinsert_bun (na_a:void)<-(b:bat[:int,:int])($65:int)($66:int)
    mil.line("b.insert(8,64);");	# 33 MILline ($67:void)<-($68:str)
    oa_a := bat.insert(b,8,64);	# 34 BKCinsert_bun (oa_a:void)<-(b:bat[:int,:int])($70:int)($71:int)
    mil.line("b.insert(9,int(nil));");	# 35 MILline ($72:void)<-($73:str)
    pa_a := calc.int(nil);	# 36 CALCnil2int (pa_a:int)<-($45:void)
    qa_a := bat.insert(b,9,pa_a);	# 37 BKCinsert_bun (qa_a:void)<-(b:bat[:int,:int])($76:int)(pa_a:int)
    mil.line("b.insert(int(nil),int(nil));");	# 38 MILline ($77:void)<-($78:str)
    ra_a := calc.int(nil);	# 39 CALCnil2int (ra_a:int)<-($80:void)
    sa_a := calc.int(nil);	# 40 CALCnil2int (sa_a:int)<-($80:void)
    ta_a := bat.insert(b,ra_a,sa_a);	# 41 BKCinsert_bun (ta_a:void)<-(b:bat[:int,:int])(ra_a:int)(sa_a:int)
    mil.line("b.insert(int(nil),81);");	# 42 MILline ($83:void)<-($84:str)
    ua_a := calc.int(nil);	# 43 CALCnil2int (ua_a:int)<-($80:void)
    va_a := bat.insert(b,ua_a,81);	# 44 BKCinsert_bun (va_a:void)<-(b:bat[:int,:int])(ua_a:int)($87:int)
    mil.line("b.print();");	# 45 MILline ($88:void)<-($89:str)
    wa_a := io.print(b);	# 46 IOprint_val (wa_a:int)<-(b:bat[:int,:int])
    mil.line("# Testing simple retrievals\n");	# 47 MILline ($91:void)<-($92:str)
    mil.line("b.find(1).print();");	# 48 MILline ($93:void)<-($94:str)
    xa_a := algebra.find(b,1);	# 49 ALGfind (xa_a:int)<-(b:bat[:int,:int])($96:int)
    ya_a := io.print(xa_a);	# 50 IOprint_val (ya_a:int)<-(xa_a:int)
    mil.line("b.find(4).print();");	# 51 MILline ($98:void)<-($99:str)
    ab_a := algebra.find(b,4);	# 52 ALGfind (ab_a:int)<-(b:bat[:int,:int])($101:int)
    bb_a := io.print(ab_a);	# 53 IOprint_val (bb_a:int)<-(ab_a:int)
    mil.line("b.find(int(nil)).print();");	# 54 MILline ($103:void)<-($104:str)
    cb_a := calc.int(nil);	# 55 CALCnil2int (cb_a:int)<-($80:void)
    db_a := algebra.find(b,cb_a);	# 56 ALGfind (db_a:int)<-(b:bat[:int,:int])(cb_a:int)
    eb_a := io.print(db_a);	# 57 IOprint_val (eb_a:int)<-(db_a:int)
    mil.line("# This should cause an error\n");	# 58 MILline ($108:void)<-($109:str)
    mil.line("b.find(10).print();");	# 59 MILline ($110:void)<-($111:str)
    mil.line("# Can we delete them and re-insert them later on\n");	# 60 MILline ($112:void)<-($113:str)
    mil.line("b.delete(4,16);");	# 61 MILline ($114:void)<-($115:str)
    hb_a := bat.delete(b,4,16);	# 62 BKCdelete_bun (hb_a:void)<-(b:bat[:int,:int])($101:int)($117:int)
    mil.line("b.delete(1,15);");	# 63 MILline ($118:void)<-($119:str)
    ib_a := bat.delete(b,1,15);	# 64 BKCdelete_bun (ib_a:void)<-(b:bat[:int,:int])($96:int)($121:int)
    mil.line("b.delete(int(nil),81);");	# 65 MILline ($122:void)<-($123:str)
    jb_a := calc.int(nil);	# 66 CALCnil2int (jb_a:int)<-($125:void)
    kb_a := bat.delete(b,jb_a,81);	# 67 BKCdelete_bun (kb_a:void)<-(b:bat[:int,:int])(jb_a:int)($127:int)
    mil.line("b.print();");	# 68 MILline ($128:void)<-($129:str)
    lb_a := io.print(b);	# 69 IOprint_val (lb_a:int)<-(b:bat[:int,:int])
    mil.line("b.insert(4,16);");	# 70 MILline ($131:void)<-($132:str)
    mb_a := bat.insert(b,4,16);	# 71 BKCinsert_bun (mb_a:void)<-(b:bat[:int,:int])($134:int)($117:int)
    mil.line("b.insert(int(nil),81);");	# 72 MILline ($135:void)<-($136:str)
    nb_a := calc.int(nil);	# 73 CALCnil2int (nb_a:int)<-($125:void)
    ob_a := bat.insert(b,nb_a,81);	# 74 BKCinsert_bun (ob_a:void)<-(b:bat[:int,:int])(nb_a:int)($127:int)
    mil.line("b.insert(1,15);");	# 75 MILline ($139:void)<-($140:str)
    pb_a := bat.insert(b,1,15);	# 76 BKCinsert_bun (pb_a:void)<-(b:bat[:int,:int])($142:int)($121:int)
    mil.line("b.count().print();");	# 77 MILline ($143:void)<-($144:str)
    qb_a := algebra.count(b);	# 78 ALGcount_bat (qb_a:lng)<-(b:bat[:int,:int])
    rb_a := io.print(qb_a);	# 79 IOprint_val (rb_a:int)<-(qb_a:lng)
    mil.line("b.print();");	# 80 MILline ($147:void)<-($129:str)
    sb_a := io.print(b);	# 81 IOprint_val (sb_a:int)<-(b:bat[:int,:int])
    mil.line("# Lets cut out a few sections\n");	# 82 MILline ($149:void)<-($150:str)
    mil.line("b.select(25,64).print();");	# 83 MILline ($151:void)<-($152:str)
    tb_a := algebra.select(b,25,64);	# 84 ALGselect (tb_a:bat[:int,:int])<-(b:bat[:int,:int])($154:int)($155:int)
    ub_a := io.print(tb_a);	# 85 IOprint_val (ub_a:int)<-(tb_a:bat[:int,:int])
    mil.line("b.select(4,15).print();");	# 86 MILline ($157:void)<-($158:str)
    vb_a := algebra.select(b,4,15);	# 87 ALGselect (vb_a:bat[:int,:int])<-(b:bat[:int,:int])($134:int)($160:int)
    wb_a := io.print(vb_a);	# 88 IOprint_val (wb_a:int)<-(vb_a:bat[:int,:int])
    mil.line("b.select(4,4).print();");	# 89 MILline ($162:void)<-($163:str)
    xb_a := algebra.select(b,4,4);	# 90 ALGselect (xb_a:bat[:int,:int])<-(b:bat[:int,:int])($134:int)($134:int)
    yb_a := io.print(xb_a);	# 91 IOprint_val (yb_a:int)<-(xb_a:bat[:int,:int])
    mil.line("# This should cause an error\n");	# 92 MILline ($166:void)<-($167:str)
    mil.line("b.select(4,3).print();");	# 93 MILline ($168:void)<-($169:str)
    ac_a := algebra.select(b,4,3);	# 94 ALGselect (ac_a:bat[:int,:int])<-(b:bat[:int,:int])($171:int)($172:int)
    bc_a := io.print(ac_a);	# 95 IOprint_val (bc_a:int)<-(ac_a:bat[:int,:int])
    mil.line("b.select(81,int(nil)).print();");	# 96 MILline ($174:void)<-($175:str)
    cc_a := calc.int(nil);	# 97 CALCnil2int (cc_a:int)<-($177:void)
    dc_a := algebra.select(b,81,cc_a);	# 98 ALGselect (dc_a:bat[:int,:int])<-(b:bat[:int,:int])($179:int)(cc_a:int)
    ec_a := io.print(dc_a);	# 99 IOprint_val (ec_a:int)<-(dc_a:bat[:int,:int])
    mil.line("b.select(int(nil),int(nil)).print();");	# 100 MILline ($181:void)<-($182:str)
    fc_a := calc.int(nil);	# 101 CALCnil2int (fc_a:int)<-($177:void)
    gc_a := calc.int(nil);	# 102 CALCnil2int (gc_a:int)<-($177:void)
    hc_a := algebra.select(b,fc_a,gc_a);	# 103 ALGselect (hc_a:bat[:int,:int])<-(b:bat[:int,:int])(fc_a:int)(gc_a:int)
    ic_a := io.print(hc_a);	# 104 IOprint_val (ic_a:int)<-(hc_a:bat[:int,:int])
    mil.line("# A 2-dimensional cut\n");	# 105 MILline ($187:void)<-($188:str)
    mil.line("var bn:=b.fragment(1,5,4,15);bn.print();");	# 106 MILline ($189:void)<-($190:str)
    bn := algebra.fragment(b,1,5,4,15);	# 107 ALGfragment (bn:bat[:int,:int])<-(b:bat[:int,:int])($192:int)($193:int)($171:int)($194:int)
    jc_a := io.print(bn);	# 108 IOprint_val (jc_a:int)<-(bn:bat[:int,:int])
    mil.line("b.fragment(1,5,16,int(nil)).print();");	# 109 MILline ($196:void)<-($197:str)
    kc_a := calc.int(nil);	# 110 CALCnil2int (kc_a:int)<-($177:void)
    lc_a := algebra.fragment(b,1,5,16,kc_a);	# 111 ALGfragment (lc_a:bat[:int,:int])<-(b:bat[:int,:int])($192:int)($193:int)($200:int)(kc_a:int)
    mc_a := io.print(lc_a);	# 112 IOprint_val (mc_a:int)<-(lc_a:bat[:int,:int])
    mil.line("b.fragment(1,int(nil),16,int(nil)).print();");	# 113 MILline ($202:void)<-($203:str)
    nc_a := calc.int(nil);	# 114 CALCnil2int (nc_a:int)<-($177:void)
    oc_a := calc.int(nil);	# 115 CALCnil2int (oc_a:int)<-($177:void)
    pc_a := algebra.fragment(b,1,nc_a,16,oc_a);	# 116 ALGfragment (pc_a:bat[:int,:int])<-(b:bat[:int,:int])($192:int)(nc_a:int)($200:int)(oc_a:int)
    qc_a := io.print(pc_a);	# 117 IOprint_val (qc_a:int)<-(pc_a:bat[:int,:int])
    mil.line("b.fragment(int(nil),int(nil),16,int(nil)).print();");	# 118 MILline ($208:void)<-($209:str)
    rc_a := calc.int(nil);	# 119 CALCnil2int (rc_a:int)<-($211:void)
    sc_a := calc.int(nil);	# 120 CALCnil2int (sc_a:int)<-($211:void)
    tc_a := calc.int(nil);	# 121 CALCnil2int (tc_a:int)<-($211:void)
    uc_a := algebra.fragment(b,rc_a,sc_a,16,tc_a);	# 122 ALGfragment (uc_a:bat[:int,:int])<-(b:bat[:int,:int])(rc_a:int)(sc_a:int)($200:int)(tc_a:int)
    vc_a := io.print(uc_a);	# 123 IOprint_val (vc_a:int)<-(uc_a:bat[:int,:int])
    mil.line("bn:= b.join(bn.reverse());");	# 124 MILline ($216:void)<-($217:str)
    wc_a := bat.reverse(bn);	# 125 BKCreverse (wc_a:bat[:int,:int])<-(bn:bat[:int,:int])
    bn := algebra.join(b,wc_a);	# 126 ALGjoin (bn:bat[:int,:int])<-(b:bat[:int,:int])(wc_a:bat[:int,:int])
    mil.line("bn.print();");	# 127 MILline ($219:void)<-($220:str)
    xc_a := io.print(bn);	# 128 IOprint_val (xc_a:int)<-(bn:bat[:int,:int])
    mil.line("bn:= b.semijoin(bn.reverse());");	# 129 MILline ($222:void)<-($223:str)
    yc_a := bat.reverse(bn);	# 130 BKCreverse (yc_a:bat[:int,:int])<-(bn:bat[:int,:int])
    bn := algebra.semijoin(b,yc_a);	# 131 ALGsemijoin (bn:bat[:int,:int])<-(b:bat[:int,:int])(yc_a:bat[:int,:int])
    mil.line("bn.print();");	# 132 MILline ($225:void)<-($220:str)
    ad_a := io.print(bn);	# 133 IOprint_val (ad_a:int)<-(bn:bat[:int,:int])
    mil.line("# band join experiment\n");	# 134 MILline ($227:void)<-($228:str)
    mil.line("var c:= b.copy();");	# 135 MILline ($229:void)<-($230:str)
    c := algebra.copy(b);	# 136 ALGcopy (c:bat[:int,:int])<-(b:bat[:int,:int])
    mil.line("bandjoin(b,c,4,4).print();");	# 137 MILline ($232:void)<-($233:str)
    bd_a := algebra.bandjoin(b,c,4,4);	# 138 ALGbandjoin (bd_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])($235:int)($235:int)
    cd_a := io.print(bd_a);	# 139 IOprint_val (cd_a:int)<-(bd_a:bat[:int,:int])
    mil.line("#and theta joins\?\n");	# 140 MILline ($237:void)<-($238:str)
    mil.line("b.thetajoin(c,LT,lng(nil)).print();");	# 141 MILline ($239:void)<-($240:str)
    LT := mil.take("LT");	# 142 MILtake (LT:any)<-($242:str)
    dd_a := calc.lng(nil);	# 143 CALCnil2lng (dd_a:lng)<-($244:void)
    ed_a := algebra.thetajoin(b,c,LT,dd_a);	# 144 ALGthetajoinEstimate (ed_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])(LT:any)(dd_a:lng)
    fd_a := io.print(ed_a);	# 145 IOprint_val (fd_a:int)<-(ed_a:bat[:int,:int])
    mil.line("quit();");	# 146 MILline ($247:void)<-($248:str)
    gd_a := clients.quit();	# 147 CLTquit (gd_a:void)
end main;	# 148  
#setoid(oid(20000000));
##test basic functionality of the BAT library.
##focussed on integers
##it includes insertions,deletions,selections, and joins.
#var b:= new(int,int);
##b.roles("head","tail"); roles was removed from the kernel ops
#printf("#~BeginVariableOutput~#\n"); b.info().print(); printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------------------------------#
# BAT:				  tmp_29	  #
# (str)				  (str)		  #
#-------------------------------------------------#
[ "version",			  "980714"	  ]
[ "batId",			  "tmp_4"	  ]
[ "batCacheid",			  "4"		  ]
[ "batParentid",		  "0"		  ]
[ "batSharecnt",		  "0"		  ]
[ "head",			  "int"		  ]
[ "tail",			  "int"		  ]
[ "batPersistence",		  "transient"	  ]
[ "batRestricted",		  "updatable"	  ]
[ "batRefcnt",			  "0"		  ]
[ "batLRefcnt",			  "1"		  ]
[ "batDirty",			  "dirty"	  ]
[ "batSet",			  "0"		  ]
[ "void_tid",			  "0"		  ]
[ "void_cnt",			  "0"		  ]
[ "hsorted",			  "1"		  ]
[ "hident",			  "h"		  ]
[ "hdense",			  "0"		  ]
[ "hseqbase",			  "0@0"		  ]
[ "hkey",			  "0"		  ]
[ "hloc",			  "0"		  ]
[ "hvarsized",			  "0"		  ]
[ "halign",			  "20000000"	  ]
[ "halignflushed",		  "20000000"	  ]
[ "tident",			  "t"		  ]
[ "tdense",			  "0"		  ]
[ "tseqbase",			  "0@0"		  ]
[ "tsorted",			  "1"		  ]
[ "tkey",			  "0"		  ]
[ "tloc",			  "4"		  ]
[ "tvarsized",			  "0"		  ]
[ "talign",			  "20000001"	  ]
[ "talignflushed",		  "20000001"	  ]
[ "batInserted",		  "1"		  ]
[ "batDeleted",			  "0"		  ]
[ "batHole",			  "0"		  ]
[ "top",			  "1"		  ]
[ "batStamp",			  "4"		  ]
[ "lastUsed",			  "6"		  ]
[ "keepAround",			  "0"		  ]
[ "curStamp",			  "5"		  ]
[ "batCopiedtodisk",		  "0"		  ]
[ "batDirtydesc",		  "clean"	  ]
[ "batDirtybuns",		  "clean"	  ]
[ "batBuns.free",		  "8"		  ]
[ "batBuns.size",		  "424"		  ]
[ "batBuns.maxsize",		  "424"		  ]
[ "batBuns.storage",		  "malloced"	  ]
[ "batBuns.filename",		  "4.buns"	  ]
[ "batBuns.offset",		  "0"		  ]
[ "hheapdirty",			  "clean"	  ]
[ "hheap.free",			  "0"		  ]
[ "hheap.size",			  "0"		  ]
[ "hheap.maxsize",		  "0"		  ]
[ "hheap.storage",		  "absent"	  ]
[ "hheap.filename",		  "4.hheap"	  ]
[ "hheap.offset",		  "0"		  ]
[ "theapdirty",			  "clean"	  ]
[ "theap.free",			  "0"		  ]
[ "theap.size",			  "0"		  ]
[ "theap.maxsize",		  "0"		  ]
[ "theap.storage",		  "absent"	  ]
[ "theap.filename",		  "4.theap"	  ]
[ "theap.offset",		  "0"		  ]
[ "hacctype",			  "null"	  ]
[ "haccdirty",			  "clean"	  ]
[ "haccCopiedtodisk",		  "0"		  ]
[ "haccelerator.free",		  "0"		  ]
[ "haccelerator.size",		  "0"		  ]
[ "haccelerator.maxsize",	  "0"		  ]
[ "haccelerator.storage",	  "absent"	  ]
[ "haccelerator.filename",	  "no file"	  ]
[ "haccelerator.offset",	  "0"		  ]
[ "tacctype",			  "null"	  ]
[ "taccdirty",			  "clean"	  ]
[ "taccCopiedtodisk",		  "0"		  ]
[ "taccelerator.free",		  "0"		  ]
[ "taccelerator.size",		  "0"		  ]
[ "taccelerator.maxsize",	  "0"		  ]
[ "taccelerator.storage",	  "absent"	  ]
[ "taccelerator.filename",	  "no file"	  ]
[ "taccelerator.offset",	  "0"		  ]
[ "head_index",			  "absent"	  ]
[ "tail_index",			  "absent"	  ]
#~EndVariableOutput~#
#b.insert(1,15);
#b.insert(2,4);
#b.insert(3,int(nil));
#b.insert(4,16);
#b.insert(5,25);
#b.insert(6,36);
#b.insert(7,49);
#b.insert(8,64);
#b.insert(9,int(nil));
#b.insert(int(nil),int(nil));
#b.insert(int(nil),81);
#b.print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
## Testing simple retrievals
#b.find(1).print();
[ 15 ]
#b.find(4).print();
[ 16 ]
#b.find(int(nil)).print();
[ 81 ]
## This should cause an error
#b.find(10).print();
## Can we delete them and re-insert them later on
#b.delete(4,16);
#b.delete(1,15);
#b.delete(int(nil),81);
#b.print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ nil,	  nil	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 9,	  nil	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
#b.insert(4,16);
#b.insert(int(nil),81);
#b.insert(1,15);
#b.count().print();
[ 11 ]
#b.print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ nil,	  nil	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 9,	  nil	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]
[ 1,	  15	  ]
## Lets cut out a few sections
#b.select(25,64).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
#b.select(4,15).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]
#b.select(4,4).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
## This should cause an error
#b.select(4,3).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
#b.select(81,int(nil)).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ nil,	  81	  ]
#b.select(int(nil),int(nil)).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]
[ 1,	  15	  ]
## A 2-dimensional cut
#var bn:=b.fragment(1,5,4,15);bn.print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]
#b.fragment(1,5,16,int(nil)).print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 4,	  16	  ]
#b.fragment(1,int(nil),16,int(nil)).print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
#b.fragment(int(nil),int(nil),16,int(nil)).print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]
#bn:= b.join(bn.reverse());
#bn.print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  2	  ]
[ 1,	  1	  ]
#bn:= b.semijoin(bn.reverse());
#bn.print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]
## band join experiment
#var c:= b.copy();
#bandjoin(b,c,4,4).print();
#-----------------#
# BAT:	  tmp_31  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  nil	  ]
[ 2,	  25	  ]
[ 2,	  36	  ]
[ 2,	  49	  ]
[ 2,	  64	  ]
[ 2,	  16	  ]
[ 2,	  15	  ]
##and theta joins?
#b.thetajoin(c,LT,lng(nil)).print();
#-----------------#
# BAT:	  tmp_31  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  25	  ]
[ 2,	  36	  ]
[ 2,	  49	  ]
[ 2,	  64	  ]
[ 2,	  nil	  ]
#quit();

# 15:33:19 >  
# 15:33:19 >  Done.
# 15:33:19 >  

