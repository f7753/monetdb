stdout of test 'test_05` in directory 'tests/suite_00` itself:

#> Mtest (21:36:24):	milS test_05 milS
#> Mtest (21:36:24):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_05.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_05.milS

# 09:52:07 >  
# 09:52:07 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=49197 --set sql_port=55683 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_05.mal </dev/null
# 09:52:07 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
## Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("#test basic functionality of the BAT library.\n");
#	mil.line("#focussed on float\n");
#	mil.line("#it includes insertions,deletions,selections, and joins.\n");
#	mil.line("print(3.147);");
#	ca_a := print(3.147);
#	mil.line("var b:= new(flt,flt);");
#	b := new(:flt,:flt);
#	mil.line("b.insert(1.2, 15.6);");
#	da_a := insert(b,1.2,15.6);
#	mil.line("b.insert(2.3, 4.5);");
#	ea_a := insert(b,2.3,4.5);
#	mil.line("b.insert(3.0, flt(nil));");
#	fa_a := flt(nil);
#	ga_a := insert(b,3.0,fa_a);
#	mil.line("b.insert(4.5, 16.7);");
#	ha_a := insert(b,4.5,16.7);
#	mil.line("b.insert(5.6, 25.6);");
#	ia_a := insert(b,5.6,25.6);
#	mil.line("b.insert(6.6, 36.7);");
#	ja_a := insert(b,6.6,36.7);
#	mil.line("b.insert(7.8, 49.0);");
#	ka_a := insert(b,7.8,49.0);
#	mil.line("b.insert(8.9, 64.5);");
#	la_a := insert(b,8.9,64.5);
#	mil.line("b.insert(9.0, flt(nil));");
#	ma_a := flt(nil);
#	na_a := insert(b,9.0,ma_a);
#	mil.line("b.insert(flt(nil),flt(nil));");
#	oa_a := flt(nil);
#	pa_a := flt(nil);
#	qa_a := insert(b,oa_a,pa_a);
#	mil.line("b.insert(flt(nil),81.2);");
#	ra_a := flt(nil);
#	sa_a := insert(b,ra_a,81.2);
#	mil.line("b.print();");
#	ta_a := print(b);
#	mil.line("# Testing simple retrievals\n");
#	mil.line("b.find(1.2).print();");
#	ua_a := find(b,1.2);
#	va_a := print(ua_a);
#	mil.line("b.find(4.5).print();");
#	wa_a := find(b,4.5);
#	xa_a := print(wa_a);
#	mil.line("b.find(flt(nil)).print();");
#	ya_a := flt(nil);
#	ab_a := find(b,ya_a);
#	bb_a := print(ab_a);
#	mil.line("# This should cause an error\n");
#	mil.line("b.find(10.1).print();");
##error	cb_a := find(b,10.1);
##error	db_a := print(cb_a);
#	mil.line("# Can we delete them and re-insert them later on\n");
#	mil.line("b.delete(4.5, 16.7);");
#	eb_a := delete(b,4.5,16.7);
#	mil.line("b.delete(1.2, 15.6);");
#	fb_a := delete(b,1.2,15.6);
#	mil.line("b.delete(flt(nil),81.2);");
#	gb_a := flt(nil);
#	hb_a := delete(b,gb_a,81.2);
#	mil.line("b.print();");
#	ib_a := print(b);
#	mil.line("b.insert(4.5, 16.7);");
#	jb_a := insert(b,4.5,16.7);
#	mil.line("b.insert(1.2, 15.6);");
#	kb_a := insert(b,1.2,15.6);
#	mil.line("b.insert(flt(nil),81.2);");
#	lb_a := flt(nil);
#	mb_a := insert(b,lb_a,81.2);
#	mil.line("b.count().print();");
#	nb_a := count(b);
#	ob_a := print(nb_a);
#	mil.line("# Lets cut out a few sections\n");
#	mil.line("b.select(25.6,64.5).print();");
#	pb_a := select(b,25.6,64.5);
#	qb_a := print(pb_a);
#	mil.line("b.select(4.5,15.6).print();");
#	rb_a := select(b,4.5,15.6);
#	sb_a := print(rb_a);
#	mil.line("b.select(4.5,4.5).print();");
#	tb_a := select(b,4.5,4.5);
#	ub_a := print(tb_a);
#	mil.line("# This should cause an error\n");
#	mil.line("b.select(4.5,3.4).print();");
#	vb_a := select(b,4.5,3.4);
#	wb_a := print(vb_a);
#	mil.line("b.select(81.2,flt(nil)).print();");
#	xb_a := flt(nil);
#	yb_a := select(b,81.2,xb_a);
#	ac_a := print(yb_a);
#	mil.line("b.select(flt(nil),flt(nil)).print();");
#	bc_a := flt(nil);
#	cc_a := flt(nil);
#	dc_a := select(b,bc_a,cc_a);
#	ec_a := print(dc_a);
#	mil.line("# A 2-dimensional cut\n");
#	mil.line("var bn:=b.fragment(1.2,5.6,4.5,15.6);bn.print();");
#	bn := fragment(b,1.2,5.6,4.5,15.6);
#	fc_a := print(bn);
#	mil.line("b.fragment(1.2,5.6,16.2,flt(nil)).print();");
#	gc_a := flt(nil);
#	hc_a := fragment(b,1.2,5.6,16.2,gc_a);
#	ic_a := print(hc_a);
#	mil.line("b.fragment(1.2,flt(nil),16.2,flt(nil)).print();");
#	jc_a := flt(nil);
#	kc_a := flt(nil);
#	lc_a := fragment(b,1.2,jc_a,16.2,kc_a);
#	mc_a := print(lc_a);
#	mil.line("b.fragment(flt(nil),flt(nil),16.2,flt(nil)).print();");
#	nc_a := flt(nil);
#	oc_a := flt(nil);
#	pc_a := flt(nil);
#	qc_a := fragment(b,nc_a,oc_a,16.2,pc_a);
#	rc_a := print(qc_a);
#	mil.line("var b1:= b.join(bn.reverse());");
#	sc_a := reverse(bn);
#	b1 := join(b,sc_a);
#	mil.line("b1.print();");
#	tc_a := print(b1);
#	mil.line("var b2:= b.semijoin(b1);");
#	b2 := semijoin(b,b1);
#	mil.line("b2.print();");
#	uc_a := print(b2);
#	mil.line("# band join experiment\n");
#	mil.line("var c:= b.copy();");
#	c := copy(b);
#	mil.line("bandjoin(b,c,4.5,4.5).print();");
#	vc_a := bandjoin(b,c,4.5,4.5);
#	wc_a := print(vc_a);
#	mil.line("quit();");
#	xc_a := quit();
#
function user.main():int;	# 0  (main:int)
# Monet Mil to Mal compiler 	# 1  ($2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  ($4:str)
#Predefined code segment 	# 3  ($6:str)
#The compiler can not guarantee an accurate compilation, 	# 4  ($8:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  ($10:str)
#A few guidelines to maximize usefullness. 	# 6  ($12:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  ($14:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  ($16:str)
#use the "mil_schema" for additional support routines 	# 9  ($18:str)
    mil.line("setoid(oid(20000000));");	# 10 MILline ($19:void)<-($20:str)
    aa_a := calc.oid(20000000);	# 11 CALCint2oid (aa_a:oid)<-($22:int)
    ba_a := calc.setoid(aa_a);	# 12 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#test basic functionality of the BAT library.\n");	# 13 MILline ($24:void)<-($25:str)
    mil.line("#focussed on float\n");	# 14 MILline ($26:void)<-($27:str)
    mil.line("#it includes bat.insertions,deletions,selections, and joins.\n");	# 15 MILline ($28:void)<-($29:str)
    mil.line("print(3.147);");	# 16 MILline ($30:void)<-($31:str)
    ca_a := io.print(3.147);	# 17 IOprint_val (ca_a:int)<-($33:flt)
    mil.line("var b:= bbp.new(flt,flt);");	# 18 MILline ($34:void)<-($35:str)
    b := bbp.new(nil:flt,nil:flt);	# 19 CMDBATnew (b:bat[:flt,:flt])<-($37:flt)($37:flt)
    mil.line("b.insert(1.2, 15.6);");	# 20 MILline ($38:void)<-($39:str)
    da_a := bat.insert(b,1.2,15.6);	# 21 BKCinsert_bun (da_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($41:flt)($42:flt)
    mil.line("b.insert(2.3, 4.5);");	# 22 MILline ($43:void)<-($44:str)
    ea_a := bat.insert(b,2.3,4.5);	# 23 BKCinsert_bun (ea_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($46:flt)($47:flt)
    mil.line("b.insert(3.0, calc.flt(nil));");	# 24 MILline ($48:void)<-($49:str)
    fa_a := calc.flt(nil);	# 25 CALCnil2flt (fa_a:flt)<-($51:void)
    ga_a := bat.insert(b,3.0,fa_a);	# 26 BKCinsert_bun (ga_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($53:flt)(fa_a:flt)
    mil.line("b.insert(4.5, 16.7);");	# 27 MILline ($54:void)<-($55:str)
    ha_a := bat.insert(b,4.5,16.7);	# 28 BKCinsert_bun (ha_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($47:flt)($57:flt)
    mil.line("b.insert(5.6, 25.6);");	# 29 MILline ($58:void)<-($59:str)
    ia_a := bat.insert(b,5.6,25.6);	# 30 BKCinsert_bun (ia_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($61:flt)($62:flt)
    mil.line("b.insert(6.6, 36.7);");	# 31 MILline ($63:void)<-($64:str)
    ja_a := bat.insert(b,6.6,36.7);	# 32 BKCinsert_bun (ja_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($66:flt)($67:flt)
    mil.line("b.insert(7.8, 49.0);");	# 33 MILline ($68:void)<-($69:str)
    ka_a := bat.insert(b,7.8,49.0);	# 34 BKCinsert_bun (ka_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($71:flt)($72:flt)
    mil.line("b.insert(8.9, 64.5);");	# 35 MILline ($73:void)<-($74:str)
    la_a := bat.insert(b,8.9,64.5);	# 36 BKCinsert_bun (la_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($76:flt)($77:flt)
    mil.line("b.insert(9.0, calc.flt(nil));");	# 37 MILline ($78:void)<-($79:str)
    ma_a := calc.flt(nil);	# 38 CALCnil2flt (ma_a:flt)<-($51:void)
    na_a := bat.insert(b,9.0,ma_a);	# 39 BKCinsert_bun (na_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($82:flt)(ma_a:flt)
    mil.line("b.insert(flt(nil),flt(nil));");	# 40 MILline ($83:void)<-($84:str)
    oa_a := calc.flt(nil);	# 41 CALCnil2flt (oa_a:flt)<-($86:void)
    pa_a := calc.flt(nil);	# 42 CALCnil2flt (pa_a:flt)<-($86:void)
    qa_a := bat.insert(b,oa_a,pa_a);	# 43 BKCinsert_bun (qa_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(oa_a:flt)(pa_a:flt)
    mil.line("b.insert(flt(nil),81.2);");	# 44 MILline ($89:void)<-($90:str)
    ra_a := calc.flt(nil);	# 45 CALCnil2flt (ra_a:flt)<-($86:void)
    sa_a := bat.insert(b,ra_a,81.2);	# 46 BKCinsert_bun (sa_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(ra_a:flt)($93:flt)
    mil.line("b.print();");	# 47 MILline ($94:void)<-($95:str)
    ta_a := io.print(b);	# 48 IOprint_val (ta_a:int)<-(b:bat[:flt,:flt])
    mil.line("# Testing simple retrievals\n");	# 49 MILline ($97:void)<-($98:str)
    ua_a := algebra.find(b,1.2);	# 50 ALGfind (ua_a:flt)<-(b:bat[:flt,:flt])($100:flt)
    va_a := io.print(ua_a);	# 51 IOprint_val (va_a:int)<-(ua_a:flt)
    mil.line("b.find(4.5).print();");	# 52 MILline ($102:void)<-($103:str)
    wa_a := algebra.find(b,4.5);	# 53 ALGfind (wa_a:flt)<-(b:bat[:flt,:flt])($105:flt)
    xa_a := io.print(wa_a);	# 54 IOprint_val (xa_a:int)<-(wa_a:flt)
    mil.line("b.find(flt(nil)).print();");	# 55 MILline ($107:void)<-($108:str)
    ya_a := calc.flt(nil);	# 56 CALCnil2flt (ya_a:flt)<-($86:void)
    ab_a := algebra.find(b,ya_a);	# 57 ALGfind (ab_a:flt)<-(b:bat[:flt,:flt])(ya_a:flt)
    bb_a := io.print(ab_a);	# 58 IOprint_val (bb_a:int)<-(ab_a:flt)
    mil.line("# This should cause an error\n");	# 59 MILline ($112:void)<-($113:str)
#ignore	cb_a := algebra.find(b,10.1); 	# 60  ($115:str)
#ignore	db_a := io.print(cb_a); 	# 61  ($117:str)
    mil.line("# Can we delete them and re-insert them later on\n");	# 62 MILline ($118:void)<-($119:str)
    eb_a := bat.delete(b,4.5,16.7);	# 63 BKCdelete_bun (eb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($105:flt)($121:flt)
    mil.line("b.delete(1.2, 15.6);");	# 64 MILline ($122:void)<-($123:str)
    fb_a := bat.delete(b,1.2,15.6);	# 65 BKCdelete_bun (fb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($100:flt)($125:flt)
    mil.line("b.delete(flt(nil),81.2);");	# 66 MILline ($126:void)<-($127:str)
    gb_a := calc.flt(nil);	# 67 CALCnil2flt (gb_a:flt)<-($129:void)
    hb_a := bat.delete(b,gb_a,81.2);	# 68 BKCdelete_bun (hb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(gb_a:flt)($131:flt)
    mil.line("b.print();");	# 69 MILline ($132:void)<-($133:str)
    ib_a := io.print(b);	# 70 IOprint_val (ib_a:int)<-(b:bat[:flt,:flt])
    mil.line("b.insert(4.5, 16.7);");	# 71 MILline ($135:void)<-($136:str)
    jb_a := bat.insert(b,4.5,16.7);	# 72 BKCinsert_bun (jb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($138:flt)($121:flt)
    mil.line("b.insert(1.2, 15.6);");	# 73 MILline ($139:void)<-($140:str)
    kb_a := bat.insert(b,1.2,15.6);	# 74 BKCinsert_bun (kb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($142:flt)($125:flt)
    mil.line("b.insert(flt(nil),81.2);");	# 75 MILline ($143:void)<-($144:str)
    lb_a := calc.flt(nil);	# 76 CALCnil2flt (lb_a:flt)<-($129:void)
    mb_a := bat.insert(b,lb_a,81.2);	# 77 BKCinsert_bun (mb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(lb_a:flt)($131:flt)
    mil.line("b.count().print();");	# 78 MILline ($147:void)<-($148:str)
    nb_a := algebra.count(b);	# 79 ALGcount_bat (nb_a:lng)<-(b:bat[:flt,:flt])
    ob_a := io.print(nb_a);	# 80 IOprint_val (ob_a:int)<-(nb_a:lng)
    mil.line("# Lets cut out a few sections\n");	# 81 MILline ($151:void)<-($152:str)
    pb_a := algebra.select(b,25.6,64.5);	# 82 ALGselect (pb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($154:flt)($155:flt)
    qb_a := io.print(pb_a);	# 83 IOprint_val (qb_a:int)<-(pb_a:bat[:flt,:flt])
    mil.line("b.select(4.5,15.6).print();");	# 84 MILline ($157:void)<-($158:str)
    rb_a := algebra.select(b,4.5,15.6);	# 85 ALGselect (rb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($138:flt)($160:flt)
    sb_a := io.print(rb_a);	# 86 IOprint_val (sb_a:int)<-(rb_a:bat[:flt,:flt])
    mil.line("b.select(4.5,4.5).print();");	# 87 MILline ($162:void)<-($163:str)
    tb_a := algebra.select(b,4.5,4.5);	# 88 ALGselect (tb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($138:flt)($138:flt)
    ub_a := io.print(tb_a);	# 89 IOprint_val (ub_a:int)<-(tb_a:bat[:flt,:flt])
    mil.line("# This should cause an error\n");	# 90 MILline ($166:void)<-($167:str)
    vb_a := algebra.select(b,4.5,3.4);	# 91 ALGselect (vb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($138:flt)($169:flt)
    wb_a := io.print(vb_a);	# 92 IOprint_val (wb_a:int)<-(vb_a:bat[:flt,:flt])
    mil.line("b.select(81.2,flt(nil)).print();");	# 93 MILline ($171:void)<-($172:str)
    xb_a := calc.flt(nil);	# 94 CALCnil2flt (xb_a:flt)<-($174:void)
    yb_a := algebra.select(b,81.2,xb_a);	# 95 ALGselect (yb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($176:flt)(xb_a:flt)
    ac_a := io.print(yb_a);	# 96 IOprint_val (ac_a:int)<-(yb_a:bat[:flt,:flt])
    mil.line("b.select(flt(nil),flt(nil)).print();");	# 97 MILline ($178:void)<-($179:str)
    bc_a := calc.flt(nil);	# 98 CALCnil2flt (bc_a:flt)<-($174:void)
    cc_a := calc.flt(nil);	# 99 CALCnil2flt (cc_a:flt)<-($174:void)
    dc_a := algebra.select(b,bc_a,cc_a);	# 100 ALGselect (dc_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(bc_a:flt)(cc_a:flt)
    ec_a := io.print(dc_a);	# 101 IOprint_val (ec_a:int)<-(dc_a:bat[:flt,:flt])
    mil.line("# A 2-dimensional cut\n");	# 102 MILline ($184:void)<-($185:str)
    bn := algebra.fragment(b,1.2,5.6,4.5,15.6);	# 103 ALGfragment (bn:bat[:flt,:flt])<-(b:bat[:flt,:flt])($187:flt)($188:flt)($189:flt)($160:flt)
    fc_a := io.print(bn);	# 104 IOprint_val (fc_a:int)<-(bn:bat[:flt,:flt])
    mil.line("b.fragment(1.2,5.6,16.2,flt(nil)).print();");	# 105 MILline ($191:void)<-($192:str)
    gc_a := calc.flt(nil);	# 106 CALCnil2flt (gc_a:flt)<-($174:void)
    hc_a := algebra.fragment(b,1.2,5.6,16.2,gc_a);	# 107 ALGfragment (hc_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($187:flt)($188:flt)($195:flt)(gc_a:flt)
    ic_a := io.print(hc_a);	# 108 IOprint_val (ic_a:int)<-(hc_a:bat[:flt,:flt])
    mil.line("b.fragment(1.2,flt(nil),16.2,flt(nil)).print();");	# 109 MILline ($197:void)<-($198:str)
    jc_a := calc.flt(nil);	# 110 CALCnil2flt (jc_a:flt)<-($174:void)
    kc_a := calc.flt(nil);	# 111 CALCnil2flt (kc_a:flt)<-($174:void)
    lc_a := algebra.fragment(b,1.2,jc_a,16.2,kc_a);	# 112 ALGfragment (lc_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])($187:flt)(jc_a:flt)($195:flt)(kc_a:flt)
    mc_a := io.print(lc_a);	# 113 IOprint_val (mc_a:int)<-(lc_a:bat[:flt,:flt])
    mil.line("b.fragment(flt(nil),flt(nil),16.2,flt(nil)).print();");	# 114 MILline ($203:void)<-($204:str)
    nc_a := calc.flt(nil);	# 115 CALCnil2flt (nc_a:flt)<-($174:void)
    oc_a := calc.flt(nil);	# 116 CALCnil2flt (oc_a:flt)<-($207:void)
    pc_a := calc.flt(nil);	# 117 CALCnil2flt (pc_a:flt)<-($207:void)
    qc_a := algebra.fragment(b,nc_a,oc_a,16.2,pc_a);	# 118 ALGfragment (qc_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(nc_a:flt)(oc_a:flt)($195:flt)(pc_a:flt)
    rc_a := io.print(qc_a);	# 119 IOprint_val (rc_a:int)<-(qc_a:bat[:flt,:flt])
    mil.line("var b1:= b.join(bn.reverse());");	# 120 MILline ($211:void)<-($212:str)
    sc_a := bat.reverse(bn);	# 121 BKCreverse (sc_a:bat[:flt,:flt])<-(bn:bat[:flt,:flt])
    b1 := algebra.join(b,sc_a);	# 122 ALGjoin (b1:bat[:flt,:flt])<-(b:bat[:flt,:flt])(sc_a:bat[:flt,:flt])
    mil.line("b1.print();");	# 123 MILline ($215:void)<-($216:str)
    tc_a := io.print(b1);	# 124 IOprint_val (tc_a:int)<-(b1:bat[:flt,:flt])
    mil.line("var b2:= b.semijoin(b1);");	# 125 MILline ($218:void)<-($219:str)
    b2 := algebra.semijoin(b,b1);	# 126 ALGsemijoin (b2:bat[:flt,:flt])<-(b:bat[:flt,:flt])(b1:bat[:flt,:flt])
    mil.line("b2.print();");	# 127 MILline ($221:void)<-($222:str)
    uc_a := io.print(b2);	# 128 IOprint_val (uc_a:int)<-(b2:bat[:flt,:flt])
    mil.line("# band join experiment\n");	# 129 MILline ($224:void)<-($225:str)
    c := algebra.copy(b);	# 130 ALGcopy (c:bat[:flt,:flt])<-(b:bat[:flt,:flt])
    mil.line("bandjoin(b,c,4.5,4.5).print();");	# 131 MILline ($227:void)<-($228:str)
    vc_a := algebra.bandjoin(b,c,4.5,4.5);	# 132 ALGbandjoin (vc_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(c:bat[:flt,:flt])($230:flt)($230:flt)
    wc_a := io.print(vc_a);	# 133 IOprint_val (wc_a:int)<-(vc_a:bat[:flt,:flt])
    mil.line("quit();");	# 134 MILline ($232:void)<-($233:str)
    xc_a := clients.quit();	# 135 CLTquit (xc_a:void)
end main;	# 136  
#setoid(oid(20000000));
##test basic functionality of the BAT library.
##focussed on float
##it includes insertions,deletions,selections, and joins.
#print(3.147);
[ 3.14700007 ]
#var b:= new(flt,flt);
#b.insert(1.2, 15.6);
#b.insert(2.3, 4.5);
#b.insert(3.0, flt(nil));
#b.insert(4.5, 16.7);
#b.insert(5.6, 25.6);
#b.insert(6.6, 36.7);
#b.insert(7.8, 49.0);
#b.insert(8.9, 64.5);
#b.insert(9.0, flt(nil));
#b.insert(flt(nil),flt(nil));
#b.insert(flt(nil),81.2);
#b.print();
#---------------------------------#
# h		tmp_29		  # name
# flt		flt		  # type
#---------------------------------#
[ 1.20000005,	  15.6000004	  ]
[ 2.29999995,	  4.5		  ]
[ 3,	  nil	  ]
[ 4.5,		  16.7000008	  ]
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,		  81.1999969	  ]
## Testing simple retrievals
#b.find(1.2).print();
[ 15.6000004 ]
#b.find(4.5).print();
[ 16.7000008 ]
#b.find(flt(nil)).print();
[ 81.1999969 ]
## This should cause an error
#b.find(10.1).print();
## Can we delete them and re-insert them later on
#b.delete(4.5, 16.7);
#b.delete(1.2, 15.6);
#b.delete(flt(nil),81.2);
#b.print();
#---------------------------------#
# h		tmp_29		  # name
# flt		flt		  # type
#---------------------------------#
[ nil,	  nil	  ]
[ 2.29999995,	  4.5		  ]
[ 3,	  nil	  ]
[ 9,	  nil	  ]
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
#b.insert(4.5, 16.7);
#b.insert(1.2, 15.6);
#b.insert(flt(nil),81.2);
#b.count().print();
[ 11 ]
## Lets cut out a few sections
#b.select(25.6,64.5).print();
#---------------------------------#
# h		tmp_30		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
#b.select(4.5,15.6).print();
#---------------------------------#
# h		tmp_30		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 1.20000005,	  15.6000004	  ]
#b.select(4.5,4.5).print();
#-------------------------#
# h		tmp_30	  # name
# flt		flt	  # type
#-------------------------#
[ 2.29999995,	  4.5	  ]
## This should cause an error
#b.select(4.5,3.4).print();
#-----------------#
# BAT:	  tmp_23  #
# (flt)	  (flt)	  #
#-----------------#
#b.select(81.2,flt(nil)).print();
#-------------------------#
# h	tmp_30		  # name
# flt	flt		  # type
#-------------------------#
[ nil,	  81.1999969	  ]
#b.select(flt(nil),flt(nil)).print();
#---------------------------------#
# h		tmp_30		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 4.5,		  16.7000008	  ]
[ 1.20000005,	  15.6000004	  ]
[ nil,		  81.1999969	  ]
## A 2-dimensional cut
#var bn:=b.fragment(1.2,5.6,4.5,15.6);bn.print();
#---------------------------------#
# h		tmp_30		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 1.20000005,	  15.6000004	  ]
#b.fragment(1.2,5.6,16.2,flt(nil)).print();
#---------------------------------#
# h		tmp_28		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 4.5,		  16.7000008	  ]
#b.fragment(1.2,flt(nil),16.2,flt(nil)).print();
#---------------------------------#
# h		tmp_28		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 4.5,		  16.7000008	  ]
#b.fragment(flt(nil),flt(nil),16.2,flt(nil)).print();
#---------------------------------#
# h		tmp_28		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 4.5,		  16.7000008	  ]
[ nil,		  81.1999969	  ]
#var b1:= b.join(bn.reverse());
#b1.print();
#---------------------------------#
# h		tmp_28		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  2.29999995	  ]
[ 1.20000005,	  1.20000005	  ]
#var b2:= b.semijoin(b1);
#b2.print();
#---------------------------------#
# h		tmp_31		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 1.20000005,	  15.6000004	  ]
## band join experiment
#var c:= b.copy();
#bandjoin(b,c,4.5,4.5).print();
#---------------------------------#
# h		tmp_33		  # name
# flt		flt		  # type
#---------------------------------#
[ nil,	  nil	  ]
[ nil,		  81.1999969	  ]
[ 2.29999995,	  4.5		  ]
[ 2.29999995,	  nil		  ]
[ 2.29999995,	  nil		  ]
[ 2.29999995,	  25.6000004	  ]
[ 2.29999995,	  36.7000008	  ]
[ 2.29999995,	  49		  ]
[ 2.29999995,	  64.5		  ]
[ 2.29999995,	  16.7000008	  ]
[ 2.29999995,	  15.6000004	  ]
[ 3,	  nil	  ]
[ 3,		  81.1999969	  ]
[ 9,	  nil	  ]
[ 9,		  81.1999969	  ]
#quit();

# 17:08:44 >  
# 17:08:44 >  Done.
# 17:08:44 >  

