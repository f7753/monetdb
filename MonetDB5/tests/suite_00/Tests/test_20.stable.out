stdout of test 'test_20` in directory 'tests/suite_00` itself:

#> Mtest (20:57:22):	milS test_20 milS
#> Mtest (20:57:22):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_20.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_20.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("# test single column BATs\n");
#	mil.line("var a:= new(int,void);");
#	a := new(nil:int,nil:void);
#	mil.line("a.insert(1,void(nil));");
#	ca_a := void(nil);
#	da_a := insert(a,1,ca_a);
#	mil.line("a.print();");
#	ea_a := print(a);
#	mil.line("a.insert(2,void(nil));");
#	fa_a := void(nil);
#	ga_a := insert(a,2,fa_a);
#	mil.line("a.insert(int(nil),void(nil));");
#	ha_a := int(nil);
#	ia_a := void(nil);
#	ja_a := insert(a,ha_a,ia_a);
#	mil.line("a.print();");
#	ka_a := print(a);
#	mil.line("var b:= new(void,int);");
#	b := new(nil:void,nil:int);
#	mil.line("b.insert(void(nil),1);");
#	la_a := void(nil);
#	ma_a := insert(b,la_a,1);
#	mil.line("b.print();");
#	na_a := print(b);
#	mil.line("b.insert(void(nil),2);");
#	oa_a := void(nil);
#	pa_a := insert(b,oa_a,2);
#	mil.line("b.insert(void(nil),int(nil));");
#	qa_a := void(nil);
#	ra_a := int(nil);
#	sa_a := insert(b,qa_a,ra_a);
#	mil.line("b.print();");
#	ta_a := print(b);
#	mil.line("quit();");
#	ua_a := quit();
#
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  ($32:str)
#Predefined code segment 	# 2  ($34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  ($36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  ($38:str)
#A few guidelines to maximize usefullness. 	# 5  ($40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  ($42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  ($44:str)
#use the "mil_schema" for additional support routines 	# 8  ($46:str)
    mil.line("setoid(oid(20000000));");	# 9 MILline ($47:void)<-($48:str)
    aa_a := calc.oid(20000000);	# 10 CALCint2oid (aa_a:oid)<-($50:int)
    ba_a := calc.setoid(aa_a);	# 11 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# test single column BATs\n");	# 12 MILline ($52:void)<-($53:str)
    a := bbp.new(:int,:void);	# 13 CMDBATnew (a:bat[:int,:void])<-($55:int)($56:void)
    mil.line("a.insert(1,void(nil));");	# 14 MILline ($57:void)<-($58:str)
    ca_a := calc.void(nil);	# 15 CALCnil2void (ca_a:void)<-($60:void)
    da_a := bat.insert(a,1,ca_a);	# 16 BKCinsert_bun (da_a:bat[:int,:void])<-(a:bat[:int,:void])($62:int)(ca_a:void)
    mil.line("a.print();");	# 17 MILline ($63:void)<-($64:str)
    ea_a := io.print(a);	# 18 IOprint_val (ea_a:int)<-(a:bat[:int,:void])
    mil.line("a.insert(2,void(nil));");	# 19 MILline ($66:void)<-($67:str)
    fa_a := calc.void(nil);	# 20 CALCnil2void (fa_a:void)<-($60:void)
    ga_a := bat.insert(a,2,fa_a);	# 21 BKCinsert_bun (ga_a:bat[:int,:void])<-(a:bat[:int,:void])($70:int)(fa_a:void)
    mil.line("a.insert(int(nil),void(nil));");	# 22 MILline ($71:void)<-($72:str)
    ha_a := calc.int(nil);	# 23 CALCnil2int (ha_a:int)<-($60:void)
    ia_a := calc.void(nil);	# 24 CALCnil2void (ia_a:void)<-($60:void)
    ja_a := bat.insert(a,ha_a,ia_a);	# 25 BKCinsert_bun (ja_a:bat[:int,:void])<-(a:bat[:int,:void])(ha_a:int)(ia_a:void)
    mil.line("a.print();");	# 26 MILline ($76:void)<-($64:str)
    ka_a := io.print(a);	# 27 IOprint_val (ka_a:int)<-(a:bat[:int,:void])
    mil.line("var b:= bbp.new(void,int);");	# 28 MILline ($78:void)<-($79:str)
    b := bbp.new(:void,:int);	# 29 CMDBATnew (b:bat[:void,:int])<-($81:void)($82:int)
    mil.line("b.insert(void(nil),1);");	# 30 MILline ($83:void)<-($84:str)
    la_a := calc.void(nil);	# 31 CALCnil2void (la_a:void)<-($60:void)
    ma_a := bat.insert(b,la_a,1);	# 32 BKCinsert_bun (ma_a:bat[:void,:int])<-(b:bat[:void,:int])(la_a:void)($62:int)
    mil.line("b.print();");	# 33 MILline ($87:void)<-($88:str)
    na_a := io.print(b);	# 34 IOprint_val (na_a:int)<-(b:bat[:void,:int])
    mil.line("b.insert(void(nil),2);");	# 35 MILline ($90:void)<-($91:str)
    oa_a := calc.void(nil);	# 36 CALCnil2void (oa_a:void)<-($93:void)
    pa_a := bat.insert(b,oa_a,2);	# 37 BKCinsert_bun (pa_a:bat[:void,:int])<-(b:bat[:void,:int])(oa_a:void)($70:int)
    mil.line("b.insert(void(nil),int(nil));");	# 38 MILline ($95:void)<-($96:str)
    qa_a := calc.void(nil);	# 39 CALCnil2void (qa_a:void)<-($93:void)
    ra_a := calc.int(nil);	# 40 CALCnil2int (ra_a:int)<-($93:void)
    sa_a := bat.insert(b,qa_a,ra_a);	# 41 BKCinsert_bun (sa_a:bat[:void,:int])<-(b:bat[:void,:int])(qa_a:void)(ra_a:int)
    mil.line("b.print();");	# 42 MILline ($100:void)<-($88:str)
    ta_a := io.print(b);	# 43 IOprint_val (ta_a:int)<-(b:bat[:void,:int])
    mil.line("quit();");	# 44 MILline ($102:void)<-($103:str)
    ua_a := clients.quit();	# 45 CLTquit (ua_a:void)
end main;	# 46  
#setoid(oid(20000000));
## test single column BATs
#var a:= new(int,void);
#a.insert(1,void(nil));
#a.print();
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (void)  #
#-----------------#
[ 1,	  nil	  ]
#a.insert(2,void(nil));
#a.insert(int(nil),void(nil));
#a.print();
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (void)  #
#-----------------#
[ 1,	  nil	  ]
[ 2,	  nil	  ]
[ nil,	  nil	  ]
#var b:= new(void,int);
#b.insert(void(nil),1);
#b.print();
#-----------------#
# BAT:	  tmp_23  #
# (void)  (int)	  #
#-----------------#
[ nil,	  1	  ]
#b.insert(void(nil),2);
#b.insert(void(nil),int(nil));
#b.print();
#-----------------#
# BAT:	  tmp_23  #
# (void)  (int)	  #
#-----------------#
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  nil	  ]
#quit();

# 17:08:46 >  
# 17:08:46 >  Done.
# 17:08:46 >  

