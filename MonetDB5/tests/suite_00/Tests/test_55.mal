# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#var b:= new(int,int);
	b := new(:int,:int);
#b.insert(1,15);
	ca_a := insert(b,1,15);
#b.insert(2,4);
	da_a := insert(b,2,4);
#b.insert(3,int(nil));
	nil:= mil.take("nil");
	ea_a := int(nil);
	fa_a := insert(b,3,ea_a);
#b.insert(4,16);
	ga_a := insert(b,4,16);
#b.insert(5,25);
	ha_a := insert(b,5,25);
#b.insert(6,36);
	ia_a := insert(b,6,36);
#b.insert(7,49);
	ja_a := insert(b,7,49);
#b.insert(8,64);
	ka_a := insert(b,8,64);
#b.insert(9,int(nil));
	la_a := int(nil);
	ma_a := insert(b,9,la_a);
#b.insert(int(nil),int(nil));
	na_a := int(nil);
	oa_a := int(nil);
	pa_a := insert(b,na_a,oa_a);
#b.insert(int(nil),81);
	qa_a := int(nil);
	ra_a := insert(b,qa_a,81);
#b.print();
	sa_a := print(b,);
#var h:=b.hashsplit(3);
	h := hashsplit(b,3);
#h.print();
	ta_a := print(h,);
#dir("tmp");
	ua_a := dir("tmp");
#h.find(0).rename("dummy");
	va_a := find(h,0);
	wa_a := bat.setName(va_a,"dummy");
#dir("dummy");
	xa_a := dir("dummy");
#dir("tmp");
	ya_a := dir("tmp");
#vars();
	ab_a := vars();
#quit();
	bb_a := quit();
#Identifer 'rename' mapped to 'bat.setName'
