# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.
include mil;

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("#test basic functionality of the BAT library.\n");
	mil.line("#focussed on float\n");
	mil.line("#it includes insertions,deletions,selections, and joins.\n");
	mil.line("print(3.147);");
	ca_a := print(3.147);
	mil.line("var b:= new(flt,flt);");
	b := new(nil:flt,nil:flt);
	mil.line("b.insert(1.2, 15.6);");
	da_a := insert(b,1.2,15.6);
	mil.line("b.insert(2.3, 4.5);");
	ea_a := insert(b,2.3,4.5);
	mil.line("b.insert(3.0, flt(nil));");
	fa_a := flt(nil);
	ga_a := insert(b,3.0,fa_a);
	mil.line("b.insert(4.5, 16.7);");
	ha_a := insert(b,4.5,16.7);
	mil.line("b.insert(5.6, 25.6);");
	ia_a := insert(b,5.6,25.6);
	mil.line("b.insert(6.6, 36.7);");
	ja_a := insert(b,6.6,36.7);
	mil.line("b.insert(7.8, 49.0);");
	ka_a := insert(b,7.8,49.0);
	mil.line("b.insert(8.9, 64.5);");
	la_a := insert(b,8.9,64.5);
	mil.line("b.insert(9.0, flt(nil));");
	ma_a := flt(nil);
	na_a := insert(b,9.0,ma_a);
	mil.line("b.insert(flt(nil),flt(nil));");
	oa_a := flt(nil);
	pa_a := flt(nil);
	qa_a := insert(b,oa_a,pa_a);
	mil.line("b.insert(flt(nil),81.2);");
	ra_a := flt(nil);
	sa_a := insert(b,ra_a,81.2);
	mil.line("b.print();");
	ta_a := print(b);
	mil.line("# Testing simple retrievals\n");
	ua_a := find(b,1.2);
	va_a := print(ua_a);
	mil.line("b.find(4.5).print();");
	wa_a := find(b,4.5);
	xa_a := print(wa_a);
	mil.line("b.find(flt(nil)).print();");
	ya_a := flt(nil);
	ab_a := find(b,ya_a);
	bb_a := print(ab_a);
	mil.line("# This should cause an error\n");
#ignore	cb_a := find(b,10.1);
#ignore	db_a := print(cb_a);
	mil.line("# Can we delete them and re-insert them later on\n");
	eb_a := delete(b,4.5,16.7);
	mil.line("b.delete(1.2, 15.6);");
	fb_a := delete(b,1.2,15.6);
	mil.line("b.delete(flt(nil),81.2);");
	gb_a := flt(nil);
	hb_a := delete(b,gb_a,81.2);
	mil.line("b.print();");
	ib_a := print(b);
	mil.line("b.insert(4.5, 16.7);");
	jb_a := insert(b,4.5,16.7);
	mil.line("b.insert(1.2, 15.6);");
	kb_a := insert(b,1.2,15.6);
	mil.line("b.insert(flt(nil),81.2);");
	lb_a := flt(nil);
	mb_a := insert(b,lb_a,81.2);
	mil.line("b.count().print();");
	nb_a := count(b);
	ob_a := print(nb_a);
	mil.line("# Lets cut out a few sections\n");
	pb_a := select(b,25.6,64.5);
	qb_a := print(pb_a);
	mil.line("b.select(4.5,15.6).print();");
	rb_a := select(b,4.5,15.6);
	sb_a := print(rb_a);
	mil.line("b.select(4.5,4.5).print();");
	tb_a := select(b,4.5,4.5);
	ub_a := print(tb_a);
	mil.line("# This should cause an error\n");
	vb_a := select(b,4.5,3.4);
	wb_a := print(vb_a);
	mil.line("b.select(81.2,flt(nil)).print();");
	xb_a := flt(nil);
	yb_a := select(b,81.2,xb_a);
	ac_a := print(yb_a);
	mil.line("b.select(flt(nil),flt(nil)).print();");
	bc_a := flt(nil);
	cc_a := flt(nil);
	dc_a := select(b,bc_a,cc_a);
	ec_a := print(dc_a);
	mil.line("# A 2-dimensional cut\n");
	bn := fragment(b,1.2,5.6,4.5,15.6);
	fc_a := print(bn);
	mil.line("b.fragment(1.2,5.6,16.2,flt(nil)).print();");
	gc_a := flt(nil);
	hc_a := fragment(b,1.2,5.6,16.2,gc_a);
	ic_a := print(hc_a);
	mil.line("b.fragment(1.2,flt(nil),16.2,flt(nil)).print();");
	jc_a := flt(nil);
	kc_a := flt(nil);
	lc_a := fragment(b,1.2,jc_a,16.2,kc_a);
	mc_a := print(lc_a);
	mil.line("b.fragment(flt(nil),flt(nil),16.2,flt(nil)).print();");
	nc_a := flt(nil);
	oc_a := flt(nil);
	pc_a := flt(nil);
	qc_a := fragment(b,nc_a,oc_a,16.2,pc_a);
	rc_a := print(qc_a);
	mil.line("var b1:= b.join(bn.reverse());");
	sc_a := reverse(bn);
	b1 := join(b,sc_a);
	mil.line("b1.print();");
	tc_a := print(b1);
	mil.line("var b2:= b.semijoin(b1);");
	b2 := semijoin(b,b1);
	mil.line("b2.print();");
	uc_a := print(b2);
	mil.line("# band join experiment\n");
	c := copy(b);
	mil.line("bandjoin(b,c,4.5,4.5).print();");
	vc_a := bandjoin(b,c,4.5,4.5);
	wc_a := print(vc_a);
	mil.line("quit();");
	xc_a := quit();
