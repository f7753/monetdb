stdout of test 'test_90` in directory 'tests/suite_00` itself:

#> Mtest (20:57:35):	milS test_90 milS
#> Mtest (20:57:35):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_90.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_90.milS

# 09:25:24 >  
# 09:25:24 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=41084 --set sql_port=56670 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_90.mal </dev/null
# 09:25:24 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
## Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("#test mark and number primitives\n");
#	mil.line("var b:= new(str,int);");
#	b := new(:str,:int);
#	mil.line("b.insert(\"the\",1);");
#	ca_a := insert(b,"the",1);
#	mil.line("b.insert(\"quick\",20);");
#	da_a := insert(b,"quick",20);
#	mil.line("b.insert(\"brown\",30);");
#	ea_a := insert(b,"brown",30);
#	mil.line("b.insert(\"fox\",40);");
#	fa_a := insert(b,"fox",40);
#	mil.line("b.insert(\"jumps\",50);");
#	ga_a := insert(b,"jumps",50);
#	mil.line("b.insert(\"over\",60);");
#	ha_a := insert(b,"over",60);
#	mil.line("b.insert(\"lazy\",70);");
#	ia_a := insert(b,"lazy",70);
#	mil.line("b.insert(\"dog\",80);");
#	ja_a := insert(b,"dog",80);
#	mil.line("b.insert(str(nil),90);");
#	ka_a := str(nil);
#	la_a := insert(b,ka_a,90);
#	mil.line("b.insert(\".\",100);");
#	ma_a := insert(b,".",100);
#	mil.line("b.insert(\"\",int(nil));");
#	na_a := int(nil);
#	oa_a := insert(b,"",na_a);
#	mil.line("b.insert(str(nil),int(nil));");
#	pa_a := str(nil);
#	qa_a := int(nil);
#	ra_a := insert(b,pa_a,qa_a);
#	mil.line("b.print();");
#	sa_a := print(b);
#	mil.line("var c:= mark(b,oid(20000050));");
#	ta_a := oid(20000050);
#	c := mark(b,ta_a);
#	mil.line("print(c);");
#	ua_a := print(c);
#	mil.line("var d:=number(b);");
#	d := number(b);
#	mil.line("print(d);");
#	va_a := print(d);
#	mil.line("quit();");
#	wa_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#test mark and number primitives\n");	# 4 MILline ($6:void)<-($7:str)
    mil.line("");	# 5 MILline ($8:void)<-($9:str)
    mil.line("var b:= new(str,int);");	# 6 MILline ($10:void)<-($11:str)
    b := bbp.new("nil",nil);	# 7 CMDBATnew (b:bat[:str,:int])<-($13:str)($14:int)
    mil.line("b.insert(\"the\",1);");	# 8 MILline ($15:void)<-($16:str)
    ca_a := bat.insert(b,"the",1);	# 9 BKCinsert_bun (ca_a:void)<-(b:bat[:str,:int])($18:str)($19:int)
    mil.line("b.insert(\"quick\",20);");	# 10 MILline ($20:void)<-($21:str)
    da_a := bat.insert(b,"quick",20);	# 11 BKCinsert_bun (da_a:void)<-(b:bat[:str,:int])($23:str)($24:int)
    mil.line("b.insert(\"brown\",30);");	# 12 MILline ($25:void)<-($26:str)
    ea_a := bat.insert(b,"brown",30);	# 13 BKCinsert_bun (ea_a:void)<-(b:bat[:str,:int])($28:str)($29:int)
    mil.line("b.insert(\"fox\",40);");	# 14 MILline ($30:void)<-($31:str)
    fa_a := bat.insert(b,"fox",40);	# 15 BKCinsert_bun (fa_a:void)<-(b:bat[:str,:int])($33:str)($34:int)
    mil.line("b.insert(\"jumps\",50);");	# 16 MILline ($35:void)<-($36:str)
    ga_a := bat.insert(b,"jumps",50);	# 17 BKCinsert_bun (ga_a:void)<-(b:bat[:str,:int])($38:str)($39:int)
    mil.line("b.insert(\"over\",60);");	# 18 MILline ($40:void)<-($41:str)
    ha_a := bat.insert(b,"over",60);	# 19 BKCinsert_bun (ha_a:void)<-(b:bat[:str,:int])($43:str)($44:int)
    mil.line("b.insert(\"lazy\",70);");	# 20 MILline ($45:void)<-($46:str)
    ia_a := bat.insert(b,"lazy",70);	# 21 BKCinsert_bun (ia_a:void)<-(b:bat[:str,:int])($48:str)($49:int)
    mil.line("b.insert(\"dog\",80);");	# 22 MILline ($50:void)<-($51:str)
    ja_a := bat.insert(b,"dog",80);	# 23 BKCinsert_bun (ja_a:void)<-(b:bat[:str,:int])($53:str)($54:int)
    mil.line("b.insert(str(nil),90);");	# 24 MILline ($55:void)<-($56:str)
    ka_a := calc.str(nil);	# 25 CALCnil2str (ka_a:str)<-($58:void)
    la_a := bat.insert(b,ka_a,90);	# 26 BKCinsert_bun (la_a:void)<-(b:bat[:str,:int])(ka_a:str)($60:int)
    mil.line("b.insert(\".\",100);");	# 27 MILline ($61:void)<-($62:str)
    ma_a := bat.insert(b,".",100);	# 28 BKCinsert_bun (ma_a:void)<-(b:bat[:str,:int])($64:str)($65:int)
    mil.line("b.insert(\"\",int(nil));");	# 29 MILline ($66:void)<-($67:str)
    na_a := calc.int(nil);	# 30 CALCnil2int (na_a:int)<-($58:void)
    oa_a := bat.insert(b,"",na_a);	# 31 BKCinsert_bun (oa_a:void)<-(b:bat[:str,:int])($70:str)(na_a:int)
    mil.line("b.insert(str(nil),int(nil));");	# 32 MILline ($71:void)<-($72:str)
    pa_a := calc.str(nil);	# 33 CALCnil2str (pa_a:str)<-($58:void)
    qa_a := calc.int(nil);	# 34 CALCnil2int (qa_a:int)<-($58:void)
    ra_a := bat.insert(b,pa_a,qa_a);	# 35 BKCinsert_bun (ra_a:void)<-(b:bat[:str,:int])(pa_a:str)(qa_a:int)
    mil.line("b.print();");	# 36 MILline ($76:void)<-($77:str)
    sa_a := io.print(b);	# 37 IOprint_val (sa_a:int)<-(b:bat[:str,:int])
    mil.line("var c:= mark(b,oid(20000050));");	# 38 MILline ($79:void)<-($80:str)
    ta_a := calc.oid(20000050);	# 39 CALCint2oid (ta_a:oid)<-($82:int)
    c := algebra.mark(b,ta_a);	# 40 ALGmark (c:bat[:str,:oid])<-(b:bat[:str,:int])(ta_a:oid)
    mil.line("print(c);");	# 41 MILline ($84:void)<-($85:str)
    ua_a := io.print(c);	# 42 IOprint_val (ua_a:int)<-(c:bat[:str,:oid])
    mil.line("var d:=number(b);");	# 43 MILline ($87:void)<-($88:str)
    d := algebra.number(b);	# 44 ALGnumber (d:bat[:str,:int])<-(b:bat[:str,:int])
    mil.line("print(d);");	# 45 MILline ($90:void)<-($91:str)
    va_a := io.print(d);	# 46 IOprint_val (va_a:int)<-(d:bat[:str,:int])
    mil.line("quit();");	# 47 MILline ($93:void)<-($94:str)
    wa_a := clients.quit();	# 48 CLTquit (wa_a:void)
end main;	# 49  
#setoid(oid(20000000));
##test mark and number primitives
#var b:= new(str,int);
#b.insert("the",1);
#b.insert("quick",20);
#b.insert("brown",30);
#b.insert("fox",40);
#b.insert("jumps",50);
#b.insert("over",60);
#b.insert("lazy",70);
#b.insert("dog",80);
#b.insert(str(nil),90);
#b.insert(".",100);
#b.insert("",int(nil));
#b.insert(str(nil),int(nil));
#b.print();
#-------------------------#
# BAT:		  tmp_24  #
# (str)		  (int)	  #
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  20	  ]
[ "brown",	  30	  ]
[ "fox",	  40	  ]
[ "jumps",	  50	  ]
[ "over",	  60	  ]
[ "lazy",	  70	  ]
[ "dog",	  80	  ]
[ nil,		  90	  ]
[ ".",		  100	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
#var c:= mark(b,oid(20000050));
#print(c);
#---------------------------------#
# BAT:		  tmp_23	  #
# (str)		  (void)	  #
#---------------------------------#
[ "the",	  20000050@0	  ]
[ "quick",	  20000051@0	  ]
[ "brown",	  20000052@0	  ]
[ "fox",	  20000053@0	  ]
[ "jumps",	  20000054@0	  ]
[ "over",	  20000055@0	  ]
[ "lazy",	  20000056@0	  ]
[ "dog",	  20000057@0	  ]
[ nil,		  20000058@0	  ]
[ ".",		  20000059@0	  ]
[ "",		  20000060@0	  ]
[ nil,		  20000061@0	  ]
#var d:=number(b);
#print(d);
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "the",	  0	  ]
[ "quick",	  1	  ]
[ "brown",	  2	  ]
[ "fox",	  3	  ]
[ "jumps",	  4	  ]
[ "over",	  5	  ]
[ "lazy",	  6	  ]
[ "dog",	  7	  ]
[ nil,		  8	  ]
[ ".",		  9	  ]
[ "",		  10	  ]
[ nil,		  11	  ]
#quit();

# 17:08:54 >  
# 17:08:54 >  Done.
# 17:08:54 >  

