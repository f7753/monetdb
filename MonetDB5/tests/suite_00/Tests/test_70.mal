# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#var b:= new(int,int);
	b := new(:int,:int);
#b.insert(1,15);
	ca_a := insert(b,1,15);
#b.insert(2,15);
	da_a := insert(b,2,15);
#b.sum().print();
	ea_a := sum(b,);
	fa_a := print(ea_a,);
#b.insert(3,int(nil));
	nil:= mil.take("nil");
	ga_a := int(nil);
	ha_a := insert(b,3,ga_a);
#b.sum().print();
	ia_a := sum(b,);
	ja_a := print(ia_a,);
#b.insert(4,15);
	ka_a := insert(b,4,15);
#b.insert(5,25);
	la_a := insert(b,5,25);
#b.insert(6,36);
	ma_a := insert(b,6,36);
#b.insert(7,49);
	na_a := insert(b,7,49);
#b.insert(8,64);
	oa_a := insert(b,8,64);
#b.insert(9,int(nil));
	pa_a := int(nil);
	qa_a := insert(b,9,pa_a);
#var t:= b.histogram();
	t := histogram(b,);
#t.print();
	ra_a := print(t,);
#commit();
	sa_a := commit();
#var s:= new(int,str);
	s := new(:int,:str);
#insert(s,1,"hello");
	ta_a := insert(s,1,"hello");
#insert(s,2,"hello");
	ua_a := insert(s,2,"hello");
#insert(s,3,"hello");
	va_a := insert(s,3,"hello");
#insert(s,4,"dello");
	wa_a := insert(s,4,"dello");
#insert(s,5,"eello");
	xa_a := insert(s,5,"eello");
#insert(s,6,"fello");
	ya_a := insert(s,6,"fello");
#insert(s,7,"fello");
	ab_a := insert(s,7,"fello");
#insert(s,8,"fello");
	bb_a := insert(s,8,"fello");
#t:= s.histogram();
	t := histogram(s,);
#t.print();
	cb_a := print(t,);
#var c:= new(int,int);
	c := new(:int,:int);
#c.insert(1,15);
	db_a := insert(c,1,15);
#c.insert(2,15);
	eb_a := insert(c,2,15);
#c.insert(3,int(nil));
	fb_a := int(nil);
	gb_a := insert(c,3,fb_a);
#c.insert(4,0);
	hb_a := insert(c,4,0);
#c.insert(5,30);
	ib_a := insert(c,5,30);
#c.print();
	jb_a := print(c,);
#var d:= [<](b,c);
	d := multiplex.tactics("<",b,c);
#d.print();
	kb_a := print(d,);
#d:= [<](c,b);
	d := multiplex.tactics("<",c,b);
#d.print();
	lb_a := print(d,);
#d:= [>](c,b);
	d := multiplex.tactics(">",c,b);
#d.print();
	mb_a := print(d,);
#quit();
	nb_a := quit();
