stdout of test 'test_70` in directory 'tests/suite_00` itself:

#> Mtest (20:57:33):	milS test_70 milS
#> Mtest (20:57:33):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_70.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_70.milS

# 10:37:51 >  
# 10:37:51 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=41613 --set sql_port=56531 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_70.mal </dev/null
# 10:37:51 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("#This collection of examples is geared at the support\n");
#	mil.line("#of the data mining tool\n");
#	mil.line("var b:= new(int,int);");
#	b := new(nil:int,nil:int);
#	mil.line("b.insert(1,15);");
#	ca_a := insert(b,1,15);
#	mil.line("b.insert(2,15);");
#	da_a := insert(b,2,15);
#	mil.line("b.sum().print();");
#	ea_a := sum(b);
#	fa_a := print(ea_a);
#	mil.line("b.insert(3,int(nil));");
#	ga_a := int(nil);
#	ha_a := insert(b,3,ga_a);
#	mil.line("b.sum().print();");
#	ia_a := sum(b);
#	ja_a := print(ia_a);
#	mil.line("b.insert(4,15);");
#	ka_a := insert(b,4,15);
#	mil.line("b.insert(5,25);");
#	la_a := insert(b,5,25);
#	mil.line("b.insert(6,36);");
#	ma_a := insert(b,6,36);
#	mil.line("b.insert(7,49);");
#	na_a := insert(b,7,49);
#	mil.line("b.insert(8,64);");
#	oa_a := insert(b,8,64);
#	mil.line("b.insert(9,int(nil));");
#	pa_a := int(nil);
#	qa_a := insert(b,9,pa_a);
#	mil.line("var t:= b.histogram();");
#	t := histogram(b);
#	mil.line("t.print();");
#	ra_a := print(t);
#	mil.line("commit();");
#	sa_a := commit();
#	mil.line("var s:= new(int,str);");
#	s := new(nil:int,nil:str);
#	mil.line("insert(s,1,\"hello\");");
#	ta_a := insert(s,1,"hello");
#	mil.line("insert(s,2,\"hello\");");
#	ua_a := insert(s,2,"hello");
#	mil.line("insert(s,3,\"hello\");");
#	va_a := insert(s,3,"hello");
#	mil.line("insert(s,4,\"dello\");");
#	wa_a := insert(s,4,"dello");
#	mil.line("insert(s,5,\"eello\");");
#	xa_a := insert(s,5,"eello");
#	mil.line("insert(s,6,\"fello\");");
#	ya_a := insert(s,6,"fello");
#	mil.line("insert(s,7,\"fello\");");
#	ab_a := insert(s,7,"fello");
#	mil.line("insert(s,8,\"fello\");");
#	bb_a := insert(s,8,"fello");
#	mil.line("var t2:= s.histogram();");
#	t2 := histogram(s);
#	mil.line("t2.print();");
#	cb_a := print(t2);
#	mil.line("#It requires a few additional routines\n");
#	c := new(nil:int,nil:int);
#	mil.line("c.insert(1,15);");
#	db_a := insert(c,1,15);
#	mil.line("c.insert(2,15);");
#	eb_a := insert(c,2,15);
#	mil.line("c.insert(3,int(nil));");
#	fb_a := int(nil);
#	gb_a := insert(c,3,fb_a);
#	mil.line("c.insert(4,0);");
#	hb_a := insert(c,4,0);
#	mil.line("c.insert(5,30);");
#	ib_a := insert(c,5,30);
#	mil.line("c.print();");
#	jb_a := print(c);
#	mil.line("var d:= [<](b,c);");
#	d := multiplex.tactics("<",b,c);
#	mil.line("d.print();");
#	kb_a := print(d);
#	mil.line("d:= [<](c,b);");
#	d := multiplex.tactics("<",c,b);
#	mil.line("d.print();");
#	lb_a := print(d);
#	mil.line("d:= [>](c,b);");
#	d := multiplex.tactics(">",c,b);
#	mil.line("d.print();");
#	mb_a := print(d);
#	mil.line("quit();");
#	nb_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#This collection of examples is geared at the support\n");	# 4 MILline ($6:void)<-($7:str)
    mil.line("#of the data mining tool\n");	# 5 MILline ($8:void)<-($9:str)
    mil.line("var b:= new(int,int);");	# 6 MILline ($10:void)<-($11:str)
    b := bbp.new(nil,nil);	# 7 CMDBATnew (b:bat[:int,:int])<-($13:int)($13:int)
    mil.line("b.insert(1,15);");	# 8 MILline ($14:void)<-($15:str)
    ca_a := bat.insert(b,1,15);	# 9 BKCinsert_bun (ca_a:void)<-(b:bat[:int,:int])($17:int)($18:int)
    mil.line("b.insert(2,15);");	# 10 MILline ($19:void)<-($20:str)
    da_a := bat.insert(b,2,15);	# 11 BKCinsert_bun (da_a:void)<-(b:bat[:int,:int])($22:int)($18:int)
    mil.line("b.sum().print();");	# 12 MILline ($23:void)<-($24:str)
    ea_a := algebra.sum(b);	# 13 ALGsum_int_lng (ea_a:lng)<-(b:bat[:int,:int])
    fa_a := io.print(ea_a);	# 14 IOprint_val (fa_a:int)<-(ea_a:lng)
    mil.line("b.insert(3,int(nil));");	# 15 MILline ($27:void)<-($28:str)
    ga_a := calc.int(nil);	# 16 CALCnil2int (ga_a:int)<-($30:void)
    ha_a := bat.insert(b,3,ga_a);	# 17 BKCinsert_bun (ha_a:void)<-(b:bat[:int,:int])($32:int)(ga_a:int)
    mil.line("b.sum().print();");	# 18 MILline ($33:void)<-($24:str)
    ia_a := algebra.sum(b);	# 19 ALGsum_int_lng (ia_a:lng)<-(b:bat[:int,:int])
    ja_a := io.print(ia_a);	# 20 IOprint_val (ja_a:int)<-(ia_a:lng)
    mil.line("b.insert(4,15);");	# 21 MILline ($36:void)<-($37:str)
    ka_a := bat.insert(b,4,15);	# 22 BKCinsert_bun (ka_a:void)<-(b:bat[:int,:int])($39:int)($18:int)
    mil.line("b.insert(5,25);");	# 23 MILline ($40:void)<-($41:str)
    la_a := bat.insert(b,5,25);	# 24 BKCinsert_bun (la_a:void)<-(b:bat[:int,:int])($43:int)($44:int)
    mil.line("b.insert(6,36);");	# 25 MILline ($45:void)<-($46:str)
    ma_a := bat.insert(b,6,36);	# 26 BKCinsert_bun (ma_a:void)<-(b:bat[:int,:int])($48:int)($49:int)
    mil.line("b.insert(7,49);");	# 27 MILline ($50:void)<-($51:str)
    na_a := bat.insert(b,7,49);	# 28 BKCinsert_bun (na_a:void)<-(b:bat[:int,:int])($53:int)($54:int)
    mil.line("b.insert(8,64);");	# 29 MILline ($55:void)<-($56:str)
    oa_a := bat.insert(b,8,64);	# 30 BKCinsert_bun (oa_a:void)<-(b:bat[:int,:int])($58:int)($59:int)
    mil.line("b.insert(9,int(nil));");	# 31 MILline ($60:void)<-($61:str)
    pa_a := calc.int(nil);	# 32 CALCnil2int (pa_a:int)<-($63:void)
    qa_a := bat.insert(b,9,pa_a);	# 33 BKCinsert_bun (qa_a:void)<-(b:bat[:int,:int])($65:int)(pa_a:int)
    mil.line("var t:= b.histogram();");	# 34 MILline ($66:void)<-($67:str)
    t := algebra.histogram(b);	# 35 ALGhistogram (t:bat[:int,:int])<-(b:bat[:int,:int])
    mil.line("t.print();");	# 36 MILline ($69:void)<-($70:str)
    ra_a := io.print(t);	# 37 IOprint_val (ra_a:int)<-(t:bat[:int,:int])
    mil.line("commit();");	# 38 MILline ($72:void)<-($73:str)
    sa_a := transaction.commit();	# 39 TRNglobal_commit (sa_a:void)
    mil.line("var s:= new(int,str);");	# 40 MILline ($75:void)<-($76:str)
    s := bbp.new(nil,"nil");	# 41 CMDBATnew (s:bat[:int,:str])<-($78:int)($79:str)
    mil.line("insert(s,1,\"hello\");");	# 42 MILline ($80:void)<-($81:str)
    ta_a := bat.insert(s,1,"hello");	# 43 BKCinsert_bun (ta_a:void)<-(s:bat[:int,:str])($83:int)($84:str)
    mil.line("insert(s,2,\"hello\");");	# 44 MILline ($85:void)<-($86:str)
    ua_a := bat.insert(s,2,"hello");	# 45 BKCinsert_bun (ua_a:void)<-(s:bat[:int,:str])($88:int)($84:str)
    mil.line("insert(s,3,\"hello\");");	# 46 MILline ($89:void)<-($90:str)
    va_a := bat.insert(s,3,"hello");	# 47 BKCinsert_bun (va_a:void)<-(s:bat[:int,:str])($92:int)($84:str)
    mil.line("insert(s,4,\"dello\");");	# 48 MILline ($93:void)<-($94:str)
    wa_a := bat.insert(s,4,"dello");	# 49 BKCinsert_bun (wa_a:void)<-(s:bat[:int,:str])($96:int)($97:str)
    mil.line("insert(s,5,\"eello\");");	# 50 MILline ($98:void)<-($99:str)
    xa_a := bat.insert(s,5,"eello");	# 51 BKCinsert_bun (xa_a:void)<-(s:bat[:int,:str])($101:int)($102:str)
    mil.line("insert(s,6,\"fello\");");	# 52 MILline ($103:void)<-($104:str)
    ya_a := bat.insert(s,6,"fello");	# 53 BKCinsert_bun (ya_a:void)<-(s:bat[:int,:str])($106:int)($107:str)
    mil.line("insert(s,7,\"fello\");");	# 54 MILline ($108:void)<-($109:str)
    ab_a := bat.insert(s,7,"fello");	# 55 BKCinsert_bun (ab_a:void)<-(s:bat[:int,:str])($111:int)($107:str)
    mil.line("insert(s,8,\"fello\");");	# 56 MILline ($112:void)<-($113:str)
    bb_a := bat.insert(s,8,"fello");	# 57 BKCinsert_bun (bb_a:void)<-(s:bat[:int,:str])($115:int)($107:str)
    mil.line("var t2:= s.histogram();");	# 58 MILline ($116:void)<-($117:str)
    t2 := algebra.histogram(s);	# 59 ALGhistogram (t2:bat[:str,:int])<-(s:bat[:int,:str])
    mil.line("t2.print();");	# 60 MILline ($119:void)<-($120:str)
    cb_a := io.print(t2);	# 61 IOprint_val (cb_a:int)<-(t2:bat[:str,:int])
    mil.line("#It requires a few additional routines\n");	# 62 MILline ($122:void)<-($123:str)
    c := bbp.new(nil,nil);	# 63 CMDBATnew (c:bat[:int,:int])<-($125:int)($125:int)
    mil.line("c.insert(1,15);");	# 64 MILline ($126:void)<-($127:str)
    db_a := bat.insert(c,1,15);	# 65 BKCinsert_bun (db_a:void)<-(c:bat[:int,:int])($129:int)($130:int)
    mil.line("c.insert(2,15);");	# 66 MILline ($131:void)<-($132:str)
    eb_a := bat.insert(c,2,15);	# 67 BKCinsert_bun (eb_a:void)<-(c:bat[:int,:int])($134:int)($130:int)
    mil.line("c.insert(3,int(nil));");	# 68 MILline ($135:void)<-($136:str)
    fb_a := calc.int(nil);	# 69 CALCnil2int (fb_a:int)<-($138:void)
    gb_a := bat.insert(c,3,fb_a);	# 70 BKCinsert_bun (gb_a:void)<-(c:bat[:int,:int])($140:int)(fb_a:int)
    mil.line("c.insert(4,0);");	# 71 MILline ($141:void)<-($142:str)
    hb_a := bat.insert(c,4,0);	# 72 BKCinsert_bun (hb_a:void)<-(c:bat[:int,:int])($144:int)($145:int)
    mil.line("c.insert(5,30);");	# 73 MILline ($146:void)<-($147:str)
    ib_a := bat.insert(c,5,30);	# 74 BKCinsert_bun (ib_a:void)<-(c:bat[:int,:int])($149:int)($150:int)
    mil.line("c.print();");	# 75 MILline ($151:void)<-($152:str)
    jb_a := io.print(c);	# 76 IOprint_val (jb_a:int)<-(c:bat[:int,:int])
    mil.line("var d:= [<](b,c);");	# 77 MILline ($154:void)<-($155:str)
    d := batcalc.<(b,c);	# 78 CMDcmpLT (d:bat[:int,:bit])<-(b:bat[:int,:int])(c:bat[:int,:int])
    mil.line("d.print();");	# 79 MILline ($158:void)<-($159:str)
    kb_a := io.print(d);	# 80 IOprint_val (kb_a:int)<-(d:bat[:int,:bit])
    mil.line("d:= [<](c,b);");	# 81 MILline ($161:void)<-($162:str)
    d := batcalc.<(c,b);	# 82 CMDcmpLT (d:bat[:int,:bit])<-(c:bat[:int,:int])(b:bat[:int,:int])
    mil.line("d.print();");	# 83 MILline ($163:void)<-($159:str)
    lb_a := io.print(d);	# 84 IOprint_val (lb_a:int)<-(d:bat[:int,:bit])
    mil.line("d:= [>](c,b);");	# 85 MILline ($165:void)<-($166:str)
    d := batcalc.>(c,b);	# 86 CMDcmpGT (d:bat[:int,:bit])<-(c:bat[:int,:int])(b:bat[:int,:int])
    mil.line("d.print();");	# 87 MILline ($168:void)<-($159:str)
    mb_a := io.print(d);	# 88 IOprint_val (mb_a:int)<-(d:bat[:int,:bit])
    mil.line("quit();");	# 89 MILline ($170:void)<-($171:str)
    nb_a := clients.quit();	# 90 CLTquit (nb_a:void)
end main;	# 91  
#setoid(oid(20000000));
##This collection of examples is geared at the support
##of the data mining tool
#var b:= new(int,int);
#b.insert(1,15);
#b.insert(2,15);
#b.sum().print();
[ 30 ]
#b.insert(3,int(nil));
#b.sum().print();
[ nil ]
#b.insert(4,15);
#b.insert(5,25);
#b.insert(6,36);
#b.insert(7,49);
#b.insert(8,64);
#b.insert(9,int(nil));
#var t:= b.histogram();
#t.print();
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 15,	  3	  ]
[ nil,	  2	  ]
[ 25,	  1	  ]
[ 36,	  1	  ]
[ 49,	  1	  ]
[ 64,	  1	  ]
#commit();
#var s:= new(int,str);
#insert(s,1,"hello");
#insert(s,2,"hello");
#insert(s,3,"hello");
#insert(s,4,"dello");
#insert(s,5,"eello");
#insert(s,6,"fello");
#insert(s,7,"fello");
#insert(s,8,"fello");
#var t2:= s.histogram();
#t2.print();
#-------------------------#
# BAT:		  tmp_26  #
# (str)		  (int)	  #
#-------------------------#
[ "hello",	  3	  ]
[ "dello",	  1	  ]
[ "eello",	  1	  ]
[ "fello",	  3	  ]
##It requires a few additional routines
#c.insert(1,15);
#c.insert(2,15);
#c.insert(3,int(nil));
#c.insert(4,0);
#c.insert(5,30);
#c.print();
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  15	  ]
[ 3,	  nil	  ]
[ 4,	  0	  ]
[ 5,	  30	  ]
#var d:= [<](b,c);
!ERROR: MALexception:batcalc.CMDcompareLT:requires bats of identical size
>
# 10:37:51 >  
# 10:37:51 >  Done.
# 10:37:51 >  

