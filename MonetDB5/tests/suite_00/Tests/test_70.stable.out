stdout of test 'test_70` in directory 'tests/suite_00` itself:

#> Mtest (20:57:33):	milS test_70 milS
#> Mtest (20:57:33):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_70.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_70.milS

# 10:37:51 >  
# 10:37:51 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=41613 --set sql_port=56531 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_70.mal </dev/null
# 10:37:51 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("#This collection of examples is geared at the support\n");
#	mil.line("#of the data mining tool\n");
#	mil.line("var b:= new(int,int);");
#	b := new(nil:int,nil:int);
#	mil.line("b.insert(1,15);");
#	ca_a := insert(b,1,15);
#	mil.line("b.insert(2,15);");
#	da_a := insert(b,2,15);
#	mil.line("b.sum().print();");
#	ea_a := sum(b);
#	fa_a := print(ea_a);
#	mil.line("b.insert(3,int(nil));");
#	ga_a := int(nil);
#	ha_a := insert(b,3,ga_a);
#	mil.line("b.sum().print();");
#	ia_a := sum(b);
#	ja_a := print(ia_a);
#	mil.line("b.insert(4,15);");
#	ka_a := insert(b,4,15);
#	mil.line("b.insert(5,25);");
#	la_a := insert(b,5,25);
#	mil.line("b.insert(6,36);");
#	ma_a := insert(b,6,36);
#	mil.line("b.insert(7,49);");
#	na_a := insert(b,7,49);
#	mil.line("b.insert(8,64);");
#	oa_a := insert(b,8,64);
#	mil.line("b.insert(9,int(nil));");
#	pa_a := int(nil);
#	qa_a := insert(b,9,pa_a);
#	mil.line("var t:= b.histogram();");
#	t := histogram(b);
#	mil.line("t.print();");
#	ra_a := print(t);
#	mil.line("commit();");
#	sa_a := commit();
#	mil.line("var s:= new(int,str);");
#	s := new(nil:int,nil:str);
#	mil.line("insert(s,1,\"hello\");");
#	ta_a := insert(s,1,"hello");
#	mil.line("insert(s,2,\"hello\");");
#	ua_a := insert(s,2,"hello");
#	mil.line("insert(s,3,\"hello\");");
#	va_a := insert(s,3,"hello");
#	mil.line("insert(s,4,\"dello\");");
#	wa_a := insert(s,4,"dello");
#	mil.line("insert(s,5,\"eello\");");
#	xa_a := insert(s,5,"eello");
#	mil.line("insert(s,6,\"fello\");");
#	ya_a := insert(s,6,"fello");
#	mil.line("insert(s,7,\"fello\");");
#	ab_a := insert(s,7,"fello");
#	mil.line("insert(s,8,\"fello\");");
#	bb_a := insert(s,8,"fello");
#	mil.line("var t2:= s.histogram();");
#	t2 := histogram(s);
#	mil.line("t2.print();");
#	cb_a := print(t2);
#	mil.line("#It requires a few additional routines\n");
#	c := new(nil:int,nil:int);
#	mil.line("c.insert(1,15);");
#	db_a := insert(c,1,15);
#	mil.line("c.insert(2,15);");
#	eb_a := insert(c,2,15);
#	mil.line("c.insert(3,int(nil));");
#	fb_a := int(nil);
#	gb_a := insert(c,3,fb_a);
#	mil.line("c.insert(4,0);");
#	hb_a := insert(c,4,0);
#	mil.line("c.insert(5,30);");
#	ib_a := insert(c,5,30);
#	mil.line("c.print();");
#	jb_a := print(c);
#	mil.line("var d:= [<](b,c);");
#	d := multiplex.tactics("<",b,c);
#	mil.line("d.print();");
#	kb_a := print(d);
#	mil.line("d:= [<](c,b);");
#	d := multiplex.tactics("<",c,b);
#	mil.line("d.print();");
#	lb_a := print(d);
#	mil.line("d:= [>](c,b);");
#	d := multiplex.tactics(">",c,b);
#	mil.line("d.print();");
#	mb_a := print(d);
#	mil.line("quit();");
#	nb_a := quit();
#
function user.main():int;	# 0  (main:int)
# Monet Mil to Mal compiler 	# 1  ($2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  ($4:str)
#Predefined code segment 	# 3  ($6:str)
#The compiler can not guarantee an accurate compilation, 	# 4  ($8:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  ($10:str)
#A few guidelines to maximize usefullness. 	# 6  ($12:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  ($14:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  ($16:str)
#use the "mil_schema" for additional support routines 	# 9  ($18:str)
    mil.line("setoid(oid(20000000));");	# 10 MILline ($19:void)<-($20:str)
    aa_a := calc.oid(20000000);	# 11 CALCint2oid (aa_a:oid)<-($22:int)
    ba_a := calc.setoid(aa_a);	# 12 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#This collection of examples is geared at the support\n");	# 13 MILline ($24:void)<-($25:str)
    mil.line("#of the data mining tool\n");	# 14 MILline ($26:void)<-($27:str)
    mil.line("var b:= bbp.new(int,int);");	# 15 MILline ($28:void)<-($29:str)
    b := bbp.new(nil:int,nil:int);	# 16 CMDBATnew (b:bat[:int,:int])<-($31:int)($31:int)
    mil.line("b.insert(1,15);");	# 17 MILline ($32:void)<-($33:str)
    ca_a := bat.insert(b,1,15);	# 18 BKCinsert_bun (ca_a:bat[:int,:int])<-(b:bat[:int,:int])($35:int)($36:int)
    mil.line("b.insert(2,15);");	# 19 MILline ($37:void)<-($38:str)
    da_a := bat.insert(b,2,15);	# 20 BKCinsert_bun (da_a:bat[:int,:int])<-(b:bat[:int,:int])($40:int)($36:int)
    mil.line("b.sum().print();");	# 21 MILline ($41:void)<-($42:str)
    ea_a := algebra.sum(b);	# 22 ALGsum_int_lng (ea_a:lng)<-(b:bat[:int,:int])
    fa_a := io.print(ea_a);	# 23 IOprint_val (fa_a:int)<-(ea_a:lng)
    mil.line("b.insert(3,int(nil));");	# 24 MILline ($45:void)<-($46:str)
    ga_a := calc.int(nil);	# 25 CALCnil2int (ga_a:int)<-($48:void)
    ha_a := bat.insert(b,3,ga_a);	# 26 BKCinsert_bun (ha_a:bat[:int,:int])<-(b:bat[:int,:int])($50:int)(ga_a:int)
    mil.line("b.sum().print();");	# 27 MILline ($51:void)<-($42:str)
    ia_a := algebra.sum(b);	# 28 ALGsum_int_lng (ia_a:lng)<-(b:bat[:int,:int])
    ja_a := io.print(ia_a);	# 29 IOprint_val (ja_a:int)<-(ia_a:lng)
    mil.line("b.insert(4,15);");	# 30 MILline ($54:void)<-($55:str)
    ka_a := bat.insert(b,4,15);	# 31 BKCinsert_bun (ka_a:bat[:int,:int])<-(b:bat[:int,:int])($57:int)($36:int)
    mil.line("b.insert(5,25);");	# 32 MILline ($58:void)<-($59:str)
    la_a := bat.insert(b,5,25);	# 33 BKCinsert_bun (la_a:bat[:int,:int])<-(b:bat[:int,:int])($61:int)($62:int)
    mil.line("b.insert(6,36);");	# 34 MILline ($63:void)<-($64:str)
    ma_a := bat.insert(b,6,36);	# 35 BKCinsert_bun (ma_a:bat[:int,:int])<-(b:bat[:int,:int])($66:int)($67:int)
    mil.line("b.insert(7,49);");	# 36 MILline ($68:void)<-($69:str)
    na_a := bat.insert(b,7,49);	# 37 BKCinsert_bun (na_a:bat[:int,:int])<-(b:bat[:int,:int])($71:int)($72:int)
    mil.line("b.insert(8,64);");	# 38 MILline ($73:void)<-($74:str)
    oa_a := bat.insert(b,8,64);	# 39 BKCinsert_bun (oa_a:bat[:int,:int])<-(b:bat[:int,:int])($76:int)($77:int)
    mil.line("b.insert(9,int(nil));");	# 40 MILline ($78:void)<-($79:str)
    pa_a := calc.int(nil);	# 41 CALCnil2int (pa_a:int)<-($81:void)
    qa_a := bat.insert(b,9,pa_a);	# 42 BKCinsert_bun (qa_a:bat[:int,:int])<-(b:bat[:int,:int])($83:int)(pa_a:int)
    mil.line("var t:= b.histogram();");	# 43 MILline ($84:void)<-($85:str)
    t := algebra.histogram(b);	# 44 ALGhistogram (t:bat[:int,:int])<-(b:bat[:int,:int])
    mil.line("t.print();");	# 45 MILline ($87:void)<-($88:str)
    ra_a := io.print(t);	# 46 IOprint_val (ra_a:int)<-(t:bat[:int,:int])
    mil.line("commit();");	# 47 MILline ($90:void)<-($91:str)
    sa_a := transaction.commit();	# 48 TRNglobal_commit (sa_a:void)
    mil.line("var s:= bbp.new(int,str);");	# 49 MILline ($93:void)<-($94:str)
    s := bbp.new(nil:int,"nil:str");	# 50 CMDBATnew (s:bat[:int,:str])<-($96:int)($97:str)
    mil.line("insert(s,1,\"hello\");");	# 51 MILline ($98:void)<-($99:str)
    ta_a := bat.insert(s,1,"hello");	# 52 BKCinsert_bun (ta_a:bat[:int,:str])<-(s:bat[:int,:str])($101:int)($102:str)
    mil.line("insert(s,2,\"hello\");");	# 53 MILline ($103:void)<-($104:str)
    ua_a := bat.insert(s,2,"hello");	# 54 BKCinsert_bun (ua_a:bat[:int,:str])<-(s:bat[:int,:str])($106:int)($102:str)
    mil.line("insert(s,3,\"hello\");");	# 55 MILline ($107:void)<-($108:str)
    va_a := bat.insert(s,3,"hello");	# 56 BKCinsert_bun (va_a:bat[:int,:str])<-(s:bat[:int,:str])($110:int)($102:str)
    mil.line("insert(s,4,\"dello\");");	# 57 MILline ($111:void)<-($112:str)
    wa_a := bat.insert(s,4,"dello");	# 58 BKCinsert_bun (wa_a:bat[:int,:str])<-(s:bat[:int,:str])($114:int)($115:str)
    mil.line("insert(s,5,\"eello\");");	# 59 MILline ($116:void)<-($117:str)
    xa_a := bat.insert(s,5,"eello");	# 60 BKCinsert_bun (xa_a:bat[:int,:str])<-(s:bat[:int,:str])($119:int)($120:str)
    mil.line("insert(s,6,\"fello\");");	# 61 MILline ($121:void)<-($122:str)
    ya_a := bat.insert(s,6,"fello");	# 62 BKCinsert_bun (ya_a:bat[:int,:str])<-(s:bat[:int,:str])($124:int)($125:str)
    mil.line("insert(s,7,\"fello\");");	# 63 MILline ($126:void)<-($127:str)
    ab_a := bat.insert(s,7,"fello");	# 64 BKCinsert_bun (ab_a:bat[:int,:str])<-(s:bat[:int,:str])($129:int)($125:str)
    mil.line("insert(s,8,\"fello\");");	# 65 MILline ($130:void)<-($131:str)
    bb_a := bat.insert(s,8,"fello");	# 66 BKCinsert_bun (bb_a:bat[:int,:str])<-(s:bat[:int,:str])($133:int)($125:str)
    mil.line("var t2:= s.histogram();");	# 67 MILline ($134:void)<-($135:str)
    t2 := algebra.histogram(s);	# 68 ALGhistogram (t2:bat[:str,:int])<-(s:bat[:int,:str])
    mil.line("t2.print();");	# 69 MILline ($137:void)<-($138:str)
    cb_a := io.print(t2);	# 70 IOprint_val (cb_a:int)<-(t2:bat[:str,:int])
    mil.line("#It requires a few additional routines\n");	# 71 MILline ($140:void)<-($141:str)
    c := bbp.new(nil:int,nil:int);	# 72 CMDBATnew (c:bat[:int,:int])<-($143:int)($143:int)
    mil.line("c.insert(1,15);");	# 73 MILline ($144:void)<-($145:str)
    db_a := bat.insert(c,1,15);	# 74 BKCinsert_bun (db_a:bat[:int,:int])<-(c:bat[:int,:int])($147:int)($148:int)
    mil.line("c.insert(2,15);");	# 75 MILline ($149:void)<-($150:str)
    eb_a := bat.insert(c,2,15);	# 76 BKCinsert_bun (eb_a:bat[:int,:int])<-(c:bat[:int,:int])($152:int)($148:int)
    mil.line("c.insert(3,int(nil));");	# 77 MILline ($153:void)<-($154:str)
    fb_a := calc.int(nil);	# 78 CALCnil2int (fb_a:int)<-($156:void)
    gb_a := bat.insert(c,3,fb_a);	# 79 BKCinsert_bun (gb_a:bat[:int,:int])<-(c:bat[:int,:int])($158:int)(fb_a:int)
    mil.line("c.insert(4,0);");	# 80 MILline ($159:void)<-($160:str)
    hb_a := bat.insert(c,4,0);	# 81 BKCinsert_bun (hb_a:bat[:int,:int])<-(c:bat[:int,:int])($162:int)($163:int)
    mil.line("c.insert(5,30);");	# 82 MILline ($164:void)<-($165:str)
    ib_a := bat.insert(c,5,30);	# 83 BKCinsert_bun (ib_a:bat[:int,:int])<-(c:bat[:int,:int])($167:int)($168:int)
    mil.line("c.print();");	# 84 MILline ($169:void)<-($170:str)
    jb_a := io.print(c);	# 85 IOprint_val (jb_a:int)<-(c:bat[:int,:int])
    mil.line("var d:= [<](b,c);");	# 86 MILline ($172:void)<-($173:str)
    d := multiplex.script("calc.<",b,c);	# 87  (d:bat[:int,:bit])<-($175:str)(b:bat[:int,:int])(c:bat[:int,:int])
    mil.line("d.print();");	# 88 MILline ($176:void)<-($177:str)
    kb_a := io.print(d);	# 89 IOprint_val (kb_a:int)<-(d:bat[:int,:bit])
    mil.line("d:= [<](c,b);");	# 90 MILline ($179:void)<-($180:str)
    d := multiplex.script("calc.<",c,b);	# 91  (d:bat[:int,:bit])<-($175:str)(c:bat[:int,:int])(b:bat[:int,:int])
    mil.line("d.print();");	# 92 MILline ($181:void)<-($177:str)
    lb_a := io.print(d);	# 93 IOprint_val (lb_a:int)<-(d:bat[:int,:bit])
    mil.line("d:= [>](c,b);");	# 94 MILline ($183:void)<-($184:str)
    d := multiplex.script("calc.>",c,b);	# 95  (d:bat[:int,:bit])<-($185:str)(c:bat[:int,:int])(b:bat[:int,:int])
    mil.line("d.print();");	# 96 MILline ($186:void)<-($177:str)
    mb_a := io.print(d);	# 97 IOprint_val (mb_a:int)<-(d:bat[:int,:bit])
    mil.line("quit();");	# 98 MILline ($188:void)<-($189:str)
    nb_a := clients.quit();	# 99 CLTquit (nb_a:void)
end main;	# 100  
#setoid(oid(20000000));
##This collection of examples is geared at the support
##of the data mining tool
#var b:= new(int,int);
#b.insert(1,15);
#b.insert(2,15);
#b.sum().print();
[ 30 ]
#b.insert(3,int(nil));
#b.sum().print();
[ nil ]
#b.insert(4,15);
#b.insert(5,25);
#b.insert(6,36);
#b.insert(7,49);
#b.insert(8,64);
#b.insert(9,int(nil));
#var t:= b.histogram();
#t.print();
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 15,	  3	  ]
[ nil,	  2	  ]
[ 25,	  1	  ]
[ 36,	  1	  ]
[ 49,	  1	  ]
[ 64,	  1	  ]
#commit();
#var s:= new(int,str);
#insert(s,1,"hello");
#insert(s,2,"hello");
#insert(s,3,"hello");
#insert(s,4,"dello");
#insert(s,5,"eello");
#insert(s,6,"fello");
#insert(s,7,"fello");
#insert(s,8,"fello");
#var t2:= s.histogram();
#t2.print();
#-------------------------#
# BAT:		  tmp_26  #
# (str)		  (int)	  #
#-------------------------#
[ "hello",	  3	  ]
[ "dello",	  1	  ]
[ "eello",	  1	  ]
[ "fello",	  3	  ]
##It requires a few additional routines
#c.insert(1,15);
#c.insert(2,15);
#c.insert(3,int(nil));
#c.insert(4,0);
#c.insert(5,30);
#c.print();
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  15	  ]
[ 3,	  nil	  ]
[ 4,	  0	  ]
[ 5,	  30	  ]
#var d:= [<](b,c);
#d.print();
#-----------------#
# h	tmp_18	  # name
# int	bit	  # type
#-----------------#
[ 1,	  false	  ]
[ 2,	  false	  ]
[ 3,	  nil	  ]
[ 4,	  false	  ]
[ 5,	  true	  ]
#d:= [<](c,b);
#d.print();
#-----------------#
# h	tmp_19	  # name
# int	bit	  # type
#-----------------#
[ 1,	  false	  ]
[ 2,	  false	  ]
[ 3,	  nil	  ]
[ 4,	  true	  ]
[ 5,	  false	  ]
#d:= [>](c,b);
#d.print();
#-----------------#
# h	tmp_20	  # name
# int	bit	  # type
#-----------------#
[ 1,	  false	  ]
[ 2,	  false	  ]
[ 3,	  nil	  ]
[ 4,	  false	  ]
[ 5,	  true	  ]
#quit();

# 15:37:28 >  
# 15:37:28 >  Done.
# 15:37:28 >  

