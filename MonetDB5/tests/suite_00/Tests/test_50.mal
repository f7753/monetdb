# Monet Mil to Mal compiler
include mil_scenario;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("# Selfcontained test of delta operations\n");
	mil.line("var b:=new(int,int);");
	b := new(nil:int,nil:int);
	mil.line("var bi:=new(int,int);");
	bi := new(nil:int,nil:int);
	mil.line("var bd:=new(int,int);");
	bd := new(nil:int,nil:int);
	mil.line("insert(b,1,2);");
	ca_a := insert(b,1,2);
	mil.line("insert(b,2,3);");
	da_a := insert(b,2,3);
	mil.line("bd:=b.delta();");
	bd := delta(b);
	mil.line("print(bd);");
	ea_a := print(bd);
	mil.line("var a:= b.alpha();");
	a := alpha(b);
	mil.line("a.print();");
	fa_a := print(a);
	mil.line("#commit the changes and repeat the action\n");
	ga_a := delete(bd);
	mil.line("commit(b);");
	ha_a := commit(b);
	mil.line("b.alpha().print();");
	ia_a := alpha(b);
	ja_a := print(ia_a);
	mil.line("insert(b,4,5);");
	ka_a := insert(b,4,5);
	mil.line("delete(b,2,3);");
	la_a := delete(b,2,3);
	mil.line("print(b);");
	ma_a := print(b);
	mil.line("bd:=b.delta();");
	bd := delta(b);
	mil.line("print(bd);");
	na_a := print(bd);
	mil.line("a:= b.alpha();");
	a := alpha(b);
	mil.line("a.print();");
	oa_a := print(a);
	mil.line("abort(b);");
	pa_a := abort(b);
	mil.line("print(b);");
	qa_a := print(b);
	mil.line("quit();");
	ra_a := quit();
