# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#var b:=new(int,int);
	b := new(:int,:int);
#var bi:=new(int,int);
	bi := new(:int,:int);
#var bd:=new(int,int);
	bd := new(:int,:int);
#insert(b,1,2);
	ca_a := insert(b,1,2);
#insert(b,2,3);
	da_a := insert(b,2,3);
#bd:=b.delta();
	bd := delta(b,);
#print(bd);
	ea_a := print(bd);
#var a:= b.alpha();
	a := alpha(b,);
#a.print();
	fa_a := print(a,);
#clear(bd);
	ga_a := clear(bd);
#commit(b);
	ha_a := commit(b);
#b.alpha().print();
	ia_a := alpha(b,);
	ja_a := print(ia_a,);
#insert(b,4,5);
	ka_a := insert(b,4,5);
#delete(b,2,3);
	la_a := delete(b,2,3);
#print(b);
	ma_a := print(b);
#bd:=b.delta();
	bd := delta(b,);
#print(bd);
	na_a := print(bd);
#a:= b.alpha();
	a := alpha(b,);
#a.print();
	oa_a := print(a,);
#abort(b);
	pa_a := abort(b);
#print(b);
	qa_a := print(b);
#quit();
	ra_a := quit();
