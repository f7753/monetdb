stdout of test 'test_50` in directory 'tests/suite_00` itself:

#> Mtest (20:57:28):	milS test_50 milS
#> Mtest (20:57:28):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_50.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_50.milS

# 10:14:27 >  
# 10:14:27 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=45534 --set sql_port=55728 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_50.mal </dev/null
# 10:14:27 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("# Selfcontained test of delta operations\n");
#	mil.line("module(\"trans\");");
#	mil.line("var b:=new(int,int);");
#	b := new(nil:int,nil:int);
#	mil.line("var bi:=new(int,int);");
#	bi := new(nil:int,nil:int);
#	mil.line("var bd:=new(int,int);");
#	bd := new(nil:int,nil:int);
#	mil.line("insert(b,1,2);");
#	ca_a := insert(b,1,2);
#	mil.line("insert(b,2,3);");
#	da_a := insert(b,2,3);
#	mil.line("bd:=b.delta();");
#	bd := delta(b);
#	mil.line("print(bd);");
#	ea_a := print(bd);
#	mil.line("var a:= b.alpha();");
#	a := alpha(b);
#	mil.line("a.print();");
#	fa_a := print(a);
#	mil.line("#commit the changes and repeat the action\n");
#	mil.line("clear(bd);");
#	ga_a := clear(bd);
#	mil.line("commit(b);");
#	ha_a := commit(b);
#	mil.line("b.alpha().print();");
#	ia_a := alpha(b);
#	ja_a := print(ia_a);
#	mil.line("insert(b,4,5);");
#	ka_a := insert(b,4,5);
#	mil.line("delete(b,2,3);");
#	la_a := delete(b,2,3);
#	mil.line("print(b);");
#	ma_a := print(b);
#	mil.line("bd:=b.delta();");
#	bd := delta(b);
#	mil.line("print(bd);");
#	na_a := print(bd);
#	mil.line("a:= b.alpha();");
#	a := alpha(b);
#	mil.line("a.print();");
#	oa_a := print(a);
#	mil.line("abort(b);");
#	pa_a := abort(b);
#	mil.line("print(b);");
#	qa_a := print(b);
#	mil.line("quit();");
#	ra_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# Selfcontained test of delta operations\n");	# 4 MILline ($6:void)<-($7:str)
    mil.line("var b:=new(int,int);");	# 5 MILline ($8:void)<-($9:str)
    b := bbp.new(nil:int,nil:int);	# 6 CMDBATnew (b:bat[:int,:int])<-($11:int)($11:int)
    mil.line("var bi:=new(int,int);");	# 7 MILline ($12:void)<-($13:str)
    bi := bbp.new(nil:int,nil:int);	# 8 CMDBATnew (bi:bat[:int,:int])<-($11:int)($11:int)
    mil.line("var bd:=new(int,int);");	# 9 MILline ($15:void)<-($16:str)
    bd := bbp.new(nil:int,nil:int);	# 10 CMDBATnew (bd:bat[:int,:int])<-($11:int)($11:int)
    mil.line("insert(b,1,2);");	# 11 MILline ($18:void)<-($19:str)
    ca_a := bat.insert(b,1,2);	# 12 BKCinsert_bun (ca_a:void)<-(b:bat[:int,:int])($21:int)($22:int)
    mil.line("insert(b,2,3);");	# 13 MILline ($23:void)<-($24:str)
    da_a := bat.insert(b,2,3);	# 14 BKCinsert_bun (da_a:void)<-(b:bat[:int,:int])($22:int)($26:int)
    mil.line("bd:=b.delta();");	# 15 MILline ($27:void)<-($28:str)
    bd := transaction.delta(b);	# 16 TRNtrans_delta (bd:bat[:int,:int])<-(b:bat[:int,:int])
    mil.line("print(bd);");	# 17 MILline ($29:void)<-($30:str)
    ea_a := io.print(bd);	# 18 IOprint_val (ea_a:int)<-(bd:bat[:int,:int])
    mil.line("var a:= b.alpha();");	# 19 MILline ($32:void)<-($33:str)
    a := transaction.alpha(b);	# 20 TRNtrans_alpha (a:bat[:int,:int])<-(b:bat[:int,:int])
    mil.line("a.print();");	# 21 MILline ($35:void)<-($36:str)
    fa_a := io.print(a);	# 22 IOprint_val (fa_a:int)<-(a:bat[:int,:int])
    mil.line("#commit the changes and repeat the action\n");	# 23 MILline ($38:void)<-($39:str)
    ga_a := mil_algebra_procs.clear(bd);	# 24  (ga_a:bat[:int,:int])<-(bd:bat[:int,:int])
    mil.line("commit(b);");	# 25 MILline ($41:void)<-($42:str)
    ha_a := transaction.commit(b);	# 26 TRNtrans_commit (ha_a:void)<-(b:bat[:int,:int])
    mil.line("b.alpha().print();");	# 27 MILline ($44:void)<-($45:str)
    ia_a := transaction.alpha(b);	# 28 TRNtrans_alpha (ia_a:bat[:int,:int])<-(b:bat[:int,:int])
    ja_a := io.print(ia_a);	# 29 IOprint_val (ja_a:int)<-(ia_a:bat[:int,:int])
    mil.line("insert(b,4,5);");	# 30 MILline ($48:void)<-($49:str)
    ka_a := bat.insert(b,4,5);	# 31 BKCinsert_bun (ka_a:void)<-(b:bat[:int,:int])($51:int)($52:int)
    mil.line("delete(b,2,3);");	# 32 MILline ($53:void)<-($54:str)
    la_a := bat.delete(b,2,3);	# 33 BKCdelete_bun (la_a:void)<-(b:bat[:int,:int])($56:int)($26:int)
    mil.line("print(b);");	# 34 MILline ($57:void)<-($58:str)
    ma_a := io.print(b);	# 35 IOprint_val (ma_a:int)<-(b:bat[:int,:int])
    mil.line("bd:=b.delta();");	# 36 MILline ($60:void)<-($61:str)
    bd := transaction.delta(b);	# 37 TRNtrans_delta (bd:bat[:int,:int])<-(b:bat[:int,:int])
    mil.line("print(bd);");	# 38 MILline ($62:void)<-($63:str)
    na_a := io.print(bd);	# 39 IOprint_val (na_a:int)<-(bd:bat[:int,:int])
    mil.line("a:= b.alpha();");	# 40 MILline ($65:void)<-($66:str)
    a := transaction.alpha(b);	# 41 TRNtrans_alpha (a:bat[:int,:int])<-(b:bat[:int,:int])
    mil.line("a.print();");	# 42 MILline ($67:void)<-($36:str)
    oa_a := io.print(a);	# 43 IOprint_val (oa_a:int)<-(a:bat[:int,:int])
    mil.line("abort(b);");	# 44 MILline ($69:void)<-($70:str)
    pa_a := transaction.abort(b);	# 45 TRNtrans_abort (pa_a:void)<-(b:bat[:int,:int])
    mil.line("print(b);");	# 46 MILline ($72:void)<-($58:str)
    qa_a := io.print(b);	# 47 IOprint_val (qa_a:int)<-(b:bat[:int,:int])
    mil.line("quit();");	# 48 MILline ($74:void)<-($75:str)
    ra_a := clients.quit();	# 49 CLTquit (ra_a:void)
end main;	# 50  
#setoid(oid(20000000));
## Selfcontained test of delta operations
#module("trans");
#var b:=new(int,int);
#var bi:=new(int,int);
#var bd:=new(int,int);
#insert(b,1,2);
#insert(b,2,3);
#bd:=b.delta();
#print(bd);
#-----------------#
# BAT:	  tmp_26  #
# (int)	  (int)	  #
#-----------------#
#var a:= b.alpha();
#a.print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
[ 2,	  3	  ]
##commit the changes and repeat the action
#clear(bd);
#commit(b);
#b.alpha().print();
#-----------------#
# h	tmp_8	  # name
# int	int	  # type
#-----------------#
#insert(b,4,5);
#delete(b,2,3);
#print(b);
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
[ 4,	  5	  ]
#bd:=b.delta();
#print(bd);
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  3	  ]
#a:= b.alpha();
#a.print();
#-----------------#
# BAT:	  tmp_26  #
# (int)	  (int)	  #
#-----------------#
[ 4,	  5	  ]
#abort(b);
#print(b);
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  3	  ]
[ 1,	  2	  ]
#quit();

# 17:08:50 >  
# 17:08:50 >  Done.
# 17:08:50 >  

