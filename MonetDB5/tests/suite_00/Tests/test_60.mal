# Monet Mil to Mal compiler
include "mil_system_procs";
include "mil_algebra_procs";
include "mil_insert";
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("# For distributed processing it should be possible\n");
	mil.line("# split and re-distribute BATs.\n");
	mil.line("# This is supported by hashsplit, rangesplit,  and groupby operations.\n");
	mil.line("PROC groupby(bat b, bat  rng) : bat {");
function groupby(b:bat[:any,:any], rng:bat[:any,:any]):bat[:any,:any];
	mil.line(" VAR r := rng.reverse().number().reverse();");
	ca_a := reverse(rng);
	da_a := number(ca_a);
	r := reverse(da_a);
	mil.line(" VAR l := rng.number().reverse();");
	ea_a := number(rng);
	l := reverse(ea_a);
	mil.line(" RETURN [select](l.project(b),l,r);");
	fa_a := project(l,b);
	return ga_a :=multiplex.tactics("select",fa_a,l,r);
end groupby;
	mil.line("var b:= new(int,int);");
	b := new(nil:int,nil:int);
	mil.line("b.insert(1,15);");
	ha_a := insert(b,1,15);
	mil.line("b.insert(2,4);");
	ia_a := insert(b,2,4);
	mil.line("b.insert(3,int(nil));");
	ja_a := int(nil);
	ka_a := insert(b,3,ja_a);
	mil.line("b.insert(4,16);");
	la_a := insert(b,4,16);
	mil.line("b.insert(5,25);");
	ma_a := insert(b,5,25);
	mil.line("b.insert(6,36);");
	na_a := insert(b,6,36);
	mil.line("b.insert(7,49);");
	oa_a := insert(b,7,49);
	mil.line("b.insert(8,64);");
	pa_a := insert(b,8,64);
	mil.line("b.insert(9,int(nil));");
	qa_a := int(nil);
	ra_a := insert(b,9,qa_a);
	mil.line("b.insert(int(nil),int(nil));");
	sa_a := int(nil);
	ta_a := int(nil);
	ua_a := insert(b,sa_a,ta_a);
	mil.line("b.insert(int(nil),81);");
	va_a := int(nil);
	wa_a := insert(b,va_a,81);
	mil.line("b.rename(\"b\");");
	xa_a := bat.setName(b,"b");
	mil.line("var rng:= new(int,int);");
	rng := new(nil:int,nil:int);
	mil.line("rng.insert(1,1);");
	ya_a := insert(rng,1,1);
	mil.line("rng.insert(1,9);");
	ab_a := insert(rng,1,9);
	mil.line("rng.insert(int(nil),9);");
	bb_a := int(nil);
	cb_a := insert(rng,bb_a,9);
	mil.line("rng.insert(1,int(nil));");
	db_a := int(nil);
	eb_a := insert(rng,1,db_a);
	mil.line("rng.insert(9,9);");
	fb_a := insert(rng,9,9);
	mil.line("rng.insert(3,5);");
	gb_a := insert(rng,3,5);
	mil.line("var bb := b.groupby(rng);");
	bb := groupby(b,rng);
	mil.line("bb.print();");
	hb_a := print(bb);
	mil.line("bb@batloop() { $t.print(); }");
barrier	(ib_a,ib_aH,ib_aT) := newIterator(bb);
	jb_a := print(ib_aT);
redo	(ib_a,ib_aH,ib_aT) := hasMoreElements(bb);
exit	(ib_a,ib_aH,ib_aT) ;
	mil.line("# other values;\n");
	x := new(nil:int,nil:chr);
	mil.line("x.insert(1,'a');");
	kb_a := insert(x,1,'a');
	mil.line("x.insert(2,'a');");
	lb_a := insert(x,2,'a');
	mil.line("x.insert(3,'b');");
	mb_a := insert(x,3,'b');
	mil.line("x.insert(4,'b');");
	nb_a := insert(x,4,'b');
	mil.line("x.insert(5,'b');");
	ob_a := insert(x,5,'b');
	mil.line("x.insert(6,'b');");
	pb_a := insert(x,6,'b');
	mil.line("x.insert(7,'c');");
	qb_a := insert(x,7,'c');
	mil.line("x.insert(8,'c');");
	rb_a := insert(x,8,'c');
	mil.line("var t := new(chr,chr);");
	t := new(nil:chr,nil:chr);
	mil.line("t.insert('a','b');");
	sb_a := insert(t,'a','b');
	mil.line("t.insert('c','c');");
	tb_a := insert(t,'c','c');
	mil.line("t.insert('b','b');");
	ub_a := insert(t,'b','b');
	mil.line("var xx:= x.groupby(t);");
	xx := groupby(x,t);
	mil.line("xx.print();");
	vb_a := print(xx);
	mil.line("xx@batloop() { $t.print(); }");
barrier	(wb_a,wb_aH,wb_aT) := newIterator(xx);
	xb_a := print(wb_aT);
redo	(wb_a,wb_aH,wb_aT) := hasMoreElements(xx);
exit	(wb_a,wb_aH,wb_aT) ;
	mil.line("# other values;\n");
	x := new(nil:int,nil:str);
	mil.line("x.insert(1,\"a\");");
	yb_a := insert(x,1,"a");
	mil.line("x.insert(2,\"a\");");
	ac_a := insert(x,2,"a");
	mil.line("x.insert(3,\"b\");");
	bc_a := insert(x,3,"b");
	mil.line("x.insert(4,\"b\");");
	cc_a := insert(x,4,"b");
	mil.line("x.insert(5,\"b\");");
	dc_a := insert(x,5,"b");
	mil.line("x.insert(6,\"b\");");
	ec_a := insert(x,6,"b");
	mil.line("x.insert(7,\"c\");");
	fc_a := insert(x,7,"c");
	mil.line("x.insert(8,\"c\");");
	gc_a := insert(x,8,"c");
	mil.line("t:= new(str,str);");
	t := new(nil:str,nil:str);
	mil.line("t.rename(\"t\");");
	hc_a := bat.setName(t,"t");
	mil.line("t.insert(\"a\",\"b\");");
	ic_a := insert(t,"a","b");
	mil.line("t.insert(\"c\",\"c\");");
	jc_a := insert(t,"c","c");
	mil.line("t.insert(\"b\",\"b\");");
	kc_a := insert(t,"b","b");
	mil.line("xx:= x.groupby(t);");
	xx := groupby(x,t);
	mil.line("xx.print();");
	lc_a := print(xx);
	mil.line("xx@batloop() { $t.print(); }");
barrier	(mc_a,mc_aH,mc_aT) := newIterator(xx);
	nc_a := print(mc_aT);
redo	(mc_a,mc_aH,mc_aT) := hasMoreElements(xx);
exit	(mc_a,mc_aH,mc_aT) ;
	mil.line("quit();");
	oc_a := quit();
#Identifer 'rename' mapped to 'bat.setName'
