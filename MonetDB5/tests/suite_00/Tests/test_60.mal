# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
function groupby(b:bat[:any,:any], rng:bat[:any,:any]):bat[:any,:any];
# VAR r := rng.reverse().number().reverse();
	ca_a := reverse(rng,);
	da_a := number(ca_a,);
	r := reverse(da_a,);
# VAR l := rng.number().reverse();
	ea_a := number(rng,);
	l := reverse(ea_a,);
# RETURN [select](l.project(b),l,r);
	fa_a := project(l,b);
	return ga_a :=multiplex.tactics("select",fa_a,l,r);
end groupby;
#var b:= new(int,int);
	b := new(:int,:int);
#b.insert(1,15);
	ha_a := insert(b,1,15);
#b.insert(2,4);
	ia_a := insert(b,2,4);
#b.insert(3,int(nil));
	nil:= mil.take("nil");
	ja_a := int(nil);
	ka_a := insert(b,3,ja_a);
#b.insert(4,16);
	la_a := insert(b,4,16);
#b.insert(5,25);
	ma_a := insert(b,5,25);
#b.insert(6,36);
	na_a := insert(b,6,36);
#b.insert(7,49);
	oa_a := insert(b,7,49);
#b.insert(8,64);
	pa_a := insert(b,8,64);
#b.insert(9,int(nil));
	qa_a := int(nil);
	ra_a := insert(b,9,qa_a);
#b.insert(int(nil),int(nil));
	sa_a := int(nil);
	ta_a := int(nil);
	ua_a := insert(b,sa_a,ta_a);
#b.insert(int(nil),81);
	va_a := int(nil);
	wa_a := insert(b,va_a,81);
#b.rename("b");
	xa_a := bat.setName(b,"b");
#var rng:= new(int,int);
	rng := new(:int,:int);
#rng.insert(1,1);
	ya_a := insert(rng,1,1);
#rng.insert(1,9);
	ab_a := insert(rng,1,9);
#rng.insert(int(nil),9);
	bb_a := int(nil);
	cb_a := insert(rng,bb_a,9);
#rng.insert(1,int(nil));
	db_a := int(nil);
	eb_a := insert(rng,1,db_a);
#rng.insert(9,9);
	fb_a := insert(rng,9,9);
#rng.insert(3,5);
	gb_a := insert(rng,3,5);
#var bb := b.groupby(rng);
	bb := groupby(b,rng);
#bb.print();
	hb_a := print(bb,);
#bb@batloop() { $t.print(); }
barrier	ib_a := bunStream(bb,ib_aH,ib_aT);
	jb_a := print(ib_aT,);
redo	ib_a;
exit	ib_a;
#var x:= new(int,chr);
	x := new(:int,:chr);
#x.insert(1,'a');
	kb_a := insert(x,1,'a');
#x.insert(2,'a');
	lb_a := insert(x,2,'a');
#x.insert(3,'b');
	mb_a := insert(x,3,'b');
#x.insert(4,'b');
	nb_a := insert(x,4,'b');
#x.insert(5,'b');
	ob_a := insert(x,5,'b');
#x.insert(6,'b');
	pb_a := insert(x,6,'b');
#x.insert(7,'c');
	qb_a := insert(x,7,'c');
#x.insert(8,'c');
	rb_a := insert(x,8,'c');
#var t := new(chr,chr);
	t := new(:chr,:chr);
#t.insert('a','b');
	sb_a := insert(t,'a','b');
#t.insert('c','c');
	tb_a := insert(t,'c','c');
#t.insert('b','b');
	ub_a := insert(t,'b','b');
#var xx:= x.groupby(t);
	xx := groupby(x,t);
#xx.print();
	vb_a := print(xx,);
#xx@batloop() { $t.print(); }
barrier	wb_a := bunStream(xx,wb_aH,wb_aT);
	xb_a := print(wb_aT,);
redo	wb_a;
exit	wb_a;
#x:= new(int,str);
	x := new(:int,:str);
#x.insert(1,"a");
	yb_a := insert(x,1,"a");
#x.insert(2,"a");
	ac_a := insert(x,2,"a");
#x.insert(3,"b");
	bc_a := insert(x,3,"b");
#x.insert(4,"b");
	cc_a := insert(x,4,"b");
#x.insert(5,"b");
	dc_a := insert(x,5,"b");
#x.insert(6,"b");
	ec_a := insert(x,6,"b");
#x.insert(7,"c");
	fc_a := insert(x,7,"c");
#x.insert(8,"c");
	gc_a := insert(x,8,"c");
#t:= new(str,str);
	t := new(:str,:str);
#t.rename("t");
	hc_a := bat.setName(t,"t");
#t.insert("a","b");
	ic_a := insert(t,"a","b");
#t.insert("c","c");
	jc_a := insert(t,"c","c");
#t.insert("b","b");
	kc_a := insert(t,"b","b");
#xx:= x.groupby(t);
	xx := groupby(x,t);
#xx.print();
	lc_a := print(xx,);
#xx@batloop() { $t.print(); }
barrier	mc_a := bunStream(xx,mc_aH,mc_aT);
	nc_a := print(mc_aT,);
redo	mc_a;
exit	mc_a;
#quit();
	oc_a := quit();
#Identifer 'rename' mapped to 'bat.setName'
