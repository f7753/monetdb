stdout of test 'test_80` in directory 'tests/suite_00` itself:

#> Mtest (20:57:34):	milS test_80 milS
#> Mtest (20:57:34):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_80.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_80.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("# Testing key and set constraints ;\n");
#	mil.line("var b:= new(int,int);");
#	b := new(nil:int,nil:int);
#	mil.line("b.key(true);");
#	ca_a := bat.setKey(b,true);
#	mil.line("insert(b,1,2);");
#	da_a := insert(b,1,2);
#	mil.line("insert(b,2,2);");
#	ea_a := insert(b,2,2);
#	mil.line("print(b);");
#	fa_a := print(b);
#	mil.line("insert(b,1,3);");
#	ga_a := insert(b,1,3);
#	mil.line("print(b);");
#	ha_a := print(b);
#	mil.line("insert(b,2,4);");
#	ia_a := insert(b,2,4);
#	mil.line("print(b);");
#	ja_a := print(b);
#	mil.line("var c:= new(int,int);");
#	c := new(nil:int,nil:int);
#	mil.line("set(c,true);");
#	ka_a := bat.setSet(c,true);
#	mil.line("insert(c,1,2);");
#	la_a := insert(c,1,2);
#	mil.line("insert(c,2,2);");
#	ma_a := insert(c,2,2);
#	mil.line("print(c);");
#	na_a := print(c);
#	mil.line("insert(c,1,2);");
#	oa_a := insert(c,1,2);
#	mil.line("print(c);");
#	pa_a := print(c);
#	mil.line("insert(c,2,2);");
#	qa_a := insert(c,2,2);
#	mil.line("print(c);");
#	ra_a := print(c);
#	mil.line("quit();");
#	sa_a := quit();
##Identifer 'key' mapped to 'bat.setKey'
##Identifer 'set' mapped to 'bat.setSet'
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# Testing key and set constraints ;\n");	# 4 MILline ($6:void)<-($7:str)
    b := bbp.new(nil:int,nil:int);	# 5 CMDBATnew (b:bat[:int,:int])<-($9:int)($9:int)
    mil.line("b.key(true);");	# 6 MILline ($10:void)<-($11:str)
    ca_a := bat.setKey(b,true);	# 7 BKCsetkey (ca_a:bat[:int,:int])<-(b:bat[:int,:int])($13:bit)
    mil.line("insert(b,1,2);");	# 8 MILline ($14:void)<-($15:str)
    da_a := bat.insert(b,1,2);	# 9 BKCinsert_bun (da_a:void)<-(b:bat[:int,:int])($17:int)($18:int)
    mil.line("insert(b,2,2);");	# 10 MILline ($19:void)<-($20:str)
    ea_a := bat.insert(b,2,2);	# 11 BKCinsert_bun (ea_a:void)<-(b:bat[:int,:int])($18:int)($18:int)
    mil.line("print(b);");	# 12 MILline ($22:void)<-($23:str)
    fa_a := io.print(b);	# 13 IOprint_val (fa_a:int)<-(b:bat[:int,:int])
    mil.line("insert(b,1,3);");	# 14 MILline ($25:void)<-($26:str)
    ga_a := bat.insert(b,1,3);	# 15 BKCinsert_bun (ga_a:void)<-(b:bat[:int,:int])($17:int)($28:int)
    mil.line("print(b);");	# 16 MILline ($29:void)<-($23:str)
    ha_a := io.print(b);	# 17 IOprint_val (ha_a:int)<-(b:bat[:int,:int])
    mil.line("insert(b,2,4);");	# 18 MILline ($31:void)<-($32:str)
    ia_a := bat.insert(b,2,4);	# 19 BKCinsert_bun (ia_a:void)<-(b:bat[:int,:int])($18:int)($34:int)
    mil.line("print(b);");	# 20 MILline ($35:void)<-($23:str)
    ja_a := io.print(b);	# 21 IOprint_val (ja_a:int)<-(b:bat[:int,:int])
    mil.line("var c:= new(int,int);");	# 22 MILline ($37:void)<-($38:str)
    c := bbp.new(nil:int,nil:int);	# 23 CMDBATnew (c:bat[:int,:int])<-($9:int)($9:int)
    mil.line("set(c,true);");	# 24 MILline ($40:void)<-($41:str)
    ka_a := bat.setSet(c,true);	# 25 BKCsetSet (ka_a:bat[:int,:int])<-(c:bat[:int,:int])($13:bit)
    mil.line("insert(c,1,2);");	# 26 MILline ($43:void)<-($44:str)
    la_a := bat.insert(c,1,2);	# 27 BKCinsert_bun (la_a:void)<-(c:bat[:int,:int])($17:int)($18:int)
    mil.line("insert(c,2,2);");	# 28 MILline ($46:void)<-($47:str)
    ma_a := bat.insert(c,2,2);	# 29 BKCinsert_bun (ma_a:void)<-(c:bat[:int,:int])($18:int)($18:int)
    mil.line("print(c);");	# 30 MILline ($49:void)<-($50:str)
    na_a := io.print(c);	# 31 IOprint_val (na_a:int)<-(c:bat[:int,:int])
    mil.line("insert(c,1,2);");	# 32 MILline ($52:void)<-($44:str)
    oa_a := bat.insert(c,1,2);	# 33 BKCinsert_bun (oa_a:void)<-(c:bat[:int,:int])($54:int)($55:int)
    mil.line("print(c);");	# 34 MILline ($56:void)<-($50:str)
    pa_a := io.print(c);	# 35 IOprint_val (pa_a:int)<-(c:bat[:int,:int])
    mil.line("insert(c,2,2);");	# 36 MILline ($58:void)<-($47:str)
    qa_a := bat.insert(c,2,2);	# 37 BKCinsert_bun (qa_a:void)<-(c:bat[:int,:int])($55:int)($55:int)
    mil.line("print(c);");	# 38 MILline ($60:void)<-($50:str)
    ra_a := io.print(c);	# 39 IOprint_val (ra_a:int)<-(c:bat[:int,:int])
    mil.line("quit();");	# 40 MILline ($62:void)<-($63:str)
    sa_a := clients.quit();	# 41 CLTquit (sa_a:void)
end main;	# 42  
#setoid(oid(20000000));
## Testing key and set constraints ;
#var b:= new(int,int);
#b.key(true);
#insert(b,1,2);
#insert(b,2,2);
#print(b);
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
[ 2,	  2	  ]
#insert(b,1,3);
#print(b);
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  3	  ]
[ 2,	  2	  ]
#insert(b,2,4);
#print(b);
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  3	  ]
[ 2,	  4	  ]
#var c:= new(int,int);
#set(c,true);
#insert(c,1,2);
#insert(c,2,2);
#print(c);
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
[ 2,	  2	  ]
#insert(c,1,2);
#print(c);
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
[ 2,	  2	  ]
#insert(c,2,2);
#print(c);
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
[ 2,	  2	  ]
#quit();

# 17:08:53 >  
# 17:08:53 >  Done.
# 17:08:53 >  

