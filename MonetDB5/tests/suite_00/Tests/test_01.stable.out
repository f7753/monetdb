stdout of test 'test_01` in directory 'tests/suite_00` itself:


# 10:49:18 >  
# 10:49:18 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=44706 --set sql_port=51874 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_01.mal </dev/null
# 10:49:18 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
## Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("#test basic functionality of the BAT library.\n");
#	mil.line("#focussed on strings\n");
#	mil.line("#it includes insertions,deletions,selections, and joins.\n");
#	mil.line("var b:= new(str,int);");
#	b := new(:str,:int);
#	mil.line("b.insert(\"the\",1);");
#	ca_a := insert(b,"the",1);
#	mil.line("b.insert(\"quick\",2);");
#	da_a := insert(b,"quick",2);
#	mil.line("b.insert(\"brown\",3);");
#	ea_a := insert(b,"brown",3);
#	mil.line("b.insert(\"fox\",4);");
#	fa_a := insert(b,"fox",4);
#	mil.line("b.insert(\"jumps\",5);");
#	ga_a := insert(b,"jumps",5);
#	mil.line("b.insert(\"over\",6);");
#	ha_a := insert(b,"over",6);
#	mil.line("b.insert(\"lazy\",7);");
#	ia_a := insert(b,"lazy",7);
#	mil.line("b.insert(\"dog\",8);");
#	ja_a := insert(b,"dog",8);
#	mil.line("b.insert(str(nil),9);");
#	ka_a := str(nil);
#	la_a := insert(b,ka_a,9);
#	mil.line("b.insert(\".\",10);");
#	ma_a := insert(b,".",10);
#	mil.line("b.insert(\"\",int(nil));");
#	na_a := int(nil);
#	oa_a := insert(b,"",na_a);
#	mil.line("b.insert(str(nil),int(nil));");
#	pa_a := str(nil);
#	qa_a := int(nil);
#	ra_a := insert(b,pa_a,qa_a);
#	mil.line("b.print();");
#	sa_a := print(b);
#	mil.line("# Testing simple retrievals\n");
#	mil.line("b.find(\"the\").print();");
#	ta_a := find(b,"the");
#	ua_a := print(ta_a);
#	mil.line("b.find(\"fox\").print();");
#	va_a := find(b,"fox");
#	wa_a := print(va_a);
#	mil.line("b.find(str(nil)).print();");
#	xa_a := str(nil);
#	ya_a := find(b,xa_a);
#	ab_a := print(ya_a);
#	mil.line("# This should cause an error\n");
#	mil.line("b.find(\"cat\").print();");
##ignore	bb_a := find(b,"cat");
##ignore	cb_a := print(bb_a);
#	mil.line("# Can we delete them and re-insert them later on\n");
#	mil.line("b.delete(\"fox\",4);");
#	db_a := delete(b,"fox",4);
#	mil.line("b.delete(\"the\",1);");
#	eb_a := delete(b,"the",1);
#	mil.line("b.delete(\".\",10);");
#	fb_a := delete(b,".",10);
#	mil.line("b.print();");
#	gb_a := print(b);
#	mil.line("b.insert(\"fox\",4);");
#	hb_a := insert(b,"fox",4);
#	mil.line("b.insert(\"the\",1);");
#	ib_a := insert(b,"the",1);
#	mil.line("b.insert(\".\",10);");
#	jb_a := insert(b,".",10);
#	mil.line("b.count().print();");
#	kb_a := count(b);
#	lb_a := print(kb_a);
#	mil.line("# Lets cut out a few sections\n");
#	mil.line("b.select(2,4).print();");
#	mb_a := select(b,2,4);
#	nb_a := print(mb_a);
#	mil.line("b.select(7,int(nil)).print();");
#	ob_a := int(nil);
#	pb_a := select(b,7,ob_a);
#	qb_a := print(pb_a);
#	mil.line("b.select(int(nil),7).print();");
#	rb_a := int(nil);
#	sb_a := select(b,rb_a,7);
#	tb_a := print(sb_a);
#	mil.line("b.select(int(nil),int(nil)).print();");
#	ub_a := int(nil);
#	vb_a := int(nil);
#	wb_a := select(b,ub_a,vb_a);
#	xb_a := print(wb_a);
#	mil.line("b.reverse().select(\"fox\",\"quick\").print();");
#	yb_a := reverse(b);
#	ac_a := select(yb_a,"fox","quick");
#	bc_a := print(ac_a);
#	mil.line("b.reverse().select(\"fox\",str(nil)).print();");
#	cc_a := str(nil);
#	dc_a := reverse(b);
#	ec_a := select(dc_a,"fox",cc_a);
#	fc_a := print(ec_a);
#	mil.line("b.reverse().select(str(nil),\"quick\").print();");
#	gc_a := str(nil);
#	hc_a := reverse(b);
#	ic_a := select(hc_a,gc_a,"quick");
#	jc_a := print(ic_a);
#	mil.line("b.reverse().select(str(nil),str(nil)).print();");
#	kc_a := str(nil);
#	lc_a := str(nil);
#	mc_a := reverse(b);
#	nc_a := select(mc_a,kc_a,lc_a);
#	oc_a := print(nc_a);
#	mil.line("# A 2-dimensional cut\n");
#	mil.line("var bn:=b.fragment(\"fox\",\"quick\",1,5);bn.print();");
#	bn := fragment(b,"fox","quick",1,5);
#	pc_a := print(bn);
#	mil.line("b.fragment(\"fox\",str(nil),1,5).print();");
#	qc_a := str(nil);
#	rc_a := fragment(b,"fox",qc_a,1,5);
#	sc_a := print(rc_a);
#	mil.line("b.fragment(str(nil),\"quick\",1,5).print();");
#	tc_a := str(nil);
#	uc_a := fragment(b,tc_a,"quick",1,5);
#	vc_a := print(uc_a);
#	mil.line("b.fragment(str(nil),str(nil),1,5).print();");
#	wc_a := str(nil);
#	xc_a := str(nil);
#	yc_a := fragment(b,wc_a,xc_a,1,5);
#	ad_a := print(yc_a);
#	mil.line("b.fragment(\"fox\",\"quick\",1,int(nil)).print();");
#	bd_a := int(nil);
#	cd_a := fragment(b,"fox","quick",1,bd_a);
#	dd_a := print(cd_a);
#	mil.line("b.fragment(\"fox\",\"quick\",int(nil),5).print();");
#	ed_a := int(nil);
#	fd_a := fragment(b,"fox","quick",ed_a,5);
#	gd_a := print(fd_a);
#	mil.line("b.fragment(\"fox\",\"quick\",int(nil),int(nil)).print();");
#	hd_a := int(nil);
#	id_a := int(nil);
#	jd_a := fragment(b,"fox","quick",hd_a,id_a);
#	kd_a := print(jd_a);
#	mil.line("b.fragment(\"fox\",str(nil),int(nil),int(nil)).print();");
#	ld_a := str(nil);
#	md_a := int(nil);
#	nd_a := int(nil);
#	od_a := fragment(b,"fox",ld_a,md_a,nd_a);
#	pd_a := print(od_a);
#	mil.line("b.fragment(str(nil),\"f\",int(nil),int(nil)).print();");
#	qd_a := str(nil);
#	rd_a := int(nil);
#	sd_a := int(nil);
#	td_a := fragment(b,qd_a,"f",rd_a,sd_a);
#	ud_a := print(td_a);
#	mil.line("b.reverse().fragment(int(nil),int(nil),str(nil),\"f\").print();");
#	vd_a := int(nil);
#	wd_a := int(nil);
#	xd_a := str(nil);
#	yd_a := reverse(b);
#	ae_a := fragment(yd_a,vd_a,wd_a,xd_a,"f");
#	be_a := print(ae_a);
#	mil.line("var b1:= b.join(bn.reverse());");
#	ce_a := reverse(bn);
#	b1 := join(b,ce_a);
#	mil.line("b1.print();");
#	de_a := print(b1);
#	mil.line("var b2:= b.semijoin(b1.reverse());");
#	ee_a := reverse(b1);
#	b2 := semijoin(b,ee_a);
#	mil.line("b2.print();");
#	fe_a := print(b2);
#	mil.line("# testing the like command\n");
#	mil.line("b.reverse().like(\"ox\").print();");
#	ge_a := reverse(b);
#	he_a := like(ge_a,"ox");
#	ie_a := print(he_a);
#	mil.line("b.reverse().like(\"fo\").print();");
#	je_a := reverse(b);
#	ke_a := like(je_a,"fo");
#	le_a := print(ke_a);
#	mil.line("b.reverse().like(\"fox\").print();");
#	me_a := reverse(b);
#	ne_a := like(me_a,"fox");
#	oe_a := print(ne_a);
#	mil.line("b.reverse().like(\" fox\").print();");
#	pe_a := reverse(b);
#	qe_a := like(pe_a," fox");
#	re_a := print(qe_a);
#	mil.line("quit();");
#	se_a := quit();
#
function user.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($31:void)<-($32:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($34:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#test basic functionality of the BAT library.\n");	# 4 MILline ($36:void)<-($37:str)
    mil.line("#focussed on strings\n");	# 5 MILline ($38:void)<-($39:str)
    mil.line("#it includes bat.insertions,deletions,selections, and joins.\n");	# 6 MILline ($40:void)<-($41:str)
    mil.line("var b:= bbp.new(str,int);");	# 7 MILline ($42:void)<-($43:str)
    b := bbp.new("nil:str",nil:int);	# 8 CMDBATnew (b:bat[:str,:int])<-($45:str)($46:int)
    mil.line("b.insert(\"the\",1);");	# 9 MILline ($47:void)<-($48:str)
    ca_a := bat.insert(b,"the",1);	# 10 BKCinsert_bun (ca_a:bat[:str,:int])<-(b:bat[:str,:int])($50:str)($51:int)
    mil.line("b.insert(\"quick\",2);");	# 11 MILline ($52:void)<-($53:str)
    da_a := bat.insert(b,"quick",2);	# 12 BKCinsert_bun (da_a:bat[:str,:int])<-(b:bat[:str,:int])($55:str)($56:int)
    mil.line("b.insert(\"brown\",3);");	# 13 MILline ($57:void)<-($58:str)
    ea_a := bat.insert(b,"brown",3);	# 14 BKCinsert_bun (ea_a:bat[:str,:int])<-(b:bat[:str,:int])($60:str)($61:int)
    mil.line("b.insert(\"fox\",4);");	# 15 MILline ($62:void)<-($63:str)
    fa_a := bat.insert(b,"fox",4);	# 16 BKCinsert_bun (fa_a:bat[:str,:int])<-(b:bat[:str,:int])($65:str)($66:int)
    mil.line("b.insert(\"jumps\",5);");	# 17 MILline ($67:void)<-($68:str)
    ga_a := bat.insert(b,"jumps",5);	# 18 BKCinsert_bun (ga_a:bat[:str,:int])<-(b:bat[:str,:int])($70:str)($71:int)
    mil.line("b.insert(\"over\",6);");	# 19 MILline ($72:void)<-($73:str)
    ha_a := bat.insert(b,"over",6);	# 20 BKCinsert_bun (ha_a:bat[:str,:int])<-(b:bat[:str,:int])($75:str)($76:int)
    mil.line("b.insert(\"lazy\",7);");	# 21 MILline ($77:void)<-($78:str)
    ia_a := bat.insert(b,"lazy",7);	# 22 BKCinsert_bun (ia_a:bat[:str,:int])<-(b:bat[:str,:int])($80:str)($81:int)
    mil.line("b.insert(\"dog\",8);");	# 23 MILline ($82:void)<-($83:str)
    ja_a := bat.insert(b,"dog",8);	# 24 BKCinsert_bun (ja_a:bat[:str,:int])<-(b:bat[:str,:int])($85:str)($86:int)
    mil.line("b.insert(str(nil),9);");	# 25 MILline ($87:void)<-($88:str)
    ka_a := calc.str(nil);	# 26 CALCnil2str (ka_a:str)<-($90:void)
    la_a := bat.insert(b,ka_a,9);	# 27 BKCinsert_bun (la_a:bat[:str,:int])<-(b:bat[:str,:int])(ka_a:str)($92:int)
    mil.line("b.insert(\".\",10);");	# 28 MILline ($93:void)<-($94:str)
    ma_a := bat.insert(b,".",10);	# 29 BKCinsert_bun (ma_a:bat[:str,:int])<-(b:bat[:str,:int])($96:str)($97:int)
    mil.line("b.insert(\"\",int(nil));");	# 30 MILline ($98:void)<-($99:str)
    na_a := calc.int(nil);	# 31 CALCnil2int (na_a:int)<-($90:void)
    oa_a := bat.insert(b,"",na_a);	# 32 BKCinsert_bun (oa_a:bat[:str,:int])<-(b:bat[:str,:int])($102:str)(na_a:int)
    mil.line("b.insert(str(nil),int(nil));");	# 33 MILline ($103:void)<-($104:str)
    pa_a := calc.str(nil);	# 34 CALCnil2str (pa_a:str)<-($90:void)
    qa_a := calc.int(nil);	# 35 CALCnil2int (qa_a:int)<-($90:void)
    ra_a := bat.insert(b,pa_a,qa_a);	# 36 BKCinsert_bun (ra_a:bat[:str,:int])<-(b:bat[:str,:int])(pa_a:str)(qa_a:int)
    mil.line("b.print();");	# 37 MILline ($108:void)<-($109:str)
    sa_a := io.print(b);	# 38 IOprint_val (sa_a:int)<-(b:bat[:str,:int])
    mil.line("# Testing simple retrievals\n");	# 39 MILline ($111:void)<-($112:str)
    ta_a := algebra.find(b,"the");	# 40 ALGfind (ta_a:int)<-(b:bat[:str,:int])($114:str)
    ua_a := io.print(ta_a);	# 41 IOprint_val (ua_a:int)<-(ta_a:int)
    mil.line("b.find(\"fox\").print();");	# 42 MILline ($116:void)<-($117:str)
    va_a := algebra.find(b,"fox");	# 43 ALGfind (va_a:int)<-(b:bat[:str,:int])($119:str)
    wa_a := io.print(va_a);	# 44 IOprint_val (wa_a:int)<-(va_a:int)
    mil.line("b.find(str(nil)).print();");	# 45 MILline ($121:void)<-($122:str)
    xa_a := calc.str(nil);	# 46 CALCnil2str (xa_a:str)<-($124:void)
    ya_a := algebra.find(b,xa_a);	# 47 ALGfind (ya_a:int)<-(b:bat[:str,:int])(xa_a:str)
    ab_a := io.print(ya_a);	# 48 IOprint_val (ab_a:int)<-(ya_a:int)
    mil.line("# This should cause an error\n");	# 49 MILline ($127:void)<-($128:str)
    mil.line("# Can we delete them and re-insert them later on\n");	# 50 MILline ($129:void)<-($130:str)
    db_a := bat.delete(b,"fox",4);	# 51 BKCdelete_bun (db_a:bat[:str,:int])<-(b:bat[:str,:int])($119:str)($132:int)
    mil.line("b.delete(\"the\",1);");	# 52 MILline ($133:void)<-($134:str)
    eb_a := bat.delete(b,"the",1);	# 53 BKCdelete_bun (eb_a:bat[:str,:int])<-(b:bat[:str,:int])($114:str)($136:int)
    mil.line("b.delete(\".\",10);");	# 54 MILline ($137:void)<-($138:str)
    fb_a := bat.delete(b,".",10);	# 55 BKCdelete_bun (fb_a:bat[:str,:int])<-(b:bat[:str,:int])($140:str)($141:int)
    mil.line("b.print();");	# 56 MILline ($142:void)<-($143:str)
    gb_a := io.print(b);	# 57 IOprint_val (gb_a:int)<-(b:bat[:str,:int])
    mil.line("b.insert(\"fox\",4);");	# 58 MILline ($145:void)<-($146:str)
    hb_a := bat.insert(b,"fox",4);	# 59 BKCinsert_bun (hb_a:bat[:str,:int])<-(b:bat[:str,:int])($119:str)($132:int)
    mil.line("b.insert(\"the\",1);");	# 60 MILline ($148:void)<-($149:str)
    ib_a := bat.insert(b,"the",1);	# 61 BKCinsert_bun (ib_a:bat[:str,:int])<-(b:bat[:str,:int])($151:str)($136:int)
    mil.line("b.insert(\".\",10);");	# 62 MILline ($152:void)<-($153:str)
    jb_a := bat.insert(b,".",10);	# 63 BKCinsert_bun (jb_a:bat[:str,:int])<-(b:bat[:str,:int])($140:str)($141:int)
    mil.line("b.count().print();");	# 64 MILline ($155:void)<-($156:str)
    kb_a := algebra.count(b);	# 65 ALGcount_bat (kb_a:lng)<-(b:bat[:str,:int])
    lb_a := io.print(kb_a);	# 66 IOprint_val (lb_a:int)<-(kb_a:lng)
    mil.line("# Lets cut out a few sections\n");	# 67 MILline ($159:void)<-($160:str)
    mb_a := algebra.select(b,2,4);	# 68 ALGselect (mb_a:bat[:str,:int])<-(b:bat[:str,:int])($162:int)($132:int)
    nb_a := io.print(mb_a);	# 69 IOprint_val (nb_a:int)<-(mb_a:bat[:str,:int])
    mil.line("b.select(7,int(nil)).print();");	# 70 MILline ($164:void)<-($165:str)
    ob_a := calc.int(nil);	# 71 CALCnil2int (ob_a:int)<-($167:void)
    pb_a := algebra.select(b,7,ob_a);	# 72 ALGselect (pb_a:bat[:str,:int])<-(b:bat[:str,:int])($169:int)(ob_a:int)
    qb_a := io.print(pb_a);	# 73 IOprint_val (qb_a:int)<-(pb_a:bat[:str,:int])
    mil.line("b.select(int(nil),7).print();");	# 74 MILline ($171:void)<-($172:str)
    rb_a := calc.int(nil);	# 75 CALCnil2int (rb_a:int)<-($167:void)
    sb_a := algebra.select(b,rb_a,7);	# 76 ALGselect (sb_a:bat[:str,:int])<-(b:bat[:str,:int])(rb_a:int)($169:int)
    tb_a := io.print(sb_a);	# 77 IOprint_val (tb_a:int)<-(sb_a:bat[:str,:int])
    mil.line("b.select(int(nil),int(nil)).print();");	# 78 MILline ($176:void)<-($177:str)
    ub_a := calc.int(nil);	# 79 CALCnil2int (ub_a:int)<-($167:void)
    vb_a := calc.int(nil);	# 80 CALCnil2int (vb_a:int)<-($167:void)
    wb_a := algebra.select(b,ub_a,vb_a);	# 81 ALGselect (wb_a:bat[:str,:int])<-(b:bat[:str,:int])(ub_a:int)(vb_a:int)
    xb_a := io.print(wb_a);	# 82 IOprint_val (xb_a:int)<-(wb_a:bat[:str,:int])
    mil.line("b.reverse().select(\"fox\",\"quick\").print();");	# 83 MILline ($182:void)<-($183:str)
    yb_a := bat.reverse(b);	# 84 BKCreverse (yb_a:bat[:int,:str])<-(b:bat[:str,:int])
    ac_a := algebra.select(yb_a,"fox","quick");	# 85 ALGselect (ac_a:bat[:int,:str])<-(yb_a:bat[:int,:str])($186:str)($187:str)
    bc_a := io.print(ac_a);	# 86 IOprint_val (bc_a:int)<-(ac_a:bat[:int,:str])
    mil.line("b.reverse().select(\"fox\",str(nil)).print();");	# 87 MILline ($189:void)<-($190:str)
    cc_a := calc.str(nil);	# 88 CALCnil2str (cc_a:str)<-($167:void)
    dc_a := bat.reverse(b);	# 89 BKCreverse (dc_a:bat[:int,:str])<-(b:bat[:str,:int])
    ec_a := algebra.select(dc_a,"fox",cc_a);	# 90 ALGselect (ec_a:bat[:int,:str])<-(dc_a:bat[:int,:str])($186:str)(cc_a:str)
    fc_a := io.print(ec_a);	# 91 IOprint_val (fc_a:int)<-(ec_a:bat[:int,:str])
    mil.line("b.reverse().select(str(nil),\"quick\").print();");	# 92 MILline ($195:void)<-($196:str)
    gc_a := calc.str(nil);	# 93 CALCnil2str (gc_a:str)<-($167:void)
    hc_a := bat.reverse(b);	# 94 BKCreverse (hc_a:bat[:int,:str])<-(b:bat[:str,:int])
    ic_a := algebra.select(hc_a,gc_a,"quick");	# 95 ALGselect (ic_a:bat[:int,:str])<-(hc_a:bat[:int,:str])(gc_a:str)($187:str)
    jc_a := io.print(ic_a);	# 96 IOprint_val (jc_a:int)<-(ic_a:bat[:int,:str])
    mil.line("b.reverse().select(str(nil),str(nil)).print();");	# 97 MILline ($201:void)<-($202:str)
    kc_a := calc.str(nil);	# 98 CALCnil2str (kc_a:str)<-($204:void)
    lc_a := calc.str(nil);	# 99 CALCnil2str (lc_a:str)<-($204:void)
    mc_a := bat.reverse(b);	# 100 BKCreverse (mc_a:bat[:int,:str])<-(b:bat[:str,:int])
    nc_a := algebra.select(mc_a,kc_a,lc_a);	# 101 ALGselect (nc_a:bat[:int,:str])<-(mc_a:bat[:int,:str])(kc_a:str)(lc_a:str)
    oc_a := io.print(nc_a);	# 102 IOprint_val (oc_a:int)<-(nc_a:bat[:int,:str])
    mil.line("# A 2-dimensional cut\n");	# 103 MILline ($209:void)<-($210:str)
    bn := algebra.fragment(b,"fox","quick",1,5);	# 104 ALGfragment (bn:bat[:str,:int])<-(b:bat[:str,:int])($186:str)($187:str)($212:int)($213:int)
    pc_a := io.print(bn);	# 105 IOprint_val (pc_a:int)<-(bn:bat[:str,:int])
    mil.line("b.fragment(\"fox\",str(nil),1,5).print();");	# 106 MILline ($215:void)<-($216:str)
    qc_a := calc.str(nil);	# 107 CALCnil2str (qc_a:str)<-($204:void)
    rc_a := algebra.fragment(b,"fox",qc_a,1,5);	# 108 ALGfragment (rc_a:bat[:str,:int])<-(b:bat[:str,:int])($219:str)(qc_a:str)($212:int)($213:int)
    sc_a := io.print(rc_a);	# 109 IOprint_val (sc_a:int)<-(rc_a:bat[:str,:int])
    mil.line("b.fragment(str(nil),\"quick\",1,5).print();");	# 110 MILline ($221:void)<-($222:str)
    tc_a := calc.str(nil);	# 111 CALCnil2str (tc_a:str)<-($204:void)
    uc_a := algebra.fragment(b,tc_a,"quick",1,5);	# 112 ALGfragment (uc_a:bat[:str,:int])<-(b:bat[:str,:int])(tc_a:str)($225:str)($212:int)($213:int)
    vc_a := io.print(uc_a);	# 113 IOprint_val (vc_a:int)<-(uc_a:bat[:str,:int])
    mil.line("b.fragment(str(nil),str(nil),1,5).print();");	# 114 MILline ($227:void)<-($228:str)
    wc_a := calc.str(nil);	# 115 CALCnil2str (wc_a:str)<-($204:void)
    xc_a := calc.str(nil);	# 116 CALCnil2str (xc_a:str)<-($204:void)
    yc_a := algebra.fragment(b,wc_a,xc_a,1,5);	# 117 ALGfragment (yc_a:bat[:str,:int])<-(b:bat[:str,:int])(wc_a:str)(xc_a:str)($212:int)($213:int)
    ad_a := io.print(yc_a);	# 118 IOprint_val (ad_a:int)<-(yc_a:bat[:str,:int])
    mil.line("b.fragment(\"fox\",\"quick\",1,int(nil)).print();");	# 119 MILline ($233:void)<-($234:str)
    bd_a := calc.int(nil);	# 120 CALCnil2int (bd_a:int)<-($204:void)
    cd_a := algebra.fragment(b,"fox","quick",1,bd_a);	# 121 ALGfragment (cd_a:bat[:str,:int])<-(b:bat[:str,:int])($219:str)($225:str)($212:int)(bd_a:int)
    dd_a := io.print(cd_a);	# 122 IOprint_val (dd_a:int)<-(cd_a:bat[:str,:int])
    mil.line("b.fragment(\"fox\",\"quick\",int(nil),5).print();");	# 123 MILline ($238:void)<-($239:str)
    ed_a := calc.int(nil);	# 124 CALCnil2int (ed_a:int)<-($241:void)
    fd_a := algebra.fragment(b,"fox","quick",ed_a,5);	# 125 ALGfragment (fd_a:bat[:str,:int])<-(b:bat[:str,:int])($219:str)($225:str)(ed_a:int)($213:int)
    gd_a := io.print(fd_a);	# 126 IOprint_val (gd_a:int)<-(fd_a:bat[:str,:int])
    mil.line("b.fragment(\"fox\",\"quick\",int(nil),int(nil)).print();");	# 127 MILline ($244:void)<-($245:str)
    hd_a := calc.int(nil);	# 128 CALCnil2int (hd_a:int)<-($241:void)
    id_a := calc.int(nil);	# 129 CALCnil2int (id_a:int)<-($241:void)
    jd_a := algebra.fragment(b,"fox","quick",hd_a,id_a);	# 130 ALGfragment (jd_a:bat[:str,:int])<-(b:bat[:str,:int])($219:str)($225:str)(hd_a:int)(id_a:int)
    kd_a := io.print(jd_a);	# 131 IOprint_val (kd_a:int)<-(jd_a:bat[:str,:int])
    mil.line("b.fragment(\"fox\",str(nil),int(nil),int(nil)).print();");	# 132 MILline ($250:void)<-($251:str)
    ld_a := calc.str(nil);	# 133 CALCnil2str (ld_a:str)<-($241:void)
    md_a := calc.int(nil);	# 134 CALCnil2int (md_a:int)<-($241:void)
    nd_a := calc.int(nil);	# 135 CALCnil2int (nd_a:int)<-($241:void)
    od_a := algebra.fragment(b,"fox",ld_a,md_a,nd_a);	# 136 ALGfragment (od_a:bat[:str,:int])<-(b:bat[:str,:int])($256:str)(ld_a:str)(md_a:int)(nd_a:int)
    pd_a := io.print(od_a);	# 137 IOprint_val (pd_a:int)<-(od_a:bat[:str,:int])
    mil.line("b.fragment(str(nil),\"f\",int(nil),int(nil)).print();");	# 138 MILline ($258:void)<-($259:str)
    qd_a := calc.str(nil);	# 139 CALCnil2str (qd_a:str)<-($241:void)
    rd_a := calc.int(nil);	# 140 CALCnil2int (rd_a:int)<-($241:void)
    sd_a := calc.int(nil);	# 141 CALCnil2int (sd_a:int)<-($241:void)
    td_a := algebra.fragment(b,qd_a,"f",rd_a,sd_a);	# 142 ALGfragment (td_a:bat[:str,:int])<-(b:bat[:str,:int])(qd_a:str)($264:str)(rd_a:int)(sd_a:int)
    ud_a := io.print(td_a);	# 143 IOprint_val (ud_a:int)<-(td_a:bat[:str,:int])
    mil.line("b.reverse().fragment(int(nil),int(nil),str(nil),\"f\").print();");	# 144 MILline ($266:void)<-($267:str)
    vd_a := calc.int(nil);	# 145 CALCnil2int (vd_a:int)<-($241:void)
    wd_a := calc.int(nil);	# 146 CALCnil2int (wd_a:int)<-($241:void)
    xd_a := calc.str(nil);	# 147 CALCnil2str (xd_a:str)<-($241:void)
    yd_a := bat.reverse(b);	# 148 BKCreverse (yd_a:bat[:int,:str])<-(b:bat[:str,:int])
    ae_a := algebra.fragment(yd_a,vd_a,wd_a,xd_a,"f");	# 149 ALGfragment (ae_a:bat[:int,:str])<-(yd_a:bat[:int,:str])(vd_a:int)(wd_a:int)(xd_a:str)($264:str)
    be_a := io.print(ae_a);	# 150 IOprint_val (be_a:int)<-(ae_a:bat[:int,:str])
    mil.line("var b1:= b.join(bn.reverse());");	# 151 MILline ($274:void)<-($275:str)
    ce_a := bat.reverse(bn);	# 152 BKCreverse (ce_a:bat[:int,:str])<-(bn:bat[:str,:int])
    b1 := algebra.join(b,ce_a);	# 153 ALGjoin (b1:bat[:str,:str])<-(b:bat[:str,:int])(ce_a:bat[:int,:str])
    mil.line("b1.print();");	# 154 MILline ($278:void)<-($279:str)
    de_a := io.print(b1);	# 155 IOprint_val (de_a:int)<-(b1:bat[:str,:str])
    mil.line("var b2:= b.semijoin(b1.reverse());");	# 156 MILline ($281:void)<-($282:str)
    ee_a := bat.reverse(b1);	# 157 BKCreverse (ee_a:bat[:str,:str])<-(b1:bat[:str,:str])
    b2 := algebra.semijoin(b,ee_a);	# 158 ALGsemijoin (b2:bat[:str,:int])<-(b:bat[:str,:int])(ee_a:bat[:str,:str])
    mil.line("b2.print();");	# 159 MILline ($285:void)<-($286:str)
    fe_a := io.print(b2);	# 160 IOprint_val (fe_a:int)<-(b2:bat[:str,:int])
    mil.line("# testing the like command\n");	# 161 MILline ($288:void)<-($289:str)
    ge_a := bat.reverse(b);	# 162 BKCreverse (ge_a:bat[:int,:str])<-(b:bat[:str,:int])
    he_a := algebra.like(ge_a,"ox");	# 163 ALGlike (he_a:bat[:int,:str])<-(ge_a:bat[:int,:str])($292:str)
    ie_a := io.print(he_a);	# 164 IOprint_val (ie_a:int)<-(he_a:bat[:int,:str])
    mil.line("b.reverse().like(\"fo\").print();");	# 165 MILline ($294:void)<-($295:str)
    je_a := bat.reverse(b);	# 166 BKCreverse (je_a:bat[:int,:str])<-(b:bat[:str,:int])
    ke_a := algebra.like(je_a,"fo");	# 167 ALGlike (ke_a:bat[:int,:str])<-(je_a:bat[:int,:str])($298:str)
    le_a := io.print(ke_a);	# 168 IOprint_val (le_a:int)<-(ke_a:bat[:int,:str])
    mil.line("b.reverse().like(\"fox\").print();");	# 169 MILline ($300:void)<-($301:str)
    me_a := bat.reverse(b);	# 170 BKCreverse (me_a:bat[:int,:str])<-(b:bat[:str,:int])
    ne_a := algebra.like(me_a,"fox");	# 171 ALGlike (ne_a:bat[:int,:str])<-(me_a:bat[:int,:str])($304:str)
    oe_a := io.print(ne_a);	# 172 IOprint_val (oe_a:int)<-(ne_a:bat[:int,:str])
    mil.line("b.reverse().like(\" fox\").print();");	# 173 MILline ($306:void)<-($307:str)
    pe_a := bat.reverse(b);	# 174 BKCreverse (pe_a:bat[:int,:str])<-(b:bat[:str,:int])
    qe_a := algebra.like(pe_a," fox");	# 175 ALGlike (qe_a:bat[:int,:str])<-(pe_a:bat[:int,:str])($310:str)
    re_a := io.print(qe_a);	# 176 IOprint_val (re_a:int)<-(qe_a:bat[:int,:str])
    mil.line("quit();");	# 177 MILline ($312:void)<-($313:str)
    se_a := clients.quit();	# 178 CLTquit (se_a:void)
end main;	# 179  
#setoid(oid(20000000));
##test basic functionality of the BAT library.
##focussed on strings
##it includes insertions,deletions,selections, and joins.
#var b:= new(str,int);
#b.insert("the",1);
#b.insert("quick",2);
#b.insert("brown",3);
#b.insert("fox",4);
#b.insert("jumps",5);
#b.insert("over",6);
#b.insert("lazy",7);
#b.insert("dog",8);
#b.insert(str(nil),9);
#b.insert(".",10);
#b.insert("",int(nil));
#b.insert(str(nil),int(nil));
#b.print();
#-------------------------#
# BAT:		  tmp_26  #
# (str)		  (int)	  #
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
## Testing simple retrievals
#b.find("the").print();
[ 1 ]
#b.find("fox").print();
[ 4 ]
#b.find(str(nil)).print();
[ nil ]
## This should cause an error
#b.find("cat").print();
## Can we delete them and re-insert them later on
#b.delete("fox",4);
#b.delete("the",1);
#b.delete(".",10);
#b.print();
#-------------------------#
# BAT:		  tmp_26  #
# (str)		  (int)	  #
#-------------------------#
[ "",		  nil	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ nil,		  nil	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
#b.insert("fox",4);
#b.insert("the",1);
#b.insert(".",10);
#b.count().print();
[ 12 ]
## Lets cut out a few sections
#b.select(2,4).print();
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
#b.select(7,int(nil)).print();
#-----------------#
# BAT:	  tmp_25  #
# (str)	  (int)	  #
#-----------------#
[ "lazy", 7	  ]
[ "dog",  8	  ]
[ nil,	  9	  ]
[ ".",	  10	  ]
#b.select(int(nil),7).print();
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
#b.select(int(nil),int(nil)).print();
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
[ ".",		  10	  ]
#b.reverse().select("fox","quick").print();
#-------------------------#
# BAT:	  tmp_25	  #
# (int)	  (str)		  #
#-------------------------#
[ 2,	  "quick"	  ]
[ 5,	  "jumps"	  ]
[ 6,	  "over"	  ]
[ 7,	  "lazy"	  ]
[ 4,	  "fox"		  ]
#b.reverse().select("fox",str(nil)).print();
#-------------------------#
# BAT:	  tmp_25	  #
# (int)	  (str)		  #
#-------------------------#
[ 2,	  "quick"	  ]
[ 5,	  "jumps"	  ]
[ 6,	  "over"	  ]
[ 7,	  "lazy"	  ]
[ 4,	  "fox"		  ]
[ 1,	  "the"		  ]
#b.reverse().select(str(nil),"quick").print();
#-------------------------#
# BAT:	  tmp_25	  #
# (int)	  (str)		  #
#-------------------------#
[ nil,	  ""		  ]
[ 2,	  "quick"	  ]
[ 3,	  "brown"	  ]
[ 5,	  "jumps"	  ]
[ 6,	  "over"	  ]
[ 7,	  "lazy"	  ]
[ 8,	  "dog"		  ]
[ 4,	  "fox"		  ]
[ 10,	  "."		  ]
#b.reverse().select(str(nil),str(nil)).print();
#-------------------------#
# BAT:	  tmp_25	  #
# (int)	  (str)		  #
#-------------------------#
[ nil,	  ""		  ]
[ 2,	  "quick"	  ]
[ 3,	  "brown"	  ]
[ 5,	  "jumps"	  ]
[ 6,	  "over"	  ]
[ 7,	  "lazy"	  ]
[ 8,	  "dog"		  ]
[ 4,	  "fox"		  ]
[ 1,	  "the"		  ]
[ 10,	  "."		  ]
## A 2-dimensional cut
#var bn:=b.fragment("fox","quick",1,5);bn.print();
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
#b.fragment("fox",str(nil),1,5).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
#b.fragment(str(nil),"quick",1,5).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
#b.fragment(str(nil),str(nil),1,5).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
#b.fragment("fox","quick",1,int(nil)).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
#b.fragment("fox","quick",int(nil),5).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
#b.fragment("fox","quick",int(nil),int(nil)).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
#b.fragment("fox",str(nil),int(nil),int(nil)).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
#b.fragment(str(nil),"f",int(nil),int(nil)).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "",		  nil	  ]
[ "brown",	  3	  ]
[ nil,		  nil	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
#b.reverse().fragment(int(nil),int(nil),str(nil),"f").print();
#-------------------------#
# BAT:	  tmp_27	  #
# (int)	  (str)		  #
#-------------------------#
[ nil,	  ""		  ]
[ 3,	  "brown"	  ]
[ nil,	  nil		  ]
[ 8,	  "dog"		  ]
[ 9,	  nil		  ]
[ 10,	  "."		  ]
#var b1:= b.join(bn.reverse());
#b1.print();
#---------------------------------#
# BAT:		  tmp_27	  #
# (str)		  (str)		  #
#---------------------------------#
[ "quick",	  "quick"	  ]
[ "jumps",	  "jumps"	  ]
[ "fox",	  "fox"		  ]
#var b2:= b.semijoin(b1.reverse());
#b2.print();
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
## testing the like command
#b.reverse().like("ox").print();
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (str)	  #
#-----------------#
[ 4,	  "fox"	  ]
#b.reverse().like("fo").print();
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (str)	  #
#-----------------#
[ 4,	  "fox"	  ]
#b.reverse().like("fox").print();
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (str)	  #
#-----------------#
[ 4,	  "fox"	  ]
#b.reverse().like(" fox").print();
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (str)	  #
#-----------------#
#quit();

# 13:36:16 >  
# 13:36:16 >  Done.
# 13:36:16 >  

