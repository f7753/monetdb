stdout of test 'test_65` in directory 'tests/suite_00` itself:

#> Mtest (20:57:32):	milS test_65 milS
#> Mtest (20:57:32):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_65.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_65.milS

# 23:27:12 >  
# 23:27:12 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux//var/MonetDB5/log" --set mapi_port=43940 --set sql_port=54820 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_65.mal </dev/null
# 23:27:12 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("#test sampling\n");
#	mil.line("var b:= new(int,int);");
#	b := new(nil:int,nil:int);
#	mil.line("b.insert(1,15);");
#	ca_a := insert(b,1,15);
#	mil.line("b.insert(2,4);");
#	da_a := insert(b,2,4);
#	mil.line("b.insert(3,int(nil));");
#	ea_a := int(nil);
#	fa_a := insert(b,3,ea_a);
#	mil.line("b.insert(4,16);");
#	ga_a := insert(b,4,16);
#	mil.line("b.insert(5,25);");
#	ha_a := insert(b,5,25);
#	mil.line("b.insert(6,36);");
#	ia_a := insert(b,6,36);
#	mil.line("b.insert(7,49);");
#	ja_a := insert(b,7,49);
#	mil.line("b.insert(8,64);");
#	ka_a := insert(b,8,64);
#	mil.line("b.insert(9,int(nil));");
#	la_a := int(nil);
#	ma_a := insert(b,9,la_a);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); printf(\"#~EndVariableOutput~#\\n\");");
#	na_a := printf("#~BeginVariableOutput~#\n");
#	oa_a := sample(b,1);
#	pa_a := print(oa_a);
#	qa_a := printf("#~EndVariableOutput~#\n");
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); printf(\"#~EndVariableOutput~#\\n\");");
#	ra_a := printf("#~BeginVariableOutput~#\n");
#	sa_a := sample(b,1);
#	ta_a := print(sa_a);
#	ua_a := printf("#~EndVariableOutput~#\n");
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(9).print(); printf(\"#~EndVariableOutput~#\\n\");");
#	va_a := printf("#~BeginVariableOutput~#\n");
#	wa_a := sample(b,9);
#	xa_a := print(wa_a);
#	ya_a := printf("#~EndVariableOutput~#\n");
#	mil.line("b.sample(0).print();");
#	ab_a := sample(b,0);
#	bb_a := print(ab_a);
#	mil.line("quit();");
#	cb_a := quit();
#
function user.main():int;	# 0  (main:int)
# Monet Mil to Mal compiler 	# 1  ($2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  ($4:str)
#Predefined code segment 	# 3  ($6:str)
#The compiler can not guarantee an accurate compilation, 	# 4  ($8:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  ($10:str)
#A few guidelines to maximize usefullness. 	# 6  ($12:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  ($14:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  ($16:str)
#use the "mil_schema" for additional support routines 	# 9  ($18:str)
    mil.line("setoid(oid(20000000));");	# 10 MILline ($19:void)<-($20:str)
    aa_a := calc.oid(20000000);	# 11 CALCint2oid (aa_a:oid)<-($22:int)
    ba_a := calc.setoid(aa_a);	# 12 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#test sampling\n");	# 13 MILline ($24:void)<-($25:str)
    b := bbp.new(nil:int,nil:int);	# 14 CMDBATnew (b:bat[:int,:int])<-($27:int)($27:int)
    mil.line("b.insert(1,15);");	# 15 MILline ($28:void)<-($29:str)
    ca_a := bat.insert(b,1,15);	# 16 BKCinsert_bun (ca_a:bat[:int,:int])<-(b:bat[:int,:int])($31:int)($32:int)
    mil.line("b.insert(2,4);");	# 17 MILline ($33:void)<-($34:str)
    da_a := bat.insert(b,2,4);	# 18 BKCinsert_bun (da_a:bat[:int,:int])<-(b:bat[:int,:int])($36:int)($37:int)
    mil.line("b.insert(3,int(nil));");	# 19 MILline ($38:void)<-($39:str)
    ea_a := calc.int(nil);	# 20 CALCnil2int (ea_a:int)<-($41:void)
    fa_a := bat.insert(b,3,ea_a);	# 21 BKCinsert_bun (fa_a:bat[:int,:int])<-(b:bat[:int,:int])($43:int)(ea_a:int)
    mil.line("b.insert(4,16);");	# 22 MILline ($44:void)<-($45:str)
    ga_a := bat.insert(b,4,16);	# 23 BKCinsert_bun (ga_a:bat[:int,:int])<-(b:bat[:int,:int])($37:int)($47:int)
    mil.line("b.insert(5,25);");	# 24 MILline ($48:void)<-($49:str)
    ha_a := bat.insert(b,5,25);	# 25 BKCinsert_bun (ha_a:bat[:int,:int])<-(b:bat[:int,:int])($51:int)($52:int)
    mil.line("b.insert(6,36);");	# 26 MILline ($53:void)<-($54:str)
    ia_a := bat.insert(b,6,36);	# 27 BKCinsert_bun (ia_a:bat[:int,:int])<-(b:bat[:int,:int])($56:int)($57:int)
    mil.line("b.insert(7,49);");	# 28 MILline ($58:void)<-($59:str)
    ja_a := bat.insert(b,7,49);	# 29 BKCinsert_bun (ja_a:bat[:int,:int])<-(b:bat[:int,:int])($61:int)($62:int)
    mil.line("b.insert(8,64);");	# 30 MILline ($63:void)<-($64:str)
    ka_a := bat.insert(b,8,64);	# 31 BKCinsert_bun (ka_a:bat[:int,:int])<-(b:bat[:int,:int])($66:int)($67:int)
    mil.line("b.insert(9,int(nil));");	# 32 MILline ($68:void)<-($69:str)
    la_a := calc.int(nil);	# 33 CALCnil2int (la_a:int)<-($41:void)
    ma_a := bat.insert(b,9,la_a);	# 34 BKCinsert_bun (ma_a:bat[:int,:int])<-(b:bat[:int,:int])($72:int)(la_a:int)
    mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");");	# 35 MILline ($73:void)<-($74:str)
    na_a := io.printf("#~BeginVariableOutput~#\n");	# 36 IOprint_str (na_a:int)<-($76:str)
    oa_a := algebra.sample(b,1);	# 37 ALGsample (oa_a:bat[:int,:int])<-(b:bat[:int,:int])($78:int)
    pa_a := io.print(oa_a);	# 38 IOprint_val (pa_a:int)<-(oa_a:bat[:int,:int])
    qa_a := io.printf("#~EndVariableOutput~#\n");	# 39 IOprint_str (qa_a:int)<-($81:str)
    mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");");	# 40 MILline ($82:void)<-($74:str)
    ra_a := io.printf("#~BeginVariableOutput~#\n");	# 41 IOprint_str (ra_a:int)<-($76:str)
    sa_a := algebra.sample(b,1);	# 42 ALGsample (sa_a:bat[:int,:int])<-(b:bat[:int,:int])($78:int)
    ta_a := io.print(sa_a);	# 43 IOprint_val (ta_a:int)<-(sa_a:bat[:int,:int])
    ua_a := io.printf("#~EndVariableOutput~#\n");	# 44 IOprint_str (ua_a:int)<-($81:str)
    mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(9).print(); ioprintf(\"#~EndVariableOutput~#\\n\");");	# 45 MILline ($87:void)<-($88:str)
    va_a := io.printf("#~BeginVariableOutput~#\n");	# 46 IOprint_str (va_a:int)<-($76:str)
    wa_a := algebra.sample(b,9);	# 47 ALGsample (wa_a:bat[:int,:int])<-(b:bat[:int,:int])($72:int)
    xa_a := io.print(wa_a);	# 48 IOprint_val (xa_a:int)<-(wa_a:bat[:int,:int])
    ya_a := io.printf("#~EndVariableOutput~#\n");	# 49 IOprint_str (ya_a:int)<-($81:str)
    mil.line("b.sample(0).print();");	# 50 MILline ($93:void)<-($94:str)
    ab_a := algebra.sample(b,0);	# 51 ALGsample (ab_a:bat[:int,:int])<-(b:bat[:int,:int])($96:int)
    bb_a := io.print(ab_a);	# 52 IOprint_val (bb_a:int)<-(ab_a:bat[:int,:int])
    mil.line("quit();");	# 53 MILline ($98:void)<-($99:str)
    cb_a := clients.quit();	# 54 CLTquit (cb_a:void)
end main;	# 55  
#setoid(oid(20000000));
##test sampling
#var b:= new(int,int);
#b.insert(1,15);
#b.insert(2,4);
#b.insert(3,int(nil));
#b.insert(4,16);
#b.insert(5,25);
#b.insert(6,36);
#b.insert(7,49);
#b.insert(8,64);
#b.insert(9,int(nil));
#printf("#~BeginVariableOutput~#\n"); b.sample(1).print(); printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
#~EndVariableOutput~#
#printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");
#~BeginVariableOutput~#
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 8,	  64	  ]
#~EndVariableOutput~#
#printf("#~BeginVariableOutput~#\n"); b.sample(9).print(); printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
#~EndVariableOutput~#
#b.sample(0).print();
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (int)	  #
#-----------------#
#quit();

# 17:08:52 >  
# 17:08:52 >  Done.
# 17:08:52 >  

