# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#var b:= new(str,int);
	b := new(:str,:int);
#b.insert("the",1);
	ca_a := insert(b,"the",1);
#b.insert("quick",2);
	da_a := insert(b,"quick",2);
#b.insert("brown",3);
	ea_a := insert(b,"brown",3);
#b.insert("fox",4);
	fa_a := insert(b,"fox",4);
#b.insert("jumps",5);
	ga_a := insert(b,"jumps",5);
#b.insert("over",6);
	ha_a := insert(b,"over",6);
#b.insert("lazy",7);
	ia_a := insert(b,"lazy",7);
#b.insert("dog",8);
	ja_a := insert(b,"dog",8);
#b.insert(str(nil),9);
	nil:= mil.take("nil");
	ka_a := str(nil);
	la_a := insert(b,ka_a,9);
#b.insert(".",10);
	ma_a := insert(b,".",10);
#b.insert("",int(nil));
	na_a := int(nil);
	oa_a := insert(b,"",na_a);
#b.insert(str(nil),int(nil));
	pa_a := str(nil);
	qa_a := int(nil);
	ra_a := insert(b,pa_a,qa_a);
#b.print();
	sa_a := print(b,);
#b.find("the").print();
	ta_a := find(b,"the");
	ua_a := print(ta_a,);
#b.find("fox").print();
	va_a := find(b,"fox");
	wa_a := print(va_a,);
#b.find(str(nil)).print();
	xa_a := str(nil);
	ya_a := find(b,xa_a);
	ab_a := print(ya_a,);
#b.find("cat").print();
	bb_a := find(b,"cat");
	cb_a := print(bb_a,);
#b.delete("fox",4);
	db_a := delete(b,"fox",4);
#b.delete("the",1);
	eb_a := delete(b,"the",1);
#b.delete(".",10);
	fb_a := delete(b,".",10);
#b.print();
	gb_a := print(b,);
#b.insert("fox",4);
	hb_a := insert(b,"fox",4);
#b.insert("the",1);
	ib_a := insert(b,"the",1);
#b.insert(".",10);
	jb_a := insert(b,".",10);
#b.count().print();
	kb_a := count(b,);
	lb_a := print(kb_a,);
#b.select(2,4).print();
	mb_a := select(b,2,4);
	nb_a := print(mb_a,);
#b.select(7,int(nil)).print();
	ob_a := int(nil);
	pb_a := select(b,7,ob_a);
	qb_a := print(pb_a,);
#b.select(int(nil),7).print();
	rb_a := int(nil);
	sb_a := select(b,rb_a,7);
	tb_a := print(sb_a,);
#b.select(int(nil),int(nil)).print();
	ub_a := int(nil);
	vb_a := int(nil);
	wb_a := select(b,ub_a,vb_a);
	xb_a := print(wb_a,);
#b.reverse().select("fox","quick").print();
	yb_a := reverse(b,);
	ac_a := select(yb_a,"fox","quick");
	bc_a := print(ac_a,);
#b.reverse().select("fox",str(nil)).print();
	cc_a := str(nil);
	dc_a := reverse(b,);
	ec_a := select(dc_a,"fox",cc_a);
	fc_a := print(ec_a,);
#b.reverse().select(str(nil),"quick").print();
	gc_a := str(nil);
	hc_a := reverse(b,);
	ic_a := select(hc_a,gc_a,"quick");
	jc_a := print(ic_a,);
#b.reverse().select(str(nil),str(nil)).print();
	kc_a := str(nil);
	lc_a := str(nil);
	mc_a := reverse(b,);
	nc_a := select(mc_a,kc_a,lc_a);
	oc_a := print(nc_a,);
#var bn:=b.fragment("fox","quick",1,5);bn.print();
	bn := fragment(b,"fox","quick",1,5);
	pc_a := print(bn,);
#b.fragment("fox",str(nil),1,5).print();
	qc_a := str(nil);
	rc_a := fragment(b,"fox",qc_a,1,5);
	sc_a := print(rc_a,);
#b.fragment(str(nil),"quick",1,5).print();
	tc_a := str(nil);
	uc_a := fragment(b,tc_a,"quick",1,5);
	vc_a := print(uc_a,);
#b.fragment(str(nil),str(nil),1,5).print();
	wc_a := str(nil);
	xc_a := str(nil);
	yc_a := fragment(b,wc_a,xc_a,1,5);
	ad_a := print(yc_a,);
#b.fragment("fox","quick",1,int(nil)).print();
	bd_a := int(nil);
	cd_a := fragment(b,"fox","quick",1,bd_a);
	dd_a := print(cd_a,);
#b.fragment("fox","quick",int(nil),5).print();
	ed_a := int(nil);
	fd_a := fragment(b,"fox","quick",ed_a,5);
	gd_a := print(fd_a,);
#b.fragment("fox","quick",int(nil),int(nil)).print();
	hd_a := int(nil);
	id_a := int(nil);
	jd_a := fragment(b,"fox","quick",hd_a,id_a);
	kd_a := print(jd_a,);
#b.fragment("fox",str(nil),int(nil),int(nil)).print();
	ld_a := str(nil);
	md_a := int(nil);
	nd_a := int(nil);
	od_a := fragment(b,"fox",ld_a,md_a,nd_a);
	pd_a := print(od_a,);
#b.fragment(str(nil),"f",int(nil),int(nil)).print();
	qd_a := str(nil);
	rd_a := int(nil);
	sd_a := int(nil);
	td_a := fragment(b,qd_a,"f",rd_a,sd_a);
	ud_a := print(td_a,);
#b.reverse().fragment(int(nil),int(nil),str(nil),"f").print();
	vd_a := int(nil);
	wd_a := int(nil);
	xd_a := str(nil);
	yd_a := reverse(b,);
	ae_a := fragment(yd_a,vd_a,wd_a,xd_a,"f");
	be_a := print(ae_a,);
#var b1:= b.join(bn.reverse());
	ce_a := reverse(bn,);
	b1 := join(b,ce_a);
#b1.print();
	de_a := print(b1,);
#var b2:= b.semijoin(b1.reverse());
	ee_a := reverse(b1,);
	b2 := semijoin(b,ee_a);
#b2.print();
	fe_a := print(b2,);
#b.reverse().like("ox").print();
	ge_a := reverse(b,);
	he_a := like(ge_a,"ox");
	ie_a := print(he_a,);
#b.reverse().like("fo").print();
	je_a := reverse(b,);
	ke_a := like(je_a,"fo");
	le_a := print(ke_a,);
#b.reverse().like("fox").print();
	me_a := reverse(b,);
	ne_a := like(me_a,"fox");
	oe_a := print(ne_a,);
#b.reverse().like(" fox").print();
	pe_a := reverse(b,);
	qe_a := like(pe_a," fox");
	re_a := print(qe_a,);
#quit();
	se_a := quit();
