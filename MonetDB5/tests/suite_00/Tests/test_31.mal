# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
function fill(size:int):bat[:int,:int];
#    var c:= new(int,int);
	c := new(:int,:int);
#    var i := 1;
	i := 1;
#    while(i < size) {
barrier	ca_a := true;
barrier	da_a := <(i,size);
#      insert(c,i,i:=i+1);
	i := +(i,1);
	ea_a := insert(c,i,i);
redo	ca_a;
exit	da_a;
exit	ca_a;
#    insert(c,i,1);
	fa_a := insert(c,i,1);
#    return c;
	return ga_a :=c;
end fill;
#var c := closure(fill(20)); 
	ha_a := fill(20);
	c := closure(ha_a);
#count(c).print();
	ia_a := count(c);
	ja_a := print(ia_a,);
#var z:= time();
	z := alarm.time();
#var clo:= closure(c);
	clo := closure(c);
#printf("#~BeginVariableOutput~#\nclosure in %d ms cnt %d\n#~EndVariableOutput~#\n",time()-z,count(clo));
	ka_a := alarm.time();
	la_a := -(ka_a,z);
	ma_a := count(clo);
	na_a := printf("#~BeginVariableOutput~#\nclosure in %d ms cnt %d\n#~EndVariableOutput~#\n",la_a,ma_a);
#var d:= new(int,int);
	d := new(:int,:int);
#d.insert(1,1);
	oa_a := insert(d,1,1);
#d.subgraph(c).print();
	pa_a := subgraph(d,c);
	qa_a := print(pa_a,);
#d.clear();
	ra_a := clear(d,);
#d.insert(2,2);
	sa_a := insert(d,2,2);
#var z:= time();
	z := alarm.time();
#var e:=d.subgraph(c); printf("#~BeginVariableOutput~#\nsubgraph in %d ms on %d\n#~EndVariableOutput~#\n",time()-z,count(e));
	e := subgraph(d,c);
	ta_a := alarm.time();
	ua_a := -(ta_a,z);
	va_a := count(e);
	wa_a := printf("#~BeginVariableOutput~#\nsubgraph in %d ms on %d\n#~EndVariableOutput~#\n",ua_a,va_a);
#d.clear();
	xa_a := clear(d,);
#d.insert(2,2);
	ya_a := insert(d,2,2);
#d.insert(3,3);
	ab_a := insert(d,3,3);
#z:= time(); 
	z := alarm.time();
#e:=d.subgraph(c); printf("#~BeginVariableOutput~#\nsubgraph in %d ms cnt %d\n#~EndVariableOutput~#\n",time()-z,count(e));
	e := subgraph(d,c);
	bb_a := alarm.time();
	cb_a := -(bb_a,z);
	db_a := count(e);
	eb_a := printf("#~BeginVariableOutput~#\nsubgraph in %d ms cnt %d\n#~EndVariableOutput~#\n",cb_a,db_a);
#d.clear();
	fb_a := clear(d,);
#d.insert(2,2);
	gb_a := insert(d,2,2);
#d.insert(3,3);
	hb_a := insert(d,3,3);
#d.insert(4,4);
	ib_a := insert(d,4,4);
#d.insert(5,5);
	jb_a := insert(d,5,5);
#z:= time(); 
	z := alarm.time();
#e:=d.subgraph(c); printf("#~BeginVariableOutput~#\nsubgraph in %d ms cnt %d\n#~EndVariableOutput~#\n",time()-z,count(e));
	e := subgraph(d,c);
	kb_a := alarm.time();
	lb_a := -(kb_a,z);
	mb_a := count(e);
	nb_a := printf("#~BeginVariableOutput~#\nsubgraph in %d ms cnt %d\n#~EndVariableOutput~#\n",lb_a,mb_a);
#printf("#~BeginVariableOutput~#\n"); cpu().print(); printf("#~EndVariableOutput~#\n");
	ob_a := printf("#~BeginVariableOutput~#\n");
	pb_a := cpu();
	qb_a := print(pb_a,);
	rb_a := printf("#~EndVariableOutput~#\n");
#d.clear();
	sb_a := clear(d,);
#d.insert(2,2);
	tb_a := insert(d,2,2);
#z:= time();
	z := alarm.time();
#e:=d.subgraph(clo); 
	e := subgraph(d,clo);
#printf("#~BeginVariableOutput~#\nsubgraph in %d ms on %d\n#~EndVariableOutput~#\n",time()-z,count(e));
	ub_a := alarm.time();
	vb_a := -(ub_a,z);
	wb_a := count(e);
	xb_a := printf("#~BeginVariableOutput~#\nsubgraph in %d ms on %d\n#~EndVariableOutput~#\n",vb_a,wb_a);
#d.clear();
	yb_a := clear(d,);
#d.insert(3,3);
	ac_a := insert(d,3,3);
#z:= time(); 
	z := alarm.time();
#e:=d.subgraph(clo); 
	e := subgraph(d,clo);
#printf("#~BeginVariableOutput~#\nsubgraph in %d ms cnt %d\n#~EndVariableOutput~#\n",time()-z,count(e));
	bc_a := alarm.time();
	cc_a := -(bc_a,z);
	dc_a := count(e);
	ec_a := printf("#~BeginVariableOutput~#\nsubgraph in %d ms cnt %d\n#~EndVariableOutput~#\n",cc_a,dc_a);
#d.clear();
	fc_a := clear(d,);
#d.insert(4,4);
	gc_a := insert(d,4,4);
#z:= time(); 
	z := alarm.time();
#e:=d.subgraph(clo); printf("#~BeginVariableOutput~#\nsubgraph in %d ms cnt %d\n#~EndVariableOutput~#\n",time()-z,count(e));
	e := subgraph(d,clo);
	hc_a := alarm.time();
	ic_a := -(hc_a,z);
	jc_a := count(e);
	kc_a := printf("#~BeginVariableOutput~#\nsubgraph in %d ms cnt %d\n#~EndVariableOutput~#\n",ic_a,jc_a);
#printf("#~BeginVariableOutput~#\n"); cpu().print(); printf("#~EndVariableOutput~#\n");
	lc_a := printf("#~BeginVariableOutput~#\n");
	mc_a := cpu();
	nc_a := print(mc_a,);
	oc_a := printf("#~EndVariableOutput~#\n");
#quit();
	pc_a := quit();
#Identifer 'time' mapped to 'alarm.time'
