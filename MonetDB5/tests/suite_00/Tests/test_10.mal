# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#var s:=new(int,int);
	s := new(:int,:int);
#insert(s,5,5);insert(s,3,3);insert(s,4,2);insert(s,2,1);
	ca_a := insert(s,5,5);
	da_a := insert(s,3,3);
	ea_a := insert(s,4,2);
	fa_a := insert(s,2,1);
#insert(s,1,1);insert(s,4,2); insert(s,4,3);
	ga_a := insert(s,1,1);
	ha_a := insert(s,4,2);
	ia_a := insert(s,4,3);
#printf("#~BeginVariableOutput~#\n");
	ja_a := printf("#~BeginVariableOutput~#\n");
#sort(s).print();
	ka_a := sort(s);
	la_a := print(ka_a,);
#printf("#~EndVariableOutput~#\n");
	ma_a := printf("#~EndVariableOutput~#\n");
#sort_ht(s).print();
	na_a := sort_ht(s);
	oa_a := print(na_a,);
#s:=new(int,int);
	s := new(:int,:int);
#insert(s,2,1);insert(s,4,1); insert(s,3,1); insert(s,5,1);
	pa_a := insert(s,2,1);
	qa_a := insert(s,4,1);
	ra_a := insert(s,3,1);
	sa_a := insert(s,5,1);
#insert(s,6,1);insert(s,4,2);insert(s,1,1);
	ta_a := insert(s,6,1);
	ua_a := insert(s,4,2);
	va_a := insert(s,1,1);
#printf("#~BeginVariableOutput~#\n");
	wa_a := printf("#~BeginVariableOutput~#\n");
#sort(s).print();
	xa_a := sort(s);
	ya_a := print(xa_a,);
#printf("#~EndVariableOutput~#\n");
	ab_a := printf("#~EndVariableOutput~#\n");
#sort_ht(s).print();
	bb_a := sort_ht(s);
	cb_a := print(bb_a,);
#quit();
	db_a := quit();
