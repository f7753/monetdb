# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(20000000));
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#var x := new(oid,chr);
	x := new(:oid,:chr);
#x.insert(oid(1),'a');
	ca_a := oid(1);
	da_a := insert(x,ca_a,'a');
#x.insert(oid(2),'a');
	ea_a := oid(2);
	fa_a := insert(x,ea_a,'a');
#x.insert(oid(3),'b');
	ga_a := oid(3);
	ha_a := insert(x,ga_a,'b');
#x.insert(oid(4),'b');
	ia_a := oid(4);
	ja_a := insert(x,ia_a,'b');
#x.insert(oid(5),'b');
	ka_a := oid(5);
	la_a := insert(x,ka_a,'b');
#x.insert(oid(6),'b');
	ma_a := oid(6);
	na_a := insert(x,ma_a,'b');
#x.insert(oid(7),'c');
	oa_a := oid(7);
	pa_a := insert(x,oa_a,'c');
#x.insert(oid(8),'c');
	qa_a := oid(8);
	ra_a := insert(x,qa_a,'c');
#x.rename("x");
	sa_a := bat.setName(x,"x");
#x.roles("oid","x");
	ta_a := roles(x,"oid","x");
#x.persists(true);
	ua_a := persists(x,true);
#var y:= new(oid,chr);
	y := new(:oid,:chr);
#y.insert(oid(1),'a');
	va_a := oid(1);
	wa_a := insert(y,va_a,'a');
#y.insert(oid(2),'c');
	xa_a := oid(2);
	ya_a := insert(y,xa_a,'c');
#y.insert(oid(3),'b');
	ab_a := oid(3);
	bb_a := insert(y,ab_a,'b');
#y.insert(oid(4),'b');
	cb_a := oid(4);
	db_a := insert(y,cb_a,'b');
#y.insert(oid(5),'b');
	eb_a := oid(5);
	fb_a := insert(y,eb_a,'b');
#y.insert(oid(6),'c');
	gb_a := oid(6);
	hb_a := insert(y,gb_a,'c');
#y.insert(oid(7),'a');
	ib_a := oid(7);
	jb_a := insert(y,ib_a,'a');
#y.insert(oid(8),'a');
	kb_a := oid(8);
	lb_a := insert(y,kb_a,'a');
#y.rename("y");
	mb_a := bat.setName(y,"y");
#y.roles("oid","y");
	nb_a := roles(y,"oid","y");
#y.persists(true);
	ob_a := persists(y,true);
#var z:= new(oid,chr);
	z := new(:oid,:chr);
#z.insert(oid(1),'c');
	pb_a := oid(1);
	qb_a := insert(z,pb_a,'c');
#z.insert(oid(2),'a');
	rb_a := oid(2);
	sb_a := insert(z,rb_a,'a');
#z.insert(oid(3),'b');
	tb_a := oid(3);
	ub_a := insert(z,tb_a,'b');
#z.insert(oid(4),'c');
	vb_a := oid(4);
	wb_a := insert(z,vb_a,'c');
#z.insert(oid(5),'a');
	xb_a := oid(5);
	yb_a := insert(z,xb_a,'a');
#z.insert(oid(6),'a');
	ac_a := oid(6);
	bc_a := insert(z,ac_a,'a');
#z.insert(oid(7),'c');
	cc_a := oid(7);
	dc_a := insert(z,cc_a,'c');
#z.insert(oid(8),'a');
	ec_a := oid(8);
	fc_a := insert(z,ec_a,'a');
#z.rename("z");
	gc_a := bat.setName(z,"z");
#y.roles("oid","z");
	hc_a := roles(y,"oid","z");
#z.persists(true);
	ic_a := persists(z,true);
#print(x,y,z);
	jc_a := print(x,y,z);
#var t1 := x.CTgroup();
	t1 := group(x,);
#t1.print();
	kc_a := print(t1,);
#var t2 := t1.CTderive(y);
	t2 := group(t1,y);
#t2.print();
	lc_a := print(t2,);
#t2 := t1.CTgroup(y);
	t2 := group(t1,y);
#t2.print();
	mc_a := print(t2,);
#quit();
	nc_a := quit();
#Identifer 'rename' mapped to 'bat.setName'
#Identifer 'CTgroup' mapped to 'group'
#Identifer 'CTderive' mapped to 'group'
