# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#var cwd := getenv("TSTTRGDIR");
	cwd := getenv("TSTTRGDIR");
#var word_file := sprintf("%s/ID.979809.txt", cwd);
	word_file := sprintf("%s/ID.979809.txt",cwd);
#var word_table:= new(oid,str);
	word_table := new(:oid,:str);
#word_table.import(word_file);
	aa_a := import(word_table,word_file);
#print("selecting 'nil' words. The result should be 2");
	ba_a := print("selecting 'nil' words. The result should be 2");
#word_table.select("nil").count().print();    # should be 2 and it is 0
	ca_a := select(word_table,"nil");
	da_a := count(ca_a,);
	ea_a := print(da_a,);
#print("selecting nil values. The result should be 0");
	fa_a := print("selecting nil values. The result should be 0");
#word_table.select(str(nil)).count().print();    # should be 1 and it is 3
	nil:= mil.take("nil");
	ga_a := str(nil);
	ha_a := select(word_table,ga_a);
	ia_a := count(ha_a,);
	ja_a := print(ia_a,);
#print("the table imported");
	ka_a := print("the table imported");
#word_table.print();    # the "nil" words are converted to nil values     
	la_a := print(word_table,);
#var names := new(void,str).seqbase(0@0);
	ma_a := new(:void,:str);
	names := bat.setSequenceBase(ma_a,0@0);
#names.insert(oid(nil),"one");
	na_a := oid(nil);
	oa_a := insert(names,na_a,"one");
#names.insert(oid(nil),"two");
	pa_a := oid(nil);
	qa_a := insert(names,pa_a,"two");
#var seps := new(void,str).seqbase(0@0);
	ra_a := new(:void,:str);
	seps := bat.setSequenceBase(ra_a,0@0);
#seps.insert(oid(nil),",");
	sa_a := oid(nil);
	ta_a := insert(seps,sa_a,",");
#seps.insert(oid(nil),"\n");
	ua_a := oid(nil);
	va_a := insert(seps,ua_a,"\n");
#var types := new(void,str).seqbase(0@0);
	wa_a := new(:void,:str);
	types := bat.setSequenceBase(wa_a,0@0);
#types.insert(oid(nil),"oid");
	xa_a := oid(nil);
	ya_a := insert(types,xa_a,"oid");
#types.insert(oid(nil),"str");
	ab_a := oid(nil);
	bb_a := insert(types,ab_a,"str");
#var bats := load( names, seps, types, word_file, -1);
	bats := load(names,seps,types,word_file,-1);
#print(bats.find("one"),bats.find("two"));
	cb_a := find(bats,"one");
	db_a := find(bats,"two");
	eb_a := print(cb_a,db_a);
#quit();
	fb_a := quit();
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
