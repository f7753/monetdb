# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
## Build two simple bats, using OIDs.
	aa_a := new(:oid,:oid);
	ba_a := oid(0);
	ca_a := oid(0);
	da_a := insert(aa_a,ba_a,ca_a);
	ea_a := oid(1);
	fa_a := oid(1);
	oid_oid_bat := insert(da_a,ea_a,fa_a);
#var oid_oid_bat := insert(insert(bat(oid,oid),oid(0),oid(0)),oid(1),oid(1));
	ga_a := print(oid_oid_bat);
#
	ha_a := new(:oid,:int);
	ia_a := oid(0);
	ja_a := insert(ha_a,ia_a,0);
	ka_a := oid(1);
	oid_int_bat := insert(ja_a,ka_a,1);
#var oid_int_bat := insert(insert(bat(oid,int),oid(0),0),oid(1),1);
	la_a := print(oid_int_bat);
## the subsequent insert-tests.
	void_int_bat := join(oid_oid_bat,oid_int_bat);
#var void_int_bat := join(oid_oid_bat,oid_int_bat);
	ma_a := print(void_int_bat);
## a single (OID) tuple 
	na_a := copy(oid_int_bat);
	BAT_WRITE:= mil.take("BAT_WRITE");
	oa_a := access(na_a,BAT_WRITE);
#print(insert(access(copy(oid_int_bat),BAT_WRITE),
	pa_a := oid(2);
	qa_a := insert(oa_a,pa_a,2);
	ra_a := print(qa_a);
## a complete (OID) bat.
	sa_a := copy(oid_int_bat);
	ta_a := access(sa_a,BAT_WRITE);
#print(insert(access(copy(oid_int_bat),BAT_WRITE),
	ua_a := new(:oid,:int);
	va_a := oid(2);
	wa_a := insert(ua_a,va_a,2);
	xa_a := insert(ta_a,wa_a);
	ya_a := print(xa_a);
## a complete (VOID) bat.
	ab_a := copy(oid_int_bat);
	bb_a := access(ab_a,BAT_WRITE);
#print(insert(access(copy(oid_int_bat),BAT_WRITE),
	cb_a := new(:void,:int);
	db_a := oid(2);
	eb_a := bat.setSequenceBase(cb_a,db_a);
	fb_a := oid(2);
	gb_a := insert(eb_a,fb_a,2);
	hb_a := insert(bb_a,gb_a);
	ib_a := print(hb_a);
## a single (OID) tuple 
	jb_a := copy(oid_int_bat);
	kb_a := access(jb_a,BAT_WRITE);
#print(insert(access(copy(oid_int_bat),BAT_WRITE),
	lb_a := oid(10);
	mb_a := insert(kb_a,lb_a,10);
	nb_a := print(mb_a);
## a complete (OID) bat.
	ob_a := copy(oid_int_bat);
	pb_a := access(ob_a,BAT_WRITE);
#print(insert(access(copy(oid_int_bat),BAT_WRITE),
	qb_a := new(:oid,:int);
	rb_a := oid(10);
	sb_a := insert(qb_a,rb_a,10);
	tb_a := insert(pb_a,sb_a);
	ub_a := print(tb_a);
## a complete (VOID) bat.
	vb_a := copy(oid_int_bat);
	wb_a := access(vb_a,BAT_WRITE);
#print(insert(access(copy(oid_int_bat),BAT_WRITE),
	xb_a := new(:void,:int);
	yb_a := oid(10);
	ac_a := bat.setSequenceBase(xb_a,yb_a);
	bc_a := oid(10);
	cc_a := insert(ac_a,bc_a,10);
	dc_a := insert(wb_a,cc_a);
	ec_a := print(dc_a);
## a single (OID) tuple 
	fc_a := copy(void_int_bat);
	gc_a := access(fc_a,BAT_WRITE);
#print(insert(access(copy(void_int_bat),BAT_WRITE),
	hc_a := oid(2);
	ic_a := insert(gc_a,hc_a,2);
	jc_a := print(ic_a);
## a complete (OID) bat.
	kc_a := copy(void_int_bat);
	lc_a := access(kc_a,BAT_WRITE);
#print(insert(access(copy(void_int_bat),BAT_WRITE),
	mc_a := new(:oid,:int);
	nc_a := oid(2);
	oc_a := insert(mc_a,nc_a,2);
	pc_a := insert(lc_a,oc_a);
	qc_a := print(pc_a);
## a complete (VOID) bat.
	rc_a := copy(void_int_bat);
	sc_a := access(rc_a,BAT_WRITE);
#print(insert(access(copy(void_int_bat),BAT_WRITE),
	tc_a := new(:void,:int);
	uc_a := oid(2);
	vc_a := bat.setSequenceBase(tc_a,uc_a);
	wc_a := oid(2);
	xc_a := insert(vc_a,wc_a,2);
	yc_a := insert(sc_a,xc_a);
	ad_a := print(yc_a);
## This test gives an error:
	bd_a := copy(void_int_bat);
	cd_a := access(bd_a,BAT_WRITE);
#print(insert(access(copy(void_int_bat),BAT_WRITE),
	dd_a := oid(10);
	ed_a := insert(cd_a,dd_a,10);
	fd_a := print(ed_a);
## a complete (OID) bat.
	gd_a := copy(void_int_bat);
	hd_a := access(gd_a,BAT_WRITE);
#print(insert(access(copy(void_int_bat),BAT_WRITE),
	id_a := new(:oid,:int);
	jd_a := oid(10);
	kd_a := insert(id_a,jd_a,10);
	ld_a := insert(hd_a,kd_a);
	md_a := print(ld_a);
## a complete (VOID) bat.
	nd_a := copy(void_int_bat);
	od_a := access(nd_a,BAT_WRITE);
#print(insert(access(copy(void_int_bat),BAT_WRITE),
	pd_a := new(:void,:int);
	qd_a := oid(10);
	rd_a := bat.setSequenceBase(pd_a,qd_a);
	sd_a := oid(10);
	td_a := insert(rd_a,sd_a,10);
	ud_a := insert(od_a,td_a);
	vd_a := print(ud_a);
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
