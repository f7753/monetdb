# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#var a:=new(oid,int).insert(0@0,0).access(BAT_READ);
	aa_a := new(:oid,:int);
	BAT_READ:= mil.take("BAT_READ");
	ba_a := insert(aa_a,0@0,0);
	a := access(ba_a,BAT_READ);
#var b:=new(oid,int).insert(1@0,1).access(BAT_READ);
	ca_a := new(:oid,:int);
	da_a := insert(ca_a,1@0,1);
	b := access(da_a,BAT_READ);
#var x:=new(oid,int).insert(a).insert(b).access(BAT_READ).reverse();
	ea_a := new(:oid,:int);
	fa_a := insert(ea_a,a);
	ga_a := insert(fa_a,b);
	ha_a := access(ga_a,BAT_READ);
	x := reverse(ha_a,);
#var c:=b.kunion(a);
	c := kunion(b,a);
#var d:=a.kunion(b);
	d := kunion(a,b);
#x.print();
	ia_a := print(x,);
#c.print();
	ja_a := print(c,);
#d.print();
	ka_a := print(d,);
#x.reverse().seqbase().print();
	la_a := reverse(x,);
	ma_a := bat.setSequenceBase(la_a,);
	na_a := print(ma_a,);
#c.seqbase().print();
	oa_a := bat.setSequenceBase(c,);
	pa_a := print(oa_a,);
#d.seqbase().print();
	qa_a := bat.setSequenceBase(d,);
	ra_a := print(qa_a,);
#var e:=x.join(c);
	e := join(x,c);
#var f:=x.join(d);
	f := join(x,d);
#e.count().print();
	sa_a := count(e,);
	ta_a := print(sa_a,);
#f.count().print();
	ua_a := count(f,);
	va_a := print(ua_a,);
#e.print();
	wa_a := print(e,);
#f.print();
	xa_a := print(f,);
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
