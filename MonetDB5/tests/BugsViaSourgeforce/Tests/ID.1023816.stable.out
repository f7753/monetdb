stdout of test 'ID.1023816` in directory 'tests/BugsViaSourgeforce` itself:


# 21:53:59 >  
# 21:53:59 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/opensource/MonetDB/Linux/etc/MonetDB.conf" --debug=10 --set "monet_mod_path=/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB/log" --set mapi_port=46183 --set sql_port=57777 --set monet_prompt= --trace --dbname=mTests_tests_BugsViaSourgeforce  < ID.1023816.milS
# 21:53:59 >  

# Monet Database Server V4.3.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugsViaSourgeforce
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("var x:=new(void,int);");
#	x := new(nil:void,nil:int);
#	mil.line("x.insert(void(nil),2);");
#	aa_a := void(nil);
#	ba_a := insert(x,aa_a,2);
#	mil.line("x.insert(void(nil),4);");
#	ca_a := void(nil);
#	da_a := insert(x,ca_a,4);
#	mil.line("x:=x.reverse().mark(0@0).reverse();");
#	ea_a := reverse(x);
#	fa_a := mark(ea_a,0@0);
#	x := reverse(fa_a);
#	mil.line("table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);");
#	ga_a := table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);
#
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  ($32:str)
#Predefined code segment 	# 2  ($34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  ($36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  ($38:str)
#A few guidelines to maximize usefullness. 	# 5  ($40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  ($42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  ($44:str)
#use the "mil_schema" for additional support routines 	# 8  ($46:str)
    mil.line("var x:=new(void,int);");	# 9 MILline ($47:void)<-($48:str)
    x := bbp.new(nil:void,nil:int);	# 10 CMDBATnew (x:bat[:void,:int])<-($50:void)($51:int)
    mil.line("x.insert(void(nil),2);");	# 11 MILline ($52:void)<-($53:str)
    aa_a := calc.void(nil);	# 12 CALCnil2void (aa_a:void)<-($55:void)
    ba_a := bat.insert(x,aa_a,2);	# 13 BKCinsert_bun (ba_a:bat[:void,:int])<-(x:bat[:void,:int])(aa_a:void)($57:int)
    mil.line("x.insert(void(nil),4);");	# 14 MILline ($58:void)<-($59:str)
    ca_a := calc.void(nil);	# 15 CALCnil2void (ca_a:void)<-($55:void)
    da_a := bat.insert(x,ca_a,4);	# 16 BKCinsert_bun (da_a:bat[:void,:int])<-(x:bat[:void,:int])(ca_a:void)($62:int)
    mil.line("x:=x.reverse().mark(0@0).reverse();");	# 17 MILline ($63:void)<-($64:str)
    ea_a := bat.reverse(x);	# 18 BKCreverse (ea_a:bat[:int,:void])<-(x:bat[:void,:int])
    fa_a := algebra.markT(ea_a,0@0);	# 19 ALGtmark (fa_a:bat[:int,:void])<-(ea_a:bat[:int,:void])($67:oid)
    x := bat.reverse(fa_a);	# 20 BKCreverse (x:bat[:void,:int])<-(fa_a:bat[:int,:void])
    mil.line("table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);");	# 21 MILline ($68:void)<-($69:str)
    ga_a := io.table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);	# 22 IOttable (ga_a:int)<-(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])
end main;	# 23  
#var x:=new(void,int);
#x.insert(void(nil),2);
#x.insert(void(nil),4);
#x:=x.reverse().mark(0@0).reverse();
#table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);
#---------------------------------------------------------------------------------------------------------------------------------#
# tmp_6	tmp_6	tmp_6	tmp_6	tmp_6	tmp_6	tmp_6	tmp_6	tmp_6	tmp_6	tmp_6	tmp_6	tmp_6	tmp_6	tmp_6	tmp_6	  # name
# int	int	int	int	int	int	int	int	int	int	int	int	int	int	int	int	  # type
#---------------------------------------------------------------------------------------------------------------------------------#
[ 2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2	  ]
[ 4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4	  ]

# 22:47:53 >  
# 22:47:53 >  Done.
# 22:47:53 >  

