# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#var a:=new(void,int);
	a := new(:void,:int);
#a.insert(nil,1);
	nil:= mil.take("nil");
	aa_a := insert(a,nil,1);
#a.insert(nil,2);
	ba_a := insert(a,nil,2);
#a.print();
	ca_a := print(a,);
#var b:=new(oid,int);
	b := new(:oid,:int);
#b.insert(3@0,3);
	da_a := insert(b,3@0,3);
#b.insert(4@0,4);
	ea_a := insert(b,4@0,4);
#b.print();
	fa_a := print(b,);
#var c:=a.copy().access(BAT_WRITE);;
	BAT_WRITE:= mil.take("BAT_WRITE");
	ga_a := copy(a,);
	c := access(ga_a,BAT_WRITE);
#c.print();
	ha_a := print(c,);
#var d:=c.insert(b);
	d := insert(c,b);
#d.print();
	ia_a := print(d,);
#a.seqbase(0@0);
	ja_a := bat.setSequenceBase(a,0@0);
#a.print();
	ka_a := print(a,);
#c:=a.copy().access(BAT_WRITE);
	la_a := copy(a,);
	c := access(la_a,BAT_WRITE);
#c.print();
	ma_a := print(c,);
#d:=c.insert(b);
	d := insert(c,b);
#d.print();
	na_a := print(d,);
#b:=new(oid,int);
	b := new(:oid,:int);
#b.insert(2@0,3);
	oa_a := insert(b,2@0,3);
#b.insert(4@0,4);
	pa_a := insert(b,4@0,4);
#b.print();
	qa_a := print(b,);
#c:=a.copy().access(BAT_WRITE);
	ra_a := copy(a,);
	c := access(ra_a,BAT_WRITE);
#c.print();
	sa_a := print(c,);
#d:=c.insert(b);
	d := insert(c,b);
#d.print();
	ta_a := print(d,);
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
