stdout of test 'ID.642344` in directory 'tests/BugsViaSourgeforce` itself:


# 17:10:10 >  
# 17:10:10 >  Mtimeout -timeout 60 Mserver "--config=/var/tmp/_PREFIX_MONET_GNU_32_d_--enable-optimize_/etc/monet.conf" --debug=10 --set "monet_mod_path=/var/tmp/_PREFIX_MONET_GNU_32_d_--enable-optimize_/lib/MonetDB" --dbfarm "/var/tmp/_PREFIX_MONET_GNU_32_d_--enable-optimize_/var/dbfarm" --set monet_prompt= --trace --dbname=mTests_tests_BugsViaSourgeforce  < ID.642344.milS
# 17:10:10 >  

# Monet Database Server V4.3.7
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.

# Date:		2002-11-22 16:58
# Category: 	None
# Group: 	None
# Status: 	Open
# Resolution: 	None
# Priority: 	5
# Submitted By: Maurice van Keulen (mvankeulen)
# Assigned to: 	Nobody/Anonymous (nobody)
# Summary: Refcount warnings in "varval"
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("# Date:\t\t2002-11-22 16:58\n");
#	mil.line("# Category: \tNone\n");
#	mil.line("# Group: \tNone\n");
#	mil.line("# Status: \tOpen\n");
#	mil.line("# Resolution: \tNone\n");
#	mil.line("# Priority: \t5\n");
#	mil.line("# Submitted By: Maurice van Keulen (mvankeulen)\n");
#	mil.line("# Assigned to: \tNobody/Anonymous (nobody)\n");
#	mil.line("# Summary: \tRefcount warnings in \"varval\"\n");
#	mil.line("#\n");
#	mil.line("# Initial Comment:\n");
#	mil.line("# The \"varval\"-function apparently contains a bug\n");
#	mil.line("# regarding reference counting. See example below:\n");
#	mil.line("");
#	bar := new(nil:int,nil:int);
#	mil.line("var bar:=new(int,int);");
#	aa_a := varval("bar");
#	ba_a := print(aa_a);
#
!ERROR: 'user.varval' undefined in user.main[25]
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  ($32:str)
#Predefined code segment 	# 2  ($34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  ($36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  ($38:str)
#A few guidelines to maximize usefullness. 	# 5  ($40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  ($42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  ($44:str)
#use the "mil_schema" for additional support routines 	# 8  ($46:str)
    mil.line("# Date:\t\t2002-11-22 16:58\n");	# 9 MILline ($47:void)<-($48:str)
    mil.line("# Category: \tNone\n");	# 10 MILline ($49:void)<-($50:str)
    mil.line("# Group: \tNone\n");	# 11 MILline ($51:void)<-($52:str)
    mil.line("# Status: \tOpen\n");	# 12 MILline ($53:void)<-($54:str)
    mil.line("# Resolution: \tNone\n");	# 13 MILline ($55:void)<-($56:str)
    mil.line("# Priority: \t5\n");	# 14 MILline ($57:void)<-($58:str)
    mil.line("# Submitted By: Maurice van Keulen (mvankeulen)\n");	# 15 MILline ($59:void)<-($60:str)
    mil.line("# Assigned to: \tNobody/Anonymous (nobody)\n");	# 16 MILline ($61:void)<-($62:str)
    mil.line("# Summary: \tRefcount warnings in \"varval\"\n");	# 17 MILline ($63:void)<-($64:str)
    mil.line("#\n");	# 18 MILline ($65:void)<-($66:str)
    mil.line("# Initial Comment:\n");	# 19 MILline ($67:void)<-($68:str)
    mil.line("# The \"varval\"-function apparently contains a bug\n");	# 20 MILline ($69:void)<-($70:str)
    mil.line("# regarding reference counting. See example below:\n");	# 21 MILline ($71:void)<-($72:str)
    mil.line("");	# 22 MILline ($73:void)<-($74:str)
    bar := bbp.new(nil:int,nil:int);	# 23 CMDBATnew (bar:bat[:int,:int])<-($76:int)($76:int)
    mil.line("var bar:=new(int,int);");	# 24 MILline ($77:void)<-($78:str)
    aa_a := user.varval("bar");	# 25  unknown (aa_a:any)<-($80:str)
    ba_a := io.print(aa_a);	# 26 IOprint_val (ba_a:int)<-(aa_a:any)
end main;	# 27  

# 22:47:51 >  
# 22:47:51 >  Done.
# 22:47:51 >  

