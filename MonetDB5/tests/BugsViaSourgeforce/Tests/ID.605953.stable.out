stdout of test 'ID.605953` in directory 'tests/BugsViaSourgeforce` itself:


# 20:59:58 >  
# 20:59:58 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=41087 --set sql_port=50141 --set monet_prompt= --trace --dbname=mTests_tests_BugsViaSourgeforce  ID.605953.mal </dev/null
# 20:59:58 >  





!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock.
!WARNING: BBPdir: initializing BBP.
# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugsViaSourgeforce
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
# marking a void-T table nil gives incorrect results. 
#
function user.main():int;	# 0  (main:int)
# Monet Mil to Mal compiler 	# 1  ($2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  ($4:str)
#Predefined code segment 	# 3  ($6:str)
#The compiler can not guarantee an accurate compilation, 	# 4  ($8:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  ($10:str)
#A few guidelines to maximize usefullness. 	# 6  ($12:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  ($14:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  ($16:str)
#use the "mil_schema" for additional support routines 	# 9  ($18:str)
    t := bbp.new(nil:oid,"nil:str");	# 10 CMDBATnew (t:bat[:oid,:str])<-($20:oid)($21:str)
    aa_a := calc.oid(0);	# 11 CALCint2oid (aa_a:oid)<-($23:int)
    ba_a := bat.insert(t,aa_a,"a");	# 12 BKCinsert_bun (ba_a:bat[:oid,:str])<-(t:bat[:oid,:str])(aa_a:oid)($25:str)
    ca_a := calc.oid(1);	# 13 CALCint2oid (ca_a:oid)<-($27:int)
    da_a := bat.insert(t,ca_a,"b");	# 14 BKCinsert_bun (da_a:bat[:oid,:str])<-(t:bat[:oid,:str])(ca_a:oid)($29:str)
    ea_a := calc.oid(2);	# 15 CALCint2oid (ea_a:oid)<-($31:int)
    fa_a := bat.insert(t,ea_a,"c");	# 16 BKCinsert_bun (fa_a:bat[:oid,:str])<-(t:bat[:oid,:str])(ea_a:oid)($33:str)
    ga_a := calc.oid(3);	# 17 CALCint2oid (ga_a:oid)<-($35:int)
    ha_a := bat.insert(t,ga_a,"d");	# 18 BKCinsert_bun (ha_a:bat[:oid,:str])<-(t:bat[:oid,:str])(ga_a:oid)($37:str)
    ia_a := calc.oid(4);	# 19 CALCint2oid (ia_a:oid)<-($39:int)
    ja_a := bat.insert(t,ia_a,"e");	# 20 BKCinsert_bun (ja_a:bat[:oid,:str])<-(t:bat[:oid,:str])(ia_a:oid)($41:str)
    ka_a := calc.oid(5);	# 21 CALCint2oid (ka_a:oid)<-($43:int)
    la_a := bat.insert(t,ka_a,"f");	# 22 BKCinsert_bun (la_a:bat[:oid,:str])<-(t:bat[:oid,:str])(ka_a:oid)($45:str)
    ma_a := calc.oid(6);	# 23 CALCint2oid (ma_a:oid)<-($47:int)
    na_a := bat.insert(t,ma_a,"g");	# 24 BKCinsert_bun (na_a:bat[:oid,:str])<-(t:bat[:oid,:str])(ma_a:oid)($49:str)
    oa_a := calc.oid(7);	# 25 CALCint2oid (oa_a:oid)<-($51:int)
    pa_a := bat.insert(t,oa_a,"h");	# 26 BKCinsert_bun (pa_a:bat[:oid,:str])<-(t:bat[:oid,:str])(oa_a:oid)($53:str)
    qa_a := algebra.markT(t,nil:oid);	# 27 ALGtmark (qa_a:bat[:oid,:void])<-(t:bat[:oid,:str])($55:oid)
    ra_a := io.print(t);	# 28 IOprint_val (ra_a:int)<-(t:bat[:oid,:str])
    t2 := bbp.new(nil:void,"nil:str");	# 29 CMDBATnew (t2:bat[:void,:str])<-($58:void)($59:str)
    sa_a := calc.oid(0);	# 30 CALCint2oid (sa_a:oid)<-($61:int)
    ta_a := bat.setSequenceBase(t2,sa_a);	# 31 BKCsetSequenceBase (ta_a:bat[:void,:str])<-(t2:bat[:void,:str])(sa_a:oid)
    ua_a := calc.oid(0);	# 32 CALCint2oid (ua_a:oid)<-($61:int)
    va_a := bat.insert(t2,ua_a,"a");	# 33 BKCinsert_bun (va_a:bat[:any,:str])<-(t2:bat[:void,:str])(ua_a:oid)($65:str)
    wa_a := calc.oid(1);	# 34 CALCint2oid (wa_a:oid)<-($67:int)
    xa_a := bat.insert(t2,wa_a,"b");	# 35 BKCinsert_bun (xa_a:bat[:any,:str])<-(t2:bat[:void,:str])(wa_a:oid)($69:str)
    ya_a := calc.oid(2);	# 36 CALCint2oid (ya_a:oid)<-($71:int)
    ab_a := bat.insert(t2,ya_a,"c");	# 37 BKCinsert_bun (ab_a:bat[:any,:str])<-(t2:bat[:void,:str])(ya_a:oid)($73:str)
    bb_a := calc.oid(3);	# 38 CALCint2oid (bb_a:oid)<-($75:int)
    cb_a := bat.insert(t2,bb_a,"d");	# 39 BKCinsert_bun (cb_a:bat[:any,:str])<-(t2:bat[:void,:str])(bb_a:oid)($77:str)
    db_a := calc.oid(4);	# 40 CALCint2oid (db_a:oid)<-($79:int)
    eb_a := bat.insert(t2,db_a,"e");	# 41 BKCinsert_bun (eb_a:bat[:any,:str])<-(t2:bat[:void,:str])(db_a:oid)($81:str)
    fb_a := calc.oid(5);	# 42 CALCint2oid (fb_a:oid)<-($83:int)
    gb_a := bat.insert(t2,fb_a,"f");	# 43 BKCinsert_bun (gb_a:bat[:any,:str])<-(t2:bat[:void,:str])(fb_a:oid)($85:str)
    hb_a := calc.oid(6);	# 44 CALCint2oid (hb_a:oid)<-($87:int)
    ib_a := bat.insert(t2,hb_a,"g");	# 45 BKCinsert_bun (ib_a:bat[:any,:str])<-(t2:bat[:void,:str])(hb_a:oid)($89:str)
    jb_a := calc.oid(7);	# 46 CALCint2oid (jb_a:oid)<-($91:int)
    kb_a := bat.insert(t2,jb_a,"h");	# 47 BKCinsert_bun (kb_a:bat[:any,:str])<-(t2:bat[:void,:str])(jb_a:oid)($93:str)
    lb_a := algebra.markT(t2,nil:oid);	# 48 ALGtmark (lb_a:bat[:oid,:void])<-(t2:bat[:void,:str])($95:oid)
    mb_a := io.print(lb_a);	# 49 IOprint_val (mb_a:int)<-(lb_a:bat[:oid,:void])
#Identifer 'seqbase' mapped to 'bat.setSequenceBase' 	# 50  ($98:str)
end main;	# 51  
#-----------------#
# BAT:	  tmp_25  #
# (oid)	  (void)  #
#-----------------#
[ 0@0,	  "a"	  ]
[ 1@0,	  "b"	  ]
[ 2@0,	  "c"	  ]
[ 3@0,	  "d"	  ]
[ 4@0,	  "e"	  ]
[ 5@0,	  "f"	  ]
[ 6@0,	  "g"	  ]
[ 7@0,	  "h"	  ]
#-----------------#
# BAT:	  tmp_26  #
# (void)  (oid)	  #
#-----------------#
[ 0@0,	  nil	  ]
[ 1@0,	  nil	  ]
[ 2@0,	  nil	  ]
[ 3@0,	  nil	  ]
[ 4@0,	  nil	  ]
[ 5@0,	  nil	  ]
[ 6@0,	  nil	  ]
[ 7@0,	  nil	  ]

# 22:47:51 >  
# 22:47:51 >  Done.
# 22:47:51 >  

