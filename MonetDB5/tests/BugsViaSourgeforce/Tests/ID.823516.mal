# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#var b := new(oid, int).rename("b");
	aa_a := new(:oid,:int);
	b := bat.setName(aa_a,"b");
#b.insert(oid(1), 1);
	ba_a := oid(1);
	ca_a := insert(b,ba_a,1);
#b.insert(oid(2), 2);
	da_a := oid(2);
	ea_a := insert(b,da_a,2);
#b.insert(oid(3), 3);
	fa_a := oid(3);
	ga_a := insert(b,fa_a,3);
#b.access(BAT_READ);
	BAT_READ:= mil.take("BAT_READ");
	ha_a := access(b,BAT_READ);
#var c := b.select(int(nil), int(nil)).rename("c");
	nil:= mil.take("nil");
	ia_a := int(nil);
	ja_a := int(nil);
	ka_a := select(b,ia_a,ja_a);
	c := bat.setName(ka_a,"c");
#print(b.info(),c.info());
	la_a := info(b,);
	ma_a := info(c,);
	na_a := print(la_a,ma_a);
#var pre  := view_bbp_name.copy().rename("pre");
	oa_a := copy(bbp.getNames,);
	pre := bat.setName(oa_a,"pre");
#b.histogram().print();
	pa_a := histogram(b,);
	qa_a := print(pa_a,);
#c.histogram().print();
	ra_a := histogram(c,);
	sa_a := print(ra_a,);
#c := 0;
	c := 0;
#b := 0;
	b := 0;
#var post := view_bbp_name.copy().rename("post");
	ta_a := copy(bbp.getNames,);
	post := bat.setName(ta_a,"post");
#kdiff(pre,post).print();
	ua_a := kdiff(pre,post);
	va_a := print(ua_a,);
#kdiff(post,pre).print();
	wa_a := kdiff(post,pre);
	xa_a := print(wa_a,);
#Identifer 'rename' mapped to 'bat.setName'
#Identifer 'view_bbp_name' mapped to 'bbp.getNames'
