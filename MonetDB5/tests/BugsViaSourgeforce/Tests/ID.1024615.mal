# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#var b1 := bat(oid,str);
	b1 := new(:oid,:str);
#b1.reverse().sort().reverse().print();
	aa_a := reverse(b1,);
	ba_a := sort(aa_a,);
	ca_a := reverse(ba_a,);
	da_a := print(ca_a,);
#b1.access(BAT_WRITE);
	BAT_WRITE:= mil.take("BAT_WRITE");
	ea_a := access(b1,BAT_WRITE);
#b1.reverse().sort().reverse().print();
	fa_a := reverse(b1,);
	ga_a := sort(fa_a,);
	ha_a := reverse(ga_a,);
	ia_a := print(ha_a,);
#var b2 := bat(void,str);
	b2 := new(:void,:str);
#b2.seqbase(oid(10));
	ja_a := oid(10);
	ka_a := bat.setSequenceBase(b2,ja_a);
#b2.reverse().sort().reverse().print();
	la_a := reverse(b2,);
	ma_a := sort(la_a,);
	na_a := reverse(ma_a,);
	oa_a := print(na_a,);
#b2.access(BAT_WRITE);
	pa_a := access(b2,BAT_WRITE);
#b2.reverse().sort().reverse().print();
	qa_a := reverse(b2,);
	ra_a := sort(qa_a,);
	sa_a := reverse(ra_a,);
	ta_a := print(sa_a,);
#var b3 := mirror(b2);
	b3 := mirror(b2);
#b3.print();
	ua_a := print(b3,);
#var b4 := b3.reverse().join(b2);
	va_a := reverse(b3,);
	b4 := join(va_a,b2);
#b4.print();
	wa_a := print(b4,);
#b4.reverse().sort().reverse().print();
	xa_a := reverse(b4,);
	ya_a := sort(xa_a,);
	ab_a := reverse(ya_a,);
	bb_a := print(ab_a,);
#var b2 := bat(void,str);
	b2 := new(:void,:str);
#b2.seqbase(oid(10));
	cb_a := oid(10);
	db_a := bat.setSequenceBase(b2,cb_a);
#var b3 := mirror(b2);
	b3 := mirror(b2);
#var b4 := b3.reverse().join(b2);
	eb_a := reverse(b3,);
	b4 := join(eb_a,b2);
#b4.reverse().sort().reverse().print();
	fb_a := reverse(b4,);
	gb_a := sort(fb_a,);
	hb_a := reverse(gb_a,);
	ib_a := print(hb_a,);
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
