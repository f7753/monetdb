# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#
	b := new(:int,:int);
#VAR b := new(int,int);
	n := 10;
#VAR n := 10;
	i := 0;
#
barrier	aa_a := true;
barrier	ba_a := <(i,n);
#	i :+= 1;
	ca_a := insert(b,i,i);
redo	aa_a;
exit	ba_a;
exit	aa_a;
#}
	BAT_READ:= mil.take("BAT_READ");
	da_a := access(b,BAT_READ);
#
	ea_a := rangesplit(b,0);
	fa_a := print(ea_a);
#print(rangesplit(b,0));
	ga_a := rangesplit(b,-1);
	ha_a := print(ga_a);
#print(rangesplit(b,-1));
	ia_a := rangesplit(b,1);
	ja_a := print(ia_a);
#print(rangesplit(b,1));
	ka_a := rangesplit(b,2);
	la_a := print(ka_a);
#print(rangesplit(b,2));
	ma_a := rangesplit(b,5);
	na_a := print(ma_a);
#print(rangesplit(b,5));
	oa_a := rangesplit(b,n);
	pa_a := print(oa_a);
#print(rangesplit(b,n));
	qa_a := +(n,1);
	ra_a := rangesplit(b,qa_a);
	sa_a := print(ra_a);
#
	ta_a := hashsplit(b,0);
	ua_a := print(ta_a);
#print(hashsplit(b,0));
	va_a := hashsplit(b,-1);
	wa_a := print(va_a);
#print(hashsplit(b,-1));
	xa_a := hashsplit(b,2);
	ya_a := print(xa_a);
#print(hashsplit(b,2));
	ab_a := hashsplit(b,5);
	bb_a := print(ab_a);
#print(hashsplit(b,5));
	cb_a := hashsplit(b,1);
	db_a := print(cb_a);
#print(hashsplit(b,1));
	eb_a := hashsplit(b,n);
	fb_a := print(eb_a);
#print(hashsplit(b,n));
	gb_a := +(n,1);
	hb_a := hashsplit(b,gb_a);
	ib_a := print(hb_a);
