# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#module("unix","ascii_io");
	TTD := getenv("TSTTRGDIR");
#
	b := new(:oid,:str);
#var b:=new(oid,str);
	aa_a := +(TTD,"/ID.642351.b.txt");
	ba_a := import(b,aa_a);
#b.import(TTD + "/ID.642351.b.txt");
	ca_a := print(b,);
#b.print();
	c := new(:oid,:oid);
#var c:=new(oid,oid);
	da_a := +(TTD,"/ID.642351.c.txt");
	ea_a := import(c,da_a);
#c.import(TTD + "/ID.642351.c.txt");
	fa_a := print(c,);
#c.print();
	d := kintersect(c,b);
#var d:=c.kintersect(b);
	ga_a := print(d,);
#d.print();
barrier	ha_a := bunStream(d,ha_aH,ha_aT);
	ia_a := find(b,ha_aH);
	ja_a := print(ia_a,);
redo	ha_a;
exit	ha_a;
#
	DBGMSK := debugmask();
#var DBGMSK := debugmask();
	ka_a := or(DBGMSK,2097152);
	la_a := debugmask(ka_a);
#debugmask(or(DBGMSK,2097152));
	e := kintersect(c,b);
#var e:=c.kintersect(b);
	ma_a := debugmask(DBGMSK);
#debugmask(DBGMSK);
	na_a := print(e,);
#e.print();
barrier	oa_a := bunStream(e,oa_aH,oa_aT);
	pa_a := find(b,oa_aH);
	qa_a := print(pa_a,);
redo	oa_a;
exit	oa_a;
