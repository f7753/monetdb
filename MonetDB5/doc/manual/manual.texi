\input texinfo
@c %**start of header
@setfilename MonetDB
@c %**end of header

@c environment
@set VERSION 5.0
@set UPDATED 14/08/2005

@copying
     This file documents the MonetDB Version @value{VERSION} Reference Manual
     
Last updated: @value{UPDATED}

     Copyright (C) 2000-2005 CWI
     
     Permission is granted to make and distribute verbatim
     copies of this manual provided the copyright notice and
     this permission notice are preserved on all copies.
     
@end copying

@titlepage
@title MonetDB Reference Manual
@subtitle Version @value{VERSION}
@author @emph{The MonetDB Development Team}
@page
@vskip 0pt plus 1fill
@c the following start the copy right page
@insertcopying
@end titlepage

@iftex
@contents
@end iftex

@ifnottex

@page
@node Top, TOC,  , 
@top MonetDB Reference Manual
@include Assets/General-information.texi

@node TOC, About this manual, Top,(Dir)
Table of contents
@menu
* TOC::
* About this manual::
@menu
* Intended audience::
* Features and Limitations::
@menu
* When to consider MonetDB::
* When not to consider MonetDB::
@end menu
* The History of MonetDB::
* Manual Generation::
* Conventions and notation::
@end menu

* Installation ::

* MonetDB overview ::
@menu
* Architecture overview:: 
* Design considerations:: 
* MAL synopsis:: 
* Backward compatibility:: 
* Scenario management::
@menu
* Client administration::
* Session scenarios::
* MAL execution:: 
@end menu
@end menu


* SQL ::

* XQuery ::

* MonetDB Assembler Language::
@menu
* MAL constants::
* MAL variables::
* MAL instructions::
* Flow of control::
* Instruction Records::
* Before-after calls::
* The parser::
* Reverse programming::
* Function definitions::
* Factory definitions::
* Bootstrap::
* Modules::
* MAL interpreter::
* Atom types::
* Type resolution::
* Boxed variables::
* Property management::
* Optimizer framework::
* Name space management::
* Appendices::
@end menu

* Optimizer landscape::
* Optimizer framework::
@menu
* Alias Removal::
* Dead Code Removal::
* Accumulator Evaluations::
* Heuristic Rewrite Rules::
* Common Sub-Expression Removal::
* Empty Set Reduction::
* Singleton Set Replacement::
* Peephole Optimization::
* Multiplex Compiler::
* Garbage Collector::
* Code Factorization::
* Partitioned Database Optimizer::
* Strength Reduction::
* Costmodels::
* Variable Stack Reduction::
@end menu
* Program Debugging::
@menu
* The MAL Debugger::
* Handling Breakpoints::
* Runtime Inspection::
@end menu
* Execution Profiling::
@menu
* Event Filtering ::
* Event Caching::
@end menu

--- Extension modules ---

--- The BAT kernel ---
@end menu

@end ifnottex

@node About this manual, Features and Limitations, TOC , TOC
@include Assets/About-this-manual.texi

@include Assets/Features.texi
@include Assets/History.texi
@include Assets/Conventions.texi

@node Installation, MonetDB overview, The History of MonetDB, TOC
@include mal_session.bdy.texi

@node MonetDB overview, Design considerations, Installation, TOC

@include mal.bdy.texi

@node Session scenarios , Scenario management , Backward compatibility, MonetDB overview
@include mal_scenario.bdy.texi

@node Client administration, SQL, Scenario management, MonetDB overview
@include mal_client.bdy.texi

@node SQL, XQuery, Client administration, TOC
@include Assets/SQLoverview.texi

@node XQuery, MonetDB Assembler Language, SQL, TOC
@include Assets/XQueryOverview.texi

@node MonetDB Assembler Language, Function definitions, XQuery , TOC
@menu
* Function definitions::
* Factory definitions::
* Bootstrap::
* Atom types::
* Type resolution::
* Boxed variables::
* Name space management::
* Property management::
* Modules::
@end menu
@include mal_instruction.bdy.texi

@node Function definitions, Factory definitions ,MonetDB Assembler Language , MonetDB Assembler Language
@include mal_function.bdy.texi

@node Factory definitions, Bootstrap , Function definitions, MonetDB Assembler Language
@include mal_factory.bdy.texi

@node Bootstrap , Atom types ,Factory definitions, MonetDB Assembler Language
@include mal_linker.bdy.texi

@node Atom types, Type resolution, Bootstrap, MonetDB Assembler Language
@include mal_atom.bdy.texi

@node Type resolution, Boxed variables, Atom types, MonetDB Assembler Language
@include mal_type.bdy.texi
@include mal_resolve.bdy.texi

@node Boxed variables, Name space management , Type resolution, MonetDB Assembler Language
@include mal_box.bdy.texi

@node Name space management, Property management, Boxed variables , MonetDB Assembler Language
@include mal_namespace.bdy.texi
@include mal_module.bdy.texi

@node Property management,  Modules, Name space management, MonetDB Assembler Language
@include mal_properties.bdy.texi
@include mal_parser.bdy.texi

@node Modules , MAL interpreter , Property management, MonetDB Assembler Language
@include mal_import.bdy.texi

@node MAL interpreter, Optimizer landscape, Modules, TOC
@include mal_interpreter.bdy.texi
@include mal_stack.bdy.texi

@node Optimizer landscape, Optimizer framework, MAL interpreter, TOC
@include mal_optimizer.bdy.texi
@include mal_commonExpressions.bdy.texi
@include mal_emptyset.bdy.texi
@include mal_singleton.bdy.texi
@include mal_peephole.bdy.texi
@include mal_multiplex.bdy.texi
@include mal_garbageCollector.bdy.texi
@include mal_factorize.bdy.texi
@include mal_partitionedQuery.bdy.texi
@include mal_strengthReduction.bdy.texi
@include mal_costmodel.bdy.texi
@include mal_reduce.bdy.texi

@node Program Debugging, The MAL Debugger, Variable Stack Reduction, TOC
@include mal_debugger.bdy.texi

@node Execution Profiling, Event Filtering, Runtime Inspection, TOC
@include mal_profiler.bdy.texi

@node Appendices,, Event Caching, TOC
@include Assets/MALsyntax.texi
@ifnottex
@include mal_syntax.bdy.texi
@end ifnottex



@bye
