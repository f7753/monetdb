@t MAL instruction blocks
@a M. Kersten
@v 0.0
@+ MAL instruction layout
MAL instruction sequences have a simple format.
The operation is either an assignment "variable := module.fcn(a1..a32)"
where the actual function arguments are references to variables on the
runtime variable stack, or reference to a MAL control statement, 
i.e. RAISE, CATCH, RETURN, BARRIER, LEAVE,REDO

A sequence of instructions is represented by a variable, instruction,
and program stmt block.
The variable block is the symbol table associated with the 
instruction sequence.
Each tuple contain a reference to the argument name ,
a reference to a lexical value when it denotes a constant,
its associated Mal type identifier.
Upon procedure return, the variable block is inspected to find
objects eligable for garbage collection (e.g. strings).

The instruction block is a large code byte string overlaid with the
instruction pattern InstrPattern. This method leads to a large
allocated block, which can be easily freed, and
pattern makes it possible to accommodate a variable argument list.
Each argument list starts with a reference to the destination variable. 

An array of byte-offsets into the code byte string provides for fast
access to any statement.

Variable- and stmt- block together describe the
static part of a MAL procedure. It carries carry enough information to produce
a listing and to aid symbolic debugging. Ideally, the listing
of a MAL program is identical to the non-commented source.
This costs some space, but will improve readability and permits
instruction sequences generated internally also to be kept
around as ascii text for later inclusion.

WARNING. The way we lay out the instructions means that 
you can prepare only one instruction at a time, because you don't
know how many arguments may be needed.

A variable binding may become CONSTANT for the duration of its
life time.

The instruction records contain three optional pointers to functions:
beforeCall, afterCall, and finalCall. They are bound to the result type.
All expect a pointer to a VALrecord. The beforeCall is activated
just before you enter a routine and can be used to initialize
the stackframe, perform debugging, etc.etc.
The afterCall is activated after a successful return and can be
used to finalize the administration.
Typical use of beforeCall and afterCall are handling of BAT references,
but they can also be used to update a front-end.
The finalCall is activated when the scope in which the object is
used is terminated. This may require garbage collection actions.

[Think, should beforeCall/afterCall also become part of the MAL functions?]
@h
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.
html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 */
#ifndef _MAL_INSTR_H
#define _MAL_INSTR_H

#include "mal_type.h"
#include "mal_stack.h"

#ifdef MALprofiler
#ifdef HAVE_SYS_TIMES_H
# include <sys/times.h>
#endif
#endif


#define DEBUG_MAL_INSTR
#define MAXARG 16
#define MAXSTMTS 32
#define MAXVARS 32

typedef struct SYMDEF {
        struct SYMDEF   *peer;  /* where to look next */
        str     name;
        int	kind;
        struct MALBLK   *def;    /* the details of the MAL fcn */
} *Symbol, SymRecord;

typedef struct{
	str     name;	/* argname or lexical value repr */
	malType	type;	/* internal type signature */
        bit	isaconstant;	/* value cannot change */
	int	isused;	/* for stack copying scope */
	short	garbage;/* remove upon function return */
	str	literal;/* initial value string */
	ValRecord value;
} *VarPtr, VarRecord;

/* type check status is kept around to improve type checking efficiency */
#define TYPE_ERROR		-1
#define TYPE_UNKNOWN            0
#define TYPE_DYNAMIC            1
#define TYPE_POLYMORPHIC        2
#define TYPE_FIXED              4

typedef struct {
	short	token;		/* instruction type */
	short	barrier;	/* Begin-end of block indicator*/
	short	typechk;	/* type check status */
@-
For performance analysis we keep track of the number of calls
and the total time spent while executing the instruction.
(See mal_profiler.mx)
@h
#ifdef MALprofiler
	short	trace;		/* facilitate filter-based profiling */
	struct  tms timer;	/* clock information */
	long	clk;		/* microseconds clock */
	long	counter;
	long	ticks;		/* micro seconds spent */
#endif
	GDKfcn	fcn;		/* resolved function address */
	GDKfcn  beforeCall;	/* do something with the target object */
	GDKfcn  afterCall;	/* do something with the result object */
	GDKfcn  finalCall;	/* garbage collect a value */
	struct MALBLK *blk;	/* resolved MAL function address */
	int	jump;		/* controlflow program counter */
@-
The MAL instruction representation. The strings should be garbage collected
upon destruction of the definition.
@h
	str	modname;	/* module context */
	str	fcnname;	/* function name */
	short	polymorphic;	/* complex type analysis */
	short	varargs;	/* variable number of arguments */
	short	argc,retc;	/* total and result argument count */
	int	argv[1];	/* at least one entry */
} *InstrPtr, InstrRecord;

typedef struct MALBLK{
	str	binding;/* related C-function */
        str     help;   /* supportive commentary */
	int	vtop;		/* next free slot */
	int	vsize;	/* size of variable arena */
	VarRecord  **var;	/* Variable table */
	int	stop;		/* next free slot */
	int	ssize;	/* byte size of arena */
	InstrPtr *stmt;	/* Instruction location */
	int	errors;	/* left over errors */
} *MalBlkPtr, MalBlkRecord;

@-
Allocation of space assumes a rather exotic number of arguments.
@h
#define getInstrPtr(M,I)	(M)->stmt[I]
#define getSignature(S)		getInstrPtr((S)->def,0)
#define getFcnName(M)	getInstrPtr(M,0)->fcnname
#define getArgCount(M)	getInstrPtr(M,0)->argc
#define getModName(M)	getInstrPtr(M,0)->modname 
#define getPrgSize(M)	(M)->stop

#define getVar(M,I)		(M)->var[I]
#define getVarName(M,I)  	(M)->var[I]->name
#define getVarLiteral(M,I) 	(M)->var[I]->literal
#define isVarConstant(M,I)	((M)->var[I]->isaconstant)
#define isVarUsed(M,I) 		((M)->var[I]->isused)
#define isVarGarbage(M,I)  	((M)->var[I]->garbage)
#define getVarConstant(M,I) 	((M)->var[I]->value)
#define copyVar(M,I,J)	freeVariable(M,I);(M)->var[I] = (M)->var[J];\
		(M)->var[J]= NULL;

#define setDestType(M,P,V) 	setVarType((M),(P)->argv[0],V)
#define getDestType(M,P) 	destinationType((M),(P))
#define getArgName(M,P,I) 	getVarName((M),(P)->argv[I])
#define getArgType(M,P,I) 	getVarType((M),(P)->argv[I])
#define getArgDefault(M,P,I)	getVarLiteral((M),(P)->argv[I])

mal_export InstrPtr	newInstruction(int kind);
mal_export InstrPtr 	copyInstruction(InstrPtr p);
mal_export void 	moveInstruction(InstrPtr dst, InstrPtr src);
mal_export void		clrInstruction(InstrPtr p);
mal_export void		freeInstruction(InstrPtr p);
mal_export Symbol	newSymbol(str nme, int kind);
mal_export void 	freeSymbol(Symbol s);
mal_export void 	freeSymbolList(Symbol s);
mal_export MalBlkPtr	newMalBlk();
mal_export void		freeMalBlk(MalBlkPtr mb);
mal_export MalBlkPtr	copyMalBlk(MalBlkPtr);
mal_export void		expandMalBlk(MalBlkPtr mb, int lines);
mal_export void		trimMalBlk(MalBlkPtr mb);

mal_export int		findVariable(MalBlkPtr mb, str name);
mal_export int		findVariableLenght(MalBlkPtr mb, str name,int len);
mal_export malType	getType(MalBlkPtr mb, str nme);
mal_export int		newVariable(MalBlkPtr mb, str name,malType type);
mal_export void		copyVariable(MalBlkPtr dst,MalBlkPtr src, VarPtr v);
mal_export int		newTmpVariable(MalBlkPtr mb, malType type);
mal_export void		freeVariable(MalBlkPtr mb, int varid);
mal_export int		newConstant(MalBlkPtr mb, malType type, str val, int f);
mal_export int		isVARG(MalBlkPtr mb, InstrPtr p, int i);
mal_export int		isaSignature(InstrPtr p);

mal_export void		pushInstruction(MalBlkPtr mb, InstrPtr p);
mal_export void 	pushArgumentId(MalBlkPtr mb, InstrPtr p, str name);
mal_export void		delArgument(InstrPtr p, int varid);
mal_export int		getVarType(MalBlkPtr mb, int i) ;
mal_export void		setVarType(MalBlkPtr mb, int i, int tpe);
mal_export void		setArgType(MalBlkPtr mb, InstrPtr p, int i, int tpe);
mal_export void		setReturnArgument(InstrPtr p, int varid);
mal_export malType	destinationType(MalBlkPtr mb, InstrPtr p);
mal_export str		getDestName(MalBlkPtr mb, InstrPtr p);
mal_export void 	printInstruction(FILE *fd, MalBlkPtr mb,InstrPtr p);
mal_export void		promptInstruction(FILE *fd, MalBlkPtr mb,InstrPtr p);
mal_export str		instruction2str(MalBlkPtr mb,InstrPtr p,int hidden);


mal_export void strBeforeCall(ValPtr v,ValPtr bak);
mal_export void strAfterCall(ValPtr v,ValPtr bak);
mal_export void strFinalCall(ValPtr v);
mal_export void batFinalCall(ValPtr v);
mal_export void batBeforeCall(ValPtr v,ValPtr bak);
mal_export void batAfterCall(ValPtr v,ValPtr bak);
#endif /*  _MAL_INSTR_H*/
@c
#include "mal_instruction.h"

Symbol newSymbol(str nme, int kind){
	Symbol cur;
	if( nme == NULL){
		GDKfatal("@1:unexpected name (=null)\n");
	}
        cur = (Symbol) GDKmalloc(sizeof(SymRecord));
	if( cur == NULL){
		GDKfatal("@1: cannot initialize scope\n");
	}
	bzero((str)cur,sizeof(SymRecord));
	cur->name = nme;
	cur->kind = kind;
	cur->peer = NULL;
	cur->def = newMalBlk();
	return cur;
}
void freeSymbol(Symbol s){
        if(s==NULL) return;
        if( s->name) { GDKfree(s->name); s->name = NULL;}
        if( s->def) { freeMalBlk(s->def);s->def = NULL;}
        GDKfree(s);
}
void freeSymbolList(Symbol s){
	Symbol t= s;
	while(s){
		t= s->peer;
		s->peer= NULL;
		freeSymbol(s);
		s=t;
	}
}
 
MalBlkPtr newMalBlk(){
	MalBlkPtr mb;
	VarPtr *v;
	char *c;
	InstrPtr *p;

	v = (VarPtr *)GDKmalloc(sizeof(VarPtr) * MAXVARS);
	if( v== NULL )
		GDKfatal("newMalBlk:could not get variable storage\n");
	bzero(v, sizeof(VarPtr) * MAXVARS);
	p = (InstrPtr *)GDKmalloc(sizeof(InstrPtr) * MAXSTMTS);
	if( p== NULL )
		GDKfatal("newMalBlk:could not get instruction storage\n");
	bzero((char *)p, sizeof(InstrPtr) *MAXSTMTS);
	mb = (MalBlkPtr) GDKmalloc(sizeof(MalBlkRecord));
	if( mb== NULL )
		GDKfatal("newMalBlk:could not get storage\n");

	mb->var = v; mb->vtop = 0; mb->vsize = MAXVARS;
	mb->stmt = p; mb->stop = 0; mb->ssize = MAXSTMTS;
	mb->help = mb->binding= NULL;
	mb->errors = 0;
	return mb;
}

void freeMalBlk(MalBlkPtr mb){
	int i;
	for(i=0;i<mb->stop; i++)
		freeInstruction(getInstrPtr(mb, i));
	for(i=0;i<mb->vtop; i++)
		freeVariable(mb, i);
	GDKfree(mb->stmt); 
	GDKfree(mb->var); 
	if( mb->binding) GDKfree(mb->binding); 
	if( mb->help) GDKfree(mb->help); 
	GDKfree(mb);
}
@-
The routine below should assure that all referenced structures
are private. The copying is memory conservative.
@c
MalBlkPtr copyMalBlk(MalBlkPtr old){
	MalBlkPtr mb;
	int i;

	mb = (MalBlkPtr) GDKmalloc(sizeof(MalBlkRecord));
	if( mb== NULL )
		GDKfatal("newMalBlk:could not get storage\n");
	bzero((char *) mb, sizeof(MalBlkRecord));
	mb->var = (VarPtr *)GDKmalloc(sizeof(VarPtr) * old->vsize);
	if( mb->var== NULL )
		GDKfatal("newMalBlk:could not get variable storage\n");
	mb->vsize = old->vsize;
	memcpy((char*) mb->var, old->var, sizeof(VarPtr) * old->vsize);

	mb->vtop = 0;
	for(i=0;i<old->vtop;i++){
		copyVariable(mb,old,getVar(old,i));
		mb->vtop++;
	}

	mb->stmt = (InstrPtr *)GDKmalloc(sizeof(InstrPtr) * old->ssize);
	if( mb->stmt== NULL )
		GDKfatal("newMalBlk:could not get instruction storage\n");
	bzero((char*) mb->stmt, sizeof(InstrPtr) * old->ssize);
	mb->stop = old->stop;
	mb->ssize = old->ssize;
	for(i=0; i<old->stop;i++)
		mb->stmt[i] = copyInstruction(old->stmt[i]);

	mb->help = old->help?GDKstrdup(old->help): NULL;
	mb->binding = old->binding?GDKstrdup(old->binding): NULL;
	mb->errors= old->errors;
	return mb;
}
@-
The MalBlk structures potentially consume a lot a of space, because it
is not possible to precisely estimate the default sizes of the var and stmt
components. The routines below provide a mechanism to handle the issue.
The expandMalBlk routine takes the number of new-lines as a parameter
and guesses the size of variable and statement table.

Experience shows that trimming leads to memory fragmentation (140K lost
after Mserver init) and is therefore turned off.
@c
void trimexpand(MalBlkPtr mb, int varsize, int stmtsize){
	VarRecord **v;
	InstrPtr *stmt;
	int len;

	if( varsize<0 || stmtsize<0)
		GDKfatal("trimexpand: illegal arguments\n");
	len = sizeof(ValPtr)* (mb->vtop+varsize);
	v= (VarRecord **) GDKmalloc(len);
	if( v== NULL)
		GDKfatal("newMalBlk:could not get variable storage\n");

	bzero((char*) v, len);
	memcpy((str) v, (str) mb->var, sizeof(ValPtr) * mb->vtop);
	GDKfree(mb->var);
	mb->var = v;
	mb->vsize = mb->vtop+varsize;

	len = sizeof(InstrPtr) * (mb->ssize+stmtsize);
	stmt = (InstrPtr *)GDKmalloc(len);
	if( stmt== NULL )
		GDKfatal("newMalBlk:could not get instruction storage\n");
	bzero((char*) stmt, len);
	memcpy((str) stmt, (str) mb->stmt, sizeof(InstrPtr) * mb->stop);
	GDKfree(mb->stmt);
	mb->stmt= stmt;
	mb->ssize = mb->ssize + stmtsize;
}
void expandMalBlk(MalBlkPtr mb, int lines){
	trimexpand(mb,lines*1.1,lines);
}
void trimMalBlk(MalBlkPtr mb){
 /* printf("safe %d %d\n",mb->vtop, (mb->vsize-mb->vtop)*sizeof(VarPtr));
	trimexpand(mb,0); */
}

InstrPtr newInstruction(int kind){
	InstrPtr p;
	int space;

	space = (MAXARG-1) * sizeof(int)+ sizeof(InstrRecord);
	p = GDKmalloc(space);
	p->token = kind;
	p->barrier= 0;
	p->typechk = TYPE_UNKNOWN;
	p->modname= NULL;
	p->fcnname= NULL;
	p->beforeCall = p->afterCall = p->finalCall= 0;
	p->fcn= NULL;
	p->blk= NULL;
	p->polymorphic = 0;
	p->varargs = 0;
	p->argc= 1;
	p->retc= 1;
	p->argv[0] = -1;	/* watch out for direct use in variable table*/
#ifdef MALprofiler
	p->timer.tms_utime = 0;
	p->timer.tms_stime = 0;
	p->timer.tms_cutime = 0;
	p->timer.tms_cstime = 0;
	p->clk = 0;
	p->ticks = 0;
	p->trace= 0;
	p->jump=0;
	p->counter= 0;
#endif
	return p;
}

@- 
Copying an instruction is space conservative.
@c
void moveInstruction(InstrPtr new, InstrPtr p){
	int space;

	space = sizeof(InstrRecord) + sizeof(int) * p->argc;
	memcpy((char*) new, (char*) p, space);
	new->fcnname = p->fcnname? GDKstrdup(p->fcnname): NULL;
	new->modname = p->modname? GDKstrdup(p->modname): NULL;
}
InstrPtr copyInstruction(InstrPtr p)
{
	InstrPtr new;
	new = (InstrPtr) GDKmalloc(sizeof(InstrRecord) + sizeof(int) * p->argc);
	moveInstruction(new,p);
	return new;
}
void clrInstruction(InstrPtr p){
	if(p->modname) GDKfree(p->modname);
	if(p->fcnname) GDKfree(p->fcnname);
	bzero((char*)p, sizeof(InstrRecord)+ (p->argc-1)*sizeof(int));
}
void freeInstruction(InstrPtr p){
	clrInstruction(p);
	GDKfree(p);
}


@-
Beware that the first argument of a signature is reserved for the function
return type , which should be equal to the destination variable type.

VarRecords are allocated on the variable stack.
Their index is returned for future reference.
@-
Use the information that a variable is at least one character
wide and terminated by a null-byte.
This means that we can speed up search when the variables
differ in the first two characters
@c
int findVariable(MalBlkPtr mb, str name){
	register int i;
	for(i= mb->vtop-1; i>=0; i--)
	if(idcmp(name, getVarName(mb,i) )==0)
		return i;
	return -1;
}
@-
The second version of findVariable assumes you have not
yet allocated a private structure. This is particularly
usefull during parsing, because most variables are already
defined. This way we safe GDKmalloc/GDKfree.
@c
int findVariableLength(MalBlkPtr mb, str name, int len){
	register int i;
	register int j;
	for(i= mb->vtop-1; i>=0; i--) {
		str s = getVarName(mb,i);
		for(j=0;j<len;j++)
		if( name[j]!=s[j]) break;
		if(j==len && s[j]==0) return i;
	}
	return -1;
}
@-
Note that getType also checks for type names directly.
They have preference over variable names.
@c
malType getType(MalBlkPtr mb, str nme){
	int i;
	i= findVariable(mb,nme);
	if( i< 0) return getTypeIndex(nme);
	if( i>=0) return getVarType(mb,i);
	return TYPE_any;
}
@-
All variables are implicitly declared upon their first
assignment. 
COMMANDS can FUNCTIONS should pass the types as strings and
convert them later on to the internal representation.

Lexical constants require some care. They typically appear as arguments
in operator/function calls. To simplify program analysis later on,
we stick to the situation that function/operator arguments are always
references to by variables. 

Beware, the symbol table structure assumes that it is relatively
cheap to perform a linear search to a variable or constant.

@c
int newVariable(MalBlkPtr mb, str name, malType type){
        int n,l;
	int atomary= FALSE;
        
	if( mb->vtop == mb->vsize){
		VarPtr *new;
		int s= mb->vtop + MAXVARS;
		new= (VarPtr *) GDKmalloc(s * sizeof(VarPtr));
		/*printf("generate new variable block %d\n",s);*/
		if( new== NULL ){
			mb->errors++;
			GDKerror("newMalBlk:no storage left\n");
			return mb->vtop;
		}
		bzero(new, s * sizeof(VarPtr));
		memcpy((char*)new, (char*)mb->var, sizeof(VarPtr) * mb->vtop);
		GDKfree((str)mb->var);
		mb->vsize= s;
		mb->var= new;
	} else if (mb->vtop >mb->vsize)
		GDKfatal("newVariable:variable administration\n");
	n= findVariable(mb,name);
	/* check for type names */
	if( n>=0){
		if( type != TYPE_any){
		    if( getVarType(mb,n) != type  &&
		        getVarType(mb,n) != TYPE_any)
			GDKerror("'%s' type mismatch %d vs %d\n",
				name, getVarType(mb,n),type);
		}
		GDKfree(name);  /*possible error not correct, check use!!!*/
		return n;
	}
@-
If we encounter a Monet type name, it is added to the symbol table with 
proprietary type.
The makes analyses of patterns like bat(int,str) easier.
@c
	if( *name == TMPMARKER) l= TYPE_any; else l = getTypeIndex(name);
	if( l>= 0 && l != TYPE_any){
		if( type != l && type != TYPE_any){
			GDKerror("'%s' type mismatch with %d\n", name, type);
			GDKfree(name);  
			name = newTmpName(mb->vtop);
		}
		if( isaBatType(l)){
			GDKfree(name);
			name = malTypeName(l);
		}
		type = l;
		atomary= TRUE;
	}
	n = mb->vtop;
	getVar(mb,n) = (VarPtr) GDKmalloc(sizeof(VarRecord));
	bzero( (str) getVar(mb,n), sizeof(VarRecord));
	getVarName(mb,n) = name;
	setVarType(mb,n,type);
	getVarLiteral(mb,n)= NULL;
	isVarConstant(mb,n) = atomary;
	isVarGarbage(mb,n) = FALSE;
	if( atomary){
		getVarConstant(mb,n).val.ival = type;
		getVarConstant(mb,n).vtype = TYPE_int;
	}
	isVarUsed(mb,n) = FALSE;
	mb->vtop++;
	return n;
} 
int newTmpVariable(MalBlkPtr mb, malType type){
	str name = newTmpName(mb->vtop);
	return newVariable(mb,name,type);
}
void	copyVariable(MalBlkPtr dst, MalBlkPtr src, VarPtr v){
	VarPtr w;

	w = (VarPtr) GDKmalloc(sizeof(VarRecord));
	bzero( (str) w , sizeof(VarRecord));
        w->name = GDKstrdup(v->name);
        w->type = v->type;
        w->garbage = v->garbage;
        w->literal= v->literal? GDKstrdup(v->literal):NULL;
        w->isaconstant = v->isaconstant;
        w->isused = v->isused;
	VALcopy(&w->value,&v->value);
	dst->var[dst->vtop]= w;
}
void freeVariable(MalBlkPtr mb, int varid){
	VarPtr v;
	v= getVar(mb,varid);
	if(v== NULL ) return;
	if(v->name ==0) return;
	if( v->name) GDKfree(v->name); v->name = 0;
	if( v->literal) GDKfree(v->literal); v->literal= 0;
	if( isVarConstant(mb,varid)) VALclear(&v->value);
	GDKfree(getVar(mb,varid));
	getVar(mb,varid) = NULL;
}
@- Constants
Constants are stored in the symbol table and referenced
by a variable identifier in the MAL sequence.
This means that per MAL instruction, we may end up with
MAXARG entries in the symbol table. This may lead to long
searches for variables.
An optimization strategy: look around for
a similar (constant) definition and reuse the name.
This also avoids an exploding symbol table with a lot
of temporary variables (as in tst400cHuge)

But then the question becomes how far to search?
Searching through all variables is only useful when the list remains short
or when the constant-variable-name is easily derivable from its literal
value and a hash-based index leads you quickly to it.

For the time being, we use a MAL system parameter, MAL_VAR_WINDOW,
to indicate the number of symbol table entries to consider.
Setting it to >= MAXARG will at least capture repeated use of a constant
within a single function call or repeated use within a small block
of code.

Beware that the string representation does not elicit the precise
basic type. In particular, integer constants appear in  several
kinds. The most precise one should be defined to make type
analysis work properly.

The final step is to prepare a GDK value record, from which
the internal representation can be obtained during
MAL interpretation.
@c
#define MAL_VAR_WINDOW	2*MAXARG

int newConstant(MalBlkPtr mb, malType type, str val, int niltst){
	int i,k,idx,parsetype=type;
	str s;
	ValPtr vr;
	int tonil= FALSE;

	k= mb->vtop - MAL_VAR_WINDOW;
	if( k<0) k=0;
	for(i= mb->vtop-1; i>=k;i--){
		VarPtr v= getVar(mb,i);
		if( v->literal && 
		    v->type == type &&
		    idcmp(v->literal,val)==0 ) {
			GDKfree(val);
			return i;
		}
	}
	idx= k= newVariable(mb, s=newTmpName(mb->vtop), type);
/* printf("new constant %d val %s\n",k,val);*/
	getVarLiteral(mb,k)= val;
	isVarConstant(mb,k) = 1;
	isVarUsed(mb,k) = 0;
	vr = &getVarConstant(mb,k);
@-
The current GDK layer does not perform a value range check.
Since constants are dealt with only once, it is performed here
as part of the parsing overhead.
Note that we support automatic coercion to a 
coerced type even in the case that a specific type specifier
has been given at the language level. A Warning is issued
to make the user aware of this situation.
@c
	tonil= niltst && strcmp(val,"nil")==0;
	 /*switch( BATatoms[type].storage){*/
retryConstant:
	switch( parsetype){ 
	case TYPE_bit: { int x;
			 x= val[0]=='t' || val[0]=='T';
			 vr->vtype= TYPE_bit;
			 if( tonil) vr->val.ival = bit_nil; 
			 else vr->val.ival= x;
			 break;
			}
	case TYPE_chr: 
			vr->vtype= TYPE_chr;
			vr->val.cval[0]= val[0];
			vr->val.cval[1]= 0;
			vr->val.cval[2]= 0;
			vr->val.cval[3]= 0;
			if( tonil) vr->val.cval[0] = chr_nil; 
			break;
	case TYPE_sht: {long l= strtol(val,NULL,0);
			vr->vtype = type;
			if( tonil){ 
				if(type== TYPE_sht) vr->vtype= TYPE_int;
				vr->val.ival = sht_nil;
			} else
			if( l>255 || l<0) {
				if( l<2^31 && l> -2^31){
				GDKwarning("newConstant:sht coerced to int\n");
				if(type== TYPE_sht) vr->vtype= TYPE_int;
				vr->val.ival = l;
				} else{
				GDKwarning("newConstant:sht coerced to lng\n");
				if(type== TYPE_sht) vr->vtype= TYPE_lng;
				vr->val.lval = l;
				}
			} else {
				vr->vtype= TYPE_sht;
				vr->val.shval= l;
			}
			break; }
	case TYPE_int: {long l= strtol(val,NULL,0);
			vr->vtype = type;
			if( tonil){ 
				if(type==TYPE_int) vr->vtype= TYPE_int;
				vr->val.ival = int_nil;
			} else
			if( l>= (1<<15) || l <= (-1<<15)){
			GDKwarning("newConstant:int coerced to lng\n");
				if(type==TYPE_int) vr->vtype= TYPE_lng;
				vr->val.lval= l;
			} else {
				if(type==TYPE_int) vr->vtype= TYPE_int;
				vr->val.ival= l;
			}
			break;}
	case TYPE_void: 
	case TYPE_oid: {long l= strtol(val,NULL,10);
			if( tonil) vr->val.oval = oid_nil;
			else {
				int site= val[strlen(val)-1]-'0';
				vr->val.oval= l | (site <<SERVERBITS);
			}
			vr->vtype= type;
			break; }
	case TYPE_flt: {double d= strtod(val,NULL); 
			if( tonil) vr->val.fval = flt_nil; 
			else vr->val.fval= d;
			vr->vtype= type;
			break; }
	case TYPE_dbl: {double d= strtod(val,NULL);
			if( tonil) vr->val.dval = dbl_nil; 
			else vr->val.dval= d;
			vr->vtype= type;
			break;}
	case TYPE_lng: {long l= strtol(val,NULL,0);
			if( tonil) vr->val.lval = lng_nil; 
			else vr->val.lval= l;
			vr->vtype= type;
			break; }
	case TYPE_str: 
			vr->vtype= type;
			if( type != TYPE_str){
				/* an extern type */
				ptr *p = (ptr *) &vr->val.ival;
				(*BATatoms[type].atomFromStr)(val, &vr->len, p);
				break;
			}
			if( tonil) vr->val.sval = str_nil;
			else vr->val.sval= (str) GDKstrdup(val);
			vr->len= strlen((str) val);
			break;
@-
Extended types are always represented as string literals
and converted to the internal storage structure.
Beware that the typeFromStr routines generate storage space
for the new value. This should be garbage collected at the
end.
@c
	default:{ 
		ptr *p = (ptr *) &vr->val.ival;

		if( parsetype != BATatoms[parsetype].storage){
			parsetype = BATatoms[type].storage;
			goto retryConstant;
		}
		if( BATatoms[type].atomFromStr== 0) {
		s= malTypeName(type);
		GDKerror("newConstant:no string coercion for '%s'\n", s);
		GDKfree(s);
		break;
		}
#ifdef STRUCT_ALIGNED
		vr->vtype= type;
		(*BATatoms[type].atomFromStr)(val, &vr->len, p);
#else
		GDKerror("newConstants:missing implementation\n");
#endif
		}
	}
	return idx;
}
@+ Variable argument list
Functions and rules may contain a single variable argument list
They are recognized with the function below and can be used to control
the iterator over argument lists.
@c
int isVARG(MalBlkPtr mb, InstrPtr p, int i){
	if( idcmp(getArgName(mb,p,i),malVARG)==0) return 1;
	return 0;
}
int isaSignature(InstrPtr p){
	switch(p->token){
	case FUNCTIONsymbol:
	case COMMANDsymbol:
	case PATTERNsymbol:
	case HANDLERsymbol:
		return TRUE;
	}
	return FALSE;
}
@- Argument handling
The number of arguments for procedures is currently limited.
Furthermore, we should assure that no variable is referenced
before being assigned. 
Failure to obey should mark the instruction as type-error.
@c
void pushArgument(MalBlkPtr mb, InstrPtr p, int varid){
        int n;
        
        n = p->argc;
        if( n == MAXARG-1){
		mb->errors++;
                GDKerror("too many arguments\n");
		p->argc--;
        } 
	p->argc++;
	p->argv[n] = varid;
	isVarUsed(mb,varid) = TRUE;
} 
@-
Store the information of a destination variable in the signature structure of
each instruction. This code is largely equivalent to pushArgument,
but it is more efficient in searching and collecting the information.
[todo]
@c
void pushArgumentId(MalBlkPtr mb, InstrPtr p,str name){
        int v;

	v= findVariable(mb,name);
	if( v<0) v= newVariable(mb,name,getTypeIndex(name));
	else GDKfree(name);
	pushArgument(mb,p,v);
}
@-
The alternative is to remove arguments from an instruction record.
This is typically part of instruction constructions.
@c
void delArgument(InstrPtr p, int idx){
	int i;
	for(i=idx;i<p->argc-1;i++)
		p->argv[i] = p->argv[i+1];
	p->argc--;
	if( idx < p->retc) p->retc--;
}

int getVarType(MalBlkPtr mb, int i) 
{
	if(i<0) return TYPE_any;
	if( i >= mb->vsize) {
		GDKwarning("setVarType:array bound error %d %d\n",i, mb->vtop);
		return;
	}
	return mb->var[i]->type;
}
void setVarType(MalBlkPtr mb, int i, int tpe) 
{
	if(i<0) return;
	if( i >= mb->vsize) {
		GDKwarning("setVarType:array bound error %d %d\n",i, mb->vtop);
		return;
	}
	mb->var[i]->type= tpe;
}
void setArgType(MalBlkPtr mb, InstrPtr p, int i, int tpe)
{
	if( p->argv[i] >=mb->vsize) {
		GDKwarning("setArgType:array bound error\n");
		return;
	}
	p->argv[0]= i;
	mb->var[p->argv[0]]->type = tpe;
}
void setReturnArgument(InstrPtr p, int i)
{
	p->argv[0]= i;
}
str getDestName(MalBlkPtr mb, InstrPtr p){
	if( p->argv[0]>=0 && p->argv[0]<mb->vtop)
		return getVarName(mb,p->argv[0]);
	return "";
}
malType destinationType(MalBlkPtr mb, InstrPtr p){
	if( p->argc>0) return getVarType(mb,p->argv[0]);
	return TYPE_any;
}

@-
Instructions are simply appended to a MAL block.
It is also the place to collect information to speed-up use later on.
@c
void pushInstruction(MalBlkPtr mb, InstrPtr p){
	int i;
	InstrPtr prev;

	i= mb->stop;
	if( i+1 >= mb->ssize){
		int space= (mb->ssize + MAXSTMTS) * sizeof(InstrPtr);
		InstrPtr *newblk= (InstrPtr *) GDKmalloc( space);
/*printf("resize instruction block to %d\n",  space);*/
		if( newblk== NULL){
			mb->errors++;
			GDKerror("pushInstruction:no storage left\n");
			return;
		}
		bzero((char*)newblk, space);
		memcpy(newblk,mb->stmt,mb->stop * sizeof(InstrPtr));
		mb->ssize += MAXSTMTS;
		GDKfree(mb->stmt);
		mb->stmt = newblk;
	}
	mb->stmt[i]= p;
	mb->stop++;
}
mal_export void pushEndInstruction(MalBlkPtr mb){
	InstrPtr p;
	p= newInstruction(ENDDEFsymbol);
	p->argv[0]= findVariable(mb,getInstrPtr(mb,0)->fcnname);
	p->argc =0;
	p->retc = 0;
	pushInstruction(mb,p);
}
@+ Reverse programming
The internal representation should be such that it becomes
easy to re-produce the original textual input, possibly annotated with
system debugging information in additional commentary blocks.
Furthermore, all typing information should be made explicit,
because we do not keep track where variables are declared.

The hiddenInstruction operator assumes a sufficiently large block
to leave information on the signature behind.
@c
#define advance(X)  while(*(X))(X)++;

str typechkName(int i){
	switch(i){
	default:
	case TYPE_ERROR:	return " error";
	case TYPE_UNKNOWN: 	return " unknown";
	case TYPE_DYNAMIC:	return " dynamic";
	case TYPE_POLYMORPHIC:	return " polymorphic";
	case TYPE_FIXED:	return "";
	}
}
str hiddenInstructionArgs(MalBlkPtr mb,InstrPtr p,str s){
	int i;
	str tpe;
	
	sprintf(s," #%d%s:",getPC(mb,p), typechkName(p->typechk));
	advance(s);
	for(i=0;i<p->argc;i++)
	if( p->argv[i] >=0){
		if( i== p->retc) { sprintf(s,"<-"); advance(s);}
		tpe= malTypeName(getArgType(mb,p,i));
		sprintf(s,"(%s:%s)", 
			(getArgName(mb,p,i)?getArgName(mb,p,i):"nil"), tpe);
		advance(s);
		GDKfree(tpe);
	}
	advance(s);
	if( p->jump) sprintf(s," jump %d",p->jump);
	advance(s);
	return s;
}
@-
It receives the space to store the definition
The MAL profiler dumps some performance data at the
beginning of each line.

@= performanceData
#ifdef MALprofiler
	if( p->counter ){
		double avg= (p->ticks+0.0)/p->counter;
		sprintf(t,"[%7d, %5.2f] ",p->counter,avg);
	} 
	advance(t);
#endif
@-

@= showParam
		tpe= malTypeName(getArgType(mb,p,i));
		advance(t);
		sprintf(t,"%s:%s",getArgName(mb,p,i),tpe);
		advance(t);
		if( i<p->@1-1) sprintf(t,",");
		GDKfree(tpe);
@c
str fcnDefinition(MalBlkPtr mb,InstrPtr p, str s,int hidden ){
	int i;
	str t,tpe;

	t=s;
	@:performanceData@
	if( p->token== FUNCTIONsymbol)
		sprintf(t,"function "); 
	else if( p->token == COMMANDsymbol)
	 	sprintf(t,"command ");
	else if( p->token == PATTERNsymbol)
		sprintf(t,"pattern ");
	else sprintf(t,"handler ");

	advance(t);
	if( p->modname) sprintf(t,"%s.",p->modname);
	advance(t);
	sprintf(t,"%s(",p->fcnname);
	for(i=p->retc;i<p->argc;i++){ @:showParam(argc)@ }
	advance(t);
	if( p->varargs) sprintf(t,"...");
	advance(t);
	if( p->retc ==1){
		tpe= malTypeName(getArgType(mb,p,0));
		sprintf(t,"):%s",tpe);
		GDKfree(tpe);
		advance(t);
	} else {
		sprintf(t,"):("); t+= 3;
		for(i=0;i<p->retc;i++){ @:showParam(retc)@ }
		*t++ = ')';
	}
	if(mb->binding)
		sprintf(t," = %s;",mb->binding);
	else	sprintf(t,";");
#ifdef DEBUG_MAL_INSTR
	if( hidden){
		advance(t);
		hiddenInstructionArgs(mb,p,t);
	}
#endif
	return s;
}

@-
@= tabulate
	for(;tab>0;tab--) *t++= ' ';
	*t= 0;
	advance(t);
@c

str instruction2str(MalBlkPtr mb,InstrPtr p,int hidden){
	int i,len=0,tab=4;
	str s,t,nme;
	int low,high;

	len = 8196;
	s= GDKmalloc(len);
	s[0]=0;
	t=s;
	@:performanceData@
	if( getDestName(mb,p) ) nme= getDestName(mb,p); else nme="";
	advance(t);
	if( p->barrier){
		if( p->barrier== BARRIERsymbol){ sprintf(t,"barrier"); tab=1; } 
		if( p->barrier== THREADsymbol){ sprintf(t,"thread"); tab=1; } 
		if( p->barrier== EXITsymbol){ sprintf(t,"exit"); tab=1; }
	}
	advance(t);
	switch( p->token){
		case FCNcall:
		case RLRcall:
		case PATcall:
		case CMDcall:
		case ASSIGNsymbol:
			if( p->argc<=1 && p->fcnname==NULL){
				@:tabulate@
				sprintf(t,"%s",nme); 
			} else
			if( *nme!='$'){
				if( p->retc == 1){
					@:tabulate@
					sprintf(t,"%s := ",nme); 
					break;
				}
				/* display multi-assignment */
				@:tabulate@
				*t++ = '(';
				for(i=0;i<p->retc;i++){
					sprintf(t,"%s",getArgName(mb,p,i));
					advance(t);
					if( i<p->retc-1) 
						*t++= ',';
				}
				sprintf(t,"):=");t+=3;
			}else{
				@:tabulate@
			}
			break;
		case REDOsymbol:
			@:tabulate@
			sprintf(t,"redo %s ",nme); break;
		case LEAVEsymbol:
			@:tabulate@
			sprintf(t,"leave %s",nme); break;
		case RETURNsymbol:
			@:tabulate@
			sprintf(t,"return "); break;
		case CATCHsymbol:
			sprintf(t,"catch %s",nme); break;
		case ENDDEFsymbol:
			sprintf(t,"end %s",getVarName(mb,p->argv[0]));
			break;
		case ENDsymbol:
			sprintf(t,"end %s",nme); break;
		case RULEsymbol:
		case COMMANDsymbol:
		case FUNCTIONsymbol:
		case PATTERNsymbol:
			return fcnDefinition(mb,p,s,hidden); 
		case RAISEsymbol:
			@:tabulate@
			sprintf(t,"raise %s",nme);
			break;
		case THREADsymbol:
			@:tabulate@
			sprintf(t,"%s",nme);
			if( p->argc>1) { advance(t); sprintf(t,":=");}
			break;
		case BARRIERsymbol:
			@:tabulate@
			sprintf(t,"%s",nme);
			break;
		case EXITsymbol:
			@:tabulate@
			sprintf(t,"%s",nme); break;
		default:
			sprintf(t," ?%d? ",p->token); 
	}
	advance(t);
	low= p->retc; high= p->argc;
	if( p->modname) sprintf(t,"%s.",p->modname);
	advance(t);
	if( p->token == RETURNsymbol){
		low= 0; high= p->retc;
		if( high-low>1 ) sprintf(t,"(");
	} else if( p->fcnname ) {
		sprintf(t,"%s(",p->fcnname);
	} else if( p->retc>1) sprintf(t,"(");

	for(i=low;i<high;i++){
		advance(t);
		if( i+1<high && isVARG(mb,p,i+1)) {sprintf(t,"...");break;}
		if( getArgDefault(mb,p,i) != NULL){
			if( getArgType(mb,p,i)== TYPE_str)
				sprintf(t,"\"%s\"", getArgDefault(mb,p,i));
			else
			if( getArgType(mb,p,i)== TYPE_chr)
				sprintf(t,"'%s'", getArgDefault(mb,p,i));
			else	sprintf(t,"%s", getArgDefault(mb,p,i));
		} else sprintf(t,"%s", getArgName(mb,p,i));
		advance(t);
		if( idcmp("bat",getArgName(mb,p,i))==0 ){
			str d1=malTypeName(getHeadType( getArgType(mb,p,i))),
			    d2 =malTypeName(getTailType(getArgType(mb,p,i)));
			sprintf(t,"[%s,%s]",d1,d2);
			GDKfree(d1); GDKfree(d2);
			advance(t);
		}
		if(i+1<high) sprintf(t,",");
	}
	advance(t);
	if( p->token == RETURNsymbol){
		if( high-low>1 ) sprintf(t,")");
	} else
	if(p->fcnname || p->retc>1 ) sprintf(t,")");
	advance(t);
	sprintf(t,";");
	if( hidden){
		advance(t);
		t= hiddenInstructionArgs(mb,p,t);
	}
	advance(t);
	/* sprintf(t,"\n");*/
	if(t-s >len)
		GDKfatal("instruction2str:");
	return s;
}
void promptInstruction(FILE *fd, MalBlkPtr mb, InstrPtr p){
	str ps;
	if( fd == 0) GDKfatal("printInstruction:no file\n");
	ps= instruction2str(mb,p,mal_xlisting);
	/* ps[strlen(ps)-1] = 0; remove '\n' */
	fprintf(fd,"%s",ps);
	GDKfree(ps);
}
void printInstruction(FILE *fd, MalBlkPtr mb, InstrPtr p){
	promptInstruction(fd,mb,p);
	fprintf(fd,"\n");
}

void printSignature(FILE *fd, Symbol s){
	InstrPtr p;
	str txt= GDKmalloc(8192);
	bzero(txt,8192);
	p= getSignature(s);
	(void) fcnDefinition(s->def, p,txt, mal_xlisting);
	fprintf(fd,"%s",txt);
	GDKfree(txt);
}
@+ Garbage collection
Of particular interest is the beforeCall situations for strings and bats.
Before the interpreter calls a function, it should safeguard the
value(s) on top of the stack for garbage collection afterwards.
The before- and after- calls should find a scratch area on the value
stack to keep the backup information around. Currently, we only
garbage collect a single return value and use a fixed value record.

@c 
void strBeforeCall(ValPtr v, ValPtr bak){
	bak->val.sval= v->val.sval;
	bak->len = v->len;
}
void strAfterCall(ValPtr v, ValPtr bak) {
	if( v->val.sval != bak->val.sval)
		strFinalCall(bak);
	v->len= ATOMlen(v->vtype,v->val.pval);
}
void strFinalCall(ValPtr v){
        if(v->vtype==TYPE_str && 
	   v->val.pval && v->val.pval != str_nil) {
                if(v->len) GDKfree(v->val.pval);
                v->len= 0;
        }       
        v->val.pval= NULL;
}       

void batBeforeCall(ValPtr v, ValPtr bak){
	bak->val.bval= v->val.bval;
}
void batAfterCall(ValPtr v, ValPtr bak){
	if( bak->val.bval != v->val.bval)
		batFinalCall(bak);
}
void batFinalCall(ValPtr v){ 
	if(v->val.bval)
	{       BAT *b;                                                                        b= (BAT*) BBPgetdesc(v->val.bval);
		if( b ) {
			BBPunfix(b->batCacheid);
			/* printf("decrement %s (%d) to %d\n",b->batId, 
				b->val.bval, 
				BBP_refs(b->batCacheid)); */
		}
        v->val.bval =0;
#ifdef DEBUG_MAL_INTERPRETER
        else GDKerror("interpreter:bat '%d' disappeared\n",v->val.bval);
#endif  
	}
}
