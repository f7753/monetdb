stdout of test 'tst1402` in directory 'src/mal` itself:


# 07:59:04 >  
# 07:59:04 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1402.mal </dev/null
# 07:59:04 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## testing some basic stuff on enums and derived types
## Note that derived types can be initialized using
## their storage representation. If a string literal
## is given, the underlying AtomFromStr is used.
#
#atom fruit:enum;
#
#e0:= 12;
#print(e0);
#f0:= 11;
#print(f0);
#print("conversions");
#e1:= 13:enum;
#print(e1);
#f1:= 14:fruit;
#print(f1);
#
#
function Admin.main():int;	# 0  (main:int)
    e0 := 12;	# 1  (e0:int)<-($2:int)
    io.print(e0);	# 2 IOprint_val ($3:int)<-(e0:int)
    f0 := 11;	# 3  (f0:int)<-($5:int)
    io.print(f0);	# 4 IOprint_val ($6:int)<-(f0:int)
    io.print("conversions");	# 5 IOprint_val ($7:int)<-($8:str)
    e1 := 13:enum;	# 6  (e1:enum)<-($10:enum)
    io.print(e1);	# 7 IOprint_val ($11:int)<-(e1:enum)
    f1 := 14:fruit;	# 8  (f1:fruit)<-($13:fruit)
    io.print(f1);	# 9 IOprint_val ($14:int)<-(f1:fruit)
end main;	# 10  
[ 12 ]
[ 11 ]
[ "conversions" ]
[ 13 ]
[ 14 ]

# 07:59:04 >  
# 07:59:04 >  Done.
# 07:59:04 >  

