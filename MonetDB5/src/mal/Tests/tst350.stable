# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
# Visit http://monetdb.cwi.nl for further information.
##inspection of the runtime setting
##it uses the dynamic type analysis scheme
#
#function dir(b:bat[:int,:str]):void;
#	atm:= inspect.getAtoms();
#	brev:= reverse(b);
#	bm := mirror(brev);
#	h := bbp.getHeadType();
#	bHead:= join(brev,h);
#	setColumn(bHead,"htype");
#	h := bbp.getTailType();
#	bTail:= join(brev,h);
#	setColumn(bTail,"ttype");
#	bcount:= bbp.getCount();
#	bCount:= join(brev,bcount);
#	setColumn(bCount,"count");
#	bheat:= bbp.getHeat();
#	bHeat:= join(brev,bheat);
#	setColumn(bHeat,"heat");
#	bdirty:= bbp.getDirty();
#	bDirty:= join(brev,bdirty);
#	setColumn(bDirty,"dirty");
#	bstatus:= bbp.getDirty();
#	bStatus:= join(brev,bstatus);
#	setColumn(bStatus,"status");
#	bkind:= bbp.getKind();
#	bKind:= join(brev,bkind);
#	setColumn(bKind,"kind");
#	bref:= bbp.getRefcnt();
#	bRef:= join(brev,bref);
#	setColumn(bRef,"refcnt");
#	table(brev, bm, bHead,bTail,bCount, bHeat,bDirty,bStatus,bKind,bRef);
#end dir;
function Admin.dir(b:bat[:int,:str]):void;	# 0  (dir:void)<-(b:bat[:int,:str])
    atm := inspect.getAtoms();	# 1 INSPECTatom_names (atm:bat[:int,:str])
    brev := bat.reverse(b);	# 2 BKCreverse (brev:bat[:str,:int])<-(b:bat[:int,:str])
    bm := bat.mirror(brev);	# 3 BKCmirror (bm:bat[:str,:str])<-(brev:bat[:str,:int])
    h := bbp.getHeadType();	# 4 CMDbbpHeadType (h:bat[:int,:str])
    bHead := algebra.join(brev,h);	# 5 ALGjoin (bHead:bat[:str,:str])<-(brev:bat[:str,:int])(h:bat[:int,:str])
    bat.setColumn(bHead,"htype");	# 6 BKCsetColumn ($7:void)<-(bHead:bat[:str,:str])($8:str)
    h := bbp.getTailType();	# 7 CMDbbpTailType (h:bat[:int,:str])
    bTail := algebra.join(brev,h);	# 8 ALGjoin (bTail:bat[:str,:str])<-(brev:bat[:str,:int])(h:bat[:int,:str])
    bat.setColumn(bTail,"ttype");	# 9 BKCsetColumn ($10:void)<-(bTail:bat[:str,:str])($11:str)
    bcount := bbp.getCount();	# 10 CMDbbpCount (bcount:bat[:int,:lng])
    bCount := algebra.join(brev,bcount);	# 11 ALGjoin (bCount:bat[:str,:lng])<-(brev:bat[:str,:int])(bcount:bat[:int,:lng])
    bat.setColumn(bCount,"count");	# 12 BKCsetColumn ($14:void)<-(bCount:bat[:str,:lng])($15:str)
    bheat := bbp.getHeat();	# 13 CMDbbpHeat (bheat:bat[:int,:int])
    bHeat := algebra.join(brev,bheat);	# 14 ALGjoin (bHeat:bat[:str,:int])<-(brev:bat[:str,:int])(bheat:bat[:int,:int])
    bat.setColumn(bHeat,"heat");	# 15 BKCsetColumn ($18:void)<-(bHeat:bat[:str,:int])($19:str)
    bdirty := bbp.getDirty();	# 16 CMDbbpDirty (bdirty:bat[:int,:str])
    bDirty := algebra.join(brev,bdirty);	# 17 ALGjoin (bDirty:bat[:str,:str])<-(brev:bat[:str,:int])(bdirty:bat[:int,:str])
    bat.setColumn(bDirty,"dirty");	# 18 BKCsetColumn ($22:void)<-(bDirty:bat[:str,:str])($23:str)
    bstatus := bbp.getDirty();	# 19 CMDbbpDirty (bstatus:bat[:int,:str])
    bStatus := algebra.join(brev,bstatus);	# 20 ALGjoin (bStatus:bat[:str,:str])<-(brev:bat[:str,:int])(bstatus:bat[:int,:str])
    bat.setColumn(bStatus,"status");	# 21 BKCsetColumn ($26:void)<-(bStatus:bat[:str,:str])($27:str)
    bkind := bbp.getKind();	# 22 CMDbbpKind (bkind:bat[:int,:str])
    bKind := algebra.join(brev,bkind);	# 23 ALGjoin (bKind:bat[:str,:str])<-(brev:bat[:str,:int])(bkind:bat[:int,:str])
    bat.setColumn(bKind,"kind");	# 24 BKCsetColumn ($30:void)<-(bKind:bat[:str,:str])($31:str)
    bref := bbp.getRefcnt();	# 25 CMDbbpRefcnt (bref:bat[:int,:int])
    bRef := algebra.join(brev,bref);	# 26 ALGjoin (bRef:bat[:str,:int])<-(brev:bat[:str,:int])(bref:bat[:int,:int])
    bat.setColumn(bRef,"refcnt");	# 27 BKCsetColumn ($34:void)<-(bRef:bat[:str,:int])($35:str)
    io.table(brev,bm,bHead,bTail,bCount,bHeat,bDirty,bStatus,bKind,bRef);	# 28 IOttable ($36:int)<-(brev:bat[:str,:int])(bm:bat[:str,:str])(bHead:bat[:str,:str])(bTail:bat[:str,:str])(bCount:bat[:str,:lng])(bHeat:bat[:str,:int])(bDirty:bat[:str,:str])(bStatus:bat[:str,:str])(bKind:bat[:str,:str])(bRef:bat[:str,:int])
end dir;	# 29  
#
#function dir(s:str):void;
#	print("Search directory by name");
#	t:= bbp.getNames();
#	tn:= like(t,s);
#	print(tn);
#	dir(tn);
#end dir;
function Admin.dir(s:str):void;	# 0  (dir:void)<-(s:str)
    io.print("Search directory by name");	# 1 IOprint_val ($2:int)<-($3:str)
    t := bbp.getNames();	# 2 CMDbbpNames (t:bat[:int,:str])
    tn := algebra.like(t,s);	# 3 ALGlike (tn:bat[:int,:str])<-(t:bat[:int,:str])(s:str)
    io.print(tn);	# 4 IOprint_val ($6:int)<-(tn:bat[:int,:str])
    Admin.dir(tn);	# 5  ($7:void)<-(tn:bat[:int,:str])
end dir;	# 6  
#print("start test");
#b:=new(:int,:int);
#setName(b,"simplemind");
#
#z:= bbp.getNames();
#dir(z);
#
#dir("simple");
#
#
function Admin.main():int;	# 0  (main:int)
    io.print("start test");	# 1 IOprint_val ($1:int)<-($2:str)
    b := bbp.new(:int,:int);	# 2 CMDBATnew (b:bat[:int,:int])<-($4:int)($5:int)
    bat.setName(b,"simplemind");	# 3 BKCsetName ($6:void)<-(b:bat[:int,:int])($7:str)
    z := bbp.getNames();	# 4 CMDbbpNames (z:bat[:int,:str])
    Admin.dir(z);	# 5  ($9:void)<-(z:bat[:int,:str])
    Admin.dir("simple");	# 6  ($10:void)<-($11:str)
end main;	# 7  
[ "start test" ]
#---------------------------------------------------------------------------------------------------------------------------------#
# bbp	tmp_8			htype	ttype		count	heat	dirty		status		kind		refcnt	  # name
# int	str			str	str		lng	int	str		str		str		int	  # type
#---------------------------------------------------------------------------------------------------------------------------------#
[ 1,	  "monet_environment",	  "str",  "str",	  31,	  151,	  "dirty",	  "dirty",	  "transient",	  3	  ]
[ 2,	  "monet_unicode_case",	  "int",  "int",	  732,	  152,	  "dirty",	  "dirty",	  "transient",	  3	  ]
[ 3,	  "timezones",		  "str",  "tzone",	  24,	  153,	  "dirty",	  "dirty",	  "transient",	  3	  ]
[ 4,	  "simplemind",		  "int",  "int",	  0,	  34,	  "dirty",	  "dirty",	  "transient",	  3	  ]
[ "Search directory by name" ]
#-------------------------#
# h	tmp_22		  # name
# int	str		  # type
#-------------------------#
[ 4,	  "simplemind"	  ]
#-----------------------------------------------------------------------------------------------------------------#
# tmp_22	tmp_19		htype	ttype	count	heat	dirty		status		kind		refcnt	  # name
# int	str		str	str	lng	int	str		str		str		int	  # type
#-----------------------------------------------------------------------------------------------------------------#
[ 4,	  "simplemind",	  "int",  "int",  0,	  156,	  "dirty",	  "dirty",	  "transient",	  5	  ]
>