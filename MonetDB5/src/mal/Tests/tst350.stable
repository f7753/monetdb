# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
##inspection of the runtime setting
##it uses the dynamic type analysis scheme
#
#function dir(b:bat[int,str]):void;
#	atm:= catalog.atomNames();
#	brev:= reverse(b);
#	bm := mirror(brev);
#	h := catalog.bbpHeadType();
#	bHead:= join(brev,h);
#	setColumn(bHead,"htype");
#	h := catalog.bbpTailType();
#	bTail:= join(brev,h);
#	setColumn(bTail,"ttype");
#	bcount:= catalog.bbpCount();
#	bCount:= join(brev,bcount);
#	setColumn(bCount,"count");
#	bheat:= catalog.bbpHeat();
#	bHeat:= join(brev,bheat);
#	setColumn(bHeat,"heat");
#	bdirty:= catalog.bbpDirty();
#	bDirty:= join(brev,bdirty);
#	setColumn(bDirty,"dirty");
#	bstatus:= catalog.bbpDirty();
#	bStatus:= join(brev,bstatus);
#	setColumn(bStatus,"status");
#	bkind:= catalog.bbpKind();
#	bKind:= join(brev,bkind);
#	setColumn(bKind,"kind");
#	bref:= catalog.bbpRefcnt();
#	bRef:= join(brev,bref);
#	setColumn(bRef,"refcnt");
#	table(brev, bm, bHead,bTail,bCount, bHeat,bDirty,bStatus,bKind,bRef);
#end dir;
function Admin.dir(b:bat[int,str]):void; #0  (dir:void)<-(b:bat[int,str])
    atm := catalog.atomNames(); #1 CATALOGatom_names (atm:bat[int,str])
    brev := bat.reverse(b); #2 CMDreverse (brev:bat[str,int])<-(b:bat[int,str])
    bm := bat.mirror(brev); #3 CMDmirror (bm:bat[str,str])<-(brev:bat[str,int])
    h := catalog.bbpHeadType(); #4 CATALOGbbpTailType (h:bat[int,str])
    bHead := algebra.join(brev,h); #5 CMDjoin (bHead:bat[str,str])<-(brev:bat[str,int])(h:bat[int,str])
    bbp.setColumn(bHead,"htype"); #6 CMDbbpsetColumn ($7:bat[str,str])<-(bHead:bat[str,str])($8:str)
    h := catalog.bbpTailType(); #7 CATALOGbbpTailType (h:bat[int,str])
    bTail := algebra.join(brev,h); #8 CMDjoin (bTail:bat[str,str])<-(brev:bat[str,int])(h:bat[int,str])
    bbp.setColumn(bTail,"ttype"); #9 CMDbbpsetColumn ($10:bat[str,str])<-(bTail:bat[str,str])($11:str)
    bcount := catalog.bbpCount(); #10 CATALOGbbpCount (bcount:bat[int,lng])
    bCount := algebra.join(brev,bcount); #11 CMDjoin (bCount:bat[str,lng])<-(brev:bat[str,int])(bcount:bat[int,lng])
    bbp.setColumn(bCount,"count"); #12 CMDbbpsetColumn ($14:bat[str,lng])<-(bCount:bat[str,lng])($15:str)
    bheat := catalog.bbpHeat(); #13 CATALOGbbpHeat (bheat:bat[int,int])
    bHeat := algebra.join(brev,bheat); #14 CMDjoin (bHeat:bat[str,int])<-(brev:bat[str,int])(bheat:bat[int,int])
    bbp.setColumn(bHeat,"heat"); #15 CMDbbpsetColumn ($18:bat[str,int])<-(bHeat:bat[str,int])($19:str)
    bdirty := catalog.bbpDirty(); #16 CATALOGbbpDirty (bdirty:bat[int,str])
    bDirty := algebra.join(brev,bdirty); #17 CMDjoin (bDirty:bat[str,str])<-(brev:bat[str,int])(bdirty:bat[int,str])
    bbp.setColumn(bDirty,"dirty"); #18 CMDbbpsetColumn ($22:bat[str,str])<-(bDirty:bat[str,str])($23:str)
    bstatus := catalog.bbpDirty(); #19 CATALOGbbpDirty (bstatus:bat[int,str])
    bStatus := algebra.join(brev,bstatus); #20 CMDjoin (bStatus:bat[str,str])<-(brev:bat[str,int])(bstatus:bat[int,str])
    bbp.setColumn(bStatus,"status"); #21 CMDbbpsetColumn ($26:bat[str,str])<-(bStatus:bat[str,str])($27:str)
    bkind := catalog.bbpKind(); #22 CATALOGbbpKind (bkind:bat[int,str])
    bKind := algebra.join(brev,bkind); #23 CMDjoin (bKind:bat[str,str])<-(brev:bat[str,int])(bkind:bat[int,str])
    bbp.setColumn(bKind,"kind"); #24 CMDbbpsetColumn ($30:bat[str,str])<-(bKind:bat[str,str])($31:str)
    bref := catalog.bbpRefcnt(); #25 CATALOGbbpRefcnt (bref:bat[int,int])
    bRef := algebra.join(brev,bref); #26 CMDjoin (bRef:bat[str,int])<-(brev:bat[str,int])(bref:bat[int,int])
    bbp.setColumn(bRef,"refcnt"); #27 CMDbbpsetColumn ($34:bat[str,int])<-(bRef:bat[str,int])($35:str)
    io.table(brev,bm,bHead,bTail,bCount,bHeat,bDirty,bStatus,bKind,bRef); #28 CMDttable ($36:int)<-(brev:bat[str,int])(bm:bat[str,str])(bHead:bat[str,str])(bTail:bat[str,str])(bCount:bat[str,lng])(bHeat:bat[str,int])(bDirty:bat[str,str])(bStatus:bat[str,str])(bKind:bat[str,str])(bRef:bat[str,int])
end dir; #29  
#
#function dir(s:str):void;
#	print("Search directory by name");
#	t:= catalog.bbpNames();
#	tn:= like(t,s);
#	print(tn);
#	dir(tn);
#end dir;
function Admin.dir(s:str):void; #0  (dir:void)<-(s:str)
    io.print("Search directory by name"); #1 CMDprint_val ($2:int)<-($3:str)
    t := catalog.bbpNames(); #2 CATALOGbbpNames (t:bat[int,str])
    tn := algebra.like(t,s); #3 CMDlike (tn:bat[int,str])<-(t:bat[int,str])(s:str)
    io.print(tn); #4 CMDprint_val ($6:int)<-(tn:bat[int,str])
    Admin.dir(tn); #5  ($7:void)<-(tn:bat[int,str])
end dir; #6  
#print("start test");
#b:=new(int,int);
#setName(b,"simplemind");
#
#z:= catalog.bbpNames();
#dir(z);
#
#dir("simple");
#
#
function Admin.main():int; #0  (main:int)
    io.print("start test"); #1 CMDprint_val ($1:int)<-($2:str)
    b := mal.new(int,int); #2 CMDBATnew (b:bat[int,int])<-(int:int)(int:int)
    bbp.setName(b,"simplemind"); #3 CMDbbprename ($5:bat[int,int])<-(b:bat[int,int])($6:str)
    z := catalog.bbpNames(); #4 CATALOGbbpNames (z:bat[int,str])
    Admin.dir(z); #5  ($8:void)<-(z:bat[int,str])
    Admin.dir("simple"); #6  ($9:void)<-($10:str)
end main; #7  
[ "start test" ]
#-----------------------------------------------------------------------------------------------------------------------------------------#
# bbp	| tmp_8			| htype		| ttype		| count	| heat	| dirty		| status	| kind		| refcnt  #
#-----------------------------------------------------------------------------------------------------------------------------------------#
[ 1,	  "monet_environment",	  "str",	  "str",	  29,	  81,	  "dirty",	  "dirty",	  "transient",	  2	  ]
[ 2,	  "monet_unicode_case",	  "int",	  "int",	  685,	  82,	  "dirty",	  "dirty",	  "transient",	  1	  ]
[ 3,	  "timezones",		  "tzone",	  "tzone",	  24,	  82,	  "dirty",	  "dirty",	  "transient",	  1	  ]
[ 4,	  "simplemind",		  "int",	  "int",	  0,	  91,	  "dirty",	  "dirty",	  "transient",	  1	  ]
[ "Search directory by name" ]
#-------------------------#
# BAT:	  tmp_21	  #
# (int)	  (str)		  #
#-------------------------#
[ 4,	  "simplemind"	  ]
#-----------------------------------------------------------------------------------------------------------------#
# tmp_21| tmp_18	| htype	| ttype	| count	| heat	| dirty		| status	| kind		| refcnt  #
#-----------------------------------------------------------------------------------------------------------------#
[ 4,	  "simplemind",	  "int",  "int",  0,	  91,	  "dirty",	  "dirty",	  "transient",	  1	  ]
>