# Monet Database Server V5.0
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
# gdk_dbfarm:/ufs/mk/monet_5-0/Linux/../dbfarm
# gdk_dbname:demo
# gdk_dbdir:/ufs/mk/monet_5-0/Linux/../dbfarm/demo
# gdk_distr:/ufs/mk/monet_5-0/Linux
# monetrc:/ufs/mk/.monet.conf
##inspection of the runtime setting
##it uses the dynamic type analysis scheme
#
#function dir(b:bat[int,str]):void;
#	atm:= catalog.atomNames();
#	brev:= reverse(b);
#	bm := mirror(brev);
#	h := catalog.bbpHeadType();
#	bHead:= join(brev,h);
#	setColumn(bHead,"htype");
#	h := catalog.bbpTailType();
#	bTail:= join(brev,h);
#	setColumn(bTail,"ttype");
#	bcount:= catalog.bbpCount();
#	bCount:= join(brev,bcount);
#	setColumn(bCount,"count");
#	bheat:= catalog.bbpHeat();
#	bHeat:= join(brev,bheat);
#	setColumn(bHeat,"heat");
#	bdirty:= catalog.bbpDirty();
#	bDirty:= join(brev,bdirty);
#	setColumn(bDirty,"dirty");
#	bstatus:= catalog.bbpDirty();
#	bStatus:= join(brev,bstatus);
#	setColumn(bStatus,"status");
#	bkind:= catalog.bbpKind();
#	bKind:= join(brev,bkind);
#	setColumn(bKind,"kind");
#	bref:= catalog.bbpRefcnt();
#	bRef:= join(brev,bref);
#	setColumn(bRef,"refcnt");
#	table(brev, bm, bHead,bTail,bCount, bHeat,bDirty,bStatus,bKind,bRef);
#end dir;
function Admin.dir(b:bat[int,str]):void; #0:(dir:void)<-(b:bat[int,str])
    atm := catalog.atomNames(); #1:(atm:bat[int,str])
    brev := bat.reverse(b); #2:(brev:bat[str,int])<-(b:bat[int,str])
    bm := bat.mirror(brev); #3:(bm:bat[str,str])<-(brev:bat[str,int])
    h := catalog.bbpHeadType(); #4:(h:bat[int,str])
    bHead := algebra.join(brev,h); #5:(bHead:bat[str,str])<-(brev:bat[str,int])(h:bat[int,str])
    bbp.setColumn(bHead,"htype"); #6:($7:bat[str,str])<-(bHead:bat[str,str])($8:str)
    h := catalog.bbpTailType(); #7:(h:bat[int,str])
    bTail := algebra.join(brev,h); #8:(bTail:bat[str,str])<-(brev:bat[str,int])(h:bat[int,str])
    bbp.setColumn(bTail,"ttype"); #9:($10:bat[str,str])<-(bTail:bat[str,str])($11:str)
    bcount := catalog.bbpCount(); #10:(bcount:bat[int,lng])
    bCount := algebra.join(brev,bcount); #11:(bCount:bat[str,lng])<-(brev:bat[str,int])(bcount:bat[int,lng])
    bbp.setColumn(bCount,"count"); #12:($14:bat[str,lng])<-(bCount:bat[str,lng])($15:str)
    bheat := catalog.bbpHeat(); #13:(bheat:bat[int,int])
    bHeat := algebra.join(brev,bheat); #14:(bHeat:bat[str,int])<-(brev:bat[str,int])(bheat:bat[int,int])
    bbp.setColumn(bHeat,"heat"); #15:($18:bat[str,int])<-(bHeat:bat[str,int])($19:str)
    bdirty := catalog.bbpDirty(); #16:(bdirty:bat[int,str])
    bDirty := algebra.join(brev,bdirty); #17:(bDirty:bat[str,str])<-(brev:bat[str,int])(bdirty:bat[int,str])
    bbp.setColumn(bDirty,"dirty"); #18:($22:bat[str,str])<-(bDirty:bat[str,str])($23:str)
    bstatus := catalog.bbpDirty(); #19:(bstatus:bat[int,str])
    bStatus := algebra.join(brev,bstatus); #20:(bStatus:bat[str,str])<-(brev:bat[str,int])(bstatus:bat[int,str])
    bbp.setColumn(bStatus,"status"); #21:($26:bat[str,str])<-(bStatus:bat[str,str])($27:str)
    bkind := catalog.bbpKind(); #22:(bkind:bat[int,str])
    bKind := algebra.join(brev,bkind); #23:(bKind:bat[str,str])<-(brev:bat[str,int])(bkind:bat[int,str])
    bbp.setColumn(bKind,"kind"); #24:($30:bat[str,str])<-(bKind:bat[str,str])($31:str)
    bref := catalog.bbpRefcnt(); #25:(bref:bat[int,int])
    bRef := algebra.join(brev,bref); #26:(bRef:bat[str,int])<-(brev:bat[str,int])(bref:bat[int,int])
    bbp.setColumn(bRef,"refcnt"); #27:($34:bat[str,int])<-(bRef:bat[str,int])($35:str)
    io.table(brev,bm,bHead,bTail,bCount,bHeat,bDirty,bStatus,bKind,bRef); #28:($36:int)<-(brev:bat[str,int])(bm:bat[str,str])(bHead:bat[str,str])(bTail:bat[str,str])(bCount:bat[str,lng])(bHeat:bat[str,int])(bDirty:bat[str,str])(bStatus:bat[str,str])(bKind:bat[str,str])(bRef:bat[str,int])
end dir; #29:
#
#function dir(s:str):void;
#	t:= catalog.bbpNames();
#	tn:= like(t,s);
#	print(tn);
#	dir(tn);
#end dir;
function Admin.dir(s:str):void; #0:(dir:void)<-(s:str)
    t := catalog.bbpNames(); #1:(t:bat[int,str])
    tn := algebra.like(t,s); #2:(tn:bat[int,str])<-(t:bat[int,str])(s:str)
    io.print(tn); #3:($4:int)<-(tn:bat[int,str])
    Admin.dir(tn); #4:($5:void)<-(tn:bat[int,str])
end dir; #5:
#
#b:=new(int,int);
#setColumn(b,"simplemind");
#
#z:= catalog.bbpNames();
#dir(z);
#
#dir("simple");
#
#
function Admin.main():int; #0:(main:int)
    b := mal.new(int,int); #1:(b:bat[int,int])<-(int:int)(int:int)
    bbp.setColumn(b,"simplemind"); #2:($3:bat[int,int])<-(b:bat[int,int])($4:str)
    z := catalog.bbpNames(); #3:(z:bat[int,str])
    Admin.dir(z); #4:($6:void)<-(z:bat[int,str])
    Admin.dir("simple"); #5:($7:void)<-($8:str)
end main; #6:
#-----------------------------------------------------------------------------------------------------------------------------------------#
# bbp	| t			| htype		| ttype		| count	| heat	| dirty		| status	| kind		| refcnt  #
#-----------------------------------------------------------------------------------------------------------------------------------------#
[ 1,	  "monet_environment",	  "str",	  "str",	  10,	  40,	  "dirty",	  "dirty",	  "transient",	  1	  ]
[ 2,	  "timezones",		  "tzone",	  "tzone",	  24,	  41,	  "dirty",	  "dirty",	  "transient",	  1	  ]
[ 3,	  "tmp_3",		  "int",	  "int",	  1,	  196,	  "clean",	  "clean",	  "persistent",	  0	  ]
[ 4,	  "tmp_4",		  "int",	  "int",	  0,	  46,	  "dirty",	  "dirty",	  "transient",	  2	  ]
#-----------------#
# BAT:	  tmp_21  #
# (int)	  (str)	  #
#-----------------#
#---------------------------------------------------------------------------------#
# h	| t	| htype	| ttype	| count	| heat	| dirty	| status| kind	| refcnt  #
#---------------------------------------------------------------------------------#
>