# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
#	x := new(oid,chr);
#	de_a := insert(x,1@0,'a');
#	ee_a := insert(x,2@0,'a');
#	fe_a := insert(x,3@0,'b');
#	ge_a := insert(x,4@0,'b');
#	he_a := insert(x,5@0,'b');
#	ie_a := insert(x,6@0,'b');
#	je_a := insert(x,7@0,'c');
#	ke_a := insert(x,8@0,'c');
#
#	y := new(oid,dbl);
#	le_a := dbl(1.0);
#	me_a := insert(y,1@0,le_a);
#	ne_a := dbl(2.0);
#	oe_a := insert(y,2@0,ne_a);
#	pe_a := dbl(2.0);
#	qe_a := insert(y,3@0,pe_a);
#	re_a := dbl(2.0);
#	se_a := insert(y,4@0,re_a);
#	te_a := dbl(2.0);
#	ue_a := insert(y,5@0,te_a);
#	ve_a := dbl(3.0);
#	we_a := insert(y,6@0,ve_a);
#	xe_a := dbl(1.0);
#	ye_a := insert(y,7@0,xe_a);
#	af_a := dbl(1.0);
#	bf_a := insert(y,8@0,af_a);
#
#	z := new(oid,str);
#	cf_a := insert(z,1@0,"c");
#	df_a := insert(z,2@0,"a");
#	ef_a := insert(z,3@0,"b");
#	ff_a := insert(z,4@0,"c");
#	gf_a := insert(z,5@0,"a");
#	hf_a := insert(z,6@0,"a");
#	if_a := insert(z,7@0,"c");
#	jf_a := insert(z,8@0,"a");
#print("group x");print(x,y,z);
#        (zb1,b1) := group(x);
#print("b1 becomes"); print(b1);
#print("zb1 becomes"); print(zb1);
#        b2 := group(b1,y);
#print("b2 becomes"); print(b2);
#
#
function Admin.main():int; #0  (main:int)
    x := mal.new(oid,chr); #1 CMDBATnew (x:bat[oid,chr])<-(oid:oid)(chr:chr)
    de_a := bat.insert(x,1@0,'a'); #2 CMDinsert_bun (de_a:bat[oid,chr])<-(x:bat[oid,chr])($5:oid)($6:chr)
    ee_a := bat.insert(x,2@0,'a'); #3 CMDinsert_bun (ee_a:bat[oid,chr])<-(x:bat[oid,chr])($8:oid)($6:chr)
    fe_a := bat.insert(x,3@0,'b'); #4 CMDinsert_bun (fe_a:bat[oid,chr])<-(x:bat[oid,chr])($10:oid)($11:chr)
    ge_a := bat.insert(x,4@0,'b'); #5 CMDinsert_bun (ge_a:bat[oid,chr])<-(x:bat[oid,chr])($13:oid)($11:chr)
    he_a := bat.insert(x,5@0,'b'); #6 CMDinsert_bun (he_a:bat[oid,chr])<-(x:bat[oid,chr])($15:oid)($11:chr)
    ie_a := bat.insert(x,6@0,'b'); #7 CMDinsert_bun (ie_a:bat[oid,chr])<-(x:bat[oid,chr])($17:oid)($11:chr)
    je_a := bat.insert(x,7@0,'c'); #8 CMDinsert_bun (je_a:bat[oid,chr])<-(x:bat[oid,chr])($19:oid)($20:chr)
    ke_a := bat.insert(x,8@0,'c'); #9 CMDinsert_bun (ke_a:bat[oid,chr])<-(x:bat[oid,chr])($22:oid)($20:chr)
    y := mal.new(oid,dbl); #10 CMDBATnew (y:bat[oid,dbl])<-(oid:oid)(dbl:dbl)
    le_a := calc.dbl(1.0); #11 CALCflt_2_dbl (le_a:dbl)<-($26:flt)
    me_a := bat.insert(y,1@0,le_a); #12 CMDinsert_bun (me_a:bat[oid,dbl])<-(y:bat[oid,dbl])($5:oid)(le_a:dbl)
    ne_a := calc.dbl(2.0); #13 CALCflt_2_dbl (ne_a:dbl)<-($29:flt)
    oe_a := bat.insert(y,2@0,ne_a); #14 CMDinsert_bun (oe_a:bat[oid,dbl])<-(y:bat[oid,dbl])($8:oid)(ne_a:dbl)
    pe_a := calc.dbl(2.0); #15 CALCflt_2_dbl (pe_a:dbl)<-($29:flt)
    qe_a := bat.insert(y,3@0,pe_a); #16 CMDinsert_bun (qe_a:bat[oid,dbl])<-(y:bat[oid,dbl])($10:oid)(pe_a:dbl)
    re_a := calc.dbl(2.0); #17 CALCflt_2_dbl (re_a:dbl)<-($29:flt)
    se_a := bat.insert(y,4@0,re_a); #18 CMDinsert_bun (se_a:bat[oid,dbl])<-(y:bat[oid,dbl])($13:oid)(re_a:dbl)
    te_a := calc.dbl(2.0); #19 CALCflt_2_dbl (te_a:dbl)<-($29:flt)
    ue_a := bat.insert(y,5@0,te_a); #20 CMDinsert_bun (ue_a:bat[oid,dbl])<-(y:bat[oid,dbl])($15:oid)(te_a:dbl)
    ve_a := calc.dbl(3.0); #21 CALCflt_2_dbl (ve_a:dbl)<-($38:flt)
    we_a := bat.insert(y,6@0,ve_a); #22 CMDinsert_bun (we_a:bat[oid,dbl])<-(y:bat[oid,dbl])($17:oid)(ve_a:dbl)
    xe_a := calc.dbl(1.0); #23 CALCflt_2_dbl (xe_a:dbl)<-($26:flt)
    ye_a := bat.insert(y,7@0,xe_a); #24 CMDinsert_bun (ye_a:bat[oid,dbl])<-(y:bat[oid,dbl])($19:oid)(xe_a:dbl)
    af_a := calc.dbl(1.0); #25 CALCflt_2_dbl (af_a:dbl)<-($26:flt)
    bf_a := bat.insert(y,8@0,af_a); #26 CMDinsert_bun (bf_a:bat[oid,dbl])<-(y:bat[oid,dbl])($22:oid)(af_a:dbl)
    z := mal.new(oid,str); #27 CMDBATnew (z:bat[oid,str])<-(oid:oid)(str:str)
    cf_a := bat.insert(z,1@0,"c"); #28 CMDinsert_bun (cf_a:bat[oid,str])<-(z:bat[oid,str])($47:oid)($48:str)
    df_a := bat.insert(z,2@0,"a"); #29 CMDinsert_bun (df_a:bat[oid,str])<-(z:bat[oid,str])($50:oid)($51:str)
    ef_a := bat.insert(z,3@0,"b"); #30 CMDinsert_bun (ef_a:bat[oid,str])<-(z:bat[oid,str])($53:oid)($54:str)
    ff_a := bat.insert(z,4@0,"c"); #31 CMDinsert_bun (ff_a:bat[oid,str])<-(z:bat[oid,str])($56:oid)($48:str)
    gf_a := bat.insert(z,5@0,"a"); #32 CMDinsert_bun (gf_a:bat[oid,str])<-(z:bat[oid,str])($58:oid)($51:str)
    hf_a := bat.insert(z,6@0,"a"); #33 CMDinsert_bun (hf_a:bat[oid,str])<-(z:bat[oid,str])($60:oid)($51:str)
    if_a := bat.insert(z,7@0,"c"); #34 CMDinsert_bun (if_a:bat[oid,str])<-(z:bat[oid,str])($62:oid)($48:str)
    jf_a := bat.insert(z,8@0,"a"); #35 CMDinsert_bun (jf_a:bat[oid,str])<-(z:bat[oid,str])($64:oid)($51:str)
    io.print("group x"); #36 CMDprint_val ($65:int)<-($66:str)
    io.print(x,y,z); #37 CMDtable ($67:int)<-(x:bat[oid,chr])(y:bat[oid,dbl])(z:bat[oid,str])
    (zb1,b1):=group.group(x); #38 CTgroup (zb1:bat[chr,int])(b1:bat[oid,oid])<-(x:bat[oid,chr])
    io.print("b1 becomes"); #39 CMDprint_val ($70:int)<-($71:str)
    io.print(b1); #40 CMDprint_val ($72:int)<-(b1:bat[oid,oid])
    io.print("zb1 becomes"); #41 CMDprint_val ($73:int)<-($74:str)
    io.print(zb1); #42 CMDprint_val ($75:int)<-(zb1:bat[chr,int])
    b2 := group.group(b1,y); #43 CTderive2 (b2:bat[oid,oid])<-(b1:bat[oid,oid])(y:bat[oid,dbl])
    io.print("b2 becomes"); #44 CMDprint_val ($77:int)<-($78:str)
    io.print(b2); #45 CMDprint_val ($79:int)<-(b2:bat[oid,oid])
end main; #46  
[ "group x" ]
#---------------------------------#
# BAT:	  tmp_4	| tmp_5	| tmp_6	  #
# (oid)	  (chr)	| (dbl)	| (str)	  #
#---------------------------------#
[ 1@0,	  'a',	  1,	  "c"	  ]
[ 2@0,	  'a',	  2,	  "a"	  ]
[ 3@0,	  'b',	  2,	  "b"	  ]
[ 4@0,	  'b',	  2,	  "c"	  ]
[ 5@0,	  'b',	  2,	  "a"	  ]
[ 6@0,	  'b',	  3,	  "a"	  ]
[ 7@0,	  'c',	  1,	  "c"	  ]
[ 8@0,	  'c',	  1,	  "a"	  ]
[ "b1 becomes" ]
#-----------------#
# BAT:	  tmp_7	  #
# (oid)	  (oid)	  #
#-----------------#
[ 1@0,	  1@0	  ]
[ 2@0,	  1@0	  ]
[ 3@0,	  3@0	  ]
[ 4@0,	  3@0	  ]
[ 5@0,	  3@0	  ]
[ 6@0,	  3@0	  ]
[ 7@0,	  7@0	  ]
[ 8@0,	  7@0	  ]
[ "zb1 becomes" ]
#-----------------#
# BAT:	  tmp_8	  #
# (oid)	  (int)	  #
#-----------------#
[ 1@0,	  2	  ]
[ 3@0,	  4	  ]
[ 7@0,	  2	  ]
[ "b2 becomes" ]
#-----------------#
# BAT:	  tmp_9	  #
# (void)  (oid)	  #
#-----------------#
[ 1@0,	  1@0	  ]
[ 2@0,	  2@0	  ]
[ 3@0,	  3@0	  ]
[ 4@0,	  3@0	  ]
[ 5@0,	  3@0	  ]
[ 6@0,	  6@0	  ]
[ 7@0,	  7@0	  ]
[ 8@0,	  7@0	  ]
>