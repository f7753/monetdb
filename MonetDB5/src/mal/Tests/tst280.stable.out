stdout of test 'tst280` in directory 'src/mal` itself:
# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
# Visit http://monetdb.cwi.nl for further information.
#function pow(i:int,j:int):int;
#	z:= i+j;
#	printf("result %d\n",z);
#	return z;
#end pow;
function Admin.pow(i:int,j:int):int;	# 0  (pow:int)<-(i:int)(j:int)
    z := calc.+(i,j);	# 1 CALCbinaryADDintint (z:int)<-(i:int)(j:int)
    io.printf("result %d\n",z);	# 2 IOprint_formatted_int ($4:int)<-($5:str)(z:int)
    return z;	# 3  (z:int)
end pow;	# 4  
#function tst(A2:bat[:void,:int],A3:bat[:void,:int]):bat[:void,:int]; 
#	print(A2);
#	resB := bbp.new(:void,:int); 
#	bat.setSequenceBase(resB,0@0);
#	lim:= count(A2);
#	printf("count %d\n",lim);
#	m:= -1:lng;
#	l:= lng(lim);
#barrier mloop:=mal.nextElement(m,0:lng,l,1:lng); 
#	printf("loopindex %d\n",m);
#        B2 := algebra.fetch(A2,m);       
#	printf("B2 value %d\n",B2);
#        B3 := algebra.fetch(A3,m);       
#	printf("B3 value %d\n",B3);
#        cr := pow(B2,B3);
#        insert(resB,nil,cr); 
#        redo mloop:=mal.nextElement(m,0:lng,l,1:lng);    
#catch   MALexception;  
#exit    MALexception; 
#exit    mloop;  
#        return resB;    
#end tst;   
function Admin.tst(A2:bat[:void,:int],A3:bat[:void,:int]):bat[:void,:int];	# 0  (tst:bat[:void,:int])<-(A2:bat[:void,:int])(A3:bat[:void,:int])
    io.print(A2);	# 1 IOprint_val ($3:int)<-(A2:bat[:void,:int])
    resB := bbp.new(:void,:int);	# 2 CMDBATnew (resB:bat[:void,:int])<-($5:void)($6:int)
    bat.setSequenceBase(resB,0@0);	# 3 BKCsetSequenceBase ($7:any)<-(resB:bat[:void,:int])($8:oid)
    lim := algebra.count(A2);	# 4 ALGcount_bat (lim:lng)<-(A2:bat[:void,:int])
    io.printf("count %d\n",lim);	# 5 IOprint_formatted_lng ($10:int)<-($11:str)(lim:lng)
    m := -1;	# 6  (m:lng)<-($13:lng)
    l := calc.lng(lim);	# 7 CALClng2lng (l:lng)<-(lim:lng)
barrier mloop := mal.nextElement(m,0,l,1);	# 8 lngForloopStep (mloop:bit)<-(m:lng)($16:lng)(l:lng)($17:lng) jump 19
    io.printf("loopindex %d\n",m);	# 9 IOprint_formatted_lng ($18:int)<-($19:str)(m:lng)
    B2 := algebra.fetch(A2,m);	# 10 ALGfetch (B2:int)<-(A2:bat[:void,:int])(m:lng)
    io.printf("B2 value %d\n",B2);	# 11 IOprint_formatted_int ($21:int)<-($22:str)(B2:int)
    B3 := algebra.fetch(A3,m);	# 12 ALGfetch (B3:int)<-(A3:bat[:void,:int])(m:lng)
    io.printf("B3 value %d\n",B3);	# 13 IOprint_formatted_int ($24:int)<-($25:str)(B3:int)
    cr := Admin.pow(B2,B3);	# 14  (cr:int)<-(B2:int)(B3:int)
    bat.insert(resB,nil,cr);	# 15 BKCinsert_bun ($27:void)<-(resB:bat[:void,:int])($28:void)(cr:int)
    redo mloop := mal.nextElement(m,0,l,1);	# 16 lngForloopStep (mloop:bit)<-(m:lng)($16:lng)(l:lng)($17:lng) jump 9
catch MALexception;	# 17  (MALexception:any) jump 18
exit MALexception;	# 18  (MALexception:any)
exit mloop;	# 19  (mloop:bit)
    return resB;	# 20  (resB:bat[:void,:int])
end tst;	# 21  
#
#	b := new(:void,:int);
#	setSequenceBase(b,0@0);
#	insert(b,nil,1);
#	insert(b,nil,2);
#	e:=fetch(b,1:lng);
#	print(e);
#	print(b);
#	c:= copy(b);
#	z:= tst(b,c);
#	print(z);
#
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(:void,:int);	# 1 CMDBATnew (b:bat[:void,:int])<-($2:void)($3:int)
    bat.setSequenceBase(b,0@0);	# 2 BKCsetSequenceBase ($4:any)<-(b:bat[:void,:int])($5:oid)
    bat.insert(b,nil,1);	# 3 BKCinsert_bun ($6:void)<-(b:bat[:void,:int])($7:void)($8:int)
    bat.insert(b,nil,2);	# 4 BKCinsert_bun ($9:void)<-(b:bat[:void,:int])($7:void)($10:int)
    e := algebra.fetch(b,1);	# 5 ALGfetch (e:int)<-(b:bat[:void,:int])($12:lng)
    io.print(e);	# 6 IOprint_val ($13:int)<-(e:int)
    io.print(b);	# 7 IOprint_val ($14:int)<-(b:bat[:void,:int])
    c := algebra.copy(b);	# 8 ALGcopy (c:bat[:void,:int])<-(b:bat[:void,:int])
    z := Admin.tst(b,c);	# 9  (z:bat[:void,:int])<-(b:bat[:void,:int])(c:bat[:void,:int])
    io.print(z);	# 10 IOprint_val ($17:int)<-(z:bat[:void,:int])
end main;	# 11  
[ 2 ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
count 2
loopindex 0
B2 value 1
B3 value 1
result 2
loopindex 1
B2 value 2
B3 value 2
result 4
#-----------------#
# h	tmp_5	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 1@0,	  4	  ]
>