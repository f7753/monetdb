stdout of test 'tst1410` in directory 'src/mal` itself:


# 07:59:05 >  
# 07:59:05 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1410.mal </dev/null
# 07:59:05 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## testing the basic functionality of the enum module
## This example illustrates use of the atomary aspect
#
#atom fruit:enum;	# to announce existence of a new type
#a:= new(:int,:str);
#insert(a,0,"apples");
#insert(a,1,"oranges");
#insert(a,2,"grapes");
#insert(a,3,"grapes");
#insert(a,5,"apples");
#insert(a,6,"apples");
#insert(a,7,"apples");
#print(a);
#enum.create(:fruit,a);
#print("get encoding table");
#e:= enum.getTable(:fruit);
#print(e);
#print("test type for enumeration");
#b:= enum.isEnum(e);
#print(b);
#print("start bulk encoding test");
#z:= copy(a);
#print(z);
#print("encode the bat");
#y:= enum.encode(:fruit,z);
#print(y);
#print("decode the bat");
#x:= enum.decode(y);
#print(x);
#print("set histogram on tail");
#tt:= reverse(y);
#setHistogram(:fruit,tt);
#b:= enum.isHistogram(:fruit,tt);
#print(b);
#
function Admin.main():int;	# 0  (main:int)
    a := bbp.new(:int,:str);	# 1 CMDBATnew (a:bat[:int,:str])<-($2:int)($3:str)
    bat.insert(a,0,"apples");	# 2 BKCinsert_bun ($4:bat[:int,:str])<-(a:bat[:int,:str])($5:int)($6:str)
    bat.insert(a,1,"oranges");	# 3 BKCinsert_bun ($7:bat[:int,:str])<-(a:bat[:int,:str])($8:int)($9:str)
    bat.insert(a,2,"grapes");	# 4 BKCinsert_bun ($10:bat[:int,:str])<-(a:bat[:int,:str])($11:int)($12:str)
    bat.insert(a,3,"grapes");	# 5 BKCinsert_bun ($13:bat[:int,:str])<-(a:bat[:int,:str])($14:int)($12:str)
    bat.insert(a,5,"apples");	# 6 BKCinsert_bun ($15:bat[:int,:str])<-(a:bat[:int,:str])($16:int)($6:str)
    bat.insert(a,6,"apples");	# 7 BKCinsert_bun ($17:bat[:int,:str])<-(a:bat[:int,:str])($18:int)($6:str)
    bat.insert(a,7,"apples");	# 8 BKCinsert_bun ($19:bat[:int,:str])<-(a:bat[:int,:str])($20:int)($6:str)
    io.print(a);	# 9 IOprint_val ($21:int)<-(a:bat[:int,:str])
    enum.create(:fruit,a);	# 10 ENUMcreate ($22:bat[:str,:fruit])<-($23:fruit)(a:bat[:int,:str])
    io.print("get encoding table");	# 11 IOprint_val ($24:int)<-($25:str)
    e := enum.getTable(:fruit);	# 12 ENUMtable (e:bat[:any,:any])<-($27:fruit)
    io.print(e);	# 13 IOprint_val ($28:int)<-(e:bat[:any,:any])
    io.print("test type for enumeration");	# 14 IOprint_val ($29:int)<-($30:str)
    b := enum.isEnum(e);	# 15 isEnum (b:bit)<-(e:bat[:any,:any])
    io.print(b);	# 16 IOprint_val ($32:int)<-(b:bit)
    io.print("start bulk encoding test");	# 17 IOprint_val ($33:int)<-($34:str)
    z := algebra.copy(a);	# 18 ALGcopy (z:bat[:int,:str])<-(a:bat[:int,:str])
    io.print(z);	# 19 IOprint_val ($36:int)<-(z:bat[:int,:str])
    io.print("encode the bat");	# 20 IOprint_val ($37:int)<-($38:str)
    y := enum.encode(:fruit,z);	# 21 ENUMencode_multi (y:bat[:int,:fruit])<-($40:fruit)(z:bat[:int,:str])
    io.print(y);	# 22 IOprint_val ($41:int)<-(y:bat[:int,:fruit])
    io.print("decode the bat");	# 23 IOprint_val ($42:int)<-($43:str)
    x := enum.decode(y);	# 24 ENUMdecode_multi (x:bat[:int,:any])<-(y:bat[:int,:fruit])
    io.print(x);	# 25 IOprint_val ($45:int)<-(x:bat[:int,:any])
    io.print("set histogram on tail");	# 26 IOprint_val ($46:int)<-($47:str)
    tt := bat.reverse(y);	# 27 BKCreverse (tt:bat[:fruit,:int])<-(y:bat[:int,:fruit])
    enum.setHistogram(:fruit,tt);	# 28 ENUMsethisto ($49:void)<-($50:fruit)(tt:bat[:fruit,:int])
    b := enum.isHistogram(:fruit,tt);	# 29 ENUMishisto (b:bit)<-($51:fruit)(tt:bat[:fruit,:int])
    io.print(b);	# 30 IOprint_val ($52:int)<-(b:bit)
end main;	# 31  
#-------------------------#
# h	tmp_4		  # name
# int	str		  # type
#-------------------------#
[ 0,	  "apples"	  ]
[ 1,	  "oranges"	  ]
[ 2,	  "grapes"	  ]
[ 3,	  "grapes"	  ]
[ 5,	  "apples"	  ]
[ 6,	  "apples"	  ]
[ 7,	  "apples"	  ]
[ "get encoding table" ]
#-------------------------#
# h		fruit	  # name
# str		int	  # type
#-------------------------#
[ "apples",	  4	  ]
[ "grapes",	  2	  ]
[ "oranges",	  1	  ]
[ "test type for enumeration" ]
[ true ]
[ "start bulk encoding test" ]
#-------------------------#
# h	tmp_6		  # name
# int	str		  # type
#-------------------------#
[ 0,	  "apples"	  ]
[ 1,	  "oranges"	  ]
[ 2,	  "grapes"	  ]
[ 3,	  "grapes"	  ]
[ 5,	  "apples"	  ]
[ 6,	  "apples"	  ]
[ 7,	  "apples"	  ]
[ "encode the bat" ]
#-------------------------#
# h	tmp_7		  # name
# int	fruit		  # type
#-------------------------#
[ 0,	  apples	  ]
[ 1,	  oranges	  ]
[ 2,	  grapes	  ]
[ 3,	  grapes	  ]
[ 5,	  apples	  ]
[ 6,	  apples	  ]
[ 7,	  apples	  ]
[ "decode the bat" ]
#-------------------------#
# h	tmp_8		  # name
# int	str		  # type
#-------------------------#
[ 0,	  "apples"	  ]
[ 1,	  "oranges"	  ]
[ 2,	  "grapes"	  ]
[ 3,	  "grapes"	  ]
[ 5,	  "apples"	  ]
[ 6,	  "apples"	  ]
[ 7,	  "apples"	  ]
[ "set histogram on tail" ]
[ true ]

# 07:59:05 >  
# 07:59:05 >  Done.
# 07:59:05 >  

