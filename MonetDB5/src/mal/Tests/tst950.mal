# the multiplex code blocks.

t0:= alarm.usec();
size:= 1024:lng;
size:= 16* size;
b:= new(:lng,:lng);
barrier (go,i):= newRange(0:lng);
	k:= rand();
	k2:= lng(k);
	l:= lng(k);
	insert(b,l,k2);
	redo (go,i):= nextElement(1:lng,size);
exit (go,i);
	t1:= alarm.usec();
	d0:= t1-t0;
	printf("#loop %d\n",d0);
	t0:= t1;

	R:= copy(b);
	S:= copy(b);
	t1:= alarm.usec();
	d0:= t1-t0;
	printf("#create operands %d\n",d0);
	t0:= t1;

	z:= cross(R,S);
	size:= count(z);
	t1:= alarm.usec();
	d0:= t1-t0;
	printf("#cross product size %d\n",size);
	printf("#perform cross product %d\n",d0);
	t0:= t1;

	chksize:= size/10;
barrier (b1,rf):= chopper.newChunkIterator(R,chksize);
barrier (b2,sf):= chopper.newChunkIterator(S,chksize);
    pi:= cross(rf,sf);
redo (b2,sf):= chopper.hasMoreChunks(S,chksize);
redo (b1,rf):= chopper.hasMoreChunks(R,chksize);
exit b2;
exit b1;
	t1:= alarm.usec();
	d0:= t1-t0;
	printf("#chopped cross product %d\n",d0);
	t0:= t1;

