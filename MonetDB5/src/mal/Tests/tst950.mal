# the multiplex code blocks.

t0:= alarm.usec();
size:= 1024:lng;
size:= 16* size;
R:= new(:int,:void);
S:= new(:void,:int);
barrier (go,i):= newRange(0:lng);
	l:= int(i);
	insert(R,l,nil);
	insert(S,nil,l);
	redo (go,i):= nextElement(1:lng,size);
exit (go,i);
	t1:= alarm.usec();
	d0:= t1-t0;
	printf("#loop %d\n",d0);
	t0:= t1;

#	z:= cartesianproduct(R,S);
#	size:= count(z);
#	t1:= alarm.usec();
#	d0:= t1-t0;
#	printf("#cartesianproduct size %d\n",size);
#	printf("#perform cartesianproduct %d\n",d0);
#	t0:= t1;

	chksize:= size/10;
barrier (b1,rf):= chopper.newChunkIterator(R,chksize);
barrier (b2,sf):= chopper.newChunkIterator(S,chksize);
    pi:= cartesianproduct(rf,sf);
redo (b2,sf):= chopper.hasMoreChunks(S,chksize);
redo (b1,rf):= chopper.hasMoreChunks(R,chksize);
exit b2;
exit b1;
	t1:= alarm.usec();
	d0:= t1-t0;
	printf("#chopped cross product %d\n",d0);
	t0:= t1;

