stdout of test 'tst910` in directory 'src/mal` itself:


# 08:01:39 >  
# 08:01:39 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst910.mal </dev/null
# 08:01:39 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the multiplex code blocks.
## this is the equivalent to tst901, but now without batcalc support
#
#function inc(a:lng,b:lng):lng;
#       z:= a+b;
#       return z;
#end inc;
function user.inc(a:lng,b:lng):lng;	# 0  (inc:lng)<-(a:lng)(b:lng)
    z := calc.+(a,b);	# 1 CALCbinaryADDlnglng (z:lng)<-(a:lng)(b:lng)
    return z;	# 2  (z:lng)
end inc;	# 3  
#b:= new(:lng,:lng);
#i:= -1:lng;
#barrier (v,i):= newRange(0:lng);
#       insert(b,i,i);
#       redo (v,i):= nextElement(1:lng,10:lng);
#exit (v,i);
#
#c:= copy(b);
#print(c);
#x:= multiplex.script("+",b,c);
#print(x);
#x:= multiplex.script("+",b,1:lng);
#print(x);
#x:= multiplex.script("inc",b,c);
#print(x);
#x:= multiplex.script("*",b,c);
#print(x);
#y:= multiplex.script("==",b,b);
#print(y);
#y:= multiplex.script("==",b,x);
#print(y);
#z:= multiplex.script("not",y);
#print(z);
#
#
function user.main():int;	# 0  (main:int)
    b := bbp.new(:lng,:lng);	# 1 CMDBATnew (b:bat[:lng,:lng])<-($2:lng)($3:lng)
    i := -1:lng;	# 2  (i:lng)<-($5:lng)
barrier (v,i):= mal.newRange(0:lng);	# 3 RNGnewRange_lng (v:bit)(i:lng)<-($7:lng) jump 6
    bat.insert(b,i,i);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(i:lng)(i:lng)
    redo (v,i):= mal.nextElement(1:lng,10:lng);	# 5 RNGnextElement_lng (v:bit)(i:lng)<-($9:lng)($10:lng) jump 4
exit (v,i);	# 6  (v:bit)(i:lng)
    c := algebra.copy(b);	# 7 ALGcopy (c:bat[:lng,:lng])<-(b:bat[:lng,:lng])
    io.print(c);	# 8 IOprint_val ($12:int)<-(c:bat[:lng,:lng])
    x := multiplex.script("+",b,c);	# 9  (x:bat[:lng,:lng])<-($14:str)(b:bat[:lng,:lng])(c:bat[:lng,:lng])
    io.print(x);	# 10 IOprint_val ($15:int)<-(x:bat[:lng,:lng])
    x := multiplex.script("+",b,1:lng);	# 11  (x:bat[:lng,:lng])<-($14:str)(b:bat[:lng,:lng])($9:lng)
    io.print(x);	# 12 IOprint_val ($16:int)<-(x:bat[:lng,:lng])
    x := multiplex.script("inc",b,c);	# 13  (x:bat[:lng,:lng])<-($17:str)(b:bat[:lng,:lng])(c:bat[:lng,:lng])
    io.print(x);	# 14 IOprint_val ($18:int)<-(x:bat[:lng,:lng])
    x := multiplex.script("*",b,c);	# 15  (x:bat[:lng,:lng])<-($19:str)(b:bat[:lng,:lng])(c:bat[:lng,:lng])
    io.print(x);	# 16 IOprint_val ($20:int)<-(x:bat[:lng,:lng])
    y := multiplex.script("==",b,b);	# 17  (y:bat[:lng,:bit])<-($22:str)(b:bat[:lng,:lng])(b:bat[:lng,:lng])
    io.print(y);	# 18 IOprint_val ($23:int)<-(y:bat[:lng,:bit])
    y := multiplex.script("==",b,x);	# 19  (y:bat[:lng,:bit])<-($22:str)(b:bat[:lng,:lng])(x:bat[:lng,:lng])
    io.print(y);	# 20 IOprint_val ($24:int)<-(y:bat[:lng,:bit])
    z := multiplex.script("not",y);	# 21  (z:bat[:lng,:bit])<-($26:str)(y:bat[:lng,:bit])
    io.print(z);	# 22 IOprint_val ($27:int)<-(z:bat[:lng,:bit])
end main;	# 23  
#-----------------#
# h	tmp_5	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  3	  ]
[ 4,	  4	  ]
[ 5,	  5	  ]
[ 6,	  6	  ]
[ 7,	  7	  ]
[ 8,	  8	  ]
[ 9,	  9	  ]
#-----------------#
# h	tmp_6	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  6	  ]
[ 4,	  8	  ]
[ 5,	  10	  ]
[ 6,	  12	  ]
[ 7,	  14	  ]
[ 8,	  16	  ]
[ 9,	  18	  ]
#-----------------#
# h	tmp_6	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  1	  ]
[ 1,	  2	  ]
[ 2,	  3	  ]
[ 3,	  4	  ]
[ 4,	  5	  ]
[ 5,	  6	  ]
[ 6,	  7	  ]
[ 7,	  8	  ]
[ 8,	  9	  ]
[ 9,	  10	  ]
#-----------------#
# h	tmp_6	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  6	  ]
[ 4,	  8	  ]
[ 5,	  10	  ]
[ 6,	  12	  ]
[ 7,	  14	  ]
[ 8,	  16	  ]
[ 9,	  18	  ]
#-----------------#
# h	tmp_6	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  81	  ]
#-----------------#
# h	tmp_7	  # name
# lng	bit	  # type
#-----------------#
[ 0,	  true	  ]
[ 1,	  true	  ]
[ 2,	  true	  ]
[ 3,	  true	  ]
[ 4,	  true	  ]
[ 5,	  true	  ]
[ 6,	  true	  ]
[ 7,	  true	  ]
[ 8,	  true	  ]
[ 9,	  true	  ]
#-----------------#
# h	tmp_7	  # name
# lng	bit	  # type
#-----------------#
[ 0,	  true	  ]
[ 1,	  true	  ]
[ 2,	  false	  ]
[ 3,	  false	  ]
[ 4,	  false	  ]
[ 5,	  false	  ]
[ 6,	  false	  ]
[ 7,	  false	  ]
[ 8,	  false	  ]
[ 9,	  false	  ]
#-----------------#
# h	tmp_8	  # name
# lng	bit	  # type
#-----------------#
[ 0,	  false	  ]
[ 1,	  false	  ]
[ 2,	  true	  ]
[ 3,	  true	  ]
[ 4,	  true	  ]
[ 5,	  true	  ]
[ 6,	  true	  ]
[ 7,	  true	  ]
[ 8,	  true	  ]
[ 9,	  true	  ]

# 08:01:39 >  
# 08:01:39 >  Done.
# 08:01:39 >  

