# a test checking BAT reference counting under various situations
function steal(bb:bat[:any$1,:any$2]) :bat[:any$1,:any$2];
	i:= bbp.getLRefCount(bb);
	io.printf("enter function refcount =%d[2]\n",i);

	loc:= bb;
	i:= bbp.getLRefCount(bb);
	io.printf("local in function refcount =%d[2]\n",i);

	return bb;
end steal; 

	b:= bbp.new(:int,:str);
	i:= bbp.getLRefCount(b);
	io.printf("refcount =%d[1]\n",i);	

	bat.insert(b,1,"bat B");
	io.print(b);
	i:= bbp.getLRefCount(b);
	io.printf("refcount =%d[1]\n",i);

	#handle an alias
	b2:= b;			
	i:= bbp.getLRefCount(b);
	io.printf("after assignment refcount =%d[1]\n",i);

	#re-use a bat variable
	b3:= b;			
	i:= bbp.getLRefCount(b);
	io.printf("after 2nd assignment refcount =%d[2]\n",i);

	#re-use a bat variable
	b3:= bbp.new(:int,:str);			
	i:= bbp.getLRefCount(b);
	io.printf("after 3rd assignment refcount =%d[1]\n",i);
	i:= bbp.getLRefCount(b3);
	io.printf("assignment refcount =%d[1]\n",i);

	#re-use a bat variable
	b4:= algebra.select(b,"bat B","bat B");
	io.print(b4);
	i:= bbp.getLRefCount(b);
	io.printf("after 4rd assignment refcount =%d[1]\n",i);

	# remove by assignment
	b2:= b3;
	i:= bbp.getLRefCount(b);
	io.printf("after 5rd assignment refcount =%d[1]\n",i);

	io.printf("call function\n");
	d:= user.steal(b);
	i:= bbp.getLRefCount(b);
	io.printf("return from function refcount =%d[2]\n",i);

	io.printf("check self replacement\n");
	i:= bbp.getLRefCount(b);
	b:= user.steal(b);
	j:= bbp.getLRefCount(b);
	io.print(i); io.print(j);

	z:= bbp.getRefCount();
	zl:= bbp.getLRefCount();
	zn:= bbp.getNames();
	io.print(zn,z,zl);
