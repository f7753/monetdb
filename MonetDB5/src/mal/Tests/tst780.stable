# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
##test debugging of a recursive function
#
#function test(age:int,nme:str):int;
#	d:= catalog.getStackDepth();
#	printf("stack depth %d\n",d);
#	printf("simulated error\n");
#	f:= catalog.symbolDump();
#	io.print(f);
#	t:= catalog.getStackFrame();
#	print(t);
#	t:= catalog.getStackFrame(d);
#	print(t);
#end test;
function Admin.test(age:int,nme:str):int; #0  (test:int)<-(age:int)(nme:str)
    d := catalog.getStackDepth(); #1 CATALOGStkDepth (d:int)
    system.printf("stack depth %d\n",d); #2 SYSprint_formatted_int ($4:int)<-($5:str)(d:int)
    system.printf("simulated error\n"); #3 SYSprint_str ($6:int)<-($7:str)
    f := catalog.symbolDump(); #4 CATALOGsymbolDump (f:bat[void,str])
    io.print(f); #5 CMDprint_val ($9:int)<-(f:bat[void,str])
    t := catalog.getStackFrame(); #6 CATALOGStkFrame (t:bat[str,str])
    io.print(t); #7 CMDprint_val ($11:int)<-(t:bat[str,str])
    t := catalog.getStackFrame(d); #8 CATALOGStkFrameN (t:bat[str,str])<-(d:int)
    io.print(t); #9 CMDprint_val ($12:int)<-(t:bat[str,str])
end test; #10  
#test(12,"jj");
#
function Admin.main():int; #0  (main:int)
    Admin.test(12,"jj"); #1  ($1:int)<-($2:int)($3:str)
end main; #2  
stack depth 2
simulated error
#---------------------------------------------------------#
# BAT:	  stmt						  #
# (void)  (str)						  #
#---------------------------------------------------------#
[ nil,	  "function Admin.test(age:int,nme:str):int;"	  ]
[ nil,	  "    d := catalog.getStackDepth();"		  ]
[ nil,	  "    system.printf(\"stack depth %d\\n\",d);"	  ]
[ nil,	  "    system.printf(\"simulated error\\n\");"	  ]
[ nil,	  "    f := catalog.symbolDump();"		  ]
[ nil,	  "    io.print(f);"				  ]
[ nil,	  "    t := catalog.getStackFrame();"		  ]
[ nil,	  "    io.print(t);"				  ]
[ nil,	  "    t := catalog.getStackFrame(d);"		  ]
[ nil,	  "    io.print(t);"				  ]
[ nil,	  "end test;"					  ]
#-----------------------------------------#
# BAT:	  frame				  #
# (str)	  (str)				  #
#-----------------------------------------#
[ "test", "0@0"				  ]
[ "age",  "12"				  ]
[ "nme",  "\"jj\""			  ]
[ "d",	  "2"				  ]
[ "$4",	  "1"				  ]
[ "$5",	  "\"stack depth %d\\\\n\""	  ]
[ "$6",	  "1"				  ]
[ "$7",	  "\"simulated error\\\\n\""	  ]
[ "f",	  "<stmt>"			  ]
[ "$9",	  "0"				  ]
[ "t",	  "<frame>"			  ]
[ "$11",  "0"				  ]
[ "$12",  "0"				  ]
#-------------------------#
# BAT:	  frame		  #
# (str)	  (str)		  #
#-------------------------#
[ "test", "0@0"		  ]
[ "age",  "0"		  ]
[ "nme",  "12"		  ]
[ "d",	  "\"jj\""	  ]
>