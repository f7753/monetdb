# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
##test debugging of a recursive function
#
#function level():void;
#	print("dubble depth\n");
#	s:= inspect.getStackTrace();
#	print(s);
#end level;
function Admin.level():void; #0  (level:void)
    io.print("dubble depth\n"); #1 CMDprint_val ($1:int)<-($2:str)
    s := inspect.getStackTrace(); #2 INSPECTStkTrace (s:bat[void,str])
    io.print(s); #3 CMDprint_val ($4:int)<-(s:bat[void,str])
end level; #4  
#function test(age:int,nme:str):int;
#	d:= inspect.getStackDepth();
#	printf("stack depth %d\n",d);
#	printf("simulated error\n");
#	f:= inspect.getCode();
#	io.print(f);
#	t:= inspect.getStackFrame();
#	print(t);
#	t:= inspect.getStackFrame(d);
#	print(t);
#	level();
#end test;
function Admin.test(age:int,nme:str):int; #0  (test:int)<-(age:int)(nme:str)
    d := inspect.getStackDepth(); #1 INSPECTStkDepth (d:int)
    system.printf("stack depth %d\n",d); #2 SYSprint_formatted_int ($4:int)<-($5:str)(d:int)
    system.printf("simulated error\n"); #3 SYSprint_str ($6:int)<-($7:str)
    f := inspect.getCode(); #4 INSPECTcodeDump (f:bat[void,str])
    io.print(f); #5 CMDprint_val ($9:int)<-(f:bat[void,str])
    t := inspect.getStackFrame(); #6 INSPECTStkFrame (t:bat[str,str])
    io.print(t); #7 CMDprint_val ($11:int)<-(t:bat[str,str])
    t := inspect.getStackFrame(d); #8 INSPECTStkFrameN (t:bat[str,str])<-(d:int)
    io.print(t); #9 CMDprint_val ($12:int)<-(t:bat[str,str])
    Admin.level(); #10  ($13:void)
end test; #11  
#test(12,"jj");
#
function Admin.main():int; #0  (main:int)
    Admin.test(12,"jj"); #1  ($1:int)<-($2:int)($3:str)
end main; #2  
stack depth 2
simulated error
#---------------------------------------------------------#
# BAT:	  stmt						  #
# (int)	  (str)						  #
#---------------------------------------------------------#
[ 0,	  "function Admin.test(age:int,nme:str):int;"	  ]
[ 1,	  "    d := inspect.getStackDepth();"		  ]
[ 2,	  "    system.printf(\"stack depth %d\\n\",d);"	  ]
[ 3,	  "    system.printf(\"simulated error\\n\");"	  ]
[ 4,	  "    f := inspect.getCode();"			  ]
[ 5,	  "    io.print(f);"				  ]
[ 6,	  "    t := inspect.getStackFrame();"		  ]
[ 7,	  "    io.print(t);"				  ]
[ 8,	  "    t := inspect.getStackFrame(d);"		  ]
[ 9,	  "    io.print(t);"				  ]
[ 10,	  "    Admin.level();"				  ]
[ 11,	  "end test;"					  ]
#-----------------------------------------#
# BAT:	  frame				  #
# (str)	  (str)				  #
#-----------------------------------------#
[ "test", "0"				  ]
[ "age",  "12"				  ]
[ "nme",  "\"jj\""			  ]
[ "d",	  "2"				  ]
[ "$4",	  "1"				  ]
[ "$5",	  "\"stack depth %d\\\\n\""	  ]
[ "$6",	  "1"				  ]
[ "$7",	  "\"simulated error\\\\n\""	  ]
[ "f",	  "<stmt>"			  ]
[ "$9",	  "0"				  ]
[ "t",	  "<frame>"			  ]
[ "$11",  "0"				  ]
[ "$12",  "0"				  ]
[ "$13",  "0@0"				  ]
#-------------------------#
# BAT:	  frame		  #
# (str)	  (str)		  #
#-------------------------#
[ "test", "0@0"		  ]
[ "age",  "0"		  ]
[ "nme",  "12"		  ]
[ "d",	  "\"jj\""	  ]
[ "dubble depth\\n" ]
#---------------------------------------------------------#
# BAT:	  trace						  #
# (int)	  (str)						  #
#---------------------------------------------------------#
[ 0,	  "inspect.getStackTrace() at #2 in level"	  ]
[ 1,	  "Admin.level() at #10 in test"		  ]
[ 2,	  "Admin.test(12,\"jj\") at #1 in main"		  ]
>