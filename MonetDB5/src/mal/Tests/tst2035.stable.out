stdout of test 'tst2035` in directory 'src/mal` itself:


# 08:00:00 >  
# 08:00:00 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst2035.mal </dev/null
# 08:00:00 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##The 2000 serie  is focussed on parallelism
#
#function clkticks(n:int):void;
#barrier	b:= n>0;
#	#printf("#clock tick %d\n",n);
#	alarm.sleep(2);
#	n:= n-1;
#	redo b:= n>0;
#exit	b;
#end clkticks;
function Admin.clkticks(n:int):void;	# 0  (clkticks:void)<-(n:int)
barrier b := calc.>(n,0);	# 1 CALCcompGTintint (b:bit)<-(n:int)($3:int) jump 5
    alarm.sleep(2);	# 2 ALARMsleep ($4:void)<-($5:int)
    n := calc.-(n,1);	# 3 CALCbinarySUBintint (n:int)<-(n:int)($6:int)
    redo b := calc.>(n,0);	# 4 CALCcompGTintint (b:bit)<-(n:int)($3:int) jump 2
exit b;	# 5  (b:bit)
end clkticks;	# 6  
#
#counter:=0;
#thread 	hdl:=0;	# synchronize through a counter
#	print("#start the child");
#	clkticks(1);
#	counter:= counter+1;
#	#printf("#counter %d\n",counter);
#barrier t:= counter==2;
#	leave hdl;
#exit	t;
#	#printf("#Redo thread\n");
#	redo hdl;
#exit	hdl;
#
#printf("#Main thread\n");
## loop to wait for the child to exit
#barrier wl:= true;
#	alarm.sleep(5);
#	printf("#Wait for child to exit %d\n",hdl);
#barrier	t0:=counter == 2;
#	printf("#Child died \n");
#	leave wl;
#exit	t0;
#	alarm.sleep(5);
#	redo wl;
#exit	wl;
#
function Admin.main():int;	# 0  (main:int)
    counter := 0;	# 1  (counter:int)<-($2:int)
thread hdl := 0;	# 2  (hdl:int)<-($2:int) jump 10
    io.print("#start the child");	# 3 IOprint_val ($4:int)<-($5:str)
    Admin.clkticks(1);	# 4  ($6:void)<-($7:int)
    counter := calc.+(counter,1);	# 5 CALCbinaryADDintint (counter:int)<-(counter:int)($7:int)
barrier t := calc.==(counter,2);	# 6 CALCcompEQintint (t:bit)<-(counter:int)($9:int) jump 8
    leave hdl;	# 7  (hdl:int) jump 10
exit t;	# 8  (t:bit)
    redo hdl;	# 9  (hdl:int) jump 3
exit hdl;	# 10  (hdl:int)
    io.printf("#Main thread\n");	# 11 IOprint_str ($10:int)<-($11:str)
barrier wl := true;	# 12  (wl:bit)<-($13:bit) jump 21
    alarm.sleep(5);	# 13 ALARMsleep ($14:void)<-($15:int)
    io.printf("#Wait for child to exit %d\n",hdl);	# 14 IOprint_formatted_int ($16:int)<-($17:str)(hdl:int)
barrier t0 := calc.==(counter,2);	# 15 CALCcompEQintint (t0:bit)<-(counter:int)($9:int) jump 18
    io.printf("#Child died \n");	# 16 IOprint_str ($19:int)<-($20:str)
    leave wl;	# 17  (wl:bit) jump 21
exit t0;	# 18  (t0:bit)
    alarm.sleep(5);	# 19 ALARMsleep ($21:void)<-($15:int)
    redo wl;	# 20  (wl:bit) jump 13
exit wl;	# 21  (wl:bit)
end main;	# 22  
#Main thread
[ "#start the child" ]

# 08:01:00 >  
# 08:01:00 >  Done.
# 08:01:00 >  

