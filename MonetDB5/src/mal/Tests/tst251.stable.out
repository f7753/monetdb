stdout of test 'tst251` in directory 'src/mal` itself:
# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
# Visit http://monetdb.cwi.nl for further information.
## The series tst2?? is a patched version of suite_00
## The first and foremost BAT operations
#
#b:= new(:int,:int);
#insert(b,1,15);
#insert(b,2,4);
#n0  := int(nil);
#insert(b,3,n0);
#insert(b,4,16);
#insert(b,5,25);
#insert(b,6,36);
#insert(b,7,49);
#insert(b,8,64);
#insert(b,9,n0);
#insert(b,n0,n0);
#insert(b,n0,81);
#print(b);
#barrier v:= bunStream(b,h,t);
#	printf("[ %d,",h);
#	printf("%d]\n",t);
#	redo v:= bunStream(b,h,t);
#exit v;
#
#
## String stuff
#c:= new(:int,:str);
#insert(c,1,"hello");
#insert(c,2,"brave");
#insert(c,3,"world");
#insert(c,4,"");
#x:= str(nil);
#insert(c,5,x);
#insert(c,6,"!");
#print(c);
#barrier v:= bunStream(c,h,ts:str);
#	printf("[%d,",h);
#	printf("%s]\n",ts);
#	redo v:= bunStream(c,h,ts:str);
#exit v;
#
##Testing a loop over string bats
#
#d:= new(:str,:str);
#insert(d,"one","red");
#insert(d,"two","green");
#print(d);
#barrier w:= bunStream(d,hs:str,ts);
#	printf("[ %s,",hs);
#	printf("%s]\n",ts);
#	redo w:= bunStream(d,hs:str,ts);
#exit w;
#
#
#
function Admin.main():int;	# 0  (main:int)
    c := bbp.new(:int,:str);	# 1 CMDBATnew (c:bat[:int,:str])<-($2:int)($3:str)
    bat.insert(c,1,"hello");	# 2 BKCinsert_bun ($4:void)<-(c:bat[:int,:str])($5:int)($6:str)
    bat.insert(c,2,"brave");	# 3 BKCinsert_bun ($7:void)<-(c:bat[:int,:str])($8:int)($9:str)
    bat.insert(c,3,"world");	# 4 BKCinsert_bun ($10:void)<-(c:bat[:int,:str])($11:int)($12:str)
    bat.insert(c,4,"");	# 5 BKCinsert_bun ($13:void)<-(c:bat[:int,:str])($14:int)($15:str)
    x := calc.str(nil);	# 6 CALCnil2str (x:str)<-($17:void)
    bat.insert(c,5,x);	# 7 BKCinsert_bun ($18:void)<-(c:bat[:int,:str])($19:int)(x:str)
    bat.insert(c,6,"!");	# 8 BKCinsert_bun ($20:void)<-(c:bat[:int,:str])($21:int)($22:str)
    io.print(c);	# 9 IOprint_val ($23:int)<-(c:bat[:int,:str])
barrier (v,h,ts):= chopper.newIterator(c);	# 10 CHPbunIterator (v:lng)(h:int)(ts:str)<-(c:bat[:int,:str]) jump 14
    io.printf("[%d,",h);	# 11 IOprint_formatted_int ($27:int)<-($28:str)(h:int)
    io.printf("%s]\n",ts);	# 12 IOprint_formatted_str ($29:int)<-($30:str)(ts:str)
    redo (v,h,ts):= chopper.hasMoreElements(c);	# 13 CHPbunHasMoreElements (v:lng)(h:int)(ts:str)<-(c:bat[:int,:str]) jump 11
exit v;	# 14  (v:lng)
end main;	# 15  
#-------------------------#
# h	tmp_5		  # name
# int	str		  # type
#-------------------------#
[ 1,	  "hello"	  ]
[ 2,	  "brave"	  ]
[ 3,	  "world"	  ]
[ 4,	  ""		  ]
[ 5,	  nil		  ]
[ 6,	  "!"		  ]
[1,hello]
[2,brave]
[3,world]
[4,]
[5,nil]
[6,!]
>