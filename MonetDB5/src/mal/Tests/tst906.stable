# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
# Visit http://monetdb.cwi.nl for further information.
## the multiplex code blocks.
## check detection of the underlying fast implementations
#
#b:= new(:lng,:lng);
#i:= -1:lng;
#barrier v:= nextElement(i,0:lng,10:lng,1:lng);
#	insert(b,i,i);
#	redo v:= nextElement(i,0:lng,10:lng,1:lng);
#exit v;
#c:= copy(b);
#print(c);
#x:= multiplex.tactics("+",b,c);
#print(x);
#x:= multiplex.tactics("+",b,1:lng);
#print(x);
#x:= multiplex.tactics("*",b,c);
#print(x);
#y:= multiplex.tactics("==",b,b);
#print(y);
#y:= multiplex.tactics("==",b,x);
#print(y);
#z:= multiplex.tactics("not",y);
#print(z);
#
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(:lng,:lng);	# 1 CMDBATnew (b:bat[:lng,:lng])<-($2:lng)($3:lng)
    i := -1;	# 2  (i:lng)<-($5:lng)
barrier v := mal.nextElement(i,0,10,1);	# 3 lngForloopStep (v:bit)<-(i:lng)($7:lng)($8:lng)($9:lng) jump 6
    bat.insert(b,i,i);	# 4 BKCinsert_bun ($10:void)<-(b:bat[:lng,:lng])(i:lng)(i:lng)
    redo v := mal.nextElement(i,0,10,1);	# 5 lngForloopStep (v:bit)<-(i:lng)($7:lng)($8:lng)($9:lng) jump 4
exit v;	# 6  (v:bit)
    c := algebra.copy(b);	# 7 ALGcopy (c:bat[:lng,:lng])<-(b:bat[:lng,:lng])
    io.print(c);	# 8 IOprint_val ($12:int)<-(c:bat[:lng,:lng])
    x := batcalc.+(b,c);	# 9 CMDbatADD (x:bat[:lng,:lng])<-(b:bat[:lng,:lng])(c:bat[:lng,:lng])
    io.print(x);	# 10 IOprint_val ($15:int)<-(x:bat[:lng,:lng])
    x := batcalc.+(b,1);	# 11 CMDbatADDcst (x:bat[:lng,:lng])<-(b:bat[:lng,:lng])($9:lng)
    io.print(x);	# 12 IOprint_val ($16:int)<-(x:bat[:lng,:lng])
    x := batcalc.*(b,c);	# 13 CMDbatMUL (x:bat[:lng,:lng])<-(b:bat[:lng,:lng])(c:bat[:lng,:lng])
    io.print(x);	# 14 IOprint_val ($18:int)<-(x:bat[:lng,:lng])
    y := multiplex.script("==",b,b);	# 15  (y:bat[:lng,:bit])<-($20:str)(b:bat[:lng,:lng])(b:bat[:lng,:lng])
    io.print(y);	# 16 IOprint_val ($21:int)<-(y:bat[:lng,:bit])
    y := multiplex.script("==",b,x);	# 17  (y:bat[:lng,:bit])<-($20:str)(b:bat[:lng,:lng])(x:bat[:lng,:lng])
    io.print(y);	# 18 IOprint_val ($22:int)<-(y:bat[:lng,:bit])
    z := multiplex.script("not",y);	# 19  (z:bat[:lng,:bit])<-($24:str)(y:bat[:lng,:bit])
    io.print(z);	# 20 IOprint_val ($25:int)<-(z:bat[:lng,:bit])
end main;	# 21  
#-----------------#
# h	tmp_4	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  3	  ]
[ 4,	  4	  ]
[ 5,	  5	  ]
[ 6,	  6	  ]
[ 7,	  7	  ]
[ 8,	  8	  ]
[ 9,	  9	  ]
#-----------------#
# h	tmp_5	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  6	  ]
[ 4,	  8	  ]
[ 5,	  10	  ]
[ 6,	  12	  ]
[ 7,	  14	  ]
[ 8,	  16	  ]
[ 9,	  18	  ]
#-----------------#
# h	tmp_6	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  1	  ]
[ 1,	  2	  ]
[ 2,	  3	  ]
[ 3,	  4	  ]
[ 4,	  5	  ]
[ 5,	  6	  ]
[ 6,	  7	  ]
[ 7,	  8	  ]
[ 8,	  9	  ]
[ 9,	  10	  ]
#-----------------#
# h	tmp_7	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  81	  ]
#-----------------#
# h	tmp_8	  # name
# lng	bit	  # type
#-----------------#
[ 0,	  true	  ]
[ 1,	  true	  ]
[ 2,	  true	  ]
[ 3,	  true	  ]
[ 4,	  true	  ]
[ 5,	  true	  ]
[ 6,	  true	  ]
[ 7,	  true	  ]
[ 8,	  true	  ]
[ 9,	  true	  ]
#-----------------#
# h	tmp_9	  # name
# lng	bit	  # type
#-----------------#
[ 0,	  true	  ]
[ 1,	  true	  ]
[ 2,	  false	  ]
[ 3,	  false	  ]
[ 4,	  false	  ]
[ 5,	  false	  ]
[ 6,	  false	  ]
[ 7,	  false	  ]
[ 8,	  false	  ]
[ 9,	  false	  ]
#-----------------#
# h	tmp_10	  # name
# lng	bit	  # type
#-----------------#
[ 0,	  false	  ]
[ 1,	  false	  ]
[ 2,	  true	  ]
[ 3,	  true	  ]
[ 4,	  true	  ]
[ 5,	  true	  ]
[ 6,	  true	  ]
[ 7,	  true	  ]
[ 8,	  true	  ]
[ 9,	  true	  ]
>