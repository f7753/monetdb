# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
## The series tst2?? is a patched version of suite_00
## The first and foremost BAT operations
#
#b:= new(int,int);
#insert(b,1,15);
#insert(b,2,4);
#n0  := int(nil);
#insert(b,3,n0);
#insert(b,4,16);
#insert(b,5,25);
#insert(b,6,36);
#insert(b,7,49);
#insert(b,8,64);
#insert(b,9,n0);
#insert(b,n0,n0);
#insert(b,n0,81);
#print(b);
#barrier v:= bunStream(b,h,t);
#	printf("[ %d,",h);
#	printf("%d]\n",t);
#	redo v;
#exit v;
#
#
## String stuff
#c:= new(int,str);
#insert(c,1,"hello");
#insert(c,2,"brave");
#insert(c,3,"world");
#insert(c,4,"");
#x:= str(nil);
#insert(c,5,x);
#insert(c,6,"!");
#print(c);
#barrier v:= bunStream(c,h,ts:str);
#	printf("[%d,",h);
#	printf("%s]\n",ts);
#	redo v;
#exit v;
#
##Testing a loop over string bats
#
#d:= new(str,str);
#insert(d,"one","red");
#insert(d,"two","green");
#print(d);
#barrier w:= bunStream(d,hs:str,ts);
#	printf("[ %s,",hs);
#	printf("%s]\n",ts);
#	redo w;
#exit w;
#
#
#
function Admin.main():int; #0  (main:int)
    b := bbp.new(int,int); #1 CMDBATnew (b:bat[int,int])<-(int:int)(int:int)
    bat.insert(b,1,15); #2 CMDinsert_bun ($3:bat[int,int])<-(b:bat[int,int])($4:int)($5:int)
    bat.insert(b,2,4); #3 CMDinsert_bun ($6:bat[int,int])<-(b:bat[int,int])($7:int)($8:int)
    n0 := calc.int(nil); #4 CALCnil_2_int (n0:int)<-($10:void)
    bat.insert(b,3,n0); #5 CMDinsert_bun ($11:bat[int,int])<-(b:bat[int,int])($12:int)(n0:int)
    bat.insert(b,4,16); #6 CMDinsert_bun ($13:bat[int,int])<-(b:bat[int,int])($8:int)($14:int)
    bat.insert(b,5,25); #7 CMDinsert_bun ($15:bat[int,int])<-(b:bat[int,int])($16:int)($17:int)
    bat.insert(b,6,36); #8 CMDinsert_bun ($18:bat[int,int])<-(b:bat[int,int])($19:int)($20:int)
    bat.insert(b,7,49); #9 CMDinsert_bun ($21:bat[int,int])<-(b:bat[int,int])($22:int)($23:int)
    bat.insert(b,8,64); #10 CMDinsert_bun ($24:bat[int,int])<-(b:bat[int,int])($25:int)($26:int)
    bat.insert(b,9,n0); #11 CMDinsert_bun ($27:bat[int,int])<-(b:bat[int,int])($28:int)(n0:int)
    bat.insert(b,n0,n0); #12 CMDinsert_bun ($29:bat[int,int])<-(b:bat[int,int])(n0:int)(n0:int)
    bat.insert(b,n0,81); #13 CMDinsert_bun ($30:bat[int,int])<-(b:bat[int,int])(n0:int)($31:int)
    io.print(b); #14 CMDprint_val ($32:int)<-(b:bat[int,int])
barrier v := bbp.bunStream(b,h,t); #15 CMDbunStream (v:lng)<-(b:bat[int,int])(h:int)(t:int) jump 19
    system.printf("[ %d,",h); #16 SYSprint_formatted_int ($36:int)<-($37:str)(h:int)
    system.printf("%d]\n",t); #17 SYSprint_formatted_int ($38:int)<-($39:str)(t:int)
    redo v; #18  (v:lng) jump 15
exit v; #19  (v:lng)
    c := bbp.new(int,str); #20 CMDBATnew (c:bat[int,str])<-(int:int)(str:str)
    bat.insert(c,1,"hello"); #21 CMDinsert_bun ($42:bat[int,str])<-(c:bat[int,str])($43:int)($44:str)
    bat.insert(c,2,"brave"); #22 CMDinsert_bun ($45:bat[int,str])<-(c:bat[int,str])($46:int)($47:str)
    bat.insert(c,3,"world"); #23 CMDinsert_bun ($48:bat[int,str])<-(c:bat[int,str])($49:int)($50:str)
    bat.insert(c,4,""); #24 CMDinsert_bun ($51:bat[int,str])<-(c:bat[int,str])($52:int)($53:str)
    x := calc.str(nil); #25 CALCnil_2_str (x:str)<-($55:void)
    bat.insert(c,5,x); #26 CMDinsert_bun ($56:bat[int,str])<-(c:bat[int,str])($57:int)(x:str)
    bat.insert(c,6,"!"); #27 CMDinsert_bun ($58:bat[int,str])<-(c:bat[int,str])($59:int)($60:str)
    io.print(c); #28 CMDprint_val ($61:int)<-(c:bat[int,str])
barrier v := bbp.bunStream(c,h,ts); #29 CMDbunStream (v:lng)<-(c:bat[int,str])(h:int)(ts:str) jump 33
    system.printf("[%d,",h); #30 SYSprint_formatted_int ($63:int)<-($64:str)(h:int)
    system.printf("%s]\n",ts); #31 SYSprint_formatted_str ($65:int)<-($66:str)(ts:str)
    redo v; #32  (v:lng) jump 29
exit v; #33  (v:lng)
    d := bbp.new(str,str); #34 CMDBATnew (d:bat[str,str])<-(str:str)(str:str)
    bat.insert(d,"one","red"); #35 CMDinsert_bun ($68:bat[str,str])<-(d:bat[str,str])($69:str)($70:str)
    bat.insert(d,"two","green"); #36 CMDinsert_bun ($71:bat[str,str])<-(d:bat[str,str])($72:str)($73:str)
    io.print(d); #37 CMDprint_val ($74:int)<-(d:bat[str,str])
barrier w := bbp.bunStream(d,hs,ts); #38 CMDbunStream (w:lng)<-(d:bat[str,str])(hs:str)(ts:str) jump 42
    system.printf("[ %s,",hs); #39 SYSprint_formatted_str ($77:int)<-($78:str)(hs:str)
    system.printf("%s]\n",ts); #40 SYSprint_formatted_str ($79:int)<-($66:str)(ts:str)
    redo w; #41  (w:lng) jump 38
exit w; #42  (w:lng)
end main; #43  
#-----------------#
# BAT:	  tmp_4	  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
[ 1,15]
[ 2,4]
[ 3,nil]
[ 4,16]
[ 5,25]
[ 6,36]
[ 7,49]
[ 8,64]
[ 9,nil]
[ nil,nil]
[ nil,81]
#-------------------------#
# BAT:	  tmp_5		  #
# (int)	  (str)		  #
#-------------------------#
[ 1,	  "hello"	  ]
[ 2,	  "brave"	  ]
[ 3,	  "world"	  ]
[ 4,	  ""		  ]
[ 5,	  nil		  ]
[ 6,	  "!"		  ]
[1,hello]
[2,brave]
[3,world]
[4,]
[5,nil]
[6,!]
#-------------------------#
# BAT:	  tmp_6		  #
# (str)	  (str)		  #
#-------------------------#
[ "one",  "red"		  ]
[ "two",  "green"	  ]
[ one,red]
[ two,green]
>