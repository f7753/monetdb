# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB
# dbname:demo
## The series tst2?? is a patched version of suite_00
## The first and foremost BAT operations
#
#b:= new(:int,:int);
#insert(b,1,15);
#insert(b,2,4);
#n0  := int(nil);
#insert(b,3,n0);
#insert(b,4,16);
#insert(b,5,25);
#insert(b,6,36);
#insert(b,7,49);
#insert(b,8,64);
#insert(b,9,n0);
#insert(b,n0,n0);
#insert(b,n0,81);
#print(b);
#barrier v:= bunStream(b,h,t);
#	printf("[ %d,",h);
#	printf("%d]\n",t);
#	redo v;
#exit v;
#
#
## String stuff
#c:= new(:int,:str);
#insert(c,1,"hello");
#insert(c,2,"brave");
#insert(c,3,"world");
#insert(c,4,"");
#x:= str(nil);
#insert(c,5,x);
#insert(c,6,"!");
#print(c);
#barrier v:= bunStream(c,h,ts:str);
#	printf("[%d,",h);
#	printf("%s]\n",ts);
#	redo v;
#exit v;
#
##Testing a loop over string bats
#
#d:= new(:str,:str);
#insert(d,"one","red");
#insert(d,"two","green");
#print(d);
#barrier w:= bunStream(d,hs:str,ts);
#	printf("[ %s,",hs);
#	printf("%s]\n",ts);
#	redo w;
#exit w;
#
#
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(int:,int:);	# 1 CMDBATnew (b:bat[:int,:int])<-($2:int)($3:int)
    bat.insert(b,1,15);	# 2 CMDinsert_bun ($4:void)<-(b:bat[:int,:int])($5:int)($6:int)
    bat.insert(b,2,4);	# 3 CMDinsert_bun ($7:void)<-(b:bat[:int,:int])($8:int)($9:int)
    n0 := calc.int(nil);	# 4 CALCnil2int (n0:int)<-($11:void)
    bat.insert(b,3,n0);	# 5 CMDinsert_bun ($12:void)<-(b:bat[:int,:int])($13:int)(n0:int)
    bat.insert(b,4,16);	# 6 CMDinsert_bun ($14:void)<-(b:bat[:int,:int])($9:int)($15:int)
    bat.insert(b,5,25);	# 7 CMDinsert_bun ($16:void)<-(b:bat[:int,:int])($17:int)($18:int)
    bat.insert(b,6,36);	# 8 CMDinsert_bun ($19:void)<-(b:bat[:int,:int])($20:int)($21:int)
    bat.insert(b,7,49);	# 9 CMDinsert_bun ($22:void)<-(b:bat[:int,:int])($23:int)($24:int)
    bat.insert(b,8,64);	# 10 CMDinsert_bun ($25:void)<-(b:bat[:int,:int])($26:int)($27:int)
    bat.insert(b,9,n0);	# 11 CMDinsert_bun ($28:void)<-(b:bat[:int,:int])($29:int)(n0:int)
    bat.insert(b,n0,n0);	# 12 CMDinsert_bun ($30:void)<-(b:bat[:int,:int])(n0:int)(n0:int)
    bat.insert(b,n0,81);	# 13 CMDinsert_bun ($31:void)<-(b:bat[:int,:int])(n0:int)($32:int)
    io.print(b);	# 14 CMDprint_val ($33:int)<-(b:bat[:int,:int])
barrier v := bbp.bunStream(b,h,t);	# 15 CMDbunStream (v:lng)<-(b:bat[:int,:int])(h:int)(t:int) jump 19
    system.printf("[ %d,",h);	# 16 SYSprint_formatted_int ($37:int)<-($38:str)(h:int)
    system.printf("%d]\n",t);	# 17 SYSprint_formatted_int ($39:int)<-($40:str)(t:int)
    redo v;	# 18  (v:lng) jump 15
exit v;	# 19  (v:lng)
    c := bbp.new(int:,str:);	# 20 CMDBATnew (c:bat[:int,:str])<-($42:int)($43:str)
    bat.insert(c,1,"hello");	# 21 CMDinsert_bun ($44:void)<-(c:bat[:int,:str])($45:int)($46:str)
    bat.insert(c,2,"brave");	# 22 CMDinsert_bun ($47:void)<-(c:bat[:int,:str])($48:int)($49:str)
    bat.insert(c,3,"world");	# 23 CMDinsert_bun ($50:void)<-(c:bat[:int,:str])($51:int)($52:str)
    bat.insert(c,4,"");	# 24 CMDinsert_bun ($53:void)<-(c:bat[:int,:str])($54:int)($55:str)
    x := calc.str(nil);	# 25 CALCnil2str (x:str)<-($57:void)
    bat.insert(c,5,x);	# 26 CMDinsert_bun ($58:void)<-(c:bat[:int,:str])($59:int)(x:str)
    bat.insert(c,6,"!");	# 27 CMDinsert_bun ($60:void)<-(c:bat[:int,:str])($61:int)($62:str)
    io.print(c);	# 28 CMDprint_val ($63:int)<-(c:bat[:int,:str])
barrier v := bbp.bunStream(c,h,ts);	# 29 CMDbunStream (v:lng)<-(c:bat[:int,:str])(h:int)(ts:str) jump 33
    system.printf("[%d,",h);	# 30 SYSprint_formatted_int ($65:int)<-($66:str)(h:int)
    system.printf("%s]\n",ts);	# 31 SYSprint_formatted_str ($67:int)<-($68:str)(ts:str)
    redo v;	# 32  (v:lng) jump 29
exit v;	# 33  (v:lng)
    d := bbp.new(str:,str:);	# 34 CMDBATnew (d:bat[:str,:str])<-($70:str)($71:str)
    bat.insert(d,"one","red");	# 35 CMDinsert_bun ($72:void)<-(d:bat[:str,:str])($73:str)($74:str)
    bat.insert(d,"two","green");	# 36 CMDinsert_bun ($75:void)<-(d:bat[:str,:str])($76:str)($77:str)
    io.print(d);	# 37 CMDprint_val ($78:int)<-(d:bat[:str,:str])
barrier w := bbp.bunStream(d,hs,ts);	# 38 CMDbunStream (w:lng)<-(d:bat[:str,:str])(hs:str)(ts:str) jump 42
    system.printf("[ %s,",hs);	# 39 SYSprint_formatted_str ($81:int)<-($82:str)(hs:str)
    system.printf("%s]\n",ts);	# 40 SYSprint_formatted_str ($83:int)<-($68:str)(ts:str)
    redo w;	# 41  (w:lng) jump 38
exit w;	# 42  (w:lng)
end main;	# 43  
#-----------------#
# h	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
[ 1,15]
[ 2,4]
[ 3,nil]
[ 4,16]
[ 5,25]
[ 6,36]
[ 7,49]
[ 8,64]
[ 9,nil]
[ nil,nil]
[ nil,81]
#-------------------------#
# h	tmp_5		  # name
# int	str		  # type
#-------------------------#
[ 1,	  "hello"	  ]
[ 2,	  "brave"	  ]
[ 3,	  "world"	  ]
[ 4,	  ""		  ]
[ 5,	  nil		  ]
[ 6,	  "!"		  ]
[1,hello]
[2,brave]
[3,world]
[4,]
[5,nil]
[6,!]
#-------------------------#
# h	tmp_6		  # name
# str	str		  # type
#-------------------------#
[ "one",  "red"		  ]
[ "two",  "green"	  ]
[ one,red]
[ two,green]
>