stdout of test 'tst1012` in directory 'src/mal` itself:


# 07:58:54 >  
# 07:58:54 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1012.mal </dev/null
# 07:58:54 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the first of a series of BBP test cases
#
#bbp.open();
#b:= new(:int,:int);
#insert(b,1,2);
#bbp.deposit("mysecondbat",b);
#c:= bbp.take("mysecondbat");
#print(c);
#bat.setPersistent(b);
#x:= bat.isPersistent(b);
#z:= bat.isTransient(b);
#print(x); print(z); print("");
#bat.setTransient(b);
#x:= bat.isPersistent(b);
#z:= bat.isTransient(b);
#print(x); print(z); print("");
#bbp.close();
## at the end of the session, the BBP should have discarded
## the temporary bats of the user
## aug 02 this does not work, because the transaction is
## not properly closed. This means that a temporary bat
##remains in store.
#bbp.open();
#v:= bbp.take("mysecondbat");
#print(v);
#bbp.close();
#
function user.main():int;	# 0  (main:int)
    bbp.open();	# 1 CMDbbpopen ($1:void)
    b := bbp.new(:int,:int);	# 2 CMDBATnew (b:bat[:int,:int])<-($3:int)($4:int)
    bat.insert(b,1,2);	# 3 BKCinsert_bun ($5:bat[:int,:int])<-(b:bat[:int,:int])($6:int)($7:int)
    bbp.deposit("mysecondbat",b);	# 4 CMDbbpdeposit ($8:void)<-($9:str)(b:bat[:int,:int])
    c := bbp.take("mysecondbat");	# 5 CMDbbptake (c:bat[:any,:any])<-($9:str)
    io.print(c);	# 6 IOprint_val ($11:int)<-(c:bat[:any,:any])
    bat.setPersistent(b);	# 7 BKCsetPersistent ($12:bat[:int,:int])<-(b:bat[:int,:int])
    x := bat.isPersistent(b);	# 8 BKCisPersistent (x:bit)<-(b:bat[:int,:int])
    z := bat.isTransient(b);	# 9 BKCisTransient (z:bit)<-(b:bat[:int,:int])
    io.print(x);	# 10 IOprint_val ($15:int)<-(x:bit)
    io.print(z);	# 11 IOprint_val ($16:int)<-(z:bit)
    io.print("");	# 12 IOprint_val ($17:int)<-($18:str)
    bat.setTransient(b);	# 13 BKCsetTransient ($19:bat[:int,:int])<-(b:bat[:int,:int])
    x := bat.isPersistent(b);	# 14 BKCisPersistent (x:bit)<-(b:bat[:int,:int])
    z := bat.isTransient(b);	# 15 BKCisTransient (z:bit)<-(b:bat[:int,:int])
    io.print(x);	# 16 IOprint_val ($20:int)<-(x:bit)
    io.print(z);	# 17 IOprint_val ($21:int)<-(z:bit)
    io.print("");	# 18 IOprint_val ($22:int)<-($18:str)
    bbp.close();	# 19 CMDbbpclose ($23:void)
    bbp.open();	# 20 CMDbbpopen ($24:void)
    v := bbp.take("mysecondbat");	# 21 CMDbbptake (v:bat[:any,:any])<-($9:str)
    io.print(v);	# 22 IOprint_val ($26:int)<-(v:bat[:any,:any])
    bbp.close();	# 23 CMDbbpclose ($27:void)
end main;	# 24  
#-----------------#
# h	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ true ]
[ false ]
[ "" ]
[ false ]
[ true ]
[ "" ]
#-----------------#
# h	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]

# 07:58:54 >  
# 07:58:54 >  Done.
# 07:58:54 >  

