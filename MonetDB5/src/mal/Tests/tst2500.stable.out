stdout of test 'tst2500` in directory 'src/mal` itself:
# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
# Visit http://monetdb.cwi.nl for further information.
## Stream functions seem to provide a better control structure
## The first stream doesn;t do much, because its state can not be inspected.
#
#stream random(seed:int):bit;
#	i:= seed;
#barrier L:= true;
#	i:= 125 *i;
#	i:= i % 32767;
#	return L:=true;
#	redo L;
#exit L;
#	return L:= false;
#end;
factory Admin.random(seed:int):int;	# 0  (random:int)<-(seed:int)
    i := seed;	# 1  (i:int)<-(seed:int)
barrier always := true;	# 2  (always:bit)<-($4:bit) jump 7
    i := calc.*(125,i);	# 3 CALCbinaryMULintint (i:int)<-($5:int)(i:int)
    i := calc.%(i,32767);	# 4 CALCbinaryMODintint (i:int)<-(i:int)($6:int)
    yield i;	# 5  (i:int)
    redo always;	# 6  (always:bit) jump 3
exit always;	# 7  (always:bit)
end random;	# 8  
#
#r1:= random(1);
#print(r1);
#r2:= random(1);
#print(r2);
#
function Admin.main():int;	# 0  (main:int)
    r1 := Admin.random(1);	# 1  (r1:int)<-($2:int)
    io.print(r1);	# 2 IOprint_val ($3:int)<-(r1:int)
    r2 := Admin.random(1);	# 3  (r2:int)<-($2:int)
    io.print(r2);	# 4 IOprint_val ($5:int)<-(r2:int)
end main;	# 5  
[ 125 ]
[ 15625 ]
>