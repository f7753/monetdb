stdout of test 'tst4028` in directory 'src/mal` itself:


# 08:01:47 >  
# 08:01:47 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst4028.mal </dev/null
# 08:01:47 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## testing the heuristic rules
## relations r(H,T) and s(H,T)
#function qry();
#r:= new(:int,:int);
#insert(r,5,1);
#insert(r,6,2);
#insert(r,7,3);
#insert(r,8,4);
#sc:= copy(r);
#s:= reverse(sc);
#
#print(r);
#print(s);
#
## reversal analysis
## r.T=s.H and r.T<6 (SQL output)
#t:= join(r,s);
#tr:= semijoin(r,t);
#z:= select(tr,0,6);
#tz:= semijoin(t,z);
#print(tz);
#
## optimized sequence
#ab:= select(r,0,6);
#bc:= join(ab,s);
#debugOptimizers();
#SPoptimizer();
#end qry;
function Admin.qry():void;	# 0  (qry:void)
    r := bbp.new(:int,:int);	# 1 CMDBATnew (r:bat[:int,:int])<-($2:int)($3:int)
    bat.insert(r,5,1);	# 2 BKCinsert_bun ($4:void)<-(r:bat[:int,:int])($5:int)($6:int)
    bat.insert(r,6,2);	# 3 BKCinsert_bun ($7:void)<-(r:bat[:int,:int])($8:int)($9:int)
    bat.insert(r,7,3);	# 4 BKCinsert_bun ($10:void)<-(r:bat[:int,:int])($11:int)($12:int)
    bat.insert(r,8,4);	# 5 BKCinsert_bun ($13:void)<-(r:bat[:int,:int])($14:int)($15:int)
    sc := algebra.copy(r);	# 6 ALGcopy (sc:bat[:int,:int])<-(r:bat[:int,:int])
    s := bat.reverse(sc);	# 7 BKCreverse (s:bat[:int,:int])<-(sc:bat[:int,:int])
    io.print(r);	# 8 IOprint_val ($18:int)<-(r:bat[:int,:int])
    io.print(s);	# 9 IOprint_val ($19:int)<-(s:bat[:int,:int])
    t := algebra.join(r,s);	# 10 ALGjoin (t:bat[:int,:int])<-(r:bat[:int,:int])(s:bat[:int,:int])
    tr := algebra.semijoin(r,t);	# 11 ALGsemijoin (tr:bat[:int,:int])<-(r:bat[:int,:int])(t:bat[:int,:int])
    z := algebra.select(tr,0,6);	# 12 ALGselect (z:bat[:int,:int])<-(tr:bat[:int,:int])($23:int)($8:int)
    tz := algebra.semijoin(t,z);	# 13 ALGsemijoin (tz:bat[:int,:int])<-(t:bat[:int,:int])(z:bat[:int,:int])
    io.print(tz);	# 14 IOprint_val ($25:int)<-(tz:bat[:int,:int])
    ab := algebra.select(r,0,6);	# 15 ALGselect (ab:bat[:int,:int])<-(r:bat[:int,:int])($23:int)($8:int)
    bc := algebra.join(ab,s);	# 16 ALGjoin (bc:bat[:int,:int])<-(ab:bat[:int,:int])(s:bat[:int,:int])
    optimizer.setDebug();	# 17 QOTdebugOptimizers ($28:void)
    optimizer.SPoptimizer();	# 18 QOTSPoptimizer ($29:str)
end qry;	# 19  
#

# 08:01:47 >  
# 08:01:47 >  Done.
# 08:01:47 >  

