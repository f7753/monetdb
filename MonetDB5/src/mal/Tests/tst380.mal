#inspection of the runtime setting
#it uses the dynamic type analysis scheme

# type error when the type variable numbers are ignored
#function get(br:bat[:any,:any],nme:str, title:str):bat;
function get(br:bat[:any$1,:any$2],nme:str, title:str):bat[:any$3,:any$4];
	b:bat[:int,:str] := bbp.nme();
	z:= join(br,b);
	setColumn(z,title);
	return z;
end get;
# Note the type of the variables will be fixed during the first call
# Thus, a better schould would be a term rewriter call, which
# replaces an instruction
#rule get(Y:bat,N:str)
function getInt(br:bat[:any$1,:any$2],nme:str, title:str):bat[:any$3,:any$4];
	b:bat[:int,:int] := bbp.nme();
	z:= join(br,b);
	setColumn(z,title);
	return z;
end getInt;
function getLng(br:bat[:any$1,:any$2],nme:str, title:str):bat[:any$3,:any$4];
	b:bat[:int,:lng] := bbp.nme();
	z:= join(br,b);
	setColumn(z,title);
	return z;
end getLng;
function dir(b:bat[:int,:str]):void;
	atm:= inspect.getAtomNames();
	brev:= reverse(b);
	bm := mirror(brev);
	bHead:= get(brev,"getHeadType","htype");
	bTail:= get(brev,"getTailType","ttype");
	bCount:= getLng(brev,"getCount","count");
	bHeat:= getInt(brev,"getHeat","heat");
	bDirty:= get(brev,"getDirty","dirty");
	bStatus:= get(brev,"getStatus","status");
	bKind:= get(brev,"getKind","kind");
	bRef:= getInt(brev,"getRefCount","refCount");
	table(brev, bm, bHead,bTail,bCount, bHeat,bDirty,bStatus,bKind,bRef);
end dir;

function dir(s:str):void;
	t:= bbp.getNames();
	tn:= like(t,s);
	print(tn);
	dir(tn);
end dir;
b:=new(:int,:int);
setName(b,"simplemind");

z:= bbp.getNames();
print("Get first directory");
dir(z);

print("Get second directory");
dir("simple");

