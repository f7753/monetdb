# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
#s := "hello";
#i := 1;
#f := 3.14;
#c := 'a';
#b:= true;
#bb:= new(:void,:str);
#
#st:= getType(s); printf("string %d\n",st);
#it:= getType(i); printf("int %d\n",it);
#ft:= getType(f); printf("flt %d\n",ft);
#ct:= getType(c); printf("chr %d\n",ct);
#bt:= getType(b); printf("bit %d\n",bt);
#bbt:= getType(bb); printf("bat %d\n",bbt);
#
## get them as strings
#v:= "";
#v:= getTypeName(st); printf("string %s\n",v);
#v:= getTypeName(it); printf("int %s\n",v);
#v:= getTypeName(ft); printf("flt %s\n",v);
#v:= getTypeName(ct); printf("chr %s\n",v);
#v:= getTypeName(bt); printf("bit %s\n",v);
#v:= getTypeName(bbt); printf("bat %s\n",v);
#
#
function Admin.main():int;	# 0  (main:int)
    s := "hello";	# 1  (s:str)<-($2:str)
    i := 1;	# 2  (i:int)<-($4:int)
    f := 3.14;	# 3  (f:flt)<-($6:flt)
    c := 'a';	# 4  (c:chr)<-($8:chr)
    b := true;	# 5  (b:bit)<-($10:bit)
    bb := bbp.new(:void,:str);	# 6 CMDBATnew (bb:bat[void,str])<-($12:void)($13:str)
    st := inspect.getType(s);	# 7 INSPECTtype (st:int)<-(s:str)
    system.printf("string %d\n",st);	# 8 SYSprint_formatted_int ($15:int)<-($16:str)(st:int)
    it := inspect.getType(i);	# 9 INSPECTtype (it:int)<-(i:int)
    system.printf("int %d\n",it);	# 10 SYSprint_formatted_int ($18:int)<-($19:str)(it:int)
    ft := inspect.getType(f);	# 11 INSPECTtype (ft:int)<-(f:flt)
    system.printf("flt %d\n",ft);	# 12 SYSprint_formatted_int ($21:int)<-($22:str)(ft:int)
    ct := inspect.getType(c);	# 13 INSPECTtype (ct:int)<-(c:chr)
    system.printf("chr %d\n",ct);	# 14 SYSprint_formatted_int ($24:int)<-($25:str)(ct:int)
    bt := inspect.getType(b);	# 15 INSPECTtype (bt:int)<-(b:bit)
    system.printf("bit %d\n",bt);	# 16 SYSprint_formatted_int ($27:int)<-($28:str)(bt:int)
    bbt := inspect.getType(bb);	# 17 INSPECTtype (bbt:int)<-(bb:bat[void,str])
    system.printf("bat %d\n",bbt);	# 18 SYSprint_formatted_int ($30:int)<-($31:str)(bbt:int)
    v := "";	# 19  (v:str)<-($33:str)
    v := inspect.getTypeName(st);	# 20 INSPECTtypename (v:str)<-(st:int)
    system.printf("string %s\n",v);	# 21 SYSprint_formatted_str ($34:int)<-($35:str)(v:str)
    v := inspect.getTypeName(it);	# 22 INSPECTtypename (v:str)<-(it:int)
    system.printf("int %s\n",v);	# 23 SYSprint_formatted_str ($36:int)<-($37:str)(v:str)
    v := inspect.getTypeName(ft);	# 24 INSPECTtypename (v:str)<-(ft:int)
    system.printf("flt %s\n",v);	# 25 SYSprint_formatted_str ($38:int)<-($39:str)(v:str)
    v := inspect.getTypeName(ct);	# 26 INSPECTtypename (v:str)<-(ct:int)
    system.printf("chr %s\n",v);	# 27 SYSprint_formatted_str ($40:int)<-($41:str)(v:str)
    v := inspect.getTypeName(bt);	# 28 INSPECTtypename (v:str)<-(bt:int)
    system.printf("bit %s\n",v);	# 29 SYSprint_formatted_str ($42:int)<-($43:str)(v:str)
    v := inspect.getTypeName(bbt);	# 30 INSPECTtypename (v:str)<-(bbt:int)
    system.printf("bat %s\n",v);	# 31 SYSprint_formatted_str ($44:int)<-($45:str)(v:str)
end main;	# 32  
string 11
int 5
flt 8
chr 2
bit 1
bat 65547
string str
int int
flt flt
chr chr
bit bit
bat bat[void,str]
>