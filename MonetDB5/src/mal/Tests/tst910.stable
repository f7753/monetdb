# Monet Database Server V5.0
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
# gdk_dbfarm:/ufs/mk/monet_5-0/Linux/../dbfarm
# gdk_dbname:demo
# gdk_dbdir:/ufs/mk/monet_5-0/Linux/../dbfarm/demo
# gdk_distr:/ufs/mk/monet_5-0/Linux
# monetrc:/ufs/mk/.monet.conf
## the multiplex code blocks.
## this is the equivalent to tst901, but now without batcalc support
#
#function inc(a:lng,b:lng):lng;
#	z:= a+b;
#	return z;
#end inc;
function Admin.inc(a:lng,b:lng):lng; #0:(inc:lng)<-(a:lng)(b:lng)
    z := calc.+(a,b); #1:(z:lng)<-(a:lng)(b:lng)
    return z; #2:(z:lng)
end inc; #3:
#
#b:= new(lng,lng);
#i:= -1:lng;
#barrier v:= nextElement(i,0:lng,10:lng);
#	insert(b,i,i);
#	redo v;
#exit v;
#c:= copy(b);
#print(c);
#x:= multiplex.script("+",b,c);
#print(x);
#x:= multiplex.script("+",b,1:lng);
#print(x);
#x:= multiplex.script("inc",b,c);
#print(x);
#x:= multiplex.script("*",b,c);
#print(x);
#y:= multiplex.script("==",b,b);
#print(y);
#y:= multiplex.script("=",b,x);
#print(y);
#z:= multiplex.script("not",y);
#print(z);
#
#
function Admin.main():int; #0:(main:int)
    b := mal.new(lng,lng); #1:(b:bat[lng,lng])<-(lng:lng)(lng:lng)
    i := -1; #2:(i:lng)<-($4:lng)
barrier v := mal.nextElement(i,0,10); #3:(v:bit)<-(i:lng)($6:lng)($7:lng) jump 7
    bat.insert(b,i,i); #4:($8:bat[lng,lng])<-(b:bat[lng,lng])(i:lng)(i:lng)
    redo v ; #5:(v:bit) jump 3
exit v; #6:(v:bit)
    c := algebra.copy(b); #7:(c:bat[lng,lng])<-(b:bat[lng,lng])
    io.print(c); #8:($10:int)<-(c:bat[lng,lng])
    x := multiplex.script("+",b,c); #9:(x:bat[lng,lng])<-($12:str)(b:bat[lng,lng])(c:bat[lng,lng])
    io.print(x); #10:($13:int)<-(x:bat[lng,lng])
    x := multiplex.script("+",b,1); #11:(x:bat[lng,lng])<-($12:str)(b:bat[lng,lng])($14:lng)
    io.print(x); #12:($15:int)<-(x:bat[lng,lng])
    x := multiplex.script("inc",b,c); #13:(x:bat[lng,lng])<-($16:str)(b:bat[lng,lng])(c:bat[lng,lng])
    io.print(x); #14:($17:int)<-(x:bat[lng,lng])
    x := multiplex.script("*",b,c); #15:(x:bat[lng,lng])<-($18:str)(b:bat[lng,lng])(c:bat[lng,lng])
    io.print(x); #16:($19:int)<-(x:bat[lng,lng])
    y := multiplex.script("==",b,b); #17:(y:bat[lng,bit])<-($21:str)(b:bat[lng,lng])(b:bat[lng,lng])
    io.print(y); #18:($22:int)<-(y:bat[lng,bit])
    y := multiplex.script("=",b,x); #19:(y:bat[lng,bit])<-($23:str)(b:bat[lng,lng])(x:bat[lng,lng])
    io.print(y); #20:($24:int)<-(y:bat[lng,bit])
    z := multiplex.script("not",y); #21:(z:bat[lng,bit])<-($26:str)(y:bat[lng,bit])
    io.print(z); #22:($27:int)<-(z:bat[lng,bit])
end main; #23:
#-----------------#
# BAT:	  tmp_5	  #
# (lng)	  (lng)	  #
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  3	  ]
[ 4,	  4	  ]
[ 5,	  5	  ]
[ 6,	  6	  ]
[ 7,	  7	  ]
[ 8,	  8	  ]
[ 9,	  9	  ]
#-----------------#
# BAT:	  tmp_6	  #
# (lng)	  (lng)	  #
#-----------------#
[ 0,	  0	  ]
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  6	  ]
[ 4,	  8	  ]
[ 5,	  10	  ]
[ 6,	  12	  ]
[ 7,	  14	  ]
[ 8,	  16	  ]
[ 9,	  18	  ]
#-----------------#
# BAT:	  tmp_7	  #
# (lng)	  (lng)	  #
#-----------------#
[ 0,	  1	  ]
[ 1,	  2	  ]
[ 2,	  3	  ]
[ 3,	  4	  ]
[ 4,	  5	  ]
[ 5,	  6	  ]
[ 6,	  7	  ]
[ 7,	  8	  ]
[ 8,	  9	  ]
[ 9,	  10	  ]
#-----------------#
# BAT:	  tmp_8	  #
# (lng)	  (lng)	  #
#-----------------#
[ 0,	  0	  ]
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  6	  ]
[ 4,	  8	  ]
[ 5,	  10	  ]
[ 6,	  12	  ]
[ 7,	  14	  ]
[ 8,	  16	  ]
[ 9,	  18	  ]
#-----------------#
# BAT:	  tmp_9	  #
# (lng)	  (lng)	  #
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  81	  ]
#-----------------#
# BAT:	  tmp_10  #
# (lng)	  (bit)	  #
#-----------------#
[ 0,	  true	  ]
[ 1,	  true	  ]
[ 2,	  true	  ]
[ 3,	  true	  ]
[ 4,	  true	  ]
[ 5,	  true	  ]
[ 6,	  true	  ]
[ 7,	  true	  ]
[ 8,	  true	  ]
[ 9,	  true	  ]
#-----------------#
# BAT:	  tmp_11  #
# (lng)	  (bit)	  #
#-----------------#
[ 0,	  true	  ]
[ 1,	  true	  ]
[ 2,	  false	  ]
[ 3,	  false	  ]
[ 4,	  false	  ]
[ 5,	  false	  ]
[ 6,	  false	  ]
[ 7,	  false	  ]
[ 8,	  false	  ]
[ 9,	  false	  ]
#-----------------#
# BAT:	  tmp_12  #
# (lng)	  (bit)	  #
#-----------------#
[ 0,	  false	  ]
[ 1,	  false	  ]
[ 2,	  true	  ]
[ 3,	  true	  ]
[ 4,	  true	  ]
[ 5,	  true	  ]
[ 6,	  true	  ]
[ 7,	  true	  ]
[ 8,	  true	  ]
[ 9,	  true	  ]
>