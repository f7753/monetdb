# Mil compiler Version 1.0)
# Copyright (c) 1993-2001, CWI. All rights reserved.

# Predefined code segment
#
##line 567 "/ufs/mk/monet_4-3/src/modules/plain/ddbench.mx"
#
	view_bbp_name:= bbp.getNames();
	aa_a := reverse(view_bbp_name);
barrier	ba_a:= exist(aa_a,"tpe");
#if (view_bbp_name.reverse.exist("tpe")) {
	tpe:= bbp.bind("tpe");
	destroy(tpe);
#	tpe := tpe.destroy;
	commit:= bbp.bind("commit");
#	commit;
#}
exit	ba_a;
#module(ddbench);
	a := new(oid,oid);
#a := new(oid,oid);
	insert(a,2@0,nil:oid);
	insert(a,2@0,nil:oid);
	insert(a,2@0,nil:oid);
	insert(a,2@0,nil:oid);
#a.insert(2@0,nil:oid); a.insert(2@0,nil); a.insert(2@0,nil); a.insert(2@0,nil);
	insert(a,1@0,nil:oid);
	insert(a,1@0,nil:oid);
	insert(a,1@0,nil:oid);
#a.insert(1@0,nil:oid); a.insert(1@0,nil); a.insert(1@0,nil);
	insert(a,0@0,nil:oid);
	insert(a,0@0,nil:oid);
	insert(a,0@0,nil:oid);
	insert(a,0@0,nil:oid);
#a.insert(0@0,nil:oid); a.insert(0@0,nil); a.insert(0@0,nil); a.insert(0@0,nil);
	insert(a,0@0,nil:oid);
	insert(a,0@0,nil:oid);
	insert(a,0@0,nil:oid);
	insert(a,0@0,nil:oid);
#a.insert(0@0,nil:oid); a.insert(0@0,nil); a.insert(0@0,nil); a.insert(0@0,nil);
	insert(a,3@0,nil:oid);
	insert(a,3@0,nil:oid);
	insert(a,3@0,nil:oid);
	insert(a,3@0,nil:oid);
#a.insert(3@0,nil); a.insert(3@0,nil); a.insert(3@0,nil); a.insert(3@0,nil);
	va_a := copy(a);
	wa_a := insert(a,va_a);
#a.insert(a.copy);
	xa_a := mark(a,0@0);
	aa := reverse(xa_a);
#aa := a.mark(0@0).reverse;
	tpe := enum_create("tpe",aa);
#tpe := enum_create("tpe", aa);
	aaa := multiplex.script(tpe,"encode",aa);
#aaa := tpe.[encode](aa);
#
	ya_a := encode(tpe,1@0);
	ab_a := encode(tpe,3@0);
	brsel := rng_bitselect(aaa,ya_a,ab_a);
#brsel := rng_bitselect(aaa, tpe.encode(1@0), tpe.encode(3@0));
	bb_a := tobat(brsel);
	cb_a := semijoin(aa,bb_a);
	db_a := print(cb_a);
#aa.semijoin(brsel.tobat).print;
	eb_a := bit_subhisto(aaa,brsel);
	fb_a := print(eb_a);
#aaa.bit_subhisto(brsel).print;
#
	gb_a := encode(tpe,2@0);
	bvsel := val_bitselect(aaa,gb_a);
#bvsel := val_bitselect(aaa, tpe.encode(2@0));
	hb_a := tobat(bvsel);
	ib_a := semijoin(aa,hb_a);
	jb_a := print(ib_a);
#aa.semijoin(bvsel.tobat).print;
	kb_a := bit_subhisto(aaa,bvsel);
	lb_a := print(kb_a);
#aaa.bit_subhisto(bvsel).print;
#
	mb_a := encode(tpe,3@0);
	bvvsel := val_bitselect(brsel,aaa,mb_a);
#bvvsel := val_bitselect(brsel, aaa, tpe.encode(3@0));
	nb_a := bit_subhisto(aaa,bvvsel);
	ob_a := print(nb_a);
#aaa.bit_subhisto(bvvsel).print;
#
	pb_a := encode(tpe,1@0);
	qb_a := encode(tpe,2@0);
	brrsel := rng_bitselect(brsel,aaa,pb_a,qb_a);
#brrsel := rng_bitselect(brsel, aaa, tpe.encode(1@0), tpe.encode(2@0));
	rb_a := bit_subhisto(aaa,brrsel);
	sb_a := print(rb_a);
#aaa.bit_subhisto(brrsel).print;
#
	BAT_WRITE:= bbp.bind("BAT_WRITE");
	tb_a := access(brsel,BAT_WRITE);
#brsel.access(BAT_WRITE);
	ub_a := encode(tpe,1@0);
	vb_a := encode(tpe,2@0);
	wb_a := rng_bitrefine(brsel,aaa,ub_a,vb_a);
#rng_bitrefine(brsel, aaa, tpe.encode(1@0), tpe.encode(2@0));
	xb_a := bit_subhisto(aaa,brsel);
	yb_a := print(xb_a);
#aaa.bit_subhisto(brsel).print;
#
	ac_a := encode(tpe,2@0);
	bc_a := val_bitrefine(brsel,aaa,ac_a);
#val_bitrefine(brsel, aaa, tpe.encode(2@0));
	cc_a := bit_subhisto(aaa,brsel);
	dc_a := print(cc_a);
#aaa.bit_subhisto(brsel).print;
#
	ec_a := encode(tpe,1@0);
	fc_a := encode(tpe,3@0);
	bvs := vals_bitselect(aaa,ec_a,fc_a);
#bvs := vals_bitselect(aaa, tpe.encode(1@0), tpe.encode(3@0)); 
barrier	gc_a:= bunStream(bvs,gc_aH,gc_aT);
	hc_a := print(gc_aT);
redo	gc_a;
exit	gc_a;
#bvs@batloop() print($t);
#
	ic_a := encode(tpe,1@0);
	jc_a := encode(tpe,2@0);
#brs := rngs_bitselect(aaa, tpe.encode(1@0), tpe.encode(2@0), 
	kc_a := encode(tpe,2@0);
	lc_a := encode(tpe,3@0);
	brs := rngs_bitselect(aaa,ic_a,jc_a,kc_a,lc_a);
#                           tpe.encode(2@0), tpe.encode(3@0)); 
barrier	mc_a:= bunStream(brs,mc_aH,mc_aT);
	nc_a := print(mc_aT);
redo	mc_a;
exit	mc_a;
#brs@batloop() print($t);
#
	bhs := bits_subhisto(aaa,bvvsel,brsel);
#bhs := bits_subhisto(aaa, bvvsel, brsel); 
barrier	oc_a:= bunStream(bhs,oc_aH,oc_aT);
	pc_a := print(oc_aT);
redo	oc_a;
exit	oc_a;
#bhs@batloop() print($t);
#
	qc_a := encode(tpe,1@0);
	rc_a := encode(tpe,3@0);
	orsel := rng_oidselect(aaa,qc_a,rc_a);
#orsel := rng_oidselect(aaa, tpe.encode(1@0), tpe.encode(3@0));
	sc_a := oid_subhisto(aaa,orsel);
	tc_a := print(sc_a);
#aaa.oid_subhisto(orsel).print;
#
	uc_a := encode(tpe,2@0);
	ovsel := val_oidselect(aaa,uc_a);
#ovsel := val_oidselect(aaa, tpe.encode(2@0));
	vc_a := oid_subhisto(aaa,ovsel);
	wc_a := print(vc_a);
#aaa.oid_subhisto(ovsel).print;
#
	xc_a := encode(tpe,3@0);
	ovvsel := val_oidselect(orsel,aaa,xc_a);
#ovvsel := val_oidselect(orsel, aaa, tpe.encode(3@0));
	yc_a := oid_subhisto(aaa,ovvsel);
	ad_a := print(yc_a);
#aaa.oid_subhisto(ovvsel).print;
#
	bd_a := encode(tpe,1@0);
	cd_a := encode(tpe,2@0);
	orrsel := rng_oidselect(orsel,aaa,bd_a,cd_a);
#orrsel := rng_oidselect(orsel, aaa, tpe.encode(1@0), tpe.encode(2@0));
	dd_a := oid_subhisto(aaa,orrsel);
	ed_a := print(dd_a);
#aaa.oid_subhisto(orrsel).print;
#
	fd_a := access(orsel,BAT_WRITE);
#orsel.access(BAT_WRITE);
	gd_a := encode(tpe,1@0);
	hd_a := encode(tpe,2@0);
	id_a := rng_oidrefine(orsel,aaa,gd_a,hd_a);
#rng_oidrefine(orsel, aaa, tpe.encode(1@0), tpe.encode(2@0));
	jd_a := oid_subhisto(aaa,orsel);
	kd_a := print(jd_a);
#aaa.oid_subhisto(orsel).print;
#
	ld_a := encode(tpe,2@0);
	md_a := val_oidrefine(orsel,aaa,ld_a);
#val_oidrefine(orsel, aaa, tpe.encode(2@0));
	nd_a := oid_subhisto(aaa,orsel);
	od_a := print(nd_a);
#aaa.oid_subhisto(orsel).print;
#
	pd_a := encode(tpe,1@0);
	qd_a := encode(tpe,3@0);
	ovs := vals_oidselect(aaa,pd_a,qd_a);
#ovs := vals_oidselect(aaa, tpe.encode(1@0), tpe.encode(3@0)); 
barrier	rd_a:= bunStream(ovs,rd_aH,rd_aT);
	sd_a := print(rd_aT);
redo	rd_a;
exit	rd_a;
#ovs@batloop() print($t);
#
	td_a := encode(tpe,1@0);
	ud_a := encode(tpe,2@0);
#ors := rngs_oidselect(aaa, tpe.encode(1@0), tpe.encode(2@0), 
	vd_a := encode(tpe,2@0);
	wd_a := encode(tpe,3@0);
	ors := rngs_oidselect(aaa,td_a,ud_a,vd_a,wd_a);
#                           tpe.encode(2@0), tpe.encode(3@0)); 
barrier	xd_a:= bunStream(ors,xd_aH,xd_aT);
	yd_a := print(xd_aT);
redo	xd_a;
exit	xd_a;
#ors@batloop() print($t);
#
#
