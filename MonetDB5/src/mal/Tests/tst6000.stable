# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
## Tests for the x100core package
#N:= 10:lng;
#res:= x100.new(uint,N);
#grp:= x100.new(uint,N);
#sel:= x100.new(uint,N);
#
#i:= -1L;
#barrier v:= nextElement(i,0L,N);
#	k:= rand();
#	lu:= uint(k);
#	g:= i % 4L;
#	gu:= uint(g);
#	insert(res,nil,0:uint);
#	insert(grp,nil,gu);
#	j:= i %2;
#	ju:= uint(j);
#	insert(sel,nil,ju);
#	redo v;
#exit v;
#print(res);
#print(grp);
#print(sel);
#printf("First x100 command ever\n");
#aggr_count(res,grp,sel,N);
#print(res);
#aggr_count(res,grp,N);
#print(res);
#
function Admin.main():int; #0:(main:int)
    N := 10; #1:(N:lng)<-($2:lng)
    res := x100.new(uint,N); #2:(res:bat[void,uint])<-(uint:uint)(N:lng)
    grp := x100.new(uint,N); #3:(grp:bat[void,uint])<-(uint:uint)(N:lng)
    sel := x100.new(uint,N); #4:(sel:bat[void,uint])<-(uint:uint)(N:lng)
    i := -1L; #5:(i:lng)<-($8:lng)
barrier v := mal.nextElement(i,0L,N); #6:(v:bit)<-(i:lng)($10:lng)(N:lng) jump 17
    k := calc.rand(); #7:(k:int)
    lu := uidx.uint(k); #8:(lu:uint)<-(k:int)
    g := calc.%(i,4L); #9:(g:lng)<-(i:lng)($14:lng)
    gu := uidx.uint(g); #10:(gu:uint)<-(g:lng)
    bat.insert(res,nil,0); #11:($16:bat[void,uint])<-(res:bat[void,uint])($17:void)($18:uint)
    bat.insert(grp,nil,gu); #12:($19:bat[void,uint])<-(grp:bat[void,uint])($17:void)(gu:uint)
    j := calc.%(i,2); #13:(j:int)<-(i:lng)($21:int)
    ju := uidx.uint(j); #14:(ju:uint)<-(j:int)
    bat.insert(sel,nil,ju); #15:($23:bat[void,uint])<-(sel:bat[void,uint])($17:void)(ju:uint)
    redo v; #16:(v:bit) jump 6
exit v; #17:(v:bit)
    io.print(res); #18:($24:int)<-(res:bat[void,uint])
    io.print(grp); #19:($25:int)<-(grp:bat[void,uint])
    io.print(sel); #20:($26:int)<-(sel:bat[void,uint])
    system.printf("First x100 command ever\n"); #21:($27:int)<-($28:str)
    x100.aggr_count(res,grp,sel,N); #22:($29:void)<-(res:bat[void,uint])(grp:bat[void,uint])(sel:bat[void,uint])(N:lng)
    io.print(res); #23:($30:int)<-(res:bat[void,uint])
    x100.aggr_count(res,grp,N); #24:($31:void)<-(res:bat[void,uint])(grp:bat[void,uint])(N:lng)
    io.print(res); #25:($32:int)<-(res:bat[void,uint])
end main; #26:
#-----------------#
# BAT:	  tmp_4	  #
# (void)  (uint)  #
#-----------------#
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
#-----------------#
# BAT:	  tmp_5	  #
# (void)  (uint)  #
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  3	  ]
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  3	  ]
[ nil,	  0	  ]
[ nil,	  1	  ]
#-----------------#
# BAT:	  tmp_6	  #
# (void)  (uint)  #
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  0	  ]
[ nil,	  1	  ]
First x100 command ever
#-----------------#
# BAT:	  tmp_4	  #
# (void)  (uint)  #
#-----------------#
[ nil,	  5	  ]
[ nil,	  5	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
#-----------------#
# BAT:	  tmp_4	  #
# (void)  (uint)  #
#-----------------#
[ nil,	  8	  ]
[ nil,	  8	  ]
[ nil,	  2	  ]
[ nil,	  2	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
[ nil,	  0	  ]
>