# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
##Same as tst200, but includes testing of the profiler
#
##profiler.setAll();
#profiler.activate("tick");
#profiler.activate("pc");
#profiler.activate("statement");
##profiler.setFilter("*","*");
#profiler.setFilter("*","insert");
##profiler.setFilter("*","print");
#profiler.openStream("/tmp/MonetEvents");
#
#o:=oid(20000000);
#setoid(o);
##test basic functionality of the BAT library.
##focussed on integers
##it includes insertions,deletions,selections, and joins.
#
#b:= new(:int,:int);
#printf("#~BeginVariableOutput~#\n"); 
#binfo:= info(b);
#print(binfo); 
#printf("#~EndVariableOutput~#\n");
#
#profiler.start();
#err := insert(b,1,15);
#err := insert(b,2,4);
#n0  := int(nil);
#err := insert(b,3,n0);
#err := insert(b,4,16);
#err := insert(b,5,25);
#err := insert(b,6,36);
#err := insert(b,7,49);
#err := insert(b,8,64);
#err := insert(b,9,n0);
#err := insert(b,n0,n0);
#err := insert(b,n0,81);
#print(b);
#print(b,b,b);
#profiler.stop();
#profiler.closeStream();
#
function Admin.main():int;	# 0  (main:int)
    profiler.activate("tick");	# 1 CMDactivateProfiler ($1:void)<-($2:str)
    profiler.activate("pc");	# 2 CMDactivateProfiler ($3:void)<-($4:str)
    profiler.activate("statement");	# 3 CMDactivateProfiler ($5:void)<-($6:str)
    profiler.setFilter("*","insert");	# 4 CMDsetFilterProfiler ($7:void)<-($8:str)($9:str)
    profiler.openStream("/tmp/MonetEvents");	# 5 CMDsetProfilerStream ($10:void)<-($11:str)
    o := calc.oid(20000000);	# 6 CALCint2oid (o:oid)<-($13:int)
    calc.setoid(o);	# 7 CALCsetoidInc ($14:oid)<-(o:oid)
    b := bbp.new(int:,int:);	# 8 CMDBATnew (b:bat[:int,:int])<-($16:int)($17:int)
    io.printf("#~BeginVariableOutput~#\n");	# 9 IOprint_str ($18:int)<-($19:str)
    binfo := bat.info(b);	# 10 BKCinfo (binfo:bat[:str,:str])<-(b:bat[:int,:int])
    io.print(binfo);	# 11 IOprint_val ($21:int)<-(binfo:bat[:str,:str])
    io.printf("#~EndVariableOutput~#\n");	# 12 IOprint_str ($22:int)<-($23:str)
    profiler.start();	# 13 CMDstartProfiler ($24:void)
    err := bat.insert(b,1,15);	# 14 BKCinsert_bun (err:void)<-(b:bat[:int,:int])($26:int)($27:int)
    err := bat.insert(b,2,4);	# 15 BKCinsert_bun (err:void)<-(b:bat[:int,:int])($28:int)($29:int)
    n0 := calc.int(nil);	# 16 CALCnil2int (n0:int)<-($31:void)
    err := bat.insert(b,3,n0);	# 17 BKCinsert_bun (err:void)<-(b:bat[:int,:int])($32:int)(n0:int)
    err := bat.insert(b,4,16);	# 18 BKCinsert_bun (err:void)<-(b:bat[:int,:int])($29:int)($33:int)
    err := bat.insert(b,5,25);	# 19 BKCinsert_bun (err:void)<-(b:bat[:int,:int])($34:int)($35:int)
    err := bat.insert(b,6,36);	# 20 BKCinsert_bun (err:void)<-(b:bat[:int,:int])($36:int)($37:int)
    err := bat.insert(b,7,49);	# 21 BKCinsert_bun (err:void)<-(b:bat[:int,:int])($38:int)($39:int)
    err := bat.insert(b,8,64);	# 22 BKCinsert_bun (err:void)<-(b:bat[:int,:int])($40:int)($41:int)
    err := bat.insert(b,9,n0);	# 23 BKCinsert_bun (err:void)<-(b:bat[:int,:int])($42:int)(n0:int)
    err := bat.insert(b,n0,n0);	# 24 BKCinsert_bun (err:void)<-(b:bat[:int,:int])(n0:int)(n0:int)
    err := bat.insert(b,n0,81);	# 25 BKCinsert_bun (err:void)<-(b:bat[:int,:int])(n0:int)($43:int)
    io.print(b);	# 26 IOprint_val ($44:int)<-(b:bat[:int,:int])
    io.print(b,b,b);	# 27 IOtable ($45:int)<-(b:bat[:int,:int])(b:bat[:int,:int])(b:bat[:int,:int])
    profiler.stop();	# 28 CMDstopProfiler ($46:void)
    profiler.closeStream();	# 29 closeProfilerStream ($47:void)
end main;	# 30  
#~BeginVariableOutput~#
#-------------------------------------------------#
# h				tmp_5		  # name
# str				str		  # type
#-------------------------------------------------#
[ "version",			  "980714"	  ]
[ "batId",			  "tmp_4"	  ]
[ "batCacheid",			  "4"		  ]
[ "batParentid",		  "0"		  ]
[ "batSharecnt",		  "0"		  ]
[ "head",			  "int"		  ]
[ "tail",			  "int"		  ]
[ "batPersistence",		  "transient"	  ]
[ "batRestricted",		  "updatable"	  ]
[ "batRefcnt",			  "1"		  ]
[ "batLRefcnt",			  "2"		  ]
[ "batDirty",			  "dirty"	  ]
[ "batSet",			  "0"		  ]
[ "void_tid",			  "0"		  ]
[ "void_cnt",			  "0"		  ]
[ "hsorted",			  "1"		  ]
[ "hident",			  "h"		  ]
[ "hdense",			  "0"		  ]
[ "hseqbase",			  "nil"		  ]
[ "hkey",			  "0"		  ]
[ "hloc",			  "0"		  ]
[ "hvarsized",			  "0"		  ]
[ "halign",			  "20000000"	  ]
[ "halignflushed",		  "20000000"	  ]
[ "tident",			  "t"		  ]
[ "tdense",			  "0"		  ]
[ "tseqbase",			  "nil"		  ]
[ "tsorted",			  "1"		  ]
[ "tkey",			  "0"		  ]
[ "tloc",			  "4"		  ]
[ "tvarsized",			  "0"		  ]
[ "talign",			  "20000001"	  ]
[ "talignflushed",		  "20000001"	  ]
[ "batInserted",		  "1"		  ]
[ "batDeleted",			  "0"		  ]
[ "batHole",			  "0"		  ]
[ "top",			  "1"		  ]
[ "batStamp",			  "4"		  ]
[ "lastUsed",			  "5"		  ]
[ "keepAround",			  "0"		  ]
[ "curStamp",			  "5"		  ]
[ "batCopiedtodisk",		  "0"		  ]
[ "batDirtydesc",		  "clean"	  ]
[ "batDirtybuns",		  "clean"	  ]
[ "batBuns.free",		  "8"		  ]
[ "batBuns.size",		  "424"		  ]
[ "batBuns.maxsize",		  "424"		  ]
[ "batBuns.storage",		  "malloced"	  ]
[ "batBuns.filename",		  "4.buns"	  ]
[ "batBuns.offset",		  "0"		  ]
[ "hheapdirty",			  "clean"	  ]
[ "hheap.free",			  "0"		  ]
[ "hheap.size",			  "0"		  ]
[ "hheap.maxsize",		  "0"		  ]
[ "hheap.storage",		  "absent"	  ]
[ "hheap.filename",		  "4.hheap"	  ]
[ "hheap.offset",		  "0"		  ]
[ "theapdirty",			  "clean"	  ]
[ "theap.free",			  "0"		  ]
[ "theap.size",			  "0"		  ]
[ "theap.maxsize",		  "0"		  ]
[ "theap.storage",		  "absent"	  ]
[ "theap.filename",		  "4.theap"	  ]
[ "theap.offset",		  "0"		  ]
[ "hacctype",			  "null"	  ]
[ "haccdirty",			  "clean"	  ]
[ "haccCopiedtodisk",		  "0"		  ]
[ "haccelerator.free",		  "0"		  ]
[ "haccelerator.size",		  "0"		  ]
[ "haccelerator.maxsize",	  "0"		  ]
[ "haccelerator.storage",	  "absent"	  ]
[ "haccelerator.filename",	  "no file"	  ]
[ "haccelerator.offset",	  "0"		  ]
[ "tacctype",			  "null"	  ]
[ "taccdirty",			  "clean"	  ]
[ "taccCopiedtodisk",		  "0"		  ]
[ "taccelerator.free",		  "0"		  ]
[ "taccelerator.size",		  "0"		  ]
[ "taccelerator.maxsize",	  "0"		  ]
[ "taccelerator.storage",	  "absent"	  ]
[ "taccelerator.filename",	  "no file"	  ]
[ "taccelerator.offset",	  "0"		  ]
[ "head_index",			  "absent"	  ]
[ "tail_index",			  "absent"	  ]
#~EndVariableOutput~#
# Start performance profiling
#-----------------#
# h	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#---------------------------------#
# h	tmp_4	tmp_4	tmp_4	  # name
# int	int	int	int	  # type
#---------------------------------#
[ 1,	  15,	  15,	  15	  ]
[ 2,	  4,	  4,	  4	  ]
[ 3,	  nil,	  nil,	  nil	  ]
[ 4,	  16,	  16,	  16	  ]
[ 5,	  25,	  25,	  25	  ]
[ 6,	  36,	  36,	  36	  ]
[ 7,	  49,	  49,	  49	  ]
[ 8,	  64,	  64,	  64	  ]
[ 9,	  nil,	  nil,	  nil	  ]
# Performance profiling stopped
>