# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
##Same as tst200, but includes testing of the profiler
#
#profiler.setFilter("*","insert");
#profiler.setFilter("*","print");
#profiler.openStream("/tmp/MonetProfile.xml");
#
#o:=oid(20000000);
#setoid(o);
##test basic functionality of the BAT library.
##focussed on integers
##it includes insertions,deletions,selections, and joins.
#
#b:= new(int,int);
#printf("#~BeginVariableOutput~#\n"); 
#binfo:= info(b);
#print(binfo); 
#printf("#~EndVariableOutput~#\n");
#
#profiler.start();
#err := insert(b,1,15);
#err := insert(b,2,4);
#n0  := int(nil);
#err := insert(b,3,n0);
#err := insert(b,4,16);
#err := insert(b,5,25);
#err := insert(b,6,36);
#err := insert(b,7,49);
#err := insert(b,8,64);
#err := insert(b,9,n0);
#err := insert(b,n0,n0);
#err := insert(b,n0,81);
#print(b);
#print(b,b,b);
#profiler.stop();
#profiler.closeStream();
#
function Admin.main():int; #0  (main:int)
    profiler.setFilter("*","insert"); #1 CMDsetFilterProfiler ($1:any)<-($2:str)($3:str)
    profiler.setFilter("*","print"); #2 CMDsetFilterProfiler ($4:any)<-($2:str)($5:str)
    profiler.openStream("/tmp/MonetProfile.xml"); #3 CMDsetProfilerStream ($6:any)<-($7:str)
    o := calc.oid(20000000); #4 CALCint2oid (o:oid)<-($9:int)
    calc.setoid(o); #5 CALCsetoidInc ($10:oid)<-(o:oid)
    b := bbp.new(int,int); #6 CMDBATnew (b:bat[int,int])<-(int:int)(int:int)
    system.printf("#~BeginVariableOutput~#\n"); #7 SYSprint_str ($13:int)<-($14:str)
    binfo := bat.info(b); #8 CMDinfo (binfo:bat[str,str])<-(b:bat[int,int])
    io.print(binfo); #9 CMDprint_val ($16:int)<-(binfo:bat[str,str])
    system.printf("#~EndVariableOutput~#\n"); #10 SYSprint_str ($17:int)<-($18:str)
    profiler.start(); #11 CMDstartProfiler ($19:any)
    err := bat.insert(b,1,15); #12 CMDinsert_bun (err:bat[int,int])<-(b:bat[int,int])($21:int)($22:int)
    err := bat.insert(b,2,4); #13 CMDinsert_bun (err:bat[int,int])<-(b:bat[int,int])($23:int)($24:int)
    n0 := calc.int(nil); #14 CALCnil2int (n0:int)<-($26:void)
    err := bat.insert(b,3,n0); #15 CMDinsert_bun (err:bat[int,int])<-(b:bat[int,int])($27:int)(n0:int)
    err := bat.insert(b,4,16); #16 CMDinsert_bun (err:bat[int,int])<-(b:bat[int,int])($24:int)($28:int)
    err := bat.insert(b,5,25); #17 CMDinsert_bun (err:bat[int,int])<-(b:bat[int,int])($29:int)($30:int)
    err := bat.insert(b,6,36); #18 CMDinsert_bun (err:bat[int,int])<-(b:bat[int,int])($31:int)($32:int)
    err := bat.insert(b,7,49); #19 CMDinsert_bun (err:bat[int,int])<-(b:bat[int,int])($33:int)($34:int)
    err := bat.insert(b,8,64); #20 CMDinsert_bun (err:bat[int,int])<-(b:bat[int,int])($35:int)($36:int)
    err := bat.insert(b,9,n0); #21 CMDinsert_bun (err:bat[int,int])<-(b:bat[int,int])($37:int)(n0:int)
    err := bat.insert(b,n0,n0); #22 CMDinsert_bun (err:bat[int,int])<-(b:bat[int,int])(n0:int)(n0:int)
    err := bat.insert(b,n0,81); #23 CMDinsert_bun (err:bat[int,int])<-(b:bat[int,int])(n0:int)($38:int)
    io.print(b); #24 CMDprint_val ($39:int)<-(b:bat[int,int])
    io.print(b,b,b); #25 CMDtable ($40:int)<-(b:bat[int,int])(b:bat[int,int])(b:bat[int,int])
    profiler.stop(); #26 CMDstopProfiler ($41:any)
    profiler.closeStream(); #27 closeProfilerStream ($42:void)
end main; #28  
#~BeginVariableOutput~#
#-------------------------------------------------#
# BAT:				  tmp_5		  #
# (str)				  (str)		  #
#-------------------------------------------------#
[ "version",			  "980714"	  ]
[ "batId",			  "tmp_4"	  ]
[ "batCacheid",			  "4"		  ]
[ "batParentid",		  "0"		  ]
[ "batSharecnt",		  "0"		  ]
[ "head",			  "int"		  ]
[ "tail",			  "int"		  ]
[ "batPersistence",		  "transient"	  ]
[ "batRestricted",		  "updatable"	  ]
[ "batRefcnt",			  "1"		  ]
[ "batDirty",			  "dirty"	  ]
[ "batSet",			  "0"		  ]
[ "void_tid",			  "0"		  ]
[ "void_cnt",			  "0"		  ]
[ "hsorted",			  "1"		  ]
[ "hident",			  "h"		  ]
[ "hdense",			  "0"		  ]
[ "hseqbase",			  "nil"		  ]
[ "hkey",			  "0"		  ]
[ "hloc",			  "0"		  ]
[ "hvarsized",			  "0"		  ]
[ "halign",			  "20000000"	  ]
[ "halignflushed",		  "20000000"	  ]
[ "tident",			  "t"		  ]
[ "tdense",			  "0"		  ]
[ "tseqbase",			  "nil"		  ]
[ "tsorted",			  "1"		  ]
[ "tkey",			  "0"		  ]
[ "tloc",			  "4"		  ]
[ "tvarsized",			  "0"		  ]
[ "talign",			  "20000001"	  ]
[ "talignflushed",		  "20000001"	  ]
[ "batInserted",		  "1"		  ]
[ "batDeleted",			  "0"		  ]
[ "batHole",			  "0"		  ]
[ "top",			  "1"		  ]
[ "batStamp",			  "4"		  ]
[ "curStamp",			  "5"		  ]
[ "batCopiedtodisk",		  "0"		  ]
[ "batDirtydesc",		  "clean"	  ]
[ "batDirtybuns",		  "clean"	  ]
[ "batBuns.free",		  "8"		  ]
[ "batBuns.size",		  "424"		  ]
[ "batBuns.maxsize",		  "69632"	  ]
[ "batBuns.storage",		  "anonymous vm"  ]
[ "batBuns.filename",		  "no file"	  ]
[ "batBuns.offset",		  "0"		  ]
[ "hheapdirty",			  "clean"	  ]
[ "hheap.free",			  "0"		  ]
[ "hheap.size",			  "0"		  ]
[ "hheap.maxsize",		  "0"		  ]
[ "hheap.storage",		  "absent"	  ]
[ "hheap.filename",		  "no file"	  ]
[ "hheap.offset",		  "0"		  ]
[ "theapdirty",			  "clean"	  ]
[ "theap.free",			  "0"		  ]
[ "theap.size",			  "0"		  ]
[ "theap.maxsize",		  "0"		  ]
[ "theap.storage",		  "absent"	  ]
[ "theap.filename",		  "no file"	  ]
[ "theap.offset",		  "0"		  ]
[ "hacctype",			  "null"	  ]
[ "haccdirty",			  "clean"	  ]
[ "haccCopiedtodisk",		  "0"		  ]
[ "haccelerator.free",		  "0"		  ]
[ "haccelerator.size",		  "0"		  ]
[ "haccelerator.maxsize",	  "0"		  ]
[ "haccelerator.storage",	  "absent"	  ]
[ "haccelerator.filename",	  "no file"	  ]
[ "haccelerator.offset",	  "0"		  ]
[ "tacctype",			  "null"	  ]
[ "taccdirty",			  "clean"	  ]
[ "taccCopiedtodisk",		  "0"		  ]
[ "taccelerator.free",		  "0"		  ]
[ "taccelerator.size",		  "0"		  ]
[ "taccelerator.maxsize",	  "0"		  ]
[ "taccelerator.storage",	  "absent"	  ]
[ "taccelerator.filename",	  "no file"	  ]
[ "taccelerator.offset",	  "0"		  ]
[ "head_index",			  "absent"	  ]
[ "tail_index",			  "absent"	  ]
#~EndVariableOutput~#
# Start performance profiling
#-----------------#
# BAT:	  tmp_4	  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#---------------------------------#
# BAT:	  tmp_4	| tmp_4	| tmp_4	  #
# (int)	  (int)	| (int)	| (int)	  #
#---------------------------------#
[ 1,	  15,	  15,	  15	  ]
[ 2,	  4,	  4,	  4	  ]
[ 3,	  nil,	  nil,	  nil	  ]
[ 4,	  16,	  16,	  16	  ]
[ 5,	  25,	  25,	  25	  ]
[ 6,	  36,	  36,	  36	  ]
[ 7,	  49,	  49,	  49	  ]
[ 8,	  64,	  64,	  64	  ]
[ 9,	  nil,	  nil,	  nil	  ]
[ nil,	  nil,	  81,	  81	  ]
[ nil,	  nil,	  81,	  nil	  ]
[ nil,	  nil,	  nil,	  81	  ]
[ nil,	  nil,	  nil,	  nil	  ]
[ nil,	  81,	  81,	  81	  ]
[ nil,	  81,	  81,	  nil	  ]
[ nil,	  81,	  nil,	  81	  ]
[ nil,	  81,	  nil,	  nil	  ]
# Performance profiling stopped
>