# Mil compiler Version 1.0)
# Copyright (c) 1993-2001, CWI. All rights reserved.

# Predefined code segment
#
##line 531 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
#module(monettime,alarm);
#
#
#
##line 535 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
## test the various ways to create rules
	rule_jan:= rule("1st MON from start of JAN@01:15");
#var rule_jan := rule("1st MON from start of JAN@01:15");
	rule_mar:= rule("first WEDNE on or after march 10@01:15");
#var rule_mar := rule("first WEDNE on or after march 10@01:15");
	rule_apr:= rule("last THU on or before aPr 1@01:15");
#var rule_apr := rule("last THU on or before aPr 1@01:15");
	rule_may:= rule("MAY 26@01:15");
#var rule_may := rule("MAY 26@01:15");
	rule_jun:= rule("2nd TUE from end of june@01:15");
#var rule_jun := rule("2nd TUE from end of june@01:15");
	rule_jul:= rule(7,1,1,75);
#var rule_jul := rule(7,1,1,75);
	rule_aug:= rule(8,-1,1,75);
#var rule_aug := rule(8,-1,1,75);
	rule_sep:= rule(9,-10,3,75);
#var rule_sep := rule(9,-10,3,75);
	rule_oct:= rule(10,31,0,75);
#var rule_oct := rule(10,31,0,75);
	rule_nov:= rule(11,-10,-4,75);
#var rule_nov := rule(11,-10,-4,75);
## nil rules
	rule_dec:= rule(12,-31,0,75);
#var rule_dec := rule(12,-31,0,75);
	rule_feb:= rule("first fRiDaY on or after february 30@01:15");
#var rule_feb := rule("first fRiDaY on or after february 30@01:15");
# 
	rule_bat:= new(:str,:rule,10);
#var rule_bat := new(str,rule,10);
	insert(rule_bat,"jan",rule_jan);
	insert(rule_bat,"feb",rule_feb);
	insert(rule_bat,"mar",rule_mar);
	insert(rule_bat,"apr",rule_apr);
#rule_bat.insert("jan",rule_jan).insert("feb",rule_feb).insert("mar",rule_mar).insert("apr",rule_apr);
	insert(rule_bat,"may",rule_may);
	insert(rule_bat,"jun",rule_jun);
	insert(rule_bat,"jul",rule_jul);
	insert(rule_bat,"aug",rule_aug);
#rule_bat.insert("may",rule_may).insert("jun",rule_jun).insert("jul",rule_jul).insert("aug",rule_aug);
	insert(rule_bat,"sep",rule_sep);
	insert(rule_bat,"oct",rule_oct);
	insert(rule_bat,"nov",rule_nov);
	insert(rule_bat,"dec",rule_dec);
#rule_bat.insert("sep",rule_sep).insert("oct",rule_oct).insert("nov",rule_nov).insert("dec",rule_dec);
#
## test the operations on rules
	ma_a := setColumn(rule_bat,"rule");
#print(rule_bat.setColumn("rule"),
	na_a := multiplex.script("month",rule_bat);
	oa_a := setColumn(na_a,"month");
#      [month](rule_bat).setColumn("month"),
	pa_a := multiplex.script("weekday",rule_bat);
	qa_a := setColumn(pa_a,"weekday");
#      [weekday](rule_bat).setColumn("weekday"),
	ra_a := multiplex.script("day",rule_bat);
	sa_a := setColumn(ra_a,"day");
#      [day](rule_bat).setColumn("day"),
	ta_a := multiplex.script("minutes",rule_bat);
	ua_a := setColumn(ta_a,"minutes");
print("rule_bat,na_a,pa_a,ra_a,ta_a");
	va_a := print(rule_bat,na_a,pa_a,ra_a,ta_a);
#      [minutes](rule_bat).setColumn("minutes"));
#
	setColumn(rule_bat,"rule");
#print(rule_bat.setColumn("rule"),
	xa_a := multiplex.script("compute",rule_bat,2001);
	ya_a := setColumn(xa_a,"2001");
#      [compute](rule_bat, 2001).setColumn("2001"),
	ab_a := multiplex.script("compute",rule_bat,2001);
	bb_a := multiplex.script("dayofweek",ab_a);
	cb_a := multiplex.script("dayname",bb_a);
	setColumn(cb_a,"2001");
#      [dayname]([dayofweek]([compute](rule_bat, 2001))).setColumn("2001"),
	eb_a := multiplex.script("compute",rule_bat,1999);
	setColumn(eb_a,"1999");
#      [compute](rule_bat, 1999).setColumn("1999"),
	gb_a := multiplex.script("compute",rule_bat,1999);
	hb_a := multiplex.script("dayofweek",gb_a);
	ib_a := multiplex.script("dayname",hb_a);
	setColumn(ib_a,"1999");
#      [dayname]([dayofweek]([compute](rule_bat, 1999))).setColumn("1999"),
	kb_a := multiplex.script("compute",rule_bat,1992);
	setColumn(kb_a,"1992");
#      [compute](rule_bat, 1992).setColumn("1992"),
	mb_a := multiplex.script("compute",rule_bat,1992);
	nb_a := multiplex.script("dayofweek",mb_a);
	ob_a := multiplex.script("dayname",nb_a);
	setColumn(ob_a,"1992");
print("rule_bat,xa_a,cb_a,eb_a,ib_a,kb_a,ob_a");
	qb_a := print(rule_bat,xa_a,cb_a,eb_a,ib_a,kb_a,ob_a);
#      [dayname]([dayofweek]([compute](rule_bat, 1992))).setColumn("1992"));
#
	rb_a := setColumn(rule_bat,"rule");
#print(rule_bat.setColumn("rule"),
	sb_a := multiplex.script("compute",rule_bat,1572);
	tb_a := setColumn(sb_a,"1572");
#      [compute](rule_bat, 1572).setColumn("1572"),
	ub_a := multiplex.script("compute",rule_bat,1572);
	vb_a := multiplex.script("dayofweek",ub_a);
	wb_a := multiplex.script("dayname",vb_a);
	xb_a := setColumn(wb_a,"1572");
#      [dayname]([dayofweek]([compute](rule_bat, 1572))).setColumn("1572"),
	yb_a := multiplex.script("compute",rule_bat,1);
	ac_a := setColumn(yb_a,"1");
#      [compute](rule_bat, 1).setColumn("1"),
	bc_a := multiplex.script("compute",rule_bat,1);
	cc_a := multiplex.script("dayofweek",bc_a);
	dc_a := multiplex.script("dayname",cc_a);
	ec_a := setColumn(dc_a,"1");
#      [dayname]([dayofweek]([compute](rule_bat, 1))).setColumn("1"),
	fc_a := multiplex.script("compute",rule_bat,-2000);
	gc_a := setColumn(fc_a,"-2000");
#      [compute](rule_bat, -2000).setColumn("-2000"),
	hc_a := multiplex.script("compute",rule_bat,-2000);
	ic_a := multiplex.script("dayofweek",hc_a);
	jc_a := multiplex.script("dayname",ic_a);
	kc_a := setColumn(jc_a,"-2000");
print("rule_bat,sb_a,wb_a,yb_a,dc_a,fc_a,jc_a");
	lc_a := print(rule_bat,sb_a,wb_a,yb_a,dc_a,fc_a,jc_a);
#      [dayname]([dayofweek]([compute](rule_bat, -2000))).setColumn("-2000"));
#
#
#
##line 580 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
## test the various ways to create tzones, using some of the above created rules
	tzone_00:= tzone("GMT");
#var tzone_00 := tzone("GMT");
	tzone_01:= tzone("GMT+01:00");
#var tzone_01 := tzone("GMT+01:00");
	tzone_02:= tzone("GMT+0100");
#var tzone_02 := tzone("GMT+0100");
	tzone_03:= tzone(60,rule_oct,rule_mar);
#var tzone_03 := tzone(60, rule_oct, rule_mar);
	tzone_04:= tzone(0,rule_jan,rule_aug);
#var tzone_04 := tzone(0, rule_jan, rule_aug);
	tzone_05:= tzone(-97,rule_oct,rule_apr);
#var tzone_05 := tzone(-97, rule_oct, rule_apr);
	tzone_06:= tzone(-97,rule_may,rule_sep);
#var tzone_06 := tzone(-97, rule_may, rule_sep);
	mc_a := *(23,60);
	tzone_07:= tzone(mc_a,rule_apr,rule_nov);
#var tzone_07 := tzone(23*60, rule_apr, rule_nov);
	nc_a := *(-23,59);
	oc_a := -(nc_a,59);
	tzone_08:= tzone(oc_a);
#var tzone_08 := tzone((-23*59) - 59);
	tzone_09:= tzone(0);
#var tzone_09 := tzone(0);
	tzone_10:= tzone(-60);
#var tzone_10 := tzone(-60);
	pc_a := *(23,60);
	qc_a := +(pc_a,59);
	tzone_11:= tzone(qc_a);
#var tzone_11 := tzone((23*60)+59);
	tzone_12:= tzone(60);
#var tzone_12 := tzone(60);
## nil tzones
	tzone_13:= tzone(60,rule_feb,rule_dec);
#var tzone_13 := tzone(60, rule_feb, rule_dec);
	rc_a := *(24,60);
	tzone_15:= tzone(rc_a,rule_apr,rule_nov);
#var tzone_15 := tzone(24*60, rule_apr, rule_nov);
#
#
	tzone_bat:= new(:oid,:tzone);
#var tzone_bat := new(oid,tzone);
	insert(tzone_bat,00@0,tzone_00);
	insert(tzone_bat,01@0,tzone_01);
	insert(tzone_bat,02@0,tzone_02);
#tzone_bat.insert(00@0, tzone_00).insert(01@0, tzone_01).insert(02@0, tzone_02);
	insert(tzone_bat,03@0,tzone_03);
	insert(tzone_bat,04@0,tzone_04);
	insert(tzone_bat,05@0,tzone_05);
#tzone_bat.insert(03@0, tzone_03).insert(04@0, tzone_04).insert(05@0, tzone_05);
	insert(tzone_bat,06@0,tzone_06);
	insert(tzone_bat,07@0,tzone_07);
	insert(tzone_bat,08@0,tzone_08);
#tzone_bat.insert(06@0, tzone_06).insert(07@0, tzone_07).insert(08@0, tzone_08);
	insert(tzone_bat,09@0,tzone_09);
	insert(tzone_bat,10@0,tzone_10);
	insert(tzone_bat,11@0,tzone_11);
#tzone_bat.insert(09@0, tzone_09).insert(10@0, tzone_10).insert(11@0, tzone_11);
	insert(tzone_bat,12@0,tzone_12);
	insert(tzone_bat,13@0,tzone_13);
	insert(tzone_bat,15@0,tzone_15);
#tzone_bat.insert(12@0, tzone_12).insert(13@0, tzone_13).insert(15@0, tzone_15);
#
## test the operations on tzones
	id_a := setName(tzone_bat,"tzone");
#print(tzone_bat);
#print("start error");
	#x:= getRefCount(tzone_bat);
#print(x);
	#jd_a := print(tzone_bat);
#print("end");
#print(x);
	#x:= getRefCount(tzone_bat);
	print(tzone_bat);
#print(tzone_bat.setColumn("tzone"));
	kd_a := multiplex.script("minutes",tzone_bat);
	setColumn(kd_a,"minutes");
#print([minutes](tzone_bat).setColumn("minutes"),
	md_a := multiplex.script("start_dst",tzone_bat);
	setColumn(md_a,"start_dst");
#      [start_dst](tzone_bat).setColumn("start_dst"),
	od_a := multiplex.script("end_dst",tzone_bat);
	setColumn(od_a,"end_dst");
print("print(kd_a,md_a,od_a)");
	qd_a := print(kd_a,md_a,od_a);
#      [end_dst](tzone_bat).setColumn("end_dst"));
#
#
#
##line 614 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
## test the various ways to create dates
	date_00:= date(2000,01,01);
#var date_00 := date(2000,01,01);
	date_01:= date("5000-JAN-01");
#var date_01 := date("5000-JAN-01");
	date_02:= date("1968-FEBR-29");
#var date_02 := date("1968-FEBR-29");
	date_03:= date("1-MARCH-01");
#var date_03 := date("1-MARCH-01");
	date_04:= date("-5867411-JAN-1");
#var date_04 := date("-5867411-JAN-1");
	date_05:= date("-768/octobe/01");
#var date_05 := date("-768/octobe/01");
	date_06:= date("5000\\novembe\\01");
#var date_06 := date("5000\\novembe\\01");
	date_07:= date("-1999/jun/01");
#var date_07 := date("-1999/jun/01");
	date_08:= date("2000-jul-14");
#var date_08 := date("2000-jul-14");
	date_09:= date("1999-sept-01");
#var date_09 := date("1999-sept-01");
	date_10:= date("1998-decemBeR-01");
#var date_10 := date("1998-decemBeR-01");
	date_11:= date("1953 may                01");
#var date_11 := date("1953 may                01");
	date_12:= date("5867411-DEC-31");
#var date_12 := date("5867411-DEC-31");
## nil dates
	date_13:= date(1996,13,1);
#var date_13 := date(1996,13,1);
	date_14:= date("999999999999999999999-01-01");
#var date_14 := date("999999999999999999999-01-01");
	date_15:= date("1999-JANUARI-01");
#var date_15 := date("1999-JANUARI-01");
	date_16:= date("1999-FEBR-29");
#var date_16 := date("1999-FEBR-29");
	date_17:= date("-1-DECEMBER-0");
#var date_17 := date("-1-DECEMBER-0");
	date_18:= date("5000\novembe\31");
#var date_18 := date("5000\novembe\31");
	date_19:= date("nil");
#var date_19 := date("nil");
	date_20:= date("1999-sept-31");
#var date_20 := date("1999-sept-31");
#
	date_bat:= new(:oid,:date);
#var date_bat := new(oid,date);
	insert(date_bat,00@0,date_00);
	insert(date_bat,01@0,date_01);
	insert(date_bat,02@0,date_02);
#date_bat.insert(00@0, date_00).insert(01@0, date_01).insert(02@0, date_02);
	insert(date_bat,03@0,date_03);
	insert(date_bat,04@0,date_04);
	insert(date_bat,05@0,date_05);
#date_bat.insert(03@0, date_03).insert(04@0, date_04).insert(05@0, date_05);
	insert(date_bat,06@0,date_06);
	insert(date_bat,07@0,date_07);
	insert(date_bat,08@0,date_08);
#date_bat.insert(06@0, date_06).insert(07@0, date_07).insert(08@0, date_08);
	insert(date_bat,09@0,date_09);
	insert(date_bat,10@0,date_10);
	insert(date_bat,11@0,date_11);
#date_bat.insert(09@0, date_09).insert(10@0, date_10).insert(11@0, date_11);
	insert(date_bat,12@0,date_12);
	insert(date_bat,13@0,date_13);
	insert(date_bat,14@0,date_14);
#date_bat.insert(12@0, date_12).insert(13@0, date_13).insert(14@0, date_14);
	insert(date_bat,15@0,date_15);
	insert(date_bat,16@0,date_16);
	insert(date_bat,17@0,date_17);
#date_bat.insert(15@0, date_15).insert(16@0, date_16).insert(17@0, date_17);
	insert(date_bat,18@0,date_18);
	insert(date_bat,19@0,date_19);
	insert(date_bat,20@0,date_20);
#date_bat.insert(18@0, date_18).insert(19@0, date_19).insert(20@0, date_20);
#
## test the operations on dates
	ne_a := setColumn(date_bat,"date");
#print(date_bat.setColumn("date"),
	oe_a := multiplex.script("year",date_bat);
	pe_a := setColumn(oe_a,"year");
#      [year](date_bat).setColumn("year"),
	qe_a := multiplex.script("day",date_bat);
	re_a := setColumn(qe_a,"day");
#      [day](date_bat).setColumn("day"),
	se_a := multiplex.script("month",date_bat);
	te_a := multiplex.script("monthname",se_a);
	ue_a := setColumn(te_a,"monthname");
#      [monthname]([month](date_bat)).setColumn("monthname"),
	ve_a := multiplex.script("month",date_bat);
	we_a := multiplex.script("monthname",ve_a);
	xe_a := multiplex.script("monthnum",we_a);
	ye_a := setColumn(xe_a,"monthnum");
	print("print(date_bat,oe_a,qe_a,te_a,xe_a)");
	af_a := print(date_bat,oe_a,qe_a,te_a,xe_a);
#      [monthnum]([monthname]([month](date_bat))).setColumn("monthnum"));
#
	date_addyears:= multiplex.script("addyears",date_bat,-100);
#var date_addyears := [addyears](date_bat, -100);
	date_addmonths:= multiplex.script("addmonths",date_bat,1);
#var date_addmonths := [addmonths](date_bat, 1);
#
	setColumn(date_bat,"date");
#print(date_bat.setColumn("date"),
	setColumn(date_addyears,"min100y");
#      date_addyears.setColumn("min100y"),
	df_a := multiplex.script("diff",date_addyears,date_bat);
	setColumn(df_a,"diff");
	print("print(date_bat,date_addyears,df_a)");
	ff_a := print(date_bat,date_addyears,df_a);
#      [diff](date_addyears, date_bat).setColumn("diff"));
#
	setColumn(date_bat,"date");
#print(date_bat.setColumn("date"),
	setColumn(date_addmonths,"plus1m");
#      date_addmonths.setColumn("plus1m"),
	if_a := multiplex.script("diff",date_addmonths,date_bat);
	setColumn(if_a,"diff");
	print(" print(date_bat,date_addmonths,if_a)");
	kf_a := print(date_bat,date_addmonths,if_a);
#      [diff](date_addmonths, date_bat).setColumn("diff"));
#
## test dayofweek and weeknumber using more than two years as consecutive days
	date_seq:= new(:int,:date);
#var date_seq := new(int, date);
	i:= -375;
#var i := -375;
barrier	lf_a:= true;
	i:= i+1;
	of_a := <(i,375);
barrier	mf_a:= of_a;
#while ((i :+= 1) < 375) {
	pf_a := adddays(date_00,i);
	insert(date_seq,i,pf_a);
#	date_seq.insert(i,adddays(date_00,i));
redo	lf_a;
exit	mf_a;
exit	lf_a;
#}
	rf_a := setColumn(date_seq,"date");
#print(date_seq.setColumn("date"),
	sf_a := multiplex.script("weekofyear",date_seq);
	tf_a := setColumn(sf_a,"weekofyear");
#      [weekofyear](date_seq).setColumn("weekofyear"),
	uf_a := multiplex.script("dayofweek",date_seq);
	vf_a := multiplex.script("dayname",uf_a);
	wf_a := setColumn(vf_a,"dayofweek");
#      [dayname]([dayofweek](date_seq)).setColumn("dayofweek"),
	xf_a := multiplex.script("dayofweek",date_seq);
	yf_a := multiplex.script("dayname",xf_a);
	ag_a := multiplex.script("daynum",yf_a);
	bg_a := setColumn(ag_a,"num");
#      [daynum]([dayname]([dayofweek](date_seq))).setColumn("num"),
	cg_a := multiplex.script("dayofyear",date_seq);
	dg_a := setColumn(cg_a,"dayofyear");
print("date_seq,sf_a,vf_a,ag_a,cg_a");
	eg_a := print(date_seq,sf_a,vf_a,ag_a,cg_a);
#      [dayofyear](date_seq).setColumn("dayofyear"));
#
#
#
##line 679 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
## test the various ways top create daytimes
	daytime_00:= daytime(23,59,59,999);
#var daytime_00 := daytime(23,59,59,999);
	daytime_01:= daytime("23:59");
#var daytime_01 := daytime("23:59");
	daytime_02:= daytime("00:00");
#var daytime_02 := daytime("00:00");
	daytime_03:= daytime("23:59:59");
#var daytime_03 := daytime("23:59:59");
	daytime_04:= daytime("00:00:00.000");
#var daytime_04 := daytime("00:00:00.000");
	daytime_05:= daytime("00:00:00");
#var daytime_05 := daytime("00:00:00");
	daytime_06:= daytime("00:00:00:001");
#var daytime_06 := daytime("00:00:00:001");
	daytime_07:= daytime("03:49:02.999");
#var daytime_07 := daytime("03:49:02.999");
	daytime_08:= daytime("20:48:42:999");
#var daytime_08 := daytime("20:48:42:999");
	daytime_09:= daytime("17:53:38:999");
#var daytime_09 := daytime("17:53:38:999");
	daytime_10:= daytime("13:15:34:999");
#var daytime_10 := daytime("13:15:34:999");
	daytime_11:= daytime("07:34:27.999");
#var daytime_11 := daytime("07:34:27.999");
	daytime_12:= daytime("23:59:59:999");
#var daytime_12 := daytime("23:59:59:999");
	daytime_13:= daytime("01:00:03.999");
#var daytime_13 := daytime("01:00:03.999");
	daytime_14:= daytime("23:59:59.999");
#var daytime_14 := daytime("23:59:59.999");
## nil daytimes
	daytime_15:= daytime(24,59,59,999);
#var daytime_15 := daytime(24,59,59,999);
	daytime_16:= daytime(23,60,59,999);
#var daytime_16 := daytime(23,60,59,999);
	daytime_17:= daytime(23,59,60,999);
#var daytime_17 := daytime(23,59,60,999);
	daytime_18:= daytime(23,59,60,1000);
#var daytime_18 := daytime(23,59,60,1000);
	daytime_19:= daytime("nil");
#var daytime_19 := daytime("nil");
#
	daytime_bat:= new(:oid,:daytime);
#var daytime_bat := new(oid,daytime);
	insert(daytime_bat,00@0,daytime_00);
	insert(daytime_bat,01@0,daytime_01);
	insert(daytime_bat,02@0,daytime_02);
#daytime_bat.insert(00@0, daytime_00).insert(01@0, daytime_01).insert(02@0, daytime_02);
	insert(daytime_bat,03@0,daytime_03);
	insert(daytime_bat,04@0,daytime_04);
	insert(daytime_bat,05@0,daytime_05);
#daytime_bat.insert(03@0, daytime_03).insert(04@0, daytime_04).insert(05@0, daytime_05);
	insert(daytime_bat,06@0,daytime_06);
	insert(daytime_bat,07@0,daytime_07);
	insert(daytime_bat,08@0,daytime_08);
#daytime_bat.insert(06@0, daytime_06).insert(07@0, daytime_07).insert(08@0, daytime_08);
	insert(daytime_bat,09@0,daytime_09);
	insert(daytime_bat,10@0,daytime_10);
	insert(daytime_bat,11@0,daytime_11);
#daytime_bat.insert(09@0, daytime_09).insert(10@0, daytime_10).insert(11@0, daytime_11);
	insert(daytime_bat,12@0,daytime_12);
	insert(daytime_bat,13@0,daytime_13);
	insert(daytime_bat,14@0,daytime_14);
#daytime_bat.insert(12@0, daytime_12).insert(13@0, daytime_13).insert(14@0, daytime_14);
	insert(daytime_bat,15@0,daytime_15);
	insert(daytime_bat,16@0,daytime_16);
	insert(daytime_bat,17@0,daytime_17);
#daytime_bat.insert(15@0, daytime_15).insert(16@0, daytime_16).insert(17@0, daytime_17);
	insert(daytime_bat,18@0,daytime_18);
	insert(daytime_bat,19@0,daytime_19);
#daytime_bat.insert(18@0, daytime_18).insert(19@0, daytime_19);
#
	setColumn(daytime_bat,"daytime");
#print(daytime_bat.setColumn("daytime"),
	bh_a := multiplex.script("hours",daytime_bat);
	setColumn(bh_a,"hours");
#      [hours](daytime_bat).setColumn("hours"),
	dh_a := multiplex.script("minutes",daytime_bat);
	setColumn(dh_a,"minutes");
#      [minutes](daytime_bat).setColumn("minutes"),
	fh_a := multiplex.script("seconds",daytime_bat);
	setColumn(fh_a,"seconds");
#      [seconds](daytime_bat).setColumn("seconds"),
	hh_a := multiplex.script("milliseconds",daytime_bat);
	setColumn(hh_a,"milliseconds");
print("daytime_bat,bh_a,dh_a,fh_a,hh_a");
	jh_a := print(daytime_bat,bh_a,dh_a,fh_a,hh_a);
#      [milliseconds](daytime_bat).setColumn("milliseconds"));
#
#
#
##line 719 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
## create timestamps in bulk from the above bats with dates, daytimes and tzones
	kh_a := multiplex.script("timestamp",date_bat,daytime_bat,tzone_bat);
	timestamp_bat:=kh_a; bat.setWriteMode(kh_a);
#var timestamp_bat := [timestamp](date_bat,daytime_bat,tzone_bat).access(BAT_WRITE);
## KILL
## var timestamp_now := timestamp(epoch());
## timestamp_bat.insert(14@0, timestamp_now);
#
## test the timestamp operations
	setColumn(timestamp_bat,"timestamp");
#print(timestamp_bat.setColumn("timestamp"),
	mh_a := multiplex.script("date",timestamp_bat,tzone_bat);
	setColumn(mh_a,"date");
#      [date](timestamp_bat,tzone_bat).setColumn("date"),
	oh_a := multiplex.script("daytime",timestamp_bat,tzone_bat);
	setColumn(oh_a,"daytime");
	print("print(timestamp_bat,mh_a,oh_a)");
	print(timestamp_bat,mh_a,oh_a);
#      [daytime](timestamp_bat,tzone_bat).setColumn("daytime"));
#
	rh_a := setColumn(timestamp_bat,"timestamp");
#print(timestamp_bat.setColumn("timestamp"),
	timezones:= bbp.bind("timezones");
	print("print(timezones)");
	print(timezones);
	sh_a:tzone := algebra.find(timezones,"Wake Island");
	th_a := multiplex.script("date",timestamp_bat,sh_a);
	uh_a := setColumn(th_a,"Wake Island");
#      [date](timestamp_bat,algebra.find(timezones,"Wake Island")).setColumn("Wake Island"),
	vh_a:tzone := algebra.find(timezones,"Wake Island");
	wh_a := multiplex.script("daytime",timestamp_bat,vh_a);
#      [daytime](timestamp_bat,algebra.find(timezones,"Wake Island")),
	xh_a:tzone := algebra.find(timezones,"American Samoa");
	yh_a := multiplex.script("date",timestamp_bat,xh_a);
	ai_a := setColumn(yh_a,"American Samoa");
#      [date](timestamp_bat,algebra.find(timezones,"American Samoa")).setColumn("American Samoa"),
	bi_a:tzone := algebra.find(timezones,"American Samoa");
	ci_a := multiplex.script("daytime",timestamp_bat,bi_a);
	print("print(timestamp_bat,th_a,wh_a,yh_a,ci_a)");
	di_a := print(timestamp_bat,th_a,wh_a,yh_a,ci_a);
#      [daytime](timestamp_bat,algebra.find(timezones,"American Samoa")));
#
	ei_a := *(60,1000);
	fi_a := *(60,ei_a);
	gi_a := *(23,fi_a);
	hi_a := lng(gi_a);
	timestamp_plus:= multiplex.script("add",timestamp_bat,hi_a);
#var timestamp_plus := [add](timestamp_bat, lng(23*60*60*1000));
	ii_a := *(-60,1000);
	ji_a := lng(ii_a);
	timestamp_minus:= multiplex.script("add",timestamp_bat,ji_a);
#var timestamp_minus := [add](timestamp_bat, lng(-60*1000));
#
	ki_a := setColumn(timestamp_bat,"timestamp");
#print(timestamp_bat.setColumn("timestamp"),
	li_a := setColumn(timestamp_plus,"plus23");
#	timestamp_plus.setColumn("plus23"),
	mi_a := setColumn(timestamp_minus,"min1");
#	timestamp_minus.setColumn("min1"),
	ni_a := multiplex.script("diff",timestamp_plus,timestamp_minus);
	oi_a := *(60,1000);
	pi_a := *(60,oi_a);
	qi_a := lng(pi_a);
	ri_a := /(ni_a,qi_a);
	si_a := setColumn(ri_a,"diff");
	print("print(timestamp_bat,timestamp_plus,timestamp_minus,ri_a)");
	ti_a := print(timestamp_bat,timestamp_plus,timestamp_minus,ri_a);
#	[/]([diff](timestamp_plus, timestamp_minus),lng(60*60*1000)).setColumn("diff"));
#
	ui_a:tzone := algebra.find(timezones,"West/Europe");
	timestamp_eur:= multiplex.script("timestamp",date_seq,daytime_00,ui_a);
#var timestamp_eur := [timestamp](date_seq, daytime_00, algebra.find(timezones,"West/Europe"));
	vi_a:tzone := algebra.find(timezones,"Andes/Brazil");
	timestamp_bra:= multiplex.script("timestamp",date_seq,daytime_00,vi_a);
#var timestamp_bra := [timestamp](date_seq, daytime_00, algebra.find(timezones,"Andes/Brazil"));
#
	wi_a := setColumn(date_seq,"date");
#print(date_seq.setColumn("date"), 
	xi_a := multiplex.script("dayofweek",date_seq);
	yi_a := multiplex.script("dayname",xi_a);
	aj_a := setColumn(yi_a,"day");
#	[dayname]([dayofweek](date_seq)).setColumn("day"),
	bj_a := setColumn(timestamp_eur,"West/Europe");
#	timestamp_eur.setColumn("West/Europe"),
	cj_a:tzone := algebra.find(timezones,"West/Europe");
	dj_a := multiplex.script("dst",timestamp_eur,cj_a);
	ej_a := setColumn(dj_a,"dst");
#	[dst](timestamp_eur,algebra.find(timezones,"West/Europe")).setColumn("dst"),
	fj_a := setColumn(timestamp_bra,"Andes/Brazil");
#	timestamp_bra.setColumn("Andes/Brazil"),
	gj_a:tzone := algebra.find(timezones,"Andes/Brazil");
	hj_a := multiplex.script("dst",timestamp_bra,gj_a);
	ij_a := setColumn(hj_a,"dst");
	print("print(date_seq,yi_a,timestamp_eur,dj_a,timestamp_bra,hj_a)");
	jj_a := print(date_seq,yi_a,timestamp_eur,dj_a,timestamp_bra,hj_a);
#	[dst](timestamp_bra,algebra.find(timezones,"Andes/Brazil")).setColumn("dst"));
#
#quit;
#
#
##line 756 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
#
