stdout of test 'tst171` in directory 'src/mal` itself:


# 07:59:13 >  
# 07:59:13 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst171.mal </dev/null
# 07:59:13 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## Testing for nil values.
#    tv:= true;
#    print(tv);
#    fv:= false;
#    print(fv);
#    print("strings");
#    z := str("nil");
#    x := calc.isnil(z);
#    print(x);
#    y := calc.isnil("something");
#    print(y);
#    a := str(nil);
#    x := calc.isnil(a);
#    print(x);
#
#    print("integers");
#    i := int("nil");
#    x := calc.isnil(i);
#    print(x);
#    y := calc.isnil(0);
#    print(y);
#
#    print("floats");
#    f := flt(nil);
#    x := calc.isnil(f);
#    print(x);
#    x := calc.isnil(3.14);
#    print(x);
#
#    print("nil");
#    g:= nil;
#    x:= calc.isnil(g);
#    print(x);
#    x:= calc.isnotnil(g);
#    print(x);
#
function user.main():int;	# 0  (main:int)
    tv := true;	# 1  (tv:bit)<-($2:bit)
    io.print(tv);	# 2 IOprint_val ($3:int)<-(tv:bit)
    fv := false;	# 3  (fv:bit)<-($5:bit)
    io.print(fv);	# 4 IOprint_val ($6:int)<-(fv:bit)
    io.print("strings");	# 5 IOprint_val ($7:int)<-($8:str)
    z := calc.str("nil");	# 6 CALCstr2str (z:str)<-($10:str)
    x := calc.isnil(z);	# 7 CALCisnil_str (x:bit)<-(z:str)
    io.print(x);	# 8 IOprint_val ($12:int)<-(x:bit)
    y := calc.isnil("something");	# 9 CALCisnil_str (y:bit)<-($14:str)
    io.print(y);	# 10 IOprint_val ($15:int)<-(y:bit)
    a := calc.str(nil);	# 11 CALCnil2str (a:str)<-($17:void)
    x := calc.isnil(a);	# 12 CALCisnil_str (x:bit)<-(a:str)
    io.print(x);	# 13 IOprint_val ($18:int)<-(x:bit)
    io.print("integers");	# 14 IOprint_val ($19:int)<-($20:str)
    i := calc.int("nil");	# 15 CALCstr2int (i:int)<-($10:str)
    x := calc.isnil(i);	# 16 CALCisnil_int (x:bit)<-(i:int)
    io.print(x);	# 17 IOprint_val ($22:int)<-(x:bit)
    y := calc.isnil(0);	# 18 CALCisnil_int (y:bit)<-($23:int)
    io.print(y);	# 19 IOprint_val ($24:int)<-(y:bit)
    io.print("floats");	# 20 IOprint_val ($25:int)<-($26:str)
    f := calc.flt(nil);	# 21 CALCnil2flt (f:flt)<-($17:void)
    x := calc.isnil(f);	# 22 CALCisnil_flt (x:bit)<-(f:flt)
    io.print(x);	# 23 IOprint_val ($28:int)<-(x:bit)
    x := calc.isnil(3.14);	# 24 CALCisnil_flt (x:bit)<-($29:flt)
    io.print(x);	# 25 IOprint_val ($30:int)<-(x:bit)
    io.print("nil");	# 26 IOprint_val ($31:int)<-($10:str)
    g := nil;	# 27  (g:void)<-($17:void)
    x := calc.isnil(g);	# 28 CALCisnil_void (x:bit)<-(g:void)
    io.print(x);	# 29 IOprint_val ($33:int)<-(x:bit)
    x := calc.isnotnil(g);	# 30 CALCisnotnil_void (x:bit)<-(g:void)
    io.print(x);	# 31 IOprint_val ($34:int)<-(x:bit)
end main;	# 32  
[ true ]
[ false ]
[ "strings" ]
[ false ]
[ false ]
[ true ]
[ "integers" ]
[ true ]
[ false ]
[ "floats" ]
[ true ]
[ false ]
[ "nil" ]
[ true ]
[ false ]

# 07:59:14 >  
# 07:59:14 >  Done.
# 07:59:14 >  

