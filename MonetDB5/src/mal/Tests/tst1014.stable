# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB
# dbname:demo
## now within a function to assure that reference counting
## takes care of releasing the variables.
#
#function test();
#print("test");
#bbp.open();
#x:= bbp.getObjects();
#print(x);
#print("test");
#b:= new(:int,:int);
#insert(b,1,2);
#bbp.deposit("myfirstbat",b);
#c:= bbp.take("myfirstbat");
#print(c);
#bbp.close();
## at the end of the call, the BBP should have discarded
## the temporary bats of the user
#end test;
function Admin.test():void;	# 0  (test:void)
    io.print("test");	# 1 CMDprint_val ($1:int)<-($2:str)
    bbp.open();	# 2 CMDbbpopen ($3:void)
    x := bbp.getObjects();	# 3 CMDbbpGetObjects (x:bat[:int,:str])
    io.print(x);	# 4 CMDprint_val ($5:int)<-(x:bat[:int,:str])
    io.print("test");	# 5 CMDprint_val ($6:int)<-($2:str)
    b := bbp.new(int:,int:);	# 6 CMDBATnew (b:bat[:int,:int])<-($8:int)($9:int)
    bat.insert(b,1,2);	# 7 BKCinsert_bun ($10:void)<-(b:bat[:int,:int])($11:int)($12:int)
    bbp.deposit("myfirstbat",b);	# 8 CMDbbpdeposit ($13:void)<-($14:str)(b:bat[:int,:int])
    c := bbp.take("myfirstbat");	# 9 CMDbbptake (c:bat[:any,:any])<-($14:str)
    io.print(c);	# 10 CMDprint_val ($16:int)<-(c:bat[:any,:any])
    bbp.close();	# 11 CMDbbpclose ($17:void)
end test;	# 12  
#
#test();
#print("continue");
#bbp.open();
#v:= bbp.take("myfirstbat");
#print(v);
#bbp.close();
#
function Admin.main():int;	# 0  (main:int)
    Admin.test();	# 1  ($1:void)
    io.print("continue");	# 2 CMDprint_val ($2:int)<-($3:str)
    bbp.open();	# 3 CMDbbpopen ($4:void)
    v := bbp.take("myfirstbat");	# 4 CMDbbptake (v:bat[:any,:any])<-($6:str)
    io.print(v);	# 5 CMDprint_val ($7:int)<-(v:bat[:any,:any])
    bbp.close();	# 6 CMDbbpclose ($8:void)
end main;	# 7  
[ "test" ]
#-------------------------#
# bbp	objects		  # name
# int	str		  # type
#-------------------------#
[ "test" ]
bbp.take not yet fully implemented
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ "continue" ]
bbp.take not yet fully implemented
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
>