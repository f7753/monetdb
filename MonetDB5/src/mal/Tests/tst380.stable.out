stdout of test 'tst380` in directory 'src/mal` itself:


# 11:28:52 >  
# 11:28:52 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=43122 --set sql_port=57578 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst380.mal </dev/null
# 11:28:52 >  

# Monet Database Server V4.5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##inspection of the runtime setting
## type error when the type variable numbers are ignored
#	b:= bbp.nme();
#	z:= join(br,b);
#	setColumn(z,title);
#	return z;
#end get;
function user.get(br:bat[:any$1,:any$2],nme:str,title:str):bat[:any$3,:any$4];	# 0  dynamic (get:bat[:any$3,:any$4])<-(br:bat[:any$1,:any$2])(nme:str)(title:str)
    b:bat[:int,:str]  := bbp.nme();	# 1  (b:bat[:int,:str])
    z := algebra.join(br,b);	# 2 ALGjoin (z:bat[:any,:str])<-(br:bat[:any$1,:any$2])(b:bat[:int,:str])
    bat.setColumn(z,title);	# 3 BKCsetColumn ($6:bat[:any,:str])<-(z:bat[:any,:str])(title:str)
    return z;	# 4  (z:bat[:any,:str])
end get;	# 5  
## Note the type of the variables will be fixed during the first call
#function dir(b:bat[:int,:str]):void;
#	atm:= inspect.getAtomNames();
#	brev:= reverse(b);
#	bm := mirror(brev);
#	bHead:= get(brev,"getHeadType","htype");
#	bTail:= get(brev,"getTailType","ttype");
#	bCount:= getLng(brev,"getCount","count");
#	bHeat:= getInt(brev,"getHeat","heat");
#	bDirty:= get(brev,"getDirty","dirty");
#	bStatus:= get(brev,"getStatus","status");
#	bKind:= get(brev,"getKind","kind");
#	bRef:= getInt(brev,"getRefCount","refCount");
#	table(brev, bm, bHead,bTail,bCount, bHeat,bDirty,bStatus,bKind,bRef);
#end dir;
function user.dir(b:bat[:int,:str]):void;	# 0  (dir:void)<-(b:bat[:int,:str])
    atm := inspect.getAtomNames();	# 1 INSPECTatom_names (atm:bat[:int,:str])
    brev := bat.reverse(b);	# 2 BKCreverse (brev:bat[:str,:int])<-(b:bat[:int,:str])
    bm := bat.mirror(brev);	# 3 BKCmirror (bm:bat[:str,:str])<-(brev:bat[:str,:int])
    b1:bat[:int,:str]  := bbp.getHeadType();	# 4 CMDbbpHeadType (b1:bat[:int,:str])
    bHead := algebra.join(brev,b1);	# 5 ALGjoin (bHead:bat[:str,:str])<-(brev:bat[:str,:int])(b1:bat[:int,:str])
    bat.setColumn(bHead,"htype");	# 6 BKCsetColumn ($7:bat[:str,:str])<-(bHead:bat[:str,:str])($8:str)
    b2:bat[:int,:str]  := bbp.getTailType();	# 7 CMDbbpTailType (b2:bat[:int,:str])
    bTail := algebra.join(brev,b2);	# 8 ALGjoin (bTail:bat[:str,:str])<-(brev:bat[:str,:int])(b2:bat[:int,:str])
    bat.setColumn(bTail,"ttype");	# 9 BKCsetColumn ($11:bat[:str,:str])<-(bTail:bat[:str,:str])($12:str)
    b8:bat[:int,:lng]  := bbp.getCount();	# 10 CMDbbpCount (b8:bat[:int,:lng])
    bCount := algebra.join(brev,b8);	# 11 ALGjoin (bCount:bat[:str,:lng])<-(brev:bat[:str,:int])(b8:bat[:int,:lng])
    bat.setColumn(bCount,"count");	# 12 BKCsetColumn ($15:bat[:str,:lng])<-(bCount:bat[:str,:lng])($16:str)
    b7:bat[:int,:int]  := bbp.getHeat();	# 13 CMDbbpHeat (b7:bat[:int,:int])
    bHeat := algebra.join(brev,b7);	# 14 ALGjoin (bHeat:bat[:str,:int])<-(brev:bat[:str,:int])(b7:bat[:int,:int])
    bat.setColumn(bHeat,"heat");	# 15 BKCsetColumn ($19:bat[:str,:int])<-(bHeat:bat[:str,:int])($20:str)
    b3:bat[:int,:str]  := bbp.getDirty();	# 16 CMDbbpDirty (b3:bat[:int,:str])
    bDirty := algebra.join(brev,b3);	# 17 ALGjoin (bDirty:bat[:str,:str])<-(brev:bat[:str,:int])(b3:bat[:int,:str])
    bat.setColumn(bDirty,"dirty");	# 18 BKCsetColumn ($23:bat[:str,:str])<-(bDirty:bat[:str,:str])($24:str)
    b4:bat[:int,:str]  := bbp.getStatus();	# 19 CMDbbpStatus (b4:bat[:int,:str])
    bStatus := algebra.join(brev,b4);	# 20 ALGjoin (bStatus:bat[:str,:str])<-(brev:bat[:str,:int])(b4:bat[:int,:str])
    bat.setColumn(bStatus,"status");	# 21 BKCsetColumn ($27:bat[:str,:str])<-(bStatus:bat[:str,:str])($28:str)
    b5:bat[:int,:str]  := bbp.getKind();	# 22 CMDbbpKind (b5:bat[:int,:str])
    bKind := algebra.join(brev,b5);	# 23 ALGjoin (bKind:bat[:str,:str])<-(brev:bat[:str,:int])(b5:bat[:int,:str])
    bat.setColumn(bKind,"kind");	# 24 BKCsetColumn ($31:bat[:str,:str])<-(bKind:bat[:str,:str])($32:str)
    b6:bat[:int,:int]  := bbp.getRefCount();	# 25 CMDbbpRefCount (b6:bat[:int,:int])
    bRef := algebra.join(brev,b6);	# 26 ALGjoin (bRef:bat[:str,:int])<-(brev:bat[:str,:int])(b6:bat[:int,:int])
    bat.setColumn(bRef,"refCount");	# 27 BKCsetColumn ($35:bat[:str,:int])<-(bRef:bat[:str,:int])($36:str)
    io.table(brev,bm,bHead,bTail,bCount,bHeat,bDirty,bStatus,bKind,bRef);	# 28 IOttable ($37:int)<-(brev:bat[:str,:int])(bm:bat[:str,:str])(bHead:bat[:str,:str])(bTail:bat[:str,:str])(bCount:bat[:str,:lng])(bHeat:bat[:str,:int])(bDirty:bat[:str,:str])(bStatus:bat[:str,:str])(bKind:bat[:str,:str])(bRef:bat[:str,:int])
end dir;	# 29  
#
#function dir(s:str):void;
#	t:= bbp.getNames();
#	tn:= like(t,s);
#	print(tn);
#	dir(tn);
#end dir;
function user.dir(s:str):void;	# 0  (dir:void)<-(s:str)
    t := bbp.getNames();	# 1 CMDbbpNames (t:bat[:int,:str])
    tn := algebra.like(t,s);	# 2 ALGlike (tn:bat[:int,:str])<-(t:bat[:int,:str])(s:str)
    io.print(tn);	# 3 IOprint_val ($4:int)<-(tn:bat[:int,:str])
    user.dir(tn);	# 4  ($5:void)<-(tn:bat[:int,:str])
end dir;	# 5  
#b:=new(:int,:int);
#setName(b,"simplemind");
#
#z:= bbp.getNames();
#print("Get first directory");
#dir(z);
#
#print("Get second directory");
#dir("simple");
#
#
function user.main():int;	# 0  (main:int)
#inspection of the runtime setting 	# 1  ($2:str)
#it uses the dynamic type analysis scheme 	# 2  ($4:str)
# type error when the type variable numbers are ignored 	# 3  ($6:str)
#function get(br:bat[:any,:any],nme:str, title:str):bat; 	# 4  ($8:str)
# Note the type of the variables will be fixed during the first call 	# 5  ($10:str)
    b := bbp.new(:int,:int);	# 6 CMDBATnew (b:bat[:int,:int])<-($12:int)($12:int)
    bat.setName(b,"simplemind");	# 7 BKCsetName ($13:bat[:int,:int])<-(b:bat[:int,:int])($14:str)
    z := bbp.getNames();	# 8 CMDbbpNames (z:bat[:int,:str])
    io.print("Get first directory");	# 9 IOprint_val ($16:int)<-($17:str)
    user.dir(z);	# 10  ($18:void)<-(z:bat[:int,:str])
    io.print("Get second directory");	# 11 IOprint_val ($19:int)<-($20:str)
    user.dir("simple");	# 12  ($21:void)<-($22:str)
end main;	# 13  
[ "Get first directory" ]
#---------------------------------------------------------------------------------------------------------------------------------#
# bbp	tmp_8			htype	ttype		count	heat	dirty		status	kind		refCount		  # name
# int	str			str	str		lng	int	str		str	str		int		  # type
#-------------------------------------------------------------------------------------------------------------------------#
[ 1,	  "monet_environment",	  "str",  "str",	  32,	  151,	  "dirty",	  "load", "transient",	  1	  ]
[ 2,	  "monet_unicode_case",	  "int",  "int",	  732,	  152,	  "dirty",	  "load", "transient",	  1		  ]
[ 3,	  "timezones",		  "str",  "tzone",	  24,	  153,	  "dirty",	  "load", "transient",	  1		  ]
[ 4,	  "stat_id_inuse",	  "int",  "int",	  0,	  154,	  "dirty",	  "load", "persistent",	  1		  ]
[ 5,	  "stat_id_nme",	  "int",  "str",	  0,	  155,	  "dirty",	  "load", "persistent",	  1		  ]
[ 6,	  "stat_id_expire",	  "int",  "int",	  0,	  156,	  "dirty",	  "load", "persistent",	  1		  ]
[ 7,	  "stat_id_stamp",	  "int",  "int",	  0,	  157,	  "dirty",	  "load", "persistent",	  1		  ]
[ 8,	  "stat_id_count",	  "int",  "lng",	  0,	  158,	  "dirty",	  "load", "persistent",	  1		  ]
[ 9,	  "stat_id_size",	  "int",  "lng",	  0,	  159,	  "dirty",	  "load", "persistent",	  1		  ]
[ 10,	  "stat_id_min_lng",	  "int",  "lng",	  0,	  160,	  "dirty",	  "load", "persistent",	  1		  ]
[ 11,	  "stat_id_max_lng",	  "int",  "lng",	  0,	  161,	  "dirty",	  "load", "persistent",	  1		  ]
[ 12,	  "stat_id_histogram",	  "int",  "str",	  0,	  162,	  "dirty",	  "load", "persistent",	  1		  ]
[ 13,	  "simplemind",		  "int",  "int",	  0,	  163,	  "dirty",	  "load", "transient",	  0		  ]
[ "Get second directory" ]
#-------------------------#
# h	tmp_6		  # name
# int	str		  # type
#-------------------------#
[ 13,	  "simplemind"	  ]
#-----------------------------------------------------------------------------------------------------------------#
# tmp_6	tmp_25		htype	ttype	count	heat	dirty		status	kind		refCount		  # name
# int	str		str	str	lng	int	str		str	str		int		  # type
#-----------------------------------------------------------------------------------------------------------------#
[ 13,	  "simplemind",	  "int",  "int",  0,	  249,	  "dirty",	  "load", "transient",	  0		  ]

# 11:28:52 >  
# 11:28:52 >  Done.
# 11:28:52 >  

