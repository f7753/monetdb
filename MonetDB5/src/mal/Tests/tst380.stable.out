stdout of test 'tst380` in directory 'src/mal` itself:


# 11:28:52 >  
# 11:28:52 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=43122 --set sql_port=57578 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst380.mal </dev/null
# 11:28:52 >  

# Monet Database Server V4.5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##inspection of the runtime setting
## type error when the type variable numbers are ignored
#	b:= bbp.nme();
#	z:= join(br,b);
#	setColumn(z,title);
#	return z;
#end get;
function user.get(br:bat[:any$1,:any$2],nme:str,title:str):bat[:any$3,:any$4];	# 0  dynamic (get:bat[:any$3,:any$4])<-(br:bat[:any$1,:any$2])(nme:str)(title:str)
    b := bbp.nme();	# 1  unknown (b:bat[:int,:str])
    z := algebra.join(br,b);	# 2 ALGjoin (z:bat[:any,:str])<-(br:bat[:any$1,:any$2])(b:bat[:int,:str])
    bat.setColumn(z,title);	# 3 BKCsetColumn ($6:bat[:any,:str])<-(z:bat[:any,:str])(title:str)
    return z;	# 4  (z:bat[:any,:str])
end get;	# 5  
## Note the type of the variables will be fixed during the first call
#	b:= bbp.nme();
#	z:= join(br,b);
#	setColumn(z,title);
#	return z;
#end getInt;
function user.getInt(br:bat[:any$1,:any$2],nme:str,title:str):bat[:any$3,:any$4];	# 0  dynamic (getInt:bat[:any$3,:any$4])<-(br:bat[:any$1,:any$2])(nme:str)(title:str)
    b := bbp.nme();	# 1  unknown (b:bat[:int,:int])
    z := algebra.join(br,b);	# 2 ALGjoin (z:bat[:any,:int])<-(br:bat[:any$1,:any$2])(b:bat[:int,:int])
    bat.setColumn(z,title);	# 3 BKCsetColumn ($6:bat[:any,:int])<-(z:bat[:any,:int])(title:str)
    return z;	# 4  (z:bat[:any,:int])
end getInt;	# 5  
#function getLng(br:bat[:any$1,:any$2],nme:str, title:str):bat[:any$3,:any$4];
#	b:= bbp.nme();
#	z:= join(br,b);
#	setColumn(z,title);
#	return z;
#end getLng;
function user.getLng(br:bat[:any$1,:any$2],nme:str,title:str):bat[:any$3,:any$4];	# 0  dynamic (getLng:bat[:any$3,:any$4])<-(br:bat[:any$1,:any$2])(nme:str)(title:str)
    b := bbp.nme();	# 1  unknown (b:bat[:int,:lng])
    z := algebra.join(br,b);	# 2 ALGjoin (z:bat[:any,:lng])<-(br:bat[:any$1,:any$2])(b:bat[:int,:lng])
    bat.setColumn(z,title);	# 3 BKCsetColumn ($6:bat[:any,:lng])<-(z:bat[:any,:lng])(title:str)
    return z;	# 4  (z:bat[:any,:lng])
end getLng;	# 5  
#function dir(b:bat[:int,:str]):void;
#	atm:= inspect.getAtomNames();
#	brev:= reverse(b);
#	bm := mirror(brev);
#	bHead:= get(brev,"getHeadType","htype");
#	bTail:= get(brev,"getTailType","ttype");
#	bCount:= getLng(brev,"getCount","count");
#	bHeat:= getInt(brev,"getHeat","heat");
#	bDirty:= get(brev,"getDirty","dirty");
#	bStatus:= get(brev,"getStatus","status");
#	bKind:= get(brev,"getKind","kind");
#	bRef:= getInt(brev,"getRefCount","refCount");
#	table(brev, bm, bHead,bTail,bCount, bHeat,bDirty,bStatus,bKind,bRef);
#end dir;
function user.dir(b:bat[:int,:str]):void;	# 0  (dir:void)<-(b:bat[:int,:str])
    atm := inspect.getAtomNames();	# 1 INSPECTatom_names (atm:bat[:int,:str])
    brev := bat.reverse(b);	# 2 BKCreverse (brev:bat[:str,:int])<-(b:bat[:int,:str])
    bm := bat.mirror(brev);	# 3 BKCmirror (bm:bat[:str,:str])<-(brev:bat[:str,:int])
    bHead := user.get(brev,"getHeadType","htype");	# 4  (bHead:bat[:any,:any])<-(brev:bat[:str,:int])($6:str)($7:str)
    bTail := user.get(brev,"getTailType","ttype");	# 5  (bTail:bat[:any,:any])<-(brev:bat[:str,:int])($9:str)($10:str)
    bCount := user.getLng(brev,"getCount","count");	# 6  (bCount:bat[:any,:any])<-(brev:bat[:str,:int])($12:str)($13:str)
    bHeat := user.getInt(brev,"getHeat","heat");	# 7  (bHeat:bat[:any,:any])<-(brev:bat[:str,:int])($15:str)($16:str)
    bDirty := user.get(brev,"getDirty","dirty");	# 8  (bDirty:bat[:any,:any])<-(brev:bat[:str,:int])($18:str)($19:str)
    bStatus := user.get(brev,"getStatus","status");	# 9  (bStatus:bat[:any,:any])<-(brev:bat[:str,:int])($21:str)($22:str)
    bKind := user.get(brev,"getKind","kind");	# 10  (bKind:bat[:any,:any])<-(brev:bat[:str,:int])($24:str)($25:str)
    bRef := user.getInt(brev,"getRefCount","refCount");	# 11  (bRef:bat[:any,:any])<-(brev:bat[:str,:int])($27:str)($28:str)
    io.table(brev,bm,bHead,bTail,bCount,bHeat,bDirty,bStatus,bKind,bRef);	# 12 IOttable ($29:int)<-(brev:bat[:str,:int])(bm:bat[:str,:str])(bHead:bat[:any,:any])(bTail:bat[:any,:any])(bCount:bat[:any,:any])(bHeat:bat[:any,:any])(bDirty:bat[:any,:any])(bStatus:bat[:any,:any])(bKind:bat[:any,:any])(bRef:bat[:any,:any])
end dir;	# 13  
#
#function dir(s:str):void;
#	t:= bbp.getNames();
#	tn:= like(t,s);
#	print(tn);
#	dir(tn);
#end dir;
function user.dir(s:str):void;	# 0  (dir:void)<-(s:str)
    t := bbp.getNames();	# 1 CMDbbpNames (t:bat[:int,:str])
    tn := algebra.like(t,s);	# 2 ALGlike (tn:bat[:int,:str])<-(t:bat[:int,:str])(s:str)
    io.print(tn);	# 3 IOprint_val ($4:int)<-(tn:bat[:int,:str])
    user.dir(tn);	# 4  ($5:void)<-(tn:bat[:int,:str])
end dir;	# 5  
#b:=new(:int,:int);
#setName(b,"simplemind");
#
#z:= bbp.getNames();
#print("Get first directory");
#dir(z);
#
#print("Get second directory");
#dir("simple");
#
#
function user.main():int;	# 0  (main:int)
#inspection of the runtime setting 	# 1  ($2:str)
#it uses the dynamic type analysis scheme 	# 2  ($4:str)
# type error when the type variable numbers are ignored 	# 3  ($6:str)
#function get(br:bat[:any,:any],nme:str, title:str):bat; 	# 4  ($8:str)
# Note the type of the variables will be fixed during the first call 	# 5  ($10:str)
# Thus, a better schould would be a term rewriter call, which 	# 6  ($12:str)
# replaces an instruction 	# 7  ($14:str)
#rule get(Y:bat,N:str) 	# 8  ($16:str)
    b := bbp.new(:int,:int);	# 9 CMDBATnew (b:bat[:int,:int])<-($18:int)($19:int)
    bat.setName(b,"simplemind");	# 10 BKCsetName ($20:bat[:int,:int])<-(b:bat[:int,:int])($21:str)
    z := bbp.getNames();	# 11 CMDbbpNames (z:bat[:int,:str])
    io.print("Get first directory");	# 12 IOprint_val ($23:int)<-($24:str)
    user.dir(z);	# 13  ($25:void)<-(z:bat[:int,:str])
    io.print("Get second directory");	# 14 IOprint_val ($26:int)<-($27:str)
    user.dir("simple");	# 15  ($28:void)<-($29:str)
end main;	# 16  
[ "Get first directory" ]
#---------------------------------------------------------------------------------------------------------------------------------#
# bbp	tmp_8			htype	ttype		count	heat	dirty		status	kind		refCount		  # name
# int	str			str	str		lng	int	str		str	str		int		  # type
#-------------------------------------------------------------------------------------------------------------------------#
[ 1,	  "monet_environment",	  "str",  "str",	  32,	  151,	  "dirty",	  "load", "transient",	  1	  ]
[ 2,	  "monet_unicode_case",	  "int",  "int",	  732,	  152,	  "dirty",	  "load", "transient",	  1		  ]
[ 3,	  "timezones",		  "str",  "tzone",	  24,	  153,	  "dirty",	  "load", "transient",	  1		  ]
[ 4,	  "stat_id_inuse",	  "int",  "int",	  0,	  154,	  "dirty",	  "load", "persistent",	  1		  ]
[ 5,	  "stat_id_nme",	  "int",  "str",	  0,	  155,	  "dirty",	  "load", "persistent",	  1		  ]
[ 6,	  "stat_id_expire",	  "int",  "int",	  0,	  156,	  "dirty",	  "load", "persistent",	  1		  ]
[ 7,	  "stat_id_stamp",	  "int",  "int",	  0,	  157,	  "dirty",	  "load", "persistent",	  1		  ]
[ 8,	  "stat_id_count",	  "int",  "lng",	  0,	  158,	  "dirty",	  "load", "persistent",	  1		  ]
[ 9,	  "stat_id_size",	  "int",  "lng",	  0,	  159,	  "dirty",	  "load", "persistent",	  1		  ]
[ 10,	  "stat_id_min_lng",	  "int",  "lng",	  0,	  160,	  "dirty",	  "load", "persistent",	  1		  ]
[ 11,	  "stat_id_max_lng",	  "int",  "lng",	  0,	  161,	  "dirty",	  "load", "persistent",	  1		  ]
[ 12,	  "stat_id_histogram",	  "int",  "str",	  0,	  162,	  "dirty",	  "load", "persistent",	  1		  ]
[ 13,	  "simplemind",		  "int",  "int",	  0,	  163,	  "dirty",	  "load", "transient",	  0		  ]
[ "Get second directory" ]
#-------------------------#
# h	tmp_6		  # name
# int	str		  # type
#-------------------------#
[ 13,	  "simplemind"	  ]
#-----------------------------------------------------------------------------------------------------------------#
# tmp_6	tmp_25		htype	ttype	count	heat	dirty		status	kind		refCount		  # name
# int	str		str	str	lng	int	str		str	str		int		  # type
#---------------------------------------------------------------------------------------------------------#
[ 13,	  "simplemind",	  "int",  "int",  0,	  266,	  "dirty",	  "load", "transient",	  0	  ]

# 11:28:52 >  
# 11:28:52 >  Done.
# 11:28:52 >  

