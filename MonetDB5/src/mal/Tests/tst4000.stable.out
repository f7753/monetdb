stdout of test 'tst4000` in directory 'src/mal` itself:


# 08:01:43 >  
# 08:01:43 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst4000.mal </dev/null
# 08:01:43 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## The 4000 series deals with strategic optimizer constructs
## common subexpression evaluation
#optimizer.debugOptimizers();
#optimizer.CXoptimizer();
#optimizer.ARoptimizer();
#optimizer.DCoptimizer();
#b:= new(:int,:int);
#c:= new(:int,:int);       # identical until insert takes place
#d:= select(b,0,100);
#e:= select(b,0,100);    # mapped onto one instruction
#k1:= 24;
#k2:= 27;
#l:= k1+k2;
#l2:= k1+k2;             # mapped to l
#l3:= l2+k1;             # replace the alias
#
#
Found assignment barrier for 
    d := algebra.select(b,0,100);	# 6 ALGselect (d:bat[:int,:int])<-(b:bat[:int,:int])($12:int)($13:int)
    b := bbp.new(:int,:int);	# 4 CMDBATnew (b:bat[:int,:int])<-($6:int)($7:int)
Found a common expression 6 <-> 7
    d := algebra.select(b,0,100);	# 6 ALGselect (d:bat[:int,:int])<-(b:bat[:int,:int])($12:int)($13:int)
    e := algebra.select(b,0,100);	# 7 ALGselect (e:bat[:int,:int])<-(b:bat[:int,:int])($12:int)($13:int)
Found assignment barrier for 
    l := calc.+(k1,k2);	# 9 CALCbinaryADDintint (l:int)<-(k1:int)(k2:int)
    k2 := 27;	# 8  (k2:int)<-($18:int)
Found a common expression 9 <-> 10
    l := calc.+(k1,k2);	# 9 CALCbinaryADDintint (l:int)<-(k1:int)(k2:int)
    l2 := calc.+(k1,k2);	# 10 CALCbinaryADDintint (l2:int)<-(k1:int)(k2:int)
Found assignment barrier for 
    l3 := calc.+(l,k1);	# 10 CALCbinaryADDintint (l3:int)<-(l:int)(k1:int)
    l := calc.+(k1,k2);	# 9 CALCbinaryADDintint (l:int)<-(k1:int)(k2:int)
function Admin.main():int;	# 0  (main:int)
end main;	# 1  

# 08:01:43 >  
# 08:01:43 >  Done.
# 08:01:43 >  

