stdout of test 'tst610` in directory 'src/mal` itself:


# 08:01:26 >  
# 08:01:26 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst610.mal </dev/null
# 08:01:26 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##this test is used to monitor reference count setting
##create a persistent bat and destroy it in the next session
#function refs():void;
#    g:=bbp.getNames();
#    gr:=bbp.getRefCount();
#    gl:=bbp.getLRefCount();
#    print(g,gr,gl);
#end refs;
function Admin.refs():void;	# 0  (refs:void)
    g := bbp.getNames();	# 1 CMDbbpNames (g:bat[:int,:str])
    gr := bbp.getRefCount();	# 2 CMDbbpRefCount (gr:bat[:int,:int])
    gl := bbp.getLRefCount();	# 3 CMDbbpLRefCount (gl:bat[:int,:int])
    io.print(g,gr,gl);	# 4 IOtable ($4:int)<-(g:bat[:int,:str])(gr:bat[:int,:int])(gl:bat[:int,:int])
end refs;	# 5  
#
#b:= new(:int,:int);
##refs();
#insert(b,23,32);
##refs();
#setName(b,"tasks");
##refs();
#setPersistent(b);
##refs();
## it is committed 
#print("open box");
#bbp.open();
#refs();
#t:= bbp.bind("tasks");
#print(t);
#bbp.release(t);
#refs();
#print(t);
#catch MALexception;
#print("BAT was released");
#exit MALexception;
## the bat is still visible, because the destroy only
## marks it for deletion at the end of session or
## when the reference counters drop to zero
#t:= bind("tasks");
#refs();
## to really remove, we get rid of the current
## references as well
#bbp.destroy(t,true);
#refs();
#print(t);
#catch MALexception;
#print("BAT was destroyed");
#exit MALexception;
#z:=bind("tasks");
#print(z);
##it is not in the box anymore either
#catch MALexception;
#print("BAT was removed from the box");
#exit MALexception;
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(:int,:int);	# 1 CMDBATnew (b:bat[:int,:int])<-($2:int)($3:int)
    bat.insert(b,23,32);	# 2 BKCinsert_bun ($4:void)<-(b:bat[:int,:int])($5:int)($6:int)
    bat.setName(b,"tasks");	# 3 BKCsetName ($7:void)<-(b:bat[:int,:int])($8:str)
    bat.setPersistent(b);	# 4 BKCsetPersistent ($9:bit)<-(b:bat[:int,:int])
    io.print("open box");	# 5 IOprint_val ($10:int)<-($11:str)
    bbp.open();	# 6 CMDbbpopen ($12:void)
    Admin.refs();	# 7  ($13:void)
    t := bbp.bind("tasks");	# 8 CMDbbpbind (t:bat[:any,:any])<-($8:str)
    io.print(t);	# 9 IOprint_val ($15:int)<-(t:bat[:any,:any])
    bbp.release(t);	# 10 CMDbbpreleaseBAT ($16:void)<-(t:bat[:any,:any])
    Admin.refs();	# 11  ($17:void)
    io.print(t);	# 12 IOprint_val ($18:int)<-(t:bat[:any,:any])
catch MALexception;	# 13  (MALexception:any) jump 15
    io.print("BAT was released");	# 14 IOprint_val ($20:int)<-($21:str)
exit MALexception;	# 15  (MALexception:any)
    t := bbp.bind("tasks");	# 16 CMDbbpbind (t:bat[:any,:any])<-($8:str)
    Admin.refs();	# 17  ($22:void)
    bbp.destroy(t,true);	# 18 CMDbbpdestroyBAT ($23:void)<-(t:bat[:any,:any])($24:bit)
    Admin.refs();	# 19  ($25:void)
    io.print(t);	# 20 IOprint_val ($26:int)<-(t:bat[:any,:any])
catch MALexception;	# 21  (MALexception:any) jump 23
    io.print("BAT was destroyed");	# 22 IOprint_val ($27:int)<-($28:str)
exit MALexception;	# 23  (MALexception:any)
    z := bbp.bind("tasks");	# 24 CMDbbpbind (z:bat[:any,:any])<-($8:str)
    io.print(z);	# 25 IOprint_val ($30:int)<-(z:bat[:any,:any])
catch MALexception;	# 26  (MALexception:any) jump 28
    io.print("BAT was removed from the box");	# 27 IOprint_val ($31:int)<-($32:str)
exit MALexception;	# 28  (MALexception:any)
end main;	# 29  
[ "open box" ]
#---------------------------------------------------------#
# bbp	name			refcnt	lrefcnt		  # name
# int	str			int	int		  # type
#---------------------------------------------------------#
[ 1,	  "monet_environment",	  1,	  0		  ]
[ 2,	  "monet_unicode_case",	  1,	  0		  ]
[ 3,	  "timezones",		  1,	  0		  ]
[ 4,	  "stat_id_inuse",	  2,	  1		  ]
[ 5,	  "stat_id_nme",	  2,	  1		  ]
[ 6,	  "stat_id_expire",	  2,	  1		  ]
[ 7,	  "stat_id_stamp",	  2,	  1		  ]
[ 8,	  "stat_id_count",	  2,	  1		  ]
[ 9,	  "stat_id_size",	  2,	  1		  ]
[ 10,	  "stat_id_min_lng",	  2,	  1		  ]
[ 11,	  "stat_id_max_lng",	  2,	  1		  ]
[ 12,	  "stat_id_histogram",	  2,	  1		  ]
[ 13,	  "tasks",		  0,	  2		  ]
#-----------------#
# h	tasks	  # name
# int	int	  # type
#-----------------#
[ 23,	  32	  ]
#---------------------------------------------------------#
# bbp	name			refcnt	lrefcnt		  # name
# int	str			int	int		  # type
#---------------------------------------------------------#
[ 1,	  "monet_environment",	  1,	  0		  ]
[ 2,	  "monet_unicode_case",	  1,	  0		  ]
[ 3,	  "timezones",		  1,	  0		  ]
[ 4,	  "stat_id_inuse",	  2,	  1		  ]
[ 5,	  "stat_id_nme",	  2,	  1		  ]
[ 6,	  "stat_id_expire",	  2,	  1		  ]
[ 7,	  "stat_id_stamp",	  2,	  1		  ]
[ 8,	  "stat_id_count",	  2,	  1		  ]
[ 9,	  "stat_id_size",	  2,	  1		  ]
[ 10,	  "stat_id_min_lng",	  2,	  1		  ]
[ 11,	  "stat_id_max_lng",	  2,	  1		  ]
[ 12,	  "stat_id_histogram",	  2,	  1		  ]
[ "nil" ]
[ "BAT was destroyed" ]
[ "BAT was removed from the box" ]

# 08:01:26 >  
# 08:01:26 >  Done.
# 08:01:26 >  

