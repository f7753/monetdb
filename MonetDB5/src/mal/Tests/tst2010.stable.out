stdout of test 'tst2010` in directory 'src/mal` itself:
# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
# Visit http://monetdb.cwi.nl for further information.
##The 2000 serie  is focussed on parallelism
##we start with a non-parallel version
#
#function clkticks(n:int):void;
#	printf("start clock \n");
#barrier	b:= n>0;
#	printf("tick\n");
#	alarm.sleep(2);
#	n:= n-1;
#	redo b:= n>0;
#exit	b;
#end clkticks;
function Admin.clkticks(n:int):void;	# 0  (clkticks:void)<-(n:int)
    io.printf("#start clock \n");	# 1 IOprint_str ($2:int)<-($3:str)
barrier b := calc.>(n,0);	# 2 CALCcompGTintint (b:bit)<-(n:int)($5:int) jump 7
    io.printf("#tick\n");	# 3 IOprint_str ($6:int)<-($7:str)
    alarm.sleep(2);	# 4 ALARMsleep ($8:void)<-($9:int)
    n := calc.-(n,1);	# 5 CALCbinarySUBintint (n:int)<-(n:int)($10:int)
    redo b := calc.>(n,0);	# 6 CALCcompGTintint (b:bit)<-(n:int)($5:int) jump 3
exit b;	# 7  (b:bit)
end clkticks;	# 8  
#
#thread 	hdl:=0;	# should not be assigned a value to get started
#	printf("#START THREAD \n");
#	clkticks(2);
#	printf("About to exit child\n");
#exit	hdl;
#	printf("Wait for child to exit too\n");
#	alarm.sleep(15);
#	printf("Child should have died\n");
#	#wait hdl;
#	#printf("child has finished\n");
#
function Admin.main():int;	# 0  (main:int)
thread hdl := 0;	# 1  (hdl:int)<-($2:int) jump 5
    io.printf("#START THREAD \n");	# 2 IOprint_str ($3:int)<-($4:str)
    Admin.clkticks(2);	# 3  ($5:void)<-($6:int)
    io.printf("#About to exit child\n");	# 4 IOprint_str ($7:int)<-($8:str)
exit hdl;	# 5  (hdl:int)
    io.printf("#Wait for child to exit too\n");	# 6 IOprint_str ($9:int)<-($10:str)
    alarm.sleep(15);	# 7 ALARMsleep ($11:void)<-($12:int)
    io.printf("#Child should have died\n");	# 8 IOprint_str ($13:int)<-($14:str)
end main;	# 9  
#START THREAD 
#start clock 
#tick
#Wait for child to exit too
#tick
#About to exit child
#Child should have died
>