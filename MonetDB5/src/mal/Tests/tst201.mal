# Mil compiler Version 1.0)
# Copyright (c) 1993-2001, CWI. All rights reserved.

# Predefined code segment
#use "mal/iterator";		CAUSES an ERROR!!
	_v0:= oid(20000000);
	_v1:= setoid(_v0);
#setoid(oid(20000000));
##test basic functionality of the BAT library.
##focussed on strings
##it includes insertions,deletions,selections, and joins.
#
	_v2:= new(:str,:int);
	b := _v2;
#b:= new(str,int);
	_v3:= insert(b,"the",1);
#b.insert("the",1);
	_v4:= insert(b,"quick",2);
#b.insert("quick",2);
	_v5:= insert(b,"brown",3);
#b.insert("brown",3);
	_v6:= insert(b,"fox",4);
#b.insert("fox",4);
	_v7:= insert(b,"jumps",5);
#b.insert("jumps",5);
	_v8:= insert(b,"over",6);
#b.insert("over",6);
	_v9:= insert(b,"lazy",7);
#b.insert("lazy",7);
	_v10:= insert(b,"dog",8);
#b.insert("dog",8);
	_v11:= str(nil);
	_v12:= insert(b,_v11,9);
#b.insert(str(nil),9);
	_v13:= insert(b,".",10);
#b.insert(".",10);
	_v14:= int(nil);
	_v15:= insert(b,"",_v14);
#b.insert("",int(nil));
	_v16:= str(nil);
	_v17:= int(nil);
	_v18:= insert(b,_v16,_v17);
#b.insert(str(nil),int(nil));
	_v19:= print(b);
#b.print;
#
#
## Testing simple retrievals
	_v20:= find(b,"the");
	_v21:= print(_v20);
#b.find("the").print;
	_v22:= find(b,"fox");
	_v23:= print(_v22);
#b.find("fox").print;
	_v24:= str(nil);
	_v25:= find(b,_v24);
	_v26:= print(_v25);
#b.find(str(nil)).print;
## This should cause an error
	_v27:= find(b,"cat");
	_v28:= print(_v27);
catch MALexception;
	print(MALexception);
exit  MALexception;
#b.find("cat").print;
#
## Can we delete them and re-insert them later on
	_v29:= delete(b,"fox",4);
#b.delete("fox",4);
	_v30:= delete(b,"the",1);
#b.delete("the",1);
	_v31:= delete(b,".",10);
#b.delete(".",10);
	_v32:= print(b);
#b.print;
#
	_v33:= insert(b,"fox",4);
#b.insert("fox",4);
	_v34:= insert(b,"the",1);
#b.insert("the",1);
	_v35:= insert(b,".",10);
#b.insert(".",10);
	_v36:= count(b);
	_v37:= print(_v36);
#b.count.print;
#
## Lets cut out a few sections
	_v38:= select(b,2,4);
	_v39:= print(_v38);
#b.select(2,4).print;
	_v40:= int(nil);
	_v41:= select(b,7,_v40);
	_v42:= print(_v41);
#b.select(7,int(nil)).print;
	_v43:= int(nil);
	_v44:= int(nil);
	_v45:= select(b,_v43,_v44);
	_v46:= print(_v45);
#b.select(int(nil),int(nil)).print;
#
## A 2-dimensional cut
	_v47:= fragment(b,"fox","quick",1,5);
	bns := _v47;
	_v48:= print(bns);
#bns:=b.fragment("fox","quick",1,5);bns.print;
	_v49:= str(nil);
	_v50:= fragment(b,"fox",_v49,1,5);
	_v51:= print(_v50);
#b.fragment("fox",str(nil),1,5).print;
	_v52:= str(nil);
	_v53:= int(nil);
	_v54:= int(nil);
	_v55:= fragment(b,"fox",_v52,_v53,_v54);
	_v56:= print(_v55);
#b.fragment("fox",str(nil),int(nil),int(nil)).print;
	_v57:= str(nil);
	_v58:= int(nil);
	_v59:= int(nil);
	_v60:= fragment(b,_v57,"f",_v58,_v59);
	_v61:= print(_v60);
#b.fragment(str(nil),"f",int(nil),int(nil)).print;
	_v62:= reverse(b);
	_v63:= int(nil);
	_v64:= int(nil);
	_v65:= str(nil);
	_v66:= fragment(_v62,_v63,_v64,_v65,"f");
	_v67:= print(_v66);
#b.reverse.fragment(int(nil),int(nil),str(nil),"f").print;
#
	_v68:= reverse(bns);
	_v69:= join(b,_v68);
	bnj := _v69;
#bnj:= b.join(bns.reverse);
	_v70:= print(bnj);
#bnj.print;
#
	_v71:= reverse(bnj);
	_v72:= semijoin(b,_v71);
	bnk := _v72;
#bnk:= b.semijoin(bnj.reverse);
	_v73:= print(bnk);
#bnk.print;
#
## testing the like command
	_v74:= reverse(b);
	_v75:= like(_v74,"ox");
	_v76:= print(_v75);
#b.reverse.like("ox").print;
	_v77:= reverse(b);
	_v78:= like(_v77,"fo");
	_v79:= print(_v78);
#b.reverse.like("fo").print;
	_v80:= reverse(b);
	_v81:= like(_v80,"fox");
	_v82:= print(_v81);
#b.reverse.like("fox").print;
	_v83:= reverse(b);
	_v84:= like(_v83," fox");
	_v85:= print(_v84);
#b.reverse.like(" fox").print;
#quit;
