# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
## the multiplex code blocks.
#
#b:= new(void,lng);
#i:= -1:lng;
#barrier v:= nextElement(i,0:lng,1000000:lng);
#	k:= rand();
#	l:= lng(k);
#	insert(b,nil,l);
#	redo v;
#exit v;
##setReadMode(b);
#mx:= max(b); 
##printf("max %d",mx);
#mi:= min(b); 
##printf(" min %d\n",mi);
#t0:= alarm.usec();
#c:= copy(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("copy %d",d0);
#cnt:= count(c);
#printf(" count %d\n",cnt);
#t0:= alarm.usec();
#z:= select(b,25:lng,25:lng);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("select none %d",d0);
#cnt:= count(z);
#printf(" count %d\n",cnt);
#t0:= alarm.usec();
#z2:= select(b,mi,mx);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("select all %d",d0);
#cnt:= count(z2);
#printf(" count %d\n",cnt);
#rng:= mx-mi;
#r2:= rng/20;
#r3:= mi+r2;
#t0:= alarm.usec();
#z3:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("select 0.05 %d",d0);
#cnt:= count(z3);
#printf(" count %d\n",cnt);
#r2:= rng/10;
#r3:= mi+r2;
#t0:= alarm.usec();
#z4:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("select 0.1 %d",d0);
#cnt:= count(z4);
#printf(" count %d\n",cnt);
#r2:= rng/5;
#r3:= mi+r2;
#t0:= alarm.usec();
#z5:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("select 0.2 %d",d0);
#cnt:= count(z5);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z6:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("select 0.4 %d",d0);
#cnt:= count(z6);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z7:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("select 0.6 %d",d0);
#cnt:= count(z7);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z8:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("select 0.8 %d",d0);
#cnt:= count(z8);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z9:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("select 1.0 %d",d0);
#cnt:= count(z9);
#printf(" count %d\n",cnt);
#t0:= alarm.usec();
#sr:= reverse(b);
#s:= sort(sr);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("tail sort %d",d0);
#cnt:= count(s);
#printf(" count %d\n",cnt);
#cnt:= count(z9);
#t0:= alarm.usec();
#x:= multiplex.script("+",b,c);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("multiplex.script(+) %d\n",d0);
#t0:= alarm.usec();
#x:= multiplex.tactics("+",b,c);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("multiplex.tactics(+) %d\n",d0);
#
function Admin.main():int; #0  (main:int)
    b := bbp.new(void,lng); #1 CMDBATnew (b:bat[void,lng])<-(void:void)(lng:lng)
    i := -1; #2  (i:lng)<-($5:lng)
barrier v := mal.nextElement(i,0,1000000); #3 lngForloop (v:bit)<-(i:lng)($7:lng)($8:lng) jump 8
    k := calc.rand(); #4 CALCrandint (k:int)
    l := calc.lng(k); #5 CALCint_2_lng (l:lng)<-(k:int)
    bat.insert(b,nil,l); #6 CMDinsert_bun ($11:bat[void,lng])<-(b:bat[void,lng])($12:void)(l:lng)
    redo v; #7  (v:bit) jump 3
exit v; #8  (v:bit)
    mx := algebra.max(b); #9 CMDmax_lng (mx:lng)<-(b:bat[void,lng])
    mi := algebra.min(b); #10 CMDmin_lng (mi:lng)<-(b:bat[void,lng])
    t0 := alarm.usec(); #11 CLKusec (t0:lng)
    c := algebra.copy(b); #12 CMDcopy (c:bat[void,lng])<-(b:bat[void,lng])
    t1 := alarm.usec(); #13 CLKusec (t1:lng)
    d0 := calc.-(t1,t0); #14 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    system.printf("copy %d",d0); #15 SYSprint_formatted_lng ($19:int)<-($20:str)(d0:lng)
    cnt := algebra.count(c); #16 CMDcount (cnt:int)<-(c:bat[void,lng])
    system.printf(" count %d\n",cnt); #17 SYSprint_formatted_int ($22:int)<-($23:str)(cnt:int)
    t0 := alarm.usec(); #18 CLKusec (t0:lng)
    z := algebra.select(b,25,25); #19 CMDselect (z:bat[void,lng])<-(b:bat[void,lng])($25:lng)($25:lng)
    t1 := alarm.usec(); #20 CLKusec (t1:lng)
    d0 := calc.-(t1,t0); #21 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    system.printf("select none %d",d0); #22 SYSprint_formatted_lng ($26:int)<-($27:str)(d0:lng)
    cnt := algebra.count(z); #23 CMDcount (cnt:int)<-(z:bat[void,lng])
    system.printf(" count %d\n",cnt); #24 SYSprint_formatted_int ($28:int)<-($23:str)(cnt:int)
    t0 := alarm.usec(); #25 CLKusec (t0:lng)
    z2 := algebra.select(b,mi,mx); #26 CMDselect (z2:bat[void,lng])<-(b:bat[void,lng])(mi:lng)(mx:lng)
    t1 := alarm.usec(); #27 CLKusec (t1:lng)
    d0 := calc.-(t1,t0); #28 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    system.printf("select all %d",d0); #29 SYSprint_formatted_lng ($30:int)<-($31:str)(d0:lng)
    cnt := algebra.count(z2); #30 CMDcount (cnt:int)<-(z2:bat[void,lng])
    system.printf(" count %d\n",cnt); #31 SYSprint_formatted_int ($32:int)<-($23:str)(cnt:int)
    rng := calc.-(mx,mi); #32 CALCbinarySUBlnglng (rng:lng)<-(mx:lng)(mi:lng)
    r2 := calc./(rng,20); #33 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)($35:int)
    r3 := calc.+(mi,r2); #34 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec(); #35 CLKusec (t0:lng)
    z3 := algebra.select(b,mi,r3); #36 CMDselect (z3:bat[void,lng])<-(b:bat[void,lng])(mi:lng)(r3:lng)
    t1 := alarm.usec(); #37 CLKusec (t1:lng)
    d0 := calc.-(t1,t0); #38 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    system.printf("select 0.05 %d",d0); #39 SYSprint_formatted_lng ($38:int)<-($39:str)(d0:lng)
    cnt := algebra.count(z3); #40 CMDcount (cnt:int)<-(z3:bat[void,lng])
    system.printf(" count %d\n",cnt); #41 SYSprint_formatted_int ($40:int)<-($23:str)(cnt:int)
    r2 := calc./(rng,10); #42 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)($41:int)
    r3 := calc.+(mi,r2); #43 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec(); #44 CLKusec (t0:lng)
    z4 := algebra.select(b,mi,r3); #45 CMDselect (z4:bat[void,lng])<-(b:bat[void,lng])(mi:lng)(r3:lng)
    t1 := alarm.usec(); #46 CLKusec (t1:lng)
    d0 := calc.-(t1,t0); #47 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    system.printf("select 0.1 %d",d0); #48 SYSprint_formatted_lng ($43:int)<-($44:str)(d0:lng)
    cnt := algebra.count(z4); #49 CMDcount (cnt:int)<-(z4:bat[void,lng])
    system.printf(" count %d\n",cnt); #50 SYSprint_formatted_int ($45:int)<-($23:str)(cnt:int)
    r2 := calc./(rng,5); #51 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)($46:int)
    r3 := calc.+(mi,r2); #52 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec(); #53 CLKusec (t0:lng)
    z5 := algebra.select(b,mi,r3); #54 CMDselect (z5:bat[void,lng])<-(b:bat[void,lng])(mi:lng)(r3:lng)
    t1 := alarm.usec(); #55 CLKusec (t1:lng)
    d0 := calc.-(t1,t0); #56 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    system.printf("select 0.2 %d",d0); #57 SYSprint_formatted_lng ($48:int)<-($49:str)(d0:lng)
    cnt := algebra.count(z5); #58 CMDcount (cnt:int)<-(z5:bat[void,lng])
    system.printf(" count %d\n",cnt); #59 SYSprint_formatted_int ($50:int)<-($23:str)(cnt:int)
    r3 := calc.+(r3,r2); #60 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec(); #61 CLKusec (t0:lng)
    z6 := algebra.select(b,mi,r3); #62 CMDselect (z6:bat[void,lng])<-(b:bat[void,lng])(mi:lng)(r3:lng)
    t1 := alarm.usec(); #63 CLKusec (t1:lng)
    d0 := calc.-(t1,t0); #64 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    system.printf("select 0.4 %d",d0); #65 SYSprint_formatted_lng ($52:int)<-($53:str)(d0:lng)
    cnt := algebra.count(z6); #66 CMDcount (cnt:int)<-(z6:bat[void,lng])
    system.printf(" count %d\n",cnt); #67 SYSprint_formatted_int ($54:int)<-($23:str)(cnt:int)
    r3 := calc.+(r3,r2); #68 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec(); #69 CLKusec (t0:lng)
    z7 := algebra.select(b,mi,r3); #70 CMDselect (z7:bat[void,lng])<-(b:bat[void,lng])(mi:lng)(r3:lng)
    t1 := alarm.usec(); #71 CLKusec (t1:lng)
    d0 := calc.-(t1,t0); #72 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    system.printf("select 0.6 %d",d0); #73 SYSprint_formatted_lng ($56:int)<-($57:str)(d0:lng)
    cnt := algebra.count(z7); #74 CMDcount (cnt:int)<-(z7:bat[void,lng])
    system.printf(" count %d\n",cnt); #75 SYSprint_formatted_int ($58:int)<-($59:str)(cnt:int)
    r3 := calc.+(r3,r2); #76 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec(); #77 CLKusec (t0:lng)
    z8 := algebra.select(b,mi,r3); #78 CMDselect (z8:bat[void,lng])<-(b:bat[void,lng])(mi:lng)(r3:lng)
    t1 := alarm.usec(); #79 CLKusec (t1:lng)
    d0 := calc.-(t1,t0); #80 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    system.printf("select 0.8 %d",d0); #81 SYSprint_formatted_lng ($61:int)<-($62:str)(d0:lng)
    cnt := algebra.count(z8); #82 CMDcount (cnt:int)<-(z8:bat[void,lng])
    system.printf(" count %d\n",cnt); #83 SYSprint_formatted_int ($63:int)<-($59:str)(cnt:int)
    r3 := calc.+(r3,r2); #84 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec(); #85 CLKusec (t0:lng)
    z9 := algebra.select(b,mi,r3); #86 CMDselect (z9:bat[void,lng])<-(b:bat[void,lng])(mi:lng)(r3:lng)
    t1 := alarm.usec(); #87 CLKusec (t1:lng)
    d0 := calc.-(t1,t0); #88 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    system.printf("select 1.0 %d",d0); #89 SYSprint_formatted_lng ($65:int)<-($66:str)(d0:lng)
    cnt := algebra.count(z9); #90 CMDcount (cnt:int)<-(z9:bat[void,lng])
    system.printf(" count %d\n",cnt); #91 SYSprint_formatted_int ($67:int)<-($59:str)(cnt:int)
    t0 := alarm.usec(); #92 CLKusec (t0:lng)
    sr := bat.reverse(b); #93 CMDreverse (sr:bat[lng,void])<-(b:bat[void,lng])
    s := algebra.sort(sr); #94 CMDsort (s:bat[lng,void])<-(sr:bat[lng,void])
    t1 := alarm.usec(); #95 CLKusec (t1:lng)
    d0 := calc.-(t1,t0); #96 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    system.printf("tail sort %d",d0); #97 SYSprint_formatted_lng ($70:int)<-($71:str)(d0:lng)
    cnt := algebra.count(s); #98 CMDcount (cnt:int)<-(s:bat[lng,void])
    system.printf(" count %d\n",cnt); #99 SYSprint_formatted_int ($72:int)<-($59:str)(cnt:int)
    cnt := algebra.count(z9); #100 CMDcount (cnt:int)<-(z9:bat[void,lng])
    t0 := alarm.usec(); #101 CLKusec (t0:lng)
    x := multiplex.script("+",b,c); #102 CMDmultiplexScript (x:bat[void,lng])<-($74:str)(b:bat[void,lng])(c:bat[void,lng])
    t1 := alarm.usec(); #103 CLKusec (t1:lng)
    d0 := calc.-(t1,t0); #104 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    system.printf("multiplex.script(+) %d\n",d0); #105 SYSprint_formatted_lng ($75:int)<-($76:str)(d0:lng)
    t0 := alarm.usec(); #106 CLKusec (t0:lng)
    x := batcalc.+(b,c); #107 CMDbatADD (x:bat[void,lng])<-(b:bat[void,lng])(c:bat[void,lng])
    t1 := alarm.usec(); #108 CLKusec (t1:lng)
    d0 := calc.-(t1,t0); #109 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    system.printf("multiplex.tactics(+) %d\n",d0); #110 SYSprint_formatted_lng ($77:int)<-($78:str)(d0:lng)
end main; #111  
copy 38426 count 1000000
select none 21895 count 0
select all 55276 count 1000000
select 0.05 42452 count 50004
select 0.1 46716 count 100016
select 0.2 47052 count 199929
select 0.4 57608 count 399791
select 0.6 68105 count 600237
select 0.8 74774 count 799837
select 1.0 54860 count 999999
tail sort 841295 count 1000000
multiplex.script(+) 2904577
multiplex.tactics(+) 73298
>