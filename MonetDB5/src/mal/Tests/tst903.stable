# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
## the multiplex code blocks.
#
#b:= new(:void,:lng);
#i:= -1:lng;
#barrier v:= nextElement(i,0:lng,1000000:lng);
#	k:= rand();
#	l:= lng(k);
#	insert(b,nil,l);
#	redo v;
#exit v;
##setReadMode(b);
#mx:= max(b); 
##printf("max %d",mx);
#mi:= min(b); 
##printf(" min %d\n",mi);
#t0:= alarm.usec();
#c:= copy(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#copy %d",d0);
#cnt:= count(c);
#printf("#count %d\n",cnt);
#t0:= alarm.usec();
#z:= select(b,25:lng,25:lng);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select none %d",d0);
#cnt:= count(z);
#printf(" count %d\n",cnt);
#t0:= alarm.usec();
#z2:= select(b,mi,mx);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select all %d",d0);
#cnt:= count(z2);
#printf(" count %d\n",cnt);
#rng:= mx-mi;
#r2:= rng/20;
#r3:= mi+r2;
#t0:= alarm.usec();
#z3:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.05 %d",d0);
#cnt:= count(z3);
#printf(" count %d\n",cnt);
#r2:= rng/10;
#r3:= mi+r2;
#t0:= alarm.usec();
#z4:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.1 %d",d0);
#cnt:= count(z4);
#printf(" count %d\n",cnt);
#r2:= rng/5;
#r3:= mi+r2;
#t0:= alarm.usec();
#z5:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.2 %d",d0);
#cnt:= count(z5);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z6:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.4 %d",d0);
#cnt:= count(z6);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z7:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.6 %d",d0);
#cnt:= count(z7);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z8:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.8 %d",d0);
#cnt:= count(z8);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z9:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 1.0 %d",d0);
#cnt:= count(z9);
#printf(" count %d\n",cnt);
#t0:= alarm.usec();
#sr:= reverse(b);
#s:= sort(sr);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#tail sort %d",d0);
#cnt:= count(s);
#printf(" count %d\n",cnt);
#cnt:= count(z9);
#t0:= alarm.usec();
#x:= multiplex.script("+",b,c);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#multiplex.script(+) %d\n",d0);
#t0:= alarm.usec();
#x:= multiplex.tactics("+",b,c);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#multiplex.tactics(+) %d\n",d0);
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(void:,lng:);	# 1 CMDBATnew (b:bat[:void,:lng])<-($2:void)($3:lng)
    i := -1;	# 2  (i:lng)<-($5:lng)
barrier v := mal.nextElement(i,0,1000000);	# 3 lngForloop (v:bit)<-(i:lng)($7:lng)($8:lng) jump 8
    k := calc.rand();	# 4 CALCrandint (k:int)
    l := calc.lng(k);	# 5 CALCint2lng (l:lng)<-(k:int)
    bat.insert(b,nil,l);	# 6 BKCinsert_bun ($11:void)<-(b:bat[:void,:lng])($12:void)(l:lng)
    redo v;	# 7  (v:bit) jump 3
exit v;	# 8  (v:bit)
    mx := algebra.max(b);	# 9 ALGmax_lng (mx:lng)<-(b:bat[:void,:lng])
    mi := algebra.min(b);	# 10 ALGmin_lng (mi:lng)<-(b:bat[:void,:lng])
    t0 := alarm.usec();	# 11 ALARMusec (t0:lng)
    c := algebra.copy(b);	# 12 ALGcopy (c:bat[:void,:lng])<-(b:bat[:void,:lng])
    t1 := alarm.usec();	# 13 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 14 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#copy %d",d0);	# 15 SYSprint_formatted_lng ($19:int)<-($20:str)(d0:lng)
    cnt := algebra.count(c);	# 16 ALGcount_bat (cnt:lng)<-(c:bat[:void,:lng])
    io.printf("#count %d\n",cnt);	# 17 SYSprint_formatted_lng ($22:int)<-($23:str)(cnt:lng)
    t0 := alarm.usec();	# 18 ALARMusec (t0:lng)
    z := algebra.select(b,25,25);	# 19 ALGselect (z:bat[:void,:lng])<-(b:bat[:void,:lng])($25:lng)($25:lng)
    t1 := alarm.usec();	# 20 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 21 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select none %d",d0);	# 22 SYSprint_formatted_lng ($26:int)<-($27:str)(d0:lng)
    cnt := algebra.count(z);	# 23 ALGcount_bat (cnt:lng)<-(z:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 24 SYSprint_formatted_lng ($28:int)<-($29:str)(cnt:lng)
    t0 := alarm.usec();	# 25 ALARMusec (t0:lng)
    z2 := algebra.select(b,mi,mx);	# 26 ALGselect (z2:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(mx:lng)
    t1 := alarm.usec();	# 27 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 28 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select all %d",d0);	# 29 SYSprint_formatted_lng ($31:int)<-($32:str)(d0:lng)
    cnt := algebra.count(z2);	# 30 ALGcount_bat (cnt:lng)<-(z2:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 31 SYSprint_formatted_lng ($33:int)<-($29:str)(cnt:lng)
    rng := calc.-(mx,mi);	# 32 CALCbinarySUBlnglng (rng:lng)<-(mx:lng)(mi:lng)
    r2 := calc./(rng,20);	# 33 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)($36:int)
    r3 := calc.+(mi,r2);	# 34 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec();	# 35 ALARMusec (t0:lng)
    z3 := algebra.select(b,mi,r3);	# 36 ALGselect (z3:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 37 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 38 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.05 %d",d0);	# 39 SYSprint_formatted_lng ($39:int)<-($40:str)(d0:lng)
    cnt := algebra.count(z3);	# 40 ALGcount_bat (cnt:lng)<-(z3:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 41 SYSprint_formatted_lng ($41:int)<-($29:str)(cnt:lng)
    r2 := calc./(rng,10);	# 42 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)($42:int)
    r3 := calc.+(mi,r2);	# 43 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec();	# 44 ALARMusec (t0:lng)
    z4 := algebra.select(b,mi,r3);	# 45 ALGselect (z4:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 46 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 47 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.1 %d",d0);	# 48 SYSprint_formatted_lng ($44:int)<-($45:str)(d0:lng)
    cnt := algebra.count(z4);	# 49 ALGcount_bat (cnt:lng)<-(z4:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 50 SYSprint_formatted_lng ($46:int)<-($29:str)(cnt:lng)
    r2 := calc./(rng,5);	# 51 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)($47:int)
    r3 := calc.+(mi,r2);	# 52 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec();	# 53 ALARMusec (t0:lng)
    z5 := algebra.select(b,mi,r3);	# 54 ALGselect (z5:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 55 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 56 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.2 %d",d0);	# 57 SYSprint_formatted_lng ($49:int)<-($50:str)(d0:lng)
    cnt := algebra.count(z5);	# 58 ALGcount_bat (cnt:lng)<-(z5:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 59 SYSprint_formatted_lng ($51:int)<-($29:str)(cnt:lng)
    r3 := calc.+(r3,r2);	# 60 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 61 ALARMusec (t0:lng)
    z6 := algebra.select(b,mi,r3);	# 62 ALGselect (z6:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 63 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 64 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.4 %d",d0);	# 65 SYSprint_formatted_lng ($53:int)<-($54:str)(d0:lng)
    cnt := algebra.count(z6);	# 66 ALGcount_bat (cnt:lng)<-(z6:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 67 SYSprint_formatted_lng ($55:int)<-($29:str)(cnt:lng)
    r3 := calc.+(r3,r2);	# 68 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 69 ALARMusec (t0:lng)
    z7 := algebra.select(b,mi,r3);	# 70 ALGselect (z7:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 71 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 72 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.6 %d",d0);	# 73 SYSprint_formatted_lng ($57:int)<-($58:str)(d0:lng)
    cnt := algebra.count(z7);	# 74 ALGcount_bat (cnt:lng)<-(z7:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 75 SYSprint_formatted_lng ($59:int)<-($29:str)(cnt:lng)
    r3 := calc.+(r3,r2);	# 76 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 77 ALARMusec (t0:lng)
    z8 := algebra.select(b,mi,r3);	# 78 ALGselect (z8:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 79 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 80 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.8 %d",d0);	# 81 SYSprint_formatted_lng ($61:int)<-($62:str)(d0:lng)
    cnt := algebra.count(z8);	# 82 ALGcount_bat (cnt:lng)<-(z8:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 83 SYSprint_formatted_lng ($63:int)<-($64:str)(cnt:lng)
    r3 := calc.+(r3,r2);	# 84 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 85 ALARMusec (t0:lng)
    z9 := algebra.select(b,mi,r3);	# 86 ALGselect (z9:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 87 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 88 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 1.0 %d",d0);	# 89 SYSprint_formatted_lng ($66:int)<-($67:str)(d0:lng)
    cnt := algebra.count(z9);	# 90 ALGcount_bat (cnt:lng)<-(z9:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 91 SYSprint_formatted_lng ($68:int)<-($64:str)(cnt:lng)
    t0 := alarm.usec();	# 92 ALARMusec (t0:lng)
    sr := bat.reverse(b);	# 93 BKCreverse (sr:bat[:lng,:void])<-(b:bat[:void,:lng])
    s := algebra.sort(sr);	# 94 ALGsort (s:bat[:lng,:void])<-(sr:bat[:lng,:void])
    t1 := alarm.usec();	# 95 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 96 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#tail sort %d",d0);	# 97 SYSprint_formatted_lng ($71:int)<-($72:str)(d0:lng)
    cnt := algebra.count(s);	# 98 ALGcount_bat (cnt:lng)<-(s:bat[:lng,:void])
    io.printf(" count %d\n",cnt);	# 99 SYSprint_formatted_lng ($73:int)<-($64:str)(cnt:lng)
    cnt := algebra.count(z9);	# 100 ALGcount_bat (cnt:lng)<-(z9:bat[:void,:lng])
    t0 := alarm.usec();	# 101 ALARMusec (t0:lng)
    x := multiplex.script("+",b,c);	# 102  (x:bat[:void,:lng])<-($75:str)(b:bat[:void,:lng])(c:bat[:void,:lng])
    t1 := alarm.usec();	# 103 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 104 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#multiplex.script(+) %d\n",d0);	# 105 SYSprint_formatted_lng ($76:int)<-($77:str)(d0:lng)
    t0 := alarm.usec();	# 106 ALARMusec (t0:lng)
    x := batcalc.+(b,c);	# 107 CMDbatADD (x:bat[:void,:lng])<-(b:bat[:void,:lng])(c:bat[:void,:lng])
    t1 := alarm.usec();	# 108 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 109 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#multiplex.tactics(+) %d\n",d0);	# 110 SYSprint_formatted_lng ($78:int)<-($79:str)(d0:lng)
end main;	# 111  
#copy 27#count 4
#select none 271669 count 5
#select all 42403 count 6
#select 0.05 25879 count 7
#select 0.1 27537 count 8
#select 0.2 30337 count 9
#select 0.4 35613 count 10
#select 0.6 39118 count 11
#select 0.8 42727 count 12
#select 1.0 42112 count 13
#tail sort 9 count -4
#multiplex.script(+) 19385320
#multiplex.tactics(+) 70382
>