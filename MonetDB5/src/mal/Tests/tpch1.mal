# Monet Mil to Mal compiler
# Copyright (c) 2001-2002, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#- positional arguments, ie $1,$2,..., can not be compiled in isolation
#
#
#Perhaps someone will develop a complete MIL interpreter
#on top of the MAL kernel in the future
#s14 := mvc_bind( "sys", "lineitem", "l_shipdate", 0); #lineitem
	myc:= bbp.bind("myc");
	s14 := mvc_bind("lineitem","l_shipdate",0);
#s16 := date("1998-12-01");
	s16 := date("1998-12-01");
#s17 := int(7776000);
	s17 := int(7776000);
#s15 := date_sub_sec_interval(s16,s17);
	s15 := date_sub_sec_interval(s16,s17);
#s13 := s14.uselect(date(nil), s15);
	aa_a := date(nil);
	s13 := uselect(s14,aa_a,s15);
#s12 := s13.reverse();
	s12 := reverse(s13,);
#s11 := s12.reverse().mark(oid(0)).reverse();# lineitem
	ba_a := oid(0);
	ca_a := reverse(s12,);
	da_a := mark(ca_a,ba_a);
	s11 := reverse(da_a,);
#s18 := mvc_bind( "sys", "lineitem", "l_returnflag", 0); #lineitem
	s18 := mvc_bind("lineitem","l_returnflag",0);
#s10 := s11.join(s18);
	s10 := join(s11,s18);
#s9 := s10.CTgroup();
	s9 := group(s10,);
#s20 := mvc_bind( "sys", "lineitem", "l_linestatus", 0); #lineitem
	s20 := mvc_bind("lineitem","l_linestatus",0);
#s19 := s11.join(s20);
	s19 := join(s11,s20);
#s8 := s9.CTgroup(s19);
	s8 := group(s9,s19);
#s7 := s8.tunique().mirror();
	ea_a := tunique(s8,);
	s7 := mirror(ea_a,);
#s6 := s7.join(s11);
	s6 := join(s7,s11);
#s5 := s6.join(s18);
	s5 := join(s6,s18);
#s4 := s5.reverse().sort().reverse();
	fa_a := reverse(s5,);
	ga_a := sort(fa_a,);
	s4 := reverse(ga_a,);
#s22 := s7.join(s11);
	s22 := join(s7,s11);
#s21 := s22.join(s20);
	s21 := join(s22,s20);
#s3 := s4.CTrefine(s21);
	s3 := refine(s4,s21);
#s25 := s11.join(s18);
	s25 := join(s11,s18);
#s24 := s7.join(s25);
	s24 := join(s7,s25);
#s27 := s11.join(s20);
	s27 := join(s11,s20);
#s26 := s7.join(s27);
	s26 := join(s7,s27);
#s31 := mvc_bind( "sys", "lineitem", "l_quantity", 0); #lineitem
	s31 := mvc_bind("lineitem","l_quantity",0);
#s30 := s11.join(s31);
	s30 := join(s11,s31);
#s29 := {sum_lng}(s30, s8, s7);
	s29 := group.sum_lng(s30,s8,s7);
#s35 := mvc_bind( "sys", "lineitem", "l_extendedprice", 0); #lineitem
	s35 := mvc_bind("lineitem","l_extendedprice",0);
#s34 := s11.join(s35);
	s34 := join(s11,s35);
#s33 := {sum_lng}(s34, s8, s7);
	s33 := group.sum_lng(s34,s8,s7);
#s39 := s11.join(s35);
	s39 := join(s11,s35);
#s42 := int(1);
	s42 := int(1);
#s41 := lng(s42);
	s41 := lng(s42);
#s44 := mvc_bind( "sys", "lineitem", "l_discount", 0); #lineitem
	s44 := mvc_bind("lineitem","l_discount",0);
#s43 := s11.join(s44);
	s43 := join(s11,s44);
#s45 := [s43 ~ s41];
	ha_a:= zipper(s43,s41);
	s45 := ha_a;
#s40 := [-](s45,s43);
	s40 := multiplex.tactics("-",s45,s43);
#s38 := [*](s39,s40);
	s38 := multiplex.tactics("*",s39,s40);
#s37 := {sum_lng}(s38, s8, s7);
	s37 := group.sum_lng(s38,s8,s7);
#s50 := s11.join(s35);
	s50 := join(s11,s35);
#s53 := int(1);
	s53 := int(1);
#s52 := lng(s53);
	s52 := lng(s53);
#s54 := s11.join(s44);
	s54 := join(s11,s44);
#s55 := [s54 ~ s52];
	ia_a:= zipper(s54,s52);
	s55 := ia_a;
#s51 := [-](s55,s54);
	s51 := multiplex.tactics("-",s55,s54);
#s49 := [*](s50,s51);
	s49 := multiplex.tactics("*",s50,s51);
#s58 := int(1);
	s58 := int(1);
#s57 := lng(s58);
	s57 := lng(s58);
#s60 := mvc_bind( "sys", "lineitem", "l_tax", 0); #lineitem
	s60 := mvc_bind("lineitem","l_tax",0);
#s59 := s11.join(s60);
	s59 := join(s11,s60);
#s61 := [s59 ~ s57];
	ja_a:= zipper(s59,s57);
	s61 := ja_a;
#s56 := [+](s61,s59);
	s56 := multiplex.tactics("+",s61,s59);
#s48 := [*](s49,s56);
	s48 := multiplex.tactics("*",s49,s56);
#s47 := {sum_lng}(s48, s8, s7);
	s47 := group.sum_lng(s48,s8,s7);
#s64 := s11.join(s31);
	s64 := join(s11,s31);
#s63 := {avg}(s64, s8, s7);
	s63 := group.avg(s64,s8,s7);
#s67 := s11.join(s35);
	s67 := join(s11,s35);
#s66 := {avg}(s67, s8, s7);
	s66 := group.avg(s67,s8,s7);
#s70 := s11.join(s44);
	s70 := join(s11,s44);
#s69 := {avg}(s70, s8, s7);
	s69 := group.avg(s70,s8,s7);
#s72 := {count}(s8, s8, s7);
	s72 := group.count(s8,s8,s7);
#output_header(Output,10);
	Output:= bbp.bind("Output");
	ka_a := output_header(Output,10);
#output_column(Output,"l_returnflag", "char");
	la_a := output_column(Output,"l_returnflag","char");
#output_column(Output,"l_linestatus", "char");
	ma_a := output_column(Output,"l_linestatus","char");
#output_column(Output,"sum_qty", "bigint");
	na_a := output_column(Output,"sum_qty","bigint");
#output_column(Output,"sum_base_price", "bigint");
	oa_a := output_column(Output,"sum_base_price","bigint");
#output_column(Output,"sum_disc_price", "bigint");
	pa_a := output_column(Output,"sum_disc_price","bigint");
#output_column(Output,"sum_charge", "bigint");
	qa_a := output_column(Output,"sum_charge","bigint");
#output_column(Output,"avg_qty", "float");
	ra_a := output_column(Output,"avg_qty","float");
#output_column(Output,"avg_price", "float");
	sa_a := output_column(Output,"avg_price","float");
#output_column(Output,"avg_disc", "float");
	ta_a := output_column(Output,"avg_disc","float");
#output_column(Output,"count_order", "mediumint");
	ua_a := output_column(Output,"count_order","mediumint");
#stream_flush(Output);
	va_a := stream_flush(Output);
#server_output(Output, s3 , s24, s26, s29, s33, s37, s47, s63, s66, s69, s72);
	wa_a := server_output(Output,s3,s24,s26,s29,s33,s37,s47,s63,s66,s69,s72);
#
#Identifer 'CTgroup' mapped to 'group'
#Identifer 'CTrefine' mapped to 'refine'
