# the join experiment
function tst(r:bat, s:bat, rnme:str, snme:str):void;
	t0:= alarm.usec();
	c:= join(r,s);
	t1:= alarm.usec();
	d0:= t1-t0;
	printf("join %s",rnme);
	printf(" %s",snme);
	printf(" %d",d0);
	cnt:= count(c);
	printf(" count %d\n",cnt);
end tst;
function tstmergejoin(r:bat, s:bat, rnme:str, snme:str):void;
	t0:= alarm.usec();
	c:= mergejoin(r,s);
	t1:= alarm.usec();
	d0:= t1-t0;
	printf("mergejoin %s",rnme);
	printf(" %s",snme);
	printf(" %d",d0);
	cnt:= count(c);
	printf(" count %d\n",cnt);
end tstmergejoin;

r1:= new(:void,:lng);
r2:= new(:lng,:lng);
s1:= new(:void,:lng);
s2:= new(:lng,:lng);
i:= -1:lng;
barrier v:= nextElement(i,0:lng,1000000:lng);
	k:= rand();
	l:= lng(k);
	insert(r1,nil,l);
	insert(s1,nil,i);
	insert(r2,i,l);
	insert(s2,i,i);
	redo v;
exit v;
r1r:= reverse(r1);
r2r:= reverse(r2);
s1r:= reverse(s1);
s2r:= reverse(s2);

tst(r1,r2r,"r1","r2r");
tst(r2,r1r,"r2","r1r");
tst(r2,r2r,"r2","r2r");
tst(s1,s2r,"s1","s2r");
tst(s2,r2,"s2","r2");
tst(s1,r2,"s1","r2");
tst(s1,s2,"s1","s2");
tst(s2,s1r,"s2","s1r");
tst(s2,s2r,"s2","s2r");
printf("\n");
tst(r1,r2r,"r1","r2r");
tst(r2,r1r,"r2","r1r");
tst(r2,r2r,"r2","r2r");
tst(s1,s2r,"s1","s2r");
tst(s2,r2,"s2","r2");
tst(s1,r2,"s1","r2");
tst(s1,s2,"s1","s2");
tst(s2,s1r,"s2","s1r");
tst(s2,s2r,"s2","s2r");

printf("\n");
tstmergejoin(s2,s2r,"s2","s2r");
tstmergejoin(s1,s2,"s1","s2");
