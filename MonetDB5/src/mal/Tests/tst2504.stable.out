stdout of test 'tst2504` in directory 'src/mal` itself:


# 09:28:03 >  
# 09:28:03 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=47911 --set sql_port=51297 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst2504.mal </dev/null
# 09:28:03 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl for further information.
## The prototypical factory construct
## test factory return and restart
#
#factory random(seed:int):int;
#	random:= seed;
#	i:= seed;
#	i:= 125 *i;
#	i:= i % 32767;
#	yield i;
#	i:= 125 *i;
#	i:= i % 32767;
#	yield i;
#end random;
factory Admin.random(seed:int):int;	# 0  (random:int)<-(seed:int)
    random := seed;	# 1  (random:int)<-(seed:int)
    i := seed;	# 2  (i:int)<-(seed:int)
    i := calc.*(125,i);	# 3 CALCbinaryMULintint (i:int)<-($3:int)(i:int)
    i := calc.%(i,32767);	# 4 CALCbinaryMODintint (i:int)<-(i:int)($4:int)
    yield i;	# 5  (i:int)
    i := calc.*(125,i);	# 6 CALCbinaryMULintint (i:int)<-($3:int)(i:int)
    i := calc.%(i,32767);	# 7 CALCbinaryMODintint (i:int)<-(i:int)($4:int)
    yield i;	# 8  (i:int)
end random;	# 9  
#
#r1:= random(1);
#print(r1);
#r2:= random(1);
#print(r2);
#r2:= random(1);
#print(r2);
#r2:= random(1);
#print(r2);
#
function Admin.main():int;	# 0  (main:int)
    r1 := Admin.random(1);	# 1  (r1:int)<-($2:int)
    io.print(r1);	# 2 IOprint_val ($3:int)<-(r1:int)
    r2 := Admin.random(1);	# 3  (r2:int)<-($2:int)
    io.print(r2);	# 4 IOprint_val ($5:int)<-(r2:int)
    r2 := Admin.random(1);	# 5  (r2:int)<-($2:int)
    io.print(r2);	# 6 IOprint_val ($6:int)<-(r2:int)
    r2 := Admin.random(1);	# 7  (r2:int)<-($2:int)
    io.print(r2);	# 8 IOprint_val ($7:int)<-(r2:int)
end main;	# 9  
[ 125 ]
[ 15625 ]
[ 15625 ]
[ 125 ]

# 22:46:18 >  
# 22:46:18 >  Done.
# 22:46:18 >  

