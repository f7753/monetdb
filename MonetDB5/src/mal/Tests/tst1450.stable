# Monet Database Server V5.0
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
# gdk_dbfarm:/ufs/mk/monet_5-0/Linux/../dbfarm
# gdk_dbname:demo
# gdk_dbdir:/ufs/mk/monet_5-0/Linux/../dbfarm/demo
# gdk_distr:/ufs/mk/monet_5-0/Linux
# monetrc:/ufs/mk/.monet.conf
## Mil compiler Version 1.0)
## Copyright (c) 1993-2001, CWI. All rights reserved.
#
## Predefined code segment
##
###line 567 "/ufs/mk/monet_4-3/src/modules/plain/ddbench.mx"
##
#	view_bbp_name:= catalog.bbpNames();
#	aa_a := reverse(view_bbp_name);
#barrier	ba_a:= exist(aa_a,"tpe");
##if (view_bbp_name.reverse.exist("tpe")) {
#	tpe:= bbp.bind("tpe");
#	tpe := destroy(tpe);
##	tpe := tpe.destroy;
#	commit:= bbp.bind("commit");
##	commit;
##}
#exit	ba_a;
##module(ddbench);
#	a := new(oid,oid);
##a := new(oid,oid);
#	ca_a := insert(a,2@0,nil:oid);
#	da_a := insert(a,2@0,nil:oid);
#	ea_a := insert(a,2@0,nil:oid);
#	fa_a := insert(a,2@0,nil:oid);
##a.insert(2@0,nil:oid); a.insert(2@0,nil); a.insert(2@0,nil); a.insert(2@0,nil);
#	ga_a := insert(a,1@0,nil:oid);
#	ha_a := insert(a,1@0,nil:oid);
#	ia_a := insert(a,1@0,nil:oid);
##a.insert(1@0,nil:oid); a.insert(1@0,nil); a.insert(1@0,nil);
#	ja_a := insert(a,0@0,nil:oid);
#	ka_a := insert(a,0@0,nil:oid);
#	la_a := insert(a,0@0,nil:oid);
#	ma_a := insert(a,0@0,nil:oid);
##a.insert(0@0,nil:oid); a.insert(0@0,nil); a.insert(0@0,nil); a.insert(0@0,nil);
#	na_a := insert(a,0@0,nil:oid);
#	oa_a := insert(a,0@0,nil:oid);
#	pa_a := insert(a,0@0,nil:oid);
#	qa_a := insert(a,0@0,nil:oid);
##a.insert(0@0,nil:oid); a.insert(0@0,nil); a.insert(0@0,nil); a.insert(0@0,nil);
#	ra_a := insert(a,3@0,nil:oid);
#	sa_a := insert(a,3@0,nil:oid);
#	ta_a := insert(a,3@0,nil:oid);
#	ua_a := insert(a,3@0,nil:oid);
##a.insert(3@0,nil); a.insert(3@0,nil); a.insert(3@0,nil); a.insert(3@0,nil);
#	va_a := copy(a);
#	wa_a := insert(a,va_a);
##a.insert(a.copy);
#	xa_a := mark(a,0@0);
#	aa := reverse(xa_a);
##aa := a.mark(0@0).reverse;
#	tpe := enum_create("tpe",aa);
##tpe := enum_create("tpe", aa);
#	aaa := multiplex.script(tpe,"encode",aa);
##aaa := tpe.[encode](aa);
##
#	ya_a := encode(tpe,1@0);
#	ab_a := encode(tpe,3@0);
#	brsel := rng_bitselect(aaa,ya_a,ab_a);
##brsel := rng_bitselect(aaa, tpe.encode(1@0), tpe.encode(3@0));
#	bb_a := tobat(brsel);
#	cb_a := semijoin(aa,bb_a);
#	db_a := print(cb_a);
##aa.semijoin(brsel.tobat).print;
#	eb_a := bit_subhisto(aaa,brsel);
#	fb_a := print(eb_a);
##aaa.bit_subhisto(brsel).print;
##
#	gb_a := encode(tpe,2@0);
#	bvsel := val_bitselect(aaa,gb_a);
##bvsel := val_bitselect(aaa, tpe.encode(2@0));
#	hb_a := tobat(bvsel);
#	ib_a := semijoin(aa,hb_a);
#	jb_a := print(ib_a);
##aa.semijoin(bvsel.tobat).print;
#	kb_a := bit_subhisto(aaa,bvsel);
#	lb_a := print(kb_a);
##aaa.bit_subhisto(bvsel).print;
##
#	mb_a := encode(tpe,3@0);
#	bvvsel := val_bitselect(brsel,aaa,mb_a);
##bvvsel := val_bitselect(brsel, aaa, tpe.encode(3@0));
#	nb_a := bit_subhisto(aaa,bvvsel);
#	ob_a := print(nb_a);
##aaa.bit_subhisto(bvvsel).print;
##
#	pb_a := encode(tpe,1@0);
#	qb_a := encode(tpe,2@0);
#	brrsel := rng_bitselect(brsel,aaa,pb_a,qb_a);
##brrsel := rng_bitselect(brsel, aaa, tpe.encode(1@0), tpe.encode(2@0));
#	rb_a := bit_subhisto(aaa,brrsel);
#	sb_a := print(rb_a);
##aaa.bit_subhisto(brrsel).print;
##
#	BAT_WRITE:= bbp.bind("BAT_WRITE");
#	tb_a := access(brsel,BAT_WRITE);
##brsel.access(BAT_WRITE);
#	ub_a := encode(tpe,1@0);
#	vb_a := encode(tpe,2@0);
#	wb_a := rng_bitrefine(brsel,aaa,ub_a,vb_a);
##rng_bitrefine(brsel, aaa, tpe.encode(1@0), tpe.encode(2@0));
#	xb_a := bit_subhisto(aaa,brsel);
#	yb_a := print(xb_a);
##aaa.bit_subhisto(brsel).print;
##
#	ac_a := encode(tpe,2@0);
#	bc_a := val_bitrefine(brsel,aaa,ac_a);
##val_bitrefine(brsel, aaa, tpe.encode(2@0));
#	cc_a := bit_subhisto(aaa,brsel);
#	dc_a := print(cc_a);
##aaa.bit_subhisto(brsel).print;
##
#	ec_a := encode(tpe,1@0);
#	fc_a := encode(tpe,3@0);
#	bvs := vals_bitselect(aaa,ec_a,fc_a);
##bvs := vals_bitselect(aaa, tpe.encode(1@0), tpe.encode(3@0)); 
#barrier	gc_a:= bunStream(bvs,gc_aH,gc_aT);
#	hc_a := print(gc_aT);
#redo	gc_a;
#exit	gc_a;
##bvs@batloop() print($t);
##
#	ic_a := encode(tpe,1@0);
#	jc_a := encode(tpe,2@0);
##brs := rngs_bitselect(aaa, tpe.encode(1@0), tpe.encode(2@0), 
#	kc_a := encode(tpe,2@0);
#	lc_a := encode(tpe,3@0);
#	brs := rngs_bitselect(aaa,ic_a,jc_a,kc_a,lc_a);
##                           tpe.encode(2@0), tpe.encode(3@0)); 
#barrier	mc_a:= bunStream(brs,mc_aH,mc_aT);
#	nc_a := print(mc_aT);
#redo	mc_a;
#exit	mc_a;
##brs@batloop() print($t);
##
#	bhs := bits_subhisto(aaa,bvvsel,brsel);
##bhs := bits_subhisto(aaa, bvvsel, brsel); 
#barrier	oc_a:= bunStream(bhs,oc_aH,oc_aT);
#	pc_a := print(oc_aT);
#redo	oc_a;
#exit	oc_a;
##bhs@batloop() print($t);
##
#	qc_a := encode(tpe,1@0);
#	rc_a := encode(tpe,3@0);
#	orsel := rng_oidselect(aaa,qc_a,rc_a);
##orsel := rng_oidselect(aaa, tpe.encode(1@0), tpe.encode(3@0));
#	sc_a := oid_subhisto(aaa,orsel);
#	tc_a := print(sc_a);
##aaa.oid_subhisto(orsel).print;
##
#	uc_a := encode(tpe,2@0);
#	ovsel := val_oidselect(aaa,uc_a);
##ovsel := val_oidselect(aaa, tpe.encode(2@0));
#	vc_a := oid_subhisto(aaa,ovsel);
#	wc_a := print(vc_a);
##aaa.oid_subhisto(ovsel).print;
##
#	xc_a := encode(tpe,3@0);
#	ovvsel := val_oidselect(orsel,aaa,xc_a);
##ovvsel := val_oidselect(orsel, aaa, tpe.encode(3@0));
#	yc_a := oid_subhisto(aaa,ovvsel);
#	ad_a := print(yc_a);
##aaa.oid_subhisto(ovvsel).print;
##
#	bd_a := encode(tpe,1@0);
#	cd_a := encode(tpe,2@0);
#	orrsel := rng_oidselect(orsel,aaa,bd_a,cd_a);
##orrsel := rng_oidselect(orsel, aaa, tpe.encode(1@0), tpe.encode(2@0));
#	dd_a := oid_subhisto(aaa,orrsel);
#	ed_a := print(dd_a);
##aaa.oid_subhisto(orrsel).print;
##
#	fd_a := access(orsel,BAT_WRITE);
##orsel.access(BAT_WRITE);
#	gd_a := encode(tpe,1@0);
#	hd_a := encode(tpe,2@0);
#	id_a := rng_oidrefine(orsel,aaa,gd_a,hd_a);
##rng_oidrefine(orsel, aaa, tpe.encode(1@0), tpe.encode(2@0));
#	jd_a := oid_subhisto(aaa,orsel);
#	kd_a := print(jd_a);
##aaa.oid_subhisto(orsel).print;
##
#	ld_a := encode(tpe,2@0);
#	md_a := val_oidrefine(orsel,aaa,ld_a);
##val_oidrefine(orsel, aaa, tpe.encode(2@0));
#	nd_a := oid_subhisto(aaa,orsel);
#	od_a := print(nd_a);
##aaa.oid_subhisto(orsel).print;
##
#	pd_a := encode(tpe,1@0);
#	qd_a := encode(tpe,3@0);
#	ovs := vals_oidselect(aaa,pd_a,qd_a);
##ovs := vals_oidselect(aaa, tpe.encode(1@0), tpe.encode(3@0)); 
#barrier	rd_a:= bunStream(ovs,rd_aH,rd_aT);
#	sd_a := print(rd_aT);
#redo	rd_a;
#exit	rd_a;
##ovs@batloop() print($t);
##
#	td_a := encode(tpe,1@0);
#	ud_a := encode(tpe,2@0);
##ors := rngs_oidselect(aaa, tpe.encode(1@0), tpe.encode(2@0), 
#	vd_a := encode(tpe,2@0);
#	wd_a := encode(tpe,3@0);
#	ors := rngs_oidselect(aaa,td_a,ud_a,vd_a,wd_a);
##                           tpe.encode(2@0), tpe.encode(3@0)); 
#barrier	xd_a:= bunStream(ors,xd_aH,xd_aT);
#	yd_a := print(xd_aT);
#redo	xd_a;
#exit	xd_a;
##ors@batloop() print($t);
##
##
#
    tpe := destroy(tpe); #5 unknown:(tpe:bat[any,any])<-(tpe:bat[any,any])
!ERROR: type conflict in statement .destroy[5]
!ERROR: type conflict in statement .destroy[5]
!ERROR: type conflict in assignment of bat.destroy
!ERROR: 'destroy' undefined in Admin.main[5]
!ERROR: 'enum_create' undefined in Admin.main[32]
!ERROR: multiplexType:string constant expected in main[33]
!ERROR: 'multiplex.script' undefined in Admin.main[33]
function Admin.main():int; #0:(main:int)
    view_bbp_name := catalog.bbpNames(); #1:(view_bbp_name:bat[int,str])
    aa_a := bat.reverse(view_bbp_name); #2:(aa_a:bat[str,int])<-(view_bbp_name:bat[int,str])
barrier ba_a := algebra.exist(aa_a,"tpe"); #3:(ba_a:bit)<-(aa_a:bat[str,int])($4:str) jump 8
    tpe := bbp.bind("tpe"); #4:(tpe:bat[any,any])<-($4:str)
    tpe := destroy(tpe); #5 unknown:(tpe:bat[any,any])<-(tpe:bat[any,any])
    commit := bbp.bind("commit"); #6:(commit:bat[any,any])<-($7:str)
exit ba_a; #7:(ba_a:bit)
    a := mal.new(oid,oid); #8:(a:bat[oid,oid])<-(oid:oid)(oid:oid)
    ca_a := bat.insert(a,2@0,nil); #9:(ca_a:bat[oid,oid])<-(a:bat[oid,oid])($11:oid)($12:oid)
    da_a := bat.insert(a,2@0,nil); #10:(da_a:bat[oid,oid])<-(a:bat[oid,oid])($11:oid)($12:oid)
    ea_a := bat.insert(a,2@0,nil); #11:(ea_a:bat[oid,oid])<-(a:bat[oid,oid])($11:oid)($12:oid)
    fa_a := bat.insert(a,2@0,nil); #12:(fa_a:bat[oid,oid])<-(a:bat[oid,oid])($11:oid)($12:oid)
    ga_a := bat.insert(a,1@0,nil); #13:(ga_a:bat[oid,oid])<-(a:bat[oid,oid])($17:oid)($12:oid)
    ha_a := bat.insert(a,1@0,nil); #14:(ha_a:bat[oid,oid])<-(a:bat[oid,oid])($17:oid)($12:oid)
    ia_a := bat.insert(a,1@0,nil); #15:(ia_a:bat[oid,oid])<-(a:bat[oid,oid])($17:oid)($12:oid)
    ja_a := bat.insert(a,0@0,nil); #16:(ja_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    ka_a := bat.insert(a,0@0,nil); #17:(ka_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    la_a := bat.insert(a,0@0,nil); #18:(la_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    ma_a := bat.insert(a,0@0,nil); #19:(ma_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    na_a := bat.insert(a,0@0,nil); #20:(na_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    oa_a := bat.insert(a,0@0,nil); #21:(oa_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    pa_a := bat.insert(a,0@0,nil); #22:(pa_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    qa_a := bat.insert(a,0@0,nil); #23:(qa_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    ra_a := bat.insert(a,3@0,nil); #24:(ra_a:bat[oid,oid])<-(a:bat[oid,oid])($30:oid)($12:oid)
    sa_a := bat.insert(a,3@0,nil); #25:(sa_a:bat[oid,oid])<-(a:bat[oid,oid])($30:oid)($12:oid)
    ta_a := bat.insert(a,3@0,nil); #26:(ta_a:bat[oid,oid])<-(a:bat[oid,oid])($30:oid)($12:oid)
    ua_a := bat.insert(a,3@0,nil); #27:(ua_a:bat[oid,oid])<-(a:bat[oid,oid])($30:oid)($12:oid)
    va_a := algebra.copy(a); #28:(va_a:bat[oid,oid])<-(a:bat[oid,oid])
    wa_a := bat.insert(a,va_a); #29:(wa_a:bat[oid,oid])<-(a:bat[oid,oid])(va_a:bat[oid,oid])
    xa_a := algebra.mark(a,0@0); #30:(xa_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)
    aa := bat.reverse(xa_a); #31:(aa:bat[oid,oid])<-(xa_a:bat[oid,oid])
    tpe := enum_create("tpe",aa); #32 unknown:(tpe:bat[any,any])<-($38:str)(aa:bat[oid,oid])
    aaa := multiplex.script(tpe,"encode",aa); #33 unknown:(aaa:any)<-(tpe:bat[any,any])($40:str)(aa:bat[oid,oid])
    ya_a := enum.encode(tpe,1@0); #34:(ya_a:any)<-(tpe:bat[any,any])($17:oid)
    ab_a := enum.encode(tpe,3@0); #35:(ab_a:any)<-(tpe:bat[any,any])($30:oid)
    brsel := rng_bitselect(aaa,ya_a,ab_a); #36 unknown:(brsel:any)<-(aaa:any)(ya_a:any)(ab_a:any)
    bb_a := tobat(brsel); #37 unknown:(bb_a:any)<-(brsel:any)
    cb_a := semijoin(aa,bb_a); #38 unknown:(cb_a:any)<-(aa:bat[oid,oid])(bb_a:any)
    db_a := print(cb_a); #39 unknown:(db_a:any)<-(cb_a:any)
    eb_a := bit_subhisto(aaa,brsel); #40 unknown:(eb_a:any)<-(aaa:any)(brsel:any)
    fb_a := print(eb_a); #41 unknown:(fb_a:any)<-(eb_a:any)
    gb_a := enum.encode(tpe,2@0); #42:(gb_a:any)<-(tpe:bat[any,any])($50:oid)
    bvsel := val_bitselect(aaa,gb_a); #43 unknown:(bvsel:any)<-(aaa:any)(gb_a:any)
    hb_a := tobat(bvsel); #44 unknown:(hb_a:any)<-(bvsel:any)
    ib_a := semijoin(aa,hb_a); #45 unknown:(ib_a:any)<-(aa:bat[oid,oid])(hb_a:any)
    jb_a := print(ib_a); #46 unknown:(jb_a:any)<-(ib_a:any)
    kb_a := bit_subhisto(aaa,bvsel); #47 unknown:(kb_a:any)<-(aaa:any)(bvsel:any)
    lb_a := print(kb_a); #48 unknown:(lb_a:any)<-(kb_a:any)
    mb_a := enum.encode(tpe,3@0); #49:(mb_a:any)<-(tpe:bat[any,any])($30:oid)
    bvvsel := val_bitselect(brsel,aaa,mb_a); #50 unknown:(bvvsel:any)<-(brsel:any)(aaa:any)(mb_a:any)
    nb_a := bit_subhisto(aaa,bvvsel); #51 unknown:(nb_a:any)<-(aaa:any)(bvvsel:any)
    ob_a := print(nb_a); #52 unknown:(ob_a:any)<-(nb_a:any)
    pb_a := enum.encode(tpe,1@0); #53:(pb_a:any)<-(tpe:bat[any,any])($62:oid)
    qb_a := enum.encode(tpe,2@0); #54:(qb_a:any)<-(tpe:bat[any,any])($50:oid)
    brrsel := rng_bitselect(brsel,aaa,pb_a,qb_a); #55 unknown:(brrsel:any)<-(brsel:any)(aaa:any)(pb_a:any)(qb_a:any)
    rb_a := bit_subhisto(aaa,brrsel); #56 unknown:(rb_a:any)<-(aaa:any)(brrsel:any)
    sb_a := print(rb_a); #57 unknown:(sb_a:any)<-(rb_a:any)
    BAT_WRITE := bbp.bind("BAT_WRITE"); #58:(BAT_WRITE:bat[any,any])<-($68:str)
    tb_a := access(brsel,BAT_WRITE); #59 unknown:(tb_a:any)<-(brsel:any)(BAT_WRITE:bat[any,any])
    ub_a := enum.encode(tpe,1@0); #60:(ub_a:any)<-(tpe:bat[any,any])($62:oid)
    vb_a := enum.encode(tpe,2@0); #61:(vb_a:any)<-(tpe:bat[any,any])($50:oid)
    wb_a := rng_bitrefine(brsel,aaa,ub_a,vb_a); #62 unknown:(wb_a:any)<-(brsel:any)(aaa:any)(ub_a:any)(vb_a:any)
    xb_a := bit_subhisto(aaa,brsel); #63 unknown:(xb_a:any)<-(aaa:any)(brsel:any)
    yb_a := print(xb_a); #64 unknown:(yb_a:any)<-(xb_a:any)
    ac_a := enum.encode(tpe,2@0); #65:(ac_a:any)<-(tpe:bat[any,any])($50:oid)
    bc_a := val_bitrefine(brsel,aaa,ac_a); #66 unknown:(bc_a:any)<-(brsel:any)(aaa:any)(ac_a:any)
    cc_a := bit_subhisto(aaa,brsel); #67 unknown:(cc_a:any)<-(aaa:any)(brsel:any)
    dc_a := print(cc_a); #68 unknown:(dc_a:any)<-(cc_a:any)
    ec_a := enum.encode(tpe,1@0); #69:(ec_a:any)<-(tpe:bat[any,any])($62:oid)
    fc_a := enum.encode(tpe,3@0); #70:(fc_a:any)<-(tpe:bat[any,any])($81:oid)
    bvs := vals_bitselect(aaa,ec_a,fc_a); #71 unknown:(bvs:any)<-(aaa:any)(ec_a:any)(fc_a:any)
barrier gc_a := bunStream(bvs,gc_aH,gc_aT); #72 unknown:(gc_a:any)<-(bvs:any)(gc_aH:any)(gc_aT:any) jump 76
    hc_a := print(gc_aT); #73 unknown:(hc_a:any)<-(gc_aT:any)
    redo gc_a ; #74:(gc_a:any) jump 72
exit gc_a; #75:(gc_a:any)
    ic_a := enum.encode(tpe,1@0); #76:(ic_a:any)<-(tpe:bat[any,any])($62:oid)
    jc_a := enum.encode(tpe,2@0); #77:(jc_a:any)<-(tpe:bat[any,any])($89:oid)
    kc_a := enum.encode(tpe,2@0); #78:(kc_a:any)<-(tpe:bat[any,any])($89:oid)
    lc_a := enum.encode(tpe,3@0); #79:(lc_a:any)<-(tpe:bat[any,any])($81:oid)
    brs := rngs_bitselect(aaa,ic_a,jc_a,kc_a,lc_a); #80 unknown:(brs:any)<-(aaa:any)(ic_a:any)(jc_a:any)(kc_a:any)(lc_a:any)
barrier mc_a := bunStream(brs,mc_aH,mc_aT); #81 unknown:(mc_a:any)<-(brs:any)(mc_aH:any)(mc_aT:any) jump 85
    nc_a := print(mc_aT); #82 unknown:(nc_a:any)<-(mc_aT:any)
    redo mc_a ; #83:(mc_a:any) jump 81
exit mc_a; #84:(mc_a:any)
    bhs := bits_subhisto(aaa,bvvsel,brsel); #85 unknown:(bhs:any)<-(aaa:any)(bvvsel:any)(brsel:any)
barrier oc_a := bunStream(bhs,oc_aH,oc_aT); #86 unknown:(oc_a:any)<-(bhs:any)(oc_aH:any)(oc_aT:any) jump 90
    pc_a := print(oc_aT); #87 unknown:(pc_a:any)<-(oc_aT:any)
    redo oc_a ; #88:(oc_a:any) jump 86
exit oc_a; #89:(oc_a:any)
    qc_a := enum.encode(tpe,1@0); #90:(qc_a:any)<-(tpe:bat[any,any])($103:oid)
    rc_a := enum.encode(tpe,3@0); #91:(rc_a:any)<-(tpe:bat[any,any])($81:oid)
    orsel := rng_oidselect(aaa,qc_a,rc_a); #92 unknown:(orsel:any)<-(aaa:any)(qc_a:any)(rc_a:any)
    sc_a := oid_subhisto(aaa,orsel); #93 unknown:(sc_a:any)<-(aaa:any)(orsel:any)
    tc_a := print(sc_a); #94 unknown:(tc_a:any)<-(sc_a:any)
    uc_a := enum.encode(tpe,2@0); #95:(uc_a:any)<-(tpe:bat[any,any])($89:oid)
    ovsel := val_oidselect(aaa,uc_a); #96 unknown:(ovsel:any)<-(aaa:any)(uc_a:any)
    vc_a := oid_subhisto(aaa,ovsel); #97 unknown:(vc_a:any)<-(aaa:any)(ovsel:any)
    wc_a := print(vc_a); #98 unknown:(wc_a:any)<-(vc_a:any)
    xc_a := enum.encode(tpe,3@0); #99:(xc_a:any)<-(tpe:bat[any,any])($81:oid)
    ovvsel := val_oidselect(orsel,aaa,xc_a); #100 unknown:(ovvsel:any)<-(orsel:any)(aaa:any)(xc_a:any)
    yc_a := oid_subhisto(aaa,ovvsel); #101 unknown:(yc_a:any)<-(aaa:any)(ovvsel:any)
    ad_a := print(yc_a); #102 unknown:(ad_a:any)<-(yc_a:any)
    bd_a := enum.encode(tpe,1@0); #103:(bd_a:any)<-(tpe:bat[any,any])($103:oid)
    cd_a := enum.encode(tpe,2@0); #104:(cd_a:any)<-(tpe:bat[any,any])($89:oid)
    orrsel := rng_oidselect(orsel,aaa,bd_a,cd_a); #105 unknown:(orrsel:any)<-(orsel:any)(aaa:any)(bd_a:any)(cd_a:any)
    dd_a := oid_subhisto(aaa,orrsel); #106 unknown:(dd_a:any)<-(aaa:any)(orrsel:any)
    ed_a := print(dd_a); #107 unknown:(ed_a:any)<-(dd_a:any)
    fd_a := access(orsel,BAT_WRITE); #108 unknown:(fd_a:any)<-(orsel:any)(BAT_WRITE:bat[any,any])
    gd_a := enum.encode(tpe,1@0); #109:(gd_a:any)<-(tpe:bat[any,any])($103:oid)
    hd_a := enum.encode(tpe,2@0); #110:(hd_a:any)<-(tpe:bat[any,any])($124:oid)
    id_a := rng_oidrefine(orsel,aaa,gd_a,hd_a); #111 unknown:(id_a:any)<-(orsel:any)(aaa:any)(gd_a:any)(hd_a:any)
    jd_a := oid_subhisto(aaa,orsel); #112 unknown:(jd_a:any)<-(aaa:any)(orsel:any)
    kd_a := print(jd_a); #113 unknown:(kd_a:any)<-(jd_a:any)
    ld_a := enum.encode(tpe,2@0); #114:(ld_a:any)<-(tpe:bat[any,any])($124:oid)
    md_a := val_oidrefine(orsel,aaa,ld_a); #115 unknown:(md_a:any)<-(orsel:any)(aaa:any)(ld_a:any)
    nd_a := oid_subhisto(aaa,orsel); #116 unknown:(nd_a:any)<-(aaa:any)(orsel:any)
    od_a := print(nd_a); #117 unknown:(od_a:any)<-(nd_a:any)
    pd_a := enum.encode(tpe,1@0); #118:(pd_a:any)<-(tpe:bat[any,any])($103:oid)
    qd_a := enum.encode(tpe,3@0); #119:(qd_a:any)<-(tpe:bat[any,any])($134:oid)
    ovs := vals_oidselect(aaa,pd_a,qd_a); #120 unknown:(ovs:any)<-(aaa:any)(pd_a:any)(qd_a:any)
barrier rd_a := bunStream(ovs,rd_aH,rd_aT); #121 unknown:(rd_a:any)<-(ovs:any)(rd_aH:any)(rd_aT:any) jump 125
    sd_a := print(rd_aT); #122 unknown:(sd_a:any)<-(rd_aT:any)
    redo rd_a ; #123:(rd_a:any) jump 121
exit rd_a; #124:(rd_a:any)
    td_a := enum.encode(tpe,1@0); #125:(td_a:any)<-(tpe:bat[any,any])($141:oid)
    ud_a := enum.encode(tpe,2@0); #126:(ud_a:any)<-(tpe:bat[any,any])($124:oid)
    vd_a := enum.encode(tpe,2@0); #127:(vd_a:any)<-(tpe:bat[any,any])($124:oid)
    wd_a := enum.encode(tpe,3@0); #128:(wd_a:any)<-(tpe:bat[any,any])($134:oid)
    ors := rngs_oidselect(aaa,td_a,ud_a,vd_a,wd_a); #129 unknown:(ors:any)<-(aaa:any)(td_a:any)(ud_a:any)(vd_a:any)(wd_a:any)
barrier xd_a := bunStream(ors,xd_aH,xd_aT); #130 unknown:(xd_a:any)<-(ors:any)(xd_aH:any)(xd_aT:any) jump 134
    yd_a := print(xd_aT); #131 unknown:(yd_a:any)<-(xd_aT:any)
    redo xd_a ; #132:(xd_a:any) jump 130
exit xd_a; #133:(xd_a:any)
end main; #134:
!ERROR: SyntaxError:Admin.main[0]:'Admin.main' contains errors
>