# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
## Mil compiler Version 1.0)
## Copyright (c) 1993-2001, CWI. All rights reserved.
#
## Predefined code segment
##
###line 567 "/ufs/mk/monet_4-3/src/modules/plain/ddbench.mx"
##
#	view_bbp_name:= bbp.getNames();
#	aa_a := reverse(view_bbp_name);
#barrier	ba_a:= exist(aa_a,"tpe");
##if (view_bbp_name.reverse.exist("tpe")) {
#	tpe:= bbp.bind("tpe");
#	tpe := destroy(tpe);
##	tpe := tpe.destroy;
#	commit:= bbp.bind("commit");
##	commit;
##}
#exit	ba_a;
##module(ddbench);
#	a := new(oid,oid);
##a := new(oid,oid);
#	ca_a := insert(a,2@0,nil:oid);
#	da_a := insert(a,2@0,nil:oid);
#	ea_a := insert(a,2@0,nil:oid);
#	fa_a := insert(a,2@0,nil:oid);
##a.insert(2@0,nil:oid); a.insert(2@0,nil); a.insert(2@0,nil); a.insert(2@0,nil);
#	ga_a := insert(a,1@0,nil:oid);
#	ha_a := insert(a,1@0,nil:oid);
#	ia_a := insert(a,1@0,nil:oid);
##a.insert(1@0,nil:oid); a.insert(1@0,nil); a.insert(1@0,nil);
#	ja_a := insert(a,0@0,nil:oid);
#	ka_a := insert(a,0@0,nil:oid);
#	la_a := insert(a,0@0,nil:oid);
#	ma_a := insert(a,0@0,nil:oid);
##a.insert(0@0,nil:oid); a.insert(0@0,nil); a.insert(0@0,nil); a.insert(0@0,nil);
#	na_a := insert(a,0@0,nil:oid);
#	oa_a := insert(a,0@0,nil:oid);
#	pa_a := insert(a,0@0,nil:oid);
#	qa_a := insert(a,0@0,nil:oid);
##a.insert(0@0,nil:oid); a.insert(0@0,nil); a.insert(0@0,nil); a.insert(0@0,nil);
#	ra_a := insert(a,3@0,nil:oid);
#	sa_a := insert(a,3@0,nil:oid);
#	ta_a := insert(a,3@0,nil:oid);
#	ua_a := insert(a,3@0,nil:oid);
##a.insert(3@0,nil); a.insert(3@0,nil); a.insert(3@0,nil); a.insert(3@0,nil);
#	va_a := copy(a);
#	wa_a := insert(a,va_a);
##a.insert(a.copy);
#	xa_a := mark(a,0@0);
#	aa := reverse(xa_a);
##aa := a.mark(0@0).reverse;
#	tpe := enum_create("tpe",aa);
##tpe := enum_create("tpe", aa);
#	aaa := multiplex.script(tpe,"encode",aa);
##aaa := tpe.[encode](aa);
##
#	ya_a := encode(tpe,1@0);
#	ab_a := encode(tpe,3@0);
#	brsel := rng_bitselect(aaa,ya_a,ab_a);
##brsel := rng_bitselect(aaa, tpe.encode(1@0), tpe.encode(3@0));
#	bb_a := tobat(brsel);
#	cb_a := semijoin(aa,bb_a);
#	db_a := print(cb_a);
##aa.semijoin(brsel.tobat).print;
#	eb_a := bit_subhisto(aaa,brsel);
#	fb_a := print(eb_a);
##aaa.bit_subhisto(brsel).print;
##
#	gb_a := encode(tpe,2@0);
#	bvsel := val_bitselect(aaa,gb_a);
##bvsel := val_bitselect(aaa, tpe.encode(2@0));
#	hb_a := tobat(bvsel);
#	ib_a := semijoin(aa,hb_a);
#	jb_a := print(ib_a);
##aa.semijoin(bvsel.tobat).print;
#	kb_a := bit_subhisto(aaa,bvsel);
#	lb_a := print(kb_a);
##aaa.bit_subhisto(bvsel).print;
##
#	mb_a := encode(tpe,3@0);
#	bvvsel := val_bitselect(brsel,aaa,mb_a);
##bvvsel := val_bitselect(brsel, aaa, tpe.encode(3@0));
#	nb_a := bit_subhisto(aaa,bvvsel);
#	ob_a := print(nb_a);
##aaa.bit_subhisto(bvvsel).print;
##
#	pb_a := encode(tpe,1@0);
#	qb_a := encode(tpe,2@0);
#	brrsel := rng_bitselect(brsel,aaa,pb_a,qb_a);
##brrsel := rng_bitselect(brsel, aaa, tpe.encode(1@0), tpe.encode(2@0));
#	rb_a := bit_subhisto(aaa,brrsel);
#	sb_a := print(rb_a);
##aaa.bit_subhisto(brrsel).print;
##
#	BAT_WRITE:= bbp.bind("BAT_WRITE");
#	tb_a := access(brsel,BAT_WRITE);
##brsel.access(BAT_WRITE);
#	ub_a := encode(tpe,1@0);
#	vb_a := encode(tpe,2@0);
#	wb_a := rng_bitrefine(brsel,aaa,ub_a,vb_a);
##rng_bitrefine(brsel, aaa, tpe.encode(1@0), tpe.encode(2@0));
#	xb_a := bit_subhisto(aaa,brsel);
#	yb_a := print(xb_a);
##aaa.bit_subhisto(brsel).print;
##
#	ac_a := encode(tpe,2@0);
#	bc_a := val_bitrefine(brsel,aaa,ac_a);
##val_bitrefine(brsel, aaa, tpe.encode(2@0));
#	cc_a := bit_subhisto(aaa,brsel);
#	dc_a := print(cc_a);
##aaa.bit_subhisto(brsel).print;
##
#	ec_a := encode(tpe,1@0);
#	fc_a := encode(tpe,3@0);
#	bvs := vals_bitselect(aaa,ec_a,fc_a);
##bvs := vals_bitselect(aaa, tpe.encode(1@0), tpe.encode(3@0)); 
#barrier	gc_a:= bunStream(bvs,gc_aH,gc_aT);
#	hc_a := print(gc_aT);
#redo	gc_a;
#exit	gc_a;
##bvs@batloop() print($t);
##
#	ic_a := encode(tpe,1@0);
#	jc_a := encode(tpe,2@0);
##brs := rngs_bitselect(aaa, tpe.encode(1@0), tpe.encode(2@0), 
#	kc_a := encode(tpe,2@0);
#	lc_a := encode(tpe,3@0);
#	brs := rngs_bitselect(aaa,ic_a,jc_a,kc_a,lc_a);
##                           tpe.encode(2@0), tpe.encode(3@0)); 
#barrier	mc_a:= bunStream(brs,mc_aH,mc_aT);
#	nc_a := print(mc_aT);
#redo	mc_a;
#exit	mc_a;
##brs@batloop() print($t);
##
#	bhs := bits_subhisto(aaa,bvvsel,brsel);
##bhs := bits_subhisto(aaa, bvvsel, brsel); 
#barrier	oc_a:= bunStream(bhs,oc_aH,oc_aT);
#	pc_a := print(oc_aT);
#redo	oc_a;
#exit	oc_a;
##bhs@batloop() print($t);
##
#	qc_a := encode(tpe,1@0);
#	rc_a := encode(tpe,3@0);
#	orsel := rng_oidselect(aaa,qc_a,rc_a);
##orsel := rng_oidselect(aaa, tpe.encode(1@0), tpe.encode(3@0));
#	sc_a := oid_subhisto(aaa,orsel);
#	tc_a := print(sc_a);
##aaa.oid_subhisto(orsel).print;
##
#	uc_a := encode(tpe,2@0);
#	ovsel := val_oidselect(aaa,uc_a);
##ovsel := val_oidselect(aaa, tpe.encode(2@0));
#	vc_a := oid_subhisto(aaa,ovsel);
#	wc_a := print(vc_a);
##aaa.oid_subhisto(ovsel).print;
##
#	xc_a := encode(tpe,3@0);
#	ovvsel := val_oidselect(orsel,aaa,xc_a);
##ovvsel := val_oidselect(orsel, aaa, tpe.encode(3@0));
#	yc_a := oid_subhisto(aaa,ovvsel);
#	ad_a := print(yc_a);
##aaa.oid_subhisto(ovvsel).print;
##
#	bd_a := encode(tpe,1@0);
#	cd_a := encode(tpe,2@0);
#	orrsel := rng_oidselect(orsel,aaa,bd_a,cd_a);
##orrsel := rng_oidselect(orsel, aaa, tpe.encode(1@0), tpe.encode(2@0));
#	dd_a := oid_subhisto(aaa,orrsel);
#	ed_a := print(dd_a);
##aaa.oid_subhisto(orrsel).print;
##
#	fd_a := access(orsel,BAT_WRITE);
##orsel.access(BAT_WRITE);
#	gd_a := encode(tpe,1@0);
#	hd_a := encode(tpe,2@0);
#	id_a := rng_oidrefine(orsel,aaa,gd_a,hd_a);
##rng_oidrefine(orsel, aaa, tpe.encode(1@0), tpe.encode(2@0));
#	jd_a := oid_subhisto(aaa,orsel);
#	kd_a := print(jd_a);
##aaa.oid_subhisto(orsel).print;
##
#	ld_a := encode(tpe,2@0);
#	md_a := val_oidrefine(orsel,aaa,ld_a);
##val_oidrefine(orsel, aaa, tpe.encode(2@0));
#	nd_a := oid_subhisto(aaa,orsel);
#	od_a := print(nd_a);
##aaa.oid_subhisto(orsel).print;
##
#	pd_a := encode(tpe,1@0);
#	qd_a := encode(tpe,3@0);
#	ovs := vals_oidselect(aaa,pd_a,qd_a);
##ovs := vals_oidselect(aaa, tpe.encode(1@0), tpe.encode(3@0)); 
#barrier	rd_a:= bunStream(ovs,rd_aH,rd_aT);
#	sd_a := print(rd_aT);
#redo	rd_a;
#exit	rd_a;
##ovs@batloop() print($t);
##
#	td_a := encode(tpe,1@0);
#	ud_a := encode(tpe,2@0);
##ors := rngs_oidselect(aaa, tpe.encode(1@0), tpe.encode(2@0), 
#	vd_a := encode(tpe,2@0);
#	wd_a := encode(tpe,3@0);
#	ors := rngs_oidselect(aaa,td_a,ud_a,vd_a,wd_a);
##                           tpe.encode(2@0), tpe.encode(3@0)); 
#barrier	xd_a:= bunStream(ors,xd_aH,xd_aT);
#	yd_a := print(xd_aT);
#redo	xd_a;
#exit	xd_a;
##ors@batloop() print($t);
##
##
#
!ERROR: type conflict in statement .destroy[5]
!ERROR: type conflict in statement .destroy[5]
!ERROR: type conflict in assignment of bat.destroy
!ERROR: 'destroy' undefined in Admin.main[5]
!ERROR: 'enum_create' undefined in Admin.main[32]
!ERROR: multiplexType:string constant expected in main[33]
!ERROR: 'multiplex.script' undefined in Admin.main[33]
!ERROR: 'rng_bitselect' undefined in Admin.main[36]
!ERROR: 'tobat' undefined in Admin.main[37]
!ERROR: 'bit_subhisto' undefined in Admin.main[40]
!ERROR: 'val_bitselect' undefined in Admin.main[43]
!ERROR: 'tobat' undefined in Admin.main[44]
!ERROR: 'bit_subhisto' undefined in Admin.main[47]
!ERROR: 'val_bitselect' undefined in Admin.main[50]
!ERROR: 'bit_subhisto' undefined in Admin.main[51]
!ERROR: 'rng_bitselect' undefined in Admin.main[55]
!ERROR: 'bit_subhisto' undefined in Admin.main[56]
!ERROR: 'access' undefined in Admin.main[59]
!ERROR: 'rng_bitrefine' undefined in Admin.main[62]
!ERROR: 'bit_subhisto' undefined in Admin.main[63]
!ERROR: 'val_bitrefine' undefined in Admin.main[66]
!ERROR: 'bit_subhisto' undefined in Admin.main[67]
!ERROR: 'vals_bitselect' undefined in Admin.main[71]
!ERROR: 'rngs_bitselect' undefined in Admin.main[80]
!ERROR: 'bits_subhisto' undefined in Admin.main[85]
!ERROR: 'rng_oidselect' undefined in Admin.main[92]
!ERROR: 'oid_subhisto' undefined in Admin.main[93]
!ERROR: 'val_oidselect' undefined in Admin.main[96]
!ERROR: 'oid_subhisto' undefined in Admin.main[97]
!ERROR: 'val_oidselect' undefined in Admin.main[100]
!ERROR: 'oid_subhisto' undefined in Admin.main[101]
!ERROR: 'rng_oidselect' undefined in Admin.main[105]
!ERROR: 'oid_subhisto' undefined in Admin.main[106]
!ERROR: 'access' undefined in Admin.main[108]
!ERROR: 'rng_oidrefine' undefined in Admin.main[111]
!ERROR: 'oid_subhisto' undefined in Admin.main[112]
!ERROR: 'val_oidrefine' undefined in Admin.main[115]
!ERROR: 'oid_subhisto' undefined in Admin.main[116]
!ERROR: 'vals_oidselect' undefined in Admin.main[120]
!ERROR: 'rngs_oidselect' undefined in Admin.main[129]
function Admin.main():int; #0  (main:int)
    view_bbp_name := bbp.getNames(); #1 CMDbbpNames (view_bbp_name:bat[int,str])
    aa_a := bat.reverse(view_bbp_name); #2 CMDreverse (aa_a:bat[str,int])<-(view_bbp_name:bat[int,str])
barrier ba_a := algebra.exist(aa_a,"tpe"); #3 CMDexist (ba_a:bit)<-(aa_a:bat[str,int])($4:str) jump 7
    tpe := bbp.bind("tpe"); #4 CMDbbpbind (tpe:bat[any,any])<-($4:str)
    tpe := destroy(tpe); #5  unknown (tpe:bat[any,any])<-(tpe:bat[any,any])
    commit := bbp.bind("commit"); #6 CMDbbpbind (commit:bat[any,any])<-($7:str)
exit ba_a; #7  (ba_a:bit)
    a := bbp.new(oid,oid); #8 CMDBATnew (a:bat[oid,oid])<-(oid:oid)(oid:oid)
    ca_a := bat.insert(a,2@0,nil); #9 CMDinsert_bun (ca_a:bat[oid,oid])<-(a:bat[oid,oid])($11:oid)($12:oid)
    da_a := bat.insert(a,2@0,nil); #10 CMDinsert_bun (da_a:bat[oid,oid])<-(a:bat[oid,oid])($11:oid)($12:oid)
    ea_a := bat.insert(a,2@0,nil); #11 CMDinsert_bun (ea_a:bat[oid,oid])<-(a:bat[oid,oid])($11:oid)($12:oid)
    fa_a := bat.insert(a,2@0,nil); #12 CMDinsert_bun (fa_a:bat[oid,oid])<-(a:bat[oid,oid])($11:oid)($12:oid)
    ga_a := bat.insert(a,1@0,nil); #13 CMDinsert_bun (ga_a:bat[oid,oid])<-(a:bat[oid,oid])($17:oid)($12:oid)
    ha_a := bat.insert(a,1@0,nil); #14 CMDinsert_bun (ha_a:bat[oid,oid])<-(a:bat[oid,oid])($17:oid)($12:oid)
    ia_a := bat.insert(a,1@0,nil); #15 CMDinsert_bun (ia_a:bat[oid,oid])<-(a:bat[oid,oid])($17:oid)($12:oid)
    ja_a := bat.insert(a,0@0,nil); #16 CMDinsert_bun (ja_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    ka_a := bat.insert(a,0@0,nil); #17 CMDinsert_bun (ka_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    la_a := bat.insert(a,0@0,nil); #18 CMDinsert_bun (la_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    ma_a := bat.insert(a,0@0,nil); #19 CMDinsert_bun (ma_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    na_a := bat.insert(a,0@0,nil); #20 CMDinsert_bun (na_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    oa_a := bat.insert(a,0@0,nil); #21 CMDinsert_bun (oa_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    pa_a := bat.insert(a,0@0,nil); #22 CMDinsert_bun (pa_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    qa_a := bat.insert(a,0@0,nil); #23 CMDinsert_bun (qa_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)($12:oid)
    ra_a := bat.insert(a,3@0,nil); #24 CMDinsert_bun (ra_a:bat[oid,oid])<-(a:bat[oid,oid])($30:oid)($12:oid)
    sa_a := bat.insert(a,3@0,nil); #25 CMDinsert_bun (sa_a:bat[oid,oid])<-(a:bat[oid,oid])($30:oid)($12:oid)
    ta_a := bat.insert(a,3@0,nil); #26 CMDinsert_bun (ta_a:bat[oid,oid])<-(a:bat[oid,oid])($30:oid)($12:oid)
    ua_a := bat.insert(a,3@0,nil); #27 CMDinsert_bun (ua_a:bat[oid,oid])<-(a:bat[oid,oid])($30:oid)($12:oid)
    va_a := algebra.copy(a); #28 CMDcopy (va_a:bat[oid,oid])<-(a:bat[oid,oid])
    wa_a := bat.insert(a,va_a); #29 CMDinsert_bat (wa_a:bat[oid,oid])<-(a:bat[oid,oid])(va_a:bat[oid,oid])
    xa_a := algebra.mark(a,0@0); #30 CMDmark (xa_a:bat[oid,oid])<-(a:bat[oid,oid])($21:oid)
    aa := bat.reverse(xa_a); #31 CMDreverse (aa:bat[oid,oid])<-(xa_a:bat[oid,oid])
    tpe := enum_create("tpe",aa); #32  unknown (tpe:bat[any,any])<-($38:str)(aa:bat[oid,oid])
    aaa := multiplex.script(tpe,"encode",aa); #33  unknown (aaa:any)<-(tpe:bat[any,any])($40:str)(aa:bat[oid,oid])
    ya_a := enum.encode(tpe,1@0); #34 ENUMencode (ya_a:any)<-(tpe:bat[any,any])($17:oid)
    ab_a := enum.encode(tpe,3@0); #35 ENUMencode (ab_a:any)<-(tpe:bat[any,any])($30:oid)
    brsel := rng_bitselect(aaa,ya_a,ab_a); #36  unknown (brsel:any)<-(aaa:any)(ya_a:any)(ab_a:any)
    bb_a := tobat(brsel); #37  unknown (bb_a:bat[oid,any])<-(brsel:any)
    cb_a := algebra.semijoin(aa,bb_a); #38 CMDsemijoin (cb_a:bat[oid,oid])<-(aa:bat[oid,oid])(bb_a:bat[oid,any])
    db_a := io.print(cb_a); #39 CMDprint_val (db_a:int)<-(cb_a:bat[oid,oid])
    eb_a := bit_subhisto(aaa,brsel); #40  unknown (eb_a:any)<-(aaa:any)(brsel:any)
    fb_a := io.print(eb_a); #41 CMDprint_val (fb_a:int)<-(eb_a:any)
    gb_a := enum.encode(tpe,2@0); #42 ENUMencode (gb_a:any)<-(tpe:bat[any,any])($50:oid)
    bvsel := val_bitselect(aaa,gb_a); #43  unknown (bvsel:any)<-(aaa:any)(gb_a:any)
    hb_a := tobat(bvsel); #44  unknown (hb_a:bat[oid,any])<-(bvsel:any)
    ib_a := algebra.semijoin(aa,hb_a); #45 CMDsemijoin (ib_a:bat[oid,oid])<-(aa:bat[oid,oid])(hb_a:bat[oid,any])
    jb_a := io.print(ib_a); #46 CMDprint_val (jb_a:int)<-(ib_a:bat[oid,oid])
    kb_a := bit_subhisto(aaa,bvsel); #47  unknown (kb_a:any)<-(aaa:any)(bvsel:any)
    lb_a := io.print(kb_a); #48 CMDprint_val (lb_a:int)<-(kb_a:any)
    mb_a := enum.encode(tpe,3@0); #49 ENUMencode (mb_a:any)<-(tpe:bat[any,any])($30:oid)
    bvvsel := val_bitselect(brsel,aaa,mb_a); #50  unknown (bvvsel:any)<-(brsel:any)(aaa:any)(mb_a:any)
    nb_a := bit_subhisto(aaa,bvvsel); #51  unknown (nb_a:any)<-(aaa:any)(bvvsel:any)
    ob_a := io.print(nb_a); #52 CMDprint_val (ob_a:int)<-(nb_a:any)
    pb_a := enum.encode(tpe,1@0); #53 ENUMencode (pb_a:any)<-(tpe:bat[any,any])($62:oid)
    qb_a := enum.encode(tpe,2@0); #54 ENUMencode (qb_a:any)<-(tpe:bat[any,any])($50:oid)
    brrsel := rng_bitselect(brsel,aaa,pb_a,qb_a); #55  unknown (brrsel:any)<-(brsel:any)(aaa:any)(pb_a:any)(qb_a:any)
    rb_a := bit_subhisto(aaa,brrsel); #56  unknown (rb_a:any)<-(aaa:any)(brrsel:any)
    sb_a := io.print(rb_a); #57 CMDprint_val (sb_a:int)<-(rb_a:any)
    BAT_WRITE := bbp.bind("BAT_WRITE"); #58 CMDbbpbind (BAT_WRITE:bat[any,any])<-($68:str)
    tb_a := access(brsel,BAT_WRITE); #59  unknown (tb_a:any)<-(brsel:any)(BAT_WRITE:bat[any,any])
    ub_a := enum.encode(tpe,1@0); #60 ENUMencode (ub_a:any)<-(tpe:bat[any,any])($62:oid)
    vb_a := enum.encode(tpe,2@0); #61 ENUMencode (vb_a:any)<-(tpe:bat[any,any])($50:oid)
    wb_a := rng_bitrefine(brsel,aaa,ub_a,vb_a); #62  unknown (wb_a:any)<-(brsel:any)(aaa:any)(ub_a:any)(vb_a:any)
    xb_a := bit_subhisto(aaa,brsel); #63  unknown (xb_a:any)<-(aaa:any)(brsel:any)
    yb_a := io.print(xb_a); #64 CMDprint_val (yb_a:int)<-(xb_a:any)
    ac_a := enum.encode(tpe,2@0); #65 ENUMencode (ac_a:any)<-(tpe:bat[any,any])($50:oid)
    bc_a := val_bitrefine(brsel,aaa,ac_a); #66  unknown (bc_a:any)<-(brsel:any)(aaa:any)(ac_a:any)
    cc_a := bit_subhisto(aaa,brsel); #67  unknown (cc_a:any)<-(aaa:any)(brsel:any)
    dc_a := io.print(cc_a); #68 CMDprint_val (dc_a:int)<-(cc_a:any)
    ec_a := enum.encode(tpe,1@0); #69 ENUMencode (ec_a:any)<-(tpe:bat[any,any])($62:oid)
    fc_a := enum.encode(tpe,3@0); #70 ENUMencode (fc_a:any)<-(tpe:bat[any,any])($81:oid)
    bvs := vals_bitselect(aaa,ec_a,fc_a); #71  unknown (bvs:bat[any,any])<-(aaa:any)(ec_a:any)(fc_a:any)
barrier gc_a := bbp.bunStream(bvs,gc_aH,gc_aT); #72 CMDbunStream (gc_a:lng)<-(bvs:bat[any,any])(gc_aH:any)(gc_aT:any) jump 75
    hc_a := io.print(gc_aT); #73 CMDprint_val (hc_a:int)<-(gc_aT:any)
    redo gc_a; #74  (gc_a:lng) jump 72
exit gc_a; #75  (gc_a:lng)
    ic_a := enum.encode(tpe,1@0); #76 ENUMencode (ic_a:any)<-(tpe:bat[any,any])($62:oid)
    jc_a := enum.encode(tpe,2@0); #77 ENUMencode (jc_a:any)<-(tpe:bat[any,any])($89:oid)
    kc_a := enum.encode(tpe,2@0); #78 ENUMencode (kc_a:any)<-(tpe:bat[any,any])($89:oid)
    lc_a := enum.encode(tpe,3@0); #79 ENUMencode (lc_a:any)<-(tpe:bat[any,any])($81:oid)
    brs := rngs_bitselect(aaa,ic_a,jc_a,kc_a,lc_a); #80  unknown (brs:bat[any,any])<-(aaa:any)(ic_a:any)(jc_a:any)(kc_a:any)(lc_a:any)
barrier mc_a := bbp.bunStream(brs,mc_aH,mc_aT); #81 CMDbunStream (mc_a:lng)<-(brs:bat[any,any])(mc_aH:any)(mc_aT:any) jump 84
    nc_a := io.print(mc_aT); #82 CMDprint_val (nc_a:int)<-(mc_aT:any)
    redo mc_a; #83  (mc_a:lng) jump 81
exit mc_a; #84  (mc_a:lng)
    bhs := bits_subhisto(aaa,bvvsel,brsel); #85  unknown (bhs:bat[any,any])<-(aaa:any)(bvvsel:any)(brsel:any)
barrier oc_a := bbp.bunStream(bhs,oc_aH,oc_aT); #86 CMDbunStream (oc_a:lng)<-(bhs:bat[any,any])(oc_aH:any)(oc_aT:any) jump 89
    pc_a := io.print(oc_aT); #87 CMDprint_val (pc_a:int)<-(oc_aT:any)
    redo oc_a; #88  (oc_a:lng) jump 86
exit oc_a; #89  (oc_a:lng)
    qc_a := enum.encode(tpe,1@0); #90 ENUMencode (qc_a:any)<-(tpe:bat[any,any])($103:oid)
    rc_a := enum.encode(tpe,3@0); #91 ENUMencode (rc_a:any)<-(tpe:bat[any,any])($81:oid)
    orsel := rng_oidselect(aaa,qc_a,rc_a); #92  unknown (orsel:any)<-(aaa:any)(qc_a:any)(rc_a:any)
    sc_a := oid_subhisto(aaa,orsel); #93  unknown (sc_a:any)<-(aaa:any)(orsel:any)
    tc_a := io.print(sc_a); #94 CMDprint_val (tc_a:int)<-(sc_a:any)
    uc_a := enum.encode(tpe,2@0); #95 ENUMencode (uc_a:any)<-(tpe:bat[any,any])($89:oid)
    ovsel := val_oidselect(aaa,uc_a); #96  unknown (ovsel:any)<-(aaa:any)(uc_a:any)
    vc_a := oid_subhisto(aaa,ovsel); #97  unknown (vc_a:any)<-(aaa:any)(ovsel:any)
    wc_a := io.print(vc_a); #98 CMDprint_val (wc_a:int)<-(vc_a:any)
    xc_a := enum.encode(tpe,3@0); #99 ENUMencode (xc_a:any)<-(tpe:bat[any,any])($81:oid)
    ovvsel := val_oidselect(orsel,aaa,xc_a); #100  unknown (ovvsel:any)<-(orsel:any)(aaa:any)(xc_a:any)
    yc_a := oid_subhisto(aaa,ovvsel); #101  unknown (yc_a:any)<-(aaa:any)(ovvsel:any)
    ad_a := io.print(yc_a); #102 CMDprint_val (ad_a:int)<-(yc_a:any)
    bd_a := enum.encode(tpe,1@0); #103 ENUMencode (bd_a:any)<-(tpe:bat[any,any])($103:oid)
    cd_a := enum.encode(tpe,2@0); #104 ENUMencode (cd_a:any)<-(tpe:bat[any,any])($89:oid)
    orrsel := rng_oidselect(orsel,aaa,bd_a,cd_a); #105  unknown (orrsel:any)<-(orsel:any)(aaa:any)(bd_a:any)(cd_a:any)
    dd_a := oid_subhisto(aaa,orrsel); #106  unknown (dd_a:any)<-(aaa:any)(orrsel:any)
    ed_a := io.print(dd_a); #107 CMDprint_val (ed_a:int)<-(dd_a:any)
    fd_a := access(orsel,BAT_WRITE); #108  unknown (fd_a:any)<-(orsel:any)(BAT_WRITE:bat[any,any])
    gd_a := enum.encode(tpe,1@0); #109 ENUMencode (gd_a:any)<-(tpe:bat[any,any])($103:oid)
    hd_a := enum.encode(tpe,2@0); #110 ENUMencode (hd_a:any)<-(tpe:bat[any,any])($124:oid)
    id_a := rng_oidrefine(orsel,aaa,gd_a,hd_a); #111  unknown (id_a:any)<-(orsel:any)(aaa:any)(gd_a:any)(hd_a:any)
    jd_a := oid_subhisto(aaa,orsel); #112  unknown (jd_a:any)<-(aaa:any)(orsel:any)
    kd_a := io.print(jd_a); #113 CMDprint_val (kd_a:int)<-(jd_a:any)
    ld_a := enum.encode(tpe,2@0); #114 ENUMencode (ld_a:any)<-(tpe:bat[any,any])($124:oid)
    md_a := val_oidrefine(orsel,aaa,ld_a); #115  unknown (md_a:any)<-(orsel:any)(aaa:any)(ld_a:any)
    nd_a := oid_subhisto(aaa,orsel); #116  unknown (nd_a:any)<-(aaa:any)(orsel:any)
    od_a := io.print(nd_a); #117 CMDprint_val (od_a:int)<-(nd_a:any)
    pd_a := enum.encode(tpe,1@0); #118 ENUMencode (pd_a:any)<-(tpe:bat[any,any])($103:oid)
    qd_a := enum.encode(tpe,3@0); #119 ENUMencode (qd_a:any)<-(tpe:bat[any,any])($134:oid)
    ovs := vals_oidselect(aaa,pd_a,qd_a); #120  unknown (ovs:bat[any,any])<-(aaa:any)(pd_a:any)(qd_a:any)
barrier rd_a := bbp.bunStream(ovs,rd_aH,rd_aT); #121 CMDbunStream (rd_a:lng)<-(ovs:bat[any,any])(rd_aH:any)(rd_aT:any) jump 124
    sd_a := io.print(rd_aT); #122 CMDprint_val (sd_a:int)<-(rd_aT:any)
    redo rd_a; #123  (rd_a:lng) jump 121
exit rd_a; #124  (rd_a:lng)
    td_a := enum.encode(tpe,1@0); #125 ENUMencode (td_a:any)<-(tpe:bat[any,any])($141:oid)
    ud_a := enum.encode(tpe,2@0); #126 ENUMencode (ud_a:any)<-(tpe:bat[any,any])($124:oid)
    vd_a := enum.encode(tpe,2@0); #127 ENUMencode (vd_a:any)<-(tpe:bat[any,any])($124:oid)
    wd_a := enum.encode(tpe,3@0); #128 ENUMencode (wd_a:any)<-(tpe:bat[any,any])($134:oid)
    ors := rngs_oidselect(aaa,td_a,ud_a,vd_a,wd_a); #129  unknown (ors:bat[any,any])<-(aaa:any)(td_a:any)(ud_a:any)(vd_a:any)(wd_a:any)
barrier xd_a := bbp.bunStream(ors,xd_aH,xd_aT); #130 CMDbunStream (xd_a:lng)<-(ors:bat[any,any])(xd_aH:any)(xd_aT:any) jump 133
    yd_a := io.print(xd_aT); #131 CMDprint_val (yd_a:int)<-(xd_aT:any)
    redo xd_a; #132  (xd_a:lng) jump 130
exit xd_a; #133  (xd_a:lng)
end main; #134  
>