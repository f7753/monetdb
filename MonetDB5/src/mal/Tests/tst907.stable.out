stdout of test 'tst907` in directory 'src/mal` itself:


# 08:01:38 >  
# 08:01:38 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst907.mal </dev/null
# 08:01:38 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#function one(base:int):int;
#	print(base);
#	return base;
#end one;
function user.one(base:int):int;	# 0  (one:int)<-(base:int)
    io.print(base);	# 1 IOprint_val ($2:int)<-(base:int)
    return base;	# 2  (base:int)
end one;	# 3  
#
#function three(base:int,x:int,y:int):int;
#	print(base);
#	return base;
#end three;
function user.three(base:int,x:int,y:int):int;	# 0  (three:int)<-(base:int)(x:int)(y:int)
    io.print(base);	# 1 IOprint_val ($4:int)<-(base:int)
    return base;	# 2  (base:int)
end three;	# 3  
#function pow(base:int,raise:int):int;
#        mg_a := calc.dbl(base);
#        ng_a := calc.dbl(raise);
#        og_a := *(mg_a,ng_a);
#        pg_a := calc.int(og_a);
#        return pg_a;
#end pow;
function user.pow(base:int,raise:int):int;	# 0  (pow:int)<-(base:int)(raise:int)
    mg_a := calc.dbl(base);	# 1 CALCint2dbl (mg_a:dbl)<-(base:int)
    ng_a := calc.dbl(raise);	# 2 CALCint2dbl (ng_a:dbl)<-(raise:int)
    og_a := calc.*(mg_a,ng_a);	# 3 CALCbinaryMULdbldbl (og_a:dbl)<-(mg_a:dbl)(ng_a:dbl)
    pg_a := calc.int(og_a);	# 4 CALCdbl2int (pg_a:int)<-(og_a:dbl)
    return pg_a;	# 5  (pg_a:int)
end pow;	# 6  
#k:=one(1);
#l:=three(1,2,3);
#p:= pow(1,2);
#
#b:=new(:int,:int);
#insert(b,1,1);
#
#print("do multiplex three test");
#z:=multiplex.tactics("three",b,2,3);
#print("do multiplex one test");
#z:=multiplex.tactics("one",b);
#print("do multiplex pow test");
#z:=multiplex.tactics("pow",b,2);
#print(z);
#
function user.main():int;	# 0  (main:int)
    k := user.one(1);	# 1  (k:int)<-($2:int)
    l := user.three(1,2,3);	# 2  (l:int)<-($2:int)($4:int)($5:int)
    p := user.pow(1,2);	# 3  (p:int)<-($2:int)($4:int)
    b := bbp.new(:int,:int);	# 4 CMDBATnew (b:bat[:int,:int])<-($8:int)($8:int)
    bat.insert(b,1,1);	# 5 BKCinsert_bun ($9:bat[:int,:int])<-(b:bat[:int,:int])($2:int)($2:int)
    io.print("do multiplex three test");	# 6 IOprint_val ($10:int)<-($11:str)
    $21 := bbp.new(:int,:int);	# 7 CMDBATnew ($21:bat[:int,:int])<-($22:int)($22:int)
barrier ($24,$25,$26):= chopper.newIterator(b);	# 8 CHPbunIterator ($24:lng)($25:int)($26:int)<-(b:bat[:int,:int]) jump 14
    $28 := user.three($26,2,3);	# 9  ($28:int)<-($26:int)($4:int)($5:int)
    bat.insert($21,$25,$28);	# 10 BKCinsert_bun ($29:bat[:int,:int])<-($21:bat[:int,:int])($25:int)($28:int)
catch MALexception;	# 11  (MALexception:str) jump 12
exit MALexception;	# 12  (MALexception:str)
    redo ($24,$25,$26):= chopper.hasMoreElements(b);	# 13 CHPbunHasMoreElements ($24:lng)($25:int)($26:int)<-(b:bat[:int,:int]) jump 9
exit ($24,$25,$26);	# 14  ($24:lng)($25:int)($26:int)
    z := $21;	# 15  (z:bat[:int,:int])<-($21:bat[:int,:int])
    io.print("do multiplex one test");	# 16 IOprint_val ($14:int)<-($15:str)
    $34 := bbp.new(:int,:int);	# 17 CMDBATnew ($34:bat[:int,:int])<-($22:int)($22:int)
barrier ($36,$37,$38):= chopper.newIterator(b);	# 18 CHPbunIterator ($36:lng)($37:int)($38:int)<-(b:bat[:int,:int]) jump 24
    $40 := user.one($38);	# 19  ($40:int)<-($38:int)
    bat.insert($34,$37,$40);	# 20 BKCinsert_bun ($41:bat[:int,:int])<-($34:bat[:int,:int])($37:int)($40:int)
catch MALexception;	# 21  (MALexception:str) jump 22
exit MALexception;	# 22  (MALexception:str)
    redo ($36,$37,$38):= chopper.hasMoreElements(b);	# 23 CHPbunHasMoreElements ($36:lng)($37:int)($38:int)<-(b:bat[:int,:int]) jump 19
exit ($36,$37,$38);	# 24  ($36:lng)($37:int)($38:int)
    z := $34;	# 25  (z:bat[:int,:int])<-($34:bat[:int,:int])
    io.print("do multiplex pow test");	# 26 IOprint_val ($17:int)<-($18:str)
    $46 := bbp.new(:int,:int);	# 27 CMDBATnew ($46:bat[:int,:int])<-($22:int)($22:int)
barrier ($48,$49,$50):= chopper.newIterator(b);	# 28 CHPbunIterator ($48:lng)($49:int)($50:int)<-(b:bat[:int,:int]) jump 34
    $52 := user.pow($50,2);	# 29  ($52:int)<-($50:int)($4:int)
    bat.insert($46,$49,$52);	# 30 BKCinsert_bun ($53:bat[:int,:int])<-($46:bat[:int,:int])($49:int)($52:int)
catch MALexception;	# 31  (MALexception:str) jump 32
exit MALexception;	# 32  (MALexception:str)
    redo ($48,$49,$50):= chopper.hasMoreElements(b);	# 33 CHPbunHasMoreElements ($48:lng)($49:int)($50:int)<-(b:bat[:int,:int]) jump 29
exit ($48,$49,$50);	# 34  ($48:lng)($49:int)($50:int)
    z := $46;	# 35  (z:bat[:int,:int])<-($46:bat[:int,:int])
    io.print(z);	# 36 IOprint_val ($20:int)<-(z:bat[:int,:int])
end main;	# 37  
[ 1 ]
[ 1 ]
[ "do multiplex three test" ]
[ 1 ]
[ "do multiplex one test" ]
[ 1 ]
[ "do multiplex pow test" ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]

# 08:01:38 >  
# 08:01:38 >  Done.
# 08:01:38 >  

