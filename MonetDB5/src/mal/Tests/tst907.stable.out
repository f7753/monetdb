# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
# Visit http://monetdb.cwi.nl for further information.
#function one(base:int):int;
#	print(base);
#	return base;
#end one;
function Admin.one(base:int):int;	# 0  (one:int)<-(base:int)
    io.print(base);	# 1 IOprint_val ($2:int)<-(base:int)
    return base;	# 2  (base:int)
end one;	# 3  
#
#function three(base:int,x:int,y:int):int;
#	print(base);
#	return base;
#end three;
function Admin.three(base:int,x:int,y:int):int;	# 0  (three:int)<-(base:int)(x:int)(y:int)
    io.print(base);	# 1 IOprint_val ($4:int)<-(base:int)
    return base;	# 2  (base:int)
end three;	# 3  
#function pow(base:int,raise:int):int;
#        mg_a := calc.dbl(base);
#        ng_a := calc.dbl(raise);
#        og_a := *(mg_a,ng_a);
#        pg_a := calc.int(og_a);
#        return pg_a;
#end pow;
function Admin.pow(base:int,raise:int):int;	# 0  (pow:int)<-(base:int)(raise:int)
    mg_a := calc.dbl(base);	# 1 CALCint2dbl (mg_a:dbl)<-(base:int)
    ng_a := calc.dbl(raise);	# 2 CALCint2dbl (ng_a:dbl)<-(raise:int)
    og_a := calc.*(mg_a,ng_a);	# 3 CALCbinaryMULdbldbl (og_a:dbl)<-(mg_a:dbl)(ng_a:dbl)
    pg_a := calc.int(og_a);	# 4 CALCdbl2int (pg_a:int)<-(og_a:dbl)
    return pg_a;	# 5  (pg_a:int)
end pow;	# 6  
#k:=one(1);
#l:=three(1,2,3);
#p:= pow(1,2);
#
#b:=new(:int,:int);
#insert(b,1,1);
#
#print("do multiplex three test");
#z:=multiplex.tactics("three",b,2,3);
#print("do multiplex one test");
#z:=multiplex.tactics("one",b);
#print("do multiplex pow test");
#z:=multiplex.tactics("pow",b,2);
#print(z);
#
function Admin.main():int;	# 0  (main:int)
    k := Admin.one(1);	# 1  (k:int)<-($2:int)
    l := Admin.three(1,2,3);	# 2  (l:int)<-($2:int)($4:int)($5:int)
    p := Admin.pow(1,2);	# 3  (p:int)<-($2:int)($4:int)
    b := bbp.new(:int,:int);	# 4 CMDBATnew (b:bat[:int,:int])<-($8:int)($9:int)
    bat.insert(b,1,1);	# 5 BKCinsert_bun ($10:void)<-(b:bat[:int,:int])($2:int)($2:int)
    io.print("do multiplex three test");	# 6 IOprint_val ($11:int)<-($12:str)
    z := multiplex.script("three",b,2,3);	# 7  (z:bat[:int,:int])<-($14:str)(b:bat[:int,:int])($4:int)($5:int)
    io.print("do multiplex one test");	# 8 IOprint_val ($15:int)<-($16:str)
    z := multiplex.script("one",b);	# 9  (z:bat[:int,:int])<-($17:str)(b:bat[:int,:int])
    io.print("do multiplex pow test");	# 10 IOprint_val ($18:int)<-($19:str)
    z := multiplex.script("pow",b,2);	# 11  (z:bat[:int,:int])<-($20:str)(b:bat[:int,:int])($4:int)
    io.print(z);	# 12 IOprint_val ($21:int)<-(z:bat[:int,:int])
end main;	# 13  
[ 1 ]
[ 1 ]
[ "do multiplex three test" ]
[ 1 ]
[ "do multiplex one test" ]
[ 1 ]
[ "do multiplex pow test" ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
>