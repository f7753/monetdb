# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
## this sequence tests nil type management 
#b:=nil;	print(b);
#
#a:=23;	print(a);
#a:= int(nil);	print(a);
#a:= int(13);	print(a);
#a:= int("23");	print(a);
#a:= int(43.0:flt);	print(a);
#a:= int(63.0:dbl);	print(a);
#
#c:= true;	print(c);
#c:= bit(nil);	print(c);
#c:= bit(false);	print(c);
#c:= bit(1);	print(c);
#c:= bit("true");	print(c);
#c:= bit(1.0:flt);	print(c);
#c:= bit(0.0:dbl);	print(c);
#
#d:= 3.14:flt;	print(d);
#d:= flt(nil);	print(d);
#d:= flt(5);	print(d);
#d:= flt("7.14");	print(d);
#
#e:= "hello";	print(e);
#e:= str(nil);	print(e);
#e:= str("nil");	print(e);
#
#f:= 'Z';	print(f);
#f:= chr(nil);	print(f);
#f:= chr("X");	print(f);
#
function Admin.main():int;	# 0  (main:int)
    b := nil;	# 1  (b:void)<-($2:void)
    io.print(b);	# 2 CMDprint_val ($3:int)<-(b:void)
    a := 23;	# 3  (a:int)<-($5:int)
    io.print(a);	# 4 CMDprint_val ($6:int)<-(a:int)
    a := calc.int(nil);	# 5 CALCnil2int (a:int)<-($2:void)
    io.print(a);	# 6 CMDprint_val ($7:int)<-(a:int)
    a := calc.int(13);	# 7 CALCint2int (a:int)<-($8:int)
    io.print(a);	# 8 CMDprint_val ($9:int)<-(a:int)
    a := calc.int("23");	# 9 CALCstr2int (a:int)<-($10:str)
    io.print(a);	# 10 CMDprint_val ($11:int)<-(a:int)
    a := calc.int(43.0);	# 11 CALCflt2int (a:int)<-($12:flt)
    io.print(a);	# 12 CMDprint_val ($13:int)<-(a:int)
    a := calc.int(63.0);	# 13 CALCdbl2int (a:int)<-($14:dbl)
    io.print(a);	# 14 CMDprint_val ($15:int)<-(a:int)
    c := true;	# 15  (c:bit)<-($17:bit)
    io.print(c);	# 16 CMDprint_val ($18:int)<-(c:bit)
    c := calc.bit(nil);	# 17 CALCnil2bit (c:bit)<-($2:void)
    io.print(c);	# 18 CMDprint_val ($19:int)<-(c:bit)
    c := calc.bit(false);	# 19 CALCbit2bit (c:bit)<-($20:bit)
    io.print(c);	# 20 CMDprint_val ($21:int)<-(c:bit)
    c := calc.bit(1);	# 21 CALCint2bit (c:bit)<-($22:int)
    io.print(c);	# 22 CMDprint_val ($23:int)<-(c:bit)
    c := calc.bit("true");	# 23 CALCstr2bit (c:bit)<-($24:str)
    io.print(c);	# 24 CMDprint_val ($25:int)<-(c:bit)
    c := calc.bit(1.0);	# 25 CALCflt2bit (c:bit)<-($26:flt)
    io.print(c);	# 26 CMDprint_val ($27:int)<-(c:bit)
    c := calc.bit(0.0);	# 27 CALCdbl2bit (c:bit)<-($28:dbl)
    io.print(c);	# 28 CMDprint_val ($29:int)<-(c:bit)
    d := 3.14;	# 29  (d:flt)<-($31:flt)
    io.print(d);	# 30 CMDprint_val ($32:int)<-(d:flt)
    d := calc.flt(nil);	# 31 CALCnil2flt (d:flt)<-($2:void)
    io.print(d);	# 32 CMDprint_val ($33:int)<-(d:flt)
    d := calc.flt(5);	# 33 CALCint2flt (d:flt)<-($34:int)
    io.print(d);	# 34 CMDprint_val ($35:int)<-(d:flt)
    d := calc.flt("7.14");	# 35 CALCstr2flt (d:flt)<-($36:str)
    io.print(d);	# 36 CMDprint_val ($37:int)<-(d:flt)
    e := "hello";	# 37  (e:str)<-($39:str)
    io.print(e);	# 38 CMDprint_val ($40:int)<-(e:str)
    e := calc.str(nil);	# 39 CALCnil2str (e:str)<-($41:void)
    io.print(e);	# 40 CMDprint_val ($42:int)<-(e:str)
    e := str.str("nil");	# 41 CMDstr (e:str)<-($43:str)
    io.print(e);	# 42 CMDprint_val ($44:int)<-(e:str)
    f := 'Z';	# 43  (f:chr)<-($46:chr)
    io.print(f);	# 44 CMDprint_val ($47:int)<-(f:chr)
    f := calc.chr(nil);	# 45 CALCnil2chr (f:chr)<-($41:void)
    io.print(f);	# 46 CMDprint_val ($48:int)<-(f:chr)
    f := calc.chr("X");	# 47 CALCstr2chr (f:chr)<-($49:str)
    io.print(f);	# 48 CMDprint_val ($50:int)<-(f:chr)
end main;	# 49  
[ nil ]
[ 23 ]
[ nil ]
[ 13 ]
[ 23 ]
[ 43 ]
[ 63 ]
[ true ]
[ nil ]
[ false ]
[ true ]
[ true ]
[ true ]
[ false ]
[ 3.1400001 ]
[ nil ]
[ 5 ]
[ 7.13999987 ]
[ "hello" ]
[ nil ]
[ "nil" ]
[ Z ]
[ nil ]
[ X ]
>