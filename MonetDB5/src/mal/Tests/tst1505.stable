# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
#	y := new(:oid,:dbl);
#	le_a := dbl(1.0);
#	me_a := insert(y,1@0,le_a);
#	ne_a := dbl(2.0);
#	oe_a := insert(y,2@0,ne_a);
#	pe_a := dbl(2.0);
#	qe_a := insert(y,3@0,pe_a);
#	re_a := dbl(2.0);
#	se_a := insert(y,4@0,re_a);
#	te_a := dbl(2.0);
#	ue_a := insert(y,5@0,te_a);
#	ve_a := dbl(3.0);
#	we_a := insert(y,6@0,ve_a);
#	xe_a := dbl(1.0);
#	ye_a := insert(y,7@0,xe_a);
#	af_a := dbl(1.0);
#	bf_a := insert(y,8@0,af_a);
#
#z:= <(y,2.0:dbl);
#print(z);
#c:= count(z);
#print("count");print(c);
#
#	x:= new(:oid,:bit);
#	insert(x,1@0,true);
#	insert(x,2@0,false);
#	insert(x,3@0,true);
#	insert(x,4@0,false);
#	print(x);
#	A:= new(:oid,:bit);
#	insert(A,1@0,true);
#	insert(A,2@0,true);
#	insert(A,3@0,false);
#	insert(A,4@0,false);
#	print(A);
#	xn:= not(x); print(x,xn);
#	xandx:= and(x,A); print(x,xandx);
#	xorx:= or(x,A); print(x,xorx);
#print("ifthen group");
#	xif0:= ifthen(x,x);print(x,xif0);
#	xif1:= ifthen(x,false);print(x,xif1);
#	xif2:= ifthenelse(x,x,xn);print(x,x,xn,xif2);
#	xif3:= ifthenelse(x,x,true);print(x,x,xif3);
#	xif4:= ifthenelse(x,1,2);print(x,xif4);
#print("accumulators");
#	x2:= not(x,x); print(x,x2);
#	x3:= and(x,A); print(x,A,x3);
#	x4:= or(x,A); print(x,A,x4);
#
function Admin.main():int;	# 0  (main:int)
    y := bbp.new(oid:,dbl:);	# 1 CMDBATnew (y:bat[:oid,:dbl])<-($2:oid)($3:dbl)
    le_a := calc.dbl(1.0);	# 2 CALCflt2dbl (le_a:dbl)<-($5:flt)
    me_a := bat.insert(y,1@0,le_a);	# 3 BKCinsert_bun (me_a:void)<-(y:bat[:oid,:dbl])($7:oid)(le_a:dbl)
    ne_a := calc.dbl(2.0);	# 4 CALCflt2dbl (ne_a:dbl)<-($9:flt)
    oe_a := bat.insert(y,2@0,ne_a);	# 5 BKCinsert_bun (oe_a:void)<-(y:bat[:oid,:dbl])($11:oid)(ne_a:dbl)
    pe_a := calc.dbl(2.0);	# 6 CALCflt2dbl (pe_a:dbl)<-($9:flt)
    qe_a := bat.insert(y,3@0,pe_a);	# 7 BKCinsert_bun (qe_a:void)<-(y:bat[:oid,:dbl])($14:oid)(pe_a:dbl)
    re_a := calc.dbl(2.0);	# 8 CALCflt2dbl (re_a:dbl)<-($9:flt)
    se_a := bat.insert(y,4@0,re_a);	# 9 BKCinsert_bun (se_a:void)<-(y:bat[:oid,:dbl])($17:oid)(re_a:dbl)
    te_a := calc.dbl(2.0);	# 10 CALCflt2dbl (te_a:dbl)<-($9:flt)
    ue_a := bat.insert(y,5@0,te_a);	# 11 BKCinsert_bun (ue_a:void)<-(y:bat[:oid,:dbl])($20:oid)(te_a:dbl)
    ve_a := calc.dbl(3.0);	# 12 CALCflt2dbl (ve_a:dbl)<-($22:flt)
    we_a := bat.insert(y,6@0,ve_a);	# 13 BKCinsert_bun (we_a:void)<-(y:bat[:oid,:dbl])($24:oid)(ve_a:dbl)
    xe_a := calc.dbl(1.0);	# 14 CALCflt2dbl (xe_a:dbl)<-($5:flt)
    ye_a := bat.insert(y,7@0,xe_a);	# 15 BKCinsert_bun (ye_a:void)<-(y:bat[:oid,:dbl])($27:oid)(xe_a:dbl)
    af_a := calc.dbl(1.0);	# 16 CALCflt2dbl (af_a:dbl)<-($5:flt)
    bf_a := bat.insert(y,8@0,af_a);	# 17 BKCinsert_bun (bf_a:void)<-(y:bat[:oid,:dbl])($30:oid)(af_a:dbl)
    z := batcalc.<(y,2.0);	# 18 CMDcmpLTcst (z:bat[:oid,:bit])<-(y:bat[:oid,:dbl])($32:dbl)
    io.print(z);	# 19 CMDprint_val ($33:int)<-(z:bat[:oid,:bit])
    c := algebra.count(z);	# 20 ALGcount_bat (c:lng)<-(z:bat[:oid,:bit])
    io.print("count");	# 21 CMDprint_val ($35:int)<-($36:str)
    io.print(c);	# 22 CMDprint_val ($37:int)<-(c:lng)
    x := bbp.new(oid:,bit:);	# 23 CMDBATnew (x:bat[:oid,:bit])<-($39:oid)($40:bit)
    bat.insert(x,1@0,true);	# 24 BKCinsert_bun ($41:void)<-(x:bat[:oid,:bit])($42:oid)($43:bit)
    bat.insert(x,2@0,false);	# 25 BKCinsert_bun ($44:void)<-(x:bat[:oid,:bit])($45:oid)($46:bit)
    bat.insert(x,3@0,true);	# 26 BKCinsert_bun ($47:void)<-(x:bat[:oid,:bit])($48:oid)($43:bit)
    bat.insert(x,4@0,false);	# 27 BKCinsert_bun ($49:void)<-(x:bat[:oid,:bit])($50:oid)($46:bit)
    io.print(x);	# 28 CMDprint_val ($51:int)<-(x:bat[:oid,:bit])
    A := bbp.new(oid:,bit:);	# 29 CMDBATnew (A:bat[:oid,:bit])<-($53:oid)($54:bit)
    bat.insert(A,1@0,true);	# 30 BKCinsert_bun ($55:void)<-(A:bat[:oid,:bit])($42:oid)($43:bit)
    bat.insert(A,2@0,true);	# 31 BKCinsert_bun ($56:void)<-(A:bat[:oid,:bit])($45:oid)($43:bit)
    bat.insert(A,3@0,false);	# 32 BKCinsert_bun ($57:void)<-(A:bat[:oid,:bit])($48:oid)($46:bit)
    bat.insert(A,4@0,false);	# 33 BKCinsert_bun ($58:void)<-(A:bat[:oid,:bit])($50:oid)($46:bit)
    io.print(A);	# 34 CMDprint_val ($59:int)<-(A:bat[:oid,:bit])
    xn := batcalc.not(x);	# 35 CMDbitbatNOT (xn:bat[:oid,:bit])<-(x:bat[:oid,:bit])
    io.print(x,xn);	# 36 CMDtable ($61:int)<-(x:bat[:oid,:bit])(xn:bat[:oid,:bit])
    xandx := batcalc.and(x,A);	# 37 CMDcmpAND (xandx:bat[:oid,:bit])<-(x:bat[:oid,:bit])(A:bat[:oid,:bit])
    io.print(x,xandx);	# 38 CMDtable ($63:int)<-(x:bat[:oid,:bit])(xandx:bat[:oid,:bit])
    xorx := batcalc.or(x,A);	# 39 CMDcmpOR (xorx:bat[:oid,:bit])<-(x:bat[:oid,:bit])(A:bat[:oid,:bit])
    io.print(x,xorx);	# 40 CMDtable ($65:int)<-(x:bat[:oid,:bit])(xorx:bat[:oid,:bit])
    io.print("ifthen group");	# 41 CMDprint_val ($66:int)<-($67:str)
    xif0 := batcalc.ifthen(x,x);	# 42 CMDifThen (xif0:bat[:oid,:bit])<-(x:bat[:oid,:bit])(x:bat[:oid,:bit])
    io.print(x,xif0);	# 43 CMDtable ($69:int)<-(x:bat[:oid,:bit])(xif0:bat[:oid,:bit])
    xif1 := batcalc.ifthen(x,false);	# 44 CMDifThenCst_bit (xif1:bat[:oid,:bit])<-(x:bat[:oid,:bit])($46:bit)
    io.print(x,xif1);	# 45 CMDtable ($71:int)<-(x:bat[:oid,:bit])(xif1:bat[:oid,:bit])
    xif2 := batcalc.ifthenelse(x,x,xn);	# 46 CMDifThenElse (xif2:bat[:oid,:bit])<-(x:bat[:oid,:bit])(x:bat[:oid,:bit])(xn:bat[:oid,:bit])
    io.print(x,x,xn,xif2);	# 47 CMDtable ($73:int)<-(x:bat[:oid,:bit])(x:bat[:oid,:bit])(xn:bat[:oid,:bit])(xif2:bat[:oid,:bit])
    xif3 := batcalc.ifthenelse(x,x,true);	# 48 CMDifThenElseCst2 (xif3:bat[:oid,:bit])<-(x:bat[:oid,:bit])(x:bat[:oid,:bit])($43:bit)
    io.print(x,x,xif3);	# 49 CMDtable ($75:int)<-(x:bat[:oid,:bit])(x:bat[:oid,:bit])(xif3:bat[:oid,:bit])
    xif4 := batcalc.ifthenelse(x,1,2);	# 50 CMDifThenElseCst_int (xif4:bat[:oid,:int])<-(x:bat[:oid,:bit])($77:int)($78:int)
    io.print(x,xif4);	# 51 CMDtable ($79:int)<-(x:bat[:oid,:bit])(xif4:bat[:oid,:int])
    io.print("accumulators");	# 52 CMDprint_val ($80:int)<-($81:str)
    x2 := batcalc.not(x,x);	# 53 CMDbitbataccumNOT (x2:bat[:oid,:bit])<-(x:bat[:oid,:bit])(x:bat[:oid,:bit])
    io.print(x,x2);	# 54 CMDtable ($83:int)<-(x:bat[:oid,:bit])(x2:bat[:oid,:bit])
    x3 := batcalc.and(x,A);	# 55 CMDcmpAND (x3:bat[:oid,:bit])<-(x:bat[:oid,:bit])(A:bat[:oid,:bit])
    io.print(x,A,x3);	# 56 CMDtable ($85:int)<-(x:bat[:oid,:bit])(A:bat[:oid,:bit])(x3:bat[:oid,:bit])
    x4 := batcalc.or(x,A);	# 57 CMDcmpOR (x4:bat[:oid,:bit])<-(x:bat[:oid,:bit])(A:bat[:oid,:bit])
    io.print(x,A,x4);	# 58 CMDtable ($87:int)<-(x:bat[:oid,:bit])(A:bat[:oid,:bit])(x4:bat[:oid,:bit])
end main;	# 59  
#-----------------#
# h	tmp_5	  # name
# oid	bit	  # type
#-----------------#
[ 1@0,	  true	  ]
[ 2@0,	  false	  ]
[ 3@0,	  false	  ]
[ 4@0,	  false	  ]
[ 5@0,	  false	  ]
[ 6@0,	  false	  ]
[ 7@0,	  true	  ]
[ 8@0,	  true	  ]
[ "count" ]
[ 8 ]
#-----------------#
# h	tmp_6	  # name
# oid	bit	  # type
#-----------------#
[ 1@0,	  true	  ]
[ 2@0,	  false	  ]
[ 3@0,	  true	  ]
[ 4@0,	  false	  ]
#-----------------#
# h	tmp_7	  # name
# oid	bit	  # type
#-----------------#
[ 1@0,	  true	  ]
[ 2@0,	  true	  ]
[ 3@0,	  false	  ]
[ 4@0,	  false	  ]
#-------------------------#
# h	tmp_6	tmp_8	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 1@0,	  true,	  false	  ]
[ 2@0,	  false,  true	  ]
[ 3@0,	  true,	  false	  ]
[ 4@0,	  false,  true	  ]
#-------------------------#
# h	tmp_6	tmp_9	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 1@0,	  true,	  true	  ]
[ 2@0,	  false,  false	  ]
[ 3@0,	  true,	  false	  ]
[ 4@0,	  false,  false	  ]
#-------------------------#
# h	tmp_6	tmp_10	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 1@0,	  true,	  true	  ]
[ 2@0,	  false,  true	  ]
[ 3@0,	  true,	  true	  ]
[ 4@0,	  false,  false	  ]
[ "ifthen group" ]
#-------------------------#
# h	tmp_6	tmp_11	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 1@0,	  true,	  true	  ]
[ 3@0,	  true,	  true	  ]
#-------------------------#
# h	tmp_6	tmp_12	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 1@0,	  true,	  false	  ]
[ 3@0,	  true,	  false	  ]
#-----------------------------------------#
# h	tmp_6	tmp_6	tmp_8	tmp_13	  # name
# oid	bit	bit	bit	bit	  # type
#-----------------------------------------#
[ 1@0,	  true,	  true,	  false,  true	  ]
[ 2@0,	  false,  false,  true,	  true	  ]
[ 3@0,	  true,	  true,	  false,  true	  ]
[ 4@0,	  false,  false,  true,	  true	  ]
#---------------------------------#
# h	tmp_6	tmp_6	tmp_14	  # name
# oid	bit	bit	bit	  # type
#---------------------------------#
[ 1@0,	  true,	  true,	  true	  ]
[ 2@0,	  false,  false,  true	  ]
[ 3@0,	  true,	  true,	  true	  ]
[ 4@0,	  false,  false,  true	  ]
#-------------------------#
# h	tmp_6	tmp_15	  # name
# oid	bit	int	  # type
#-------------------------#
[ 1@0,	  true,	  1	  ]
[ 2@0,	  false,  2	  ]
[ 3@0,	  true,	  1	  ]
[ 4@0,	  false,  2	  ]
[ "accumulators" ]
#-------------------------#
# h	tmp_6	tmp_6	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 1@0,	  false,  false	  ]
[ 2@0,	  true,	  true	  ]
[ 3@0,	  false,  false	  ]
[ 4@0,	  true,	  true	  ]
#---------------------------------#
# h	tmp_6	tmp_7	tmp_16	  # name
# oid	bit	bit	bit	  # type
#---------------------------------#
[ 1@0,	  false,  true,	  false	  ]
[ 2@0,	  true,	  true,	  true	  ]
[ 3@0,	  false,  false,  false	  ]
[ 4@0,	  true,	  false,  false	  ]
#---------------------------------#
# h	tmp_6	tmp_7	tmp_17	  # name
# oid	bit	bit	bit	  # type
#---------------------------------#
[ 1@0,	  false,  true,	  true	  ]
[ 2@0,	  true,	  true,	  true	  ]
[ 3@0,	  false,  false,  false	  ]
[ 4@0,	  true,	  false,  true	  ]
>