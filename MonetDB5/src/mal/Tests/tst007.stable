# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
## A collection of forloops, which should not execute
#barrier	H := batoperatie;
#	Tail:= bat.fetch(b,H);
#	#body
#redo 	H;
#exit	H;
#
#
## de andere loops zijn eenvoudig. 'goto' is altijd beperkt tot
## 'randen' van het blok. (redo L, leave L)
## een while loop
#barrier L := bat.hasMoreElements(b);
#	H:= bat.head(b);
#	v:= bat.nextElement(b);
#redo	L;
#exit	L;
#	
##een do-while loop
#	entry:= true;
#barrier M:= entry_or_exittest;
#	entry:= false;
#	# rest
#redo	M;
#exit	M;
#
##een for-loop 
#	i:= 1;
#barrier N:= i<10;
#	#body
#	i:=i+1;
#redo	N;
#exit	N;
#
#
## de if-then en if-then-else constructies
#
#barrier	FT:= booleanexpr;
#	# thenpart
#exit	FT;
#
#barrier	FTE:= booleanexpr;
#	# thenpart
#exit	FTE;
#barrier FS:= not(FTE);
#	#elsepart
#exit	FS;
#
#
#
!ERROR: 'bat.fetch' undefined in Admin.main[2]
!ERROR: 'bat.hasMoreElements' undefined in Admin.main[5]
!ERROR: 'bat.head' undefined in Admin.main[6]
!ERROR: 'bat.nextElement' undefined in Admin.main[7]
!ERROR: barrier 'FS' should be of type bit or number in main[24]
function Admin.main():int; #0  (main:int)
barrier H := batoperatie; #1  (H:any)<-(batoperatie:any) jump 4
    Tail := bat.fetch(b,H); #2  unknown (Tail:any)<-(b:any)(H:any)
    redo H; #3  (H:any) jump 1
exit H; #4  (H:any)
barrier L := bat.hasMoreElements(b); #5  unknown (L:any)<-(b:any) jump 9
    H := bat.head(b); #6  unknown (H:any)<-(b:any)
    v := bat.nextElement(b); #7  unknown (v:any)<-(b:any)
    redo L; #8  (L:any) jump 5
exit L; #9  (L:any)
    entry := true; #10  (entry:bit)<-($8:bit)
barrier M := entry_or_exittest; #11  (M:any)<-(entry_or_exittest:any) jump 14
    entry := false; #12  (entry:bit)<-($11:bit)
    redo M; #13  (M:any) jump 11
exit M; #14  (M:any)
    i := 1; #15  (i:int)<-($13:int)
barrier N := calc.<(i,10); #16 CALCcompLTintint (N:bit)<-(i:int)($15:int) jump 19
    i := calc.+(i,1); #17 CALCbinaryADDintint (i:int)<-(i:int)($13:int)
    redo N; #18  (N:bit) jump 16
exit N; #19  (N:bit)
barrier FT := booleanexpr; #20  (FT:any)<-(booleanexpr:any) jump 21
exit FT; #21  (FT:any)
barrier FTE := booleanexpr; #22  (FTE:any)<-(booleanexpr:any) jump 23
exit FTE; #23  (FTE:any)
barrier FS := batcalc.not(FTE); #24 CMDbitbatNOT (FS:bat[any,bit])<-(FTE:any) jump 25
exit FS; #25  (FS:bat[any,bit])
end main; #26  
>