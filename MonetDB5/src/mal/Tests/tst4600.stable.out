stdout of test 'tst4600` in directory 'src/mal` itself:


# 22:41:24 >  
# 22:41:24 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=44767 --set sql_port=52701 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst4600.mal </dev/null
# 22:41:24 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl for further information.
## the first test for macro expansions and inversions
#function welcome(lim:int):void;
#    i:= 0;
#barrier j:= i<lim;
#    print("Welcome");
#    i:= i+1;
#    redo j:= i<lim;
#exit j;
#end welcome;
function Admin.welcome(lim:int):void;	# 0  (welcome:void)<-(lim:int)
    i := 0;	# 1  (i:int)<-($3:int)
barrier j := calc.<(i,lim);	# 2 CALCcompLTintint (j:bit)<-(i:int)(lim:int) jump 6
    io.print("Welcome");	# 3 IOprint_val ($5:int)<-($6:str)
    i := calc.+(i,1);	# 4 CALCbinaryADDintint (i:int)<-(i:int)($7:int)
    redo j := calc.<(i,lim);	# 5 CALCcompLTintint (j:bit)<-(i:int)(lim:int) jump 3
exit j;	# 6  (j:bit)
end welcome;	# 7  
#
#optimizer.MEoptimizer("Admin","welcome");
#
#print("test expansion");
#welcome(2);
#showFunction();
#
function Admin.main():int;	# 0  (main:int)
    io.print("test expansion");	# 1 IOprint_val ($4:int)<-($5:str)
    $11 := 0;	# 2  ($11:int)<-($12:int)
barrier $13 := calc.<($11,2);	# 3 CALCcompLTintint ($13:bit)<-($11:int)($7:int) jump 7
    $14 := io.print("Welcome");	# 4 IOprint_val ($14:int)<-($15:str)
    $11 := calc.+($11,1);	# 5 CALCbinaryADDintint ($11:int)<-($11:int)($16:int)
    redo $13 := calc.<($11,2);	# 6 CALCcompLTintint ($13:bit)<-($11:int)($7:int) jump 4
exit $13;	# 7  ($13:bit)
    inspect.showFunction();	# 8 INSPECTshowFunction ($8:void)
end main;	# 9  
[ "test expansion" ]
[ "Welcome" ]
[ "Welcome" ]
function Admin.main():int;
    io.print("test expansion");
    $11 := 0;
barrier $13 := calc.<($11,2);
    $14 := io.print("Welcome");
    $11 := calc.+($11,1);
    redo $13 := calc.<($11,2);
exit $13;
    inspect.showFunction();
end main;

# 22:47:28 >  
# 22:47:28 >  Done.
# 22:47:28 >  

