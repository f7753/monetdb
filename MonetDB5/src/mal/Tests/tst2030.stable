# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
##The 2000 serie  is focussed on parallelism
#
#function clkticks(n:int):void;
#barrier	b:= n>0;
#	printf("clock tick %d\n",n);
#	alarm.sleep(5);
#	n:= n-1;
#	redo b;
#exit	b;
#end clkticks;
function Admin.clkticks(n:int):void;	# 0  (clkticks:void)<-(n:int)
barrier b := calc.>(n,0);	# 1 CALCcompGTintint (b:bit)<-(n:int)($3:int) jump 6
    system.printf("clock tick %d\n",n);	# 2 SYSprint_formatted_int ($4:int)<-($5:str)(n:int)
    alarm.sleep(5);	# 3 CLKsleep ($6:void)<-($7:int)
    n := calc.-(n,1);	# 4 CALCbinarySUBintint (n:int)<-(n:int)($8:int)
    redo b;	# 5  (b:bit) jump 1
exit b;	# 6  (b:bit)
end clkticks;	# 7  
#
#thread 	hdl;	# synchronize through a boolean
#	clkticks(2);
#exit	hdl;
#printf("Main thread\n");
#printf("Wait for child to exit\n");
#
function Admin.main():int;	# 0  (main:int)
thread hdl;	# 1  (hdl:int) jump 3
    Admin.clkticks(2);	# 2  ($2:void)<-($3:int)
exit hdl;	# 3  (hdl:int)
    system.printf("Main thread\n");	# 4 SYSprint_str ($4:int)<-($5:str)
    system.printf("Wait for child to exit\n");	# 5 SYSprint_str ($6:int)<-($7:str)
end main;	# 6  
clock tick 2
Main thread
Wait for child to exit
clock tick 1
>