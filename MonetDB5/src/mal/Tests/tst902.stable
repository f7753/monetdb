# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB
# dbname:demo
## what is the overhead of MAL in multiplex situations
## using a BATloop !! This is 40x slower as the V4.3 multiplex implementation
#b:= new(:lng,:lng);
#i:= -1:lng;
#barrier v:= nextElement(i,0:lng,10:lng,1:lng);
#	insert(b,i,i);
#	redo v;
#exit v;
#c:= copy(b);
#
#d:= new(:lng,:lng);
#barrier w:= bunStream(b,h:lng,t:lng);
#	B1:= find(b,h);
#	B2:= find(c,h);
#	t:= B1+B2;
#	insert(d,h,t);
#	redo w;
#catch 	GDKerror;
#exit	GDKerror;
#exit w;
#print(d);
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(:lng,:lng);	# 1 CMDBATnew (b:bat[lng,lng])<-($2:lng)($3:lng)
    i := -1;	# 2  (i:lng)<-($5:lng)
barrier v := mal.nextElement(i,0,10,1);	# 3 lngForloopStep (v:bit)<-(i:lng)($7:lng)($8:lng)($9:lng) jump 6
    bat.insert(b,i,i);	# 4 CMDinsert_bun ($10:void)<-(b:bat[lng,lng])(i:lng)(i:lng)
    redo v;	# 5  (v:bit) jump 3
exit v;	# 6  (v:bit)
    c := algebra.copy(b);	# 7 CMDcopy (c:bat[lng,lng])<-(b:bat[lng,lng])
    d := bbp.new(:lng,:lng);	# 8 CMDBATnew (d:bat[lng,lng])<-($13:lng)($14:lng)
barrier w := bbp.bunStream(b,h,t);	# 9 CMDbunStream (w:lng)<-(b:bat[lng,lng])(h:lng)(t:lng) jump 17
    B1 := algebra.find(b,h);	# 10 CMDfind (B1:lng)<-(b:bat[lng,lng])(h:lng)
    B2 := algebra.find(c,h);	# 11 CMDfind (B2:lng)<-(c:bat[lng,lng])(h:lng)
    t := calc.+(B1,B2);	# 12 CALCbinaryADDlnglng (t:lng)<-(B1:lng)(B2:lng)
    bat.insert(d,h,t);	# 13 CMDinsert_bun ($20:void)<-(d:bat[lng,lng])(h:lng)(t:lng)
    redo w;	# 14  (w:lng) jump 9
catch GDKerror;	# 15  (GDKerror:str) jump 16
exit GDKerror;	# 16  (GDKerror:str)
exit w;	# 17  (w:lng)
    io.print(d);	# 18 CMDprint_val ($22:int)<-(d:bat[lng,lng])
end main;	# 19  
#-----------------#
# h	tmp_6	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  6	  ]
[ 4,	  8	  ]
[ 5,	  10	  ]
[ 6,	  12	  ]
[ 7,	  14	  ]
[ 8,	  16	  ]
[ 9,	  18	  ]
>