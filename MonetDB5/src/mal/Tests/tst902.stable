# Monet Database Server V5.0
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
# gdk_dbfarm:/ufs/mk/monet_5-0/Linux/../dbfarm
# gdk_dbname:demo
# gdk_dbdir:/ufs/mk/monet_5-0/Linux/../dbfarm/demo
# gdk_distr:/ufs/mk/monet_5-0/Linux
# monetrc:/ufs/mk/.monet.conf
## what is the overhead of MAL in multiplex situations
## using a BATloop !! This is 40x slower as the V4.3 multiplex implementation
#b:= new(lng,lng);
#i:= -1:lng;
#barrier v:= nextElement(i,0:lng,10:lng);
#	insert(b,i,i);
#	redo v;
#exit v;
#c:= copy(b);
#
#d:= new(lng,lng);
#barrier w:= bunStream(b,h:lng,t:lng);
#	B1:= find(b,h);
#	B2:= find(c,h);
#	t:= B1+B2;
#	insert(d,h,t);
#	redo w;
#catch 	GDKerror;
#exit	GDKerror;
#exit w;
#print(d);
#
function Admin.main():int; #0:(main:int)
    b := mal.new(lng,lng); #1:(b:bat[lng,lng])<-(lng:lng)(lng:lng)
    i := -1; #2:(i:lng)<-($4:lng)
barrier v := mal.nextElement(i,0,10); #3:(v:bit)<-(i:lng)($6:lng)($7:lng) jump 7
    bat.insert(b,i,i); #4:($8:bat[lng,lng])<-(b:bat[lng,lng])(i:lng)(i:lng)
    redo v ; #5:(v:bit) jump 3
exit v; #6:(v:bit)
    c := algebra.copy(b); #7:(c:bat[lng,lng])<-(b:bat[lng,lng])
    d := mal.new(lng,lng); #8:(d:bat[lng,lng])<-(lng:lng)(lng:lng)
barrier w := mal.bunStream(b,h,t); #9:(w:lng)<-(b:bat[lng,lng])(h:lng)(t:lng) jump 18
    B1 := algebra.find(b,h); #10:(B1:lng)<-(b:bat[lng,lng])(h:lng)
    B2 := algebra.find(c,h); #11:(B2:lng)<-(c:bat[lng,lng])(h:lng)
    t := calc.+(B1,B2); #12:(t:lng)<-(B1:lng)(B2:lng)
    bat.insert(d,h,t); #13:($16:bat[lng,lng])<-(d:bat[lng,lng])(h:lng)(t:lng)
    redo w ; #14:(w:lng) jump 9
catch GDKerror; #15:(GDKerror:str) jump 17
exit GDKerror; #16:(GDKerror:str)
exit w; #17:(w:lng)
    io.print(d); #18:($18:int)<-(d:bat[lng,lng])
end main; #19:
#-----------------#
# BAT:	  tmp_6	  #
# (lng)	  (lng)	  #
#-----------------#
[ 0,	  0	  ]
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  6	  ]
[ 4,	  8	  ]
[ 5,	  10	  ]
[ 6,	  12	  ]
[ 7,	  14	  ]
[ 8,	  16	  ]
[ 9,	  18	  ]
>