# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
## the first of a series of BBP test cases
#
#bbp.open();
#b:= new(:int,:int);
#insert(b,1,2);
#bbp.deposit("mysecondbat",b);
#c:= bbp.take("mysecondbat");
#print(c);
#bat.setPersistent(b);
#x:= bat.isPersistent(b);
#z:= bat.isTransient(b);
#print(x); print(z); print("");
#bat.setTransient(b);
#x:= bat.isPersistent(b);
#z:= bat.isTransient(b);
#print(x); print(z); print("");
#bbp.close();
## at the end of the session, the BBP should have discarded
## the temporary bats of the user
## aug 02 this does not work, because the transaction is
## not properly closed. This means that a temporary bat
##remains in store.
#bbp.open();
##v:= bat.take("mysecondbat");
#print(v);
#bbp.close();
#
function Admin.main():int;	# 0  (main:int)
    bbp.open();	# 1 CMDbbpopen ($1:void)
    b := bbp.new(:int,:int);	# 2 CMDBATnew (b:bat[int,int])<-($3:int)($4:int)
    bat.insert(b,1,2);	# 3 CMDinsert_bun ($5:void)<-(b:bat[int,int])($6:int)($7:int)
    bbp.deposit("mysecondbat",b);	# 4 CMDbbpdeposit ($8:void)<-($9:str)(b:bat[int,int])
    c := bbp.take("mysecondbat");	# 5 CMDbbptake (c:bat[any,any])<-($9:str)
    io.print(c);	# 6 CMDprint_val ($11:int)<-(c:bat[any,any])
    bat.setPersistent(b);	# 7 CMDsetPersistent ($12:bit)<-(b:bat[int,int])
    x := bat.isPersistent(b);	# 8 CMDisPersistent (x:bit)<-(b:bat[int,int])
    z := bat.isTransient(b);	# 9 CMDisTransient (z:bit)<-(b:bat[int,int])
    io.print(x);	# 10 CMDprint_val ($15:int)<-(x:bit)
    io.print(z);	# 11 CMDprint_val ($16:int)<-(z:bit)
    io.print("");	# 12 CMDprint_val ($17:int)<-($18:str)
    bat.setTransient(b);	# 13 CMDsetTransient ($19:bit)<-(b:bat[int,int])
    x := bat.isPersistent(b);	# 14 CMDisPersistent (x:bit)<-(b:bat[int,int])
    z := bat.isTransient(b);	# 15 CMDisTransient (z:bit)<-(b:bat[int,int])
    io.print(x);	# 16 CMDprint_val ($20:int)<-(x:bit)
    io.print(z);	# 17 CMDprint_val ($21:int)<-(z:bit)
    io.print("");	# 18 CMDprint_val ($22:int)<-($18:str)
    bbp.close();	# 19 CMDbbpclose ($23:void)
    bbp.open();	# 20 CMDbbpopen ($24:void)
    io.print(v);	# 21 CMDprint_val ($25:int)<-(v:any)
    bbp.close();	# 22 CMDbbpclose ($27:void)
end main;	# 23  
bbp.take not yet fully implemented
#-----------------#
# h	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ true ]
[ false ]
[ "" ]
[ false ]
[ true ]
[ "" ]
[ nil ]
>