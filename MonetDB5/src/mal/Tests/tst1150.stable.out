stdout of test 'tst1150` in directory 'src/mal` itself:
# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
# Visit http://monetdb.cwi.nl for further information.
## Mil compiler Version 1.0)
## Copyright (c) 1993-2001, CWI. All rights reserved.
#
## Predefined code segment
##
###line 127 "/ufs/mk/monet_5-0/src/modules/kernel/io.mx"
#	EOF := -1;
##        const EOF      := -1;
#	SEEK_SET := 0;
##        const SEEK_SET := 0;
#	SEEK_CUR := 1;
##        const SEEK_CUR := 1;
#	SEEK_END := 2;
##        const SEEK_END := 2;
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
##setoid(oid(20000000));
##
#	fp := fopen("/tmp/test","w+");
##fp := fopen ( "/tmp/test", "w+" );
#	ca_a := fwrite(fp,"Dit is een test\n",17);
##fwrite( fp, "Dit is een test\n", 17 );
#	fp := freopen("/tmp/test","r+",fp);
##fp := freopen ( "/tmp/test", "r+", fp );
#	da_a := fread(fp,17);
#	ea_a := tostring(da_a);
#	fa_a := print(ea_a);
##fread( fp, 17 ).tostr.print;
##
#	ga_a := fseek(fp,0,0);
##fseek( fp, 0, 0);
#	fprintf(fp,"%s","test");
#	fprintf(fp," %d",10);
#	fprintf(fp," %c",'c');
#	fprintf(fp," %d",10);
#	fprintf(fp," %f\n",7.0);
##fprintf( fp, "%s %d %c %d %f\n", "test", 10, 'c', 10, 7.0 );
##
#	s := "testing again and again\n";
##s := "testing again and again\n";
##
#	ia_a := fseek(fp,0,0);
##fseek( fp, 0, 0);
#	ja_a := fputs(s,fp);
##fputs( s, fp );
#	ka_a := fseek(fp,0,0);
##fseek( fp, 0, 0);
#	s := fgets(fp);
##s := fgets( fp );
##
#	la_a := fflush(fp);
##fflush( fp );
#	ma_a := fclose(fp);
##fclose( fp );
#	fprintf(fp,"%s","test");
#	fprintf(fp," %d",10);
#	fprintf(fp," %c",'c');
#	fprintf(fp," %d",10);
#	fprintf(fp," %f\n",7.0);
##	na_a := printf("%s %d %c %d %f\n","test",10,'c',10,7.0);
##printf( "%s %d %c %d %f\n", "test", 10, 'c', 10, 7.0 );
#	oa_a := printf("%s\n",s);
##printf( "%s\n", s );
##
#	quit:= bbp.bind("quit");
##quit;
##
##
###line 156 "/ufs/mk/monet_5-0/src/modules/kernel/io.mx"
##
#
function Admin.main():int;	# 0  (main:int)
    fp := streams.openWrite("/tmp/test");	# 1 stream_open_wastream (fp:str)<-($2:str)
    streams.writeStr(fp,"Dit is een test\n");	# 2 stream_write_string ($3:void)<-(fp:str)($4:str)
    streams.flush(fp);	# 3 stream_flush_stream ($5:void)<-(fp:str)
    streams.close(fp);	# 4 stream_close_stream ($6:void)<-(fp:str)
    fp := streams.openRead("/tmp/test");	# 5 stream_open_rastream (fp:str)<-($2:str)
    s := streams.readStr(fp);	# 6 stream_read_str (s:str)<-(fp:str)
    io.print(s);	# 7 IOprint_val ($8:int)<-(s:str)
    streams.close(fp);	# 8 stream_close_stream ($9:void)<-(fp:str)
    fp := streams.openWrite("/tmp/test");	# 9 stream_open_wastream (fp:str)<-($2:str)
    streams.writeInt(fp,1234);	# 10 stream_write_int ($10:void)<-(fp:str)($11:int)
    streams.close(fp);	# 11 stream_close_stream ($12:void)<-(fp:str)
    fp := streams.openRead("/tmp/test");	# 12 stream_open_rastream (fp:str)<-($2:str)
    i := streams.readInt(fp);	# 13 stream_read_int (i:int)<-(fp:str)
    io.print(i);	# 14 IOprint_val ($14:int)<-(i:int)
end main;	# 15  
[ "Dit is een test\\n" ]
[ 1234 ]
>