# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
# Visit http://monetdb.cwi.nl for further information.
## a test checking BAT reference counting under various situations
#function steal(bb:bat[:any$1,:any$2]) :bat[:any$1,:any$2];
#	i:= getLRefCount(bb);
#	printf("enter function refcount =%d[2]\n",i);
#
#	loc:= bb;
#	i:= getLRefCount(bb);
#	printf("local in function refcount =%d[3]\n",i);
#
#	return bb;
#end steal; 
function Admin.steal(bb:bat[:any$1,:any$2]):bat[:any$1,:any$2];	# 0  dynamic (steal:bat[:any$1,:any$2])<-(bb:bat[:any$1,:any$2])
    i := bbp.getLRefCount(bb);	# 1 CMDgetBATlrefcnt (i:int)<-(bb:bat[:any$1,:any$2])
    io.printf("enter function refcount =%d[2]\n",i);	# 2 IOprint_formatted_int ($3:int)<-($4:str)(i:int)
    loc := bb;	# 3  (loc:bat[:any$1,:any$2])<-(bb:bat[:any$1,:any$2])
    i := bbp.getLRefCount(bb);	# 4 CMDgetBATlrefcnt (i:int)<-(bb:bat[:any$1,:any$2])
    io.printf("local in function refcount =%d[3]\n",i);	# 5 IOprint_formatted_int ($6:int)<-($7:str)(i:int)
    return bb;	# 6  (bb:bat[:any$1,:any$2])
end steal;	# 7  
#
#	b:= new(:int,:str);
#	i:= getLRefCount(b);
#	printf("refcount =%d[1]\n",i);	
#
#	insert(b,1,"bat B");
#	print(b);
#	i:= getLRefCount(b);
#	printf("refcount =%d[1]\n",i);
#
#	#handle an alias
#	b2:= b;			
#	i:= getLRefCount(b);
#	printf("after assignment refcount =%d[2]\n",i);
#
#	#re-use a bat variable
#	b3:= b;			
#	i:= getLRefCount(b);
#	printf("after 2nd assignment refcount =%d[3]\n",i);
#
#	#re-use a bat variable
#	b3:= new(:int,:str);			
#	i:= getLRefCount(b);
#	printf("after 3rd assignment refcount =%d[2]\n",i);
#	i:= getLRefCount(b3);
#	printf("assignment refcount =%d[1]\n",i);
#
#	#re-use a bat variable
#	b4:= select(b,"bat B","bat B");
#	print(b4);
#	i:= getLRefCount(b);
#	printf("after 4rd assignment refcount =%d[2]\n",i);
#
#	# remove by assignment
#	b2:= b3;
#	i:= getLRefCount(b);
#	printf("after 5rd assignment refcount =%d[1]\n",i);
#
#	printf("call function\n");
#	d:= steal(b);
#	e:= steal(b);
#	i:= getLRefCount(b);
#	printf("return from function refcount =%d[2]\n",i);
#
#	z:= bbp.getRefCount();
#	zl:= bbp.getLRefCount();
#	zn:= bbp.getNames();
#	print(zn,z,zl);
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(:int,:str);	# 1 CMDBATnew (b:bat[:int,:str])<-($2:int)($3:str)
    i := bbp.getLRefCount(b);	# 2 CMDgetBATlrefcnt (i:int)<-(b:bat[:int,:str])
    io.printf("refcount =%d[1]\n",i);	# 3 IOprint_formatted_int ($5:int)<-($6:str)(i:int)
    bat.insert(b,1,"bat B");	# 4 BKCinsert_bun ($7:void)<-(b:bat[:int,:str])($8:int)($9:str)
    io.print(b);	# 5 IOprint_val ($10:int)<-(b:bat[:int,:str])
    i := bbp.getLRefCount(b);	# 6 CMDgetBATlrefcnt (i:int)<-(b:bat[:int,:str])
    io.printf("refcount =%d[1]\n",i);	# 7 IOprint_formatted_int ($11:int)<-($6:str)(i:int)
    b2 := b;	# 8  (b2:bat[:int,:str])<-(b:bat[:int,:str])
    i := bbp.getLRefCount(b);	# 9 CMDgetBATlrefcnt (i:int)<-(b:bat[:int,:str])
    io.printf("after assignment refcount =%d[2]\n",i);	# 10 IOprint_formatted_int ($13:int)<-($14:str)(i:int)
    b3 := b;	# 11  (b3:bat[:int,:str])<-(b:bat[:int,:str])
    i := bbp.getLRefCount(b);	# 12 CMDgetBATlrefcnt (i:int)<-(b:bat[:int,:str])
    io.printf("after 2nd assignment refcount =%d[3]\n",i);	# 13 IOprint_formatted_int ($16:int)<-($17:str)(i:int)
    b3 := bbp.new(:int,:str);	# 14 CMDBATnew (b3:bat[:int,:str])<-($18:int)($19:str)
    i := bbp.getLRefCount(b);	# 15 CMDgetBATlrefcnt (i:int)<-(b:bat[:int,:str])
    io.printf("after 3rd assignment refcount =%d[2]\n",i);	# 16 IOprint_formatted_int ($20:int)<-($21:str)(i:int)
    i := bbp.getLRefCount(b3);	# 17 CMDgetBATlrefcnt (i:int)<-(b3:bat[:int,:str])
    io.printf("assignment refcount =%d[1]\n",i);	# 18 IOprint_formatted_int ($22:int)<-($23:str)(i:int)
    b4 := algebra.select(b,"bat B","bat B");	# 19 ALGselect (b4:bat[:int,:str])<-(b:bat[:int,:str])($9:str)($9:str)
    io.print(b4);	# 20 IOprint_val ($25:int)<-(b4:bat[:int,:str])
    i := bbp.getLRefCount(b);	# 21 CMDgetBATlrefcnt (i:int)<-(b:bat[:int,:str])
    io.printf("after 4rd assignment refcount =%d[2]\n",i);	# 22 IOprint_formatted_int ($26:int)<-($27:str)(i:int)
    b2 := b3;	# 23  (b2:bat[:int,:str])<-(b3:bat[:int,:str])
    i := bbp.getLRefCount(b);	# 24 CMDgetBATlrefcnt (i:int)<-(b:bat[:int,:str])
    io.printf("after 5rd assignment refcount =%d[1]\n",i);	# 25 IOprint_formatted_int ($28:int)<-($29:str)(i:int)
    io.printf("call function\n");	# 26 IOprint_str ($30:int)<-($31:str)
    d := Admin.steal(b);	# 27  (d:bat[:int,:str])<-(b:bat[:int,:str])
    e := Admin.steal(b);	# 28  (e:bat[:int,:str])<-(b:bat[:int,:str])
    i := bbp.getLRefCount(b);	# 29 CMDgetBATlrefcnt (i:int)<-(b:bat[:int,:str])
    io.printf("return from function refcount =%d[2]\n",i);	# 30 IOprint_formatted_int ($34:int)<-($35:str)(i:int)
    z := bbp.getRefCount();	# 31 CMDbbpRefCount (z:bat[:int,:int])
    zl := bbp.getLRefCount();	# 32 CMDbbpLRefCount (zl:bat[:int,:int])
    zn := bbp.getNames();	# 33 CMDbbpNames (zn:bat[:int,:str])
    io.print(zn,z,zl);	# 34 IOtable ($39:int)<-(zn:bat[:int,:str])(z:bat[:int,:int])(zl:bat[:int,:int])
end main;	# 35  
refcount =1[1]
#-------------------------#
# h	tmp_4		  # name
# int	str		  # type
#-------------------------#
[ 1,	  "bat B"	  ]
refcount =1[1]
after assignment refcount =2[2]
after 2nd assignment refcount =3[3]
after 3rd assignment refcount =2[2]
assignment refcount =1[1]
#-------------------------#
# h	tmp_6		  # name
# int	str		  # type
#-------------------------#
[ 1,	  "bat B"	  ]
after 4rd assignment refcount =2[2]
after 5rd assignment refcount =1[1]
call function
enter function refcount =2[2]
local in function refcount =3[3]
enter function refcount =4[2]
local in function refcount =5[3]
return from function refcount =5[2]
#---------------------------------------------------------#
# bbp	name			refcnt	lrefcnt		  # name
# int	str			int	int		  # type
#---------------------------------------------------------#
[ 1,	  "monet_environment",	  1,	  0		  ]
[ 2,	  "monet_unicode_case",	  1,	  0		  ]
[ 3,	  "timezones",		  1,	  0		  ]
[ 4,	  "tmp_4",		  1,	  5		  ]
[ 5,	  "tmp_5",		  1,	  2		  ]
[ 6,	  "tmp_6",		  1,	  1		  ]
>