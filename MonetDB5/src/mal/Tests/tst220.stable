# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
## a test checking BAT reference counting under various situations
#function steal(bb:bat[any::1,any::2]) :bat[any::1,any::2];
#	i:= getBATrefcnt(bb);
#	printf("enter function refcount =%d\n",i);
#
#	loc:= bb;
#	i:= getBATrefcnt(bb);
#	printf("local in function refcount =%d\n",i);
#
#	return bb;
#end steal; 
function Admin.steal(bb:bat[any::1,any::2]):bat[any::1,any::2];	# 0  dynamic (steal:bat[any::1,any::2])<-(bb:bat[any::1,any::2])
    i := bat.getBATrefcnt(bb);	# 1 getBATrefcnt (i:int)<-(bb:bat[any::1,any::2])
    system.printf("enter function refcount =%d\n",i);	# 2 SYSprint_formatted_int ($3:int)<-($4:str)(i:int)
    loc := bb;	# 3  (loc:bat[any::1,any::2])<-(bb:bat[any::1,any::2])
    i := bat.getBATrefcnt(bb);	# 4 getBATrefcnt (i:int)<-(bb:bat[any::1,any::2])
    system.printf("local in function refcount =%d\n",i);	# 5 SYSprint_formatted_int ($6:int)<-($7:str)(i:int)
    return bb;	# 6  (steal:bat[any::1,any::2])<-(bb:bat[any::1,any::2])
end steal;	# 7  
#
#	b:= new(:int,:str);
#	i:= getBATrefcnt(b);
#	printf("refcount =%d\n",i);
#
#	insert(b,1,"bat B");
#	print(b);
#	i:= getBATrefcnt(b);
#	printf("refcount =%d\n",i);
#
#	#handle an alias
#	b2:= b;			
#	i:= getBATrefcnt(b);
#	printf("after assignment refcount =%d\n",i);
#
#	#re-use a bat variable
#	b3:= b;			
#	i:= getBATrefcnt(b);
#	printf("after 2nd assignment refcount =%d\n",i);
#
#	#re-use a bat variable
#	b3:= new(:int,:str);			
#	i:= getBATrefcnt(b);
#	printf("after 3rd assignment refcount =%d\n",i);
#
#	#re-use a bat variable
#	b4:= select(b,"bat B","bat B");
#	print(b4);
#	i:= getBATrefcnt(b);
#	printf("after 4rd assignment refcount =%d\n",i);
#
#	# remove by assignment
#	b2:= b3;
#	i:= getBATrefcnt(b);
#	printf("after 5rd assignment refcount =%d\n",i);
#
#	printf("call function\n");
#	d:= steal(b);
#	i:= getBATrefcnt(b);
#	printf("return from function refcount =%d\n",i);
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(:int,:str);	# 1 CMDBATnew (b:bat[int,str])<-($2:int)($3:str)
    i := bat.getBATrefcnt(b);	# 2 getBATrefcnt (i:int)<-(b:bat[int,str])
    system.printf("refcount =%d\n",i);	# 3 SYSprint_formatted_int ($5:int)<-($6:str)(i:int)
    bat.insert(b,1,"bat B");	# 4 CMDinsert_bun ($7:void)<-(b:bat[int,str])($8:int)($9:str)
    io.print(b);	# 5 CMDprint_val ($10:int)<-(b:bat[int,str])
    i := bat.getBATrefcnt(b);	# 6 getBATrefcnt (i:int)<-(b:bat[int,str])
    system.printf("refcount =%d\n",i);	# 7 SYSprint_formatted_int ($11:int)<-($6:str)(i:int)
    b2 := b;	# 8  (b2:bat[int,str])<-(b:bat[int,str])
    i := bat.getBATrefcnt(b);	# 9 getBATrefcnt (i:int)<-(b:bat[int,str])
    system.printf("after assignment refcount =%d\n",i);	# 10 SYSprint_formatted_int ($13:int)<-($14:str)(i:int)
    b3 := b;	# 11  (b3:bat[int,str])<-(b:bat[int,str])
    i := bat.getBATrefcnt(b);	# 12 getBATrefcnt (i:int)<-(b:bat[int,str])
    system.printf("after 2nd assignment refcount =%d\n",i);	# 13 SYSprint_formatted_int ($16:int)<-($17:str)(i:int)
    b3 := bbp.new(:int,:str);	# 14 CMDBATnew (b3:bat[int,str])<-($18:int)($19:str)
    i := bat.getBATrefcnt(b);	# 15 getBATrefcnt (i:int)<-(b:bat[int,str])
    system.printf("after 3rd assignment refcount =%d\n",i);	# 16 SYSprint_formatted_int ($20:int)<-($21:str)(i:int)
    b4 := algebra.select(b,"bat B","bat B");	# 17 CMDselect (b4:bat[int,str])<-(b:bat[int,str])($9:str)($9:str)
    io.print(b4);	# 18 CMDprint_val ($23:int)<-(b4:bat[int,str])
    i := bat.getBATrefcnt(b);	# 19 getBATrefcnt (i:int)<-(b:bat[int,str])
    system.printf("after 4rd assignment refcount =%d\n",i);	# 20 SYSprint_formatted_int ($24:int)<-($25:str)(i:int)
    b2 := b3;	# 21  (b2:bat[int,str])<-(b3:bat[int,str])
    i := bat.getBATrefcnt(b);	# 22 getBATrefcnt (i:int)<-(b:bat[int,str])
    system.printf("after 5rd assignment refcount =%d\n",i);	# 23 SYSprint_formatted_int ($26:int)<-($27:str)(i:int)
    system.printf("call function\n");	# 24 SYSprint_str ($28:int)<-($29:str)
    d := Admin.steal(b);	# 25  (d:bat[int,str])<-(b:bat[int,str])
    i := bat.getBATrefcnt(b);	# 26 getBATrefcnt (i:int)<-(b:bat[int,str])
    system.printf("return from function refcount =%d\n",i);	# 27 SYSprint_formatted_int ($31:int)<-($32:str)(i:int)
end main;	# 28  
refcount =1
#-------------------------#
# BAT:	  tmp_4		  #
# (int)	  (str)		  #
#-------------------------#
[ 1,	  "bat B"	  ]
refcount =1
after assignment refcount =1
after 2nd assignment refcount =1
after 3rd assignment refcount =1
#-------------------------#
# BAT:	  tmp_6		  #
# (int)	  (str)		  #
#-------------------------#
[ 1,	  "bat B"	  ]
after 4rd assignment refcount =1
after 5rd assignment refcount =1
call function
enter function refcount =1
local in function refcount =1
return from function refcount =1
>