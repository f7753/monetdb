stdout of test 'tst1014` in directory 'src/mal` itself:


# 07:58:54 >  
# 07:58:54 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1014.mal </dev/null
# 07:58:54 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## now within a function to assure that reference counting
## takes care of releasing the variables.
#
#function test();
#    print("test");
#    bbp.open();
#    x:= bbp.getObjects();
#    print(x);
#    print("test");
#    b:= new(:int,:int);
#    insert(b,1,2);
#    bbp.deposit("myfirstbat",b);
#    c:= bbp.take("myfirstbat");
#    print(c);
#    bbp.close();
## at the end of the call, the BBP should have discarded
## the temporary bats of the user
#end test;
function Admin.test():void;	# 0  (test:void)
    io.print("test");	# 1 IOprint_val ($1:int)<-($2:str)
    bbp.open();	# 2 CMDbbpopen ($3:void)
    x := bbp.getObjects();	# 3 CMDbbpGetObjects (x:bat[:int,:str])
    io.print(x);	# 4 IOprint_val ($5:int)<-(x:bat[:int,:str])
    io.print("test");	# 5 IOprint_val ($6:int)<-($2:str)
    b := bbp.new(:int,:int);	# 6 CMDBATnew (b:bat[:int,:int])<-($8:int)($9:int)
    bat.insert(b,1,2);	# 7 BKCinsert_bun ($10:void)<-(b:bat[:int,:int])($11:int)($12:int)
    bbp.deposit("myfirstbat",b);	# 8 CMDbbpdeposit ($13:void)<-($14:str)(b:bat[:int,:int])
    c := bbp.take("myfirstbat");	# 9 CMDbbptake (c:bat[:any,:any])<-($14:str)
    io.print(c);	# 10 IOprint_val ($16:int)<-(c:bat[:any,:any])
    bbp.close();	# 11 CMDbbpclose ($17:void)
end test;	# 12  
#
#test();
#print("continue");
#bbp.open();
#x:= bbp.getObjects();
#print(x);
#v:= bbp.take("myfirstbat");
#print(v);
#bbp.close();
#
function Admin.main():int;	# 0  (main:int)
    Admin.test();	# 1  ($1:void)
    io.print("continue");	# 2 IOprint_val ($2:int)<-($3:str)
    bbp.open();	# 3 CMDbbpopen ($4:void)
    x := bbp.getObjects();	# 4 CMDbbpGetObjects (x:bat[:int,:str])
    io.print(x);	# 5 IOprint_val ($6:int)<-(x:bat[:int,:str])
    v := bbp.take("myfirstbat");	# 6 CMDbbptake (v:bat[:any,:any])<-($8:str)
    io.print(v);	# 7 IOprint_val ($9:int)<-(v:bat[:any,:any])
    bbp.close();	# 8 CMDbbpclose ($10:void)
end main;	# 9  
[ "test" ]
#-------------------------#
# bbp	objects		  # name
# int	str		  # type
#-------------------------#
[ "test" ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ "continue" ]
#-------------------------#
# bbp	objects		  # name
# int	str		  # type
#-------------------------#
[ 14,	  "myfirstbat"	  ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]

# 07:58:55 >  
# 07:58:55 >  Done.
# 07:58:55 >  

