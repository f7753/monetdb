stdout of test 'tst3010` in directory 'src/mal` itself:


# 08:01:14 >  
# 08:01:14 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst3010.mal </dev/null
# 08:01:14 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##Parsing properties and keeping them around
#function add(i:int{read},j:int{read}):int{write,safe};
#	j:= j+i;
#	return j{freeze};
#end add;
function user.add(i:int{read=true},j:int{freeze=true,read=true}):int;	# 0  (add:int)<-(i:int)(j:int)
    j{freeze=true,read=true} := calc.+(j{freeze=true,read=true},i{read=true});	# 1 CALCbinaryADDintint (j:int)<-(j:int)(i:int)
    return j{freeze=true,read=true};	# 2  (j:int)
end add;	# 3  
#
#function add2(i:int,j:int{read}):int{write,safe};
#	k:= j+i;
#	return k{freeze};
#end ;
function user.add2(i:int,j:int{read=true}):int;	# 0  (add2:int)<-(i:int)(j:int)
    k{freeze=true} := calc.+(j{read=true},i);	# 1 CALCbinaryADDintint (k:int)<-(j:int)(i:int)
    return k{freeze=true};	# 2  (k:int)
end add2;	# 3  
#
#i{cost}:= 23;
#z:= add(i,i);
#kk:= add2(i,i);
#
#
##alternative structure
##function add(i:int,j:int):int; 
##			?{i.read, j.read}
##			{add.write:=true; add.safe:=true;}
##	j:= j+i;
##	return j{freeze};
##end add;
##
##function add2(i:int,j:int):int;
##			?{i.read=true;j.read=true;}
##			{add2.write:=true; add2.safe:=true;}
##	k:= j+i;
##	return k{freeze};
##end ;
##
##i:= 23;		{i.cost:=0;}
##z:= add(i,i);
##kk:= add2(i,i);
#
#
function user.main():int;	# 0  (main:int)
#Parsing properties and keeping them around 	# 1  ($2:str)
    i{cost=23} := 23;	# 2  (i:int)<-($4:int)
    z := user.add(i{cost=23},i{cost=23});	# 3  (z:int)<-(i:int)(i:int)
    kk := user.add2(i{cost=23},i{cost=23});	# 4  (kk:int)<-(i:int)(i:int)
#alternative structure 	# 5  ($8:str)
#function add(i:int,j:int):int;  	# 6  ($10:str)
#			?{i.read, j.read} 	# 7  ($12:str)
#			{add.write:=true; add.safe:=true;} 	# 8  ($14:str)
#	j:= j+i; 	# 9  ($16:str)
#	return j{freeze}; 	# 10  ($18:str)
#end add; 	# 11  ($20:str)
#function add2(i:int,j:int):int; 	# 12  ($22:str)
#			?{i.read=true;j.read=true;} 	# 13  ($24:str)
#			{add2.write:=true; add2.safe:=true;} 	# 14  ($26:str)
#	k:= j+i; 	# 15  ($28:str)
#	return k{freeze}; 	# 16  ($30:str)
#end ; 	# 17  ($32:str)
#i:= 23;		{i.cost:=0;} 	# 18  ($34:str)
#z:= add(i,i); 	# 19  ($36:str)
#kk:= add2(i,i); 	# 20  ($38:str)
end main;	# 21  

# 08:01:14 >  
# 08:01:14 >  Done.
# 08:01:14 >  

