# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
#	x := new(:oid,:chr);
#	insert(x,1@0,'a');
#	insert(x,2@0,'a');
#	insert(x,3@0,'b');
#	insert(x,4@0,'b');
#	insert(x,5@0,'b');
#	insert(x,6@0,'b');
#	insert(x,7@0,'c');
#	insert(x,8@0,'c');
#
#	y := new(:oid,:dbl);
#	le_a := dbl(1.0);
#	insert(y,1@0,le_a);
#	ne_a := dbl(2.0);
#	insert(y,2@0,ne_a);
#	pe_a := dbl(2.0);
#	insert(y,3@0,pe_a);
#	re_a := dbl(2.0);
#	insert(y,4@0,re_a);
#	te_a := dbl(2.0);
#	insert(y,5@0,te_a);
#	ve_a := dbl(3.0);
#	insert(y,6@0,ve_a);
#	xe_a := dbl(1.0);
#	insert(y,7@0,xe_a);
#	af_a := dbl(1.0);
#	insert(y,8@0,af_a);
#
#	z := new(:oid,:str);
#	insert(z,1@0,"c");
#	insert(z,2@0,"a");
#	insert(z,3@0,"b");
#	insert(z,4@0,"c");
#	insert(z,5@0,"a");
#	hf_a := insert(z,6@0,"a");
#	insert(z,7@0,"c");
#	insert(z,8@0,"a");
#print("sort x"); xs:=sort(x); print(xs);
#print("sort xrev"); xrev:=reverse(x);xsrev:=sort(xrev); print(xsrev);
#
#
function Admin.main():int;	# 0  (main:int)
    x := bbp.new(oid:,chr:);	# 1 CMDBATnew (x:bat[:oid,:chr])<-($2:oid)($3:chr)
    bat.insert(x,1@0,'a');	# 2 BKCinsert_bun ($4:void)<-(x:bat[:oid,:chr])($5:oid)($6:chr)
    bat.insert(x,2@0,'a');	# 3 BKCinsert_bun ($7:void)<-(x:bat[:oid,:chr])($8:oid)($6:chr)
    bat.insert(x,3@0,'b');	# 4 BKCinsert_bun ($9:void)<-(x:bat[:oid,:chr])($10:oid)($11:chr)
    bat.insert(x,4@0,'b');	# 5 BKCinsert_bun ($12:void)<-(x:bat[:oid,:chr])($13:oid)($11:chr)
    bat.insert(x,5@0,'b');	# 6 BKCinsert_bun ($14:void)<-(x:bat[:oid,:chr])($15:oid)($11:chr)
    bat.insert(x,6@0,'b');	# 7 BKCinsert_bun ($16:void)<-(x:bat[:oid,:chr])($17:oid)($11:chr)
    bat.insert(x,7@0,'c');	# 8 BKCinsert_bun ($18:void)<-(x:bat[:oid,:chr])($19:oid)($20:chr)
    bat.insert(x,8@0,'c');	# 9 BKCinsert_bun ($21:void)<-(x:bat[:oid,:chr])($22:oid)($20:chr)
    y := bbp.new(oid:,dbl:);	# 10 CMDBATnew (y:bat[:oid,:dbl])<-($24:oid)($25:dbl)
    le_a := calc.dbl(1.0);	# 11 CALCflt2dbl (le_a:dbl)<-($27:flt)
    bat.insert(y,1@0,le_a);	# 12 BKCinsert_bun ($28:void)<-(y:bat[:oid,:dbl])($5:oid)(le_a:dbl)
    ne_a := calc.dbl(2.0);	# 13 CALCflt2dbl (ne_a:dbl)<-($30:flt)
    bat.insert(y,2@0,ne_a);	# 14 BKCinsert_bun ($31:void)<-(y:bat[:oid,:dbl])($8:oid)(ne_a:dbl)
    pe_a := calc.dbl(2.0);	# 15 CALCflt2dbl (pe_a:dbl)<-($30:flt)
    bat.insert(y,3@0,pe_a);	# 16 BKCinsert_bun ($33:void)<-(y:bat[:oid,:dbl])($10:oid)(pe_a:dbl)
    re_a := calc.dbl(2.0);	# 17 CALCflt2dbl (re_a:dbl)<-($30:flt)
    bat.insert(y,4@0,re_a);	# 18 BKCinsert_bun ($35:void)<-(y:bat[:oid,:dbl])($13:oid)(re_a:dbl)
    te_a := calc.dbl(2.0);	# 19 CALCflt2dbl (te_a:dbl)<-($30:flt)
    bat.insert(y,5@0,te_a);	# 20 BKCinsert_bun ($37:void)<-(y:bat[:oid,:dbl])($15:oid)(te_a:dbl)
    ve_a := calc.dbl(3.0);	# 21 CALCflt2dbl (ve_a:dbl)<-($39:flt)
    bat.insert(y,6@0,ve_a);	# 22 BKCinsert_bun ($40:void)<-(y:bat[:oid,:dbl])($17:oid)(ve_a:dbl)
    xe_a := calc.dbl(1.0);	# 23 CALCflt2dbl (xe_a:dbl)<-($27:flt)
    bat.insert(y,7@0,xe_a);	# 24 BKCinsert_bun ($42:void)<-(y:bat[:oid,:dbl])($19:oid)(xe_a:dbl)
    af_a := calc.dbl(1.0);	# 25 CALCflt2dbl (af_a:dbl)<-($27:flt)
    bat.insert(y,8@0,af_a);	# 26 BKCinsert_bun ($44:void)<-(y:bat[:oid,:dbl])($22:oid)(af_a:dbl)
    z := bbp.new(oid:,str:);	# 27 CMDBATnew (z:bat[:oid,:str])<-($46:oid)($47:str)
    bat.insert(z,1@0,"c");	# 28 BKCinsert_bun ($48:void)<-(z:bat[:oid,:str])($49:oid)($50:str)
    bat.insert(z,2@0,"a");	# 29 BKCinsert_bun ($51:void)<-(z:bat[:oid,:str])($52:oid)($53:str)
    bat.insert(z,3@0,"b");	# 30 BKCinsert_bun ($54:void)<-(z:bat[:oid,:str])($55:oid)($56:str)
    bat.insert(z,4@0,"c");	# 31 BKCinsert_bun ($57:void)<-(z:bat[:oid,:str])($58:oid)($50:str)
    bat.insert(z,5@0,"a");	# 32 BKCinsert_bun ($59:void)<-(z:bat[:oid,:str])($60:oid)($53:str)
    hf_a := bat.insert(z,6@0,"a");	# 33 BKCinsert_bun (hf_a:void)<-(z:bat[:oid,:str])($62:oid)($53:str)
    bat.insert(z,7@0,"c");	# 34 BKCinsert_bun ($63:void)<-(z:bat[:oid,:str])($64:oid)($50:str)
    bat.insert(z,8@0,"a");	# 35 BKCinsert_bun ($65:void)<-(z:bat[:oid,:str])($66:oid)($53:str)
    io.print("sort x");	# 36 IOprint_val ($67:int)<-($68:str)
    xs := algebra.sort(x);	# 37 ALGsort (xs:bat[:oid,:chr])<-(x:bat[:oid,:chr])
    io.print(xs);	# 38 IOprint_val ($70:int)<-(xs:bat[:oid,:chr])
    io.print("sort xrev");	# 39 IOprint_val ($71:int)<-($72:str)
    xrev := bat.reverse(x);	# 40 BKCreverse (xrev:bat[:chr,:oid])<-(x:bat[:oid,:chr])
    xsrev := algebra.sort(xrev);	# 41 ALGsort (xsrev:bat[:chr,:oid])<-(xrev:bat[:chr,:oid])
    io.print(xsrev);	# 42 IOprint_val ($75:int)<-(xsrev:bat[:chr,:oid])
end main;	# 43  
[ "sort x" ]
#-----------------#
# h	tmp_4	  # name
# oid	chr	  # type
#-----------------#
[ 1@0,	  a	  ]
[ 2@0,	  a	  ]
[ 3@0,	  b	  ]
[ 4@0,	  b	  ]
[ 5@0,	  b	  ]
[ 6@0,	  b	  ]
[ 7@0,	  c	  ]
[ 8@0,	  c	  ]
[ "sort xrev" ]
#-----------------#
# t	tmp_4	  # name
# chr	oid	  # type
#-----------------#
[ a,	  1@0	  ]
[ a,	  2@0	  ]
[ b,	  3@0	  ]
[ b,	  4@0	  ]
[ b,	  5@0	  ]
[ b,	  6@0	  ]
[ c,	  7@0	  ]
[ c,	  8@0	  ]
>