stdout of test 'tst201` in directory 'src/mal` itself:
# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
# Visit http://monetdb.cwi.nl for further information.
## Mil compiler Version 1.0)
## Copyright (c) 1993-2001, CWI. All rights reserved.
#
## Predefined code segment
##use "mal/iterator";		CAUSES an ERROR!!
#	_v0:= oid(20000000);
#	_v1:= setoid(_v0);
##setoid(oid(20000000));
###test basic functionality of the BAT library.
###focussed on strings
###it includes insertions,deletions,selections, and joins.
##
#	_v2:= new(:str,:int);
#	b := _v2;
##b:= new(str,int);
#	_v3:= insert(b,"the",1);
##b.insert("the",1);
#	_v4:= insert(b,"quick",2);
##b.insert("quick",2);
#	_v5:= insert(b,"brown",3);
##b.insert("brown",3);
#	_v6:= insert(b,"fox",4);
##b.insert("fox",4);
#	_v7:= insert(b,"jumps",5);
##b.insert("jumps",5);
#	_v8:= insert(b,"over",6);
##b.insert("over",6);
#	_v9:= insert(b,"lazy",7);
##b.insert("lazy",7);
#	_v10:= insert(b,"dog",8);
##b.insert("dog",8);
#	_v11:= str(nil);
#	_v12:= insert(b,_v11,9);
##b.insert(str(nil),9);
#	_v13:= insert(b,".",10);
##b.insert(".",10);
#	_v14:= int(nil);
#	_v15:= insert(b,"",_v14);
##b.insert("",int(nil));
#	_v16:= str(nil);
#	_v17:= int(nil);
#	_v18:= insert(b,_v16,_v17);
##b.insert(str(nil),int(nil));
#	_v19:= print(b);
##b.print;
##
##
### Testing simple retrievals
#	_v20:= find(b,"the");
#	_v21:= print(_v20);
##b.find("the").print;
#	_v22:= find(b,"fox");
#	_v23:= print(_v22);
##b.find("fox").print;
#	_v24:= str(nil);
#	_v25:= find(b,_v24);
#	_v26:= print(_v25);
##b.find(str(nil)).print;
### This should cause an error
#	_v27:= find(b,"cat");
#	_v28:= print(_v27);
#catch MALexception;
#	print(MALexception);
#exit  MALexception;
##b.find("cat").print;
##
### Can we delete them and re-insert them later on
#	_v29:= delete(b,"fox",4);
##b.delete("fox",4);
#	_v30:= delete(b,"the",1);
##b.delete("the",1);
#	_v31:= delete(b,".",10);
##b.delete(".",10);
#	_v32:= print(b);
##b.print;
##
#	_v33:= insert(b,"fox",4);
##b.insert("fox",4);
#	_v34:= insert(b,"the",1);
##b.insert("the",1);
#	_v35:= insert(b,".",10);
##b.insert(".",10);
#	_v36:= count(b);
#	_v37:= print(_v36);
##b.count.print;
##
### Lets cut out a few sections
#	_v38:= select(b,2,4);
#	_v39:= print(_v38);
##b.select(2,4).print;
#	_v40:= int(nil);
#	_v41:= select(b,7,_v40);
#	_v42:= print(_v41);
##b.select(7,int(nil)).print;
#	_v43:= int(nil);
#	_v44:= int(nil);
#	_v45:= select(b,_v43,_v44);
#	_v46:= print(_v45);
##b.select(int(nil),int(nil)).print;
##
### A 2-dimensional cut
#	_v47:= fragment(b,"fox","quick",1,5);
#	bns := _v47;
#	_v48:= print(bns);
##bns:=b.fragment("fox","quick",1,5);bns.print;
#	_v49:= str(nil);
#	_v50:= fragment(b,"fox",_v49,1,5);
#	_v51:= print(_v50);
##b.fragment("fox",str(nil),1,5).print;
#	_v52:= str(nil);
#	_v53:= int(nil);
#	_v54:= int(nil);
#	_v55:= fragment(b,"fox",_v52,_v53,_v54);
#	_v56:= print(_v55);
##b.fragment("fox",str(nil),int(nil),int(nil)).print;
#	_v57:= str(nil);
#	_v58:= int(nil);
#	_v59:= int(nil);
#	_v60:= fragment(b,_v57,"f",_v58,_v59);
#	_v61:= print(_v60);
##b.fragment(str(nil),"f",int(nil),int(nil)).print;
#	_v62:= reverse(b);
#	_v63:= int(nil);
#	_v64:= int(nil);
#	_v65:= str(nil);
#	_v66:= fragment(_v62,_v63,_v64,_v65,"f");
#	_v67:= print(_v66);
##b.reverse.fragment(int(nil),int(nil),str(nil),"f").print;
##
#	_v68:= reverse(bns);
#	_v69:= join(b,_v68);
#	bnj := _v69;
##bnj:= b.join(bns.reverse);
#	_v70:= print(bnj);
##bnj.print;
##
#	_v71:= reverse(bnj);
#	_v72:= semijoin(b,_v71);
#	bnk := _v72;
##bnk:= b.semijoin(bnj.reverse);
#	_v73:= print(bnk);
##bnk.print;
##
### testing the like command
#	_v74:= reverse(b);
#	_v75:= like(_v74,"ox");
#	_v76:= print(_v75);
##b.reverse.like("ox").print;
#	_v77:= reverse(b);
#	_v78:= like(_v77,"fo");
#	_v79:= print(_v78);
##b.reverse.like("fo").print;
#	_v80:= reverse(b);
#	_v81:= like(_v80,"fox");
#	_v82:= print(_v81);
##b.reverse.like("fox").print;
#	_v83:= reverse(b);
#	_v84:= like(_v83," fox");
#	_v85:= print(_v84);
##b.reverse.like(" fox").print;
##quit;
#
function Admin.main():int;	# 0  (main:int)
    _v0 := calc.oid(20000000);	# 1 CALCint2oid (_v0:oid)<-($2:int)
    _v1 := calc.setoid(_v0);	# 2 CALCsetoidInc (_v1:oid)<-(_v0:oid)
    _v2 := bbp.new(:str,:int);	# 3 CMDBATnew (_v2:bat[:str,:int])<-($5:str)($6:int)
    b := _v2;	# 4  (b:bat[:str,:int])<-(_v2:bat[:str,:int])
    _v3 := bat.insert(b,"the",1);	# 5 BKCinsert_bun (_v3:void)<-(b:bat[:str,:int])($9:str)($10:int)
    _v4 := bat.insert(b,"quick",2);	# 6 BKCinsert_bun (_v4:void)<-(b:bat[:str,:int])($12:str)($13:int)
    _v5 := bat.insert(b,"brown",3);	# 7 BKCinsert_bun (_v5:void)<-(b:bat[:str,:int])($15:str)($16:int)
    _v6 := bat.insert(b,"fox",4);	# 8 BKCinsert_bun (_v6:void)<-(b:bat[:str,:int])($18:str)($19:int)
    _v7 := bat.insert(b,"jumps",5);	# 9 BKCinsert_bun (_v7:void)<-(b:bat[:str,:int])($21:str)($22:int)
    _v8 := bat.insert(b,"over",6);	# 10 BKCinsert_bun (_v8:void)<-(b:bat[:str,:int])($24:str)($25:int)
    _v9 := bat.insert(b,"lazy",7);	# 11 BKCinsert_bun (_v9:void)<-(b:bat[:str,:int])($27:str)($28:int)
    _v10 := bat.insert(b,"dog",8);	# 12 BKCinsert_bun (_v10:void)<-(b:bat[:str,:int])($30:str)($31:int)
    _v11 := calc.str(nil);	# 13 CALCnil2str (_v11:str)<-($33:void)
    _v12 := bat.insert(b,_v11,9);	# 14 BKCinsert_bun (_v12:void)<-(b:bat[:str,:int])(_v11:str)($35:int)
    _v13 := bat.insert(b,".",10);	# 15 BKCinsert_bun (_v13:void)<-(b:bat[:str,:int])($37:str)($38:int)
    _v14 := calc.int(nil);	# 16 CALCnil2int (_v14:int)<-($33:void)
    _v15 := bat.insert(b,"",_v14);	# 17 BKCinsert_bun (_v15:void)<-(b:bat[:str,:int])($41:str)(_v14:int)
    _v16 := calc.str(nil);	# 18 CALCnil2str (_v16:str)<-($33:void)
    _v17 := calc.int(nil);	# 19 CALCnil2int (_v17:int)<-($33:void)
    _v18 := bat.insert(b,_v16,_v17);	# 20 BKCinsert_bun (_v18:void)<-(b:bat[:str,:int])(_v16:str)(_v17:int)
    _v19 := io.print(b);	# 21 IOprint_val (_v19:int)<-(b:bat[:str,:int])
    _v20 := algebra.find(b,"the");	# 22 ALGfind (_v20:int)<-(b:bat[:str,:int])($47:str)
    _v21 := io.print(_v20);	# 23 IOprint_val (_v21:int)<-(_v20:int)
    _v22 := algebra.find(b,"fox");	# 24 ALGfind (_v22:int)<-(b:bat[:str,:int])($18:str)
    _v23 := io.print(_v22);	# 25 IOprint_val (_v23:int)<-(_v22:int)
    _v24 := calc.str(nil);	# 26 CALCnil2str (_v24:str)<-($33:void)
    _v25 := algebra.find(b,_v24);	# 27 ALGfind (_v25:int)<-(b:bat[:str,:int])(_v24:str)
    _v26 := io.print(_v25);	# 28 IOprint_val (_v26:int)<-(_v25:int)
    _v27 := algebra.find(b,"cat");	# 29 ALGfind (_v27:int)<-(b:bat[:str,:int])($55:str)
    _v28 := io.print(_v27);	# 30 IOprint_val (_v28:int)<-(_v27:int)
catch MALexception;	# 31  (MALexception:any) jump 33
    io.print(MALexception);	# 32 IOprint_val ($58:int)<-(MALexception:any)
exit MALexception;	# 33  (MALexception:any)
    _v29 := bat.delete(b,"fox",4);	# 34 BKCdelete_bun (_v29:void)<-(b:bat[:str,:int])($60:str)($61:int)
    _v30 := bat.delete(b,"the",1);	# 35 BKCdelete_bun (_v30:void)<-(b:bat[:str,:int])($47:str)($63:int)
    _v31 := bat.delete(b,".",10);	# 36 BKCdelete_bun (_v31:void)<-(b:bat[:str,:int])($37:str)($38:int)
    _v32 := io.print(b);	# 37 IOprint_val (_v32:int)<-(b:bat[:str,:int])
    _v33 := bat.insert(b,"fox",4);	# 38 BKCinsert_bun (_v33:void)<-(b:bat[:str,:int])($60:str)($61:int)
    _v34 := bat.insert(b,"the",1);	# 39 BKCinsert_bun (_v34:void)<-(b:bat[:str,:int])($47:str)($63:int)
    _v35 := bat.insert(b,".",10);	# 40 BKCinsert_bun (_v35:void)<-(b:bat[:str,:int])($37:str)($38:int)
    _v36 := algebra.count(b);	# 41 ALGcount_bat (_v36:lng)<-(b:bat[:str,:int])
    _v37 := io.print(_v36);	# 42 IOprint_val (_v37:int)<-(_v36:lng)
    _v38 := algebra.select(b,2,4);	# 43 ALGselect (_v38:bat[:str,:int])<-(b:bat[:str,:int])($72:int)($61:int)
    _v39 := io.print(_v38);	# 44 IOprint_val (_v39:int)<-(_v38:bat[:str,:int])
    _v40 := calc.int(nil);	# 45 CALCnil2int (_v40:int)<-($75:void)
    _v41 := algebra.select(b,7,_v40);	# 46 ALGselect (_v41:bat[:str,:int])<-(b:bat[:str,:int])($77:int)(_v40:int)
    _v42 := io.print(_v41);	# 47 IOprint_val (_v42:int)<-(_v41:bat[:str,:int])
    _v43 := calc.int(nil);	# 48 CALCnil2int (_v43:int)<-($75:void)
    _v44 := calc.int(nil);	# 49 CALCnil2int (_v44:int)<-($75:void)
    _v45 := algebra.select(b,_v43,_v44);	# 50 ALGselect (_v45:bat[:str,:int])<-(b:bat[:str,:int])(_v43:int)(_v44:int)
    _v46 := io.print(_v45);	# 51 IOprint_val (_v46:int)<-(_v45:bat[:str,:int])
    _v47 := algebra.fragment(b,"fox","quick",1,5);	# 52 ALGfragment (_v47:bat[:str,:int])<-(b:bat[:str,:int])($60:str)($84:str)($63:int)($85:int)
    bns := _v47;	# 53  (bns:bat[:str,:int])<-(_v47:bat[:str,:int])
    _v48 := io.print(bns);	# 54 IOprint_val (_v48:int)<-(bns:bat[:str,:int])
    _v49 := calc.str(nil);	# 55 CALCnil2str (_v49:str)<-($75:void)
    _v50 := algebra.fragment(b,"fox",_v49,1,5);	# 56 ALGfragment (_v50:bat[:str,:int])<-(b:bat[:str,:int])($60:str)(_v49:str)($63:int)($85:int)
    _v51 := io.print(_v50);	# 57 IOprint_val (_v51:int)<-(_v50:bat[:str,:int])
    _v52 := calc.str(nil);	# 58 CALCnil2str (_v52:str)<-($75:void)
    _v53 := calc.int(nil);	# 59 CALCnil2int (_v53:int)<-($75:void)
    _v54 := calc.int(nil);	# 60 CALCnil2int (_v54:int)<-($75:void)
    _v55 := algebra.fragment(b,"fox",_v52,_v53,_v54);	# 61 ALGfragment (_v55:bat[:str,:int])<-(b:bat[:str,:int])($95:str)(_v52:str)(_v53:int)(_v54:int)
    _v56 := io.print(_v55);	# 62 IOprint_val (_v56:int)<-(_v55:bat[:str,:int])
    _v57 := calc.str(nil);	# 63 CALCnil2str (_v57:str)<-($75:void)
    _v58 := calc.int(nil);	# 64 CALCnil2int (_v58:int)<-($75:void)
    _v59 := calc.int(nil);	# 65 CALCnil2int (_v59:int)<-($75:void)
    _v60 := algebra.fragment(b,_v57,"f",_v58,_v59);	# 66 ALGfragment (_v60:bat[:str,:int])<-(b:bat[:str,:int])(_v57:str)($101:str)(_v58:int)(_v59:int)
    _v61 := io.print(_v60);	# 67 IOprint_val (_v61:int)<-(_v60:bat[:str,:int])
    _v62 := bat.reverse(b);	# 68 BKCreverse (_v62:bat[:int,:str])<-(b:bat[:str,:int])
    _v63 := calc.int(nil);	# 69 CALCnil2int (_v63:int)<-($75:void)
    _v64 := calc.int(nil);	# 70 CALCnil2int (_v64:int)<-($75:void)
    _v65 := calc.str(nil);	# 71 CALCnil2str (_v65:str)<-($75:void)
    _v66 := algebra.fragment(_v62,_v63,_v64,_v65,"f");	# 72 ALGfragment (_v66:bat[:int,:str])<-(_v62:bat[:int,:str])(_v63:int)(_v64:int)(_v65:str)($101:str)
    _v67 := io.print(_v66);	# 73 IOprint_val (_v67:int)<-(_v66:bat[:int,:str])
    _v68 := bat.reverse(bns);	# 74 BKCreverse (_v68:bat[:int,:str])<-(bns:bat[:str,:int])
    _v69 := algebra.join(b,_v68);	# 75 ALGjoin (_v69:bat[:str,:str])<-(b:bat[:str,:int])(_v68:bat[:int,:str])
    bnj := _v69;	# 76  (bnj:bat[:str,:str])<-(_v69:bat[:str,:str])
    _v70 := io.print(bnj);	# 77 IOprint_val (_v70:int)<-(bnj:bat[:str,:str])
    _v71 := bat.reverse(bnj);	# 78 BKCreverse (_v71:bat[:str,:str])<-(bnj:bat[:str,:str])
    _v72 := algebra.semijoin(b,_v71);	# 79 ALGsemijoin (_v72:bat[:str,:int])<-(b:bat[:str,:int])(_v71:bat[:str,:str])
    bnk := _v72;	# 80  (bnk:bat[:str,:int])<-(_v72:bat[:str,:int])
    _v73 := io.print(bnk);	# 81 IOprint_val (_v73:int)<-(bnk:bat[:str,:int])
    _v74 := bat.reverse(b);	# 82 BKCreverse (_v74:bat[:int,:str])<-(b:bat[:str,:int])
    _v75 := algebra.like(_v74,"ox");	# 83 ALGlike (_v75:bat[:int,:str])<-(_v74:bat[:int,:str])($119:str)
    _v76 := io.print(_v75);	# 84 IOprint_val (_v76:int)<-(_v75:bat[:int,:str])
    _v77 := bat.reverse(b);	# 85 BKCreverse (_v77:bat[:int,:str])<-(b:bat[:str,:int])
    _v78 := algebra.like(_v77,"fo");	# 86 ALGlike (_v78:bat[:int,:str])<-(_v77:bat[:int,:str])($123:str)
    _v79 := io.print(_v78);	# 87 IOprint_val (_v79:int)<-(_v78:bat[:int,:str])
    _v80 := bat.reverse(b);	# 88 BKCreverse (_v80:bat[:int,:str])<-(b:bat[:str,:int])
    _v81 := algebra.like(_v80,"fox");	# 89 ALGlike (_v81:bat[:int,:str])<-(_v80:bat[:int,:str])($95:str)
    _v82 := io.print(_v81);	# 90 IOprint_val (_v82:int)<-(_v81:bat[:int,:str])
    _v83 := bat.reverse(b);	# 91 BKCreverse (_v83:bat[:int,:str])<-(b:bat[:str,:int])
    _v84 := algebra.like(_v83," fox");	# 92 ALGlike (_v84:bat[:int,:str])<-(_v83:bat[:int,:str])($130:str)
    _v85 := io.print(_v84);	# 93 IOprint_val (_v85:int)<-(_v84:bat[:int,:str])
end main;	# 94  
#-------------------------#
# h		tmp_4	  # name
# str		int	  # type
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
[ 1 ]
[ 4 ]
[ nil ]
[ 0 ]
#-------------------------#
# h		tmp_4	  # name
# str		int	  # type
#-------------------------#
[ "",		  nil	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ nil,		  nil	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ 12 ]
#-------------------------#
# h		tmp_5	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
#-----------------#
# h	tmp_6	  # name
# str	int	  # type
#-----------------#
[ "lazy", 7	  ]
[ "dog",  8	  ]
[ nil,	  9	  ]
[ ".",	  10	  ]
#-------------------------#
# h		tmp_7	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
[ ".",		  10	  ]
#-------------------------#
# h		tmp_8	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
#-------------------------#
# h		tmp_9	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
#-------------------------#
# h		tmp_10	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
#-------------------------#
# h		tmp_11	  # name
# str		int	  # type
#-------------------------#
[ "",		  nil	  ]
[ "brown",	  3	  ]
[ nil,		  nil	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
#-------------------------#
# h	tmp_12		  # name
# int	str		  # type
#-------------------------#
[ nil,	  ""		  ]
[ 3,	  "brown"	  ]
[ nil,	  nil		  ]
[ 8,	  "dog"		  ]
[ 9,	  nil		  ]
[ 10,	  "."		  ]
#---------------------------------#
# h		tmp_13		  # name
# str		str		  # type
#---------------------------------#
[ "quick",	  "quick"	  ]
[ "jumps",	  "jumps"	  ]
[ "fox",	  "fox"		  ]
#-------------------------#
# h		tmp_14	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
#-----------------#
# h	tmp_15	  # name
# int	str	  # type
#-----------------#
[ 4,	  "fox"	  ]
#-----------------#
# h	tmp_16	  # name
# int	str	  # type
#-----------------#
[ 4,	  "fox"	  ]
#-----------------#
# h	tmp_17	  # name
# int	str	  # type
#-----------------#
[ 4,	  "fox"	  ]
#-----------------#
# h	tmp_18	  # name
# int	str	  # type
#-----------------#
>