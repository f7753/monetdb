# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB
# dbname:demo
##Parsing properties and keeping them around
#function add(i:int{read},j:int{read}):int{write,safe};
#	j:= j+i;
#	return j{freeze};
#end add;
function Admin.add(i:int{read},j:int{freeze,read}):int;	# 0  (add:int)<-(i:int)(j:int)
    j{freeze,read} := calc.+(j{freeze,read},i{read});	# 1 CALCbinaryADDintint (j:int)<-(j:int)(i:int)
    return j{freeze,read};	# 2  (add:int)<-(j:int)
end add;	# 3  
#
#function add2(i:int,j:int{read}):int{write,safe};
#	k:= j+i;
#	return k{freeze};
#end ;
function Admin.add2(i:int,j:int{read}):int;	# 0  (add2:int)<-(i:int)(j:int)
    k{freeze} := calc.+(j{read},i);	# 1 CALCbinaryADDintint (k:int)<-(j:int)(i:int)
    return k{freeze};	# 2  (add2:int)<-(k:int)
end add2;	# 3  
#
#i{cost}:= 23;
#z:= add(i,i);
#kk:= add2(i,i);
#
#
##alternative structure
##function add(i:int,j:int):int; 
##			?{i.read, j.read}
##			{add.write:=true; add.safe:=true;}
##	j:= j+i;
##	return j{freeze};
##end add;
##
##function add2(i:int,j:int):int;
##			?{i.read=true;j.read=true;}
##			{add2.write:=true; add2.safe:=true;}
##	k:= j+i;
##	return k{freeze};
##end ;
##
##i:= 23;		{i.cost:=0;}
##z:= add(i,i);
##kk:= add2(i,i);
#
#
!ERROR: i{cost}:= 23;
!        ^'.' or '(' expected
function Admin.main():int;	# 0  unknown (main:int)
    $1;	# 1  unknown ($1:any)
    z := add(i,i);	# 2  unknown (z:any)<-(i:any)(i:any)
    kk := add2(i,i);	# 3  unknown (kk:any)<-(i:any)(i:any)
end main;	# 4  unknown 
>