stdout of test 'tst903` in directory 'src/mal` itself:
# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
# Visit http://monetdb.cwi.nl for further information.
## the multiplex code blocks.
#
#b:= new(:void,:lng);
#i:= -1:lng;
#barrier v:= nextElement(i,0:lng,1000000:lng);
#	k:= rand();
#	l:= lng(k);
#	insert(b,nil,l);
#	redo v:= nextElement(i,0:lng,1000000:lng);
#exit v;
##setReadMode(b);
#mx:= max(b); 
##printf("max %d",mx);
#mi:= min(b); 
##printf(" min %d\n",mi);
#t0:= alarm.usec();
#c:= copy(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#copy %d",d0);
#cnt:= count(c);
#printf("#count %d\n",cnt);
#t0:= alarm.usec();
#z:= select(b,25:lng,25:lng);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select none %d",d0);
#cnt:= count(z);
#printf(" count %d\n",cnt);
#t0:= alarm.usec();
#z2:= select(b,mi,mx);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select all %d",d0);
#cnt:= count(z2);
#printf(" count %d\n",cnt);
#rng:= mx-mi;
#r2:= rng/20;
#r3:= mi+r2;
#t0:= alarm.usec();
#z3:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.05 %d",d0);
#cnt:= count(z3);
#printf(" count %d\n",cnt);
#r2:= rng/10;
#r3:= mi+r2;
#t0:= alarm.usec();
#z4:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.1 %d",d0);
#cnt:= count(z4);
#printf(" count %d\n",cnt);
#r2:= rng/5;
#r3:= mi+r2;
#t0:= alarm.usec();
#z5:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.2 %d",d0);
#cnt:= count(z5);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z6:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.4 %d",d0);
#cnt:= count(z6);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z7:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.6 %d",d0);
#cnt:= count(z7);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z8:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.8 %d",d0);
#cnt:= count(z8);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z9:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 1.0 %d",d0);
#cnt:= count(z9);
#printf(" count %d\n",cnt);
#t0:= alarm.usec();
#sr:= reverse(b);
#s:= sort(sr);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#tail sort %d",d0);
#cnt:= count(s);
#printf(" count %d\n",cnt);
#cnt:= count(z9);
#t0:= alarm.usec();
#x:= multiplex.script("+",b,c);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#multiplex.script(+) %d\n",d0);
#t0:= alarm.usec();
#x:= multiplex.tactics("+",b,c);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#multiplex.tactics(+) %d\n",d0);
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(:void,:lng);	# 1 CMDBATnew (b:bat[:void,:lng])<-($2:void)($3:lng)
barrier (go,i):= mal.newRange(0);	# 2 RNGnewRange_lng (go:bit)(i:lng)<-($6:lng) jump 7
    k := calc.rand();	# 3 CALCrandint (k:int)
    l := calc.lng(k);	# 4 CALCint2lng (l:lng)<-(k:int)
    bat.insert(b,nil,l);	# 5 BKCinsert_bun ($9:void)<-(b:bat[:void,:lng])($10:void)(l:lng)
    redo (go,i):= mal.nextElement(1,1000000);	# 6 RNGnextElement_lng (go:bit)(i:lng)<-($11:lng)($12:lng) jump 3
exit (go,i);	# 7  (go:bit)(i:lng)
    mx := algebra.max(b);	# 8 ALGmax_lng (mx:lng)<-(b:bat[:void,:lng])
    mi := algebra.min(b);	# 9 ALGmin_lng (mi:lng)<-(b:bat[:void,:lng])
    t0 := alarm.usec();	# 10 ALARMusec (t0:lng)
    c := algebra.copy(b);	# 11 ALGcopy (c:bat[:void,:lng])<-(b:bat[:void,:lng])
    t1 := alarm.usec();	# 12 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 13 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#copy %d",d0);	# 14 IOprint_formatted_lng ($19:int)<-($20:str)(d0:lng)
    cnt := algebra.count(c);	# 15 ALGcount_bat (cnt:lng)<-(c:bat[:void,:lng])
    io.printf("#count %d\n",cnt);	# 16 IOprint_formatted_lng ($22:int)<-($23:str)(cnt:lng)
    t0 := alarm.usec();	# 17 ALARMusec (t0:lng)
    z := algebra.select(b,25,25);	# 18 ALGselect (z:bat[:void,:lng])<-(b:bat[:void,:lng])($25:lng)($25:lng)
    t1 := alarm.usec();	# 19 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 20 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select none %d",d0);	# 21 IOprint_formatted_lng ($26:int)<-($27:str)(d0:lng)
    cnt := algebra.count(z);	# 22 ALGcount_bat (cnt:lng)<-(z:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 23 IOprint_formatted_lng ($28:int)<-($29:str)(cnt:lng)
    t0 := alarm.usec();	# 24 ALARMusec (t0:lng)
    z2 := algebra.select(b,mi,mx);	# 25 ALGselect (z2:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(mx:lng)
    t1 := alarm.usec();	# 26 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 27 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select all %d",d0);	# 28 IOprint_formatted_lng ($31:int)<-($32:str)(d0:lng)
    cnt := algebra.count(z2);	# 29 ALGcount_bat (cnt:lng)<-(z2:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 30 IOprint_formatted_lng ($33:int)<-($29:str)(cnt:lng)
    rng := calc.-(mx,mi);	# 31 CALCbinarySUBlnglng (rng:lng)<-(mx:lng)(mi:lng)
    r2 := calc./(rng,20);	# 32 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)($36:int)
    r3 := calc.+(mi,r2);	# 33 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec();	# 34 ALARMusec (t0:lng)
    z3 := algebra.select(b,mi,r3);	# 35 ALGselect (z3:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 36 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 37 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.05 %d",d0);	# 38 IOprint_formatted_lng ($39:int)<-($40:str)(d0:lng)
    cnt := algebra.count(z3);	# 39 ALGcount_bat (cnt:lng)<-(z3:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 40 IOprint_formatted_lng ($41:int)<-($29:str)(cnt:lng)
    r2 := calc./(rng,10);	# 41 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)($42:int)
    r3 := calc.+(mi,r2);	# 42 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec();	# 43 ALARMusec (t0:lng)
    z4 := algebra.select(b,mi,r3);	# 44 ALGselect (z4:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 45 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 46 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.1 %d",d0);	# 47 IOprint_formatted_lng ($44:int)<-($45:str)(d0:lng)
    cnt := algebra.count(z4);	# 48 ALGcount_bat (cnt:lng)<-(z4:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 49 IOprint_formatted_lng ($46:int)<-($29:str)(cnt:lng)
    r2 := calc./(rng,5);	# 50 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)($47:int)
    r3 := calc.+(mi,r2);	# 51 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec();	# 52 ALARMusec (t0:lng)
    z5 := algebra.select(b,mi,r3);	# 53 ALGselect (z5:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 54 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 55 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.2 %d",d0);	# 56 IOprint_formatted_lng ($49:int)<-($50:str)(d0:lng)
    cnt := algebra.count(z5);	# 57 ALGcount_bat (cnt:lng)<-(z5:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 58 IOprint_formatted_lng ($51:int)<-($29:str)(cnt:lng)
    r3 := calc.+(r3,r2);	# 59 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 60 ALARMusec (t0:lng)
    z6 := algebra.select(b,mi,r3);	# 61 ALGselect (z6:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 62 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 63 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.4 %d",d0);	# 64 IOprint_formatted_lng ($53:int)<-($54:str)(d0:lng)
    cnt := algebra.count(z6);	# 65 ALGcount_bat (cnt:lng)<-(z6:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 66 IOprint_formatted_lng ($55:int)<-($29:str)(cnt:lng)
    r3 := calc.+(r3,r2);	# 67 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 68 ALARMusec (t0:lng)
    z7 := algebra.select(b,mi,r3);	# 69 ALGselect (z7:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 70 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 71 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.6 %d",d0);	# 72 IOprint_formatted_lng ($57:int)<-($58:str)(d0:lng)
    cnt := algebra.count(z7);	# 73 ALGcount_bat (cnt:lng)<-(z7:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 74 IOprint_formatted_lng ($59:int)<-($29:str)(cnt:lng)
    r3 := calc.+(r3,r2);	# 75 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 76 ALARMusec (t0:lng)
    z8 := algebra.select(b,mi,r3);	# 77 ALGselect (z8:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 78 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 79 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.8 %d",d0);	# 80 IOprint_formatted_lng ($61:int)<-($62:str)(d0:lng)
    cnt := algebra.count(z8);	# 81 ALGcount_bat (cnt:lng)<-(z8:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 82 IOprint_formatted_lng ($63:int)<-($64:str)(cnt:lng)
    r3 := calc.+(r3,r2);	# 83 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 84 ALARMusec (t0:lng)
    z9 := algebra.select(b,mi,r3);	# 85 ALGselect (z9:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 86 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 87 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 1.0 %d",d0);	# 88 IOprint_formatted_lng ($66:int)<-($67:str)(d0:lng)
    cnt := algebra.count(z9);	# 89 ALGcount_bat (cnt:lng)<-(z9:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 90 IOprint_formatted_lng ($68:int)<-($64:str)(cnt:lng)
    t0 := alarm.usec();	# 91 ALARMusec (t0:lng)
    sr := bat.reverse(b);	# 92 BKCreverse (sr:bat[:lng,:void])<-(b:bat[:void,:lng])
    s := algebra.sort(sr);	# 93 ALGsort (s:bat[:lng,:void])<-(sr:bat[:lng,:void])
    t1 := alarm.usec();	# 94 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 95 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#tail sort %d",d0);	# 96 IOprint_formatted_lng ($71:int)<-($72:str)(d0:lng)
    cnt := algebra.count(s);	# 97 ALGcount_bat (cnt:lng)<-(s:bat[:lng,:void])
    io.printf(" count %d\n",cnt);	# 98 IOprint_formatted_lng ($73:int)<-($64:str)(cnt:lng)
    cnt := algebra.count(z9);	# 99 ALGcount_bat (cnt:lng)<-(z9:bat[:void,:lng])
    t0 := alarm.usec();	# 100 ALARMusec (t0:lng)
    x := multiplex.script("+",b,c);	# 101  (x:bat[:void,:lng])<-($75:str)(b:bat[:void,:lng])(c:bat[:void,:lng])
    t1 := alarm.usec();	# 102 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 103 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#multiplex.script(+) %d\n",d0);	# 104 IOprint_formatted_lng ($76:int)<-($77:str)(d0:lng)
    t0 := alarm.usec();	# 105 ALARMusec (t0:lng)
    x := batcalc.+(b,c);	# 106 CMDbatADD (x:bat[:void,:lng])<-(b:bat[:void,:lng])(c:bat[:void,:lng])
    t1 := alarm.usec();	# 107 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 108 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#multiplex.tactics(+) %d\n",d0);	# 109 IOprint_formatted_lng ($78:int)<-($79:str)(d0:lng)
end main;	# 110  
#copy 11545#count 1000000
#select none 91151 count 0
#select all 13229 count 1000000
#select 0.05 6881 count 50004
#select 0.1 7819 count 100016
#select 0.2 9859 count 199929
#select 0.4 13757 count 399791
#select 0.6 16267 count 600237
#select 0.8 16832 count 799837
#select 1.0 14092 count 999999
#tail sort 181077 count 1000000
#multiplex.script(+) 5624266
#multiplex.tactics(+) 25245
>