stdout of test 'tst007` in directory 'src/mal` itself:


# 07:58:34 >  
# 07:58:34 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst007.mal </dev/null
# 07:58:34 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## A collection of forloops, which should not execute
#barrier	H := batoperatie;
#	Tail:= bat.fetch(b,H);
#	#body
#redo 	H;
#exit	H;
#
#
## de andere loops zijn eenvoudig. 'goto' is altijd beperkt tot
## 'randen' van het blok. (redo L, leave L)
## een while loop
#barrier L := bat.hasMoreElements(b);
#	H:= bat.head(b);
#	v:= bat.nextElement(b);
#redo	L;
#exit	L;
#	
##een do-while loop
#	entry:= true;
#barrier M:= entry_or_exittest;
#	entry:= false;
#	# rest
#redo	M;
#exit	M;
#
##een for-loop 
#	i:= 1;
#barrier N:= i<10;
#	#body
#	i:=i+1;
#redo	N;
#exit	N;
#
#
## de if-then en if-then-else constructies
#
#barrier	FT:= booleanexpr;
#	# thenpart
#exit	FT;
#
#barrier	FTE:= booleanexpr;
#	# thenpart
#exit	FTE;
#barrier FS:= not(FTE);
#	#elsepart
#exit	FS;
#
#
#
!ERROR: 'chopper.hasMoreElements' undefined in user.main[5]
!ERROR: 'chopper.head' undefined in user.main[6]
!ERROR: 'chopper.nextElement' undefined in user.main[7]
!ERROR: barrier 'FS' should be of type bit or number in main[24]
!ERROR: 'batoperatie' may not be used before being set in main[1]
!ERROR: 'b' may not be used before being set in main[2]
!ERROR: 'b' may not be used before being set in main[5]
!ERROR: 'b' may not be used before being set in main[6]
!ERROR: 'b' may not be used before being set in main[7]
!ERROR: 'entry_or_exittest' may not be used before being set in main[11]
!ERROR: 'booleanexpr' may not be used before being set in main[20]
!ERROR: 'booleanexpr' may not be used before being set in main[22]
function user.main():int;	# 0  (main:int)
barrier H := batoperatie;	# 1  (H:any)<-(batoperatie:any) jump 4
    Tail := algebra.fetch(b,H);	# 2 ALGfetchbat (Tail:bat[:any,:any])<-(b:bat[:any,:any])(H:any)
    redo H;	# 3  (H:any) jump 2
exit H;	# 4  (H:any)
barrier L := chopper.hasMoreElements(b);	# 5  unknown (L:any)<-(b:bat[:any,:any]) jump 9
    H := chopper.head(b);	# 6  unknown (H:any)<-(b:bat[:any,:any])
    v := chopper.nextElement(b);	# 7  unknown (v:any)<-(b:bat[:any,:any])
    redo L;	# 8  (L:any) jump 6
exit L;	# 9  (L:any)
    entry := true;	# 10  (entry:bit)<-($8:bit)
barrier M := entry_or_exittest;	# 11  (M:any)<-(entry_or_exittest:any) jump 14
    entry := false;	# 12  (entry:bit)<-($11:bit)
    redo M;	# 13  (M:any) jump 12
exit M;	# 14  (M:any)
    i := 1;	# 15  (i:int)<-($13:int)
barrier N := calc.<(i,10);	# 16 CALCcompLTintint (N:bit)<-(i:int)($15:int) jump 19
    i := calc.+(i,1);	# 17 CALCbinaryADDintint (i:int)<-(i:int)($13:int)
    redo N;	# 18  (N:bit) jump 17
exit N;	# 19  (N:bit)
barrier FT := booleanexpr;	# 20  (FT:any)<-(booleanexpr:any) jump 21
exit FT;	# 21  (FT:any)
barrier FTE := booleanexpr;	# 22  (FTE:any)<-(booleanexpr:any) jump 23
exit FTE;	# 23  (FTE:any)
barrier FS := batcalc.not(FTE);	# 24 CMDbitbatNOT (FS:bat[:any,:bit])<-(FTE:any) jump 25
exit FS;	# 25  (FS:bat[:any,:bit])
end main;	# 26  

# 07:58:34 >  
# 07:58:34 >  Done.
# 07:58:34 >  

