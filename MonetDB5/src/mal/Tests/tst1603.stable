# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
#bint:= new(void,int);
#setSequenceBase(bint,0@0);
#i:= -1;
#barrier m:=nextElement(i,1,10,1);
#	insert(bint,nil,i);
#	redo m;
#exit	m;
#print(bint);
#dint := multiplex.script("decimal",bint);
#print(dint);
#print("start division");
#d2:= decimal(2);
#print(d2);
##zint:= multiplex.script("/",dint,d2);
#zint:= new(void,decimal);
#setSequenceBase(zint,0@0);
#barrier mloop := bbp.bunStream(dint,h, B2:decimal);
#	print(B2);
#	cr := decimal./(B2,d2);
#	print(cr);
#	insert(zint,nil,cr);
#	redo mloop;
#exit	mloop;
#	
#print(zint);
#cg:= group(dint);
#print(cg);
#
function Admin.main():int; #0  (main:int)
    bint := bbp.new(void,int); #1 CMDBATnew (bint:bat[void,int])<-(void:void)(int:int)
    bat.setSequenceBase(bint,0@0); #2 CMDsetSequenceBase ($4:int)<-(bint:bat[void,int])($5:oid)
    i := -1; #3  (i:int)<-($7:int)
barrier m := mal.nextElement(i,1,10,1); #4 intForloopStep (m:bit)<-(i:int)($9:int)($10:int)($9:int) jump 7
    bat.insert(bint,nil,i); #5 CMDinsert_bun ($11:bat[void,int])<-(bint:bat[void,int])($12:void)(i:int)
    redo m; #6  (m:bit) jump 4
exit m; #7  (m:bit)
    io.print(bint); #8 CMDprint_val ($13:int)<-(bint:bat[void,int])
    dint := multiplex.script("decimal",bint); #9 CMDmultiplexScript (dint:bat[void,decimal])<-($15:str)(bint:bat[void,int])
    io.print(dint); #10 CMDprint_val ($16:int)<-(dint:bat[void,decimal])
    io.print("start division"); #11 CMDprint_val ($17:int)<-($18:str)
    d2 := decimal.decimal(2); #12 decimal_from_int (d2:decimal)<-($20:int)
    io.print(d2); #13 CMDprint_val ($21:int)<-(d2:decimal)
    zint := bbp.new(void,decimal); #14 CMDBATnew (zint:bat[void,decimal])<-(void:void)(decimal:decimal)
    bat.setSequenceBase(zint,0@0); #15 CMDsetSequenceBase ($24:int)<-(zint:bat[void,decimal])($5:oid)
barrier mloop := bbp.bunStream(dint,h,B2); #16 CMDbunStream (mloop:lng)<-(dint:bat[void,decimal])(h:void)(B2:decimal) jump 22
    io.print(B2); #17 CMDprint_val ($28:int)<-(B2:decimal)
    cr := decimal./(B2,d2); #18 decimal_divide_default (cr:decimal)<-(B2:decimal)(d2:decimal)
    io.print(cr); #19 CMDprint_val ($30:int)<-(cr:decimal)
    bat.insert(zint,nil,cr); #20 CMDinsert_bun ($31:bat[void,decimal])<-(zint:bat[void,decimal])($12:void)(cr:decimal)
    redo mloop; #21  (mloop:lng) jump 16
exit mloop; #22  (mloop:lng)
    io.print(zint); #23 CMDprint_val ($32:int)<-(zint:bat[void,decimal])
    cg := group.group(dint); #24 CTgroup2 (cg:bat[void,oid])<-(dint:bat[void,decimal])
    io.print(cg); #25 CMDprint_val ($34:int)<-(cg:bat[void,oid])
end main; #26  
#-----------------#
# BAT:	  tmp_4	  #
# (void)  (int)	  #
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
[ 3@0,	  4	  ]
[ 4@0,	  5	  ]
[ 5@0,	  6	  ]
[ 6@0,	  7	  ]
[ 7@0,	  8	  ]
[ 8@0,	  9	  ]
#-------------------------#
# BAT:	  tmp_5		  #
# (void)  (decimal)	  #
#-------------------------#
[ 0@0,	  1		  ]
[ 1@0,	  2		  ]
[ 2@0,	  3		  ]
[ 3@0,	  4		  ]
[ 4@0,	  5		  ]
[ 5@0,	  6		  ]
[ 6@0,	  7		  ]
[ 7@0,	  8		  ]
[ 8@0,	  9		  ]
[ "start division" ]
[ 2 ]
[ 1 ]
[ 0 ]
[ 2 ]
[ 1 ]
[ 3 ]
[ 1 ]
[ 4 ]
[ 2 ]
[ 5 ]
[ 2 ]
[ 6 ]
[ 3 ]
[ 7 ]
[ 3 ]
[ 8 ]
[ 4 ]
[ 9 ]
[ 4 ]
#-------------------------#
# BAT:	  tmp_6		  #
# (void)  (decimal)	  #
#-------------------------#
[ 0@0,	  0		  ]
[ 1@0,	  1		  ]
[ 2@0,	  1		  ]
[ 3@0,	  2		  ]
[ 4@0,	  2		  ]
[ 5@0,	  3		  ]
[ 6@0,	  3		  ]
[ 7@0,	  4		  ]
[ 8@0,	  4		  ]
#-----------------#
# BAT:	  tmp_7	  #
# (void)  (oid)	  #
#-----------------#
[ 0@0,	  0@0	  ]
[ 1@0,	  1@0	  ]
[ 2@0,	  2@0	  ]
[ 3@0,	  3@0	  ]
[ 4@0,	  4@0	  ]
[ 5@0,	  5@0	  ]
[ 6@0,	  6@0	  ]
[ 7@0,	  7@0	  ]
[ 8@0,	  8@0	  ]
>