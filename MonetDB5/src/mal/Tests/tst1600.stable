# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
## Mil compiler Version 1.0)
## Copyright (c) 1993-2002, CWI. All rights reserved.
#
## Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##- positional arguments, ie $1,$2,..., can not be compiled in isolation
##
##
##Perhaps someone will develop a complete MIL interpreter
##on top of the MAL kernel in the future
##
###line 224 "/ufs/mk/monet_5-0/src/modules/atoms/decimal.mx"
##module(xtables,alarm,decimal,mmath);
##
#	aa_a := decimal_minrepeat(20);
##decimal_minrepeat(20);
##
##
##
###line 230 "/ufs/mk/monet_5-0/src/modules/atoms/decimal.mx"
#	dec_nil:= decimal("nil");
##var   dec_nil := decimal("nil");
#	dec_zero:= decimal("-0000000000000000000000000000000000E-8989");
##var  dec_zero := decimal("-0000000000000000000000000000000000E-8989");
#	dec_tiny:= decimal("+0.000000000000000000000000001122");
##var  dec_tiny := decimal("+0.000000000000000000000000001122");
#	nec_tiny:= decimal("-11220000000000E-40");
##var  nec_tiny := decimal("-11220000000000E-40");
#	dec_small:= decimal(2244);
##var dec_small := decimal(2244);
#	nec_small:= decimal("-22440000000000E-10");
##var nec_small := decimal("-22440000000000E-10");
#	dec_num:= decimal("+4488E15");
##var   dec_num := decimal("+4488E15");
#	nec_num:= decimal("-44880000000000E5");
##var   nec_num := decimal("-44880000000000E5"); 
#	dec_big:= decimal("+1122E40");
##var   dec_big := decimal("+1122E40");
#	nec_big:= decimal("-11220000000000E30");
##var   nec_big := decimal("-11220000000000E30"); 
#	dec_huge:= decimal("+22440000000000E9000");
##var  dec_huge := decimal("+22440000000000E9000");
#	nec_huge:= decimal("-2244E9010");
##var  nec_huge := decimal("-2244E9010");
##
#	dec_bat:= new(str,decimal,10);
##var dec_bat := new(str,decimal,10);
#	ba_a := insert(dec_bat,"dec_nil",dec_nil);
##dec_bat.insert("dec_nil", dec_nil);
#	ca_a := insert(dec_bat,"dec_zero",dec_zero);
##dec_bat.insert("dec_zero", dec_zero);
#	da_a := insert(dec_bat,"dec_tiny",dec_tiny);
##dec_bat.insert("dec_tiny", dec_tiny);
#	ea_a := insert(dec_bat,"nec_tiny",nec_tiny);
##dec_bat.insert("nec_tiny", nec_tiny);
#	fa_a := insert(dec_bat,"dec_small",dec_small);
##dec_bat.insert("dec_small", dec_small);
#	ga_a := insert(dec_bat,"nec_small",nec_small);
##dec_bat.insert("nec_small", nec_small);
#	ha_a := insert(dec_bat,"dec_num",dec_num);
##dec_bat.insert("dec_num", dec_num);
#	ia_a := insert(dec_bat,"nec_num",nec_num);
##dec_bat.insert("nec_num", nec_num);
#	ja_a := insert(dec_bat,"dec_big",dec_big);
##dec_bat.insert("dec_big", dec_big);
#	ka_a := insert(dec_bat,"nec_big",nec_big);
##dec_bat.insert("nec_big", nec_big);
#	la_a := insert(dec_bat,"dec_huge",dec_huge);
##dec_bat.insert("dec_huge", dec_huge);
#	ma_a := insert(dec_bat,"nec_huge",nec_huge);
##dec_bat.insert("nec_huge", nec_huge);
##
### test conversion to simple scalars
#	dec_prc:= multiplex.script("getprecision",dec_bat);
##var dec_prc := [getprecision](dec_bat);
#	dec_scl:= multiplex.script("getscale",dec_bat);
##var dec_scl := [getscale](dec_bat);
#	dec_flt:= multiplex.script("flt",dec_bat);
##var dec_flt := [flt](dec_bat);
#	dec_int:= multiplex.script("int",dec_bat);
##var dec_int := [int](dec_bat);
#	dec_lng:= multiplex.script("lng",dec_bat);
##var dec_lng := [lng](dec_bat);
#	dec_dbl:= multiplex.script("dbl",dec_bat);
##var dec_dbl := [dbl](dec_bat);
##
#	na_a := setColumn(dec_bat,"value");
##print(dec_bat.col_name("value"), 
#	oa_a := setColumn(dec_prc,"precision");
##      dec_prc.col_name("precision"), 
#	pa_a := setColumn(dec_scl,"scale");
#	qa_a := print(na_a,oa_a,pa_a);
##      dec_scl.col_name("scale"));
##
#	ra_a := setColumn(dec_bat,"value");
##print(dec_bat.col_name("value"), 
#	sa_a := setColumn(dec_int,"int");
##      dec_int.col_name("int"), 
#	ta_a := setColumn(dec_lng,"lng");
#	ua_a := print(ra_a,sa_a,ta_a);
##      dec_lng.col_name("lng"));
##
#	va_a := setColumn(dec_bat,"value");
##print(dec_bat.col_name("value"), 
#	wa_a := setColumn(dec_flt,"flt");
##      dec_flt.col_name("flt"), 
#	xa_a := setColumn(dec_dbl,"dbl");
#	ya_a := print(va_a,wa_a,xa_a);
##      dec_dbl.col_name("dbl"));
##
### test reverse conversion
#	ab_a := setColumn(dec_bat,"decimal");
##print(dec_bat.col_name("decimal"), 
#	bb_a := multiplex.script("decimal",dec_int);
#	cb_a := setColumn(bb_a,"from_int");
##      [decimal](dec_int).col_name("from_int"), 
#	db_a := multiplex.script("decimal",dec_lng);
#	eb_a := setColumn(db_a,"from_lng");
#	fb_a := print(ab_a,cb_a,eb_a);
##      [decimal](dec_lng).col_name("from_lng"));
##
#	gb_a := setColumn(dec_bat,"decimal");
##print(dec_bat.col_name("decimal"), 
#	hb_a := multiplex.script("decimal",dec_flt);
#	ib_a := setColumn(hb_a,"from_flt");
#	jb_a := print(gb_a,ib_a);
##      [decimal](dec_flt).col_name("from_flt"));
##
#	kb_a := setColumn(dec_bat,"decimal");
##print(dec_bat.col_name("decimal"), 
#	lb_a := multiplex.script("decimal",dec_dbl);
#	mb_a := setColumn(lb_a,"from_dbl");
#	nb_a := print(kb_a,mb_a);
##      [decimal](dec_dbl).col_name("from_dbl"));
##
### test set_scale and set_precision
#	ob_a := setColumn(dec_bat,"decimal");
##print(dec_bat.col_name("decimal"), 
#	pb_a := multiplex.script("setscale",dec_bat,0);
#	qb_a := setColumn(pb_a,"setscale(0)");
##      [setscale](dec_bat,0).col_name("setscale(0)"),
#	rb_a := multiplex.script("setscale",dec_bat,10);
#	sb_a := setColumn(rb_a,"setscale(10)");
##      [setscale](dec_bat,10).col_name("setscale(10)"),
#	tb_a := -(dec_scl,5);
#	ub_a := multiplex.script("setscale",dec_bat,tb_a);
#	vb_a := setColumn(ub_a,"setscale(-5)");
#	wb_a := print(ob_a,qb_a,sb_a,vb_a);
##      [setscale](dec_bat, ([-](dec_scl,5))).col_name("setscale(-5)"));
##
#	xb_a := setColumn(dec_bat,"decimal");
##print(dec_bat.col_name("decimal"), 
#	yb_a := multiplex.script("setprecision",dec_bat,0);
#	ac_a := setColumn(yb_a,"setprecision(0)");
##      [setprecision](dec_bat,0).col_name("setprecision(0)"),
#	bc_a := multiplex.script("setprecision",dec_bat,10);
#	cc_a := setColumn(bc_a,"setprecision(10)");
##      [setprecision](dec_bat,10).col_name("setprecision(10)"),
#	dc_a := -(dec_prc,5);
#	ec_a := multiplex.script("setprecision",dec_bat,dc_a);
#	fc_a := setColumn(ec_a,"setprecision(-5)");
#	gc_a := print(xb_a,ac_a,cc_a,fc_a);
##      [setprecision](dec_bat, [-](dec_prc,5)).col_name("setprecision(-5)"));
##
#	hc_a := setColumn(dec_bat,"decimal");
##print(dec_bat.col_name("decimal"), 
#	ic_a := multiplex.script("addscale",dec_bat,-5);
#	jc_a := setColumn(ic_a,"addscale(-5)");
##      [addscale](dec_bat,-5).col_name("addscale(-5)"),
#	kc_a := multiplex.script("addscale",dec_bat,5);
#	lc_a := setColumn(kc_a,"addscale(5)");
#	mc_a := print(hc_a,jc_a,lc_a);
##      [addscale](dec_bat,5).col_name("addscale(5)"));
##
### test binary operators
#	nc_a := reverse(dec_bat);
#	oc_a := project(nc_a,0@0);
#	dec_zero_bat:= reverse(oc_a);
##var dec_zero := project(dec_bat.reverse,0@0).reverse;
#	pc_a := reverse(dec_zero_bat);
#	dec_cart:= join(pc_a,dec_zero_bat);
##var dec_cart := join(dec_zero.reverse,dec_zero);
#	qc_a := reverse(dec_cart);
#	rc_a := mark(qc_a,0@0);
#	dec_bat1:= reverse(rc_a);
##var dec_bat1 := dec_cart.reverse.mark(0@0).reverse;
#	sc_a := mark(dec_cart,0@0);
#	dec_bat2:= reverse(sc_a);
##var dec_bat2 := dec_cart.mark(0@0).reverse;
#	tc_a := multiplex.script("getprecision",dec_bat1);
#	dec_raise:= -(tc_a,10);
##var dec_raise := [-]([getprecision](dec_bat1),10);
#	uc_a := multiplex.script("getprecision",dec_bat1);
#	dec_prec:= -(uc_a,1);
##var dec_prec := [-]([getprecision](dec_bat1),1);
##
#	vc_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	wc_a := setColumn(dec_raise,"raise");
##      dec_raise.col_name("raise"),
#	xc_a := multiplex.script("pow",dec_bat1,dec_raise);
#	yc_a := setColumn(xc_a,"pow");
#	ad_a := print(vc_a,wc_a,yc_a);
##      [pow](dec_bat1,dec_raise).col_name("pow"));
##
#	bd_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	cd_a := setColumn(dec_raise,"raise");
##      dec_raise.col_name("raise"),
#	dd_a := setColumn(dec_prec,"precision");
##      dec_prec.col_name("precision"),
#	ed_a := multiplex.script("pow",dec_bat1,dec_raise,dec_prec);
#	fd_a := setColumn(ed_a,"pow");
#	gd_a := print(bd_a,cd_a,dd_a,fd_a);
##      [pow](dec_bat1,dec_raise,dec_prec).col_name("pow"));
##
#	hd_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	id_a := setColumn(dec_bat2,"decimal2");
##      dec_bat2.col_name("decimal2"),
#	jd_a := multiplex.tactics("*",dec_bat1,dec_bat2);
#	kd_a := setColumn(jd_a,"*");
#	ld_a := print(hd_a,id_a,kd_a);
##      [*](dec_bat1,dec_bat2).col_name("*"));
##
#	md_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	nd_a := setColumn(dec_bat2,"decimal2");
##      dec_bat2.col_name("decimal2"),
#	od_a := multiplex.tactics("/",dec_bat1,dec_bat2);
#	pd_a := setColumn(od_a,"/");
#	qd_a := print(md_a,nd_a,pd_a);
##      [/](dec_bat1,dec_bat2).col_name("/"));
##
#	rd_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	sd_a := setColumn(dec_bat2,"decimal2");
##      dec_bat2.col_name("decimal2"),
#	td_a := multiplex.script("divide",dec_bat1,dec_bat2,10);
#	ud_a := setColumn(td_a,"divide");
#	vd_a := print(rd_a,sd_a,ud_a);
##      [divide](dec_bat1,dec_bat2,10).col_name("divide"));
##
#	wd_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	xd_a := setColumn(dec_bat2,"decimal2");
##      dec_bat2.col_name("decimal2"),
#	yd_a := setColumn(dec_prec,"precision");
##      dec_prec.col_name("precision"),
#	ae_a := multiplex.script("divide",dec_bat1,dec_bat2,dec_prec);
#	be_a := setColumn(ae_a,"divide");
#	ce_a := print(wd_a,xd_a,yd_a,be_a);
##      [divide](dec_bat1,dec_bat2,dec_prec).col_name("divide"));
##
#	de_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	ee_a := setColumn(dec_bat2,"decimal2");
##      dec_bat2.col_name("decimal2"),
#	fe_a := multiplex.tactics("+",dec_bat1,dec_bat2);
#	ge_a := setColumn(fe_a,"+");
#	he_a := print(de_a,ee_a,ge_a);
##      [+](dec_bat1,dec_bat2).col_name("+"));
##
#	ie_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	je_a := setColumn(dec_bat2,"decimal2");
##      dec_bat2.col_name("decimal2"),
#	ke_a := multiplex.tactics("-",dec_bat1,dec_bat2);
#	le_a := setColumn(ke_a,"-");
#	me_a := print(ie_a,je_a,le_a);
##      [-](dec_bat1,dec_bat2).col_name("-"));
##
#	ne_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	oe_a := setColumn(dec_bat2,"decimal2");
##      dec_bat2.col_name("decimal2"),
#	pe_a := multiplex.script("=",dec_bat1,dec_bat2);
#	qe_a := setColumn(pe_a,"=");
#	re_a := print(ne_a,oe_a,qe_a);
##      [=](dec_bat1,dec_bat2).col_name("="));
##
#	se_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	te_a := setColumn(dec_bat2,"decimal2");
##      dec_bat2.col_name("decimal2"),
#	ue_a := multiplex.script("!=",dec_bat1,dec_bat2);
#	ve_a := setColumn(ue_a,"!=");
#	we_a := print(se_a,te_a,ve_a);
##      [!=](dec_bat1,dec_bat2).col_name("!="));
##
#	xe_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	ye_a := setColumn(dec_bat2,"decimal2");
##      dec_bat2.col_name("decimal2"),
#	af_a := multiplex.script("<",dec_bat1,dec_bat2);
#	bf_a := setColumn(af_a,"<");
#	cf_a := print(xe_a,ye_a,bf_a);
##      [<](dec_bat1,dec_bat2).col_name("<"));
##
#	df_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	ef_a := setColumn(dec_bat2,"decimal2");
##      dec_bat2.col_name("decimal2"),
#	ff_a := multiplex.script("<=",dec_bat1,dec_bat2);
#	gf_a := setColumn(ff_a,"<=");
#	hf_a := print(df_a,ef_a,gf_a);
##      [<=](dec_bat1,dec_bat2).col_name("<="));
##
#	if_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	jf_a := setColumn(dec_bat2,"decimal2");
##      dec_bat2.col_name("decimal2"),
#	kf_a := multiplex.script(">",dec_bat1,dec_bat2);
#	lf_a := setColumn(kf_a,">");
#	mf_a := print(if_a,jf_a,lf_a);
##      [>](dec_bat1,dec_bat2).col_name(">"));
##
#	nf_a := setColumn(dec_bat1,"decimal1");
##print(dec_bat1.col_name("decimal1"),
#	of_a := setColumn(dec_bat2,"decimal2");
##      dec_bat2.col_name("decimal2"),
#	pf_a := multiplex.script(">=",dec_bat1,dec_bat2);
#	qf_a := setColumn(pf_a,">=");
#	rf_a := print(nf_a,of_a,qf_a);
##      [>=](dec_bat1,dec_bat2).col_name(">="));
##
### test unary operators
#	dec_abs:= multiplex.script("abs",dec_bat);
##var dec_abs := [abs](dec_bat);
#	dec_neg:= multiplex.script("-",dec_bat);
##var dec_neg := [-](dec_bat);
##
#	sf_a := setColumn(dec_bat,"decimal");
##print(dec_bat.col_name("decimal"),
#	tf_a := multiplex.script("isnil",dec_bat);
#	uf_a := setColumn(tf_a,"isnil");
##      [isnil](dec_bat).col_name("isnil"),
#	vf_a := setColumn(dec_abs,"[abs]");
##      dec_abs.col_name("[abs]"),
#	wf_a := setColumn(dec_neg,"[-]");
#	xf_a := print(sf_a,uf_a,vf_a,wf_a);
##      dec_neg.col_name("[-]"));
##
### test sorting
#	yf_a := reverse(dec_bat);
#	ag_a := sort(yf_a);
#	bg_a := reverse(ag_a);
#	cg_a := setColumn(bg_a,"sorted dec");
#	dg_a := print(cg_a);
##dec_bat.reverse.sort.reverse.col_name("sorted dec").print;
#	eg_a := reverse(dec_abs);
#	fg_a := sort(eg_a);
#	gg_a := reverse(fg_a);
#	hg_a := setColumn(gg_a,"sorted abs(dec)");
#	ig_a := print(hg_a);
##dec_abs.reverse.sort.reverse.col_name("sorted abs(dec)").print;
##
### test hash-join
#	jg_a := reverse(dec_abs);
#	kg_a := join(dec_abs,jg_a);
#	lg_a := print(kg_a);
##dec_abs.join(dec_abs.reverse).print;
##
##
##
##
###line 389 "/ufs/mk/monet_5-0/src/modules/atoms/decimal.mx"
#function pow(base:int, raise:int):int;
##proc pow(int base, int raise) : int {
#	#printf("pow (%d,",base);
#	#printf("%d)= ",raise);
#	mg_a := dbl(base);
#	ng_a := dbl(raise);
#	og_a := pow(mg_a,ng_a);
#	pg_a := int(og_a);
#	#printf("%d\n",pg_a);
#	return pg_a;
##    return int(pow(dbl(base),dbl(raise)));
#end pow;
function Admin.pow(base:int,raise:int):int; #0  (pow:int)<-(base:int)(raise:int)
    mg_a := calc.dbl(base); #1 CALCint_2_dbl (mg_a:dbl)<-(base:int)
    ng_a := calc.dbl(raise); #2 CALCint_2_dbl (ng_a:dbl)<-(raise:int)
    og_a := mmath.pow(mg_a,ng_a); #3 MATHbinary_POWdbl (og_a:dbl)<-(mg_a:dbl)(ng_a:dbl)
    pg_a := calc.int(og_a); #4 CALCdbl_2_int (pg_a:int)<-(og_a:dbl)
    return pg_a; #5  (pow:int)<-(pg_a:int)
end pow; #6  
##}
#function int(i:int):int;
#	return i;
#end int;
function Admin.int(i:int):int; #0  (int:int)<-(i:int)
    return i; #1  (int:int)<-(i:int)
end int; #2  
##proc int(int i) : int return i;
##
#function arith_perftest(b:bat[any::1,any::2], div:any::2, s:str):void;
##proc arith_perftest(bat[any::1,any::2] b, any::2 div, str s) {
#	t:= alarm.time();
#	reduce:= multiplex.tactics("/",b,div);
##  var t := time, reduce := [/](b,div); 
#	qg_a := printf("[/](%s)",s);
##        printf("[/](%s)",s);
#	x:= alarm.time();
#	rg_a := -(x,t);
#	sg_a := printf(" = %dms\n",rg_a);
##        printf(" = %dms\n",time-t);
##
#	t := alarm.time();
##  t := time; 
#	tg_a := printf("join(%s",s);
##        printf("join(%s",s);
#	ug_a := reverse(b);
#	vg_a := join(b,ug_a);
#	wg_a := count(vg_a);
#	xg_a := printf("=%d) = ",wg_a);
##        printf("=%d) = ",join(b,b.reverse).count);
#	x:= alarm.time();
#	yg_a := -(x,t);
#	ah_a := printf("%d ms\n",yg_a);
##        printf("%d ms\n",time - t);
##print(vg_a);
#	t := alarm.time();
##  t := time; 
#	bh_a := printf("group(%s",s);
##        printf("group(%s",s);
##print("div"); print(div);
##print("reduce");print(reduce);
#	(histo,ch_a) := group(reduce);
##print("histo");print(histo); #print("grouping"); print(ch_a);
#	dh_a := tunique(ch_a);
#	eh_a := count(dh_a);
#	fh_a := printf("=%d",eh_a);
##        printf("=%d",CTgroup(reduce).tunique.count);
#	xx:= alarm.time();
#	gh_a := -(xx,t);
#	hh_a := printf(") = %d ms\n",gh_a);
##print(dh_a);
##        printf(") = %d ms\n",time-t);
##
#	t := alarm.time();
##  t := time; 
#	ih_a := printf("[*](%s=",s);
##	printf("[*](%s=",s);
#	jh_a := multiplex.tactics("*",b,div);
#	kh_a := count(jh_a);
#	lh_a := printf("=%d) = ",kh_a);
##        printf("=%d) = ",[*](b,div).count);
#	x:= alarm.time();
#	mh_a := -(x,t);
#	nh_a := printf("%d ms\n",mh_a);
##print(jh_a);
##        printf("%d ms\n",time-t);
##
#	t := alarm.time();
##  t := time; 
#	oh_a := printf("[-](%s",s);
##	printf("[-](%s",s);
#	ph_a := multiplex.tactics("-",b,b);
#	qh_a := count(ph_a);
#	rh_a := printf("=%d)",qh_a);
##        printf("=%d)",[-](b,b).count);
#	x:= alarm.time();
#	sh_a := -(x,t);
#	th_a := printf(" = %d ms\n",sh_a);
##        printf(" = %d ms\n",time-t);
##print(ph_a);
#	t := alarm.time();
##  t := time; 
#	uh_a := printf("[+](%s",s);
##        printf("[+](%s",s);
#	vh_a := multiplex.tactics("+",b,b);
#	wh_a := count(vh_a);
#	xh_a := printf("=%d) = ",wh_a);
##        printf("=%d) = ", [+](b,b).count);
#	x:= alarm.time();
#	yh_a := -(x,t);
#	ai_a := printf(" %d ms\n",yh_a);
##        printf(" %d ms\n",time-t);
#	bi_a := count(b);
#barrier	ci_a:= <(bi_a,1000000);
##  if (b.count < 1000000) {
#	t := alarm.time();
##     t := time; 
#	di_a := printf("[pow](%s",s);
##        printf("[pow](%s",s);
#	ei_a := multiplex.tactics("int",reduce);
#	fi_a := multiplex.tactics("pow",b,ei_a);
#	gi_a := count(fi_a);
#	hi_a := printf("=%d)",gi_a);
##        printf("=%d)",[pow](b,[int](reduce)).count);
##print(ei_a); print(fi_a);
#	x:= alarm.time();
#	ii_a := -(x,t);
#	ji_a := printf(" = %d ms\n",ii_a);
##        printf(" = %d ms\n",time-t);
#	t := alarm.time();
#	ki_a := reverse(b);
#	li_a := sort(ki_a);
##     t := time; b.reverse.sort; 
#	mi_a := printf("sort(%s) = ",s);
##print(li_a);
##	printf("sort(%s) = ",s);
#	x:= alarm.time();
#	ni_a := -(x,t);
#	oi_a := printf(" %d ms\n",ni_a);
##        printf(" %d ms\n",time-t);
##
##  }
#exit	ci_a;
#end arith_perftest;
function Admin.arith_perftest(b:bat[any::1,any::2],div:any::2,s:str):void; #0  (arith_perftest:void)<-(b:bat[any::1,any::2])(div:any::2)(s:str)
    t := alarm.time(); #1 CLKtime (t:int)
    reduce := multiplex.script("/",b,div); #2 CMDmultiplexScript (reduce:bat[any,any])<-($6:str)(b:bat[any::1,any::2])(div:any::2)
    qg_a := system.printf("[/](%s)",s); #3 SYSprint_formatted_str (qg_a:int)<-($8:str)(s:str)
    x := alarm.time(); #4 CLKtime (x:int)
    rg_a := calc.-(x,t); #5 CALCbinarySUBintint (rg_a:int)<-(x:int)(t:int)
    sg_a := system.printf(" = %dms\n",rg_a); #6 SYSprint_formatted_int (sg_a:int)<-($12:str)(rg_a:int)
    t := alarm.time(); #7 CLKtime (t:int)
    tg_a := system.printf("join(%s",s); #8 SYSprint_formatted_str (tg_a:int)<-($14:str)(s:str)
    ug_a := bat.reverse(b); #9 CMDreverse (ug_a:bat[any,any])<-(b:bat[any::1,any::2])
    vg_a := algebra.join(b,ug_a); #10 CMDjoin (vg_a:bat[any,any])<-(b:bat[any::1,any::2])(ug_a:bat[any,any])
    wg_a := algebra.count(vg_a); #11 CMDcount (wg_a:int)<-(vg_a:bat[any,any])
    xg_a := system.printf("=%d) = ",wg_a); #12 SYSprint_formatted_int (xg_a:int)<-($19:str)(wg_a:int)
    x := alarm.time(); #13 CLKtime (x:int)
    yg_a := calc.-(x,t); #14 CALCbinarySUBintint (yg_a:int)<-(x:int)(t:int)
    ah_a := system.printf("%d ms\n",yg_a); #15 SYSprint_formatted_int (ah_a:int)<-($22:str)(yg_a:int)
    t := alarm.time(); #16 CLKtime (t:int)
    bh_a := system.printf("group(%s",s); #17 SYSprint_formatted_str (bh_a:int)<-($24:str)(s:str)
    (histo,ch_a):=group.group(reduce); #18 CTgroup (histo:bat[any,int])(ch_a:bat[any,oid])<-(reduce:bat[any,any])
    dh_a := algebra.tunique(ch_a); #19 CMDtunique (dh_a:bat[any,oid])<-(ch_a:bat[any,oid])
    eh_a := algebra.count(dh_a); #20 CMDcount (eh_a:int)<-(dh_a:bat[any,oid])
    fh_a := system.printf("=%d",eh_a); #21 SYSprint_formatted_int (fh_a:int)<-($30:str)(eh_a:int)
    xx := alarm.time(); #22 CLKtime (xx:int)
    gh_a := calc.-(xx,t); #23 CALCbinarySUBintint (gh_a:int)<-(xx:int)(t:int)
    hh_a := system.printf(") = %d ms\n",gh_a); #24 SYSprint_formatted_int (hh_a:int)<-($34:str)(gh_a:int)
    t := alarm.time(); #25 CLKtime (t:int)
    ih_a := system.printf("[*](%s=",s); #26 SYSprint_formatted_str (ih_a:int)<-($36:str)(s:str)
    jh_a := multiplex.script("*",b,div); #27 CMDmultiplexScript (jh_a:bat[any,any])<-($38:str)(b:bat[any::1,any::2])(div:any::2)
    kh_a := algebra.count(jh_a); #28 CMDcount (kh_a:int)<-(jh_a:bat[any,any])
    lh_a := system.printf("=%d) = ",kh_a); #29 SYSprint_formatted_int (lh_a:int)<-($19:str)(kh_a:int)
    x := alarm.time(); #30 CLKtime (x:int)
    mh_a := calc.-(x,t); #31 CALCbinarySUBintint (mh_a:int)<-(x:int)(t:int)
    nh_a := system.printf("%d ms\n",mh_a); #32 SYSprint_formatted_int (nh_a:int)<-($22:str)(mh_a:int)
    t := alarm.time(); #33 CLKtime (t:int)
    oh_a := system.printf("[-](%s",s); #34 SYSprint_formatted_str (oh_a:int)<-($44:str)(s:str)
    ph_a := multiplex.script("-",b,b); #35 CMDmultiplexScript (ph_a:bat[any,any])<-($46:str)(b:bat[any::1,any::2])(b:bat[any::1,any::2])
    qh_a := algebra.count(ph_a); #36 CMDcount (qh_a:int)<-(ph_a:bat[any,any])
    rh_a := system.printf("=%d)",qh_a); #37 SYSprint_formatted_int (rh_a:int)<-($49:str)(qh_a:int)
    x := alarm.time(); #38 CLKtime (x:int)
    sh_a := calc.-(x,t); #39 CALCbinarySUBintint (sh_a:int)<-(x:int)(t:int)
    th_a := system.printf(" = %d ms\n",sh_a); #40 SYSprint_formatted_int (th_a:int)<-($52:str)(sh_a:int)
    t := alarm.time(); #41 CLKtime (t:int)
    uh_a := system.printf("[+](%s",s); #42 SYSprint_formatted_str (uh_a:int)<-($54:str)(s:str)
    vh_a := multiplex.script("+",b,b); #43 CMDmultiplexScript (vh_a:bat[any,any])<-($56:str)(b:bat[any::1,any::2])(b:bat[any::1,any::2])
    wh_a := algebra.count(vh_a); #44 CMDcount (wh_a:int)<-(vh_a:bat[any,any])
    xh_a := system.printf("=%d) = ",wh_a); #45 SYSprint_formatted_int (xh_a:int)<-($59:str)(wh_a:int)
    x := alarm.time(); #46 CLKtime (x:int)
    yh_a := calc.-(x,t); #47 CALCbinarySUBintint (yh_a:int)<-(x:int)(t:int)
    ai_a := system.printf(" %d ms\n",yh_a); #48 SYSprint_formatted_int (ai_a:int)<-($62:str)(yh_a:int)
    bi_a := algebra.count(b); #49 CMDcount (bi_a:int)<-(b:bat[any::1,any::2])
barrier ci_a := calc.<(bi_a,1000000); #50 CALCcompLTintint (ci_a:bit)<-(bi_a:int)($65:int) jump 67
    t := alarm.time(); #51 CLKtime (t:int)
    di_a := system.printf("[pow](%s",s); #52 SYSprint_formatted_str (di_a:int)<-($67:str)(s:str)
    ei_a := batcalc.int(reduce); #53 CMDconvertstr_int (ei_a:bat[any,int])<-(reduce:bat[any,any])
    fi_a := multiplex.script("pow",b,ei_a); #54 CMDmultiplexScript (fi_a:bat[any,int])<-($71:str)(b:bat[any::1,any::2])(ei_a:bat[any,int])
    gi_a := algebra.count(fi_a); #55 CMDcount (gi_a:int)<-(fi_a:bat[any,int])
    hi_a := system.printf("=%d)",gi_a); #56 SYSprint_formatted_int (hi_a:int)<-($49:str)(gi_a:int)
    x := alarm.time(); #57 CLKtime (x:int)
    ii_a := calc.-(x,t); #58 CALCbinarySUBintint (ii_a:int)<-(x:int)(t:int)
    ji_a := system.printf(" = %d ms\n",ii_a); #59 SYSprint_formatted_int (ji_a:int)<-($52:str)(ii_a:int)
    t := alarm.time(); #60 CLKtime (t:int)
    ki_a := bat.reverse(b); #61 CMDreverse (ki_a:bat[any,any])<-(b:bat[any::1,any::2])
    li_a := algebra.sort(ki_a); #62 CMDsort (li_a:bat[any,any])<-(ki_a:bat[any,any])
    mi_a := system.printf("sort(%s) = ",s); #63 SYSprint_formatted_str (mi_a:int)<-($79:str)(s:str)
    x := alarm.time(); #64 CLKtime (x:int)
    ni_a := calc.-(x,t); #65 CALCbinarySUBintint (ni_a:int)<-(x:int)(t:int)
    oi_a := system.printf(" %d ms\n",ni_a); #66 SYSprint_formatted_int (oi_a:int)<-($62:str)(ni_a:int)
exit ci_a; #67  (ci_a:bit)
end arith_perftest; #68  
!WARNING: newConstant:int coerced to lng
!WARNING: garbage collection not guaranteed
##}
##
#function arith_perftest(b:bat[any::1,decimal], div:decimal, s:str):void;
##proc arith_perftest(bat[any::1,decimal] b, decimal div, str s) {
#print("DECIMAL variant");
#	t:= alarm.time();
#	reduce:= decimal.bulkdivide(b,div);
##  var t := time, reduce := [/](b,div); 
#	qg_a := printf("[/](%s)",s);
##        printf("[/](%s)",s);
#	x:= alarm.time();
#	rg_a := -(x,t);
#	sg_a := printf(" = %dms\n",rg_a);
##        printf(" = %dms\n",time-t);
##
#	t := alarm.time();
##  t := time; 
#	tg_a := printf("join(%s",s);
##        printf("join(%s",s);
#	ug_a := reverse(b);
#	vg_a := join(b,ug_a);
#	wg_a := count(vg_a);
#	xg_a := printf("=%d) = ",wg_a);
##        printf("=%d) = ",join(b,b.reverse).count);
#	x:= alarm.time();
#	yg_a := -(x,t);
#	ah_a := printf("%d ms\n",yg_a);
##        printf("%d ms\n",time - t);
##print(vg_a);
#	t := alarm.time();
##  t := time; 
#	bh_a := printf("group(%s",s);
##        printf("group(%s",s);
##print("div"); print(div);
##print("reduce");print(reduce);
#	(histo,ch_a) := group(reduce);
##print("histo");print(histo); #print("grouping"); print(ch_a);
#	dh_a := tunique(ch_a);
#	eh_a := count(dh_a);
#	fh_a := printf("=%d",eh_a);
##        printf("=%d",CTgroup(reduce).tunique.count);
#	xx:= alarm.time();
#	gh_a := -(xx,t);
#	hh_a := printf(") = %d ms\n",gh_a);
##print(dh_a);
##        printf(") = %d ms\n",time-t);
##
#	t := alarm.time();
##  t := time; 
#	ih_a := printf("[*](%s=",s);
##	printf("[*](%s=",s);
#	jh_a := multiplex.tactics("*",b,div);
#	kh_a := count(jh_a);
#	lh_a := printf("=%d) = ",kh_a);
##        printf("=%d) = ",[*](b,div).count);
#	x:= alarm.time();
#	mh_a := -(x,t);
#	nh_a := printf("%d ms\n",mh_a);
##print(jh_a);
##        printf("%d ms\n",time-t);
##
#	t := alarm.time();
##  t := time; 
#	oh_a := printf("[-](%s",s);
##	printf("[-](%s",s);
#	ph_a := multiplex.tactics("-",b,b);
#	qh_a := count(ph_a);
#	rh_a := printf("=%d)",qh_a);
##        printf("=%d)",[-](b,b).count);
#	x:= alarm.time();
#	sh_a := -(x,t);
#	th_a := printf(" = %d ms\n",sh_a);
##        printf(" = %d ms\n",time-t);
##print(ph_a);
#	t := alarm.time();
##  t := time; 
#	uh_a := printf("[+](%s",s);
##        printf("[+](%s",s);
#	vh_a := multiplex.tactics("+",b,b);
#	wh_a := count(vh_a);
#	xh_a := printf("=%d) = ",wh_a);
##        printf("=%d) = ", [+](b,b).count);
#	x:= alarm.time();
#	yh_a := -(x,t);
#	ai_a := printf(" %d ms\n",yh_a);
##        printf(" %d ms\n",time-t);
#	bi_a := count(b);
#barrier	ci_a:= <(bi_a,1000000);
##  if (b.count < 1000000) {
#	t := alarm.time();
##     t := time; 
#	di_a := printf("[pow](%s",s);
##        printf("[pow](%s",s);
#	ei_a := multiplex.tactics("int",reduce);
#	fi_a := multiplex.tactics("pow",b,ei_a);
#	gi_a := count(fi_a);
#	hi_a := printf("=%d)",gi_a);
##        printf("=%d)",[pow](b,[int](reduce)).count);
##print(ei_a); print(fi_a);
#	x:= alarm.time();
#	ii_a := -(x,t);
#	ji_a := printf(" = %d ms\n",ii_a);
##        printf(" = %d ms\n",time-t);
#	t := alarm.time();
#	ki_a := reverse(b);
#	li_a := sort(ki_a);
##     t := time; b.reverse.sort; 
#	mi_a := printf("sort(%s) = ",s);
##print(li_a);
##	printf("sort(%s) = ",s);
#	x:= alarm.time();
#	ni_a := -(x,t);
#	oi_a := printf(" %d ms\n",ni_a);
##        printf(" %d ms\n",time-t);
##
##  }
#exit	ci_a;
#end arith_perftest;
function Admin.arith_perftest(b:bat[any::1,decimal],div:decimal,s:str):void; #0  (arith_perftest:void)<-(b:bat[any::1,decimal])(div:decimal)(s:str)
    io.print("DECIMAL variant"); #1 CMDprint_val ($4:int)<-($5:str)
    t := alarm.time(); #2 CLKtime (t:int)
    reduce := decimal.bulkdivide(b,div); #3 decimal_bulkdivide_default (reduce:bat[any,decimal])<-(b:bat[any::1,decimal])(div:decimal)
    qg_a := system.printf("[/](%s)",s); #4 SYSprint_formatted_str (qg_a:int)<-($9:str)(s:str)
    x := alarm.time(); #5 CLKtime (x:int)
    rg_a := calc.-(x,t); #6 CALCbinarySUBintint (rg_a:int)<-(x:int)(t:int)
    sg_a := system.printf(" = %dms\n",rg_a); #7 SYSprint_formatted_int (sg_a:int)<-($13:str)(rg_a:int)
    t := alarm.time(); #8 CLKtime (t:int)
    tg_a := system.printf("join(%s",s); #9 SYSprint_formatted_str (tg_a:int)<-($15:str)(s:str)
    ug_a := bat.reverse(b); #10 CMDreverse (ug_a:bat[decimal,any])<-(b:bat[any::1,decimal])
    vg_a := algebra.join(b,ug_a); #11 CMDjoin (vg_a:bat[any,any])<-(b:bat[any::1,decimal])(ug_a:bat[decimal,any])
    wg_a := algebra.count(vg_a); #12 CMDcount (wg_a:int)<-(vg_a:bat[any,any])
    xg_a := system.printf("=%d) = ",wg_a); #13 SYSprint_formatted_int (xg_a:int)<-($20:str)(wg_a:int)
    x := alarm.time(); #14 CLKtime (x:int)
    yg_a := calc.-(x,t); #15 CALCbinarySUBintint (yg_a:int)<-(x:int)(t:int)
    ah_a := system.printf("%d ms\n",yg_a); #16 SYSprint_formatted_int (ah_a:int)<-($23:str)(yg_a:int)
    t := alarm.time(); #17 CLKtime (t:int)
    bh_a := system.printf("group(%s",s); #18 SYSprint_formatted_str (bh_a:int)<-($25:str)(s:str)
    (histo,ch_a):=group.group(reduce); #19 CTgroup (histo:bat[decimal,int])(ch_a:bat[any,oid])<-(reduce:bat[any,decimal])
    dh_a := algebra.tunique(ch_a); #20 CMDtunique (dh_a:bat[any,oid])<-(ch_a:bat[any,oid])
    eh_a := algebra.count(dh_a); #21 CMDcount (eh_a:int)<-(dh_a:bat[any,oid])
    fh_a := system.printf("=%d",eh_a); #22 SYSprint_formatted_int (fh_a:int)<-($31:str)(eh_a:int)
    xx := alarm.time(); #23 CLKtime (xx:int)
    gh_a := calc.-(xx,t); #24 CALCbinarySUBintint (gh_a:int)<-(xx:int)(t:int)
    hh_a := system.printf(") = %d ms\n",gh_a); #25 SYSprint_formatted_int (hh_a:int)<-($35:str)(gh_a:int)
    t := alarm.time(); #26 CLKtime (t:int)
    ih_a := system.printf("[*](%s=",s); #27 SYSprint_formatted_str (ih_a:int)<-($37:str)(s:str)
    jh_a := multiplex.script("*",b,div); #28 CMDmultiplexScript (jh_a:bat[any,decimal])<-($39:str)(b:bat[any::1,decimal])(div:decimal)
    kh_a := algebra.count(jh_a); #29 CMDcount (kh_a:int)<-(jh_a:bat[any,decimal])
    lh_a := system.printf("=%d) = ",kh_a); #30 SYSprint_formatted_int (lh_a:int)<-($20:str)(kh_a:int)
    x := alarm.time(); #31 CLKtime (x:int)
    mh_a := calc.-(x,t); #32 CALCbinarySUBintint (mh_a:int)<-(x:int)(t:int)
    nh_a := system.printf("%d ms\n",mh_a); #33 SYSprint_formatted_int (nh_a:int)<-($23:str)(mh_a:int)
    t := alarm.time(); #34 CLKtime (t:int)
    oh_a := system.printf("[-](%s",s); #35 SYSprint_formatted_str (oh_a:int)<-($45:str)(s:str)
    ph_a := multiplex.script("-",b,b); #36 CMDmultiplexScript (ph_a:bat[any,decimal])<-($47:str)(b:bat[any::1,decimal])(b:bat[any::1,decimal])
    qh_a := algebra.count(ph_a); #37 CMDcount (qh_a:int)<-(ph_a:bat[any,decimal])
    rh_a := system.printf("=%d)",qh_a); #38 SYSprint_formatted_int (rh_a:int)<-($50:str)(qh_a:int)
    x := alarm.time(); #39 CLKtime (x:int)
    sh_a := calc.-(x,t); #40 CALCbinarySUBintint (sh_a:int)<-(x:int)(t:int)
    th_a := system.printf(" = %d ms\n",sh_a); #41 SYSprint_formatted_int (th_a:int)<-($53:str)(sh_a:int)
    t := alarm.time(); #42 CLKtime (t:int)
    uh_a := system.printf("[+](%s",s); #43 SYSprint_formatted_str (uh_a:int)<-($55:str)(s:str)
    vh_a := multiplex.script("+",b,b); #44 CMDmultiplexScript (vh_a:bat[any,decimal])<-($57:str)(b:bat[any::1,decimal])(b:bat[any::1,decimal])
    wh_a := algebra.count(vh_a); #45 CMDcount (wh_a:int)<-(vh_a:bat[any,decimal])
    xh_a := system.printf("=%d) = ",wh_a); #46 SYSprint_formatted_int (xh_a:int)<-($60:str)(wh_a:int)
    x := alarm.time(); #47 CLKtime (x:int)
    yh_a := calc.-(x,t); #48 CALCbinarySUBintint (yh_a:int)<-(x:int)(t:int)
    ai_a := system.printf(" %d ms\n",yh_a); #49 SYSprint_formatted_int (ai_a:int)<-($63:str)(yh_a:int)
    bi_a := algebra.count(b); #50 CMDcount (bi_a:int)<-(b:bat[any::1,decimal])
barrier ci_a := calc.<(bi_a,1000000); #51 CALCcompLTintint (ci_a:bit)<-(bi_a:int)($66:int) jump 68
    t := alarm.time(); #52 CLKtime (t:int)
    di_a := system.printf("[pow](%s",s); #53 SYSprint_formatted_str (di_a:int)<-($68:str)(s:str)
    ei_a := multiplex.script("int",reduce); #54 CMDmultiplexScript (ei_a:bat[any,int])<-($70:str)(reduce:bat[any,decimal])
    fi_a := multiplex.script("pow",b,ei_a); #55 CMDmultiplexScript (fi_a:bat[any,decimal])<-($72:str)(b:bat[any::1,decimal])(ei_a:bat[any,int])
    gi_a := algebra.count(fi_a); #56 CMDcount (gi_a:int)<-(fi_a:bat[any,decimal])
    hi_a := system.printf("=%d)",gi_a); #57 SYSprint_formatted_int (hi_a:int)<-($50:str)(gi_a:int)
    x := alarm.time(); #58 CLKtime (x:int)
    ii_a := calc.-(x,t); #59 CALCbinarySUBintint (ii_a:int)<-(x:int)(t:int)
    ji_a := system.printf(" = %d ms\n",ii_a); #60 SYSprint_formatted_int (ji_a:int)<-($53:str)(ii_a:int)
    t := alarm.time(); #61 CLKtime (t:int)
    ki_a := bat.reverse(b); #62 CMDreverse (ki_a:bat[decimal,any])<-(b:bat[any::1,decimal])
    li_a := algebra.sort(ki_a); #63 CMDsort (li_a:bat[decimal,any])<-(ki_a:bat[decimal,any])
    mi_a := system.printf("sort(%s) = ",s); #64 SYSprint_formatted_str (mi_a:int)<-($80:str)(s:str)
    x := alarm.time(); #65 CLKtime (x:int)
    ni_a := calc.-(x,t); #66 CALCbinarySUBintint (ni_a:int)<-(x:int)(t:int)
    oi_a := system.printf(" %d ms\n",ni_a); #67 SYSprint_formatted_int (oi_a:int)<-($63:str)(ni_a:int)
exit ci_a; #68  (ci_a:bit)
end arith_perftest; #69  
!WARNING: newConstant:int coerced to lng
!WARNING: garbage collection not guaranteed
##}
##
#	i:= 10000;
##var i := 10000;
#	int_10K:= new(void,int,10000);
##var int_10K  := new(void,int,10000);
#barrier	pi_a:= true;
#	i:= i-1;
#	ri_a := i;
#	si_a := >=(ri_a,0);
#barrier	qi_a:= si_a;
##while((i :-= 1) >= 0) {
#	zz:= nil;
#	ti_a := insert(int_10K,zz,i);
##        int_10K.insert(nil,i);
#redo	pi_a;
#exit	qi_a;
#exit	pi_a;
##}
#	ui_a := bat.setSequenceBase(int_10K,0@0);
##int_10K.seqbase(0@0);
##
#	vi_a := printf("#~BeginVariableOutput~#\n");
#	wi_a := arith_perftest(int_10K,101,"int_10K");
#	xi_a := printf("#~EndVariableOutput~#\n");
##printf("#~BeginVariableOutput~#\n"); arith_perftest(int_10K, 101, "int_10K"); printf("#~EndVariableOutput~#\n");
##
#	int_100K:= new(void,int,100000);
##var int_100K := new(void,int,100000);
#barrier	dj_a:= true;
#	i:= i+1;
#	fj_a := i;
#	gj_a := <(fj_a,10);
#barrier	ej_a:= gj_a;
##while((i :+= 1) < 10) {
#	hj_a := -(9,i);
#	base:= *(hj_a,10000);
##        var base := (9 - i) * 10000;
#	ij_a := +(int_10K,base);
#	jj_a := insert(int_100K,ij_a);
##        int_100K.insert([+](int_10K,base));
#redo	dj_a;
#exit	ej_a;
#exit	dj_a;
##}
#	kj_a := bat.setSequenceBase(int_100K,0@0);
##int_100K.seqbase(0@0);
##
#	lj_a := printf("#~BeginVariableOutput~#\n");
#	mj_a := arith_perftest(int_100K,1001,"int_100K");
#	nj_a := printf("#~EndVariableOutput~#\n");
##printf("#~BeginVariableOutput~#\n"); arith_perftest(int_100K, 1001, "int_100K"); printf("#~EndVariableOutput~#\n");
#
#	dec_10K:= multiplex.script("decimal",int_10K);
##var dec_10K := [decimal](int_10K);
#	yi_a := printf("#~BeginVariableOutput~#\n");
#	aj_a := decimal("101");
#	bj_a := arith_perftest(dec_10K,aj_a,"dec_10K");
#	cj_a := printf("#~EndVariableOutput~#\n");
##printf("#~BeginVariableOutput~#\n"); arith_perftest(dec_10K, decimal("101"), "dec_10K"); printf("#~EndVariableOutput~#\n");
##
##
#	dec_100K:= multiplex.script("decimal",int_100K);
##var dec_100K := [decimal](int_100K);
#	oj_a := printf("#~BeginVariableOutput~#\n");
#	pj_a := decimal("1001");
#	qj_a := arith_perftest(dec_100K,pj_a,"dec_100K");
#	rj_a := printf("#~EndVariableOutput~#\n");
##printf("#~BeginVariableOutput~#\n"); arith_perftest(dec_100K, decimal("1001"), "dec_100K"); printf("#~EndVariableOutput~#\n");
##
##	int_1M:= new(void,int,1000000);
###var int_1M := new(void,int,1000000);
##barrier	sj_a:= true;
##	i:= i-1;
##	uj_a := i;
##	vj_a := >=(uj_a,0);
##barrier	tj_a:= vj_a;
###while((i :-= 1) >= 0) {
##	base:= *(i,100000);
###        var base := i * 100000;
##	wj_a := +(int_100K,base);
##	xj_a := insert(int_1M,wj_a);
###        int_1M.insert([+](int_100K,base));
##redo	sj_a;
##exit	tj_a;
##end	sj_a;
###}
##	yj_a := bat.setSequenceBase(int_1M,0@0);
###int_1M.seqbase(0@0);
###
##	ak_a := printf("#~BeginVariableOutput~#\n");
##	bk_a := arith_perftest(int_1M,10001,"int_1M");
##	ck_a := printf("#~EndVariableOutput~#\n");
###printf("#~BeginVariableOutput~#\n"); arith_perftest(int_1M, 10001, "int_1M"); printf("#~EndVariableOutput~#\n");
###
##	dec_1M:= multiplex.script("decimal",int_1M);
###var dec_1M := [decimal](int_1M);
##	dk_a := printf("#~BeginVariableOutput~#\n");
##	ek_a := decimal("10001");
##	fk_a := arith_perftest(dec_1M,ek_a,"dec_1M");
##	gk_a := printf("#~EndVariableOutput~#\n");
###printf("#~BeginVariableOutput~#\n"); arith_perftest(dec_1M, decimal("10001"), "dec_1M"); printf("#~EndVariableOutput~#\n");
###
###quit;
###
###
####line 445 "/ufs/mk/monet_5-0/src/modules/atoms/decimal.mx"
###
###Identifer 'col_name' mapped to 'setColumn'
###Identifer 'seqbase' mapped to 'bat.setSequenceBase'
###Identifer 'CTgroup' mapped to 'group'
#
function Admin.main():int; #0  (main:int)
    aa_a := decimal.decimal_minrepeat(20); #1 decimal_setminrepeat (aa_a:void)<-($2:int)
    dec_nil := decimal.decimal("nil"); #2 decimal_from_str (dec_nil:decimal)<-($4:str)
    dec_zero := decimal.decimal("-0000000000000000000000000000000000E-8989"); #3 decimal_from_str (dec_zero:decimal)<-($6:str)
    dec_tiny := decimal.decimal("+0.000000000000000000000000001122"); #4 decimal_from_str (dec_tiny:decimal)<-($8:str)
    nec_tiny := decimal.decimal("-11220000000000E-40"); #5 decimal_from_str (nec_tiny:decimal)<-($10:str)
    dec_small := decimal.decimal(2244); #6 decimal_from_int (dec_small:decimal)<-($12:int)
    nec_small := decimal.decimal("-22440000000000E-10"); #7 decimal_from_str (nec_small:decimal)<-($14:str)
    dec_num := decimal.decimal("+4488E15"); #8 decimal_from_str (dec_num:decimal)<-($16:str)
    nec_num := decimal.decimal("-44880000000000E5"); #9 decimal_from_str (nec_num:decimal)<-($18:str)
    dec_big := decimal.decimal("+1122E40"); #10 decimal_from_str (dec_big:decimal)<-($20:str)
    nec_big := decimal.decimal("-11220000000000E30"); #11 decimal_from_str (nec_big:decimal)<-($22:str)
    dec_huge := decimal.decimal("+22440000000000E9000"); #12 decimal_from_str (dec_huge:decimal)<-($24:str)
    nec_huge := decimal.decimal("-2244E9010"); #13 decimal_from_str (nec_huge:decimal)<-($26:str)
    dec_bat := bbp.new(str,decimal,10); #14 CMDBATnew (dec_bat:bat[str,decimal])<-(str:str)(decimal:decimal)($30:int)
    ba_a := bat.insert(dec_bat,"dec_nil",dec_nil); #15 CMDinsert_bun (ba_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($32:str)(dec_nil:decimal)
    ca_a := bat.insert(dec_bat,"dec_zero",dec_zero); #16 CMDinsert_bun (ca_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($34:str)(dec_zero:decimal)
    da_a := bat.insert(dec_bat,"dec_tiny",dec_tiny); #17 CMDinsert_bun (da_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($36:str)(dec_tiny:decimal)
    ea_a := bat.insert(dec_bat,"nec_tiny",nec_tiny); #18 CMDinsert_bun (ea_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($38:str)(nec_tiny:decimal)
    fa_a := bat.insert(dec_bat,"dec_small",dec_small); #19 CMDinsert_bun (fa_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($40:str)(dec_small:decimal)
    ga_a := bat.insert(dec_bat,"nec_small",nec_small); #20 CMDinsert_bun (ga_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($42:str)(nec_small:decimal)
    ha_a := bat.insert(dec_bat,"dec_num",dec_num); #21 CMDinsert_bun (ha_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($44:str)(dec_num:decimal)
    ia_a := bat.insert(dec_bat,"nec_num",nec_num); #22 CMDinsert_bun (ia_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($46:str)(nec_num:decimal)
    ja_a := bat.insert(dec_bat,"dec_big",dec_big); #23 CMDinsert_bun (ja_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($48:str)(dec_big:decimal)
    ka_a := bat.insert(dec_bat,"nec_big",nec_big); #24 CMDinsert_bun (ka_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($50:str)(nec_big:decimal)
    la_a := bat.insert(dec_bat,"dec_huge",dec_huge); #25 CMDinsert_bun (la_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($52:str)(dec_huge:decimal)
    ma_a := bat.insert(dec_bat,"nec_huge",nec_huge); #26 CMDinsert_bun (ma_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($54:str)(nec_huge:decimal)
    dec_prc := multiplex.script("getprecision",dec_bat); #27 CMDmultiplexScript (dec_prc:bat[str,int])<-($56:str)(dec_bat:bat[str,decimal])
    dec_scl := multiplex.script("getscale",dec_bat); #28 CMDmultiplexScript (dec_scl:bat[str,int])<-($58:str)(dec_bat:bat[str,decimal])
    dec_flt := multiplex.script("flt",dec_bat); #29 CMDmultiplexScript (dec_flt:bat[str,flt])<-($60:str)(dec_bat:bat[str,decimal])
    dec_int := multiplex.script("int",dec_bat); #30 CMDmultiplexScript (dec_int:bat[str,int])<-($62:str)(dec_bat:bat[str,decimal])
    dec_lng := multiplex.script("lng",dec_bat); #31 CMDmultiplexScript (dec_lng:bat[str,lng])<-($64:str)(dec_bat:bat[str,decimal])
    dec_dbl := multiplex.script("dbl",dec_bat); #32 CMDmultiplexScript (dec_dbl:bat[str,dbl])<-($66:str)(dec_bat:bat[str,decimal])
    na_a := bat.setColumn(dec_bat,"value"); #33 CMDsetColumn (na_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($68:str)
    oa_a := bat.setColumn(dec_prc,"precision"); #34 CMDsetColumn (oa_a:bat[str,int])<-(dec_prc:bat[str,int])($70:str)
    pa_a := bat.setColumn(dec_scl,"scale"); #35 CMDsetColumn (pa_a:bat[str,int])<-(dec_scl:bat[str,int])($72:str)
    qa_a := io.print(na_a,oa_a,pa_a); #36 CMDtable (qa_a:int)<-(na_a:bat[str,decimal])(oa_a:bat[str,int])(pa_a:bat[str,int])
    ra_a := bat.setColumn(dec_bat,"value"); #37 CMDsetColumn (ra_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($68:str)
    sa_a := bat.setColumn(dec_int,"int"); #38 CMDsetColumn (sa_a:bat[str,int])<-(dec_int:bat[str,int])($62:str)
    ta_a := bat.setColumn(dec_lng,"lng"); #39 CMDsetColumn (ta_a:bat[str,lng])<-(dec_lng:bat[str,lng])($64:str)
    ua_a := io.print(ra_a,sa_a,ta_a); #40 CMDtable (ua_a:int)<-(ra_a:bat[str,decimal])(sa_a:bat[str,int])(ta_a:bat[str,lng])
    va_a := bat.setColumn(dec_bat,"value"); #41 CMDsetColumn (va_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($68:str)
    wa_a := bat.setColumn(dec_flt,"flt"); #42 CMDsetColumn (wa_a:bat[str,flt])<-(dec_flt:bat[str,flt])($60:str)
    xa_a := bat.setColumn(dec_dbl,"dbl"); #43 CMDsetColumn (xa_a:bat[str,dbl])<-(dec_dbl:bat[str,dbl])($66:str)
    ya_a := io.print(va_a,wa_a,xa_a); #44 CMDtable (ya_a:int)<-(va_a:bat[str,decimal])(wa_a:bat[str,flt])(xa_a:bat[str,dbl])
    ab_a := bat.setColumn(dec_bat,"decimal"); #45 CMDsetColumn (ab_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($83:str)
    bb_a := multiplex.script("decimal",dec_int); #46 CMDmultiplexScript (bb_a:bat[str,decimal])<-($83:str)(dec_int:bat[str,int])
    cb_a := bat.setColumn(bb_a,"from_int"); #47 CMDsetColumn (cb_a:bat[str,decimal])<-(bb_a:bat[str,decimal])($86:str)
    db_a := multiplex.script("decimal",dec_lng); #48 CMDmultiplexScript (db_a:bat[str,decimal])<-($83:str)(dec_lng:bat[str,lng])
    eb_a := bat.setColumn(db_a,"from_lng"); #49 CMDsetColumn (eb_a:bat[str,decimal])<-(db_a:bat[str,decimal])($89:str)
    fb_a := io.print(ab_a,cb_a,eb_a); #50 CMDtable (fb_a:int)<-(ab_a:bat[str,decimal])(cb_a:bat[str,decimal])(eb_a:bat[str,decimal])
    gb_a := bat.setColumn(dec_bat,"decimal"); #51 CMDsetColumn (gb_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($83:str)
    hb_a := multiplex.script("decimal",dec_flt); #52 CMDmultiplexScript (hb_a:bat[str,decimal])<-($83:str)(dec_flt:bat[str,flt])
    ib_a := bat.setColumn(hb_a,"from_flt"); #53 CMDsetColumn (ib_a:bat[str,decimal])<-(hb_a:bat[str,decimal])($94:str)
    jb_a := io.print(gb_a,ib_a); #54 CMDtable (jb_a:int)<-(gb_a:bat[str,decimal])(ib_a:bat[str,decimal])
    kb_a := bat.setColumn(dec_bat,"decimal"); #55 CMDsetColumn (kb_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($83:str)
    lb_a := multiplex.script("decimal",dec_dbl); #56 CMDmultiplexScript (lb_a:bat[str,decimal])<-($83:str)(dec_dbl:bat[str,dbl])
    mb_a := bat.setColumn(lb_a,"from_dbl"); #57 CMDsetColumn (mb_a:bat[str,decimal])<-(lb_a:bat[str,decimal])($99:str)
    nb_a := io.print(kb_a,mb_a); #58 CMDtable (nb_a:int)<-(kb_a:bat[str,decimal])(mb_a:bat[str,decimal])
    ob_a := bat.setColumn(dec_bat,"decimal"); #59 CMDsetColumn (ob_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($83:str)
    pb_a := multiplex.script("setscale",dec_bat,0); #60 CMDmultiplexScript (pb_a:bat[str,decimal])<-($103:str)(dec_bat:bat[str,decimal])($104:int)
    qb_a := bat.setColumn(pb_a,"setscale(0)"); #61 CMDsetColumn (qb_a:bat[str,decimal])<-(pb_a:bat[str,decimal])($106:str)
    rb_a := multiplex.script("setscale",dec_bat,10); #62 CMDmultiplexScript (rb_a:bat[str,decimal])<-($103:str)(dec_bat:bat[str,decimal])($108:int)
    sb_a := bat.setColumn(rb_a,"setscale(10)"); #63 CMDsetColumn (sb_a:bat[str,decimal])<-(rb_a:bat[str,decimal])($110:str)
    tb_a := batcalc.-(dec_scl,5); #64 CMDbatMINcst (tb_a:bat[str,int])<-(dec_scl:bat[str,int])($112:int)
    ub_a := multiplex.script("setscale",dec_bat,tb_a); #65 CMDmultiplexScript (ub_a:bat[str,decimal])<-($103:str)(dec_bat:bat[str,decimal])(tb_a:bat[str,int])
    vb_a := bat.setColumn(ub_a,"setscale(-5)"); #66 CMDsetColumn (vb_a:bat[str,decimal])<-(ub_a:bat[str,decimal])($115:str)
    wb_a := io.print(ob_a,qb_a,sb_a,vb_a); #67 CMDtable (wb_a:int)<-(ob_a:bat[str,decimal])(qb_a:bat[str,decimal])(sb_a:bat[str,decimal])(vb_a:bat[str,decimal])
    xb_a := bat.setColumn(dec_bat,"decimal"); #68 CMDsetColumn (xb_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($118:str)
    yb_a := multiplex.script("setprecision",dec_bat,0); #69 CMDmultiplexScript (yb_a:bat[str,decimal])<-($120:str)(dec_bat:bat[str,decimal])($104:int)
    ac_a := bat.setColumn(yb_a,"setprecision(0)"); #70 CMDsetColumn (ac_a:bat[str,decimal])<-(yb_a:bat[str,decimal])($122:str)
    bc_a := multiplex.script("setprecision",dec_bat,10); #71 CMDmultiplexScript (bc_a:bat[str,decimal])<-($120:str)(dec_bat:bat[str,decimal])($108:int)
    cc_a := bat.setColumn(bc_a,"setprecision(10)"); #72 CMDsetColumn (cc_a:bat[str,decimal])<-(bc_a:bat[str,decimal])($125:str)
    dc_a := batcalc.-(dec_prc,5); #73 CMDbatMINcst (dc_a:bat[str,int])<-(dec_prc:bat[str,int])($112:int)
    ec_a := multiplex.script("setprecision",dec_bat,dc_a); #74 CMDmultiplexScript (ec_a:bat[str,decimal])<-($120:str)(dec_bat:bat[str,decimal])(dc_a:bat[str,int])
    fc_a := bat.setColumn(ec_a,"setprecision(-5)"); #75 CMDsetColumn (fc_a:bat[str,decimal])<-(ec_a:bat[str,decimal])($129:str)
    gc_a := io.print(xb_a,ac_a,cc_a,fc_a); #76 CMDtable (gc_a:int)<-(xb_a:bat[str,decimal])(ac_a:bat[str,decimal])(cc_a:bat[str,decimal])(fc_a:bat[str,decimal])
    hc_a := bat.setColumn(dec_bat,"decimal"); #77 CMDsetColumn (hc_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($118:str)
    ic_a := multiplex.script("addscale",dec_bat,-5); #78 CMDmultiplexScript (ic_a:bat[str,decimal])<-($133:str)(dec_bat:bat[str,decimal])($134:int)
    jc_a := bat.setColumn(ic_a,"addscale(-5)"); #79 CMDsetColumn (jc_a:bat[str,decimal])<-(ic_a:bat[str,decimal])($136:str)
    kc_a := multiplex.script("addscale",dec_bat,5); #80 CMDmultiplexScript (kc_a:bat[str,decimal])<-($133:str)(dec_bat:bat[str,decimal])($112:int)
    lc_a := bat.setColumn(kc_a,"addscale(5)"); #81 CMDsetColumn (lc_a:bat[str,decimal])<-(kc_a:bat[str,decimal])($139:str)
    mc_a := io.print(hc_a,jc_a,lc_a); #82 CMDtable (mc_a:int)<-(hc_a:bat[str,decimal])(jc_a:bat[str,decimal])(lc_a:bat[str,decimal])
    nc_a := bat.reverse(dec_bat); #83 CMDreverse (nc_a:bat[decimal,str])<-(dec_bat:bat[str,decimal])
    oc_a := bbp.project(nc_a,0@0); #84 CMDproject (oc_a:bat[decimal,oid])<-(nc_a:bat[decimal,str])($143:oid)
    dec_zero_bat := bat.reverse(oc_a); #85 CMDreverse (dec_zero_bat:bat[oid,decimal])<-(oc_a:bat[decimal,oid])
    pc_a := bat.reverse(dec_zero_bat); #86 CMDreverse (pc_a:bat[decimal,oid])<-(dec_zero_bat:bat[oid,decimal])
    dec_cart := algebra.join(pc_a,dec_zero_bat); #87 CMDjoin (dec_cart:bat[decimal,decimal])<-(pc_a:bat[decimal,oid])(dec_zero_bat:bat[oid,decimal])
    qc_a := bat.reverse(dec_cart); #88 CMDreverse (qc_a:bat[decimal,decimal])<-(dec_cart:bat[decimal,decimal])
    rc_a := algebra.mark(qc_a,0@0); #89 CMDmark (rc_a:bat[decimal,oid])<-(qc_a:bat[decimal,decimal])($143:oid)
    dec_bat1 := bat.reverse(rc_a); #90 CMDreverse (dec_bat1:bat[oid,decimal])<-(rc_a:bat[decimal,oid])
    sc_a := algebra.mark(dec_cart,0@0); #91 CMDmark (sc_a:bat[decimal,oid])<-(dec_cart:bat[decimal,decimal])($143:oid)
    dec_bat2 := bat.reverse(sc_a); #92 CMDreverse (dec_bat2:bat[oid,decimal])<-(sc_a:bat[decimal,oid])
    tc_a := multiplex.script("getprecision",dec_bat1); #93 CMDmultiplexScript (tc_a:bat[oid,int])<-($153:str)(dec_bat1:bat[oid,decimal])
    dec_raise := batcalc.-(tc_a,10); #94 CMDbatMINcst (dec_raise:bat[oid,int])<-(tc_a:bat[oid,int])($155:int)
    uc_a := multiplex.script("getprecision",dec_bat1); #95 CMDmultiplexScript (uc_a:bat[oid,int])<-($153:str)(dec_bat1:bat[oid,decimal])
    dec_prec := batcalc.-(uc_a,1); #96 CMDbatMINcst (dec_prec:bat[oid,int])<-(uc_a:bat[oid,int])($158:int)
    vc_a := bat.setColumn(dec_bat1,"decimal1"); #97 CMDsetColumn (vc_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($160:str)
    wc_a := bat.setColumn(dec_raise,"raise"); #98 CMDsetColumn (wc_a:bat[oid,int])<-(dec_raise:bat[oid,int])($162:str)
    xc_a := multiplex.script("pow",dec_bat1,dec_raise); #99 CMDmultiplexScript (xc_a:bat[oid,decimal])<-($164:str)(dec_bat1:bat[oid,decimal])(dec_raise:bat[oid,int])
    yc_a := bat.setColumn(xc_a,"pow"); #100 CMDsetColumn (yc_a:bat[oid,decimal])<-(xc_a:bat[oid,decimal])($164:str)
    ad_a := io.print(vc_a,wc_a,yc_a); #101 CMDtable (ad_a:int)<-(vc_a:bat[oid,decimal])(wc_a:bat[oid,int])(yc_a:bat[oid,decimal])
    bd_a := bat.setColumn(dec_bat1,"decimal1"); #102 CMDsetColumn (bd_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($160:str)
    cd_a := bat.setColumn(dec_raise,"raise"); #103 CMDsetColumn (cd_a:bat[oid,int])<-(dec_raise:bat[oid,int])($162:str)
    dd_a := bat.setColumn(dec_prec,"precision"); #104 CMDsetColumn (dd_a:bat[oid,int])<-(dec_prec:bat[oid,int])($170:str)
    ed_a := multiplex.script("pow",dec_bat1,dec_raise,dec_prec); #105 CMDmultiplexScript (ed_a:bat[oid,decimal])<-($164:str)(dec_bat1:bat[oid,decimal])(dec_raise:bat[oid,int])(dec_prec:bat[oid,int])
    fd_a := bat.setColumn(ed_a,"pow"); #106 CMDsetColumn (fd_a:bat[oid,decimal])<-(ed_a:bat[oid,decimal])($164:str)
    gd_a := io.print(bd_a,cd_a,dd_a,fd_a); #107 CMDtable (gd_a:int)<-(bd_a:bat[oid,decimal])(cd_a:bat[oid,int])(dd_a:bat[oid,int])(fd_a:bat[oid,decimal])
    hd_a := bat.setColumn(dec_bat1,"decimal1"); #108 CMDsetColumn (hd_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($160:str)
    id_a := bat.setColumn(dec_bat2,"decimal2"); #109 CMDsetColumn (id_a:bat[oid,decimal])<-(dec_bat2:bat[oid,decimal])($176:str)
    jd_a := multiplex.script("*",dec_bat1,dec_bat2); #110 CMDmultiplexScript (jd_a:bat[oid,decimal])<-($178:str)(dec_bat1:bat[oid,decimal])(dec_bat2:bat[oid,decimal])
    kd_a := bat.setColumn(jd_a,"*"); #111 CMDsetColumn (kd_a:bat[oid,decimal])<-(jd_a:bat[oid,decimal])($178:str)
    ld_a := io.print(hd_a,id_a,kd_a); #112 CMDtable (ld_a:int)<-(hd_a:bat[oid,decimal])(id_a:bat[oid,decimal])(kd_a:bat[oid,decimal])
    md_a := bat.setColumn(dec_bat1,"decimal1"); #113 CMDsetColumn (md_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($160:str)
    nd_a := bat.setColumn(dec_bat2,"decimal2"); #114 CMDsetColumn (nd_a:bat[oid,decimal])<-(dec_bat2:bat[oid,decimal])($176:str)
    od_a := multiplex.script("/",dec_bat1,dec_bat2); #115 CMDmultiplexScript (od_a:bat[oid,decimal])<-($184:str)(dec_bat1:bat[oid,decimal])(dec_bat2:bat[oid,decimal])
    pd_a := bat.setColumn(od_a,"/"); #116 CMDsetColumn (pd_a:bat[oid,decimal])<-(od_a:bat[oid,decimal])($184:str)
    qd_a := io.print(md_a,nd_a,pd_a); #117 CMDtable (qd_a:int)<-(md_a:bat[oid,decimal])(nd_a:bat[oid,decimal])(pd_a:bat[oid,decimal])
    rd_a := bat.setColumn(dec_bat1,"decimal1"); #118 CMDsetColumn (rd_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($160:str)
    sd_a := bat.setColumn(dec_bat2,"decimal2"); #119 CMDsetColumn (sd_a:bat[oid,decimal])<-(dec_bat2:bat[oid,decimal])($176:str)
    td_a := multiplex.script("divide",dec_bat1,dec_bat2,10); #120 CMDmultiplexScript (td_a:bat[oid,decimal])<-($190:str)(dec_bat1:bat[oid,decimal])(dec_bat2:bat[oid,decimal])($191:int)
    ud_a := bat.setColumn(td_a,"divide"); #121 CMDsetColumn (ud_a:bat[oid,decimal])<-(td_a:bat[oid,decimal])($190:str)
    vd_a := io.print(rd_a,sd_a,ud_a); #122 CMDtable (vd_a:int)<-(rd_a:bat[oid,decimal])(sd_a:bat[oid,decimal])(ud_a:bat[oid,decimal])
    wd_a := bat.setColumn(dec_bat1,"decimal1"); #123 CMDsetColumn (wd_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($195:str)
    xd_a := bat.setColumn(dec_bat2,"decimal2"); #124 CMDsetColumn (xd_a:bat[oid,decimal])<-(dec_bat2:bat[oid,decimal])($176:str)
    yd_a := bat.setColumn(dec_prec,"precision"); #125 CMDsetColumn (yd_a:bat[oid,int])<-(dec_prec:bat[oid,int])($170:str)
    ae_a := multiplex.script("divide",dec_bat1,dec_bat2,dec_prec); #126 CMDmultiplexScript (ae_a:bat[oid,decimal])<-($190:str)(dec_bat1:bat[oid,decimal])(dec_bat2:bat[oid,decimal])(dec_prec:bat[oid,int])
    be_a := bat.setColumn(ae_a,"divide"); #127 CMDsetColumn (be_a:bat[oid,decimal])<-(ae_a:bat[oid,decimal])($190:str)
    ce_a := io.print(wd_a,xd_a,yd_a,be_a); #128 CMDtable (ce_a:int)<-(wd_a:bat[oid,decimal])(xd_a:bat[oid,decimal])(yd_a:bat[oid,int])(be_a:bat[oid,decimal])
    de_a := bat.setColumn(dec_bat1,"decimal1"); #129 CMDsetColumn (de_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($195:str)
    ee_a := bat.setColumn(dec_bat2,"decimal2"); #130 CMDsetColumn (ee_a:bat[oid,decimal])<-(dec_bat2:bat[oid,decimal])($176:str)
    fe_a := multiplex.script("+",dec_bat1,dec_bat2); #131 CMDmultiplexScript (fe_a:bat[oid,decimal])<-($204:str)(dec_bat1:bat[oid,decimal])(dec_bat2:bat[oid,decimal])
    ge_a := bat.setColumn(fe_a,"+"); #132 CMDsetColumn (ge_a:bat[oid,decimal])<-(fe_a:bat[oid,decimal])($204:str)
    he_a := io.print(de_a,ee_a,ge_a); #133 CMDtable (he_a:int)<-(de_a:bat[oid,decimal])(ee_a:bat[oid,decimal])(ge_a:bat[oid,decimal])
    ie_a := bat.setColumn(dec_bat1,"decimal1"); #134 CMDsetColumn (ie_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($195:str)
    je_a := bat.setColumn(dec_bat2,"decimal2"); #135 CMDsetColumn (je_a:bat[oid,decimal])<-(dec_bat2:bat[oid,decimal])($209:str)
    ke_a := multiplex.script("-",dec_bat1,dec_bat2); #136 CMDmultiplexScript (ke_a:bat[oid,decimal])<-($211:str)(dec_bat1:bat[oid,decimal])(dec_bat2:bat[oid,decimal])
    le_a := bat.setColumn(ke_a,"-"); #137 CMDsetColumn (le_a:bat[oid,decimal])<-(ke_a:bat[oid,decimal])($211:str)
    me_a := io.print(ie_a,je_a,le_a); #138 CMDtable (me_a:int)<-(ie_a:bat[oid,decimal])(je_a:bat[oid,decimal])(le_a:bat[oid,decimal])
    ne_a := bat.setColumn(dec_bat1,"decimal1"); #139 CMDsetColumn (ne_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($195:str)
    oe_a := bat.setColumn(dec_bat2,"decimal2"); #140 CMDsetColumn (oe_a:bat[oid,decimal])<-(dec_bat2:bat[oid,decimal])($209:str)
    pe_a := multiplex.script("=",dec_bat1,dec_bat2); #141 CMDmultiplexScript (pe_a:bat[oid,bit])<-($217:str)(dec_bat1:bat[oid,decimal])(dec_bat2:bat[oid,decimal])
    qe_a := bat.setColumn(pe_a,"="); #142 CMDsetColumn (qe_a:bat[oid,bit])<-(pe_a:bat[oid,bit])($217:str)
    re_a := io.print(ne_a,oe_a,qe_a); #143 CMDtable (re_a:int)<-(ne_a:bat[oid,decimal])(oe_a:bat[oid,decimal])(qe_a:bat[oid,bit])
    se_a := bat.setColumn(dec_bat1,"decimal1"); #144 CMDsetColumn (se_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($195:str)
    te_a := bat.setColumn(dec_bat2,"decimal2"); #145 CMDsetColumn (te_a:bat[oid,decimal])<-(dec_bat2:bat[oid,decimal])($209:str)
    ue_a := multiplex.script("!=",dec_bat1,dec_bat2); #146 CMDmultiplexScript (ue_a:bat[oid,bit])<-($223:str)(dec_bat1:bat[oid,decimal])(dec_bat2:bat[oid,decimal])
    ve_a := bat.setColumn(ue_a,"!="); #147 CMDsetColumn (ve_a:bat[oid,bit])<-(ue_a:bat[oid,bit])($223:str)
    we_a := io.print(se_a,te_a,ve_a); #148 CMDtable (we_a:int)<-(se_a:bat[oid,decimal])(te_a:bat[oid,decimal])(ve_a:bat[oid,bit])
    xe_a := bat.setColumn(dec_bat1,"decimal1"); #149 CMDsetColumn (xe_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($195:str)
    ye_a := bat.setColumn(dec_bat2,"decimal2"); #150 CMDsetColumn (ye_a:bat[oid,decimal])<-(dec_bat2:bat[oid,decimal])($209:str)
    af_a := multiplex.script("<",dec_bat1,dec_bat2); #151 CMDmultiplexScript (af_a:bat[oid,bit])<-($229:str)(dec_bat1:bat[oid,decimal])(dec_bat2:bat[oid,decimal])
    bf_a := bat.setColumn(af_a,"<"); #152 CMDsetColumn (bf_a:bat[oid,bit])<-(af_a:bat[oid,bit])($229:str)
    cf_a := io.print(xe_a,ye_a,bf_a); #153 CMDtable (cf_a:int)<-(xe_a:bat[oid,decimal])(ye_a:bat[oid,decimal])(bf_a:bat[oid,bit])
    df_a := bat.setColumn(dec_bat1,"decimal1"); #154 CMDsetColumn (df_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($233:str)
    ef_a := bat.setColumn(dec_bat2,"decimal2"); #155 CMDsetColumn (ef_a:bat[oid,decimal])<-(dec_bat2:bat[oid,decimal])($209:str)
    ff_a := multiplex.script("<=",dec_bat1,dec_bat2); #156 CMDmultiplexScript (ff_a:bat[oid,bit])<-($236:str)(dec_bat1:bat[oid,decimal])(dec_bat2:bat[oid,decimal])
    gf_a := bat.setColumn(ff_a,"<="); #157 CMDsetColumn (gf_a:bat[oid,bit])<-(ff_a:bat[oid,bit])($236:str)
    hf_a := io.print(df_a,ef_a,gf_a); #158 CMDtable (hf_a:int)<-(df_a:bat[oid,decimal])(ef_a:bat[oid,decimal])(gf_a:bat[oid,bit])
    if_a := bat.setColumn(dec_bat1,"decimal1"); #159 CMDsetColumn (if_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($233:str)
    jf_a := bat.setColumn(dec_bat2,"decimal2"); #160 CMDsetColumn (jf_a:bat[oid,decimal])<-(dec_bat2:bat[oid,decimal])($209:str)
    kf_a := multiplex.script(">",dec_bat1,dec_bat2); #161 CMDmultiplexScript (kf_a:bat[oid,bit])<-($242:str)(dec_bat1:bat[oid,decimal])(dec_bat2:bat[oid,decimal])
    lf_a := bat.setColumn(kf_a,">"); #162 CMDsetColumn (lf_a:bat[oid,bit])<-(kf_a:bat[oid,bit])($242:str)
    mf_a := io.print(if_a,jf_a,lf_a); #163 CMDtable (mf_a:int)<-(if_a:bat[oid,decimal])(jf_a:bat[oid,decimal])(lf_a:bat[oid,bit])
    nf_a := bat.setColumn(dec_bat1,"decimal1"); #164 CMDsetColumn (nf_a:bat[oid,decimal])<-(dec_bat1:bat[oid,decimal])($233:str)
    of_a := bat.setColumn(dec_bat2,"decimal2"); #165 CMDsetColumn (of_a:bat[oid,decimal])<-(dec_bat2:bat[oid,decimal])($247:str)
    pf_a := multiplex.script(">=",dec_bat1,dec_bat2); #166 CMDmultiplexScript (pf_a:bat[oid,bit])<-($249:str)(dec_bat1:bat[oid,decimal])(dec_bat2:bat[oid,decimal])
    qf_a := bat.setColumn(pf_a,">="); #167 CMDsetColumn (qf_a:bat[oid,bit])<-(pf_a:bat[oid,bit])($249:str)
    rf_a := io.print(nf_a,of_a,qf_a); #168 CMDtable (rf_a:int)<-(nf_a:bat[oid,decimal])(of_a:bat[oid,decimal])(qf_a:bat[oid,bit])
    dec_abs := multiplex.script("abs",dec_bat); #169 CMDmultiplexScript (dec_abs:bat[str,decimal])<-($253:str)(dec_bat:bat[str,decimal])
    dec_neg := multiplex.script("-",dec_bat); #170 CMDmultiplexScript (dec_neg:bat[str,decimal])<-($255:str)(dec_bat:bat[str,decimal])
    sf_a := bat.setColumn(dec_bat,"decimal"); #171 CMDsetColumn (sf_a:bat[str,decimal])<-(dec_bat:bat[str,decimal])($257:str)
    tf_a := multiplex.script("isnil",dec_bat); #172 CMDmultiplexScript (tf_a:bat[str,bit])<-($259:str)(dec_bat:bat[str,decimal])
    uf_a := bat.setColumn(tf_a,"isnil"); #173 CMDsetColumn (uf_a:bat[str,bit])<-(tf_a:bat[str,bit])($259:str)
    vf_a := bat.setColumn(dec_abs,"[abs]"); #174 CMDsetColumn (vf_a:bat[str,decimal])<-(dec_abs:bat[str,decimal])($262:str)
    wf_a := bat.setColumn(dec_neg,"[-]"); #175 CMDsetColumn (wf_a:bat[str,decimal])<-(dec_neg:bat[str,decimal])($264:str)
    xf_a := io.print(sf_a,uf_a,vf_a,wf_a); #176 CMDtable (xf_a:int)<-(sf_a:bat[str,decimal])(uf_a:bat[str,bit])(vf_a:bat[str,decimal])(wf_a:bat[str,decimal])
    yf_a := bat.reverse(dec_bat); #177 CMDreverse (yf_a:bat[decimal,str])<-(dec_bat:bat[str,decimal])
    ag_a := algebra.sort(yf_a); #178 CMDsort (ag_a:bat[decimal,str])<-(yf_a:bat[decimal,str])
    bg_a := bat.reverse(ag_a); #179 CMDreverse (bg_a:bat[str,decimal])<-(ag_a:bat[decimal,str])
    cg_a := bat.setColumn(bg_a,"sorted dec"); #180 CMDsetColumn (cg_a:bat[str,decimal])<-(bg_a:bat[str,decimal])($270:str)
    dg_a := io.print(cg_a); #181 CMDprint_val (dg_a:int)<-(cg_a:bat[str,decimal])
    eg_a := bat.reverse(dec_abs); #182 CMDreverse (eg_a:bat[decimal,str])<-(dec_abs:bat[str,decimal])
    fg_a := algebra.sort(eg_a); #183 CMDsort (fg_a:bat[decimal,str])<-(eg_a:bat[decimal,str])
    gg_a := bat.reverse(fg_a); #184 CMDreverse (gg_a:bat[str,decimal])<-(fg_a:bat[decimal,str])
    hg_a := bat.setColumn(gg_a,"sorted abs(dec)"); #185 CMDsetColumn (hg_a:bat[str,decimal])<-(gg_a:bat[str,decimal])($276:str)
    ig_a := io.print(hg_a); #186 CMDprint_val (ig_a:int)<-(hg_a:bat[str,decimal])
    jg_a := bat.reverse(dec_abs); #187 CMDreverse (jg_a:bat[decimal,str])<-(dec_abs:bat[str,decimal])
    kg_a := algebra.join(dec_abs,jg_a); #188 CMDjoin (kg_a:bat[str,str])<-(dec_abs:bat[str,decimal])(jg_a:bat[decimal,str])
    lg_a := io.print(kg_a); #189 CMDprint_val (lg_a:int)<-(kg_a:bat[str,str])
    i := 10000; #190  (i:int)<-($282:int)
    int_10K := bbp.new(void,int,10000); #191 CMDBATnew (int_10K:bat[void,int])<-(void:void)(int:int)($282:int)
barrier pi_a := true; #192  (pi_a:bit)<-($287:bit) jump 201
    i := calc.-(i,1); #193 CALCbinarySUBintint (i:int)<-(i:int)($288:int)
    ri_a := i; #194  (ri_a:int)<-(i:int)
    si_a := calc.>=(ri_a,0); #195 CALCcompGEintint (si_a:bit)<-(ri_a:int)($291:int)
barrier qi_a := si_a; #196  (qi_a:bit)<-(si_a:bit) jump 200
    zz := nil; #197  (zz:void)<-($294:void)
    ti_a := bat.insert(int_10K,zz,i); #198 CMDinsert_bun (ti_a:bat[void,int])<-(int_10K:bat[void,int])(zz:void)(i:int)
    redo pi_a; #199  (pi_a:bit) jump 192
exit qi_a; #200  (qi_a:bit)
exit pi_a; #201  (pi_a:bit)
    ui_a := bat.setSequenceBase(int_10K,0@0); #202 CMDsetSequenceBase (ui_a:int)<-(int_10K:bat[void,int])($297:oid)
    vi_a := system.printf("#~BeginVariableOutput~#\n"); #203 SYSprint_str (vi_a:int)<-($299:str)
    wi_a := Admin.arith_perftest(int_10K,101,"int_10K"); #204  (wi_a:void)<-(int_10K:bat[void,int])($301:int)($302:str)
    xi_a := system.printf("#~EndVariableOutput~#\n"); #205 SYSprint_str (xi_a:int)<-($304:str)
    int_100K := bbp.new(void,int,100000); #206 CMDBATnew (int_100K:bat[void,int])<-(void:void)(int:int)($306:int)
barrier dj_a := true; #207  (dj_a:bit)<-($287:bit) jump 218
    i := calc.+(i,1); #208 CALCbinaryADDintint (i:int)<-(i:int)($288:int)
    fj_a := i; #209  (fj_a:int)<-(i:int)
    gj_a := calc.<(fj_a,10); #210 CALCcompLTintint (gj_a:bit)<-(fj_a:int)($310:int)
barrier ej_a := gj_a; #211  (ej_a:bit)<-(gj_a:bit) jump 217
    hj_a := calc.-(9,i); #212 CALCbinarySUBintint (hj_a:int)<-($313:int)(i:int)
    base := calc.*(hj_a,10000); #213 CALCbinaryMULintint (base:int)<-(hj_a:int)($315:int)
    ij_a := batcalc.+(int_10K,base); #214 CMDbatADDcst (ij_a:bat[void,int])<-(int_10K:bat[void,int])(base:int)
    jj_a := bat.insert(int_100K,ij_a); #215 CMDinsert_bat (jj_a:bat[void,int])<-(int_100K:bat[void,int])(ij_a:bat[void,int])
    redo dj_a; #216  (dj_a:bit) jump 207
exit ej_a; #217  (ej_a:bit)
exit dj_a; #218  (dj_a:bit)
    kj_a := bat.setSequenceBase(int_100K,0@0); #219 CMDsetSequenceBase (kj_a:int)<-(int_100K:bat[void,int])($297:oid)
    lj_a := system.printf("#~BeginVariableOutput~#\n"); #220 SYSprint_str (lj_a:int)<-($299:str)
    mj_a := Admin.arith_perftest(int_100K,1001,"int_100K"); #221  (mj_a:int)<-(int_100K:bat[void,int])($321:int)($322:str)
    nj_a := system.printf("#~EndVariableOutput~#\n"); #222 SYSprint_str (nj_a:int)<-($304:str)
    dec_10K := multiplex.script("decimal",int_10K); #223 CMDmultiplexScript (dec_10K:bat[void,decimal])<-($325:str)(int_10K:bat[void,int])
    yi_a := system.printf("#~BeginVariableOutput~#\n"); #224 SYSprint_str (yi_a:int)<-($299:str)
    aj_a := decimal.decimal("101"); #225 decimal_from_str (aj_a:decimal)<-($328:str)
    bj_a := Admin.arith_perftest(dec_10K,aj_a,"dec_10K"); #226  (bj_a:void)<-(dec_10K:bat[void,decimal])(aj_a:decimal)($330:str)
    cj_a := system.printf("#~EndVariableOutput~#\n"); #227 SYSprint_str (cj_a:int)<-($304:str)
    dec_100K := multiplex.script("decimal",int_100K); #228 CMDmultiplexScript (dec_100K:bat[void,decimal])<-($325:str)(int_100K:bat[void,int])
    oj_a := system.printf("#~BeginVariableOutput~#\n"); #229 SYSprint_str (oj_a:int)<-($334:str)
    pj_a := decimal.decimal("1001"); #230 decimal_from_str (pj_a:decimal)<-($336:str)
    qj_a := Admin.arith_perftest(dec_100K,pj_a,"dec_100K"); #231  (qj_a:bat[void,decimal])<-(dec_100K:bat[void,decimal])(pj_a:decimal)($338:str)
    rj_a := system.printf("#~EndVariableOutput~#\n"); #232 SYSprint_str (rj_a:int)<-($340:str)
end main; #233  
#-----------------------------------------------------------------#
# BAT:		  value			| precision	| scale	  #
# (str)		  (decimal)		| (int)		| (int)	  #
#-----------------------------------------------------------------#
[ "dec_nil",	  nil,			  nil,		  nil	  ]
[ "dec_zero",	  0,			  1,		  0	  ]
[ "dec_tiny",	  1122E-30,		  4,		  -30	  ]
[ "nec_tiny",	  -11220000000000E-40,	  14,		  -40	  ]
[ "dec_small",	  2244,			  4,		  0	  ]
[ "nec_small",	  -22440000000000E-10,	  14,		  -10	  ]
[ "dec_num",	  4488E15,		  4,		  15	  ]
[ "nec_num",	  -44880000000000E5,	  14,		  5	  ]
[ "dec_big",	  1122E40,		  4,		  40	  ]
[ "nec_big",	  -11220000000000E30,	  14,		  30	  ]
[ "dec_huge",	  22440000000000E9000,	  14,		  9000	  ]
[ "nec_huge",	  -2244E9010,		  4,		  9010	  ]
#-------------------------------------------------------------------------#
# BAT:		  value			| int	| lng			  #
# (str)		  (decimal)		| (int)	| (lng)			  #
#-------------------------------------------------------------------------#
[ "dec_nil",	  nil,			  nil,	  nil			  ]
[ "dec_zero",	  0,			  0,	  0			  ]
[ "dec_tiny",	  1122E-30,		  0,	  0			  ]
[ "nec_tiny",	  -11220000000000E-40,	  0,	  0			  ]
[ "dec_small",	  2244,			  2244,	  2244			  ]
[ "nec_small",	  -22440000000000E-10,	  -2244,  -2244			  ]
[ "dec_num",	  4488E15,		  nil,	  4488000000000000000	  ]
[ "nec_num",	  -44880000000000E5,	  nil,	  -4488000000000000000	  ]
[ "dec_big",	  1122E40,		  nil,	  nil			  ]
[ "nec_big",	  -11220000000000E30,	  nil,	  nil			  ]
[ "dec_huge",	  22440000000000E9000,	  nil,	  nil			  ]
[ "nec_huge",	  -2244E9010,		  nil,	  nil			  ]
#-------------------------------------------------------------------------#
# BAT:		  value			| flt		| dbl		  #
# (str)		  (decimal)		| (flt)		| (dbl)		  #
#-------------------------------------------------------------------------#
[ "dec_nil",	  nil,			  nil,		  nil		  ]
[ "dec_zero",	  0,			  0,		  0		  ]
[ "dec_tiny",	  1122E-30,		  1.122e-27,	  1.122e-27	  ]
[ "nec_tiny",	  -11220000000000E-40,	  -1.122e-27,	  -1.122e-27	  ]
[ "dec_small",	  2244,			  2244,		  2244		  ]
[ "nec_small",	  -22440000000000E-10,	  -2244,	  -2244		  ]
[ "dec_num",	  4488E15,		  4.488e+18,	  4.488e+18	  ]
[ "nec_num",	  -44880000000000E5,	  -4.488e+18,	  -4.488e+18	  ]
[ "dec_big",	  1122E40,		  nil,		  1.122e+43	  ]
[ "nec_big",	  -11220000000000E30,	  nil,		  -1.122e+43	  ]
[ "dec_huge",	  22440000000000E9000,	  nil,		  nil		  ]
[ "nec_huge",	  -2244E9010,		  nil,		  nil		  ]
#---------------------------------------------------------------------------------#
# BAT:		  decimal		| from_int	| from_lng		  #
# (str)		  (decimal)		| (decimal)	| (decimal)		  #
#---------------------------------------------------------------------------------#
[ "dec_nil",	  nil,			  nil,		  nil			  ]
[ "dec_zero",	  0,			  0,		  0			  ]
[ "dec_tiny",	  1122E-30,		  0,		  0			  ]
[ "nec_tiny",	  -11220000000000E-40,	  0,		  0			  ]
[ "dec_small",	  2244,			  2244,		  2244			  ]
[ "nec_small",	  -22440000000000E-10,	  -2244,	  -2244			  ]
[ "dec_num",	  4488E15,		  nil,		  4488000000000000000	  ]
[ "nec_num",	  -44880000000000E5,	  nil,		  -4488000000000000000	  ]
[ "dec_big",	  1122E40,		  nil,		  nil			  ]
[ "nec_big",	  -11220000000000E30,	  nil,		  nil			  ]
[ "dec_huge",	  22440000000000E9000,	  nil,		  nil			  ]
[ "nec_huge",	  -2244E9010,		  nil,		  nil			  ]
#---------------------------------------------------------#
# BAT:		  decimal		| from_flt	  #
# (str)		  (decimal)		| (decimal)	  #
#---------------------------------------------------------#
[ "dec_nil",	  nil,			  nil		  ]
[ "dec_zero",	  0,			  0		  ]
[ "dec_tiny",	  1122E-30,		  1122E-30	  ]
[ "nec_tiny",	  -11220000000000E-40,	  -1122E-30	  ]
[ "dec_small",	  2244,			  2244		  ]
[ "nec_small",	  -22440000000000E-10,	  -2244		  ]
[ "dec_num",	  4488E15,		  4488E15	  ]
[ "nec_num",	  -44880000000000E5,	  -4488E15	  ]
[ "dec_big",	  1122E40,		  nil		  ]
[ "nec_big",	  -11220000000000E30,	  nil		  ]
[ "dec_huge",	  22440000000000E9000,	  nil		  ]
[ "nec_huge",	  -2244E9010,		  nil		  ]
#---------------------------------------------------------#
# BAT:		  decimal		| from_dbl	  #
# (str)		  (decimal)		| (decimal)	  #
#---------------------------------------------------------#
[ "dec_nil",	  nil,			  nil		  ]
[ "dec_zero",	  0,			  0		  ]
[ "dec_tiny",	  1122E-30,		  1122E-30	  ]
[ "nec_tiny",	  -11220000000000E-40,	  -1122E-30	  ]
[ "dec_small",	  2244,			  2244		  ]
[ "nec_small",	  -22440000000000E-10,	  -2244		  ]
[ "dec_num",	  4488E15,		  4488E15	  ]
[ "nec_num",	  -44880000000000E5,	  -4488E15	  ]
[ "dec_big",	  1122E40,		  1122E40	  ]
[ "nec_big",	  -11220000000000E30,	  -1122E40	  ]
[ "dec_huge",	  22440000000000E9000,	  nil		  ]
[ "nec_huge",	  -2244E9010,		  nil		  ]
#-------------------------------------------------------------------------------------------------------------------------#
# BAT:		  decimal		| setscale(0)		| setscale(10)		| setscale(-5)			  #
# (str)		  (decimal)		| (decimal)		| (decimal)		| (decimal)			  #
#-------------------------------------------------------------------------------------------------------------------------#
[ "dec_nil",	  nil,			  nil,			  nil,			  nil				  ]
[ "dec_zero",	  0,			  0,			  0,			  0				  ]
[ "dec_tiny",	  1122E-30,		  0,			  0,			  112200000E-35			  ]
[ "nec_tiny",	  -11220000000000E-40,	  0,			  0,			  -1122000000000000000E-45	  ]
[ "dec_small",	  2244,			  2244,			  0,			  224400000E-5			  ]
[ "nec_small",	  -22440000000000E-10,	  -2244,		  0,			  -2244000000000000000E-15	  ]
[ "dec_num",	  4488E15,		  4488000000000000000,	  448800000E10,		  448800000E10			  ]
[ "nec_num",	  -44880000000000E5,	  -4488000000000000000,	  -448800000E10,	  -4488000000000000000		  ]
[ "dec_big",	  1122E40,		  1122(40 times 0),	  1122(30 times 0)E10,	  112200000E35			  ]
[ "nec_big",	  -11220000000000E30,	  -1122(40 times 0),	  -1122(30 times 0)E10,	  -1122000000000000000E25	  ]
[ "dec_huge",	  22440000000000E9000,	  2244(9010 times 0),	  2244(9000 times 0)E10,  2244000000000000000E8995	  ]
[ "nec_huge",	  -2244E9010,		  -2244(9010 times 0),	  -2244(9000 times 0)E10, -224400000E9005		  ]
#-----------------------------------------------------------------------------------------------------------------#
# BAT:		  decimal		| setprecision(0)	| setprecision(10)	| setprecision(-5)	  #
# (str)		  (decimal)		| (decimal)		| (decimal)		| (decimal)		  #
#-----------------------------------------------------------------------------------------------------------------#
[ "dec_nil",	  nil,			  nil,			  nil,			  nil			  ]
[ "dec_zero",	  0,			  0,			  0,			  0			  ]
[ "dec_tiny",	  1122E-30,		  0,			  1122000000E-36,	  nil			  ]
[ "nec_tiny",	  -11220000000000E-40,	  0,			  -1122000000E-36,	  -112200000E-35	  ]
[ "dec_small",	  2244,			  0,			  2244000000E-6,	  nil			  ]
[ "nec_small",	  -22440000000000E-10,	  0,			  -2244000000E-6,	  -224400000E-5		  ]
[ "dec_num",	  4488E15,		  0,			  4488000000E9,		  nil			  ]
[ "nec_num",	  -44880000000000E5,	  0,			  -4488000000E9,	  -448800000E10		  ]
[ "dec_big",	  1122E40,		  0,			  1122000000E34,	  nil			  ]
[ "nec_big",	  -11220000000000E30,	  0,			  -1122000000E34,	  -112200000E35		  ]
[ "dec_huge",	  22440000000000E9000,	  0,			  2244000000E9004,	  224400000E9005	  ]
[ "nec_huge",	  -2244E9010,		  0,			  -2244000000E9004,	  nil			  ]
#-----------------------------------------------------------------------------------------#
# BAT:		  decimal		| addscale(-5)		| addscale(5)		  #
# (str)		  (decimal)		| (decimal)		| (decimal)		  #
#-----------------------------------------------------------------------------------------#
[ "dec_nil",	  nil,			  nil,			  nil			  ]
[ "dec_zero",	  0,			  0,			  0			  ]
[ "dec_tiny",	  1122E-30,		  1122E-35,		  1122E-25		  ]
[ "nec_tiny",	  -11220000000000E-40,	  -11220000000000E-45,	  -11220000000000E-35	  ]
[ "dec_small",	  2244,			  2244E-5,		  2244E5		  ]
[ "nec_small",	  -22440000000000E-10,	  -22440000000000E-15,	  -22440000000000E-5	  ]
[ "dec_num",	  4488E15,		  4488E10,		  4488E20		  ]
[ "nec_num",	  -44880000000000E5,	  -44880000000000,	  -44880000000000E10	  ]
[ "dec_big",	  1122E40,		  1122E35,		  1122E45		  ]
[ "nec_big",	  -11220000000000E30,	  -11220000000000E25,	  -11220000000000E35	  ]
[ "dec_huge",	  22440000000000E9000,	  22440000000000E8995,	  22440000000000E9005	  ]
[ "nec_huge",	  -2244E9010,		  -2244E9005,		  -2244E9015		  ]
#---------------------------------------------------------#
# BAT:	  decimal1		| raise	| pow		  #
# (void)  (decimal)		| (int)	| (decimal)	  #
#---------------------------------------------------------#
[ 0@0,	  nil,			  nil,	  nil		  ]
[ 1@0,	  0,			  -9,	  nil		  ]
[ 2@0,	  1122E-30,		  -6,	  5025E158	  ]
[ 3@0,	  -11220000000000E-40,	  4,	  158478892E-116  ]
[ 4@0,	  2244,			  -6,	  7836E-24	  ]
[ 5@0,	  -22440000000000E-10,	  4,	  253566228E5	  ]
[ 6@0,	  4488E15,		  -6,	  1224E-115	  ]
[ 7@0,	  -44880000000000E5,	  4,	  405705964E66	  ]
[ 8@0,	  1122E40,		  -6,	  5025E-262	  ]
[ 9@0,	  -11220000000000E30,	  4,	  158478912E164	  ]
[ 10@0,	  22440000000000E9000,	  4,	  nil		  ]
[ 11@0,	  -2244E9010,		  -6,	  nil		  ]
[ 12@0,	  nil,			  nil,	  nil		  ]
[ 13@0,	  0,			  -9,	  nil		  ]
[ 14@0,	  1122E-30,		  -6,	  5025E158	  ]
[ 15@0,	  -11220000000000E-40,	  4,	  158478892E-116  ]
[ 16@0,	  2244,			  -6,	  7836E-24	  ]
[ 17@0,	  -22440000000000E-10,	  4,	  253566228E5	  ]
[ 18@0,	  4488E15,		  -6,	  1224E-115	  ]
[ 19@0,	  -44880000000000E5,	  4,	  405705964E66	  ]
[ 20@0,	  1122E40,		  -6,	  5025E-262	  ]
[ 21@0,	  -11220000000000E30,	  4,	  158478912E164	  ]
[ 22@0,	  22440000000000E9000,	  4,	  nil		  ]
[ 23@0,	  -2244E9010,		  -6,	  nil		  ]
[ 24@0,	  nil,			  nil,	  nil		  ]
[ 25@0,	  0,			  -9,	  nil		  ]
[ 26@0,	  1122E-30,		  -6,	  5025E158	  ]
[ 27@0,	  -11220000000000E-40,	  4,	  158478892E-116  ]
[ 28@0,	  2244,			  -6,	  7836E-24	  ]
[ 29@0,	  -22440000000000E-10,	  4,	  253566228E5	  ]
[ 30@0,	  4488E15,		  -6,	  1224E-115	  ]
[ 31@0,	  -44880000000000E5,	  4,	  405705964E66	  ]
[ 32@0,	  1122E40,		  -6,	  5025E-262	  ]
[ 33@0,	  -11220000000000E30,	  4,	  158478912E164	  ]
[ 34@0,	  22440000000000E9000,	  4,	  nil		  ]
[ 35@0,	  -2244E9010,		  -6,	  nil		  ]
[ 36@0,	  nil,			  nil,	  nil		  ]
[ 37@0,	  0,			  -9,	  nil		  ]
[ 38@0,	  1122E-30,		  -6,	  5025E158	  ]
[ 39@0,	  -11220000000000E-40,	  4,	  158478892E-116  ]
[ 40@0,	  2244,			  -6,	  7836E-24	  ]
[ 41@0,	  -22440000000000E-10,	  4,	  253566228E5	  ]
[ 42@0,	  4488E15,		  -6,	  1224E-115	  ]
[ 43@0,	  -44880000000000E5,	  4,	  405705964E66	  ]
[ 44@0,	  1122E40,		  -6,	  5025E-262	  ]
[ 45@0,	  -11220000000000E30,	  4,	  158478912E164	  ]
[ 46@0,	  22440000000000E9000,	  4,	  nil		  ]
[ 47@0,	  -2244E9010,		  -6,	  nil		  ]
[ 48@0,	  nil,			  nil,	  nil		  ]
[ 49@0,	  0,			  -9,	  nil		  ]
[ 50@0,	  1122E-30,		  -6,	  5025E158	  ]
[ 51@0,	  -11220000000000E-40,	  4,	  158478892E-116  ]
[ 52@0,	  2244,			  -6,	  7836E-24	  ]
[ 53@0,	  -22440000000000E-10,	  4,	  253566228E5	  ]
[ 54@0,	  4488E15,		  -6,	  1224E-115	  ]
[ 55@0,	  -44880000000000E5,	  4,	  405705964E66	  ]
[ 56@0,	  1122E40,		  -6,	  5025E-262	  ]
[ 57@0,	  -11220000000000E30,	  4,	  158478912E164	  ]
[ 58@0,	  22440000000000E9000,	  4,	  nil		  ]
[ 59@0,	  -2244E9010,		  -6,	  nil		  ]
[ 60@0,	  nil,			  nil,	  nil		  ]
[ 61@0,	  0,			  -9,	  nil		  ]
[ 62@0,	  1122E-30,		  -6,	  5025E158	  ]
[ 63@0,	  -11220000000000E-40,	  4,	  158478892E-116  ]
[ 64@0,	  2244,			  -6,	  7836E-24	  ]
[ 65@0,	  -22440000000000E-10,	  4,	  253566228E5	  ]
[ 66@0,	  4488E15,		  -6,	  1224E-115	  ]
[ 67@0,	  -44880000000000E5,	  4,	  405705964E66	  ]
[ 68@0,	  1122E40,		  -6,	  5025E-262	  ]
[ 69@0,	  -11220000000000E30,	  4,	  158478912E164	  ]
[ 70@0,	  22440000000000E9000,	  4,	  nil		  ]
[ 71@0,	  -2244E9010,		  -6,	  nil		  ]
[ 72@0,	  nil,			  nil,	  nil		  ]
[ 73@0,	  0,			  -9,	  nil		  ]
[ 74@0,	  1122E-30,		  -6,	  5025E158	  ]
[ 75@0,	  -11220000000000E-40,	  4,	  158478892E-116  ]
[ 76@0,	  2244,			  -6,	  7836E-24	  ]
[ 77@0,	  -22440000000000E-10,	  4,	  253566228E5	  ]
[ 78@0,	  4488E15,		  -6,	  1224E-115	  ]
[ 79@0,	  -44880000000000E5,	  4,	  405705964E66	  ]
[ 80@0,	  1122E40,		  -6,	  5025E-262	  ]
[ 81@0,	  -11220000000000E30,	  4,	  158478912E164	  ]
[ 82@0,	  22440000000000E9000,	  4,	  nil		  ]
[ 83@0,	  -2244E9010,		  -6,	  nil		  ]
[ 84@0,	  nil,			  nil,	  nil		  ]
[ 85@0,	  0,			  -9,	  nil		  ]
[ 86@0,	  1122E-30,		  -6,	  5025E158	  ]
[ 87@0,	  -11220000000000E-40,	  4,	  158478892E-116  ]
[ 88@0,	  2244,			  -6,	  7836E-24	  ]
[ 89@0,	  -22440000000000E-10,	  4,	  253566228E5	  ]
[ 90@0,	  4488E15,		  -6,	  1224E-115	  ]
[ 91@0,	  -44880000000000E5,	  4,	  405705964E66	  ]
[ 92@0,	  1122E40,		  -6,	  5025E-262	  ]
[ 93@0,	  -11220000000000E30,	  4,	  158478912E164	  ]
[ 94@0,	  22440000000000E9000,	  4,	  nil		  ]
[ 95@0,	  -2244E9010,		  -6,	  nil		  ]
[ 96@0,	  nil,			  nil,	  nil		  ]
[ 97@0,	  0,			  -9,	  nil		  ]
[ 98@0,	  1122E-30,		  -6,	  5025E158	  ]
[ 99@0,	  -11220000000000E-40,	  4,	  158478892E-116  ]
[ 100@0,  2244,			  -6,	  7836E-24	  ]
[ 101@0,  -22440000000000E-10,	  4,	  253566228E5	  ]
[ 102@0,  4488E15,		  -6,	  1224E-115	  ]
[ 103@0,  -44880000000000E5,	  4,	  405705964E66	  ]
[ 104@0,  1122E40,		  -6,	  5025E-262	  ]
[ 105@0,  -11220000000000E30,	  4,	  158478912E164	  ]
[ 106@0,  22440000000000E9000,	  4,	  nil		  ]
[ 107@0,  -2244E9010,		  -6,	  nil		  ]
[ 108@0,  nil,			  nil,	  nil		  ]
[ 109@0,  0,			  -9,	  nil		  ]
[ 110@0,  1122E-30,		  -6,	  5025E158	  ]
[ 111@0,  -11220000000000E-40,	  4,	  158478892E-116  ]
[ 112@0,  2244,			  -6,	  7836E-24	  ]
[ 113@0,  -22440000000000E-10,	  4,	  253566228E5	  ]
[ 114@0,  4488E15,		  -6,	  1224E-115	  ]
[ 115@0,  -44880000000000E5,	  4,	  405705964E66	  ]
[ 116@0,  1122E40,		  -6,	  5025E-262	  ]
[ 117@0,  -11220000000000E30,	  4,	  158478912E164	  ]
[ 118@0,  22440000000000E9000,	  4,	  nil		  ]
[ 119@0,  -2244E9010,		  -6,	  nil		  ]
[ 120@0,  nil,			  nil,	  nil		  ]
[ 121@0,  0,			  -9,	  nil		  ]
[ 122@0,  1122E-30,		  -6,	  5025E158	  ]
[ 123@0,  -11220000000000E-40,	  4,	  158478892E-116  ]
[ 124@0,  2244,			  -6,	  7836E-24	  ]
[ 125@0,  -22440000000000E-10,	  4,	  253566228E5	  ]
[ 126@0,  4488E15,		  -6,	  1224E-115	  ]
[ 127@0,  -44880000000000E5,	  4,	  405705964E66	  ]
[ 128@0,  1122E40,		  -6,	  5025E-262	  ]
[ 129@0,  -11220000000000E30,	  4,	  158478912E164	  ]
[ 130@0,  22440000000000E9000,	  4,	  nil		  ]
[ 131@0,  -2244E9010,		  -6,	  nil		  ]
[ 132@0,  nil,			  nil,	  nil		  ]
[ 133@0,  0,			  -9,	  nil		  ]
[ 134@0,  1122E-30,		  -6,	  5025E158	  ]
[ 135@0,  -11220000000000E-40,	  4,	  158478892E-116  ]
[ 136@0,  2244,			  -6,	  7836E-24	  ]
[ 137@0,  -22440000000000E-10,	  4,	  253566228E5	  ]
[ 138@0,  4488E15,		  -6,	  1224E-115	  ]
[ 139@0,  -44880000000000E5,	  4,	  405705964E66	  ]
[ 140@0,  1122E40,		  -6,	  5025E-262	  ]
[ 141@0,  -11220000000000E30,	  4,	  158478912E164	  ]
[ 142@0,  22440000000000E9000,	  4,	  nil		  ]
[ 143@0,  -2244E9010,		  -6,	  nil		  ]
#-------------------------------------------------------------------------#
# BAT:	  decimal1		| raise	| precision	| pow		  #
# (void)  (decimal)		| (int)	| (int)		| (decimal)	  #
#-------------------------------------------------------------------------#
[ 0@0,	  nil,			  nil,	  nil,		  nil		  ]
[ 1@0,	  0,			  -9,	  0,		  nil		  ]
[ 2@0,	  1122E-30,		  -6,	  3,		  512E159	  ]
[ 3@0,	  -11220000000000E-40,	  4,	  13,		  15847889E-115	  ]
[ 4@0,	  2244,			  -6,	  3,		  8E-21		  ]
[ 5@0,	  -22440000000000E-10,	  4,	  13,		  25356622E6	  ]
[ 6@0,	  4488E15,		  -6,	  3,		  125E-114	  ]
[ 7@0,	  -44880000000000E5,	  4,	  13,		  40570596E67	  ]
[ 8@0,	  1122E40,		  -6,	  3,		  512E-261	  ]
[ 9@0,	  -11220000000000E30,	  4,	  13,		  15847889E165	  ]
[ 10@0,	  22440000000000E9000,	  4,	  13,		  nil		  ]
[ 11@0,	  -2244E9010,		  -6,	  3,		  nil		  ]
[ 12@0,	  nil,			  nil,	  nil,		  nil		  ]
[ 13@0,	  0,			  -9,	  0,		  nil		  ]
[ 14@0,	  1122E-30,		  -6,	  3,		  512E159	  ]
[ 15@0,	  -11220000000000E-40,	  4,	  13,		  15847889E-115	  ]
[ 16@0,	  2244,			  -6,	  3,		  8E-21		  ]
[ 17@0,	  -22440000000000E-10,	  4,	  13,		  25356622E6	  ]
[ 18@0,	  4488E15,		  -6,	  3,		  125E-114	  ]
[ 19@0,	  -44880000000000E5,	  4,	  13,		  40570596E67	  ]
[ 20@0,	  1122E40,		  -6,	  3,		  512E-261	  ]
[ 21@0,	  -11220000000000E30,	  4,	  13,		  15847889E165	  ]
[ 22@0,	  22440000000000E9000,	  4,	  13,		  nil		  ]
[ 23@0,	  -2244E9010,		  -6,	  3,		  nil		  ]
[ 24@0,	  nil,			  nil,	  nil,		  nil		  ]
[ 25@0,	  0,			  -9,	  0,		  nil		  ]
[ 26@0,	  1122E-30,		  -6,	  3,		  512E159	  ]
[ 27@0,	  -11220000000000E-40,	  4,	  13,		  15847889E-115	  ]
[ 28@0,	  2244,			  -6,	  3,		  8E-21		  ]
[ 29@0,	  -22440000000000E-10,	  4,	  13,		  25356622E6	  ]
[ 30@0,	  4488E15,		  -6,	  3,		  125E-114	  ]
[ 31@0,	  -44880000000000E5,	  4,	  13,		  40570596E67	  ]
[ 32@0,	  1122E40,		  -6,	  3,		  512E-261	  ]
[ 33@0,	  -11220000000000E30,	  4,	  13,		  15847889E165	  ]
[ 34@0,	  22440000000000E9000,	  4,	  13,		  nil		  ]
[ 35@0,	  -2244E9010,		  -6,	  3,		  nil		  ]
[ 36@0,	  nil,			  nil,	  nil,		  nil		  ]
[ 37@0,	  0,			  -9,	  0,		  nil		  ]
[ 38@0,	  1122E-30,		  -6,	  3,		  512E159	  ]
[ 39@0,	  -11220000000000E-40,	  4,	  13,		  15847889E-115	  ]
[ 40@0,	  2244,			  -6,	  3,		  8E-21		  ]
[ 41@0,	  -22440000000000E-10,	  4,	  13,		  25356622E6	  ]
[ 42@0,	  4488E15,		  -6,	  3,		  125E-114	  ]
[ 43@0,	  -44880000000000E5,	  4,	  13,		  40570596E67	  ]
[ 44@0,	  1122E40,		  -6,	  3,		  512E-261	  ]
[ 45@0,	  -11220000000000E30,	  4,	  13,		  15847889E165	  ]
[ 46@0,	  22440000000000E9000,	  4,	  13,		  nil		  ]
[ 47@0,	  -2244E9010,		  -6,	  3,		  nil		  ]
[ 48@0,	  nil,			  nil,	  nil,		  nil		  ]
[ 49@0,	  0,			  -9,	  0,		  nil		  ]
[ 50@0,	  1122E-30,		  -6,	  3,		  512E159	  ]
[ 51@0,	  -11220000000000E-40,	  4,	  13,		  15847889E-115	  ]
[ 52@0,	  2244,			  -6,	  3,		  8E-21		  ]
[ 53@0,	  -22440000000000E-10,	  4,	  13,		  25356622E6	  ]
[ 54@0,	  4488E15,		  -6,	  3,		  125E-114	  ]
[ 55@0,	  -44880000000000E5,	  4,	  13,		  40570596E67	  ]
[ 56@0,	  1122E40,		  -6,	  3,		  512E-261	  ]
[ 57@0,	  -11220000000000E30,	  4,	  13,		  15847889E165	  ]
[ 58@0,	  22440000000000E9000,	  4,	  13,		  nil		  ]
[ 59@0,	  -2244E9010,		  -6,	  3,		  nil		  ]
[ 60@0,	  nil,			  nil,	  nil,		  nil		  ]
[ 61@0,	  0,			  -9,	  0,		  nil		  ]
[ 62@0,	  1122E-30,		  -6,	  3,		  512E159	  ]
[ 63@0,	  -11220000000000E-40,	  4,	  13,		  15847889E-115	  ]
[ 64@0,	  2244,			  -6,	  3,		  8E-21		  ]
[ 65@0,	  -22440000000000E-10,	  4,	  13,		  25356622E6	  ]
[ 66@0,	  4488E15,		  -6,	  3,		  125E-114	  ]
[ 67@0,	  -44880000000000E5,	  4,	  13,		  40570596E67	  ]
[ 68@0,	  1122E40,		  -6,	  3,		  512E-261	  ]
[ 69@0,	  -11220000000000E30,	  4,	  13,		  15847889E165	  ]
[ 70@0,	  22440000000000E9000,	  4,	  13,		  nil		  ]
[ 71@0,	  -2244E9010,		  -6,	  3,		  nil		  ]
[ 72@0,	  nil,			  nil,	  nil,		  nil		  ]
[ 73@0,	  0,			  -9,	  0,		  nil		  ]
[ 74@0,	  1122E-30,		  -6,	  3,		  512E159	  ]
[ 75@0,	  -11220000000000E-40,	  4,	  13,		  15847889E-115	  ]
[ 76@0,	  2244,			  -6,	  3,		  8E-21		  ]
[ 77@0,	  -22440000000000E-10,	  4,	  13,		  25356622E6	  ]
[ 78@0,	  4488E15,		  -6,	  3,		  125E-114	  ]
[ 79@0,	  -44880000000000E5,	  4,	  13,		  40570596E67	  ]
[ 80@0,	  1122E40,		  -6,	  3,		  512E-261	  ]
[ 81@0,	  -11220000000000E30,	  4,	  13,		  15847889E165	  ]
[ 82@0,	  22440000000000E9000,	  4,	  13,		  nil		  ]
[ 83@0,	  -2244E9010,		  -6,	  3,		  nil		  ]
[ 84@0,	  nil,			  nil,	  nil,		  nil		  ]
[ 85@0,	  0,			  -9,	  0,		  nil		  ]
[ 86@0,	  1122E-30,		  -6,	  3,		  512E159	  ]
[ 87@0,	  -11220000000000E-40,	  4,	  13,		  15847889E-115	  ]
[ 88@0,	  2244,			  -6,	  3,		  8E-21		  ]
[ 89@0,	  -22440000000000E-10,	  4,	  13,		  25356622E6	  ]
[ 90@0,	  4488E15,		  -6,	  3,		  125E-114	  ]
[ 91@0,	  -44880000000000E5,	  4,	  13,		  40570596E67	  ]
[ 92@0,	  1122E40,		  -6,	  3,		  512E-261	  ]
[ 93@0,	  -11220000000000E30,	  4,	  13,		  15847889E165	  ]
[ 94@0,	  22440000000000E9000,	  4,	  13,		  nil		  ]
[ 95@0,	  -2244E9010,		  -6,	  3,		  nil		  ]
[ 96@0,	  nil,			  nil,	  nil,		  nil		  ]
[ 97@0,	  0,			  -9,	  0,		  nil		  ]
[ 98@0,	  1122E-30,		  -6,	  3,		  512E159	  ]
[ 99@0,	  -11220000000000E-40,	  4,	  13,		  15847889E-115	  ]
[ 100@0,  2244,			  -6,	  3,		  8E-21		  ]
[ 101@0,  -22440000000000E-10,	  4,	  13,		  25356622E6	  ]
[ 102@0,  4488E15,		  -6,	  3,		  125E-114	  ]
[ 103@0,  -44880000000000E5,	  4,	  13,		  40570596E67	  ]
[ 104@0,  1122E40,		  -6,	  3,		  512E-261	  ]
[ 105@0,  -11220000000000E30,	  4,	  13,		  15847889E165	  ]
[ 106@0,  22440000000000E9000,	  4,	  13,		  nil		  ]
[ 107@0,  -2244E9010,		  -6,	  3,		  nil		  ]
[ 108@0,  nil,			  nil,	  nil,		  nil		  ]
[ 109@0,  0,			  -9,	  0,		  nil		  ]
[ 110@0,  1122E-30,		  -6,	  3,		  512E159	  ]
[ 111@0,  -11220000000000E-40,	  4,	  13,		  15847889E-115	  ]
[ 112@0,  2244,			  -6,	  3,		  8E-21		  ]
[ 113@0,  -22440000000000E-10,	  4,	  13,		  25356622E6	  ]
[ 114@0,  4488E15,		  -6,	  3,		  125E-114	  ]
[ 115@0,  -44880000000000E5,	  4,	  13,		  40570596E67	  ]
[ 116@0,  1122E40,		  -6,	  3,		  512E-261	  ]
[ 117@0,  -11220000000000E30,	  4,	  13,		  15847889E165	  ]
[ 118@0,  22440000000000E9000,	  4,	  13,		  nil		  ]
[ 119@0,  -2244E9010,		  -6,	  3,		  nil		  ]
[ 120@0,  nil,			  nil,	  nil,		  nil		  ]
[ 121@0,  0,			  -9,	  0,		  nil		  ]
[ 122@0,  1122E-30,		  -6,	  3,		  512E159	  ]
[ 123@0,  -11220000000000E-40,	  4,	  13,		  15847889E-115	  ]
[ 124@0,  2244,			  -6,	  3,		  8E-21		  ]
[ 125@0,  -22440000000000E-10,	  4,	  13,		  25356622E6	  ]
[ 126@0,  4488E15,		  -6,	  3,		  125E-114	  ]
[ 127@0,  -44880000000000E5,	  4,	  13,		  40570596E67	  ]
[ 128@0,  1122E40,		  -6,	  3,		  512E-261	  ]
[ 129@0,  -11220000000000E30,	  4,	  13,		  15847889E165	  ]
[ 130@0,  22440000000000E9000,	  4,	  13,		  nil		  ]
[ 131@0,  -2244E9010,		  -6,	  3,		  nil		  ]
[ 132@0,  nil,			  nil,	  nil,		  nil		  ]
[ 133@0,  0,			  -9,	  0,		  nil		  ]
[ 134@0,  1122E-30,		  -6,	  3,		  512E159	  ]
[ 135@0,  -11220000000000E-40,	  4,	  13,		  15847889E-115	  ]
[ 136@0,  2244,			  -6,	  3,		  8E-21		  ]
[ 137@0,  -22440000000000E-10,	  4,	  13,		  25356622E6	  ]
[ 138@0,  4488E15,		  -6,	  3,		  125E-114	  ]
[ 139@0,  -44880000000000E5,	  4,	  13,		  40570596E67	  ]
[ 140@0,  1122E40,		  -6,	  3,		  512E-261	  ]
[ 141@0,  -11220000000000E30,	  4,	  13,		  15847889E165	  ]
[ 142@0,  22440000000000E9000,	  4,	  13,		  nil		  ]
[ 143@0,  -2244E9010,		  -6,	  3,		  nil		  ]
#-------------------------------------------------------------------------#
# BAT:	  decimal1		| decimal2		| *		  #
# (void)  (decimal)		| (decimal)		| (decimal)	  #
#-------------------------------------------------------------------------#
[ 0@0,	  nil,			  nil,			  nil		  ]
[ 1@0,	  0,			  nil,			  0		  ]
[ 2@0,	  1122E-30,		  nil,			  nil		  ]
[ 3@0,	  -11220000000000E-40,	  nil,			  nil		  ]
[ 4@0,	  2244,			  nil,			  nil		  ]
[ 5@0,	  -22440000000000E-10,	  nil,			  nil		  ]
[ 6@0,	  4488E15,		  nil,			  nil		  ]
[ 7@0,	  -44880000000000E5,	  nil,			  nil		  ]
[ 8@0,	  1122E40,		  nil,			  nil		  ]
[ 9@0,	  -11220000000000E30,	  nil,			  nil		  ]
[ 10@0,	  22440000000000E9000,	  nil,			  nil		  ]
[ 11@0,	  -2244E9010,		  nil,			  nil		  ]
[ 12@0,	  nil,			  0,			  0		  ]
[ 13@0,	  0,			  0,			  0		  ]
[ 14@0,	  1122E-30,		  0,			  0		  ]
[ 15@0,	  -11220000000000E-40,	  0,			  0		  ]
[ 16@0,	  2244,			  0,			  0		  ]
[ 17@0,	  -22440000000000E-10,	  0,			  0		  ]
[ 18@0,	  4488E15,		  0,			  0		  ]
[ 19@0,	  -44880000000000E5,	  0,			  0		  ]
[ 20@0,	  1122E40,		  0,			  0		  ]
[ 21@0,	  -11220000000000E30,	  0,			  0		  ]
[ 22@0,	  22440000000000E9000,	  0,			  0		  ]
[ 23@0,	  -2244E9010,		  0,			  0		  ]
[ 24@0,	  nil,			  1122E-30,		  nil		  ]
[ 25@0,	  0,			  1122E-30,		  0		  ]
[ 26@0,	  1122E-30,		  1122E-30,		  1258884E-60	  ]
[ 27@0,	  -11220000000000E-40,	  1122E-30,		  -1258884E-60	  ]
[ 28@0,	  2244,			  1122E-30,		  2517768E-30	  ]
[ 29@0,	  -22440000000000E-10,	  1122E-30,		  -2517768E-30	  ]
[ 30@0,	  4488E15,		  1122E-30,		  5035536E-15	  ]
[ 31@0,	  -44880000000000E5,	  1122E-30,		  -5035536E-15	  ]
[ 32@0,	  1122E40,		  1122E-30,		  1258884E10	  ]
[ 33@0,	  -11220000000000E30,	  1122E-30,		  -1258884E10	  ]
[ 34@0,	  22440000000000E9000,	  1122E-30,		  2517768E8980	  ]
[ 35@0,	  -2244E9010,		  1122E-30,		  -2517768E8980	  ]
[ 36@0,	  nil,			  -11220000000000E-40,	  nil		  ]
[ 37@0,	  0,			  -11220000000000E-40,	  0		  ]
[ 38@0,	  1122E-30,		  -11220000000000E-40,	  -1258884E-60	  ]
[ 39@0,	  -11220000000000E-40,	  -11220000000000E-40,	  1258884E-60	  ]
[ 40@0,	  2244,			  -11220000000000E-40,	  -2517768E-30	  ]
[ 41@0,	  -22440000000000E-10,	  -11220000000000E-40,	  2517768E-30	  ]
[ 42@0,	  4488E15,		  -11220000000000E-40,	  -5035536E-15	  ]
[ 43@0,	  -44880000000000E5,	  -11220000000000E-40,	  5035536E-15	  ]
[ 44@0,	  1122E40,		  -11220000000000E-40,	  -1258884E10	  ]
[ 45@0,	  -11220000000000E30,	  -11220000000000E-40,	  1258884E10	  ]
[ 46@0,	  22440000000000E9000,	  -11220000000000E-40,	  -2517768E8980	  ]
[ 47@0,	  -2244E9010,		  -11220000000000E-40,	  2517768E8980	  ]
[ 48@0,	  nil,			  2244,			  nil		  ]
[ 49@0,	  0,			  2244,			  0		  ]
[ 50@0,	  1122E-30,		  2244,			  2517768E-30	  ]
[ 51@0,	  -11220000000000E-40,	  2244,			  -2517768E-30	  ]
[ 52@0,	  2244,			  2244,			  5035536	  ]
[ 53@0,	  -22440000000000E-10,	  2244,			  -5035536	  ]
[ 54@0,	  4488E15,		  2244,			  10071072E15	  ]
[ 55@0,	  -44880000000000E5,	  2244,			  -10071072E15	  ]
[ 56@0,	  1122E40,		  2244,			  2517768E40	  ]
[ 57@0,	  -11220000000000E30,	  2244,			  -2517768E40	  ]
[ 58@0,	  22440000000000E9000,	  2244,			  5035536E9010	  ]
[ 59@0,	  -2244E9010,		  2244,			  -5035536E9010	  ]
[ 60@0,	  nil,			  -22440000000000E-10,	  nil		  ]
[ 61@0,	  0,			  -22440000000000E-10,	  0		  ]
[ 62@0,	  1122E-30,		  -22440000000000E-10,	  -2517768E-30	  ]
[ 63@0,	  -11220000000000E-40,	  -22440000000000E-10,	  2517768E-30	  ]
[ 64@0,	  2244,			  -22440000000000E-10,	  -5035536	  ]
[ 65@0,	  -22440000000000E-10,	  -22440000000000E-10,	  5035536	  ]
[ 66@0,	  4488E15,		  -22440000000000E-10,	  -10071072E15	  ]
[ 67@0,	  -44880000000000E5,	  -22440000000000E-10,	  10071072E15	  ]
[ 68@0,	  1122E40,		  -22440000000000E-10,	  -2517768E40	  ]
[ 69@0,	  -11220000000000E30,	  -22440000000000E-10,	  2517768E40	  ]
[ 70@0,	  22440000000000E9000,	  -22440000000000E-10,	  -5035536E9010	  ]
[ 71@0,	  -2244E9010,		  -22440000000000E-10,	  5035536E9010	  ]
[ 72@0,	  nil,			  4488E15,		  nil		  ]
[ 73@0,	  0,			  4488E15,		  0		  ]
[ 74@0,	  1122E-30,		  4488E15,		  5035536E-15	  ]
[ 75@0,	  -11220000000000E-40,	  4488E15,		  -5035536E-15	  ]
[ 76@0,	  2244,			  4488E15,		  10071072E15	  ]
[ 77@0,	  -22440000000000E-10,	  4488E15,		  -10071072E15	  ]
[ 78@0,	  4488E15,		  4488E15,		  20142144E30	  ]
[ 79@0,	  -44880000000000E5,	  4488E15,		  -20142144E30	  ]
[ 80@0,	  1122E40,		  4488E15,		  5035536E55	  ]
[ 81@0,	  -11220000000000E30,	  4488E15,		  -5035536E55	  ]
[ 82@0,	  22440000000000E9000,	  4488E15,		  10071072E9025	  ]
[ 83@0,	  -2244E9010,		  4488E15,		  -10071072E9025  ]
[ 84@0,	  nil,			  -44880000000000E5,	  nil		  ]
[ 85@0,	  0,			  -44880000000000E5,	  0		  ]
[ 86@0,	  1122E-30,		  -44880000000000E5,	  -5035536E-15	  ]
[ 87@0,	  -11220000000000E-40,	  -44880000000000E5,	  5035536E-15	  ]
[ 88@0,	  2244,			  -44880000000000E5,	  -10071072E15	  ]
[ 89@0,	  -22440000000000E-10,	  -44880000000000E5,	  10071072E15	  ]
[ 90@0,	  4488E15,		  -44880000000000E5,	  -20142144E30	  ]
[ 91@0,	  -44880000000000E5,	  -44880000000000E5,	  20142144E30	  ]
[ 92@0,	  1122E40,		  -44880000000000E5,	  -5035536E55	  ]
[ 93@0,	  -11220000000000E30,	  -44880000000000E5,	  5035536E55	  ]
[ 94@0,	  22440000000000E9000,	  -44880000000000E5,	  -10071072E9025  ]
[ 95@0,	  -2244E9010,		  -44880000000000E5,	  10071072E9025	  ]
[ 96@0,	  nil,			  1122E40,		  nil		  ]
[ 97@0,	  0,			  1122E40,		  0		  ]
[ 98@0,	  1122E-30,		  1122E40,		  1258884E10	  ]
[ 99@0,	  -11220000000000E-40,	  1122E40,		  -1258884E10	  ]
[ 100@0,  2244,			  1122E40,		  2517768E40	  ]
[ 101@0,  -22440000000000E-10,	  1122E40,		  -2517768E40	  ]
[ 102@0,  4488E15,		  1122E40,		  5035536E55	  ]
[ 103@0,  -44880000000000E5,	  1122E40,		  -5035536E55	  ]
[ 104@0,  1122E40,		  1122E40,		  1258884E80	  ]
[ 105@0,  -11220000000000E30,	  1122E40,		  -1258884E80	  ]
[ 106@0,  22440000000000E9000,	  1122E40,		  2517768E9050	  ]
[ 107@0,  -2244E9010,		  1122E40,		  -2517768E9050	  ]
[ 108@0,  nil,			  -11220000000000E30,	  nil		  ]
[ 109@0,  0,			  -11220000000000E30,	  0		  ]
[ 110@0,  1122E-30,		  -11220000000000E30,	  -1258884E10	  ]
[ 111@0,  -11220000000000E-40,	  -11220000000000E30,	  1258884E10	  ]
[ 112@0,  2244,			  -11220000000000E30,	  -2517768E40	  ]
[ 113@0,  -22440000000000E-10,	  -11220000000000E30,	  2517768E40	  ]
[ 114@0,  4488E15,		  -11220000000000E30,	  -5035536E55	  ]
[ 115@0,  -44880000000000E5,	  -11220000000000E30,	  5035536E55	  ]
[ 116@0,  1122E40,		  -11220000000000E30,	  -1258884E80	  ]
[ 117@0,  -11220000000000E30,	  -11220000000000E30,	  1258884E80	  ]
[ 118@0,  22440000000000E9000,	  -11220000000000E30,	  -2517768E9050	  ]
[ 119@0,  -2244E9010,		  -11220000000000E30,	  2517768E9050	  ]
[ 120@0,  nil,			  22440000000000E9000,	  nil		  ]
[ 121@0,  0,			  22440000000000E9000,	  0		  ]
[ 122@0,  1122E-30,		  22440000000000E9000,	  2517768E8980	  ]
[ 123@0,  -11220000000000E-40,	  22440000000000E9000,	  -2517768E8980	  ]
[ 124@0,  2244,			  22440000000000E9000,	  5035536E9010	  ]
[ 125@0,  -22440000000000E-10,	  22440000000000E9000,	  -5035536E9010	  ]
[ 126@0,  4488E15,		  22440000000000E9000,	  10071072E9025	  ]
[ 127@0,  -44880000000000E5,	  22440000000000E9000,	  -10071072E9025  ]
[ 128@0,  1122E40,		  22440000000000E9000,	  2517768E9050	  ]
[ 129@0,  -11220000000000E30,	  22440000000000E9000,	  -2517768E9050	  ]
[ 130@0,  22440000000000E9000,	  22440000000000E9000,	  nil		  ]
[ 131@0,  -2244E9010,		  22440000000000E9000,	  nil		  ]
[ 132@0,  nil,			  -2244E9010,		  nil		  ]
[ 133@0,  0,			  -2244E9010,		  0		  ]
[ 134@0,  1122E-30,		  -2244E9010,		  -2517768E8980	  ]
[ 135@0,  -11220000000000E-40,	  -2244E9010,		  2517768E8980	  ]
[ 136@0,  2244,			  -2244E9010,		  -5035536E9010	  ]
[ 137@0,  -22440000000000E-10,	  -2244E9010,		  5035536E9010	  ]
[ 138@0,  4488E15,		  -2244E9010,		  -10071072E9025  ]
[ 139@0,  -44880000000000E5,	  -2244E9010,		  10071072E9025	  ]
[ 140@0,  1122E40,		  -2244E9010,		  -2517768E9050	  ]
[ 141@0,  -11220000000000E30,	  -2244E9010,		  2517768E9050	  ]
[ 142@0,  22440000000000E9000,	  -2244E9010,		  nil		  ]
[ 143@0,  -2244E9010,		  -2244E9010,		  nil		  ]
#-------------------------------------------------------------------------#
# BAT:	  decimal1		| decimal2		| /		  #
# (void)  (decimal)		| (decimal)		| (decimal)	  #
#-------------------------------------------------------------------------#
[ 0@0,	  nil,			  nil,			  nil		  ]
[ 1@0,	  0,			  nil,			  nil		  ]
[ 2@0,	  1122E-30,		  nil,			  nil		  ]
[ 3@0,	  -11220000000000E-40,	  nil,			  nil		  ]
[ 4@0,	  2244,			  nil,			  nil		  ]
[ 5@0,	  -22440000000000E-10,	  nil,			  nil		  ]
[ 6@0,	  4488E15,		  nil,			  nil		  ]
[ 7@0,	  -44880000000000E5,	  nil,			  nil		  ]
[ 8@0,	  1122E40,		  nil,			  nil		  ]
[ 9@0,	  -11220000000000E30,	  nil,			  nil		  ]
[ 10@0,	  22440000000000E9000,	  nil,			  nil		  ]
[ 11@0,	  -2244E9010,		  nil,			  nil		  ]
[ 12@0,	  nil,			  0,			  nil		  ]
[ 13@0,	  0,			  0,			  nil		  ]
[ 14@0,	  1122E-30,		  0,			  nil		  ]
[ 15@0,	  -11220000000000E-40,	  0,			  nil		  ]
[ 16@0,	  2244,			  0,			  nil		  ]
[ 17@0,	  -22440000000000E-10,	  0,			  nil		  ]
[ 18@0,	  4488E15,		  0,			  nil		  ]
[ 19@0,	  -44880000000000E5,	  0,			  nil		  ]
[ 20@0,	  1122E40,		  0,			  nil		  ]
[ 21@0,	  -11220000000000E30,	  0,			  nil		  ]
[ 22@0,	  22440000000000E9000,	  0,			  nil		  ]
[ 23@0,	  -2244E9010,		  0,			  nil		  ]
[ 24@0,	  nil,			  1122E-30,		  nil		  ]
[ 25@0,	  0,			  1122E-30,		  0		  ]
[ 26@0,	  1122E-30,		  1122E-30,		  1		  ]
[ 27@0,	  -11220000000000E-40,	  1122E-30,		  -1		  ]
[ 28@0,	  2244,			  1122E-30,		  2E30		  ]
[ 29@0,	  -22440000000000E-10,	  1122E-30,		  -2E30		  ]
[ 30@0,	  4488E15,		  1122E-30,		  4E45		  ]
[ 31@0,	  -44880000000000E5,	  1122E-30,		  -4E45		  ]
[ 32@0,	  1122E40,		  1122E-30,		  1E70		  ]
[ 33@0,	  -11220000000000E30,	  1122E-30,		  -1E70		  ]
[ 34@0,	  22440000000000E9000,	  1122E-30,		  2E9040	  ]
[ 35@0,	  -2244E9010,		  1122E-30,		  -2E9040	  ]
[ 36@0,	  nil,			  -11220000000000E-40,	  nil		  ]
[ 37@0,	  0,			  -11220000000000E-40,	  0		  ]
[ 38@0,	  1122E-30,		  -11220000000000E-40,	  -1		  ]
[ 39@0,	  -11220000000000E-40,	  -11220000000000E-40,	  1		  ]
[ 40@0,	  2244,			  -11220000000000E-40,	  -2E30		  ]
[ 41@0,	  -22440000000000E-10,	  -11220000000000E-40,	  2E30		  ]
[ 42@0,	  4488E15,		  -11220000000000E-40,	  -4E45		  ]
[ 43@0,	  -44880000000000E5,	  -11220000000000E-40,	  4E45		  ]
[ 44@0,	  1122E40,		  -11220000000000E-40,	  -1E70		  ]
[ 45@0,	  -11220000000000E30,	  -11220000000000E-40,	  1E70		  ]
[ 46@0,	  22440000000000E9000,	  -11220000000000E-40,	  -2E9040	  ]
[ 47@0,	  -2244E9010,		  -11220000000000E-40,	  2E9040	  ]
[ 48@0,	  nil,			  2244,			  nil		  ]
[ 49@0,	  0,			  2244,			  0		  ]
[ 50@0,	  1122E-30,		  2244,			  0		  ]
[ 51@0,	  -11220000000000E-40,	  2244,			  0		  ]
[ 52@0,	  2244,			  2244,			  1		  ]
[ 53@0,	  -22440000000000E-10,	  2244,			  -1		  ]
[ 54@0,	  4488E15,		  2244,			  2E15		  ]
[ 55@0,	  -44880000000000E5,	  2244,			  -2E15		  ]
[ 56@0,	  1122E40,		  2244,			  5E39		  ]
[ 57@0,	  -11220000000000E30,	  2244,			  -5E39		  ]
[ 58@0,	  22440000000000E9000,	  2244,			  1E9010	  ]
[ 59@0,	  -2244E9010,		  2244,			  -1E9010	  ]
[ 60@0,	  nil,			  -22440000000000E-10,	  nil		  ]
[ 61@0,	  0,			  -22440000000000E-10,	  0		  ]
[ 62@0,	  1122E-30,		  -22440000000000E-10,	  0		  ]
[ 63@0,	  -11220000000000E-40,	  -22440000000000E-10,	  0		  ]
[ 64@0,	  2244,			  -22440000000000E-10,	  -1		  ]
[ 65@0,	  -22440000000000E-10,	  -22440000000000E-10,	  1		  ]
[ 66@0,	  4488E15,		  -22440000000000E-10,	  -2E15		  ]
[ 67@0,	  -44880000000000E5,	  -22440000000000E-10,	  2E15		  ]
[ 68@0,	  1122E40,		  -22440000000000E-10,	  -5E39		  ]
[ 69@0,	  -11220000000000E30,	  -22440000000000E-10,	  5E39		  ]
[ 70@0,	  22440000000000E9000,	  -22440000000000E-10,	  -1E9010	  ]
[ 71@0,	  -2244E9010,		  -22440000000000E-10,	  1E9010	  ]
[ 72@0,	  nil,			  4488E15,		  nil		  ]
[ 73@0,	  0,			  4488E15,		  0		  ]
[ 74@0,	  1122E-30,		  4488E15,		  0		  ]
[ 75@0,	  -11220000000000E-40,	  4488E15,		  0		  ]
[ 76@0,	  2244,			  4488E15,		  0		  ]
[ 77@0,	  -22440000000000E-10,	  4488E15,		  0		  ]
[ 78@0,	  4488E15,		  4488E15,		  1		  ]
[ 79@0,	  -44880000000000E5,	  4488E15,		  -1		  ]
[ 80@0,	  1122E40,		  4488E15,		  25E23		  ]
[ 81@0,	  -11220000000000E30,	  4488E15,		  -25E23	  ]
[ 82@0,	  22440000000000E9000,	  4488E15,		  5E8994	  ]
[ 83@0,	  -2244E9010,		  4488E15,		  -5E8994	  ]
[ 84@0,	  nil,			  -44880000000000E5,	  nil		  ]
[ 85@0,	  0,			  -44880000000000E5,	  0		  ]
[ 86@0,	  1122E-30,		  -44880000000000E5,	  0		  ]
[ 87@0,	  -11220000000000E-40,	  -44880000000000E5,	  0		  ]
[ 88@0,	  2244,			  -44880000000000E5,	  0		  ]
[ 89@0,	  -22440000000000E-10,	  -44880000000000E5,	  0		  ]
[ 90@0,	  4488E15,		  -44880000000000E5,	  -1		  ]
[ 91@0,	  -44880000000000E5,	  -44880000000000E5,	  1		  ]
[ 92@0,	  1122E40,		  -44880000000000E5,	  -25E23	  ]
[ 93@0,	  -11220000000000E30,	  -44880000000000E5,	  25E23		  ]
[ 94@0,	  22440000000000E9000,	  -44880000000000E5,	  -5E8994	  ]
[ 95@0,	  -2244E9010,		  -44880000000000E5,	  5E8994	  ]
[ 96@0,	  nil,			  1122E40,		  nil		  ]
[ 97@0,	  0,			  1122E40,		  0		  ]
[ 98@0,	  1122E-30,		  1122E40,		  1E-70		  ]
[ 99@0,	  -11220000000000E-40,	  1122E40,		  -1E-70	  ]
[ 100@0,  2244,			  1122E40,		  2E-40		  ]
[ 101@0,  -22440000000000E-10,	  1122E40,		  -2E-40	  ]
[ 102@0,  4488E15,		  1122E40,		  4E-25		  ]
[ 103@0,  -44880000000000E5,	  1122E40,		  -4E-25	  ]
[ 104@0,  1122E40,		  1122E40,		  1		  ]
[ 105@0,  -11220000000000E30,	  1122E40,		  -1		  ]
[ 106@0,  22440000000000E9000,	  1122E40,		  2E8970	  ]
[ 107@0,  -2244E9010,		  1122E40,		  -2E8970	  ]
[ 108@0,  nil,			  -11220000000000E30,	  nil		  ]
[ 109@0,  0,			  -11220000000000E30,	  0		  ]
[ 110@0,  1122E-30,		  -11220000000000E30,	  -1E-70	  ]
[ 111@0,  -11220000000000E-40,	  -11220000000000E30,	  1E-70		  ]
[ 112@0,  2244,			  -11220000000000E30,	  -2E-40	  ]
[ 113@0,  -22440000000000E-10,	  -11220000000000E30,	  2E-40		  ]
[ 114@0,  4488E15,		  -11220000000000E30,	  -4E-25	  ]
[ 115@0,  -44880000000000E5,	  -11220000000000E30,	  4E-25		  ]
[ 116@0,  1122E40,		  -11220000000000E30,	  -1		  ]
[ 117@0,  -11220000000000E30,	  -11220000000000E30,	  1		  ]
[ 118@0,  22440000000000E9000,	  -11220000000000E30,	  -2E8970	  ]
[ 119@0,  -2244E9010,		  -11220000000000E30,	  2E8970	  ]
[ 120@0,  nil,			  22440000000000E9000,	  nil		  ]
[ 121@0,  0,			  22440000000000E9000,	  0		  ]
[ 122@0,  1122E-30,		  22440000000000E9000,	  0		  ]
[ 123@0,  -11220000000000E-40,	  22440000000000E9000,	  0		  ]
[ 124@0,  2244,			  22440000000000E9000,	  1E-9010	  ]
[ 125@0,  -22440000000000E-10,	  22440000000000E9000,	  -1E-9010	  ]
[ 126@0,  4488E15,		  22440000000000E9000,	  2E-8995	  ]
[ 127@0,  -44880000000000E5,	  22440000000000E9000,	  -2E-8995	  ]
[ 128@0,  1122E40,		  22440000000000E9000,	  0		  ]
[ 129@0,  -11220000000000E30,	  22440000000000E9000,	  0		  ]
[ 130@0,  22440000000000E9000,	  22440000000000E9000,	  1		  ]
[ 131@0,  -2244E9010,		  22440000000000E9000,	  -1		  ]
[ 132@0,  nil,			  -2244E9010,		  nil		  ]
[ 133@0,  0,			  -2244E9010,		  0		  ]
[ 134@0,  1122E-30,		  -2244E9010,		  0		  ]
[ 135@0,  -11220000000000E-40,	  -2244E9010,		  0		  ]
[ 136@0,  2244,			  -2244E9010,		  -1E-9010	  ]
[ 137@0,  -22440000000000E-10,	  -2244E9010,		  1E-9010	  ]
[ 138@0,  4488E15,		  -2244E9010,		  -2E-8995	  ]
[ 139@0,  -44880000000000E5,	  -2244E9010,		  2E-8995	  ]
[ 140@0,  1122E40,		  -2244E9010,		  0		  ]
[ 141@0,  -11220000000000E30,	  -2244E9010,		  0		  ]
[ 142@0,  22440000000000E9000,	  -2244E9010,		  -1		  ]
[ 143@0,  -2244E9010,		  -2244E9010,		  1		  ]
#-------------------------------------------------------------------------#
# BAT:	  decimal1		| decimal2		| divide	  #
# (void)  (decimal)		| (decimal)		| (decimal)	  #
#-------------------------------------------------------------------------#
[ 0@0,	  nil,			  nil,			  nil		  ]
[ 1@0,	  0,			  nil,			  nil		  ]
[ 2@0,	  1122E-30,		  nil,			  nil		  ]
[ 3@0,	  -11220000000000E-40,	  nil,			  nil		  ]
[ 4@0,	  2244,			  nil,			  nil		  ]
[ 5@0,	  -22440000000000E-10,	  nil,			  nil		  ]
[ 6@0,	  4488E15,		  nil,			  nil		  ]
[ 7@0,	  -44880000000000E5,	  nil,			  nil		  ]
[ 8@0,	  1122E40,		  nil,			  nil		  ]
[ 9@0,	  -11220000000000E30,	  nil,			  nil		  ]
[ 10@0,	  22440000000000E9000,	  nil,			  nil		  ]
[ 11@0,	  -2244E9010,		  nil,			  nil		  ]
[ 12@0,	  nil,			  0,			  nil		  ]
[ 13@0,	  0,			  0,			  nil		  ]
[ 14@0,	  1122E-30,		  0,			  nil		  ]
[ 15@0,	  -11220000000000E-40,	  0,			  nil		  ]
[ 16@0,	  2244,			  0,			  nil		  ]
[ 17@0,	  -22440000000000E-10,	  0,			  nil		  ]
[ 18@0,	  4488E15,		  0,			  nil		  ]
[ 19@0,	  -44880000000000E5,	  0,			  nil		  ]
[ 20@0,	  1122E40,		  0,			  nil		  ]
[ 21@0,	  -11220000000000E30,	  0,			  nil		  ]
[ 22@0,	  22440000000000E9000,	  0,			  nil		  ]
[ 23@0,	  -2244E9010,		  0,			  nil		  ]
[ 24@0,	  nil,			  1122E-30,		  nil		  ]
[ 25@0,	  0,			  1122E-30,		  0		  ]
[ 26@0,	  1122E-30,		  1122E-30,		  1		  ]
[ 27@0,	  -11220000000000E-40,	  1122E-30,		  -1		  ]
[ 28@0,	  2244,			  1122E-30,		  2E30		  ]
[ 29@0,	  -22440000000000E-10,	  1122E-30,		  -2E30		  ]
[ 30@0,	  4488E15,		  1122E-30,		  4E45		  ]
[ 31@0,	  -44880000000000E5,	  1122E-30,		  -4E45		  ]
[ 32@0,	  1122E40,		  1122E-30,		  1E70		  ]
[ 33@0,	  -11220000000000E30,	  1122E-30,		  -1E70		  ]
[ 34@0,	  22440000000000E9000,	  1122E-30,		  2E9040	  ]
[ 35@0,	  -2244E9010,		  1122E-30,		  -2E9040	  ]
[ 36@0,	  nil,			  -11220000000000E-40,	  nil		  ]
[ 37@0,	  0,			  -11220000000000E-40,	  0		  ]
[ 38@0,	  1122E-30,		  -11220000000000E-40,	  -1		  ]
[ 39@0,	  -11220000000000E-40,	  -11220000000000E-40,	  1		  ]
[ 40@0,	  2244,			  -11220000000000E-40,	  -2E30		  ]
[ 41@0,	  -22440000000000E-10,	  -11220000000000E-40,	  2E30		  ]
[ 42@0,	  4488E15,		  -11220000000000E-40,	  -4E45		  ]
[ 43@0,	  -44880000000000E5,	  -11220000000000E-40,	  4E45		  ]
[ 44@0,	  1122E40,		  -11220000000000E-40,	  -1E70		  ]
[ 45@0,	  -11220000000000E30,	  -11220000000000E-40,	  1E70		  ]
[ 46@0,	  22440000000000E9000,	  -11220000000000E-40,	  -2E9040	  ]
[ 47@0,	  -2244E9010,		  -11220000000000E-40,	  2E9040	  ]
[ 48@0,	  nil,			  2244,			  nil		  ]
[ 49@0,	  0,			  2244,			  0		  ]
[ 50@0,	  1122E-30,		  2244,			  5E-31		  ]
[ 51@0,	  -11220000000000E-40,	  2244,			  -5E-31	  ]
[ 52@0,	  2244,			  2244,			  1		  ]
[ 53@0,	  -22440000000000E-10,	  2244,			  -1		  ]
[ 54@0,	  4488E15,		  2244,			  2E15		  ]
[ 55@0,	  -44880000000000E5,	  2244,			  -2E15		  ]
[ 56@0,	  1122E40,		  2244,			  5E39		  ]
[ 57@0,	  -11220000000000E30,	  2244,			  -5E39		  ]
[ 58@0,	  22440000000000E9000,	  2244,			  1E9010	  ]
[ 59@0,	  -2244E9010,		  2244,			  -1E9010	  ]
[ 60@0,	  nil,			  -22440000000000E-10,	  nil		  ]
[ 61@0,	  0,			  -22440000000000E-10,	  0		  ]
[ 62@0,	  1122E-30,		  -22440000000000E-10,	  -5E-31	  ]
[ 63@0,	  -11220000000000E-40,	  -22440000000000E-10,	  5E-31		  ]
[ 64@0,	  2244,			  -22440000000000E-10,	  -1		  ]
[ 65@0,	  -22440000000000E-10,	  -22440000000000E-10,	  1		  ]
[ 66@0,	  4488E15,		  -22440000000000E-10,	  -2E15		  ]
[ 67@0,	  -44880000000000E5,	  -22440000000000E-10,	  2E15		  ]
[ 68@0,	  1122E40,		  -22440000000000E-10,	  -5E39		  ]
[ 69@0,	  -11220000000000E30,	  -22440000000000E-10,	  5E39		  ]
[ 70@0,	  22440000000000E9000,	  -22440000000000E-10,	  -1E9010	  ]
[ 71@0,	  -2244E9010,		  -22440000000000E-10,	  1E9010	  ]
[ 72@0,	  nil,			  4488E15,		  nil		  ]
[ 73@0,	  0,			  4488E15,		  0		  ]
[ 74@0,	  1122E-30,		  4488E15,		  25E-47	  ]
[ 75@0,	  -11220000000000E-40,	  4488E15,		  -25E-47	  ]
[ 76@0,	  2244,			  4488E15,		  5E-16		  ]
[ 77@0,	  -22440000000000E-10,	  4488E15,		  -5E-16	  ]
[ 78@0,	  4488E15,		  4488E15,		  1		  ]
[ 79@0,	  -44880000000000E5,	  4488E15,		  -1		  ]
[ 80@0,	  1122E40,		  4488E15,		  25E23		  ]
[ 81@0,	  -11220000000000E30,	  4488E15,		  -25E23	  ]
[ 82@0,	  22440000000000E9000,	  4488E15,		  5E8994	  ]
[ 83@0,	  -2244E9010,		  4488E15,		  -5E8994	  ]
[ 84@0,	  nil,			  -44880000000000E5,	  nil		  ]
[ 85@0,	  0,			  -44880000000000E5,	  0		  ]
[ 86@0,	  1122E-30,		  -44880000000000E5,	  -25E-47	  ]
[ 87@0,	  -11220000000000E-40,	  -44880000000000E5,	  25E-47	  ]
[ 88@0,	  2244,			  -44880000000000E5,	  -5E-16	  ]
[ 89@0,	  -22440000000000E-10,	  -44880000000000E5,	  5E-16		  ]
[ 90@0,	  4488E15,		  -44880000000000E5,	  -1		  ]
[ 91@0,	  -44880000000000E5,	  -44880000000000E5,	  1		  ]
[ 92@0,	  1122E40,		  -44880000000000E5,	  -25E23	  ]
[ 93@0,	  -11220000000000E30,	  -44880000000000E5,	  25E23		  ]
[ 94@0,	  22440000000000E9000,	  -44880000000000E5,	  -5E8994	  ]
[ 95@0,	  -2244E9010,		  -44880000000000E5,	  5E8994	  ]
[ 96@0,	  nil,			  1122E40,		  nil		  ]
[ 97@0,	  0,			  1122E40,		  0		  ]
[ 98@0,	  1122E-30,		  1122E40,		  1E-70		  ]
[ 99@0,	  -11220000000000E-40,	  1122E40,		  -1E-70	  ]
[ 100@0,  2244,			  1122E40,		  2E-40		  ]
[ 101@0,  -22440000000000E-10,	  1122E40,		  -2E-40	  ]
[ 102@0,  4488E15,		  1122E40,		  4E-25		  ]
[ 103@0,  -44880000000000E5,	  1122E40,		  -4E-25	  ]
[ 104@0,  1122E40,		  1122E40,		  1		  ]
[ 105@0,  -11220000000000E30,	  1122E40,		  -1		  ]
[ 106@0,  22440000000000E9000,	  1122E40,		  2E8970	  ]
[ 107@0,  -2244E9010,		  1122E40,		  -2E8970	  ]
[ 108@0,  nil,			  -11220000000000E30,	  nil		  ]
[ 109@0,  0,			  -11220000000000E30,	  0		  ]
[ 110@0,  1122E-30,		  -11220000000000E30,	  -1E-70	  ]
[ 111@0,  -11220000000000E-40,	  -11220000000000E30,	  1E-70		  ]
[ 112@0,  2244,			  -11220000000000E30,	  -2E-40	  ]
[ 113@0,  -22440000000000E-10,	  -11220000000000E30,	  2E-40		  ]
[ 114@0,  4488E15,		  -11220000000000E30,	  -4E-25	  ]
[ 115@0,  -44880000000000E5,	  -11220000000000E30,	  4E-25		  ]
[ 116@0,  1122E40,		  -11220000000000E30,	  -1		  ]
[ 117@0,  -11220000000000E30,	  -11220000000000E30,	  1		  ]
[ 118@0,  22440000000000E9000,	  -11220000000000E30,	  -2E8970	  ]
[ 119@0,  -2244E9010,		  -11220000000000E30,	  2E8970	  ]
[ 120@0,  nil,			  22440000000000E9000,	  nil		  ]
[ 121@0,  0,			  22440000000000E9000,	  0		  ]
[ 122@0,  1122E-30,		  22440000000000E9000,	  5E-9041	  ]
[ 123@0,  -11220000000000E-40,	  22440000000000E9000,	  -5E-9041	  ]
[ 124@0,  2244,			  22440000000000E9000,	  1E-9010	  ]
[ 125@0,  -22440000000000E-10,	  22440000000000E9000,	  -1E-9010	  ]
[ 126@0,  4488E15,		  22440000000000E9000,	  2E-8995	  ]
[ 127@0,  -44880000000000E5,	  22440000000000E9000,	  -2E-8995	  ]
[ 128@0,  1122E40,		  22440000000000E9000,	  5E-8971	  ]
[ 129@0,  -11220000000000E30,	  22440000000000E9000,	  -5E-8971	  ]
[ 130@0,  22440000000000E9000,	  22440000000000E9000,	  1		  ]
[ 131@0,  -2244E9010,		  22440000000000E9000,	  -1		  ]
[ 132@0,  nil,			  -2244E9010,		  nil		  ]
[ 133@0,  0,			  -2244E9010,		  0		  ]
[ 134@0,  1122E-30,		  -2244E9010,		  -5E-9041	  ]
[ 135@0,  -11220000000000E-40,	  -2244E9010,		  5E-9041	  ]
[ 136@0,  2244,			  -2244E9010,		  -1E-9010	  ]
[ 137@0,  -22440000000000E-10,	  -2244E9010,		  1E-9010	  ]
[ 138@0,  4488E15,		  -2244E9010,		  -2E-8995	  ]
[ 139@0,  -44880000000000E5,	  -2244E9010,		  2E-8995	  ]
[ 140@0,  1122E40,		  -2244E9010,		  -5E-8971	  ]
[ 141@0,  -11220000000000E30,	  -2244E9010,		  5E-8971	  ]
[ 142@0,  22440000000000E9000,	  -2244E9010,		  -1		  ]
[ 143@0,  -2244E9010,		  -2244E9010,		  1		  ]
#-----------------------------------------------------------------------------------------#
# BAT:	  decimal1		| decimal2		| precision	| divide	  #
# (void)  (decimal)		| (decimal)		| (int)		| (decimal)	  #
#-----------------------------------------------------------------------------------------#
[ 0@0,	  nil,			  nil,			  nil,		  nil		  ]
[ 1@0,	  0,			  nil,			  0,		  nil		  ]
[ 2@0,	  1122E-30,		  nil,			  3,		  nil		  ]
[ 3@0,	  -11220000000000E-40,	  nil,			  13,		  nil		  ]
[ 4@0,	  2244,			  nil,			  3,		  nil		  ]
[ 5@0,	  -22440000000000E-10,	  nil,			  13,		  nil		  ]
[ 6@0,	  4488E15,		  nil,			  3,		  nil		  ]
[ 7@0,	  -44880000000000E5,	  nil,			  13,		  nil		  ]
[ 8@0,	  1122E40,		  nil,			  3,		  nil		  ]
[ 9@0,	  -11220000000000E30,	  nil,			  13,		  nil		  ]
[ 10@0,	  22440000000000E9000,	  nil,			  13,		  nil		  ]
[ 11@0,	  -2244E9010,		  nil,			  3,		  nil		  ]
[ 12@0,	  nil,			  0,			  nil,		  nil		  ]
[ 13@0,	  0,			  0,			  0,		  nil		  ]
[ 14@0,	  1122E-30,		  0,			  3,		  nil		  ]
[ 15@0,	  -11220000000000E-40,	  0,			  13,		  nil		  ]
[ 16@0,	  2244,			  0,			  3,		  nil		  ]
[ 17@0,	  -22440000000000E-10,	  0,			  13,		  nil		  ]
[ 18@0,	  4488E15,		  0,			  3,		  nil		  ]
[ 19@0,	  -44880000000000E5,	  0,			  13,		  nil		  ]
[ 20@0,	  1122E40,		  0,			  3,		  nil		  ]
[ 21@0,	  -11220000000000E30,	  0,			  13,		  nil		  ]
[ 22@0,	  22440000000000E9000,	  0,			  13,		  nil		  ]
[ 23@0,	  -2244E9010,		  0,			  3,		  nil		  ]
[ 24@0,	  nil,			  1122E-30,		  nil,		  nil		  ]
[ 25@0,	  0,			  1122E-30,		  0,		  0		  ]
[ 26@0,	  1122E-30,		  1122E-30,		  3,		  1		  ]
[ 27@0,	  -11220000000000E-40,	  1122E-30,		  13,		  -1		  ]
[ 28@0,	  2244,			  1122E-30,		  3,		  2E30		  ]
[ 29@0,	  -22440000000000E-10,	  1122E-30,		  13,		  -2E30		  ]
[ 30@0,	  4488E15,		  1122E-30,		  3,		  4E45		  ]
[ 31@0,	  -44880000000000E5,	  1122E-30,		  13,		  -4E45		  ]
[ 32@0,	  1122E40,		  1122E-30,		  3,		  1E70		  ]
[ 33@0,	  -11220000000000E30,	  1122E-30,		  13,		  -1E70		  ]
[ 34@0,	  22440000000000E9000,	  1122E-30,		  13,		  2E9040	  ]
[ 35@0,	  -2244E9010,		  1122E-30,		  3,		  -2E9040	  ]
[ 36@0,	  nil,			  -11220000000000E-40,	  nil,		  nil		  ]
[ 37@0,	  0,			  -11220000000000E-40,	  0,		  0		  ]
[ 38@0,	  1122E-30,		  -11220000000000E-40,	  3,		  -1		  ]
[ 39@0,	  -11220000000000E-40,	  -11220000000000E-40,	  13,		  1		  ]
[ 40@0,	  2244,			  -11220000000000E-40,	  3,		  -2E30		  ]
[ 41@0,	  -22440000000000E-10,	  -11220000000000E-40,	  13,		  2E30		  ]
[ 42@0,	  4488E15,		  -11220000000000E-40,	  3,		  -4E45		  ]
[ 43@0,	  -44880000000000E5,	  -11220000000000E-40,	  13,		  4E45		  ]
[ 44@0,	  1122E40,		  -11220000000000E-40,	  3,		  -1E70		  ]
[ 45@0,	  -11220000000000E30,	  -11220000000000E-40,	  13,		  1E70		  ]
[ 46@0,	  22440000000000E9000,	  -11220000000000E-40,	  13,		  -2E9040	  ]
[ 47@0,	  -2244E9010,		  -11220000000000E-40,	  3,		  2E9040	  ]
[ 48@0,	  nil,			  2244,			  nil,		  nil		  ]
[ 49@0,	  0,			  2244,			  0,		  0		  ]
[ 50@0,	  1122E-30,		  2244,			  3,		  5E-31		  ]
[ 51@0,	  -11220000000000E-40,	  2244,			  13,		  -5E-31	  ]
[ 52@0,	  2244,			  2244,			  3,		  1		  ]
[ 53@0,	  -22440000000000E-10,	  2244,			  13,		  -1		  ]
[ 54@0,	  4488E15,		  2244,			  3,		  2E15		  ]
[ 55@0,	  -44880000000000E5,	  2244,			  13,		  -2E15		  ]
[ 56@0,	  1122E40,		  2244,			  3,		  5E39		  ]
[ 57@0,	  -11220000000000E30,	  2244,			  13,		  -5E39		  ]
[ 58@0,	  22440000000000E9000,	  2244,			  13,		  1E9010	  ]
[ 59@0,	  -2244E9010,		  2244,			  3,		  -1E9010	  ]
[ 60@0,	  nil,			  -22440000000000E-10,	  nil,		  nil		  ]
[ 61@0,	  0,			  -22440000000000E-10,	  0,		  0		  ]
[ 62@0,	  1122E-30,		  -22440000000000E-10,	  3,		  -5E-31	  ]
[ 63@0,	  -11220000000000E-40,	  -22440000000000E-10,	  13,		  5E-31		  ]
[ 64@0,	  2244,			  -22440000000000E-10,	  3,		  -1		  ]
[ 65@0,	  -22440000000000E-10,	  -22440000000000E-10,	  13,		  1		  ]
[ 66@0,	  4488E15,		  -22440000000000E-10,	  3,		  -2E15		  ]
[ 67@0,	  -44880000000000E5,	  -22440000000000E-10,	  13,		  2E15		  ]
[ 68@0,	  1122E40,		  -22440000000000E-10,	  3,		  -5E39		  ]
[ 69@0,	  -11220000000000E30,	  -22440000000000E-10,	  13,		  5E39		  ]
[ 70@0,	  22440000000000E9000,	  -22440000000000E-10,	  13,		  -1E9010	  ]
[ 71@0,	  -2244E9010,		  -22440000000000E-10,	  3,		  1E9010	  ]
[ 72@0,	  nil,			  4488E15,		  nil,		  nil		  ]
[ 73@0,	  0,			  4488E15,		  0,		  0		  ]
[ 74@0,	  1122E-30,		  4488E15,		  3,		  25E-47	  ]
[ 75@0,	  -11220000000000E-40,	  4488E15,		  13,		  -25E-47	  ]
[ 76@0,	  2244,			  4488E15,		  3,		  5E-16		  ]
[ 77@0,	  -22440000000000E-10,	  4488E15,		  13,		  -5E-16	  ]
[ 78@0,	  4488E15,		  4488E15,		  3,		  1		  ]
[ 79@0,	  -44880000000000E5,	  4488E15,		  13,		  -1		  ]
[ 80@0,	  1122E40,		  4488E15,		  3,		  25E23		  ]
[ 81@0,	  -11220000000000E30,	  4488E15,		  13,		  -25E23	  ]
[ 82@0,	  22440000000000E9000,	  4488E15,		  13,		  5E8994	  ]
[ 83@0,	  -2244E9010,		  4488E15,		  3,		  -5E8994	  ]
[ 84@0,	  nil,			  -44880000000000E5,	  nil,		  nil		  ]
[ 85@0,	  0,			  -44880000000000E5,	  0,		  0		  ]
[ 86@0,	  1122E-30,		  -44880000000000E5,	  3,		  -25E-47	  ]
[ 87@0,	  -11220000000000E-40,	  -44880000000000E5,	  13,		  25E-47	  ]
[ 88@0,	  2244,			  -44880000000000E5,	  3,		  -5E-16	  ]
[ 89@0,	  -22440000000000E-10,	  -44880000000000E5,	  13,		  5E-16		  ]
[ 90@0,	  4488E15,		  -44880000000000E5,	  3,		  -1		  ]
[ 91@0,	  -44880000000000E5,	  -44880000000000E5,	  13,		  1		  ]
[ 92@0,	  1122E40,		  -44880000000000E5,	  3,		  -25E23	  ]
[ 93@0,	  -11220000000000E30,	  -44880000000000E5,	  13,		  25E23		  ]
[ 94@0,	  22440000000000E9000,	  -44880000000000E5,	  13,		  -5E8994	  ]
[ 95@0,	  -2244E9010,		  -44880000000000E5,	  3,		  5E8994	  ]
[ 96@0,	  nil,			  1122E40,		  nil,		  nil		  ]
[ 97@0,	  0,			  1122E40,		  0,		  0		  ]
[ 98@0,	  1122E-30,		  1122E40,		  3,		  1E-70		  ]
[ 99@0,	  -11220000000000E-40,	  1122E40,		  13,		  -1E-70	  ]
[ 100@0,  2244,			  1122E40,		  3,		  2E-40		  ]
[ 101@0,  -22440000000000E-10,	  1122E40,		  13,		  -2E-40	  ]
[ 102@0,  4488E15,		  1122E40,		  3,		  4E-25		  ]
[ 103@0,  -44880000000000E5,	  1122E40,		  13,		  -4E-25	  ]
[ 104@0,  1122E40,		  1122E40,		  3,		  1		  ]
[ 105@0,  -11220000000000E30,	  1122E40,		  13,		  -1		  ]
[ 106@0,  22440000000000E9000,	  1122E40,		  13,		  2E8970	  ]
[ 107@0,  -2244E9010,		  1122E40,		  3,		  -2E8970	  ]
[ 108@0,  nil,			  -11220000000000E30,	  nil,		  nil		  ]
[ 109@0,  0,			  -11220000000000E30,	  0,		  0		  ]
[ 110@0,  1122E-30,		  -11220000000000E30,	  3,		  -1E-70	  ]
[ 111@0,  -11220000000000E-40,	  -11220000000000E30,	  13,		  1E-70		  ]
[ 112@0,  2244,			  -11220000000000E30,	  3,		  -2E-40	  ]
[ 113@0,  -22440000000000E-10,	  -11220000000000E30,	  13,		  2E-40		  ]
[ 114@0,  4488E15,		  -11220000000000E30,	  3,		  -4E-25	  ]
[ 115@0,  -44880000000000E5,	  -11220000000000E30,	  13,		  4E-25		  ]
[ 116@0,  1122E40,		  -11220000000000E30,	  3,		  -1		  ]
[ 117@0,  -11220000000000E30,	  -11220000000000E30,	  13,		  1		  ]
[ 118@0,  22440000000000E9000,	  -11220000000000E30,	  13,		  -2E8970	  ]
[ 119@0,  -2244E9010,		  -11220000000000E30,	  3,		  2E8970	  ]
[ 120@0,  nil,			  22440000000000E9000,	  nil,		  nil		  ]
[ 121@0,  0,			  22440000000000E9000,	  0,		  0		  ]
[ 122@0,  1122E-30,		  22440000000000E9000,	  3,		  5E-9041	  ]
[ 123@0,  -11220000000000E-40,	  22440000000000E9000,	  13,		  -5E-9041	  ]
[ 124@0,  2244,			  22440000000000E9000,	  3,		  1E-9010	  ]
[ 125@0,  -22440000000000E-10,	  22440000000000E9000,	  13,		  -1E-9010	  ]
[ 126@0,  4488E15,		  22440000000000E9000,	  3,		  2E-8995	  ]
[ 127@0,  -44880000000000E5,	  22440000000000E9000,	  13,		  -2E-8995	  ]
[ 128@0,  1122E40,		  22440000000000E9000,	  3,		  5E-8971	  ]
[ 129@0,  -11220000000000E30,	  22440000000000E9000,	  13,		  -5E-8971	  ]
[ 130@0,  22440000000000E9000,	  22440000000000E9000,	  13,		  1		  ]
[ 131@0,  -2244E9010,		  22440000000000E9000,	  3,		  -1		  ]
[ 132@0,  nil,			  -2244E9010,		  nil,		  nil		  ]
[ 133@0,  0,			  -2244E9010,		  0,		  0		  ]
[ 134@0,  1122E-30,		  -2244E9010,		  3,		  -5E-9041	  ]
[ 135@0,  -11220000000000E-40,	  -2244E9010,		  13,		  5E-9041	  ]
[ 136@0,  2244,			  -2244E9010,		  3,		  -1E-9010	  ]
[ 137@0,  -22440000000000E-10,	  -2244E9010,		  13,		  1E-9010	  ]
[ 138@0,  4488E15,		  -2244E9010,		  3,		  -2E-8995	  ]
[ 139@0,  -44880000000000E5,	  -2244E9010,		  13,		  2E-8995	  ]
[ 140@0,  1122E40,		  -2244E9010,		  3,		  -5E-8971	  ]
[ 141@0,  -11220000000000E30,	  -2244E9010,		  13,		  5E-8971	  ]
[ 142@0,  22440000000000E9000,	  -2244E9010,		  13,		  -1		  ]
[ 143@0,  -2244E9010,		  -2244E9010,		  3,		  1		  ]
#-----------------------------------------------------------------------------------------#
# BAT:	  decimal1		| decimal2		| +				  #
# (void)  (decimal)		| (decimal)		| (decimal)			  #
#-----------------------------------------------------------------------------------------#
[ 0@0,	  nil,			  nil,			  nil				  ]
[ 1@0,	  0,			  nil,			  nil				  ]
[ 2@0,	  1122E-30,		  nil,			  nil				  ]
[ 3@0,	  -11220000000000E-40,	  nil,			  nil				  ]
[ 4@0,	  2244,			  nil,			  nil				  ]
[ 5@0,	  -22440000000000E-10,	  nil,			  nil				  ]
[ 6@0,	  4488E15,		  nil,			  nil				  ]
[ 7@0,	  -44880000000000E5,	  nil,			  nil				  ]
[ 8@0,	  1122E40,		  nil,			  nil				  ]
[ 9@0,	  -11220000000000E30,	  nil,			  nil				  ]
[ 10@0,	  22440000000000E9000,	  nil,			  nil				  ]
[ 11@0,	  -2244E9010,		  nil,			  nil				  ]
[ 12@0,	  nil,			  0,			  nil				  ]
[ 13@0,	  0,			  0,			  0				  ]
[ 14@0,	  1122E-30,		  0,			  1122E-30			  ]
[ 15@0,	  -11220000000000E-40,	  0,			  -11220000000000E-40		  ]
[ 16@0,	  2244,			  0,			  2244				  ]
[ 17@0,	  -22440000000000E-10,	  0,			  -22440000000000E-10		  ]
[ 18@0,	  4488E15,		  0,			  4488E15			  ]
[ 19@0,	  -44880000000000E5,	  0,			  -44880000000000E5		  ]
[ 20@0,	  1122E40,		  0,			  1122E40			  ]
[ 21@0,	  -11220000000000E30,	  0,			  -11220000000000E30		  ]
[ 22@0,	  22440000000000E9000,	  0,			  22440000000000E9000		  ]
[ 23@0,	  -2244E9010,		  0,			  -2244E9010			  ]
[ 24@0,	  nil,			  1122E-30,		  nil				  ]
[ 25@0,	  0,			  1122E-30,		  1122E-30			  ]
[ 26@0,	  1122E-30,		  1122E-30,		  2244E-30			  ]
[ 27@0,	  -11220000000000E-40,	  1122E-30,		  0				  ]
[ 28@0,	  2244,			  1122E-30,		  2244(26 times 0)1122E-30	  ]
[ 29@0,	  -22440000000000E-10,	  1122E-30,		  -2243(26 times 9)8878E-30	  ]
[ 30@0,	  4488E15,		  1122E-30,		  4488(41 times 0)1122E-30	  ]
[ 31@0,	  -44880000000000E5,	  1122E-30,		  -4487(41 times 9)8878E-30	  ]
[ 32@0,	  1122E40,		  1122E-30,		  1122(66 times 0)1122E-30	  ]
[ 33@0,	  -11220000000000E30,	  1122E-30,		  -1121(66 times 9)8878E-30	  ]
[ 34@0,	  22440000000000E9000,	  1122E-30,		  2244(9036 times 0)1122E-30	  ]
[ 35@0,	  -2244E9010,		  1122E-30,		  -2243(9036 times 9)8878E-30	  ]
[ 36@0,	  nil,			  -11220000000000E-40,	  nil				  ]
[ 37@0,	  0,			  -11220000000000E-40,	  -11220000000000E-40		  ]
[ 38@0,	  1122E-30,		  -11220000000000E-40,	  0				  ]
[ 39@0,	  -11220000000000E-40,	  -11220000000000E-40,	  -2244E-30			  ]
[ 40@0,	  2244,			  -11220000000000E-40,	  2243(26 times 9)8878E-30	  ]
[ 41@0,	  -22440000000000E-10,	  -11220000000000E-40,	  -2244(26 times 0)1122E-30	  ]
[ 42@0,	  4488E15,		  -11220000000000E-40,	  4487(41 times 9)8878E-30	  ]
[ 43@0,	  -44880000000000E5,	  -11220000000000E-40,	  -4488(41 times 0)1122E-30	  ]
[ 44@0,	  1122E40,		  -11220000000000E-40,	  1121(66 times 9)8878E-30	  ]
[ 45@0,	  -11220000000000E30,	  -11220000000000E-40,	  -1122(66 times 0)1122E-30	  ]
[ 46@0,	  22440000000000E9000,	  -11220000000000E-40,	  2243(9036 times 9)8878E-30	  ]
[ 47@0,	  -2244E9010,		  -11220000000000E-40,	  -2244(9036 times 0)1122E-30	  ]
[ 48@0,	  nil,			  2244,			  nil				  ]
[ 49@0,	  0,			  2244,			  2244				  ]
[ 50@0,	  1122E-30,		  2244,			  2244(26 times 0)1122E-30	  ]
[ 51@0,	  -11220000000000E-40,	  2244,			  2243(26 times 9)8878E-30	  ]
[ 52@0,	  2244,			  2244,			  4488				  ]
[ 53@0,	  -22440000000000E-10,	  2244,			  0				  ]
[ 54@0,	  4488E15,		  2244,			  4488000000000002244		  ]
[ 55@0,	  -44880000000000E5,	  2244,			  -4487999999999997756		  ]
[ 56@0,	  1122E40,		  2244,			  1122(36 times 0)2244		  ]
[ 57@0,	  -11220000000000E30,	  2244,			  -1121(36 times 9)7756		  ]
[ 58@0,	  22440000000000E9000,	  2244,			  2244(9006 times 0)2244	  ]
[ 59@0,	  -2244E9010,		  2244,			  -2243(9006 times 9)7756	  ]
[ 60@0,	  nil,			  -22440000000000E-10,	  nil				  ]
[ 61@0,	  0,			  -22440000000000E-10,	  -22440000000000E-10		  ]
[ 62@0,	  1122E-30,		  -22440000000000E-10,	  -2243(26 times 9)8878E-30	  ]
[ 63@0,	  -11220000000000E-40,	  -22440000000000E-10,	  -2244(26 times 0)1122E-30	  ]
[ 64@0,	  2244,			  -22440000000000E-10,	  0				  ]
[ 65@0,	  -22440000000000E-10,	  -22440000000000E-10,	  -4488				  ]
[ 66@0,	  4488E15,		  -22440000000000E-10,	  4487999999999997756		  ]
[ 67@0,	  -44880000000000E5,	  -22440000000000E-10,	  -4488000000000002244		  ]
[ 68@0,	  1122E40,		  -22440000000000E-10,	  1121(36 times 9)7756		  ]
[ 69@0,	  -11220000000000E30,	  -22440000000000E-10,	  -1122(36 times 0)2244		  ]
[ 70@0,	  22440000000000E9000,	  -22440000000000E-10,	  2243(9006 times 9)7756	  ]
[ 71@0,	  -2244E9010,		  -22440000000000E-10,	  -2244(9006 times 0)2244	  ]
[ 72@0,	  nil,			  4488E15,		  nil				  ]
[ 73@0,	  0,			  4488E15,		  4488E15			  ]
[ 74@0,	  1122E-30,		  4488E15,		  4488(41 times 0)1122E-30	  ]
[ 75@0,	  -11220000000000E-40,	  4488E15,		  4487(41 times 9)8878E-30	  ]
[ 76@0,	  2244,			  4488E15,		  4488000000000002244		  ]
[ 77@0,	  -22440000000000E-10,	  4488E15,		  4487999999999997756		  ]
[ 78@0,	  4488E15,		  4488E15,		  8976E15			  ]
[ 79@0,	  -44880000000000E5,	  4488E15,		  0				  ]
[ 80@0,	  1122E40,		  4488E15,		  1122(21 times 0)4488E15	  ]
[ 81@0,	  -11220000000000E30,	  4488E15,		  -1121(21 times 9)5512E15	  ]
[ 82@0,	  22440000000000E9000,	  4488E15,		  2244(8991 times 0)4488E15	  ]
[ 83@0,	  -2244E9010,		  4488E15,		  -2243(8991 times 9)5512E15	  ]
[ 84@0,	  nil,			  -44880000000000E5,	  nil				  ]
[ 85@0,	  0,			  -44880000000000E5,	  -44880000000000E5		  ]
[ 86@0,	  1122E-30,		  -44880000000000E5,	  -4487(41 times 9)8878E-30	  ]
[ 87@0,	  -11220000000000E-40,	  -44880000000000E5,	  -4488(41 times 0)1122E-30	  ]
[ 88@0,	  2244,			  -44880000000000E5,	  -4487999999999997756		  ]
[ 89@0,	  -22440000000000E-10,	  -44880000000000E5,	  -4488000000000002244		  ]
[ 90@0,	  4488E15,		  -44880000000000E5,	  0				  ]
[ 91@0,	  -44880000000000E5,	  -44880000000000E5,	  -8976E15			  ]
[ 92@0,	  1122E40,		  -44880000000000E5,	  1121(21 times 9)5512E15	  ]
[ 93@0,	  -11220000000000E30,	  -44880000000000E5,	  -1122(21 times 0)4488E15	  ]
[ 94@0,	  22440000000000E9000,	  -44880000000000E5,	  2243(8991 times 9)5512E15	  ]
[ 95@0,	  -2244E9010,		  -44880000000000E5,	  -2244(8991 times 0)4488E15	  ]
[ 96@0,	  nil,			  1122E40,		  nil				  ]
[ 97@0,	  0,			  1122E40,		  1122E40			  ]
[ 98@0,	  1122E-30,		  1122E40,		  1122(66 times 0)1122E-30	  ]
[ 99@0,	  -11220000000000E-40,	  1122E40,		  1121(66 times 9)8878E-30	  ]
[ 100@0,  2244,			  1122E40,		  1122(36 times 0)2244		  ]
[ 101@0,  -22440000000000E-10,	  1122E40,		  1121(36 times 9)7756		  ]
[ 102@0,  4488E15,		  1122E40,		  1122(21 times 0)4488E15	  ]
[ 103@0,  -44880000000000E5,	  1122E40,		  1121(21 times 9)5512E15	  ]
[ 104@0,  1122E40,		  1122E40,		  2244E40			  ]
[ 105@0,  -11220000000000E30,	  1122E40,		  0				  ]
[ 106@0,  22440000000000E9000,	  1122E40,		  2244(8966 times 0)1122E40	  ]
[ 107@0,  -2244E9010,		  1122E40,		  -2243(8966 times 9)8878E40	  ]
[ 108@0,  nil,			  -11220000000000E30,	  nil				  ]
[ 109@0,  0,			  -11220000000000E30,	  -11220000000000E30		  ]
[ 110@0,  1122E-30,		  -11220000000000E30,	  -1121(66 times 9)8878E-30	  ]
[ 111@0,  -11220000000000E-40,	  -11220000000000E30,	  -1122(66 times 0)1122E-30	  ]
[ 112@0,  2244,			  -11220000000000E30,	  -1121(36 times 9)7756		  ]
[ 113@0,  -22440000000000E-10,	  -11220000000000E30,	  -1122(36 times 0)2244		  ]
[ 114@0,  4488E15,		  -11220000000000E30,	  -1121(21 times 9)5512E15	  ]
[ 115@0,  -44880000000000E5,	  -11220000000000E30,	  -1122(21 times 0)4488E15	  ]
[ 116@0,  1122E40,		  -11220000000000E30,	  0				  ]
[ 117@0,  -11220000000000E30,	  -11220000000000E30,	  -2244E40			  ]
[ 118@0,  22440000000000E9000,	  -11220000000000E30,	  2243(8966 times 9)8878E40	  ]
[ 119@0,  -2244E9010,		  -11220000000000E30,	  -2244(8966 times 0)1122E40	  ]
[ 120@0,  nil,			  22440000000000E9000,	  nil				  ]
[ 121@0,  0,			  22440000000000E9000,	  22440000000000E9000		  ]
[ 122@0,  1122E-30,		  22440000000000E9000,	  2244(9036 times 0)1122E-30	  ]
[ 123@0,  -11220000000000E-40,	  22440000000000E9000,	  2243(9036 times 9)8878E-30	  ]
[ 124@0,  2244,			  22440000000000E9000,	  2244(9006 times 0)2244	  ]
[ 125@0,  -22440000000000E-10,	  22440000000000E9000,	  2243(9006 times 9)7756	  ]
[ 126@0,  4488E15,		  22440000000000E9000,	  2244(8991 times 0)4488E15	  ]
[ 127@0,  -44880000000000E5,	  22440000000000E9000,	  2243(8991 times 9)5512E15	  ]
[ 128@0,  1122E40,		  22440000000000E9000,	  2244(8966 times 0)1122E40	  ]
[ 129@0,  -11220000000000E30,	  22440000000000E9000,	  2243(8966 times 9)8878E40	  ]
[ 130@0,  22440000000000E9000,	  22440000000000E9000,	  4488E9010			  ]
[ 131@0,  -2244E9010,		  22440000000000E9000,	  0				  ]
[ 132@0,  nil,			  -2244E9010,		  nil				  ]
[ 133@0,  0,			  -2244E9010,		  -2244E9010			  ]
[ 134@0,  1122E-30,		  -2244E9010,		  -2243(9036 times 9)8878E-30	  ]
[ 135@0,  -11220000000000E-40,	  -2244E9010,		  -2244(9036 times 0)1122E-30	  ]
[ 136@0,  2244,			  -2244E9010,		  -2243(9006 times 9)7756	  ]
[ 137@0,  -22440000000000E-10,	  -2244E9010,		  -2244(9006 times 0)2244	  ]
[ 138@0,  4488E15,		  -2244E9010,		  -2243(8991 times 9)5512E15	  ]
[ 139@0,  -44880000000000E5,	  -2244E9010,		  -2244(8991 times 0)4488E15	  ]
[ 140@0,  1122E40,		  -2244E9010,		  -2243(8966 times 9)8878E40	  ]
[ 141@0,  -11220000000000E30,	  -2244E9010,		  -2244(8966 times 0)1122E40	  ]
[ 142@0,  22440000000000E9000,	  -2244E9010,		  0				  ]
[ 143@0,  -2244E9010,		  -2244E9010,		  -4488E9010			  ]
#-----------------------------------------------------------------------------------------#
# BAT:	  decimal1		| decimal2		| -				  #
# (void)  (decimal)		| (decimal)		| (decimal)			  #
#-----------------------------------------------------------------------------------------#
[ 0@0,	  nil,			  nil,			  nil				  ]
[ 1@0,	  0,			  nil,			  nil				  ]
[ 2@0,	  1122E-30,		  nil,			  nil				  ]
[ 3@0,	  -11220000000000E-40,	  nil,			  nil				  ]
[ 4@0,	  2244,			  nil,			  nil				  ]
[ 5@0,	  -22440000000000E-10,	  nil,			  nil				  ]
[ 6@0,	  4488E15,		  nil,			  nil				  ]
[ 7@0,	  -44880000000000E5,	  nil,			  nil				  ]
[ 8@0,	  1122E40,		  nil,			  nil				  ]
[ 9@0,	  -11220000000000E30,	  nil,			  nil				  ]
[ 10@0,	  22440000000000E9000,	  nil,			  nil				  ]
[ 11@0,	  -2244E9010,		  nil,			  nil				  ]
[ 12@0,	  nil,			  0,			  nil				  ]
[ 13@0,	  0,			  0,			  0				  ]
[ 14@0,	  1122E-30,		  0,			  1122E-30			  ]
[ 15@0,	  -11220000000000E-40,	  0,			  -11220000000000E-40		  ]
[ 16@0,	  2244,			  0,			  2244				  ]
[ 17@0,	  -22440000000000E-10,	  0,			  -22440000000000E-10		  ]
[ 18@0,	  4488E15,		  0,			  4488E15			  ]
[ 19@0,	  -44880000000000E5,	  0,			  -44880000000000E5		  ]
[ 20@0,	  1122E40,		  0,			  1122E40			  ]
[ 21@0,	  -11220000000000E30,	  0,			  -11220000000000E30		  ]
[ 22@0,	  22440000000000E9000,	  0,			  22440000000000E9000		  ]
[ 23@0,	  -2244E9010,		  0,			  -2244E9010			  ]
[ 24@0,	  nil,			  1122E-30,		  nil				  ]
[ 25@0,	  0,			  1122E-30,		  -1122E-30			  ]
[ 26@0,	  1122E-30,		  1122E-30,		  0				  ]
[ 27@0,	  -11220000000000E-40,	  1122E-30,		  -2244E-30			  ]
[ 28@0,	  2244,			  1122E-30,		  2243(26 times 9)8878E-30	  ]
[ 29@0,	  -22440000000000E-10,	  1122E-30,		  -2244(26 times 0)1122E-30	  ]
[ 30@0,	  4488E15,		  1122E-30,		  4487(41 times 9)8878E-30	  ]
[ 31@0,	  -44880000000000E5,	  1122E-30,		  -4488(41 times 0)1122E-30	  ]
[ 32@0,	  1122E40,		  1122E-30,		  1121(66 times 9)8878E-30	  ]
[ 33@0,	  -11220000000000E30,	  1122E-30,		  -1122(66 times 0)1122E-30	  ]
[ 34@0,	  22440000000000E9000,	  1122E-30,		  2243(9036 times 9)8878E-30	  ]
[ 35@0,	  -2244E9010,		  1122E-30,		  -2244(9036 times 0)1122E-30	  ]
[ 36@0,	  nil,			  -11220000000000E-40,	  nil				  ]
[ 37@0,	  0,			  -11220000000000E-40,	  11220000000000E-40		  ]
[ 38@0,	  1122E-30,		  -11220000000000E-40,	  2244E-30			  ]
[ 39@0,	  -11220000000000E-40,	  -11220000000000E-40,	  0				  ]
[ 40@0,	  2244,			  -11220000000000E-40,	  2244(26 times 0)1122E-30	  ]
[ 41@0,	  -22440000000000E-10,	  -11220000000000E-40,	  -2243(26 times 9)8878E-30	  ]
[ 42@0,	  4488E15,		  -11220000000000E-40,	  4488(41 times 0)1122E-30	  ]
[ 43@0,	  -44880000000000E5,	  -11220000000000E-40,	  -4487(41 times 9)8878E-30	  ]
[ 44@0,	  1122E40,		  -11220000000000E-40,	  1122(66 times 0)1122E-30	  ]
[ 45@0,	  -11220000000000E30,	  -11220000000000E-40,	  -1121(66 times 9)8878E-30	  ]
[ 46@0,	  22440000000000E9000,	  -11220000000000E-40,	  2244(9036 times 0)1122E-30	  ]
[ 47@0,	  -2244E9010,		  -11220000000000E-40,	  -2243(9036 times 9)8878E-30	  ]
[ 48@0,	  nil,			  2244,			  nil				  ]
[ 49@0,	  0,			  2244,			  -2244				  ]
[ 50@0,	  1122E-30,		  2244,			  -2243(26 times 9)8878E-30	  ]
[ 51@0,	  -11220000000000E-40,	  2244,			  -2244(26 times 0)1122E-30	  ]
[ 52@0,	  2244,			  2244,			  0				  ]
[ 53@0,	  -22440000000000E-10,	  2244,			  -4488				  ]
[ 54@0,	  4488E15,		  2244,			  4487999999999997756		  ]
[ 55@0,	  -44880000000000E5,	  2244,			  -4488000000000002244		  ]
[ 56@0,	  1122E40,		  2244,			  1121(36 times 9)7756		  ]
[ 57@0,	  -11220000000000E30,	  2244,			  -1122(36 times 0)2244		  ]
[ 58@0,	  22440000000000E9000,	  2244,			  2243(9006 times 9)7756	  ]
[ 59@0,	  -2244E9010,		  2244,			  -2244(9006 times 0)2244	  ]
[ 60@0,	  nil,			  -22440000000000E-10,	  nil				  ]
[ 61@0,	  0,			  -22440000000000E-10,	  22440000000000E-10		  ]
[ 62@0,	  1122E-30,		  -22440000000000E-10,	  2244(26 times 0)1122E-30	  ]
[ 63@0,	  -11220000000000E-40,	  -22440000000000E-10,	  2243(26 times 9)8878E-30	  ]
[ 64@0,	  2244,			  -22440000000000E-10,	  4488				  ]
[ 65@0,	  -22440000000000E-10,	  -22440000000000E-10,	  0				  ]
[ 66@0,	  4488E15,		  -22440000000000E-10,	  4488000000000002244		  ]
[ 67@0,	  -44880000000000E5,	  -22440000000000E-10,	  -4487999999999997756		  ]
[ 68@0,	  1122E40,		  -22440000000000E-10,	  1122(36 times 0)2244		  ]
[ 69@0,	  -11220000000000E30,	  -22440000000000E-10,	  -1121(36 times 9)7756		  ]
[ 70@0,	  22440000000000E9000,	  -22440000000000E-10,	  2244(9006 times 0)2244	  ]
[ 71@0,	  -2244E9010,		  -22440000000000E-10,	  -2243(9006 times 9)7756	  ]
[ 72@0,	  nil,			  4488E15,		  nil				  ]
[ 73@0,	  0,			  4488E15,		  -4488E15			  ]
[ 74@0,	  1122E-30,		  4488E15,		  -4487(41 times 9)8878E-30	  ]
[ 75@0,	  -11220000000000E-40,	  4488E15,		  -4488(41 times 0)1122E-30	  ]
[ 76@0,	  2244,			  4488E15,		  -4487999999999997756		  ]
[ 77@0,	  -22440000000000E-10,	  4488E15,		  -4488000000000002244		  ]
[ 78@0,	  4488E15,		  4488E15,		  0				  ]
[ 79@0,	  -44880000000000E5,	  4488E15,		  -8976E15			  ]
[ 80@0,	  1122E40,		  4488E15,		  1121(21 times 9)5512E15	  ]
[ 81@0,	  -11220000000000E30,	  4488E15,		  -1122(21 times 0)4488E15	  ]
[ 82@0,	  22440000000000E9000,	  4488E15,		  2243(8991 times 9)5512E15	  ]
[ 83@0,	  -2244E9010,		  4488E15,		  -2244(8991 times 0)4488E15	  ]
[ 84@0,	  nil,			  -44880000000000E5,	  nil				  ]
[ 85@0,	  0,			  -44880000000000E5,	  44880000000000E5		  ]
[ 86@0,	  1122E-30,		  -44880000000000E5,	  4488(41 times 0)1122E-30	  ]
[ 87@0,	  -11220000000000E-40,	  -44880000000000E5,	  4487(41 times 9)8878E-30	  ]
[ 88@0,	  2244,			  -44880000000000E5,	  4488000000000002244		  ]
[ 89@0,	  -22440000000000E-10,	  -44880000000000E5,	  4487999999999997756		  ]
[ 90@0,	  4488E15,		  -44880000000000E5,	  8976E15			  ]
[ 91@0,	  -44880000000000E5,	  -44880000000000E5,	  0				  ]
[ 92@0,	  1122E40,		  -44880000000000E5,	  1122(21 times 0)4488E15	  ]
[ 93@0,	  -11220000000000E30,	  -44880000000000E5,	  -1121(21 times 9)5512E15	  ]
[ 94@0,	  22440000000000E9000,	  -44880000000000E5,	  2244(8991 times 0)4488E15	  ]
[ 95@0,	  -2244E9010,		  -44880000000000E5,	  -2243(8991 times 9)5512E15	  ]
[ 96@0,	  nil,			  1122E40,		  nil				  ]
[ 97@0,	  0,			  1122E40,		  -1122E40			  ]
[ 98@0,	  1122E-30,		  1122E40,		  -1121(66 times 9)8878E-30	  ]
[ 99@0,	  -11220000000000E-40,	  1122E40,		  -1122(66 times 0)1122E-30	  ]
[ 100@0,  2244,			  1122E40,		  -1121(36 times 9)7756		  ]
[ 101@0,  -22440000000000E-10,	  1122E40,		  -1122(36 times 0)2244		  ]
[ 102@0,  4488E15,		  1122E40,		  -1121(21 times 9)5512E15	  ]
[ 103@0,  -44880000000000E5,	  1122E40,		  -1122(21 times 0)4488E15	  ]
[ 104@0,  1122E40,		  1122E40,		  0				  ]
[ 105@0,  -11220000000000E30,	  1122E40,		  -2244E40			  ]
[ 106@0,  22440000000000E9000,	  1122E40,		  2243(8966 times 9)8878E40	  ]
[ 107@0,  -2244E9010,		  1122E40,		  -2244(8966 times 0)1122E40	  ]
[ 108@0,  nil,			  -11220000000000E30,	  nil				  ]
[ 109@0,  0,			  -11220000000000E30,	  11220000000000E30		  ]
[ 110@0,  1122E-30,		  -11220000000000E30,	  1122(66 times 0)1122E-30	  ]
[ 111@0,  -11220000000000E-40,	  -11220000000000E30,	  1121(66 times 9)8878E-30	  ]
[ 112@0,  2244,			  -11220000000000E30,	  1122(36 times 0)2244		  ]
[ 113@0,  -22440000000000E-10,	  -11220000000000E30,	  1121(36 times 9)7756		  ]
[ 114@0,  4488E15,		  -11220000000000E30,	  1122(21 times 0)4488E15	  ]
[ 115@0,  -44880000000000E5,	  -11220000000000E30,	  1121(21 times 9)5512E15	  ]
[ 116@0,  1122E40,		  -11220000000000E30,	  2244E40			  ]
[ 117@0,  -11220000000000E30,	  -11220000000000E30,	  0				  ]
[ 118@0,  22440000000000E9000,	  -11220000000000E30,	  2244(8966 times 0)1122E40	  ]
[ 119@0,  -2244E9010,		  -11220000000000E30,	  -2243(8966 times 9)8878E40	  ]
[ 120@0,  nil,			  22440000000000E9000,	  nil				  ]
[ 121@0,  0,			  22440000000000E9000,	  -22440000000000E9000		  ]
[ 122@0,  1122E-30,		  22440000000000E9000,	  -2243(9036 times 9)8878E-30	  ]
[ 123@0,  -11220000000000E-40,	  22440000000000E9000,	  -2244(9036 times 0)1122E-30	  ]
[ 124@0,  2244,			  22440000000000E9000,	  -2243(9006 times 9)7756	  ]
[ 125@0,  -22440000000000E-10,	  22440000000000E9000,	  -2244(9006 times 0)2244	  ]
[ 126@0,  4488E15,		  22440000000000E9000,	  -2243(8991 times 9)5512E15	  ]
[ 127@0,  -44880000000000E5,	  22440000000000E9000,	  -2244(8991 times 0)4488E15	  ]
[ 128@0,  1122E40,		  22440000000000E9000,	  -2243(8966 times 9)8878E40	  ]
[ 129@0,  -11220000000000E30,	  22440000000000E9000,	  -2244(8966 times 0)1122E40	  ]
[ 130@0,  22440000000000E9000,	  22440000000000E9000,	  0				  ]
[ 131@0,  -2244E9010,		  22440000000000E9000,	  -4488E9010			  ]
[ 132@0,  nil,			  -2244E9010,		  nil				  ]
[ 133@0,  0,			  -2244E9010,		  2244E9010			  ]
[ 134@0,  1122E-30,		  -2244E9010,		  2244(9036 times 0)1122E-30	  ]
[ 135@0,  -11220000000000E-40,	  -2244E9010,		  2243(9036 times 9)8878E-30	  ]
[ 136@0,  2244,			  -2244E9010,		  2244(9006 times 0)2244	  ]
[ 137@0,  -22440000000000E-10,	  -2244E9010,		  2243(9006 times 9)7756	  ]
[ 138@0,  4488E15,		  -2244E9010,		  2244(8991 times 0)4488E15	  ]
[ 139@0,  -44880000000000E5,	  -2244E9010,		  2243(8991 times 9)5512E15	  ]
[ 140@0,  1122E40,		  -2244E9010,		  2244(8966 times 0)1122E40	  ]
[ 141@0,  -11220000000000E30,	  -2244E9010,		  2243(8966 times 9)8878E40	  ]
[ 142@0,  22440000000000E9000,	  -2244E9010,		  4488E9010			  ]
[ 143@0,  -2244E9010,		  -2244E9010,		  0				  ]
#-----------------------------------------------------------------#
# BAT:	  decimal1		| decimal2		| =	  #
# (void)  (decimal)		| (decimal)		| (bit)	  #
#-----------------------------------------------------------------#
[ 0@0,	  nil,			  nil,			  nil	  ]
[ 1@0,	  0,			  nil,			  nil	  ]
[ 2@0,	  1122E-30,		  nil,			  nil	  ]
[ 3@0,	  -11220000000000E-40,	  nil,			  nil	  ]
[ 4@0,	  2244,			  nil,			  nil	  ]
[ 5@0,	  -22440000000000E-10,	  nil,			  nil	  ]
[ 6@0,	  4488E15,		  nil,			  nil	  ]
[ 7@0,	  -44880000000000E5,	  nil,			  nil	  ]
[ 8@0,	  1122E40,		  nil,			  nil	  ]
[ 9@0,	  -11220000000000E30,	  nil,			  nil	  ]
[ 10@0,	  22440000000000E9000,	  nil,			  nil	  ]
[ 11@0,	  -2244E9010,		  nil,			  nil	  ]
[ 12@0,	  nil,			  0,			  nil	  ]
[ 13@0,	  0,			  0,			  true	  ]
[ 14@0,	  1122E-30,		  0,			  false	  ]
[ 15@0,	  -11220000000000E-40,	  0,			  false	  ]
[ 16@0,	  2244,			  0,			  false	  ]
[ 17@0,	  -22440000000000E-10,	  0,			  false	  ]
[ 18@0,	  4488E15,		  0,			  false	  ]
[ 19@0,	  -44880000000000E5,	  0,			  false	  ]
[ 20@0,	  1122E40,		  0,			  false	  ]
[ 21@0,	  -11220000000000E30,	  0,			  false	  ]
[ 22@0,	  22440000000000E9000,	  0,			  false	  ]
[ 23@0,	  -2244E9010,		  0,			  false	  ]
[ 24@0,	  nil,			  1122E-30,		  nil	  ]
[ 25@0,	  0,			  1122E-30,		  false	  ]
[ 26@0,	  1122E-30,		  1122E-30,		  true	  ]
[ 27@0,	  -11220000000000E-40,	  1122E-30,		  false	  ]
[ 28@0,	  2244,			  1122E-30,		  false	  ]
[ 29@0,	  -22440000000000E-10,	  1122E-30,		  false	  ]
[ 30@0,	  4488E15,		  1122E-30,		  false	  ]
[ 31@0,	  -44880000000000E5,	  1122E-30,		  false	  ]
[ 32@0,	  1122E40,		  1122E-30,		  false	  ]
[ 33@0,	  -11220000000000E30,	  1122E-30,		  false	  ]
[ 34@0,	  22440000000000E9000,	  1122E-30,		  false	  ]
[ 35@0,	  -2244E9010,		  1122E-30,		  false	  ]
[ 36@0,	  nil,			  -11220000000000E-40,	  nil	  ]
[ 37@0,	  0,			  -11220000000000E-40,	  false	  ]
[ 38@0,	  1122E-30,		  -11220000000000E-40,	  false	  ]
[ 39@0,	  -11220000000000E-40,	  -11220000000000E-40,	  true	  ]
[ 40@0,	  2244,			  -11220000000000E-40,	  false	  ]
[ 41@0,	  -22440000000000E-10,	  -11220000000000E-40,	  false	  ]
[ 42@0,	  4488E15,		  -11220000000000E-40,	  false	  ]
[ 43@0,	  -44880000000000E5,	  -11220000000000E-40,	  false	  ]
[ 44@0,	  1122E40,		  -11220000000000E-40,	  false	  ]
[ 45@0,	  -11220000000000E30,	  -11220000000000E-40,	  false	  ]
[ 46@0,	  22440000000000E9000,	  -11220000000000E-40,	  false	  ]
[ 47@0,	  -2244E9010,		  -11220000000000E-40,	  false	  ]
[ 48@0,	  nil,			  2244,			  nil	  ]
[ 49@0,	  0,			  2244,			  false	  ]
[ 50@0,	  1122E-30,		  2244,			  false	  ]
[ 51@0,	  -11220000000000E-40,	  2244,			  false	  ]
[ 52@0,	  2244,			  2244,			  true	  ]
[ 53@0,	  -22440000000000E-10,	  2244,			  false	  ]
[ 54@0,	  4488E15,		  2244,			  false	  ]
[ 55@0,	  -44880000000000E5,	  2244,			  false	  ]
[ 56@0,	  1122E40,		  2244,			  false	  ]
[ 57@0,	  -11220000000000E30,	  2244,			  false	  ]
[ 58@0,	  22440000000000E9000,	  2244,			  false	  ]
[ 59@0,	  -2244E9010,		  2244,			  false	  ]
[ 60@0,	  nil,			  -22440000000000E-10,	  nil	  ]
[ 61@0,	  0,			  -22440000000000E-10,	  false	  ]
[ 62@0,	  1122E-30,		  -22440000000000E-10,	  false	  ]
[ 63@0,	  -11220000000000E-40,	  -22440000000000E-10,	  false	  ]
[ 64@0,	  2244,			  -22440000000000E-10,	  false	  ]
[ 65@0,	  -22440000000000E-10,	  -22440000000000E-10,	  true	  ]
[ 66@0,	  4488E15,		  -22440000000000E-10,	  false	  ]
[ 67@0,	  -44880000000000E5,	  -22440000000000E-10,	  false	  ]
[ 68@0,	  1122E40,		  -22440000000000E-10,	  false	  ]
[ 69@0,	  -11220000000000E30,	  -22440000000000E-10,	  false	  ]
[ 70@0,	  22440000000000E9000,	  -22440000000000E-10,	  false	  ]
[ 71@0,	  -2244E9010,		  -22440000000000E-10,	  false	  ]
[ 72@0,	  nil,			  4488E15,		  nil	  ]
[ 73@0,	  0,			  4488E15,		  false	  ]
[ 74@0,	  1122E-30,		  4488E15,		  false	  ]
[ 75@0,	  -11220000000000E-40,	  4488E15,		  false	  ]
[ 76@0,	  2244,			  4488E15,		  false	  ]
[ 77@0,	  -22440000000000E-10,	  4488E15,		  false	  ]
[ 78@0,	  4488E15,		  4488E15,		  true	  ]
[ 79@0,	  -44880000000000E5,	  4488E15,		  false	  ]
[ 80@0,	  1122E40,		  4488E15,		  false	  ]
[ 81@0,	  -11220000000000E30,	  4488E15,		  false	  ]
[ 82@0,	  22440000000000E9000,	  4488E15,		  false	  ]
[ 83@0,	  -2244E9010,		  4488E15,		  false	  ]
[ 84@0,	  nil,			  -44880000000000E5,	  nil	  ]
[ 85@0,	  0,			  -44880000000000E5,	  false	  ]
[ 86@0,	  1122E-30,		  -44880000000000E5,	  false	  ]
[ 87@0,	  -11220000000000E-40,	  -44880000000000E5,	  false	  ]
[ 88@0,	  2244,			  -44880000000000E5,	  false	  ]
[ 89@0,	  -22440000000000E-10,	  -44880000000000E5,	  false	  ]
[ 90@0,	  4488E15,		  -44880000000000E5,	  false	  ]
[ 91@0,	  -44880000000000E5,	  -44880000000000E5,	  true	  ]
[ 92@0,	  1122E40,		  -44880000000000E5,	  false	  ]
[ 93@0,	  -11220000000000E30,	  -44880000000000E5,	  false	  ]
[ 94@0,	  22440000000000E9000,	  -44880000000000E5,	  false	  ]
[ 95@0,	  -2244E9010,		  -44880000000000E5,	  false	  ]
[ 96@0,	  nil,			  1122E40,		  nil	  ]
[ 97@0,	  0,			  1122E40,		  false	  ]
[ 98@0,	  1122E-30,		  1122E40,		  false	  ]
[ 99@0,	  -11220000000000E-40,	  1122E40,		  false	  ]
[ 100@0,  2244,			  1122E40,		  false	  ]
[ 101@0,  -22440000000000E-10,	  1122E40,		  false	  ]
[ 102@0,  4488E15,		  1122E40,		  false	  ]
[ 103@0,  -44880000000000E5,	  1122E40,		  false	  ]
[ 104@0,  1122E40,		  1122E40,		  true	  ]
[ 105@0,  -11220000000000E30,	  1122E40,		  false	  ]
[ 106@0,  22440000000000E9000,	  1122E40,		  false	  ]
[ 107@0,  -2244E9010,		  1122E40,		  false	  ]
[ 108@0,  nil,			  -11220000000000E30,	  nil	  ]
[ 109@0,  0,			  -11220000000000E30,	  false	  ]
[ 110@0,  1122E-30,		  -11220000000000E30,	  false	  ]
[ 111@0,  -11220000000000E-40,	  -11220000000000E30,	  false	  ]
[ 112@0,  2244,			  -11220000000000E30,	  false	  ]
[ 113@0,  -22440000000000E-10,	  -11220000000000E30,	  false	  ]
[ 114@0,  4488E15,		  -11220000000000E30,	  false	  ]
[ 115@0,  -44880000000000E5,	  -11220000000000E30,	  false	  ]
[ 116@0,  1122E40,		  -11220000000000E30,	  false	  ]
[ 117@0,  -11220000000000E30,	  -11220000000000E30,	  true	  ]
[ 118@0,  22440000000000E9000,	  -11220000000000E30,	  false	  ]
[ 119@0,  -2244E9010,		  -11220000000000E30,	  false	  ]
[ 120@0,  nil,			  22440000000000E9000,	  nil	  ]
[ 121@0,  0,			  22440000000000E9000,	  false	  ]
[ 122@0,  1122E-30,		  22440000000000E9000,	  false	  ]
[ 123@0,  -11220000000000E-40,	  22440000000000E9000,	  false	  ]
[ 124@0,  2244,			  22440000000000E9000,	  false	  ]
[ 125@0,  -22440000000000E-10,	  22440000000000E9000,	  false	  ]
[ 126@0,  4488E15,		  22440000000000E9000,	  false	  ]
[ 127@0,  -44880000000000E5,	  22440000000000E9000,	  false	  ]
[ 128@0,  1122E40,		  22440000000000E9000,	  false	  ]
[ 129@0,  -11220000000000E30,	  22440000000000E9000,	  false	  ]
[ 130@0,  22440000000000E9000,	  22440000000000E9000,	  true	  ]
[ 131@0,  -2244E9010,		  22440000000000E9000,	  false	  ]
[ 132@0,  nil,			  -2244E9010,		  nil	  ]
[ 133@0,  0,			  -2244E9010,		  false	  ]
[ 134@0,  1122E-30,		  -2244E9010,		  false	  ]
[ 135@0,  -11220000000000E-40,	  -2244E9010,		  false	  ]
[ 136@0,  2244,			  -2244E9010,		  false	  ]
[ 137@0,  -22440000000000E-10,	  -2244E9010,		  false	  ]
[ 138@0,  4488E15,		  -2244E9010,		  false	  ]
[ 139@0,  -44880000000000E5,	  -2244E9010,		  false	  ]
[ 140@0,  1122E40,		  -2244E9010,		  false	  ]
[ 141@0,  -11220000000000E30,	  -2244E9010,		  false	  ]
[ 142@0,  22440000000000E9000,	  -2244E9010,		  false	  ]
[ 143@0,  -2244E9010,		  -2244E9010,		  true	  ]
#-----------------------------------------------------------------#
# BAT:	  decimal1		| decimal2		| !=	  #
# (void)  (decimal)		| (decimal)		| (bit)	  #
#-----------------------------------------------------------------#
[ 0@0,	  nil,			  nil,			  nil	  ]
[ 1@0,	  0,			  nil,			  nil	  ]
[ 2@0,	  1122E-30,		  nil,			  nil	  ]
[ 3@0,	  -11220000000000E-40,	  nil,			  nil	  ]
[ 4@0,	  2244,			  nil,			  nil	  ]
[ 5@0,	  -22440000000000E-10,	  nil,			  nil	  ]
[ 6@0,	  4488E15,		  nil,			  nil	  ]
[ 7@0,	  -44880000000000E5,	  nil,			  nil	  ]
[ 8@0,	  1122E40,		  nil,			  nil	  ]
[ 9@0,	  -11220000000000E30,	  nil,			  nil	  ]
[ 10@0,	  22440000000000E9000,	  nil,			  nil	  ]
[ 11@0,	  -2244E9010,		  nil,			  nil	  ]
[ 12@0,	  nil,			  0,			  nil	  ]
[ 13@0,	  0,			  0,			  false	  ]
[ 14@0,	  1122E-30,		  0,			  true	  ]
[ 15@0,	  -11220000000000E-40,	  0,			  true	  ]
[ 16@0,	  2244,			  0,			  true	  ]
[ 17@0,	  -22440000000000E-10,	  0,			  true	  ]
[ 18@0,	  4488E15,		  0,			  true	  ]
[ 19@0,	  -44880000000000E5,	  0,			  true	  ]
[ 20@0,	  1122E40,		  0,			  true	  ]
[ 21@0,	  -11220000000000E30,	  0,			  true	  ]
[ 22@0,	  22440000000000E9000,	  0,			  true	  ]
[ 23@0,	  -2244E9010,		  0,			  true	  ]
[ 24@0,	  nil,			  1122E-30,		  nil	  ]
[ 25@0,	  0,			  1122E-30,		  true	  ]
[ 26@0,	  1122E-30,		  1122E-30,		  false	  ]
[ 27@0,	  -11220000000000E-40,	  1122E-30,		  true	  ]
[ 28@0,	  2244,			  1122E-30,		  true	  ]
[ 29@0,	  -22440000000000E-10,	  1122E-30,		  true	  ]
[ 30@0,	  4488E15,		  1122E-30,		  true	  ]
[ 31@0,	  -44880000000000E5,	  1122E-30,		  true	  ]
[ 32@0,	  1122E40,		  1122E-30,		  true	  ]
[ 33@0,	  -11220000000000E30,	  1122E-30,		  true	  ]
[ 34@0,	  22440000000000E9000,	  1122E-30,		  true	  ]
[ 35@0,	  -2244E9010,		  1122E-30,		  true	  ]
[ 36@0,	  nil,			  -11220000000000E-40,	  nil	  ]
[ 37@0,	  0,			  -11220000000000E-40,	  true	  ]
[ 38@0,	  1122E-30,		  -11220000000000E-40,	  true	  ]
[ 39@0,	  -11220000000000E-40,	  -11220000000000E-40,	  false	  ]
[ 40@0,	  2244,			  -11220000000000E-40,	  true	  ]
[ 41@0,	  -22440000000000E-10,	  -11220000000000E-40,	  true	  ]
[ 42@0,	  4488E15,		  -11220000000000E-40,	  true	  ]
[ 43@0,	  -44880000000000E5,	  -11220000000000E-40,	  true	  ]
[ 44@0,	  1122E40,		  -11220000000000E-40,	  true	  ]
[ 45@0,	  -11220000000000E30,	  -11220000000000E-40,	  true	  ]
[ 46@0,	  22440000000000E9000,	  -11220000000000E-40,	  true	  ]
[ 47@0,	  -2244E9010,		  -11220000000000E-40,	  true	  ]
[ 48@0,	  nil,			  2244,			  nil	  ]
[ 49@0,	  0,			  2244,			  true	  ]
[ 50@0,	  1122E-30,		  2244,			  true	  ]
[ 51@0,	  -11220000000000E-40,	  2244,			  true	  ]
[ 52@0,	  2244,			  2244,			  false	  ]
[ 53@0,	  -22440000000000E-10,	  2244,			  true	  ]
[ 54@0,	  4488E15,		  2244,			  true	  ]
[ 55@0,	  -44880000000000E5,	  2244,			  true	  ]
[ 56@0,	  1122E40,		  2244,			  true	  ]
[ 57@0,	  -11220000000000E30,	  2244,			  true	  ]
[ 58@0,	  22440000000000E9000,	  2244,			  true	  ]
[ 59@0,	  -2244E9010,		  2244,			  true	  ]
[ 60@0,	  nil,			  -22440000000000E-10,	  nil	  ]
[ 61@0,	  0,			  -22440000000000E-10,	  true	  ]
[ 62@0,	  1122E-30,		  -22440000000000E-10,	  true	  ]
[ 63@0,	  -11220000000000E-40,	  -22440000000000E-10,	  true	  ]
[ 64@0,	  2244,			  -22440000000000E-10,	  true	  ]
[ 65@0,	  -22440000000000E-10,	  -22440000000000E-10,	  false	  ]
[ 66@0,	  4488E15,		  -22440000000000E-10,	  true	  ]
[ 67@0,	  -44880000000000E5,	  -22440000000000E-10,	  true	  ]
[ 68@0,	  1122E40,		  -22440000000000E-10,	  true	  ]
[ 69@0,	  -11220000000000E30,	  -22440000000000E-10,	  true	  ]
[ 70@0,	  22440000000000E9000,	  -22440000000000E-10,	  true	  ]
[ 71@0,	  -2244E9010,		  -22440000000000E-10,	  true	  ]
[ 72@0,	  nil,			  4488E15,		  nil	  ]
[ 73@0,	  0,			  4488E15,		  true	  ]
[ 74@0,	  1122E-30,		  4488E15,		  true	  ]
[ 75@0,	  -11220000000000E-40,	  4488E15,		  true	  ]
[ 76@0,	  2244,			  4488E15,		  true	  ]
[ 77@0,	  -22440000000000E-10,	  4488E15,		  true	  ]
[ 78@0,	  4488E15,		  4488E15,		  false	  ]
[ 79@0,	  -44880000000000E5,	  4488E15,		  true	  ]
[ 80@0,	  1122E40,		  4488E15,		  true	  ]
[ 81@0,	  -11220000000000E30,	  4488E15,		  true	  ]
[ 82@0,	  22440000000000E9000,	  4488E15,		  true	  ]
[ 83@0,	  -2244E9010,		  4488E15,		  true	  ]
[ 84@0,	  nil,			  -44880000000000E5,	  nil	  ]
[ 85@0,	  0,			  -44880000000000E5,	  true	  ]
[ 86@0,	  1122E-30,		  -44880000000000E5,	  true	  ]
[ 87@0,	  -11220000000000E-40,	  -44880000000000E5,	  true	  ]
[ 88@0,	  2244,			  -44880000000000E5,	  true	  ]
[ 89@0,	  -22440000000000E-10,	  -44880000000000E5,	  true	  ]
[ 90@0,	  4488E15,		  -44880000000000E5,	  true	  ]
[ 91@0,	  -44880000000000E5,	  -44880000000000E5,	  false	  ]
[ 92@0,	  1122E40,		  -44880000000000E5,	  true	  ]
[ 93@0,	  -11220000000000E30,	  -44880000000000E5,	  true	  ]
[ 94@0,	  22440000000000E9000,	  -44880000000000E5,	  true	  ]
[ 95@0,	  -2244E9010,		  -44880000000000E5,	  true	  ]
[ 96@0,	  nil,			  1122E40,		  nil	  ]
[ 97@0,	  0,			  1122E40,		  true	  ]
[ 98@0,	  1122E-30,		  1122E40,		  true	  ]
[ 99@0,	  -11220000000000E-40,	  1122E40,		  true	  ]
[ 100@0,  2244,			  1122E40,		  true	  ]
[ 101@0,  -22440000000000E-10,	  1122E40,		  true	  ]
[ 102@0,  4488E15,		  1122E40,		  true	  ]
[ 103@0,  -44880000000000E5,	  1122E40,		  true	  ]
[ 104@0,  1122E40,		  1122E40,		  false	  ]
[ 105@0,  -11220000000000E30,	  1122E40,		  true	  ]
[ 106@0,  22440000000000E9000,	  1122E40,		  true	  ]
[ 107@0,  -2244E9010,		  1122E40,		  true	  ]
[ 108@0,  nil,			  -11220000000000E30,	  nil	  ]
[ 109@0,  0,			  -11220000000000E30,	  true	  ]
[ 110@0,  1122E-30,		  -11220000000000E30,	  true	  ]
[ 111@0,  -11220000000000E-40,	  -11220000000000E30,	  true	  ]
[ 112@0,  2244,			  -11220000000000E30,	  true	  ]
[ 113@0,  -22440000000000E-10,	  -11220000000000E30,	  true	  ]
[ 114@0,  4488E15,		  -11220000000000E30,	  true	  ]
[ 115@0,  -44880000000000E5,	  -11220000000000E30,	  true	  ]
[ 116@0,  1122E40,		  -11220000000000E30,	  true	  ]
[ 117@0,  -11220000000000E30,	  -11220000000000E30,	  false	  ]
[ 118@0,  22440000000000E9000,	  -11220000000000E30,	  true	  ]
[ 119@0,  -2244E9010,		  -11220000000000E30,	  true	  ]
[ 120@0,  nil,			  22440000000000E9000,	  nil	  ]
[ 121@0,  0,			  22440000000000E9000,	  true	  ]
[ 122@0,  1122E-30,		  22440000000000E9000,	  true	  ]
[ 123@0,  -11220000000000E-40,	  22440000000000E9000,	  true	  ]
[ 124@0,  2244,			  22440000000000E9000,	  true	  ]
[ 125@0,  -22440000000000E-10,	  22440000000000E9000,	  true	  ]
[ 126@0,  4488E15,		  22440000000000E9000,	  true	  ]
[ 127@0,  -44880000000000E5,	  22440000000000E9000,	  true	  ]
[ 128@0,  1122E40,		  22440000000000E9000,	  true	  ]
[ 129@0,  -11220000000000E30,	  22440000000000E9000,	  true	  ]
[ 130@0,  22440000000000E9000,	  22440000000000E9000,	  false	  ]
[ 131@0,  -2244E9010,		  22440000000000E9000,	  true	  ]
[ 132@0,  nil,			  -2244E9010,		  nil	  ]
[ 133@0,  0,			  -2244E9010,		  true	  ]
[ 134@0,  1122E-30,		  -2244E9010,		  true	  ]
[ 135@0,  -11220000000000E-40,	  -2244E9010,		  true	  ]
[ 136@0,  2244,			  -2244E9010,		  true	  ]
[ 137@0,  -22440000000000E-10,	  -2244E9010,		  true	  ]
[ 138@0,  4488E15,		  -2244E9010,		  true	  ]
[ 139@0,  -44880000000000E5,	  -2244E9010,		  true	  ]
[ 140@0,  1122E40,		  -2244E9010,		  true	  ]
[ 141@0,  -11220000000000E30,	  -2244E9010,		  true	  ]
[ 142@0,  22440000000000E9000,	  -2244E9010,		  true	  ]
[ 143@0,  -2244E9010,		  -2244E9010,		  false	  ]
#-----------------------------------------------------------------#
# BAT:	  decimal1		| decimal2		| <	  #
# (void)  (decimal)		| (decimal)		| (bit)	  #
#-----------------------------------------------------------------#
[ 0@0,	  nil,			  nil,			  nil	  ]
[ 1@0,	  0,			  nil,			  nil	  ]
[ 2@0,	  1122E-30,		  nil,			  nil	  ]
[ 3@0,	  -11220000000000E-40,	  nil,			  nil	  ]
[ 4@0,	  2244,			  nil,			  nil	  ]
[ 5@0,	  -22440000000000E-10,	  nil,			  nil	  ]
[ 6@0,	  4488E15,		  nil,			  nil	  ]
[ 7@0,	  -44880000000000E5,	  nil,			  nil	  ]
[ 8@0,	  1122E40,		  nil,			  nil	  ]
[ 9@0,	  -11220000000000E30,	  nil,			  nil	  ]
[ 10@0,	  22440000000000E9000,	  nil,			  nil	  ]
[ 11@0,	  -2244E9010,		  nil,			  nil	  ]
[ 12@0,	  nil,			  0,			  nil	  ]
[ 13@0,	  0,			  0,			  false	  ]
[ 14@0,	  1122E-30,		  0,			  false	  ]
[ 15@0,	  -11220000000000E-40,	  0,			  true	  ]
[ 16@0,	  2244,			  0,			  false	  ]
[ 17@0,	  -22440000000000E-10,	  0,			  true	  ]
[ 18@0,	  4488E15,		  0,			  false	  ]
[ 19@0,	  -44880000000000E5,	  0,			  true	  ]
[ 20@0,	  1122E40,		  0,			  false	  ]
[ 21@0,	  -11220000000000E30,	  0,			  true	  ]
[ 22@0,	  22440000000000E9000,	  0,			  false	  ]
[ 23@0,	  -2244E9010,		  0,			  true	  ]
[ 24@0,	  nil,			  1122E-30,		  nil	  ]
[ 25@0,	  0,			  1122E-30,		  true	  ]
[ 26@0,	  1122E-30,		  1122E-30,		  false	  ]
[ 27@0,	  -11220000000000E-40,	  1122E-30,		  true	  ]
[ 28@0,	  2244,			  1122E-30,		  false	  ]
[ 29@0,	  -22440000000000E-10,	  1122E-30,		  true	  ]
[ 30@0,	  4488E15,		  1122E-30,		  false	  ]
[ 31@0,	  -44880000000000E5,	  1122E-30,		  true	  ]
[ 32@0,	  1122E40,		  1122E-30,		  false	  ]
[ 33@0,	  -11220000000000E30,	  1122E-30,		  true	  ]
[ 34@0,	  22440000000000E9000,	  1122E-30,		  false	  ]
[ 35@0,	  -2244E9010,		  1122E-30,		  true	  ]
[ 36@0,	  nil,			  -11220000000000E-40,	  nil	  ]
[ 37@0,	  0,			  -11220000000000E-40,	  false	  ]
[ 38@0,	  1122E-30,		  -11220000000000E-40,	  false	  ]
[ 39@0,	  -11220000000000E-40,	  -11220000000000E-40,	  false	  ]
[ 40@0,	  2244,			  -11220000000000E-40,	  false	  ]
[ 41@0,	  -22440000000000E-10,	  -11220000000000E-40,	  true	  ]
[ 42@0,	  4488E15,		  -11220000000000E-40,	  false	  ]
[ 43@0,	  -44880000000000E5,	  -11220000000000E-40,	  true	  ]
[ 44@0,	  1122E40,		  -11220000000000E-40,	  false	  ]
[ 45@0,	  -11220000000000E30,	  -11220000000000E-40,	  true	  ]
[ 46@0,	  22440000000000E9000,	  -11220000000000E-40,	  false	  ]
[ 47@0,	  -2244E9010,		  -11220000000000E-40,	  true	  ]
[ 48@0,	  nil,			  2244,			  nil	  ]
[ 49@0,	  0,			  2244,			  true	  ]
[ 50@0,	  1122E-30,		  2244,			  true	  ]
[ 51@0,	  -11220000000000E-40,	  2244,			  true	  ]
[ 52@0,	  2244,			  2244,			  false	  ]
[ 53@0,	  -22440000000000E-10,	  2244,			  true	  ]
[ 54@0,	  4488E15,		  2244,			  false	  ]
[ 55@0,	  -44880000000000E5,	  2244,			  true	  ]
[ 56@0,	  1122E40,		  2244,			  false	  ]
[ 57@0,	  -11220000000000E30,	  2244,			  true	  ]
[ 58@0,	  22440000000000E9000,	  2244,			  false	  ]
[ 59@0,	  -2244E9010,		  2244,			  true	  ]
[ 60@0,	  nil,			  -22440000000000E-10,	  nil	  ]
[ 61@0,	  0,			  -22440000000000E-10,	  false	  ]
[ 62@0,	  1122E-30,		  -22440000000000E-10,	  false	  ]
[ 63@0,	  -11220000000000E-40,	  -22440000000000E-10,	  false	  ]
[ 64@0,	  2244,			  -22440000000000E-10,	  false	  ]
[ 65@0,	  -22440000000000E-10,	  -22440000000000E-10,	  false	  ]
[ 66@0,	  4488E15,		  -22440000000000E-10,	  false	  ]
[ 67@0,	  -44880000000000E5,	  -22440000000000E-10,	  true	  ]
[ 68@0,	  1122E40,		  -22440000000000E-10,	  false	  ]
[ 69@0,	  -11220000000000E30,	  -22440000000000E-10,	  true	  ]
[ 70@0,	  22440000000000E9000,	  -22440000000000E-10,	  false	  ]
[ 71@0,	  -2244E9010,		  -22440000000000E-10,	  true	  ]
[ 72@0,	  nil,			  4488E15,		  nil	  ]
[ 73@0,	  0,			  4488E15,		  true	  ]
[ 74@0,	  1122E-30,		  4488E15,		  true	  ]
[ 75@0,	  -11220000000000E-40,	  4488E15,		  true	  ]
[ 76@0,	  2244,			  4488E15,		  true	  ]
[ 77@0,	  -22440000000000E-10,	  4488E15,		  true	  ]
[ 78@0,	  4488E15,		  4488E15,		  false	  ]
[ 79@0,	  -44880000000000E5,	  4488E15,		  true	  ]
[ 80@0,	  1122E40,		  4488E15,		  false	  ]
[ 81@0,	  -11220000000000E30,	  4488E15,		  true	  ]
[ 82@0,	  22440000000000E9000,	  4488E15,		  false	  ]
[ 83@0,	  -2244E9010,		  4488E15,		  true	  ]
[ 84@0,	  nil,			  -44880000000000E5,	  nil	  ]
[ 85@0,	  0,			  -44880000000000E5,	  false	  ]
[ 86@0,	  1122E-30,		  -44880000000000E5,	  false	  ]
[ 87@0,	  -11220000000000E-40,	  -44880000000000E5,	  false	  ]
[ 88@0,	  2244,			  -44880000000000E5,	  false	  ]
[ 89@0,	  -22440000000000E-10,	  -44880000000000E5,	  false	  ]
[ 90@0,	  4488E15,		  -44880000000000E5,	  false	  ]
[ 91@0,	  -44880000000000E5,	  -44880000000000E5,	  false	  ]
[ 92@0,	  1122E40,		  -44880000000000E5,	  false	  ]
[ 93@0,	  -11220000000000E30,	  -44880000000000E5,	  true	  ]
[ 94@0,	  22440000000000E9000,	  -44880000000000E5,	  false	  ]
[ 95@0,	  -2244E9010,		  -44880000000000E5,	  true	  ]
[ 96@0,	  nil,			  1122E40,		  nil	  ]
[ 97@0,	  0,			  1122E40,		  true	  ]
[ 98@0,	  1122E-30,		  1122E40,		  true	  ]
[ 99@0,	  -11220000000000E-40,	  1122E40,		  true	  ]
[ 100@0,  2244,			  1122E40,		  true	  ]
[ 101@0,  -22440000000000E-10,	  1122E40,		  true	  ]
[ 102@0,  4488E15,		  1122E40,		  true	  ]
[ 103@0,  -44880000000000E5,	  1122E40,		  true	  ]
[ 104@0,  1122E40,		  1122E40,		  false	  ]
[ 105@0,  -11220000000000E30,	  1122E40,		  true	  ]
[ 106@0,  22440000000000E9000,	  1122E40,		  false	  ]
[ 107@0,  -2244E9010,		  1122E40,		  true	  ]
[ 108@0,  nil,			  -11220000000000E30,	  nil	  ]
[ 109@0,  0,			  -11220000000000E30,	  false	  ]
[ 110@0,  1122E-30,		  -11220000000000E30,	  false	  ]
[ 111@0,  -11220000000000E-40,	  -11220000000000E30,	  false	  ]
[ 112@0,  2244,			  -11220000000000E30,	  false	  ]
[ 113@0,  -22440000000000E-10,	  -11220000000000E30,	  false	  ]
[ 114@0,  4488E15,		  -11220000000000E30,	  false	  ]
[ 115@0,  -44880000000000E5,	  -11220000000000E30,	  false	  ]
[ 116@0,  1122E40,		  -11220000000000E30,	  false	  ]
[ 117@0,  -11220000000000E30,	  -11220000000000E30,	  false	  ]
[ 118@0,  22440000000000E9000,	  -11220000000000E30,	  false	  ]
[ 119@0,  -2244E9010,		  -11220000000000E30,	  true	  ]
[ 120@0,  nil,			  22440000000000E9000,	  nil	  ]
[ 121@0,  0,			  22440000000000E9000,	  true	  ]
[ 122@0,  1122E-30,		  22440000000000E9000,	  true	  ]
[ 123@0,  -11220000000000E-40,	  22440000000000E9000,	  true	  ]
[ 124@0,  2244,			  22440000000000E9000,	  true	  ]
[ 125@0,  -22440000000000E-10,	  22440000000000E9000,	  true	  ]
[ 126@0,  4488E15,		  22440000000000E9000,	  true	  ]
[ 127@0,  -44880000000000E5,	  22440000000000E9000,	  true	  ]
[ 128@0,  1122E40,		  22440000000000E9000,	  true	  ]
[ 129@0,  -11220000000000E30,	  22440000000000E9000,	  true	  ]
[ 130@0,  22440000000000E9000,	  22440000000000E9000,	  false	  ]
[ 131@0,  -2244E9010,		  22440000000000E9000,	  true	  ]
[ 132@0,  nil,			  -2244E9010,		  nil	  ]
[ 133@0,  0,			  -2244E9010,		  false	  ]
[ 134@0,  1122E-30,		  -2244E9010,		  false	  ]
[ 135@0,  -11220000000000E-40,	  -2244E9010,		  false	  ]
[ 136@0,  2244,			  -2244E9010,		  false	  ]
[ 137@0,  -22440000000000E-10,	  -2244E9010,		  false	  ]
[ 138@0,  4488E15,		  -2244E9010,		  false	  ]
[ 139@0,  -44880000000000E5,	  -2244E9010,		  false	  ]
[ 140@0,  1122E40,		  -2244E9010,		  false	  ]
[ 141@0,  -11220000000000E30,	  -2244E9010,		  false	  ]
[ 142@0,  22440000000000E9000,	  -2244E9010,		  false	  ]
[ 143@0,  -2244E9010,		  -2244E9010,		  false	  ]
#-----------------------------------------------------------------#
# BAT:	  decimal1		| decimal2		| <=	  #
# (void)  (decimal)		| (decimal)		| (bit)	  #
#-----------------------------------------------------------------#
[ 0@0,	  nil,			  nil,			  nil	  ]
[ 1@0,	  0,			  nil,			  nil	  ]
[ 2@0,	  1122E-30,		  nil,			  nil	  ]
[ 3@0,	  -11220000000000E-40,	  nil,			  nil	  ]
[ 4@0,	  2244,			  nil,			  nil	  ]
[ 5@0,	  -22440000000000E-10,	  nil,			  nil	  ]
[ 6@0,	  4488E15,		  nil,			  nil	  ]
[ 7@0,	  -44880000000000E5,	  nil,			  nil	  ]
[ 8@0,	  1122E40,		  nil,			  nil	  ]
[ 9@0,	  -11220000000000E30,	  nil,			  nil	  ]
[ 10@0,	  22440000000000E9000,	  nil,			  nil	  ]
[ 11@0,	  -2244E9010,		  nil,			  nil	  ]
[ 12@0,	  nil,			  0,			  nil	  ]
[ 13@0,	  0,			  0,			  true	  ]
[ 14@0,	  1122E-30,		  0,			  false	  ]
[ 15@0,	  -11220000000000E-40,	  0,			  true	  ]
[ 16@0,	  2244,			  0,			  false	  ]
[ 17@0,	  -22440000000000E-10,	  0,			  true	  ]
[ 18@0,	  4488E15,		  0,			  false	  ]
[ 19@0,	  -44880000000000E5,	  0,			  true	  ]
[ 20@0,	  1122E40,		  0,			  false	  ]
[ 21@0,	  -11220000000000E30,	  0,			  true	  ]
[ 22@0,	  22440000000000E9000,	  0,			  false	  ]
[ 23@0,	  -2244E9010,		  0,			  true	  ]
[ 24@0,	  nil,			  1122E-30,		  nil	  ]
[ 25@0,	  0,			  1122E-30,		  true	  ]
[ 26@0,	  1122E-30,		  1122E-30,		  true	  ]
[ 27@0,	  -11220000000000E-40,	  1122E-30,		  true	  ]
[ 28@0,	  2244,			  1122E-30,		  false	  ]
[ 29@0,	  -22440000000000E-10,	  1122E-30,		  true	  ]
[ 30@0,	  4488E15,		  1122E-30,		  false	  ]
[ 31@0,	  -44880000000000E5,	  1122E-30,		  true	  ]
[ 32@0,	  1122E40,		  1122E-30,		  false	  ]
[ 33@0,	  -11220000000000E30,	  1122E-30,		  true	  ]
[ 34@0,	  22440000000000E9000,	  1122E-30,		  false	  ]
[ 35@0,	  -2244E9010,		  1122E-30,		  true	  ]
[ 36@0,	  nil,			  -11220000000000E-40,	  nil	  ]
[ 37@0,	  0,			  -11220000000000E-40,	  false	  ]
[ 38@0,	  1122E-30,		  -11220000000000E-40,	  false	  ]
[ 39@0,	  -11220000000000E-40,	  -11220000000000E-40,	  true	  ]
[ 40@0,	  2244,			  -11220000000000E-40,	  false	  ]
[ 41@0,	  -22440000000000E-10,	  -11220000000000E-40,	  true	  ]
[ 42@0,	  4488E15,		  -11220000000000E-40,	  false	  ]
[ 43@0,	  -44880000000000E5,	  -11220000000000E-40,	  true	  ]
[ 44@0,	  1122E40,		  -11220000000000E-40,	  false	  ]
[ 45@0,	  -11220000000000E30,	  -11220000000000E-40,	  true	  ]
[ 46@0,	  22440000000000E9000,	  -11220000000000E-40,	  false	  ]
[ 47@0,	  -2244E9010,		  -11220000000000E-40,	  true	  ]
[ 48@0,	  nil,			  2244,			  nil	  ]
[ 49@0,	  0,			  2244,			  true	  ]
[ 50@0,	  1122E-30,		  2244,			  true	  ]
[ 51@0,	  -11220000000000E-40,	  2244,			  true	  ]
[ 52@0,	  2244,			  2244,			  true	  ]
[ 53@0,	  -22440000000000E-10,	  2244,			  true	  ]
[ 54@0,	  4488E15,		  2244,			  false	  ]
[ 55@0,	  -44880000000000E5,	  2244,			  true	  ]
[ 56@0,	  1122E40,		  2244,			  false	  ]
[ 57@0,	  -11220000000000E30,	  2244,			  true	  ]
[ 58@0,	  22440000000000E9000,	  2244,			  false	  ]
[ 59@0,	  -2244E9010,		  2244,			  true	  ]
[ 60@0,	  nil,			  -22440000000000E-10,	  nil	  ]
[ 61@0,	  0,			  -22440000000000E-10,	  false	  ]
[ 62@0,	  1122E-30,		  -22440000000000E-10,	  false	  ]
[ 63@0,	  -11220000000000E-40,	  -22440000000000E-10,	  false	  ]
[ 64@0,	  2244,			  -22440000000000E-10,	  false	  ]
[ 65@0,	  -22440000000000E-10,	  -22440000000000E-10,	  true	  ]
[ 66@0,	  4488E15,		  -22440000000000E-10,	  false	  ]
[ 67@0,	  -44880000000000E5,	  -22440000000000E-10,	  true	  ]
[ 68@0,	  1122E40,		  -22440000000000E-10,	  false	  ]
[ 69@0,	  -11220000000000E30,	  -22440000000000E-10,	  true	  ]
[ 70@0,	  22440000000000E9000,	  -22440000000000E-10,	  false	  ]
[ 71@0,	  -2244E9010,		  -22440000000000E-10,	  true	  ]
[ 72@0,	  nil,			  4488E15,		  nil	  ]
[ 73@0,	  0,			  4488E15,		  true	  ]
[ 74@0,	  1122E-30,		  4488E15,		  true	  ]
[ 75@0,	  -11220000000000E-40,	  4488E15,		  true	  ]
[ 76@0,	  2244,			  4488E15,		  true	  ]
[ 77@0,	  -22440000000000E-10,	  4488E15,		  true	  ]
[ 78@0,	  4488E15,		  4488E15,		  true	  ]
[ 79@0,	  -44880000000000E5,	  4488E15,		  true	  ]
[ 80@0,	  1122E40,		  4488E15,		  false	  ]
[ 81@0,	  -11220000000000E30,	  4488E15,		  true	  ]
[ 82@0,	  22440000000000E9000,	  4488E15,		  false	  ]
[ 83@0,	  -2244E9010,		  4488E15,		  true	  ]
[ 84@0,	  nil,			  -44880000000000E5,	  nil	  ]
[ 85@0,	  0,			  -44880000000000E5,	  false	  ]
[ 86@0,	  1122E-30,		  -44880000000000E5,	  false	  ]
[ 87@0,	  -11220000000000E-40,	  -44880000000000E5,	  false	  ]
[ 88@0,	  2244,			  -44880000000000E5,	  false	  ]
[ 89@0,	  -22440000000000E-10,	  -44880000000000E5,	  false	  ]
[ 90@0,	  4488E15,		  -44880000000000E5,	  false	  ]
[ 91@0,	  -44880000000000E5,	  -44880000000000E5,	  true	  ]
[ 92@0,	  1122E40,		  -44880000000000E5,	  false	  ]
[ 93@0,	  -11220000000000E30,	  -44880000000000E5,	  true	  ]
[ 94@0,	  22440000000000E9000,	  -44880000000000E5,	  false	  ]
[ 95@0,	  -2244E9010,		  -44880000000000E5,	  true	  ]
[ 96@0,	  nil,			  1122E40,		  nil	  ]
[ 97@0,	  0,			  1122E40,		  true	  ]
[ 98@0,	  1122E-30,		  1122E40,		  true	  ]
[ 99@0,	  -11220000000000E-40,	  1122E40,		  true	  ]
[ 100@0,  2244,			  1122E40,		  true	  ]
[ 101@0,  -22440000000000E-10,	  1122E40,		  true	  ]
[ 102@0,  4488E15,		  1122E40,		  true	  ]
[ 103@0,  -44880000000000E5,	  1122E40,		  true	  ]
[ 104@0,  1122E40,		  1122E40,		  true	  ]
[ 105@0,  -11220000000000E30,	  1122E40,		  true	  ]
[ 106@0,  22440000000000E9000,	  1122E40,		  false	  ]
[ 107@0,  -2244E9010,		  1122E40,		  true	  ]
[ 108@0,  nil,			  -11220000000000E30,	  nil	  ]
[ 109@0,  0,			  -11220000000000E30,	  false	  ]
[ 110@0,  1122E-30,		  -11220000000000E30,	  false	  ]
[ 111@0,  -11220000000000E-40,	  -11220000000000E30,	  false	  ]
[ 112@0,  2244,			  -11220000000000E30,	  false	  ]
[ 113@0,  -22440000000000E-10,	  -11220000000000E30,	  false	  ]
[ 114@0,  4488E15,		  -11220000000000E30,	  false	  ]
[ 115@0,  -44880000000000E5,	  -11220000000000E30,	  false	  ]
[ 116@0,  1122E40,		  -11220000000000E30,	  false	  ]
[ 117@0,  -11220000000000E30,	  -11220000000000E30,	  true	  ]
[ 118@0,  22440000000000E9000,	  -11220000000000E30,	  false	  ]
[ 119@0,  -2244E9010,		  -11220000000000E30,	  true	  ]
[ 120@0,  nil,			  22440000000000E9000,	  nil	  ]
[ 121@0,  0,			  22440000000000E9000,	  true	  ]
[ 122@0,  1122E-30,		  22440000000000E9000,	  true	  ]
[ 123@0,  -11220000000000E-40,	  22440000000000E9000,	  true	  ]
[ 124@0,  2244,			  22440000000000E9000,	  true	  ]
[ 125@0,  -22440000000000E-10,	  22440000000000E9000,	  true	  ]
[ 126@0,  4488E15,		  22440000000000E9000,	  true	  ]
[ 127@0,  -44880000000000E5,	  22440000000000E9000,	  true	  ]
[ 128@0,  1122E40,		  22440000000000E9000,	  true	  ]
[ 129@0,  -11220000000000E30,	  22440000000000E9000,	  true	  ]
[ 130@0,  22440000000000E9000,	  22440000000000E9000,	  true	  ]
[ 131@0,  -2244E9010,		  22440000000000E9000,	  true	  ]
[ 132@0,  nil,			  -2244E9010,		  nil	  ]
[ 133@0,  0,			  -2244E9010,		  false	  ]
[ 134@0,  1122E-30,		  -2244E9010,		  false	  ]
[ 135@0,  -11220000000000E-40,	  -2244E9010,		  false	  ]
[ 136@0,  2244,			  -2244E9010,		  false	  ]
[ 137@0,  -22440000000000E-10,	  -2244E9010,		  false	  ]
[ 138@0,  4488E15,		  -2244E9010,		  false	  ]
[ 139@0,  -44880000000000E5,	  -2244E9010,		  false	  ]
[ 140@0,  1122E40,		  -2244E9010,		  false	  ]
[ 141@0,  -11220000000000E30,	  -2244E9010,		  false	  ]
[ 142@0,  22440000000000E9000,	  -2244E9010,		  false	  ]
[ 143@0,  -2244E9010,		  -2244E9010,		  true	  ]
#-----------------------------------------------------------------#
# BAT:	  decimal1		| decimal2		| >	  #
# (void)  (decimal)		| (decimal)		| (bit)	  #
#-----------------------------------------------------------------#
[ 0@0,	  nil,			  nil,			  nil	  ]
[ 1@0,	  0,			  nil,			  nil	  ]
[ 2@0,	  1122E-30,		  nil,			  nil	  ]
[ 3@0,	  -11220000000000E-40,	  nil,			  nil	  ]
[ 4@0,	  2244,			  nil,			  nil	  ]
[ 5@0,	  -22440000000000E-10,	  nil,			  nil	  ]
[ 6@0,	  4488E15,		  nil,			  nil	  ]
[ 7@0,	  -44880000000000E5,	  nil,			  nil	  ]
[ 8@0,	  1122E40,		  nil,			  nil	  ]
[ 9@0,	  -11220000000000E30,	  nil,			  nil	  ]
[ 10@0,	  22440000000000E9000,	  nil,			  nil	  ]
[ 11@0,	  -2244E9010,		  nil,			  nil	  ]
[ 12@0,	  nil,			  0,			  nil	  ]
[ 13@0,	  0,			  0,			  false	  ]
[ 14@0,	  1122E-30,		  0,			  true	  ]
[ 15@0,	  -11220000000000E-40,	  0,			  false	  ]
[ 16@0,	  2244,			  0,			  true	  ]
[ 17@0,	  -22440000000000E-10,	  0,			  false	  ]
[ 18@0,	  4488E15,		  0,			  true	  ]
[ 19@0,	  -44880000000000E5,	  0,			  false	  ]
[ 20@0,	  1122E40,		  0,			  true	  ]
[ 21@0,	  -11220000000000E30,	  0,			  false	  ]
[ 22@0,	  22440000000000E9000,	  0,			  true	  ]
[ 23@0,	  -2244E9010,		  0,			  false	  ]
[ 24@0,	  nil,			  1122E-30,		  nil	  ]
[ 25@0,	  0,			  1122E-30,		  false	  ]
[ 26@0,	  1122E-30,		  1122E-30,		  false	  ]
[ 27@0,	  -11220000000000E-40,	  1122E-30,		  false	  ]
[ 28@0,	  2244,			  1122E-30,		  true	  ]
[ 29@0,	  -22440000000000E-10,	  1122E-30,		  false	  ]
[ 30@0,	  4488E15,		  1122E-30,		  true	  ]
[ 31@0,	  -44880000000000E5,	  1122E-30,		  false	  ]
[ 32@0,	  1122E40,		  1122E-30,		  true	  ]
[ 33@0,	  -11220000000000E30,	  1122E-30,		  false	  ]
[ 34@0,	  22440000000000E9000,	  1122E-30,		  true	  ]
[ 35@0,	  -2244E9010,		  1122E-30,		  false	  ]
[ 36@0,	  nil,			  -11220000000000E-40,	  nil	  ]
[ 37@0,	  0,			  -11220000000000E-40,	  true	  ]
[ 38@0,	  1122E-30,		  -11220000000000E-40,	  true	  ]
[ 39@0,	  -11220000000000E-40,	  -11220000000000E-40,	  false	  ]
[ 40@0,	  2244,			  -11220000000000E-40,	  true	  ]
[ 41@0,	  -22440000000000E-10,	  -11220000000000E-40,	  false	  ]
[ 42@0,	  4488E15,		  -11220000000000E-40,	  true	  ]
[ 43@0,	  -44880000000000E5,	  -11220000000000E-40,	  false	  ]
[ 44@0,	  1122E40,		  -11220000000000E-40,	  true	  ]
[ 45@0,	  -11220000000000E30,	  -11220000000000E-40,	  false	  ]
[ 46@0,	  22440000000000E9000,	  -11220000000000E-40,	  true	  ]
[ 47@0,	  -2244E9010,		  -11220000000000E-40,	  false	  ]
[ 48@0,	  nil,			  2244,			  nil	  ]
[ 49@0,	  0,			  2244,			  false	  ]
[ 50@0,	  1122E-30,		  2244,			  false	  ]
[ 51@0,	  -11220000000000E-40,	  2244,			  false	  ]
[ 52@0,	  2244,			  2244,			  false	  ]
[ 53@0,	  -22440000000000E-10,	  2244,			  false	  ]
[ 54@0,	  4488E15,		  2244,			  true	  ]
[ 55@0,	  -44880000000000E5,	  2244,			  false	  ]
[ 56@0,	  1122E40,		  2244,			  true	  ]
[ 57@0,	  -11220000000000E30,	  2244,			  false	  ]
[ 58@0,	  22440000000000E9000,	  2244,			  true	  ]
[ 59@0,	  -2244E9010,		  2244,			  false	  ]
[ 60@0,	  nil,			  -22440000000000E-10,	  nil	  ]
[ 61@0,	  0,			  -22440000000000E-10,	  true	  ]
[ 62@0,	  1122E-30,		  -22440000000000E-10,	  true	  ]
[ 63@0,	  -11220000000000E-40,	  -22440000000000E-10,	  true	  ]
[ 64@0,	  2244,			  -22440000000000E-10,	  true	  ]
[ 65@0,	  -22440000000000E-10,	  -22440000000000E-10,	  false	  ]
[ 66@0,	  4488E15,		  -22440000000000E-10,	  true	  ]
[ 67@0,	  -44880000000000E5,	  -22440000000000E-10,	  false	  ]
[ 68@0,	  1122E40,		  -22440000000000E-10,	  true	  ]
[ 69@0,	  -11220000000000E30,	  -22440000000000E-10,	  false	  ]
[ 70@0,	  22440000000000E9000,	  -22440000000000E-10,	  true	  ]
[ 71@0,	  -2244E9010,		  -22440000000000E-10,	  false	  ]
[ 72@0,	  nil,			  4488E15,		  nil	  ]
[ 73@0,	  0,			  4488E15,		  false	  ]
[ 74@0,	  1122E-30,		  4488E15,		  false	  ]
[ 75@0,	  -11220000000000E-40,	  4488E15,		  false	  ]
[ 76@0,	  2244,			  4488E15,		  false	  ]
[ 77@0,	  -22440000000000E-10,	  4488E15,		  false	  ]
[ 78@0,	  4488E15,		  4488E15,		  false	  ]
[ 79@0,	  -44880000000000E5,	  4488E15,		  false	  ]
[ 80@0,	  1122E40,		  4488E15,		  true	  ]
[ 81@0,	  -11220000000000E30,	  4488E15,		  false	  ]
[ 82@0,	  22440000000000E9000,	  4488E15,		  true	  ]
[ 83@0,	  -2244E9010,		  4488E15,		  false	  ]
[ 84@0,	  nil,			  -44880000000000E5,	  nil	  ]
[ 85@0,	  0,			  -44880000000000E5,	  true	  ]
[ 86@0,	  1122E-30,		  -44880000000000E5,	  true	  ]
[ 87@0,	  -11220000000000E-40,	  -44880000000000E5,	  true	  ]
[ 88@0,	  2244,			  -44880000000000E5,	  true	  ]
[ 89@0,	  -22440000000000E-10,	  -44880000000000E5,	  true	  ]
[ 90@0,	  4488E15,		  -44880000000000E5,	  true	  ]
[ 91@0,	  -44880000000000E5,	  -44880000000000E5,	  false	  ]
[ 92@0,	  1122E40,		  -44880000000000E5,	  true	  ]
[ 93@0,	  -11220000000000E30,	  -44880000000000E5,	  false	  ]
[ 94@0,	  22440000000000E9000,	  -44880000000000E5,	  true	  ]
[ 95@0,	  -2244E9010,		  -44880000000000E5,	  false	  ]
[ 96@0,	  nil,			  1122E40,		  nil	  ]
[ 97@0,	  0,			  1122E40,		  false	  ]
[ 98@0,	  1122E-30,		  1122E40,		  false	  ]
[ 99@0,	  -11220000000000E-40,	  1122E40,		  false	  ]
[ 100@0,  2244,			  1122E40,		  false	  ]
[ 101@0,  -22440000000000E-10,	  1122E40,		  false	  ]
[ 102@0,  4488E15,		  1122E40,		  false	  ]
[ 103@0,  -44880000000000E5,	  1122E40,		  false	  ]
[ 104@0,  1122E40,		  1122E40,		  false	  ]
[ 105@0,  -11220000000000E30,	  1122E40,		  false	  ]
[ 106@0,  22440000000000E9000,	  1122E40,		  true	  ]
[ 107@0,  -2244E9010,		  1122E40,		  false	  ]
[ 108@0,  nil,			  -11220000000000E30,	  nil	  ]
[ 109@0,  0,			  -11220000000000E30,	  true	  ]
[ 110@0,  1122E-30,		  -11220000000000E30,	  true	  ]
[ 111@0,  -11220000000000E-40,	  -11220000000000E30,	  true	  ]
[ 112@0,  2244,			  -11220000000000E30,	  true	  ]
[ 113@0,  -22440000000000E-10,	  -11220000000000E30,	  true	  ]
[ 114@0,  4488E15,		  -11220000000000E30,	  true	  ]
[ 115@0,  -44880000000000E5,	  -11220000000000E30,	  true	  ]
[ 116@0,  1122E40,		  -11220000000000E30,	  true	  ]
[ 117@0,  -11220000000000E30,	  -11220000000000E30,	  false	  ]
[ 118@0,  22440000000000E9000,	  -11220000000000E30,	  true	  ]
[ 119@0,  -2244E9010,		  -11220000000000E30,	  false	  ]
[ 120@0,  nil,			  22440000000000E9000,	  nil	  ]
[ 121@0,  0,			  22440000000000E9000,	  false	  ]
[ 122@0,  1122E-30,		  22440000000000E9000,	  false	  ]
[ 123@0,  -11220000000000E-40,	  22440000000000E9000,	  false	  ]
[ 124@0,  2244,			  22440000000000E9000,	  false	  ]
[ 125@0,  -22440000000000E-10,	  22440000000000E9000,	  false	  ]
[ 126@0,  4488E15,		  22440000000000E9000,	  false	  ]
[ 127@0,  -44880000000000E5,	  22440000000000E9000,	  false	  ]
[ 128@0,  1122E40,		  22440000000000E9000,	  false	  ]
[ 129@0,  -11220000000000E30,	  22440000000000E9000,	  false	  ]
[ 130@0,  22440000000000E9000,	  22440000000000E9000,	  false	  ]
[ 131@0,  -2244E9010,		  22440000000000E9000,	  false	  ]
[ 132@0,  nil,			  -2244E9010,		  nil	  ]
[ 133@0,  0,			  -2244E9010,		  true	  ]
[ 134@0,  1122E-30,		  -2244E9010,		  true	  ]
[ 135@0,  -11220000000000E-40,	  -2244E9010,		  true	  ]
[ 136@0,  2244,			  -2244E9010,		  true	  ]
[ 137@0,  -22440000000000E-10,	  -2244E9010,		  true	  ]
[ 138@0,  4488E15,		  -2244E9010,		  true	  ]
[ 139@0,  -44880000000000E5,	  -2244E9010,		  true	  ]
[ 140@0,  1122E40,		  -2244E9010,		  true	  ]
[ 141@0,  -11220000000000E30,	  -2244E9010,		  true	  ]
[ 142@0,  22440000000000E9000,	  -2244E9010,		  true	  ]
[ 143@0,  -2244E9010,		  -2244E9010,		  false	  ]
#-----------------------------------------------------------------#
# BAT:	  decimal1		| decimal2		| >=	  #
# (void)  (decimal)		| (decimal)		| (bit)	  #
#-----------------------------------------------------------------#
[ 0@0,	  nil,			  nil,			  nil	  ]
[ 1@0,	  0,			  nil,			  nil	  ]
[ 2@0,	  1122E-30,		  nil,			  nil	  ]
[ 3@0,	  -11220000000000E-40,	  nil,			  nil	  ]
[ 4@0,	  2244,			  nil,			  nil	  ]
[ 5@0,	  -22440000000000E-10,	  nil,			  nil	  ]
[ 6@0,	  4488E15,		  nil,			  nil	  ]
[ 7@0,	  -44880000000000E5,	  nil,			  nil	  ]
[ 8@0,	  1122E40,		  nil,			  nil	  ]
[ 9@0,	  -11220000000000E30,	  nil,			  nil	  ]
[ 10@0,	  22440000000000E9000,	  nil,			  nil	  ]
[ 11@0,	  -2244E9010,		  nil,			  nil	  ]
[ 12@0,	  nil,			  0,			  nil	  ]
[ 13@0,	  0,			  0,			  true	  ]
[ 14@0,	  1122E-30,		  0,			  true	  ]
[ 15@0,	  -11220000000000E-40,	  0,			  false	  ]
[ 16@0,	  2244,			  0,			  true	  ]
[ 17@0,	  -22440000000000E-10,	  0,			  false	  ]
[ 18@0,	  4488E15,		  0,			  true	  ]
[ 19@0,	  -44880000000000E5,	  0,			  false	  ]
[ 20@0,	  1122E40,		  0,			  true	  ]
[ 21@0,	  -11220000000000E30,	  0,			  false	  ]
[ 22@0,	  22440000000000E9000,	  0,			  true	  ]
[ 23@0,	  -2244E9010,		  0,			  false	  ]
[ 24@0,	  nil,			  1122E-30,		  nil	  ]
[ 25@0,	  0,			  1122E-30,		  false	  ]
[ 26@0,	  1122E-30,		  1122E-30,		  true	  ]
[ 27@0,	  -11220000000000E-40,	  1122E-30,		  false	  ]
[ 28@0,	  2244,			  1122E-30,		  true	  ]
[ 29@0,	  -22440000000000E-10,	  1122E-30,		  false	  ]
[ 30@0,	  4488E15,		  1122E-30,		  true	  ]
[ 31@0,	  -44880000000000E5,	  1122E-30,		  false	  ]
[ 32@0,	  1122E40,		  1122E-30,		  true	  ]
[ 33@0,	  -11220000000000E30,	  1122E-30,		  false	  ]
[ 34@0,	  22440000000000E9000,	  1122E-30,		  true	  ]
[ 35@0,	  -2244E9010,		  1122E-30,		  false	  ]
[ 36@0,	  nil,			  -11220000000000E-40,	  nil	  ]
[ 37@0,	  0,			  -11220000000000E-40,	  true	  ]
[ 38@0,	  1122E-30,		  -11220000000000E-40,	  true	  ]
[ 39@0,	  -11220000000000E-40,	  -11220000000000E-40,	  true	  ]
[ 40@0,	  2244,			  -11220000000000E-40,	  true	  ]
[ 41@0,	  -22440000000000E-10,	  -11220000000000E-40,	  false	  ]
[ 42@0,	  4488E15,		  -11220000000000E-40,	  true	  ]
[ 43@0,	  -44880000000000E5,	  -11220000000000E-40,	  false	  ]
[ 44@0,	  1122E40,		  -11220000000000E-40,	  true	  ]
[ 45@0,	  -11220000000000E30,	  -11220000000000E-40,	  false	  ]
[ 46@0,	  22440000000000E9000,	  -11220000000000E-40,	  true	  ]
[ 47@0,	  -2244E9010,		  -11220000000000E-40,	  false	  ]
[ 48@0,	  nil,			  2244,			  nil	  ]
[ 49@0,	  0,			  2244,			  false	  ]
[ 50@0,	  1122E-30,		  2244,			  false	  ]
[ 51@0,	  -11220000000000E-40,	  2244,			  false	  ]
[ 52@0,	  2244,			  2244,			  true	  ]
[ 53@0,	  -22440000000000E-10,	  2244,			  false	  ]
[ 54@0,	  4488E15,		  2244,			  true	  ]
[ 55@0,	  -44880000000000E5,	  2244,			  false	  ]
[ 56@0,	  1122E40,		  2244,			  true	  ]
[ 57@0,	  -11220000000000E30,	  2244,			  false	  ]
[ 58@0,	  22440000000000E9000,	  2244,			  true	  ]
[ 59@0,	  -2244E9010,		  2244,			  false	  ]
[ 60@0,	  nil,			  -22440000000000E-10,	  nil	  ]
[ 61@0,	  0,			  -22440000000000E-10,	  true	  ]
[ 62@0,	  1122E-30,		  -22440000000000E-10,	  true	  ]
[ 63@0,	  -11220000000000E-40,	  -22440000000000E-10,	  true	  ]
[ 64@0,	  2244,			  -22440000000000E-10,	  true	  ]
[ 65@0,	  -22440000000000E-10,	  -22440000000000E-10,	  true	  ]
[ 66@0,	  4488E15,		  -22440000000000E-10,	  true	  ]
[ 67@0,	  -44880000000000E5,	  -22440000000000E-10,	  false	  ]
[ 68@0,	  1122E40,		  -22440000000000E-10,	  true	  ]
[ 69@0,	  -11220000000000E30,	  -22440000000000E-10,	  false	  ]
[ 70@0,	  22440000000000E9000,	  -22440000000000E-10,	  true	  ]
[ 71@0,	  -2244E9010,		  -22440000000000E-10,	  false	  ]
[ 72@0,	  nil,			  4488E15,		  nil	  ]
[ 73@0,	  0,			  4488E15,		  false	  ]
[ 74@0,	  1122E-30,		  4488E15,		  false	  ]
[ 75@0,	  -11220000000000E-40,	  4488E15,		  false	  ]
[ 76@0,	  2244,			  4488E15,		  false	  ]
[ 77@0,	  -22440000000000E-10,	  4488E15,		  false	  ]
[ 78@0,	  4488E15,		  4488E15,		  true	  ]
[ 79@0,	  -44880000000000E5,	  4488E15,		  false	  ]
[ 80@0,	  1122E40,		  4488E15,		  true	  ]
[ 81@0,	  -11220000000000E30,	  4488E15,		  false	  ]
[ 82@0,	  22440000000000E9000,	  4488E15,		  true	  ]
[ 83@0,	  -2244E9010,		  4488E15,		  false	  ]
[ 84@0,	  nil,			  -44880000000000E5,	  nil	  ]
[ 85@0,	  0,			  -44880000000000E5,	  true	  ]
[ 86@0,	  1122E-30,		  -44880000000000E5,	  true	  ]
[ 87@0,	  -11220000000000E-40,	  -44880000000000E5,	  true	  ]
[ 88@0,	  2244,			  -44880000000000E5,	  true	  ]
[ 89@0,	  -22440000000000E-10,	  -44880000000000E5,	  true	  ]
[ 90@0,	  4488E15,		  -44880000000000E5,	  true	  ]
[ 91@0,	  -44880000000000E5,	  -44880000000000E5,	  true	  ]
[ 92@0,	  1122E40,		  -44880000000000E5,	  true	  ]
[ 93@0,	  -11220000000000E30,	  -44880000000000E5,	  false	  ]
[ 94@0,	  22440000000000E9000,	  -44880000000000E5,	  true	  ]
[ 95@0,	  -2244E9010,		  -44880000000000E5,	  false	  ]
[ 96@0,	  nil,			  1122E40,		  nil	  ]
[ 97@0,	  0,			  1122E40,		  false	  ]
[ 98@0,	  1122E-30,		  1122E40,		  false	  ]
[ 99@0,	  -11220000000000E-40,	  1122E40,		  false	  ]
[ 100@0,  2244,			  1122E40,		  false	  ]
[ 101@0,  -22440000000000E-10,	  1122E40,		  false	  ]
[ 102@0,  4488E15,		  1122E40,		  false	  ]
[ 103@0,  -44880000000000E5,	  1122E40,		  false	  ]
[ 104@0,  1122E40,		  1122E40,		  true	  ]
[ 105@0,  -11220000000000E30,	  1122E40,		  false	  ]
[ 106@0,  22440000000000E9000,	  1122E40,		  true	  ]
[ 107@0,  -2244E9010,		  1122E40,		  false	  ]
[ 108@0,  nil,			  -11220000000000E30,	  nil	  ]
[ 109@0,  0,			  -11220000000000E30,	  true	  ]
[ 110@0,  1122E-30,		  -11220000000000E30,	  true	  ]
[ 111@0,  -11220000000000E-40,	  -11220000000000E30,	  true	  ]
[ 112@0,  2244,			  -11220000000000E30,	  true	  ]
[ 113@0,  -22440000000000E-10,	  -11220000000000E30,	  true	  ]
[ 114@0,  4488E15,		  -11220000000000E30,	  true	  ]
[ 115@0,  -44880000000000E5,	  -11220000000000E30,	  true	  ]
[ 116@0,  1122E40,		  -11220000000000E30,	  true	  ]
[ 117@0,  -11220000000000E30,	  -11220000000000E30,	  true	  ]
[ 118@0,  22440000000000E9000,	  -11220000000000E30,	  true	  ]
[ 119@0,  -2244E9010,		  -11220000000000E30,	  false	  ]
[ 120@0,  nil,			  22440000000000E9000,	  nil	  ]
[ 121@0,  0,			  22440000000000E9000,	  false	  ]
[ 122@0,  1122E-30,		  22440000000000E9000,	  false	  ]
[ 123@0,  -11220000000000E-40,	  22440000000000E9000,	  false	  ]
[ 124@0,  2244,			  22440000000000E9000,	  false	  ]
[ 125@0,  -22440000000000E-10,	  22440000000000E9000,	  false	  ]
[ 126@0,  4488E15,		  22440000000000E9000,	  false	  ]
[ 127@0,  -44880000000000E5,	  22440000000000E9000,	  false	  ]
[ 128@0,  1122E40,		  22440000000000E9000,	  false	  ]
[ 129@0,  -11220000000000E30,	  22440000000000E9000,	  false	  ]
[ 130@0,  22440000000000E9000,	  22440000000000E9000,	  true	  ]
[ 131@0,  -2244E9010,		  22440000000000E9000,	  false	  ]
[ 132@0,  nil,			  -2244E9010,		  nil	  ]
[ 133@0,  0,			  -2244E9010,		  true	  ]
[ 134@0,  1122E-30,		  -2244E9010,		  true	  ]
[ 135@0,  -11220000000000E-40,	  -2244E9010,		  true	  ]
[ 136@0,  2244,			  -2244E9010,		  true	  ]
[ 137@0,  -22440000000000E-10,	  -2244E9010,		  true	  ]
[ 138@0,  4488E15,		  -2244E9010,		  true	  ]
[ 139@0,  -44880000000000E5,	  -2244E9010,		  true	  ]
[ 140@0,  1122E40,		  -2244E9010,		  true	  ]
[ 141@0,  -11220000000000E30,	  -2244E9010,		  true	  ]
[ 142@0,  22440000000000E9000,	  -2244E9010,		  true	  ]
[ 143@0,  -2244E9010,		  -2244E9010,		  true	  ]
#---------------------------------------------------------------------------------#
# BAT:		  decimal		| isnil	| [abs]		| [-]		  #
# (str)		  (decimal)		| (bit)	| (decimal)	| (decimal)	  #
#---------------------------------------------------------------------------------#
[ "dec_nil",	  nil,			  false,  nil,		  nil		  ]
[ "dec_zero",	  0,			  false,  0,		  0		  ]
[ "dec_tiny",	  1122E-30,		  false,  1122E-30,	  -1122E-30	  ]
[ "nec_tiny",	  -11220000000000E-40,	  false,  1122E-30,	  1122E-30	  ]
[ "dec_small",	  2244,			  false,  2244,		  -2244		  ]
[ "nec_small",	  -22440000000000E-10,	  false,  2244,		  2244		  ]
[ "dec_num",	  4488E15,		  false,  4488E15,	  -4488E15	  ]
[ "nec_num",	  -44880000000000E5,	  false,  4488E15,	  4488E15	  ]
[ "dec_big",	  1122E40,		  false,  1122E40,	  -1122E40	  ]
[ "nec_big",	  -11220000000000E30,	  false,  1122E40,	  1122E40	  ]
[ "dec_huge",	  22440000000000E9000,	  false,  2244E9010,	  -2244E9010	  ]
[ "nec_huge",	  -2244E9010,		  false,  2244E9010,	  2244E9010	  ]
#-----------------------------------------#
# BAT:		  tmp_50		  #
# (str)		  (decimal)		  #
#-----------------------------------------#
[ "dec_nil",	  nil			  ]
[ "nec_huge",	  -2244E9010		  ]
[ "nec_big",	  -11220000000000E30	  ]
[ "nec_num",	  -44880000000000E5	  ]
[ "nec_small",	  -22440000000000E-10	  ]
[ "nec_tiny",	  -11220000000000E-40	  ]
[ "dec_zero",	  0			  ]
[ "dec_tiny",	  1122E-30		  ]
[ "dec_small",	  2244			  ]
[ "dec_num",	  4488E15		  ]
[ "dec_big",	  1122E40		  ]
[ "dec_huge",	  22440000000000E9000	  ]
#---------------------------------#
# BAT:		  tmp_51	  #
# (str)		  (decimal)	  #
#---------------------------------#
[ "dec_nil",	  nil		  ]
[ "dec_zero",	  0		  ]
[ "dec_tiny",	  1122E-30	  ]
[ "nec_tiny",	  1122E-30	  ]
[ "dec_small",	  2244		  ]
[ "nec_small",	  2244		  ]
[ "dec_num",	  4488E15	  ]
[ "nec_num",	  4488E15	  ]
[ "dec_big",	  1122E40	  ]
[ "nec_big",	  1122E40	  ]
[ "dec_huge",	  2244E9010	  ]
[ "nec_huge",	  2244E9010	  ]
#---------------------------------#
# BAT:		  tmp_52	  #
# (str)		  (str)		  #
#---------------------------------#
[ "dec_zero",	  "dec_zero"	  ]
[ "dec_tiny",	  "dec_tiny"	  ]
[ "dec_tiny",	  "nec_tiny"	  ]
[ "nec_tiny",	  "dec_tiny"	  ]
[ "nec_tiny",	  "nec_tiny"	  ]
[ "dec_small",	  "dec_small"	  ]
[ "dec_small",	  "nec_small"	  ]
[ "nec_small",	  "dec_small"	  ]
[ "nec_small",	  "nec_small"	  ]
[ "dec_num",	  "dec_num"	  ]
[ "dec_num",	  "nec_num"	  ]
[ "nec_num",	  "dec_num"	  ]
[ "nec_num",	  "nec_num"	  ]
[ "dec_big",	  "dec_big"	  ]
[ "dec_big",	  "nec_big"	  ]
[ "nec_big",	  "dec_big"	  ]
[ "nec_big",	  "nec_big"	  ]
[ "dec_huge",	  "dec_huge"	  ]
[ "dec_huge",	  "nec_huge"	  ]
[ "nec_huge",	  "dec_huge"	  ]
[ "nec_huge",	  "nec_huge"	  ]
#~BeginVariableOutput~#
[/](int_10K) = 20ms
join(int_10K=10000) = 4 ms
group(int_10K=100) = 3 ms
[*](int_10K==10000) = 20 ms
[-](int_10K=10000) = 24 ms
[+](int_10K=10000) =  24 ms
[pow](int_10K=10000) = 48 ms
sort(int_10K) =  4 ms
#~EndVariableOutput~#
#~BeginVariableOutput~#
[/](int_100K) = 209ms
join(int_100K=100000) = 32 ms
group(int_100K=100) = 17 ms
[*](int_100K==100000) = 204 ms
[-](int_100K=100000) = 261 ms
[+](int_100K=100000) =  255 ms
[pow](int_100K=100000) = 567 ms
sort(int_100K) =  40 ms
#~EndVariableOutput~#
#~BeginVariableOutput~#
[ "DECIMAL variant" ]
[/](dec_10K) = 20ms
join(dec_10K=10000) = 9 ms
group(dec_10K=100) = 4 ms
[*](dec_10K==10000) = 63 ms
[-](dec_10K=10000) = 57 ms
[+](dec_10K=10000) =  57 ms
[pow](dec_10K=10000) = 354 ms
sort(dec_10K) =  18 ms
#~EndVariableOutput~#
#~BeginVariableOutput~#
[ "DECIMAL variant" ]
[/](dec_100K) = 211ms
join(dec_100K=100000) = 206 ms
group(dec_100K=100) = 35 ms
[*](dec_100K==100000) = 702 ms
[-](dec_100K=100000) = 593 ms
[+](dec_100K=100000) =  602 ms
[pow](dec_100K=10) = 1162 ms
sort(dec_100K) =  288 ms
#~EndVariableOutput~#
>