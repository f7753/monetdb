# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
##The 2000 serie  is focussed on parallelism
##we start with a non-parallel version
#
#function clkticks(n:int):void;
#	printf("start clock \n");
#barrier	b:= n>0;
#	printf("tick\n");
#	alarm.sleep(2);
#	n:= n-1;
#	redo b;
#exit	b;
#end clkticks;
function Admin.clkticks(n:int):void; #0  (clkticks:void)<-(n:int)
    system.printf("start clock \n"); #1 SYSprint_str ($2:int)<-($3:str)
barrier b := calc.>(n,0); #2 CALCcompGTintint (b:bit)<-(n:int)($5:int) jump 7
    system.printf("tick\n"); #3 SYSprint_str ($6:int)<-($7:str)
    alarm.sleep(2); #4 CLKsleep ($8:void)<-($9:int)
    n := calc.-(n,1); #5 CALCbinarySUBintint (n:int)<-(n:int)($10:int)
    redo b; #6  (b:bit) jump 2
exit b; #7  (b:bit)
end clkticks; #8  
#
#thread 	hdl;
#	printf("Start thread with id %d\n",hdl);
#	clkticks(2);
#	printf("About to exit child\n");
#exit	hdl;
#	printf("Wait for child to exit too\n");
#	#wait hdl;
#	#printf("child has finished\n");
#
function Admin.main():int; #0  (main:int)
thread hdl; #1  (hdl:int) jump 5
    system.printf("Start thread with id %d\n",hdl); #2 SYSprint_formatted_int ($2:int)<-($3:str)(hdl:int)
    Admin.clkticks(2); #3  ($4:void)<-($5:int)
    system.printf("About to exit child\n"); #4 SYSprint_str ($6:int)<-($7:str)
exit hdl; #5  (hdl:int)
    system.printf("Wait for child to exit too\n"); #6 SYSprint_str ($8:int)<-($9:str)
end main; #7  
Wait for child to exit too
Start thread with id 8195
start clock 
tick
tick
About to exit child
>