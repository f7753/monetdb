# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB
# dbname:demo
## the multiplex code blocks.
## check detection of the underlying fast implementations
## currently the tactics is replaced by a script during
## initial analysis. It should remain 'tactics'
#
#function perftst( b:bat[:any$1,:any$2],div:any$2):void;
#	print("perftst");print(div);
#	reduce:= multiplex.tactics("/",b,div);
#	print(reduce);
#end perftst;
function Admin.perftst(b:bat[:any$1,:any$2],div:any$2):void;	# 0  (perftst:void)<-(b:bat[:any$1,:any$2])(div:any$2)
    io.print("perftst");	# 1 CMDprint_val ($3:int)<-($4:str)
    io.print(div);	# 2 CMDprint_val ($5:int)<-(div:any$2)
    reduce := multiplex.script("/",b,div);	# 3  (reduce:bat[:any,:any])<-($7:str)(b:bat[:any$1,:any$2])(div:any$2)
    io.print(reduce);	# 4 CMDprint_val ($8:int)<-(reduce:bat[:any,:any])
end perftst;	# 5  
#
#
#b:= new(:lng,:lng);
#i:= -1:lng;
#barrier v:= nextElement(i,0:lng,10:lng,1:lng);
#        insert(b,i,i);
#        redo v;
#exit v;
#perftst(b,1:lng);
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(lng:,lng:);	# 1 CMDBATnew (b:bat[:lng,:lng])<-($2:lng)($3:lng)
    i := -1;	# 2  (i:lng)<-($5:lng)
barrier v := mal.nextElement(i,0,10,1);	# 3 lngForloopStep (v:bit)<-(i:lng)($7:lng)($8:lng)($9:lng) jump 6
    bat.insert(b,i,i);	# 4 CMDinsert_bun ($10:void)<-(b:bat[:lng,:lng])(i:lng)(i:lng)
    redo v;	# 5  (v:bit) jump 3
exit v;	# 6  (v:bit)
    Admin.perftst(b,1);	# 7  ($11:void)<-(b:bat[:lng,:lng])($9:lng)
end main;	# 8  
[ "perftst" ]
[ 1 ]
#-----------------#
# h	tmp_5	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  3	  ]
[ 4,	  4	  ]
[ 5,	  5	  ]
[ 6,	  6	  ]
[ 7,	  7	  ]
[ 8,	  8	  ]
[ 9,	  9	  ]
>