stdout of test 'tst5007` in directory 'src/mal` itself:
# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
# Visit http://monetdb.cwi.nl for further information.
## Testing the cracker implementation
## perform ordinary selection
#b:= new(:int,:int);
#insert(b,10,100);
#insert(b,1,2);
#insert(b,6,36);
#insert(b,5,25);
#insert(b,2,4);
#insert(b,3,9);
#insert(b,7,49);
#insert(b,8,64);
#insert(b,4,16);
#insert(b,9,81);
#print(b);
#
#crackers.new(b);
#crackers.crack(b,9,25);
#c:= crackers.select(b,9,25,true,true);
#print(c);
#
#crackers.crack(b,80,195);
#c:= crackers.select(b,80,195,true,true);
#print(c);
#
#crackers.crack(b,2,2);
#c:= crackers.select(b,2,2,true,true);
#print(c);
#
#crackers.crack(b,20,99);
#print(b);
#c:= crackers.select(b,20,99,true,true);
#print(c);
#bi:=crackers.info(b);
#
#crackers.drop(b);
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(:int,:int);	# 1 CMDBATnew (b:bat[:int,:int])<-($2:int)($3:int)
    bat.insert(b,10,100);	# 2 BKCinsert_bun ($4:void)<-(b:bat[:int,:int])($5:int)($6:int)
    bat.insert(b,1,2);	# 3 BKCinsert_bun ($7:void)<-(b:bat[:int,:int])($8:int)($9:int)
    bat.insert(b,6,36);	# 4 BKCinsert_bun ($10:void)<-(b:bat[:int,:int])($11:int)($12:int)
    bat.insert(b,5,25);	# 5 BKCinsert_bun ($13:void)<-(b:bat[:int,:int])($14:int)($15:int)
    bat.insert(b,2,4);	# 6 BKCinsert_bun ($16:void)<-(b:bat[:int,:int])($9:int)($17:int)
    bat.insert(b,3,9);	# 7 BKCinsert_bun ($18:void)<-(b:bat[:int,:int])($19:int)($20:int)
    bat.insert(b,7,49);	# 8 BKCinsert_bun ($21:void)<-(b:bat[:int,:int])($22:int)($23:int)
    bat.insert(b,8,64);	# 9 BKCinsert_bun ($24:void)<-(b:bat[:int,:int])($25:int)($26:int)
    bat.insert(b,4,16);	# 10 BKCinsert_bun ($27:void)<-(b:bat[:int,:int])($17:int)($28:int)
    bat.insert(b,9,81);	# 11 BKCinsert_bun ($29:void)<-(b:bat[:int,:int])($20:int)($30:int)
    io.print(b);	# 12 IOprint_val ($31:int)<-(b:bat[:int,:int])
    crackers.new(b);	# 13 CRKnew ($32:void)<-(b:bat[:int,:int])
    crackers.crack(b,9,25);	# 14 CRKcrackNaive ($33:int)<-(b:bat[:int,:int])($20:int)($15:int)
    c := crackers.select(b,9,25,true,true);	# 15 CRKselect (c:bat[:int,:int])<-(b:bat[:int,:int])($20:int)($15:int)($35:bit)($35:bit)
    io.print(c);	# 16 IOprint_val ($36:int)<-(c:bat[:int,:int])
    crackers.crack(b,80,195);	# 17 CRKcrackNaive ($37:int)<-(b:bat[:int,:int])($38:int)($39:int)
    c := crackers.select(b,80,195,true,true);	# 18 CRKselect (c:bat[:int,:int])<-(b:bat[:int,:int])($38:int)($39:int)($35:bit)($35:bit)
    io.print(c);	# 19 IOprint_val ($40:int)<-(c:bat[:int,:int])
    crackers.crack(b,2,2);	# 20 CRKcrackNaive ($41:int)<-(b:bat[:int,:int])($42:int)($42:int)
    c := crackers.select(b,2,2,true,true);	# 21 CRKselect (c:bat[:int,:int])<-(b:bat[:int,:int])($42:int)($42:int)($35:bit)($35:bit)
    io.print(c);	# 22 IOprint_val ($43:int)<-(c:bat[:int,:int])
    crackers.crack(b,20,99);	# 23 CRKcrackNaive ($44:int)<-(b:bat[:int,:int])($45:int)($46:int)
    io.print(b);	# 24 IOprint_val ($47:int)<-(b:bat[:int,:int])
    c := crackers.select(b,20,99,true,true);	# 25 CRKselect (c:bat[:int,:int])<-(b:bat[:int,:int])($45:int)($46:int)($35:bit)($35:bit)
    io.print(c);	# 26 IOprint_val ($48:int)<-(c:bat[:int,:int])
    bi := crackers.info(b);	# 27 CRKinfo (bi:void)<-(b:bat[:int,:int])
    crackers.drop(b);	# 28 CRKdropPiece ($50:void)<-(b:bat[:int,:int])
end main;	# 29  
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 10,	  100	  ]
[ 1,	  2	  ]
[ 6,	  36	  ]
[ 5,	  25	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ 9,	  81	  ]
#-----------------#
# h	tmp_6	  # name
# int	int	  # type
#-----------------#
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
#-----------------#
# h	tmp_7	  # name
# int	int	  # type
#-----------------#
[ 9,	  81	  ]
[ 10,	  100	  ]
#-----------------#
# h	tmp_8	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  81	  ]
[ 10,	  100	  ]
#-----------------#
# h	tmp_10	  # name
# int	int	  # type
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  81	  ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0   4, P, -1 -2147483648, 2147483647, 1, 10, 1, 2, 3 ]
 [   1   4, P, 0 -2147483648, 8, 1, 2, 6, -1, 7 ]
 [   2   4, P, 0 9, 25, 3, 5, 8, -1, 9 ]
 [   3   4, P, 0 26, 2147483647, 6, 10, 4, -1, 5 ]
 [   4   4, L, 3 26, 79, 6, 8, -1, -1, -1 ]
 [   5   4, P, 3 80, 2147483647, 9, 10, 10, -1, 11 ]
 [   6   4, L, 1 -2147483648, 2, 1, 1, -1, -1, -1 ]
 [   7   4, L, 1 3, 8, 2, 2, -1, -1, -1 ]
 [   8   4, L, 2 9, 19, 3, 4, -1, -1, -1 ]
 [   9   4, L, 2 20, 25, 5, 5, -1, -1, -1 ]
 [  10   4, L, 5 80, 99, 9, 9, -1, -1, -1 ]
 [  11   4, L, 5 100, 2147483647, 10, 10, -1, -1, -1 ]
 >
# 20:19:25 >  
# 20:19:25 >  Done.
# 20:19:25 >  

