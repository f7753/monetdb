# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
#	int_1M:= new(void,lng,1000000);
#	setSequenceBase(int_1M,0@0);
#	zinfo:= bat.info(int_1M);
#	print(zinfo);
#
#	i:= 1000000:lng;
#barrier	sj_a:= true;
#	i:= i-1;
#	uj_a := i;
#	vj_a := >=(uj_a,0);
#barrier	tj_a:= vj_a;
#	xj_a := insert(int_1M,nil,i);
#redo	sj_a;
#exit	tj_a;
#exit	sj_a;
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#	zinfo:= bat.info(vg_a);
#	print(zinfo);
#
#	M2:= new(lng,lng,1000000);
#	i:= 1000000:lng;
#barrier	sj_b:= true;
#	i:= i-1;
#	uj_b := i;
#	vj_b := >=(uj_b,0);
#barrier	tj_b:= vj_b;
#	xj_b := insert(M2,i,i);
#redo	sj_b;
#exit	tj_b;
#exit	sj_b;
#
#        t := alarm.time();
#        ug_b := reverse(M2);
#        vg_b := join(M2,ug_b);
#        wg_b := count(vg_b);
#        xg_b := printf("count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := -(x,t);                                                                ah_b := printf("%d ms\n",yg_b);
#
#
#        t := alarm.time();
#        ug_b := reverse(M2);
#        vg_b := join(M2,ug_b);
#        wg_b := count(vg_b);
#        xg_b := printf("count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := -(x,t);                                                                ah_b := printf("%d ms\n",yg_b);
#
#        t := alarm.time();
#        ug_b := reverse(M2);
#        vg_b := join(M2,ug_b);
#        wg_b := count(vg_b);
#        xg_b := printf("count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := -(x,t);                                                                ah_b := printf("%d ms\n",yg_b);
#
#
#        t := alarm.time();
#        ug_b := reverse(M2);
#        vg_b := join(M2,ug_b);
#        wg_b := count(vg_b);
#        xg_b := printf("count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := -(x,t);                                                                ah_b := printf("%d ms\n",yg_b);
#
#	zinfo:= bat.info(vg_b);
#	print(zinfo);
#
function Admin.main():int; #0  (main:int)
    int_1M := mal.new(void,lng,1000000); #1 CMDBATnew (int_1M:bat[void,lng])<-(void:void)(lng:lng)($4:int)
    bat.setSequenceBase(int_1M,0@0); #2 CMDsetSequenceBase ($5:int)<-(int_1M:bat[void,lng])($6:oid)
    zinfo := bat.info(int_1M); #3 CMDinfo (zinfo:bat[str,str])<-(int_1M:bat[void,lng])
    io.print(zinfo); #4 CMDprint_val ($8:int)<-(zinfo:bat[str,str])
    i := 1000000; #5  (i:lng)<-($10:lng)
barrier sj_a := true; #6  (sj_a:bit)<-($12:bit) jump 14
    i := calc.-(i,1); #7 CALCbinarySUBlngint (i:lng)<-(i:lng)($13:int)
    uj_a := i; #8  (uj_a:lng)<-(i:lng)
    vj_a := calc.>=(uj_a,0); #9 CALCcompGElngint (vj_a:bit)<-(uj_a:lng)($16:int)
barrier tj_a := vj_a; #10  (tj_a:bit)<-(vj_a:bit) jump 13
    xj_a := bat.insert(int_1M,nil,i); #11 CMDinsert_bun (xj_a:bat[void,lng])<-(int_1M:bat[void,lng])($19:void)(i:lng)
    redo sj_a; #12  (sj_a:bit) jump 6
exit tj_a; #13  (tj_a:bit)
exit sj_a; #14  (sj_a:bit)
    t := alarm.time(); #15 CLKtime (t:int)
    ug_a := bat.reverse(int_1M); #16 CMDreverse (ug_a:bat[lng,void])<-(int_1M:bat[void,lng])
    vg_a := algebra.join(int_1M,ug_a); #17 CMDjoin (vg_a:bat[void,void])<-(int_1M:bat[void,lng])(ug_a:bat[lng,void])
    wg_a := algebra.count(vg_a); #18 CMDcount (wg_a:int)<-(vg_a:bat[void,void])
    xg_a := system.printf("count %d = ",wg_a); #19 SYSprint_formatted_int (xg_a:int)<-($25:str)(wg_a:int)
    x := alarm.time(); #20 CLKtime (x:int)
    yg_a := calc.-(x,t); #21 CALCbinarySUBintint (yg_a:int)<-(x:int)(t:int)
    ah_a := system.printf("%d ms\n",yg_a); #22 SYSprint_formatted_int (ah_a:int)<-($29:str)(yg_a:int)
    t := alarm.time(); #23 CLKtime (t:int)
    ug_a := bat.reverse(int_1M); #24 CMDreverse (ug_a:bat[lng,void])<-(int_1M:bat[void,lng])
    vg_a := algebra.join(int_1M,ug_a); #25 CMDjoin (vg_a:bat[void,void])<-(int_1M:bat[void,lng])(ug_a:bat[lng,void])
    wg_a := algebra.count(vg_a); #26 CMDcount (wg_a:int)<-(vg_a:bat[void,void])
    xg_a := system.printf("count %d = ",wg_a); #27 SYSprint_formatted_int (xg_a:int)<-($25:str)(wg_a:int)
    x := alarm.time(); #28 CLKtime (x:int)
    yg_a := calc.-(x,t); #29 CALCbinarySUBintint (yg_a:int)<-(x:int)(t:int)
    ah_a := system.printf("%d ms\n",yg_a); #30 SYSprint_formatted_int (ah_a:int)<-($29:str)(yg_a:int)
    t := alarm.time(); #31 CLKtime (t:int)
    ug_a := bat.reverse(int_1M); #32 CMDreverse (ug_a:bat[lng,void])<-(int_1M:bat[void,lng])
    vg_a := algebra.join(int_1M,ug_a); #33 CMDjoin (vg_a:bat[void,void])<-(int_1M:bat[void,lng])(ug_a:bat[lng,void])
    wg_a := algebra.count(vg_a); #34 CMDcount (wg_a:int)<-(vg_a:bat[void,void])
    xg_a := system.printf("count %d = ",wg_a); #35 SYSprint_formatted_int (xg_a:int)<-($25:str)(wg_a:int)
    x := alarm.time(); #36 CLKtime (x:int)
    yg_a := calc.-(x,t); #37 CALCbinarySUBintint (yg_a:int)<-(x:int)(t:int)
    ah_a := system.printf("%d ms\n",yg_a); #38 SYSprint_formatted_int (ah_a:int)<-($29:str)(yg_a:int)
    t := alarm.time(); #39 CLKtime (t:int)
    ug_a := bat.reverse(int_1M); #40 CMDreverse (ug_a:bat[lng,void])<-(int_1M:bat[void,lng])
    vg_a := algebra.join(int_1M,ug_a); #41 CMDjoin (vg_a:bat[void,void])<-(int_1M:bat[void,lng])(ug_a:bat[lng,void])
    wg_a := algebra.count(vg_a); #42 CMDcount (wg_a:int)<-(vg_a:bat[void,void])
    xg_a := system.printf("count %d = ",wg_a); #43 SYSprint_formatted_int (xg_a:int)<-($25:str)(wg_a:int)
    x := alarm.time(); #44 CLKtime (x:int)
    yg_a := calc.-(x,t); #45 CALCbinarySUBintint (yg_a:int)<-(x:int)(t:int)
    ah_a := system.printf("%d ms\n",yg_a); #46 SYSprint_formatted_int (ah_a:int)<-($29:str)(yg_a:int)
    zinfo := bat.info(vg_a); #47 CMDinfo (zinfo:bat[str,str])<-(vg_a:bat[void,void])
    io.print(zinfo); #48 CMDprint_val ($30:int)<-(zinfo:bat[str,str])
    M2 := mal.new(lng,lng,1000000); #49 CMDBATnew (M2:bat[lng,lng])<-(lng:lng)(lng:lng)($4:int)
    i := 1000000; #50  (i:lng)<-($10:lng)
barrier sj_b := true; #51  (sj_b:bit)<-($12:bit) jump 59
    i := calc.-(i,1); #52 CALCbinarySUBlngint (i:lng)<-(i:lng)($13:int)
    uj_b := i; #53  (uj_b:lng)<-(i:lng)
    vj_b := calc.>=(uj_b,0); #54 CALCcompGElngint (vj_b:bit)<-(uj_b:lng)($16:int)
barrier tj_b := vj_b; #55  (tj_b:bit)<-(vj_b:bit) jump 58
    xj_b := bat.insert(M2,i,i); #56 CMDinsert_bun (xj_b:bat[lng,lng])<-(M2:bat[lng,lng])(i:lng)(i:lng)
    redo sj_b; #57  (sj_b:bit) jump 51
exit tj_b; #58  (tj_b:bit)
exit sj_b; #59  (sj_b:bit)
    t := alarm.time(); #60 CLKtime (t:int)
    ug_b := bat.reverse(M2); #61 CMDreverse (ug_b:bat[lng,lng])<-(M2:bat[lng,lng])
    vg_b := algebra.join(M2,ug_b); #62 CMDjoin (vg_b:bat[lng,lng])<-(M2:bat[lng,lng])(ug_b:bat[lng,lng])
    wg_b := algebra.count(vg_b); #63 CMDcount (wg_b:int)<-(vg_b:bat[lng,lng])
    xg_b := system.printf("count %d = ",wg_b); #64 SYSprint_formatted_int (xg_b:int)<-($25:str)(wg_b:int)
    x := alarm.time(); #65 CLKtime (x:int)
    yg_b := calc.-(x,t); #66 CALCbinarySUBintint (yg_b:int)<-(x:int)(t:int)
    ah_b := system.printf("%d ms\n",yg_b); #67 SYSprint_formatted_int (ah_b:int)<-($29:str)(yg_b:int)
    t := alarm.time(); #68 CLKtime (t:int)
    ug_b := bat.reverse(M2); #69 CMDreverse (ug_b:bat[lng,lng])<-(M2:bat[lng,lng])
    vg_b := algebra.join(M2,ug_b); #70 CMDjoin (vg_b:bat[lng,lng])<-(M2:bat[lng,lng])(ug_b:bat[lng,lng])
    wg_b := algebra.count(vg_b); #71 CMDcount (wg_b:int)<-(vg_b:bat[lng,lng])
    xg_b := system.printf("count %d = ",wg_b); #72 SYSprint_formatted_int (xg_b:int)<-($25:str)(wg_b:int)
    x := alarm.time(); #73 CLKtime (x:int)
    yg_b := calc.-(x,t); #74 CALCbinarySUBintint (yg_b:int)<-(x:int)(t:int)
    ah_b := system.printf("%d ms\n",yg_b); #75 SYSprint_formatted_int (ah_b:int)<-($29:str)(yg_b:int)
    t := alarm.time(); #76 CLKtime (t:int)
    ug_b := bat.reverse(M2); #77 CMDreverse (ug_b:bat[lng,lng])<-(M2:bat[lng,lng])
    vg_b := algebra.join(M2,ug_b); #78 CMDjoin (vg_b:bat[lng,lng])<-(M2:bat[lng,lng])(ug_b:bat[lng,lng])
    wg_b := algebra.count(vg_b); #79 CMDcount (wg_b:int)<-(vg_b:bat[lng,lng])
    xg_b := system.printf("count %d = ",wg_b); #80 SYSprint_formatted_int (xg_b:int)<-($25:str)(wg_b:int)
    x := alarm.time(); #81 CLKtime (x:int)
    yg_b := calc.-(x,t); #82 CALCbinarySUBintint (yg_b:int)<-(x:int)(t:int)
    ah_b := system.printf("%d ms\n",yg_b); #83 SYSprint_formatted_int (ah_b:int)<-($29:str)(yg_b:int)
    t := alarm.time(); #84 CLKtime (t:int)
    ug_b := bat.reverse(M2); #85 CMDreverse (ug_b:bat[lng,lng])<-(M2:bat[lng,lng])
    vg_b := algebra.join(M2,ug_b); #86 CMDjoin (vg_b:bat[lng,lng])<-(M2:bat[lng,lng])(ug_b:bat[lng,lng])
    wg_b := algebra.count(vg_b); #87 CMDcount (wg_b:int)<-(vg_b:bat[lng,lng])
    xg_b := system.printf("count %d = ",wg_b); #88 SYSprint_formatted_int (xg_b:int)<-($25:str)(wg_b:int)
    x := alarm.time(); #89 CLKtime (x:int)
    yg_b := calc.-(x,t); #90 CALCbinarySUBintint (yg_b:int)<-(x:int)(t:int)
    ah_b := system.printf("%d ms\n",yg_b); #91 SYSprint_formatted_int (ah_b:int)<-($29:str)(yg_b:int)
    zinfo := bat.info(vg_b); #92 CMDinfo (zinfo:bat[str,str])<-(vg_b:bat[lng,lng])
    io.print(zinfo); #93 CMDprint_val ($43:int)<-(zinfo:bat[str,str])
end main; #94  
#-------------------------------------------------#
# BAT:				  tmp_5		  #
# (str)				  (str)		  #
#-------------------------------------------------#
[ "version",			  "980714"	  ]
[ "batId",			  "tmp_4"	  ]
[ "batCacheid",			  "4"		  ]
[ "batParentid",		  "0"		  ]
[ "batSharecnt",		  "0"		  ]
[ "head",			  "void"	  ]
[ "tail",			  "lng"		  ]
[ "batPersistence",		  "transient"	  ]
[ "batRestricted",		  "updatable"	  ]
[ "batRefcnt",			  "1"		  ]
[ "batDirty",			  "dirty"	  ]
[ "batSet",			  "0"		  ]
[ "void_tid",			  "0"		  ]
[ "void_cnt",			  "0"		  ]
[ "hsorted",			  "65"		  ]
[ "hident",			  "h"		  ]
[ "hdense",			  "1"		  ]
[ "hseqbase",			  "0@0"		  ]
[ "hkey",			  "1"		  ]
[ "hloc",			  "0"		  ]
[ "hvarsized",			  "1"		  ]
[ "halign",			  "0"		  ]
[ "halignflushed",		  "1000064"	  ]
[ "tident",			  "t"		  ]
[ "tdense",			  "0"		  ]
[ "tseqbase",			  "nil"		  ]
[ "tsorted",			  "1"		  ]
[ "tkey",			  "0"		  ]
[ "tloc",			  "0"		  ]
[ "tvarsized",			  "0"		  ]
[ "talign",			  "1000065"	  ]
[ "talignflushed",		  "1000065"	  ]
[ "batInserted",		  "1"		  ]
[ "batDeleted",			  "0"		  ]
[ "batHole",			  "0"		  ]
[ "top",			  "1"		  ]
[ "batStamp",			  "4"		  ]
[ "curStamp",			  "5"		  ]
[ "batCopiedtodisk",		  "0"		  ]
[ "batDirtydesc",		  "dirty"	  ]
[ "batDirtybuns",		  "clean"	  ]
[ "batBuns.free",		  "8"		  ]
[ "batBuns.size",		  "8000024"	  ]
[ "batBuns.maxsize",		  "8000024"	  ]
[ "batBuns.storage",		  "malloced"	  ]
[ "batBuns.filename",		  "no file"	  ]
[ "batBuns.offset",		  "0"		  ]
[ "hheapdirty",			  "clean"	  ]
[ "hheap.free",			  "0"		  ]
[ "hheap.size",			  "0"		  ]
[ "hheap.maxsize",		  "0"		  ]
[ "hheap.storage",		  "absent"	  ]
[ "hheap.filename",		  "no file"	  ]
[ "hheap.offset",		  "0"		  ]
[ "theapdirty",			  "clean"	  ]
[ "theap.free",			  "0"		  ]
[ "theap.size",			  "0"		  ]
[ "theap.maxsize",		  "0"		  ]
[ "theap.storage",		  "absent"	  ]
[ "theap.filename",		  "no file"	  ]
[ "theap.offset",		  "0"		  ]
[ "hacctype",			  "null"	  ]
[ "haccdirty",			  "clean"	  ]
[ "haccCopiedtodisk",		  "0"		  ]
[ "haccelerator.free",		  "0"		  ]
[ "haccelerator.size",		  "0"		  ]
[ "haccelerator.maxsize",	  "0"		  ]
[ "haccelerator.storage",	  "absent"	  ]
[ "haccelerator.filename",	  "no file"	  ]
[ "haccelerator.offset",	  "0"		  ]
[ "tacctype",			  "null"	  ]
[ "taccdirty",			  "clean"	  ]
[ "taccCopiedtodisk",		  "0"		  ]
[ "taccelerator.free",		  "0"		  ]
[ "taccelerator.size",		  "0"		  ]
[ "taccelerator.maxsize",	  "0"		  ]
[ "taccelerator.storage",	  "absent"	  ]
[ "taccelerator.filename",	  "no file"	  ]
[ "taccelerator.offset",	  "0"		  ]
[ "head_index",			  "absent"	  ]
[ "tail_index",			  "absent"	  ]
count 1000000 = 379 ms
count 1000000 = 289 ms
count 1000000 = 289 ms
count 1000000 = 288 ms
#-------------------------------------------------#
# BAT:				  tmp_6		  #
# (str)				  (str)		  #
#-------------------------------------------------#
[ "version",			  "980714"	  ]
[ "batId",			  "tmp_7"	  ]
[ "batCacheid",			  "7"		  ]
[ "batParentid",		  "0"		  ]
[ "batSharecnt",		  "0"		  ]
[ "head",			  "oid"		  ]
[ "tail",			  "oid"		  ]
[ "batPersistence",		  "transient"	  ]
[ "batRestricted",		  "updatable"	  ]
[ "batRefcnt",			  "1"		  ]
[ "batDirty",			  "dirty"	  ]
[ "batSet",			  "0"		  ]
[ "void_tid",			  "0"		  ]
[ "void_cnt",			  "0"		  ]
[ "hsorted",			  "65"		  ]
[ "hident",			  "h"		  ]
[ "hdense",			  "0"		  ]
[ "hseqbase",			  "nil"		  ]
[ "hkey",			  "0"		  ]
[ "hloc",			  "0"		  ]
[ "hvarsized",			  "0"		  ]
[ "halign",			  "1000122"	  ]
[ "halignflushed",		  "1000122"	  ]
[ "tident",			  "t"		  ]
[ "tdense",			  "0"		  ]
[ "tseqbase",			  "nil"		  ]
[ "tsorted",			  "0"		  ]
[ "tkey",			  "0"		  ]
[ "tloc",			  "4"		  ]
[ "tvarsized",			  "0"		  ]
[ "talign",			  "1000123"	  ]
[ "talignflushed",		  "1000123"	  ]
[ "batInserted",		  "1"		  ]
[ "batDeleted",			  "0"		  ]
[ "batHole",			  "0"		  ]
[ "top",			  "1000001"	  ]
[ "batStamp",			  "33"		  ]
[ "curStamp",			  "34"		  ]
[ "batCopiedtodisk",		  "0"		  ]
[ "batDirtydesc",		  "clean"	  ]
[ "batDirtybuns",		  "clean"	  ]
[ "batBuns.free",		  "8000008"	  ]
[ "batBuns.size",		  "8400024"	  ]
[ "batBuns.maxsize",		  "8400024"	  ]
[ "batBuns.storage",		  "malloced"	  ]
[ "batBuns.filename",		  "no file"	  ]
[ "batBuns.offset",		  "0"		  ]
[ "hheapdirty",			  "clean"	  ]
[ "hheap.free",			  "0"		  ]
[ "hheap.size",			  "0"		  ]
[ "hheap.maxsize",		  "0"		  ]
[ "hheap.storage",		  "absent"	  ]
[ "hheap.filename",		  "no file"	  ]
[ "hheap.offset",		  "0"		  ]
[ "theapdirty",			  "clean"	  ]
[ "theap.free",			  "0"		  ]
[ "theap.size",			  "0"		  ]
[ "theap.maxsize",		  "0"		  ]
[ "theap.storage",		  "absent"	  ]
[ "theap.filename",		  "no file"	  ]
[ "theap.offset",		  "0"		  ]
[ "hacctype",			  "null"	  ]
[ "haccdirty",			  "clean"	  ]
[ "haccCopiedtodisk",		  "0"		  ]
[ "haccelerator.free",		  "0"		  ]
[ "haccelerator.size",		  "0"		  ]
[ "haccelerator.maxsize",	  "0"		  ]
[ "haccelerator.storage",	  "absent"	  ]
[ "haccelerator.filename",	  "no file"	  ]
[ "haccelerator.offset",	  "0"		  ]
[ "tacctype",			  "null"	  ]
[ "taccdirty",			  "clean"	  ]
[ "taccCopiedtodisk",		  "0"		  ]
[ "taccelerator.free",		  "0"		  ]
[ "taccelerator.size",		  "0"		  ]
[ "taccelerator.maxsize",	  "0"		  ]
[ "taccelerator.storage",	  "absent"	  ]
[ "taccelerator.filename",	  "no file"	  ]
[ "taccelerator.offset",	  "0"		  ]
[ "head_index",			  "absent"	  ]
[ "tail_index",			  "absent"	  ]
count 1000000 = 319 ms
count 1000000 = 215 ms
count 1000000 = 215 ms
count 1000000 = 215 ms
#-------------------------------------------------#
# BAT:				  tmp_8		  #
# (str)				  (str)		  #
#-------------------------------------------------#
[ "version",			  "980714"	  ]
[ "batId",			  "tmp_9"	  ]
[ "batCacheid",			  "9"		  ]
[ "batParentid",		  "0"		  ]
[ "batSharecnt",		  "0"		  ]
[ "head",			  "lng"		  ]
[ "tail",			  "lng"		  ]
[ "batPersistence",		  "transient"	  ]
[ "batRestricted",		  "updatable"	  ]
[ "batRefcnt",			  "1"		  ]
[ "batDirty",			  "dirty"	  ]
[ "batSet",			  "0"		  ]
[ "void_tid",			  "0"		  ]
[ "void_cnt",			  "0"		  ]
[ "hsorted",			  "0"		  ]
[ "hident",			  "h"		  ]
[ "hdense",			  "0"		  ]
[ "hseqbase",			  "nil"		  ]
[ "hkey",			  "0"		  ]
[ "hloc",			  "0"		  ]
[ "hvarsized",			  "0"		  ]
[ "halign",			  "1000182"	  ]
[ "halignflushed",		  "1000182"	  ]
[ "tident",			  "t"		  ]
[ "tdense",			  "0"		  ]
[ "tseqbase",			  "nil"		  ]
[ "tsorted",			  "0"		  ]
[ "tkey",			  "0"		  ]
[ "tloc",			  "8"		  ]
[ "tvarsized",			  "0"		  ]
[ "talign",			  "1000183"	  ]
[ "talignflushed",		  "1000183"	  ]
[ "batInserted",		  "1"		  ]
[ "batDeleted",			  "0"		  ]
[ "batHole",			  "0"		  ]
[ "top",			  "1000001"	  ]
[ "batStamp",			  "63"		  ]
[ "curStamp",			  "64"		  ]
[ "batCopiedtodisk",		  "0"		  ]
[ "batDirtydesc",		  "clean"	  ]
[ "batDirtybuns",		  "clean"	  ]
[ "batBuns.free",		  "16000016"	  ]
[ "batBuns.size",		  "16800048"	  ]
[ "batBuns.maxsize",		  "16800048"	  ]
[ "batBuns.storage",		  "malloced"	  ]
[ "batBuns.filename",		  "no file"	  ]
[ "batBuns.offset",		  "0"		  ]
[ "hheapdirty",			  "clean"	  ]
[ "hheap.free",			  "0"		  ]
[ "hheap.size",			  "0"		  ]
[ "hheap.maxsize",		  "0"		  ]
[ "hheap.storage",		  "absent"	  ]
[ "hheap.filename",		  "no file"	  ]
[ "hheap.offset",		  "0"		  ]
[ "theapdirty",			  "clean"	  ]
[ "theap.free",			  "0"		  ]
[ "theap.size",			  "0"		  ]
[ "theap.maxsize",		  "0"		  ]
[ "theap.storage",		  "absent"	  ]
[ "theap.filename",		  "no file"	  ]
[ "theap.offset",		  "0"		  ]
[ "hacctype",			  "null"	  ]
[ "haccdirty",			  "clean"	  ]
[ "haccCopiedtodisk",		  "0"		  ]
[ "haccelerator.free",		  "0"		  ]
[ "haccelerator.size",		  "0"		  ]
[ "haccelerator.maxsize",	  "0"		  ]
[ "haccelerator.storage",	  "absent"	  ]
[ "haccelerator.filename",	  "no file"	  ]
[ "haccelerator.offset",	  "0"		  ]
[ "tacctype",			  "null"	  ]
[ "taccdirty",			  "clean"	  ]
[ "taccCopiedtodisk",		  "0"		  ]
[ "taccelerator.free",		  "0"		  ]
[ "taccelerator.size",		  "0"		  ]
[ "taccelerator.maxsize",	  "0"		  ]
[ "taccelerator.storage",	  "absent"	  ]
[ "taccelerator.filename",	  "no file"	  ]
[ "taccelerator.offset",	  "0"		  ]
[ "head_index",			  "absent"	  ]
[ "tail_index",			  "absent"	  ]
>