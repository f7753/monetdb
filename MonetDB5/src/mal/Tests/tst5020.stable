# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
## determine basic costs for cracking a larger table.
#b:= new(:int,:int);
#i:= -1:int;
#barrier v:= nextElement(i,0:int,1000000:int);
#        k:= rand();
#        l:= int(k);
#        insert(b,l,l);
#        redo v;
#exit v;
##setReadMode(b);
#mx:= max(b);
#printf("max %d",mx);
#mi:= min(b);
#printf(" min %d\n",mi);
#t0:= alarm.usec();
#c:= copy(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#copy %d\n",d0);
#
#t0:= alarm.usec();
#(cidx,vrng):= crackers.new(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack init %d\n",d0);
##print(vrng);
#
#l:= mi*2;
#h:= mx/2;
#printf("select %d ",l);
#printf("%d\n",h);
#t0:= alarm.usec();
#z:= crackers.crack(b,cidx,vrng,l,h);
#t1:= alarm.usec();
##print(vrng);
#d0:= t1-t0;
#printf("#crack %d\n",d0);
#
#l:= l*2;
#h:= h/2;
#printf("select %d ",l);
#printf("%d\n",h);
#t0:= alarm.usec();
#y:= crackers.crack(b,cidx,vrng,l,h);
##print(vrng);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack %d\n",d0);
#
#l:= l*2;
#h:= h/2;
#printf("select %d ",l);
#printf("%d\n",h);
#t0:= alarm.usec();
#y:= crackers.crack(b,cidx,vrng,l,h);
##print(vrng);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack %d\n",d0);
#
#l:= l*2;
#h:= h/2;
#printf("select %d ",l);
#printf("%d\n",h);
#t0:= alarm.usec();
#y:= crackers.crack(b,cidx,vrng,l,h);
##print(vrng);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack %d\n",d0);
#print(cidx);
#print(vrng);
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(int:,int:);	# 1 CMDBATnew (b:bat[:int,:int])<-($2:int)($3:int)
    i := -1;	# 2  (i:int)<-($5:int)
barrier v := mal.nextElement(i,0,1000000);	# 3 intForloop (v:bit)<-(i:int)($7:int)($8:int) jump 8
    k := calc.rand();	# 4 CALCrandint (k:int)
    l := calc.int(k);	# 5 CALCint2int (l:int)<-(k:int)
    bat.insert(b,l,l);	# 6 BKCinsert_bun ($11:void)<-(b:bat[:int,:int])(l:int)(l:int)
    redo v;	# 7  (v:bit) jump 3
exit v;	# 8  (v:bit)
    mx := algebra.max(b);	# 9 ALGmax_int (mx:int)<-(b:bat[:int,:int])
    io.printf("max %d",mx);	# 10 IOprint_formatted_int ($13:int)<-($14:str)(mx:int)
    mi := algebra.min(b);	# 11 ALGmin_int (mi:int)<-(b:bat[:int,:int])
    io.printf(" min %d\n",mi);	# 12 IOprint_formatted_int ($16:int)<-($17:str)(mi:int)
    t0 := alarm.usec();	# 13 ALARMusec (t0:lng)
    c := algebra.copy(b);	# 14 ALGcopy (c:bat[:int,:int])<-(b:bat[:int,:int])
    t1 := alarm.usec();	# 15 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 16 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#copy %d\n",d0);	# 17 IOprint_formatted_lng ($22:int)<-($23:str)(d0:lng)
    t0 := alarm.usec();	# 18 ALARMusec (t0:lng)
    (cidx,vrng):=crackers.new(b);	# 19 CRKnew (cidx:bat[:int,:int])(vrng:bat[:int,:int])<-(b:bat[:int,:int])
    t1 := alarm.usec();	# 20 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 21 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack init %d\n",d0);	# 22 IOprint_formatted_lng ($26:int)<-($27:str)(d0:lng)
    l := calc.*(mi,2);	# 23 CALCbinaryMULintint (l:int)<-(mi:int)($28:int)
    h := calc./(mx,2);	# 24 CALCbinarycheckDIVintint (h:int)<-(mx:int)($28:int)
    io.printf("select %d ",l);	# 25 IOprint_formatted_int ($30:int)<-($31:str)(l:int)
    io.printf("%d\n",h);	# 26 IOprint_formatted_int ($32:int)<-($33:str)(h:int)
    t0 := alarm.usec();	# 27 ALARMusec (t0:lng)
    z := crackers.crack(b,cidx,vrng,l,h);	# 28 CRKcrackNaive (z:int)<-(b:bat[:int,:int])(cidx:bat[:int,:int])(vrng:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 29 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 30 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack %d\n",d0);	# 31 IOprint_formatted_lng ($35:int)<-($36:str)(d0:lng)
    l := calc.*(l,2);	# 32 CALCbinaryMULintint (l:int)<-(l:int)($28:int)
    h := calc./(h,2);	# 33 CALCbinarycheckDIVintint (h:int)<-(h:int)($28:int)
    io.printf("select %d ",l);	# 34 IOprint_formatted_int ($37:int)<-($31:str)(l:int)
    io.printf("%d\n",h);	# 35 IOprint_formatted_int ($38:int)<-($33:str)(h:int)
    t0 := alarm.usec();	# 36 ALARMusec (t0:lng)
    y := crackers.crack(b,cidx,vrng,l,h);	# 37 CRKcrackNaive (y:int)<-(b:bat[:int,:int])(cidx:bat[:int,:int])(vrng:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 38 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 39 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack %d\n",d0);	# 40 IOprint_formatted_lng ($40:int)<-($36:str)(d0:lng)
    l := calc.*(l,2);	# 41 CALCbinaryMULintint (l:int)<-(l:int)($28:int)
    h := calc./(h,2);	# 42 CALCbinarycheckDIVintint (h:int)<-(h:int)($28:int)
    io.printf("select %d ",l);	# 43 IOprint_formatted_int ($41:int)<-($31:str)(l:int)
    io.printf("%d\n",h);	# 44 IOprint_formatted_int ($42:int)<-($33:str)(h:int)
    t0 := alarm.usec();	# 45 ALARMusec (t0:lng)
    y := crackers.crack(b,cidx,vrng,l,h);	# 46 CRKcrackNaive (y:int)<-(b:bat[:int,:int])(cidx:bat[:int,:int])(vrng:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 47 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 48 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack %d\n",d0);	# 49 IOprint_formatted_lng ($43:int)<-($36:str)(d0:lng)
    l := calc.*(l,2);	# 50 CALCbinaryMULintint (l:int)<-(l:int)($28:int)
    h := calc./(h,2);	# 51 CALCbinarycheckDIVintint (h:int)<-(h:int)($28:int)
    io.printf("select %d ",l);	# 52 IOprint_formatted_int ($44:int)<-($31:str)(l:int)
    io.printf("%d\n",h);	# 53 IOprint_formatted_int ($45:int)<-($33:str)(h:int)
    t0 := alarm.usec();	# 54 ALARMusec (t0:lng)
    y := crackers.crack(b,cidx,vrng,l,h);	# 55 CRKcrackNaive (y:int)<-(b:bat[:int,:int])(cidx:bat[:int,:int])(vrng:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 56 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 57 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack %d\n",d0);	# 58 IOprint_formatted_lng ($46:int)<-($36:str)(d0:lng)
    io.print(cidx);	# 59 IOprint_val ($47:int)<-(cidx:bat[:int,:int])
    io.print(vrng);	# 60 IOprint_val ($48:int)<-(vrng:bat[:int,:int])
end main;	# 61  
max 2147480021 min 1210
#copy 25
#crack init 35505
select 2420 1073740010
#crack 72510
select 4840 536870005
#crack 36124
select 9680 268435002
#crack 17947
select 19360 134217501
#crack 8823
#-------------------------#
# h	tmp_5		  # name
# int	int		  # type
#-------------------------#
[ 1,	  1		  ]
[ 2,	  3		  ]
[ 499990, 1000000	  ]
[ 4,	  6		  ]
[ 249960, 499989	  ]
[ 7,	  10		  ]
[ 124816, 249959	  ]
[ 11,	  62435		  ]
[ 62436,  124815	  ]
#---------------------------------#
# h		tmp_6		  # name
# int		int		  # type
#---------------------------------#
[ 1210,		  2419		  ]
[ 2420,		  4839		  ]
[ 1073740011,	  2147480021	  ]
[ 4840,		  9679		  ]
[ 536870006,	  1073740010	  ]
[ 9680,		  19359		  ]
[ 268435003,	  536870005	  ]
[ 19360,	  134217501	  ]
[ 134217502,	  268435002	  ]
>