# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
## simple loop with controlled redo
#
#	i:=0;
#barrier j:=i<3;
#	print(i);
#	i:=i+1;
#	redo j;
#exit	j;
#	print("first loop done");
#	i:=0;
#barrier j:=i<3;
#	print(i);
#	i:=i+1;
#	redo j:= i<3;
#exit	j;
#	print("second loop done");
#
function Admin.main():int;	# 0  (main:int)
    i := 0;	# 1  (i:int)<-($2:int)
barrier j := calc.<(i,3);	# 2 CALCcompLTintint (j:bit)<-(i:int)($4:int) jump 6
    io.print(i);	# 3 CMDprint_val ($5:int)<-(i:int)
    i := calc.+(i,1);	# 4 CALCbinaryADDintint (i:int)<-(i:int)($6:int)
    redo j;	# 5  (j:bit) jump 2
exit j;	# 6  (j:bit)
    io.print("first loop done");	# 7 CMDprint_val ($7:int)<-($8:str)
    i := 0;	# 8  (i:int)<-($2:int)
barrier j := calc.<(i,3);	# 9 CALCcompLTintint (j:bit)<-(i:int)($4:int) jump 13
    io.print(i);	# 10 CMDprint_val ($9:int)<-(i:int)
    i := calc.+(i,1);	# 11 CALCbinaryADDintint (i:int)<-(i:int)($6:int)
    redo j := calc.<(i,3);	# 12 CALCcompLTintint (j:bit)<-(i:int)($4:int) jump 9
exit j;	# 13  (j:bit)
    io.print("second loop done");	# 14 CMDprint_val ($10:int)<-($11:str)
end main;	# 15  
[ 0 ]
[ 1 ]
[ 2 ]
[ "first loop done" ]
[ 0 ]
[ 1 ]
[ 2 ]
[ "second loop done" ]
>