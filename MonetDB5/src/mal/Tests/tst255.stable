# Monet Database Server V5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB/dbfarm
# dbname:demo
## testing void to oid coercion
# z1:= new(:void,:int);
#setSequenceBase(z1,0@0);
# insert(z1,nil,0);
# insert(z1,nil,1);
# insert(z1,nil,2);
#print(z1);
#o:= oid(z1);
#print(o);
#
function Admin.main():int;	# 0  (main:int)
    z1 := bbp.new(void:,int:);	# 1 CMDBATnew (z1:bat[:void,:int])<-($2:void)($3:int)
    bat.setSequenceBase(z1,0@0);	# 2 BKCsetSequenceBase ($4:int)<-(z1:bat[:void,:int])($5:oid)
    bat.insert(z1,nil,0);	# 3 BKCinsert_bun ($6:void)<-(z1:bat[:void,:int])($7:void)($8:int)
    bat.insert(z1,nil,1);	# 4 BKCinsert_bun ($9:void)<-(z1:bat[:void,:int])($7:void)($10:int)
    bat.insert(z1,nil,2);	# 5 BKCinsert_bun ($11:void)<-(z1:bat[:void,:int])($7:void)($12:int)
    io.print(z1);	# 6 IOprint_val ($13:int)<-(z1:bat[:void,:int])
    o := batcalc.oid(z1);	# 7 CMDconvertvoid_oid (o:bat[:oid,:int])<-(z1:bat[:void,:int])
    io.print(o);	# 8 IOprint_val ($15:int)<-(o:bat[:oid,:int])
end main;	# 9  
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
#-----------------#
# h	tmp_5	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
>