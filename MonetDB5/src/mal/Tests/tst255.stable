# Monet Database Server V5.0
# Copyright (c) 1993-2003, CWI. All rights reserved.
# compiled for 32biti686-pc-linux-gnu/32bit.
# config:/ufs/mk/monet_5/src/mal/Tests/tst.conf
# dbfarm:/ufs/mk/monet_5/Linux/var/MonetDB
# dbname:demo
## testing void to oid coercion
# z1:= new(void,int);
#setSequenceBase(z1,0@0);
# insert(z1,nil,0);
# insert(z1,nil,1);
# insert(z1,nil,2);
#print(z1);
#o:= oid(z1);
#print(o);
#
function Admin.main():int; #0  (main:int)
    z1 := mal.new(void,int); #1 CMDBATnew (z1:bat[void,int])<-(void:void)(int:int)
    bat.setSequenceBase(z1,0@0); #2 CMDsetSequenceBase ($4:int)<-(z1:bat[void,int])($5:oid)
    bat.insert(z1,nil,0); #3 CMDinsert_bun ($6:bat[void,int])<-(z1:bat[void,int])($7:void)($8:int)
    bat.insert(z1,nil,1); #4 CMDinsert_bun ($9:bat[void,int])<-(z1:bat[void,int])($7:void)($10:int)
    bat.insert(z1,nil,2); #5 CMDinsert_bun ($11:bat[void,int])<-(z1:bat[void,int])($7:void)($12:int)
    io.print(z1); #6 CMDprint_val ($13:int)<-(z1:bat[void,int])
    o := batcalc.oid(z1); #7 CMDconvertvoid_oid (o:bat[oid,int])<-(z1:bat[void,int])
    io.print(o); #8 CMDprint_val ($15:int)<-(o:bat[oid,int])
end main; #9  
#-----------------#
# BAT:	  tmp_4	  #
# (void)  (int)	  #
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
#-----------------#
# BAT:	  tmp_5	  #
# (oid)	  (int)	  #
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
>