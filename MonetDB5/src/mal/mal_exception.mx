@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@'
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@'
@' The Original Code is the Monet Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2004 CWI.
@' All Rights Reserved.
@'
@' Contributor(s):
@'              Martin Kersten <Martin.Kersten@cwi.nl>
@'              Peter Boncz <Peter.Boncz@cwi.nl>
@'              Niels Nes <Niels.Nes@cwi.nl>
@'              Stefan Manegold  <Stefan.Manegold@cwi.nl>
@'              Sjoerd Mullender  <Sjoerd.Mullender@cwi.nl>

@f mal_exception
@a M. Kersten
@v 0.0

@* Exception handling
The default return value for any MAL implementation routine is a
string. A NULL indicates that execution was succesful, otherwise
the string encodes information to analyse the error occurred.

The string pattern is strict and easy to analyse for receiving
function.

Exceptions can be cascaded to form a trail of exceptions recognized
during the exection.
@{
@-
@h
#ifndef _MAL_EXCEPTION_H
#include "mal_instruction.h"
/*VARARGS*/
mal_export str throwException(str nme, str fcn, char *format, ...);
mal_export str  raiseException(MalBlkPtr mb, int pc, str name, str msg);
mal_export str appendException(MalBlkPtr mb, int pc, str name, str msg,str old);
mal_export str locateException(MalBlkPtr mb, int pc, str oldmsg);
mal_export void showException(MalBlkPtr mb, int pc, str name, str msg);
mal_export void printFunction(stream *fd, MalBlkPtr mb, int listing);

#define MALEXCEPTION "MALexception"
#define throwMessage(Fcn,Msg)   throwException(MALEXCEPTION,Fcn,"%s",Msg)
#endif /*  _MAL_EXCEPTION_H*/

@-
@c
#include "mal_exception.h"

str appendException(MalBlkPtr mb, int pc, str name, str msg,str oldmsg){
        char buf[4196];
	int i;
	str s,fcn;

	s = mb? getModName(mb): "";
	fcn= mb? getFcnName(mb):"";
	buf[0]=0;
	if(oldmsg) snprintf(buf,4196,"%s",oldmsg);
	i= strlen(buf);
	if(name) snprintf(buf+i,4196-i,"%s:", name);
	i= strlen(buf);
	if(s) snprintf(buf+i,4196-i,"%s.",s);
	i= strlen(buf);
	snprintf(buf+i,4196-i,"%s",fcn);
	i= strlen(buf);
	snprintf(buf+i,4196-i,"[%d]",pc);
	i= strlen(buf);
	if(msg) snprintf(buf+i,4196-i,":%s",msg);
	i= strlen(buf);
	if( buf[i-1]!='\n'){ buf[i]='\n'; buf[i+1]=0;}
        return GDKstrdup(buf);
}
str locateException(MalBlkPtr mb, int pc, str oldmsg){
	str s, msg=0,name=0;

	if( (s= strchr(oldmsg,':'))){
		*s =0;
		name= oldmsg;
		msg= s+1;
	} else msg=oldmsg;
	return appendException(mb,pc,name,msg,0);
}
@-
The linked libraries should use the throwException to signal
an erroneous situation. It takes the name of MAL exception name
to be raised.
@c
/*VARARGS*/
str throwException(str nme, str fcn, char *format, ...){
        char message[GDKMAXERRLEN];
        int len = strlen(MALexception)+1;
        va_list ap;

	sprintf(message,"%s:%s:",nme,fcn);
	len= strlen(message);
        va_start(ap, format);
        vsnprintf(message + len, GDKMAXERRLEN-(len+2), format, ap);
        va_end(ap);

        return GDKstrdup(message);
}
str raiseException(MalBlkPtr mb, int pc, str name, str msg){
	return appendException(mb,pc,name,msg,"");
}
void showException(MalBlkPtr mb, int pc, str name, str msg){
	str n;
	n= raiseException(mb,pc,name,msg);
	GDKerror(n);
	GDKfree(n);
}
