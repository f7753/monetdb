@t MAL dynamic loading and execution
@a M. Kersten
@v 0.0
@* Introduction
In line with previous versions of Monet it is possible to extend
the functionalty using user-defined modules. The corresponding code
is dynamically loaded when the MAL import command is encountered 
from a specific file-system location.
The user-defined modules reside in the library  .../lib/MonetDB, 
they are recognized  as lib_<modulename>.so names.
The corresponding signature files are maintained 
in .../etc/<modulepath>/<modulename>.mal.

[reminder, directory structure of a database dir:
.../bat
.../bin		# database specific binaries
.../boxes	# persistent store for state variables
.../include	# all files needed for a compilation of an application
.../lib		# all libraries (or symbolic links) ,,
.../mal		# all scripts needed by the MAL interpreter
.../mil		# scripts in MIL format
.../sql
]
Mcreatedb should assess existence of a link-to/copy-of the distributed
modules (eg algebra,arithm,..). Alternatively, the library should be
reachable using the monet_mod_path option.
Management of the directories is currently manual

The rationale for this set-up is that database administrators can
extend/overload the modules loaded without affecting the distributed
software package. They are responsible for a proper administration of
the source tree of the user-defined modules.
This scheme also forces database administrators to maintain separate
databases and Monet instances to test out enhanced modules. 
They can share an existing
database using symbolic links to the database GDK  directory, but this
is not recommended for purpose of database integrity and safety.
It is better to develop and test a module on a copy/subset of a production
database first.

The scheme also isolates the functionality embedded in modules from
inadvertise use on non-compliant databases.
[access control issue, how to limit what a user can do on a database?]

Unlike previous versions of Monet, dynamically loaded modules can not 
be unloaded. Dynamic libraries are always global and, therefore, it
is best to load them as part of the server initialization phase.

The MAL program should be compiled with -rdynamic and -ldl.
This enables loading the routines and finding out the address
of a particular routine

For the time being we assume that all commands are statically linked.
@h
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 */
#ifndef _MAL_LINKER_H
#include "mal_scope.h"
#include <dlfcn.h>

/*#define DEBUG_MAL_LINKER  */
#define MONET64 1
mal_export void *getAddress(str fcnname);
mal_export str loadModuleLibrary(str modname);
mal_export void unloadModuleLibraries();
mal_export void initLibraries();
mal_export int 	isPreloaded(str nme);
#endif
@+ Function binding
The mapping from MAL module.function() identifier to an address is
resolved in the function getAddress. Since all modules libraries are loaded
completely with GLOBAL visibility, it suffices to provide the internal function 
name.
Note, however, that the libraries are reference counted. Although we
do;t close them until end of session it seems prudent to maintain
the consistency of this counter.
@c
#include "mal_linker.h"
#include "mal_function.h"	/* for throwException() */
#include "mal_import.h"		/* for slash_2_dir_sep() */

static int noDlopen;

void *getAddress(str fcnname){
	void *dl;
	void (*adr)();
	str msg;

#ifdef DEBUG_MAL_LINKER2
        stream_printf(GDKout,"addres of %s ?\n", fcnname);
#endif
        dl= dlopen(NULL, RTLD_NOW | RTLD_GLOBAL);
        if(dl==NULL){
                GDKfatal("getAddress:can;t get dl-handle\n");
                exit(0);
        }
        adr= dlsym(dl,fcnname);
	msg= dlerror();
	if(noDlopen && adr == NULL)
		GDKerror("address of '%s' not found\n", fcnname);
#ifdef DEBUG_MAL_LINKER2
	if( adr != NULL)
        stream_printf(GDKout,"addres of %s %o %s\n", fcnname,(int) adr, (msg?msg:""));
#endif
	dlclose(dl);
	return adr;
}

@+ Module loading
The default location to search for the module is in monet_mod_path/lib*
unless an absolute path is given.

Loading further relies on the Linux policy to search for the module
location in the following order: 1) the colon-separated list of
directories in the user's LD_LIBRARY, 2) the libraries specified
in /etc/ld.so.cache, and 3) /usr/lib followed by /lib
If the module contains a routine _init, then that code is executed
before the loader returns. Likewise the routine _fini is called just
before the module is unloaded.

A module loading conflict emerges if a function is redefined.
A duplicate load is simply ignored by keeping track of modules
already loaded.
@c
#define LIBPATH "lib/MonetDB"

static str modulesLoaded[128];
static void *handles[128];

str loadModuleLibrary(str modname){
	char buf[MAXPATHLEN];
	char nme[MAXPATHLEN];
	void *handle = NULL;
	str path ="";
	str library=0;
	str msg= NULL;
	int i = 0, idx;

	for(idx=0;modulesLoaded[idx] && idx<128;idx++)
		if( strcmp(modulesLoaded[idx],modname)==0) return 0;
	if( idx== 128){
		GDKfatal("too many modules\n");
	}
	strncpy(nme,modname,MAXPATHLEN);
	if( (library=strrchr(nme,DIR_SEP))  != NULL){
		*library=0;
		library++;
		path = nme;
	} else library= nme;

#ifdef DEBUG_MAL_LINKER
	stream_printf(GDKout,"load module:path=%s, library=%s\n",library,modname);
#endif
	if( modname[0]!='/') {
		int i;
		strncpy(buf,monet_mod_path,MAXPATHLEN);
		i= strlen(buf);
		snprintf(buf+i,MAXPATHLEN-i, "/lib_%s.so", library);

		slash_2_dir_sep(buf);
#ifdef DEBUG_MAL_LINKER
		stream_printf(GDKout,"access:%s %s\n",buf,
				access(buf,R_OK)?"failed":"succeeded");
#endif
		if( access(buf,R_OK)== 0){
			handles[idx]= handle = dlopen(buf, RTLD_NOW | RTLD_GLOBAL);
			msg =dlerror();
#ifdef DEBUG_MAL_LINKER
			stream_printf(GDKout,"load:%s:%s\n",buf,handle==NULL?
				(msg?msg:"failed"):"succeeded");
#endif
			if(msg != NULL)
			return (str) throwException("loaderException",
					"loadModuleLibrary", msg);
			return 0;
		}
	} 
	snprintf(buf,MAXPATHLEN, "%s/%s/", 
			GDKgetenv("gdk_dbfarm"), GDKgetenv("gdk_dbname"));
	i= strlen(buf);
	snprintf(buf+i,MAXPATHLEN-i, "%s/", LIBPATH);
	i= strlen(buf);
	snprintf(buf+i,MAXPATHLEN-i, "lib_%s.so", library);
	slash_2_dir_sep(buf);
#ifdef DEBUG_MAL_LINKER
		stream_printf(GDKout,"access:%s %s\n",buf,
				access(buf,R_OK)?"failed":"succeeded");
#endif
	if( access(buf,R_OK) == 0) {
		handles[idx]= handle = dlopen(buf, RTLD_NOW | RTLD_GLOBAL);
#ifdef DEBUG_MAL_LINKER
		stream_printf(GDKout,"attempt to load:%s\n",buf,handle==NULL?"failed":"succeeded");
#endif
		msg= dlerror();
		if( msg != NULL)
			stream_printf(GDKout,"attempt to load:%s failed\n",modname);
			return (str) throwException("loaderException",
				"loadModuleLibrary", msg);
	}
        MT_set_lock(mal_contextLock, "loadModule");
	for(i=0;modulesLoaded[i] && i<127;i++);
	if( i==128)
		GDKerror("loadModule:too many modules loaded\n");
	else	modulesLoaded[i]= GDKstrdup(modname);
        MT_unset_lock(mal_contextLock, "loadModule");
	return 0;
}
@-
For analysis of memory leaks we should cleanup the libraries before
we exit the server
@c
void unloadModuleLibraries(){
	int i;
	for(i=0;i<128;i++)
	if( handles[i]) dlclose(handles[i]);
}
@+ Static pre-loading
To speedup restart and to simplify debugging, the Monet server can
be statically linked with some (or all) of the modules. 
A complicating factor is then to avoid users to initiate another load
of the module file, because it would lead to a dlopen error.

The partial way out of this dilema is to administer somewhere
the statically bound modules, or to enforce that each module
comes with a known routine for which we can search.

In the current version we use the former approach.
The routine below turns off dynamic loading while parsing the
command signature files.

@c
static str preloaded[]={
	"kernel/bat",
	0 };

int isPreloaded(str nme){
	int i;
#ifdef DEBUG_MAL_LINKER
	stream_printf(GDKout,"load:%s:preloaded?\n",nme);
#endif
	for(i=0;preloaded[i];i++) 
	if( strcmp(preloaded[i],nme)==0) return 1;
	return 0;
}
void initLibraries() {
	noDlopen = TRUE;
/*
	for(i=0;preloaded[i];i++) {
		stream_printf(GDKout,"loading %s\n",preloaded[i]);
		loadModuleLibrary(preloaded[i]);
	}
*/
}
