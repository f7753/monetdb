@t The MAL debugger
@a M.L. Kersten
@* Introduction
To enable ease of debugging and performance monitoring, the MAL interpreter
comes with a gdb-like text-based debugger.
A global table of breakpoints is maintained. Although a little space
consumptive, it is the easiest to maintain and much less expensive
as reserving debugger space in each instruction.

@h
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.
html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 */
#ifndef _MAL_DEBUGGER_H
#define _MAL_DEBUGGER_H

#include "mal_client.h"

#define MAXBREAKS 32
#define MDBmarker "#mdb "

typedef struct {
	MalBlkPtr 	brkBlock[MAXBREAKS];
	int		brkVar[MAXBREAKS];
	char		brkCmd[MAXBREAKS];
	str		brkVarName[MAXBREAKS];
	int		brkTop;
} mdbStateRecord, *mdbState;

mal_export void mdbSetBreakpoint(Client cntxt, MalBlkPtr mb, InstrPtr p, str name,char cmd);
mal_export void mdbShowBreakpoints(Client cntxt);
mal_export void mdbCommand(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p, int pc);
mal_export void mdbStep(Client cntxt, MalBlkPtr mb, MalStkPtr stk, int pc);
mal_export void mdbHelp(FILE *f);
mal_export void printStackElm(FILE *f, MalBlkPtr mb,VarPtr n, ValPtr v,int index);
mal_export void printStack(FILE *f, MalBlkPtr mb, MalStkPtr s);

mal_export int mdbToggle(MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
mal_export int mdbSetCmd(MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
mal_export void printBBPinfo(FILE *out);
#endif /* _MAL_DEBUGGER_h */
@+ Debugger framework
Before the interpreter is allowed to proceed we give control
to the user to alter the trace/debugger options.
@c
#include "mal_debugger.h"

mdbStateRecord mdbTable[MAL_MAXCLIENTS];

char isBreakpoint(Client cntxt, InstrPtr p){
	int i;

	/* printf("test breakpoint %d\n", p->argv[0]);*/
	for(i=0;i<mdbTable[cntxt->idx].brkTop;i++)
	if( p->argv[0]== mdbTable[cntxt->idx].brkVar[i] ||
	    (p->fcnname && 
	     strcmp(p->fcnname, mdbTable[cntxt->idx].brkVarName[i])==0))
		return mdbTable[cntxt->idx].brkCmd[i];
	return 0;
}
@-
Break points can be set on assignment to a specific variable
or specific function name.
@c
void mdbSetBreakpointName(Client cntxt, MalBlkPtr mb, str name, char cmd){
	int i,j;
	char *c=name;
	InstrPtr p;
	mdbState mdb= mdbTable + cntxt->idx;

	while(*c && (isalnum(*c) || *c=='$' || *c=='_')) c++;
	*c = 0;
	for(i=0;i<mb->stop; i++){
		p= getInstrPtr(mb,i);
		if( (p->fcnname && strcmp(p->fcnname,name) == 0) ||
		    strcmp(getVarName(mb,0),name) == 0){
			mdbSetBreakpoint(cntxt,mb,p,name,cmd);
			return;
		}
	}
}

void mdbSetBreakpoint(Client cntxt, MalBlkPtr mb, InstrPtr p, str name, char cmd)
{	mdbState mdb= mdbTable + cntxt->idx;
	mdb->brkBlock[mdb->brkTop] = mb;
	mdb->brkVar[mdb->brkTop] = p->argv[0];
	mdb->brkVarName[mdb->brkTop] = name;
	mdb->brkCmd[mdb->brkTop] =cmd;
	if( mdb->brkTop+1< MAXBREAKS) 
		mdb->brkTop++;
}
void mdbShowBreakpoints(Client cntxt)
{	int i;
	mdbState mdb= mdbTable + cntxt->idx;

	for(i=0;i<mdb->brkTop;i++)
	fprintf(cntxt->fdout,"breakpoint %s [%d]\n",mdb->brkVarName[i], mdb->brkVar[i]);
}

void mdbClrBreakpoint(Client cntxt, InstrPtr p)
{	int i,j=0;
	mdbState mdb= mdbTable + cntxt->idx;

	for(i=0;i<mdb->brkTop;i++){
		mdb->brkVar[j]= mdb->brkVar[i];
		mdb->brkVarName[j]= mdb->brkVarName[i];
		mdb->brkCmd[j]= mdb->brkCmd[i];
		mdb->brkBlock[j]= mdb->brkBlock[i];
		if( mdb->brkVar[i] != p->argv[0]) j++;
	}
	mdb->brkTop = j;
}
void mdbClrBreakpointName(Client cntxt, str name)
{	int i,j=0;
	mdbState mdb= mdbTable + cntxt->idx;

	for(i=0;i<mdb->brkTop;i++){
		mdb->brkVar[j]= mdb->brkVar[i];
		mdb->brkVarName[j]= mdb->brkVarName[i];
		mdb->brkCmd[j]= mdb->brkCmd[i];
		mdb->brkBlock[j]= mdb->brkBlock[i];
		if( strcmp(mdb->brkVarName[i],name) ) j++;
	}
	mdb->brkTop = j;
}

#define skipBlanc(X)	while(isspace(*X)) X++;
#define skipNonBlanc(X)	while(!isspace(*X)) X++;
#define skipWord(X)	skipNonBlanc(X); skipBlanc(X);

void printCall(Client cntxt, MalBlkPtr mb, MalStkPtr stk, int pc){
	InstrPtr p;
	int k;

	p= getInstrPtr(mb, pc);
	if( p != NULL){
		promptInstruction(cntxt->fdout,mb,p);
		p= getInstrPtr(mb, 0);
		fprintf(cntxt->fdout," at #%d in %s(", 
			getPC(mb,p), getFcnName(mb));
		for(k= p->retc; k<p->argc; k++){
			VALprint(cntxt->fdout, &stk->stk[p->argv[k]]);
			if( k < p->argc-1 ) fprintf(cntxt->fdout,",");
		}
		fprintf(cntxt->fdout,")\n");
	}
}
void printTraceCall(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
	int k;
	str msg;
	str s;

	msg= instruction2str(mb,p,0);
	s= strchr(msg,'(');
	if(s){
		s++;
		*s = 0;
		fprintf(cntxt->fdout,"%s",msg);
		for(k= p->retc; k<p->argc; k++){
			VALprint(cntxt->fdout, &stk->stk[p->argv[k]]);
			if( k < p->argc-1 ) fprintf(cntxt->fdout,",");
			}
		fprintf(cntxt->fdout,")\n");
	} else fprintf(cntxt->fdout,"%s\n",msg);
	GDKfree(msg);
}

@+ MDB module implementation 
The following routines are available for inclusion also in MAL programs.
Either one set is sufficient to produce the required action.
Note that the mdbToggle command is called mostly from within a
(dummy) function. Therefore, we should also export the debugging mode
to the context.
@c
#define MDBstatus(X) fprintf(cntxt->fdout,"#Monet Debugger %s\n", (X?"on":"off"));

int mdbToggle(MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
	Client cntxt= getClient();
	int b;
	if( p->argc==1){
		/* Toggle */
		stk->cmd= stk->cmd? 0: 'n';
		cntxt->itrace = cntxt->itrace == 0;
		if( stk->up) stk->up->cmd=  b?'n':0;
		return 0;
	}
	if( p->argc >1){
		b= *(int *) getArgReference(stk,p,1);
	} else b= stk->cmd; 
	if( stk->cmd == 0) stk->cmd= b?'n':0;
	if( stk->up) stk->up->cmd=  b?'n':0;
	cntxt->itrace= 'n';
	MDBstatus(b);
	return 0;
}

int mdbSetCmd(MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
	Client cntxt= getClient();
	int b;
	b= *(chr *) getArgReference(stk,p,1);
printf("mdbSetCmd '%c'\n",b);
	stk->cmd= b;
	cntxt->itrace= 'T';
	MDBstatus(b);
	return 0;
}

@+ MAL parser
The debugger structure is inherited from GDB.
The routine mdbCommand is called with p=0 after finishing a mal- function call
and before continuing at the next level of invocation.
The commands are self-explanatory.

The prompt string sent to the user indicates the debugger mode.
@c
void mdbCommand(Client cntxt,MalBlkPtr mb, MalStkPtr stk, InstrPtr p, int pc){
	char *b;
	FILE *out = cntxt->fdout;

	if( p != NULL){
		fprintf(out,MDBmarker);
		printInstruction(out,mb,p);
	}
	do{
	if( readClient(cntxt,(cntxt==mal_clients?"mdb>":"\001mdb>\001"))==0){
		fprintf(stdout,"Client %s disappeared\n",cntxt->user);
		return;
	}
	b= cntxt->input;
	skipBlanc(b);
	switch(*b){
	case 0: return;
	case 'c': if( strncmp("call",b,4)==0){
			GDKerror("call instruction not yet implemented\n");
			break;
		 }
		 stk->cmd= 'c';
		 return;
	case 'h': mdbHelp(out); break;
	case 'q': 
		stk->cmd= 'q';/* return from this debugger */
		cntxt->itrace= 0;
		MDBstatus(0);
		return;
	case 'f': /* finish */
	case 'n': /* next */
	case 's': /* step */
		if( strncmp("scope",b,10)==0){
			showScopeStatistics(out,cntxt->nspace);
			return;
		} 
		stk->cmd= *b;
		return;
	case 'm': /* display a module */
		skipWord(b);
		skipBlanc(b);
		debugScope(cntxt->nspace,b);
		break;
	case 't': /* trace breakpoint */
		if( strncmp("type",b,4)==0){
			skipWord(b); skipBlanc(b);
			if(strchr(b,'\n')) *strchr(b,'\n')= 0;
			traceFcnName= GDKstrdup(b);
		} else
		if( strncmp("timer",b,5)==0){
			if( cntxt->timer==0)
				cntxt->timer = GDKusec();
			else cntxt->timer = 0;
		}
		break;
	case 'T': /* trace instruction calls */
		printTraceCall(cntxt,mb,stk,p);
		break;
	case 'b':
		if( strncmp(b,"bbp",3)==0){
			printBBPinfo(out);
			continue;
		}
		skipWord(b);
		if(*b==0) { mdbShowBreakpoints(cntxt); continue;}
		if( !isspace(*b) && *b != 0){
			/* set breakpoints by name */
			mdbSetBreakpointName(cntxt,mb,b,*b);
		} else {
			mdbSetBreakpoint(cntxt,mb,p,getArgName(mb,p,0),*b);
		}
		continue;
	case 'd':
		/* get rid of break point */
		if( strncmp(b,"do",2)==0 && stk->down!= NULL){
			fprintf(out,"%sgo down the stack\n",MDBmarker);
			stk= stk->down;
			mb = stk->blk;
			break;
		}
		skipWord(b);
		if(*b && !isspace(*b)){
			mdbClrBreakpointName(cntxt,b);
		} else {
			mdbClrBreakpoint(cntxt,p);
		}
		continue;
	case 'p':
	{	 int i;
		char *t;
		skipWord(b);
		t=b;
		skipNonBlanc(t);
		*t = 0;
		/* search the symbol */
		i = findVariable(mb,b);
		if( i<0){
			fprintf(out,"%sSymbol not found\n",MDBmarker);
		} else{
			printStackElm(out,mb,getVar(mb,i),stk->stk+i,i);
		}
		continue;
	}
	case 'u':
		if( stk->up == NULL) break;
		fprintf(out,"%sgo up the stack\n",MDBmarker);
		stk= stk->up;
		mb = stk->blk;
		printCall(cntxt,mb,stk,pc);
		continue;
	case 'v': /* variable bindings */
		printStack(out,mb,stk);
		continue;
	case 'w':
	{	MalStkPtr w;
		MalBlkPtr mw=mb;
		for(w=stk;w!= NULL; w=w->up){
			mw = w->blk;
			fprintf(out,MDBmarker);
			printCall(cntxt,mw,w,pc);
		}
		continue;
	}
@-
While debugging it should be possible to inspect the symbol 
table using the 'module.function' name. The default is to list all
signatures satisfying the pattern.
@c
	case 'L': 
	case 'l': /* list the current code block */
	{	str modname, fcnname;
		Scope fsym;
		Symbol fs;
		int i;

		mal_xlisting= *b=='L';
		skipWord(b);
		if( *b!= 0){
			modname=b;
			fcnname= strchr(b,'.');
			if( fcnname == NULL){
				fsym= findScope(cntxt->nspace,modname);
				if( fsym==0) {
					fprintf(out,"%smodule not found\n",
							MDBmarker);
					continue;
				}
				for(i=0;i<MAXSCOPE;i++){
					fs= fsym->subscope[i];
					while(fs != NULL){
						printSignature(out,fs);
						fs= fs->peer;
					}
				}
				continue;
			} 
			*fcnname = 0;
			fcnname ++;
			fsym= findScope(cntxt->nspace,modname);
			if( fsym==0) {
				fprintf(out,"%smodule not found\n",MDBmarker);
				continue;
			}
			/* display the overloaded symbol definition */
			if( displayScope(out,fsym,fcnname)==0){
				fprintf(out,"%sSymbol '%s.%s' not found\n",
					MDBmarker,modname,fcnname);
			} 
		} else printFunction(out,mb);
		continue;
	}
	case 'r': /* reset program counter */
		fprintf(out,"%srestart with current stack\n",MDBmarker);
		stk->cmd= 'r';
		return;
	default:
		fprintf(out,"%sdebugger command expected\n",MDBmarker);
		mdbHelp(out);
	}
	} while(1);
}
void mdbStep(Client cntxt, MalBlkPtr mb, MalStkPtr stk, int pc ){
	InstrPtr p;
	char newcmd;

	p= getInstrPtr(mb,pc);
	switch(stk->cmd){
	case 'c':
		if( newcmd= isBreakpoint(cntxt,p) ){
			if( newcmd == 't') 
				fprintf(cntxt->fdout,"show value nyi \n");
			mdbCommand(cntxt,mb,stk,p,pc);
		} 
		break;
	case 's': case 'n':
		if( cntxt->timer){
			long n= GDKusec();
			long l= n - cntxt->timer;
			fprintf(cntxt->fdout,"%s[%-3d usec]\n",MDBmarker,l);
		}
		mdbCommand(cntxt,mb,stk,p,pc);
		break;
	case 'r': stk->cmd = 'n';
		if( cntxt->timer){
			long l= GDKusec() - cntxt->timer;
			fprintf(cntxt->fdout,"[%d usec]",l);
		}
		break;
	case 'T':
		fprintf(cntxt->fdout,MDBmarker);
		if( cntxt->timer){
			long n= GDKusec();
			long l= n - cntxt->timer;
			fprintf(cntxt->fdout,"%s[%-3d usec]\n",MDBmarker,l);
		}
		printTraceCall(cntxt,mb,stk,p);
	}
	if( cntxt->timer) cntxt->timer = GDKusec();
	fflush(cntxt->fdout);
}
@+ Utilities
DUmping a stack on a file is primarilly used for debugging.
Printing the stack requires access to both the symbol table and
the stackframes.
Beware that a stack frame need not be initialized with null values.
Instead, it has been zeroed upon creation.
@c
void printStack(FILE *f, MalBlkPtr mb, MalStkPtr s){
        int i = 0;

	fprintf(f,MDBmarker);
        fprintf(f,"Stack size=%d top=%d\n",s->stksize,s->stktop);
        for( ; i<mb->vtop ; i++){
		printStackElm(f, mb, getVar(mb,i), s->stk+i,i);
        }
}

void printStackElm(FILE *f, MalBlkPtr mb, VarPtr n, ValPtr v, int index){
	str nme;
	fprintf(f,"[%d] %s\t= ",index,n->name);
	if( n->type == TYPE_void)
		fprintf(f,"nil");
	else
	if( n->isaconstant) {
		VALprint(f,&n->value);
	} else {
	 	VALprint(f, v);
	}
	nme= malTypeName(n->type);
	fprintf(f,":%s%s", nme, (n->isaconstant?" constant":""));
	fprintf(f,"\n");
	GDKfree(nme);
}
@-
The memory positions for the BATs is useful information to
asses for memory fragmentation.
@= heapinfo
hp= &b->@1;
if(hp->base){
	printf("\t@1=%d size=%d\n",hp->base, hp->size);}
@= hashinfo
h= &b->@1;
if(h->mask){
        printf("\t@1=%d size=%d\n",h, sizeof(*h));
        printf("\t@1link=%d size=%d\n",h->link, (h->mask+h->lim+1)*sizeof(int));
}
@-
The memProfileVector routine produces a character string to represent
the usage of memory by BAT information. The characters are interpreted
as follows:
.=unused, X=completely used, [0-9]=small elements within the granule
More then 9 elements makes it full. 
@= setVector
	start= (((long)@1)-min)/granule;
	lim= (((long)@1)-min + @2)/granule;
	printf("start %d lim %d\n",start,lim);

@c
str memProfileVector(int cells){
	str v= GDKmalloc(cells+1);
	int i;
	long max= (long) sbrk(0);
	long min= 0;
	long granule;
	if( cells<=0) {
		GDKerror("memProfileVector:positive argument expected\n");
		return GDKstrdup("");
	}
	v= GDKmalloc(cells+1);
	if( v== 0) 
		GDKfatal("memProfileVector:malloca failure\n");
	
	for(i=0; i<cells;i++) v[i]='.';
	v[i]=0;

	for(i=1; i<BBPsize; i++)
	if( BBP_status(i) & BBPLOADED ){
		BAT *b = BATdescriptor(i);
		Heap *hp;
		Hash *h;
		long start,lim;

		printf("\tdesc=%d size=%d\n",b, sizeof(*b));
		hp= b->batBuns;
		printf("\tbuns=%d size=%d\n",hp->base, hp->size);
		if( min==0){
			min= (long)b;
			max= min + GDKmem_heapsize();
			granule= (max-min)/cells;
			printf("granule %dK\n",granule/1024);
		}
		@:setVector(b,sizeof(*b))@
		@:setVector(hp->base,hp->size)@

		@:heapinfo(hheap)@
		@:heapinfo(theap)@
		@:heapinfo(haccelerator)@
		@:heapinfo(taccelerator)@
		@:hashinfo(hhash)@
		@:hashinfo(thash)@
	}
	return v;
}
void printBBPinfo(FILE *out){
	int i;
	str v;

	fprintf(out,"#BBP memory layout\n");
	fprintf(out,"#heap maximum =%d/M\n",GDKmem_heapsize()/(1024*1024));
	v= memProfileVector(32);
	fprintf(out,"#%s\n",v);
	GDKfree(v);
#ifdef GDK_VM_KEEPHISTO
	fprintf(out,"#BBP VM history available\n");
#else
	fprintf(out,"#BBP VM history not available\n");
#endif
}
@-
Some utilities for the debugger 
@c
void mdbHelp(FILE *f){
	fprintf(f,"next	-- Advance to next statement\n");
	fprintf(f,"continue -- Continue program being debugged\n");
	fprintf(f,"bbp -- BBP memory layout\n");
	fprintf(f,"break -- set breakpoint on current instruction\n");
	fprintf(f,"break <var> -- break on assignment to <var>\n");
	fprintf(f,"step -- advance to next MAL instruction\n");
	fprintf(f,"module -- display the module [scopes] \n");
	fprintf(f,"finish -- finish current call\n");
	fprintf(f,"quit -- leave debugger\n");
	fprintf(f,"list -- list current program block\n");
	fprintf(f,"variables -- print variable bindings\n");
	fprintf(f,"where -- print stack trace\n");
	fprintf(f,"print <var> -- display value of a variable\n");
	fprintf(f,"run -- restart current procedure\n");
	fprintf(f,"timer -- produce micro-second response time\n");
	fprintf(f,"help -- this message\n");
}
