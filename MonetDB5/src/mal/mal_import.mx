@t MAL import
@a M. Kersten
@v 0.0
@+ MAL import
The import statement simple switches the parser to a new input file, which
takes precedence. The context for which the file should be interpreted
is determined by the module name supplied.
Typically this involves a module, whose definitions are stored at 
a known location.

@h
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.
html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 */
#ifndef _MAL_IMPORT_H
#define _MAL_IMPORT_H

#include "mal_client.h"
#include "mal_session.h"

mal_export void slash_2_dir_sep(str fname);
mal_export void malImport(Client c, str modname, str libname, int listing);
mal_export stream *malOpenSource(str fname);
mal_export str malLoadScript(Client c, str modname);
mal_export void callString(Client c, str s, int listing);
mal_export void runScript(Client c, str fname, int listing,MalStkPtr stk);
#endif /*  _MAL_IMPORT_H*/
@-
The import context is located. If the module already exists, 
we should silently skip parsing the file. This is handled at the parser level.
The files are extracted from a default location,
namely the DBHOME/modules directory.

If the string starts with '/' or '~' the context is not changed.

Every IMPORT statement denotes a possible dynamic load library.
Make sure it is loaded as well.
@c
#include "mal_import.h"

void slash_2_dir_sep(str fname){
	char *s;
	for(s=fname;*s; s++)
	if( *s== '/') *s= '/';
}
stream *malOpenSource(str fname){
	stream *fd= NULL;
	char path[PATHLENGTH];

	strncpy(path,fname,PATHLENGTH);
        slash_2_dir_sep(path);
	fd = open_rastream(path);
	if( fd->errnr== OPEN_ERROR ){
	    char path2[PATHLENGTH];
	    /* try to locate the file with 'mal' extension */
	    snprintf(path2,PATHLENGTH, "%s.mal",path);
            if (fname[0] == DIR_SEP) {
                strncpy(path, path2, PATHLENGTH);
                fd = open_rastream(path);
            } else {
	    /* try to locate the file in the monet_mal_path store */
		int i=0;
		strncpy(path,monet_mal_path,PATHLENGTH);
		i= strlen(path);
                snprintf(path+i,PATHLENGTH-i, "/%s.mal",fname);
		slash_2_dir_sep(path);
                fd = open_rastream(path);
            }
        }
	return fd;
}
@-
The malLoadScript routine merely reads the contents of a file into
the input buffer of the client. It is typically used in situations
where an intermediate file is used to pass commands around.
@c
str malLoadScript(Client c, str modname){
	stream *fd;
	size_t rd=0, max=0, len=0;
	str s;

	c->nxt = c->input = (char *) GDKmalloc(max=16*BLOCKSIZE);
	c->limit = c->input + max;
	*c->nxt=0;
        fd= malOpenSource(modname);
	if( fd->errnr == OPEN_ERROR)
                return throwException(MALEXCEPTION,"malImport",
			"could not open file: %s\n", modname);
	while(1 ){
		rd= fd->read(fd, c->nxt, (size_t) 1, (size_t) max);
		if( rd<=0) { c->input[0]=0; break;}
		if( rd<max) { c->input[len+rd]=0; break;}
		len+= max;
		max= BLOCKSIZE;
		s= GDKmalloc(len+max+2);
		if( s == 0)
			GDKfatal("unable to allocate buffer\n");
		strncpy(s,c->input,len);
		GDKfree(c->input);
		c->input=s;
		c->nxt= c->input+len;
		c->limit = c->input +len+ max+2;
	}
	c->nxt= c->input;

        fd->close(fd);
	return NULL;
}

void processString(Client c)
{	
/*
	runScenario(c);
*/
	if( MALparser(c) == 0){
		if(MALoptimizer(c)==0) 
			MALengine(c);
	} else showErrors(c); 
}
@-
Beware that we have to isolate the execution of the source file
in its own environment. E.g. we have to removed the execution
state until we are finished.
@c
void malImport(Client c, str modname, str libname, int listing){
	str	s,msg;

	str oldinput= c->input, oldnxt=c->nxt, oldlimit= c->limit;
	int oldlisting = c->listing;
	Scope oldscope = c->nspace;
	Symbol oldprg = c->curprg;
	MalStkPtr oldstk = c->glb;

	if( s= malLoadScript(c,modname) ) {
		stream_printf(getClient()->fdout,"%s\n",s);
		return;
	}
@-
Load any associated module first, because this sets the context for
resolving addresses. 
@c
	if(libname) {
		if( s= (str) loadModuleLibrary(libname) ){
			stream_printf(getClient()->fdout,"%s\n",s);
			return;
		}
	}

	c->listing = listing;
	c->glb =0;
	initClientPrg(c,"main"); /* create new context */
	processString(c);

	/* restore the context */
	if( c->input){ GDKfree(c->input); c->input= NULL;}
	c->glb= oldstk;
	c->listing = oldlisting;
	c->input= oldinput;
	c->limit= oldlimit;
	c->nxt = oldnxt;
	c->nspace= oldscope;
	c->curprg = oldprg;
}
@+ File and input processing
A recurring situation is to execute a stream of simple MAL instructions
stored on a file or comes from standard input. We parse one MAL 
instruction line at a time and attempt to execute it immediately.
Note, this precludes entereing complex MAL structures on the primary
input channel, because 1) this requires complex code to keep track
that we are in 'definition mode' 2) this requires (too) carefull
typing by the user, because he can not make an typeing error

Therefore, all compound code fragments should be loaded and executed
using the run(file) command.

A stack frame is initialized to keep track of global variables.
The nesting of barrier blocks should ensure detection of the end
of the hierarchy.

Running looks much like an Import operation, except for the execution
phase. This is performed in the context of an a priori defined
stack frame. Life becomes a little complicated when the script contains
a definition.

@c
void runScript(Client c, str fname, int listing, MalStkPtr glb)
{	
	stream *fd, *oldinput;
	int oldlisting= c->listing;
	int oldmode = c->blkmode;
	str oldprompt = c->prompt;
	MalStkPtr oldglb = c->glb;

	oldinput= c->fdin;
	c->fdin = fd;
	c->listing = listing;
	c->blkmode = 0;
	c->prompt = "";	/* do not produce visible prompts */
	c->glb= NULL;
	initClientPrg(c,"main");

	GDKerror("runScript is not yet defined\n");
	c->fdin = oldinput;
	c->listing = oldlisting;
	c->blkmode = oldmode;
	c->prompt = oldprompt;
	c->glb = oldglb;
	(void) fd->close(fd);
}
void callString(Client c, str s, int listing)
{	
	int oldlisting= c->listing;
	int oldmode = c->blkmode;
	str oldprompt = c->prompt;
	str oldnxt = c->nxt;
	str oldinput= c->input;
	str oldlimit = c->limit;
	MalStkPtr oldglb = c->glb;
	str msg;

	c->listing = listing;
	c->blkmode = 0;
	c->prompt = "";	/* do not produce visible prompts */
	
	initClientPrg(c,"main");

	c->limit = s + strlen(s)+1;
	c->input = s;
	c->nxt= c->input;
	c->glb= NULL;
	processString(c);

	c->limit= oldlimit;
	c->nxt= oldnxt;
	c->input= oldinput;
	c->listing = oldlisting;
	c->blkmode = oldmode;
	c->prompt = oldprompt;
	c->glb = oldglb;
}
