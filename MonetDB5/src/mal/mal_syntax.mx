@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@'
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@'
@' The Original Code is the Monet Database System.

@a M. L. Kersten
@v 1.0
@* MAL syntax summary
The MAL syntax is summarized below in extended BNF.
Alternative constructs are seperated by '$|$' and grouped
by parenthesis.
Optional parts are marked with square brackets.
A repetition is marked with either '+' or '*' to
indicate at least once and many times, respectively.
Lexical tokens are illustrated in small capitals.
@T

\begin{tabular}{l l l}
program		& : & ( definition [helpinfo] ';' \\
		& $|$ & statement ';' ) *\\

definition	& : & moduleStmt $|$ includeStmt \\
		& $|$ & commandStmt $|$ patternStmt \\
		& $|$ & functionStmt $|$ factoryStmt\\
		& $|$ & includeStmt\\

moduleStmt	& : & {\sc atom} {\sc module} ident [':'ident]\\
		& $|$ & {\sc module} ident \\

commandStmt	& : & {\sc command } header \\
		& & {\sc address } identifier\\
patternStmt	& : & {\sc pattern } header \\
		& & {\sc address } identifier\\

functionStmt	& : & {\sc function } header \\
		& & statement* \\
		& & {\sc end } identifier\\
factoryStmt	& : & {\sc factory } header \\
		& & statement* \\
		& & {\sc end } identifier\\

includeStmt	& : & {\sc include} identifier \\
		& $|$ & {\sc include} string\_literal\\

helpinfo	& : & {\sc comment} string\_literal \\

header		& : & hdrName '(' params ')' result \\
hdrName		& : & [ moduleId '.'] identifier \\
result		& : & paramType $|$ '(' params ')'\\
params		& : & binding [',' binding]* \\
binding		& : & identifier typeName [ props ]\\

typeName	& : & scalarType $|$ collectionType \\
		& $|$ & ':' {\sc any} [digit] \\
scalarType	& : & ':' {\sc identifier} \\
collectionType	& : & ':' {\sc bat} ['[' colType ',' colType ']'] \\
colType		& : & scalarType $|$ anyType \\

props	& : & ['\{' property [ ',' property]* '\}']\\
property	& : & identifier \\

statement	& : & tag varlist [':=' expr ] props\\
tag     	& $|$ & {\sc return} $|$ {\sc barrier} $|$ {\sc catch}\\
		& $|$ & {\sc leave} $|$ {\sc redo} $|$ \\
varlist		& : & variable \\
		& $|$ & '(' variable {',' variable}* ')' \\
variable	& : & identifier propQualifier \\

expr    	&: & fcncall $|$ [factor  operator] factor \\
factor  	&: & constant $|$ var \\

constant	& : & {\sc literal\_constant} $|$ {\sc nil}\\
\end{tabular}

@-
@{
@c
/* dummy C stuff */
@}
