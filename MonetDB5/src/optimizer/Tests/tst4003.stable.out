stdout of test 'tst4003` in directory 'src/optimizer` itself:


# 11:08:28 >  
# 11:08:28 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=44745 --set sql_port=56225 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4003.mal </dev/null
# 11:08:28 >  

# Monet Database Server V4.7.1
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
## The 4000 series deals with strategic optimizer constructs
## common subexpression evaluation
#optimizer.setDebug();
#optimizer.commonExpressionRemoval();
#b:= new(:str,:str);
#c:= new(:str,:str);       # identical until insert takes place
#d:= select(b,"hello","world");
#e:= select(b,"hello","world");    # mapped onto one instruction
#
#
function user.main():int;	# 0  (main:int)
# The 4000 series deals with strategic optimizer constructs 	# 1  ($2:str)
# common subexpression evaluation 	# 2  ($4:str)
    b := bbp.new(:str,:str);	# 3 CMDBATnew (b:bat[:str,:str])<-($8:str)($8:str)
    c := bbp.new(:str,:str);	# 4 CMDBATnew (c:bat[:str,:str])<-($8:str)($8:str)
# identical until insert takes place 	# 5  ($11:str)
    d := algebra.select(b,"hello","world");	# 6 ALGselect (d:bat[:str,:str])<-(b:bat[:str,:str])($13:str)($14:str)
# mapped onto one instruction 	# 7  ($17:str)
end main;	# 8  

# 11:08:28 >  
# 11:08:28 >  Done.
# 11:08:28 >  

