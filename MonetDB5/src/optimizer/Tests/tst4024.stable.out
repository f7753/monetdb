stdout of test 'tst4024` in directory 'src/optimizer` itself:


# 08:01:46 >  
# 08:01:46 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst4024.mal </dev/null
# 08:01:46 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## testing the heuristic rules
## relations r(H,T) and s(H,T)
#function qry();
#r:= new(:int,:int);
#insert(r,5,1);
#insert(r,6,2);
#insert(r,7,3);
#insert(r,8,4);
#sc:= copy(r);
#s:= reverse(sc);
#
#print(r);
#print(s);
#
## traditional push select through join
## r.T=s.H and s.T<6
#t:= join(r,s);
#z:= select(t,0,6);
#print(z);
#
## alternative instruction
## s.H=r.H and s.T<2
#a:= semijoin(s,r);
#z:= select(a,0,2);
#print(z);
#debugOptimizers();
#SPoptimizer();
#end qry;
function user.qry():void;	# 0  (qry:void)
    r := bbp.new(:int,:int);	# 1 CMDBATnew (r:bat[:int,:int])<-($2:int)($2:int)
    bat.insert(r,5:int,1:int);	# 2 BKCinsert_bun ($3:bat[:int,:int])<-(r:bat[:int,:int])($4:int)($5:int)
    bat.insert(r,6:int,2:int);	# 3 BKCinsert_bun ($6:bat[:int,:int])<-(r:bat[:int,:int])($7:int)($8:int)
    bat.insert(r,7:int,3:int);	# 4 BKCinsert_bun ($9:bat[:int,:int])<-(r:bat[:int,:int])($10:int)($11:int)
    bat.insert(r,8:int,4:int);	# 5 BKCinsert_bun ($12:bat[:int,:int])<-(r:bat[:int,:int])($13:int)($14:int)
    sc := algebra.copy(r);	# 6 ALGcopy (sc:bat[:int,:int])<-(r:bat[:int,:int])
    s := bat.reverse(sc);	# 7 BKCreverse (s:bat[:int,:int])<-(sc:bat[:int,:int])
    io.print(r);	# 8 IOprint_val ($17:int)<-(r:bat[:int,:int])
    io.print(s);	# 9 IOprint_val ($18:int)<-(s:bat[:int,:int])
    t := algebra.join(r,s);	# 10 ALGjoin (t:bat[:int,:int])<-(r:bat[:int,:int])(s:bat[:int,:int])
    z := algebra.select(t,0:int,6:int);	# 11 ALGselect (z:bat[:int,:int])<-(t:bat[:int,:int])($21:int)($7:int)
    io.print(z);	# 12 IOprint_val ($22:int)<-(z:bat[:int,:int])
    a := algebra.semijoin(s,r);	# 13 ALGsemijoin (a:bat[:int,:int])<-(s:bat[:int,:int])(r:bat[:int,:int])
    z := algebra.select(a,0:int,2:int);	# 14 ALGselect (z:bat[:int,:int])<-(a:bat[:int,:int])($21:int)($8:int)
    io.print(z);	# 15 IOprint_val ($24:int)<-(z:bat[:int,:int])
    optimizer.setDebug();	# 16 QOTdebugOptimizers ($25:void)
    optimizer.selectPushdown();	# 17 QOTSPoptimizer ($26:str)
end qry;	# 18  
#
function user.main():int;	# 0  (main:int)
# testing the heuristic rules 	# 1  ($2:str)
# relations r(H,T) and s(H,T) 	# 2  ($4:str)
# traditional push select through join 	# 3  ($6:str)
# r.T=s.H and s.T<6 	# 4  ($8:str)
# alternative instruction 	# 5  ($10:str)
# s.H=r.H and s.T<2 	# 6  ($12:str)
end main;	# 7  

# 08:01:46 >  
# 08:01:46 >  Done.
# 08:01:46 >  

