stdout of test 'tst4900` in directory 'src/optimizer` itself:


# 11:08:38 >  
# 11:08:38 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=44745 --set sql_port=56225 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4900.mal </dev/null
# 11:08:38 >  

# Monet Database Server V4.7.1
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
#function f1(s:str):void;
#	t1:bat[:void,:dbl] := bbp.bind("TREC2003_test_priors_8x32318");
#	t2 := array.grid(132000,8,1,0);
#	t3 := array.grid(1,100,10560,0);
#	#t4 := batcalc.*(8,t3); doing a reconstruction saves a lot
#	t4 := array.grid(1,100,10560,0,8);
#	t5 := batcalc.+(t2,t4);
#	t6 := oid(t5);
#	t7 := algebra.join(t6,t1);
#	t8 := dbl(1.0);
#	t9 := dbl(2.0);
#	t10 := dbl(3.1415);
#	t11 := *(t9,t10);
#	t12 := dbl(14.0);
#	t13 := pow(t11,t12);
#	t14 := sqrt(t13);
#	t15 := dbl(t14);
#	t16:bat[:void,:dbl] := bbp.bind("TREC2003_test_sigs_14x8x32318");
#	t17 := array.grid(800,14,1,0);
#	t18 := array.grid(100,8,14,0);
#	t19 := array.grid(1,100,112,0);
#	#t20 := batcalc.*(8,t19);
#	t20 := array.grid(1,100,112,0,8);
#	t21 := batcalc.+(t18,t20);
#	t22 := batcalc.*(14,t21);
#	t23 := batcalc.+(t17,t22);
#	t24 := oid(t23);
#	t25 := algebra.join(t24,t16);
#	t30 := oid(t21);
#	t31 := array.grid(1,800,1,0);
#	t32 := aggrX3.prod(t25,t30,t31);
#	t33 := batcalc.*(t15,t32);
#	t34 := batcalc./(t8,t33);
#	t40 := algebra.join(t6,t34);
#	t41 := dbl(-0.5);
#	#t42:bat[:void,:dbl] := bbp.bind("Query_14x1320");
#	t42:bat[:void,:dbl] := bbp.bind(s);
#	t43 := array.grid(1056000,14,1,0);
#	t44 := array.grid(100,1320,112,0);
#	#t45 := batcalc.*(14,t44);
#	t45 := array.grid(100,1320,112,0,14);
#	t46 := batcalc.+(t43,t45);
#	t47 := oid(t46);
#	t48 := algebra.join(t47,t42);
#	t49:bat[:void,:dbl] := bbp.bind("TREC2003_test_mus_14x8x32318");
#	t51 := array.grid(132000,8,14,0);
#	t52 := array.grid(1,100,147840,0);
#	#t53 := batcalc.*(8,t52);
#	t53 := array.grid(1,100,147840,0,8);
#	t54 := batcalc.+(t51,t53);
#	t55 := batcalc.*(14,t54);
#	t56 := batcalc.+(t43,t55);
#	t57 := oid(t56);
#	t58 := algebra.join(t57,t49);
#	t59 := batcalc.-(t48,t58);
#	#t61 := batcalc.pow(t59,t9);
#	t61 := batcalc.*(t59,t59);
#	t71 := algebra.join(t57,t16);
#	t72 := batcalc./(t61,t71);
#	t76 := batcalc.*(1320,t52);
#	t77 := batcalc.+(t44,t76);
#	t78 := batcalc.*(8,t77);
#	t79 := batcalc.+(t51,t78);
#	t80 := oid(t79);
#	t81 := array.grid(1,1056000,1,0);
#	t82 := aggrX3.sum(t72,t80,t81);
#	t83 := batcalc.*(t41,t82);
#	t84 := batcalc.exp(t83);
#	t85 := batcalc.*(t40,t84);
#	t86 := batcalc.*(t7,t85);
#	#t87 := array.grid(100,1320,8,0); will save 30% by reuse
#	t87 := array.grid(t81,100,1320,8,0); 
#	t89 := batcalc.*(1320,t3);
#	t90 := batcalc.+(t87,t89);
#	t91 := oid(t90);
#	t92 := array.grid(1,132000,1,0);
#	t93 := aggrX3.sum(t86,t91,t92);
#	t94 := batcalc.log(t93);
#	t95 := array.grid(1,100,1320,0);
#	t96 := oid(t95);
#	t97 := array.grid(1,100,1,0);
#	t98 := aggrX3.sum(t94,t96,t97);
#	top := t98;
#	io.table(t97,top);
#end f1;
function user.f1(s:str):void;	# 0  (f1:void)<-(s:str)
    t1 := bbp.bind("TREC2003_test_priors_8x32318");	# 1 CMDbbpbind (t1:bat[:void,:dbl])<-($3:str)
    t2 := array.grid(132000,8,1,0);	# 2 ARRAYgrid (t2:bat[:void,:int])<-($5:int)($6:int)($7:int)($8:int)
    t3 := array.grid(1,100,10560,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($7:int)($10:int)($11:int)($8:int)
    t4 := array.grid(1,100,10560,0,8);	# 4 ARRAYgridShift (t4:bat[:void,:int])<-($7:int)($10:int)($11:int)($8:int)($6:int)
    t5 := batcalc.+(t2,t4);	# 5 CMDbatADD (t5:bat[:void,:int])<-(t2:bat[:void,:int])(t4:bat[:void,:int])
    t6 := batcalc.oid(t5);	# 6 CMDconvertvoid_int_oid (t6:bat[:void,:oid])<-(t5:bat[:void,:int])
    t7 := algebra.join(t6,t1);	# 7 ALGjoin (t7:bat[:void,:dbl])<-(t6:bat[:void,:oid])(t1:bat[:void,:dbl])
    t8 := calc.dbl(1.0);	# 8 CALCflt2dbl (t8:dbl)<-($17:flt)
    t9 := calc.dbl(2.0);	# 9 CALCflt2dbl (t9:dbl)<-($19:flt)
    t10 := calc.dbl(3.1415);	# 10 CALCflt2dbl (t10:dbl)<-($21:flt)
    t11 := calc.*(t9,t10);	# 11 CALCbinaryMULdbldbl (t11:dbl)<-(t9:dbl)(t10:dbl)
    t12 := calc.dbl(14.0);	# 12 CALCflt2dbl (t12:dbl)<-($24:flt)
    t13 := mmath.pow(t11,t12);	# 13 MATHbinary_POWdbl (t13:dbl)<-(t11:dbl)(t12:dbl)
    t14 := mmath.sqrt(t13);	# 14 MATHunary_SQRTdbl (t14:dbl)<-(t13:dbl)
    t15 := calc.dbl(t14);	# 15 CALCdbl2dbl (t15:dbl)<-(t14:dbl)
    t16 := bbp.bind("TREC2003_test_sigs_14x8x32318");	# 16 CMDbbpbind (t16:bat[:void,:dbl])<-($29:str)
    t17 := array.grid(800,14,1,0);	# 17 ARRAYgrid (t17:bat[:void,:int])<-($31:int)($32:int)($7:int)($8:int)
    t18 := array.grid(100,8,14,0);	# 18 ARRAYgrid (t18:bat[:void,:int])<-($10:int)($6:int)($32:int)($8:int)
    t19 := array.grid(1,100,112,0);	# 19 ARRAYgrid (t19:bat[:void,:int])<-($7:int)($10:int)($35:int)($8:int)
    t20 := array.grid(1,100,112,0,8);	# 20 ARRAYgridShift (t20:bat[:void,:int])<-($7:int)($10:int)($35:int)($8:int)($6:int)
    t21 := batcalc.+(t18,t20);	# 21 CMDbatADD (t21:bat[:void,:int])<-(t18:bat[:void,:int])(t20:bat[:void,:int])
    t22 := batcalc.*(14,t21);	# 22 CMDcstMULbat (t22:bat[:void,:int])<-($32:int)(t21:bat[:void,:int])
    t23 := batcalc.+(t17,t22);	# 23 CMDbatADD (t23:bat[:void,:int])<-(t17:bat[:void,:int])(t22:bat[:void,:int])
    t24 := batcalc.oid(t23);	# 24 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t16);	# 25 ALGjoin (t25:bat[:void,:dbl])<-(t24:bat[:void,:oid])(t16:bat[:void,:dbl])
    t30 := batcalc.oid(t21);	# 26 CMDconvertvoid_int_oid (t30:bat[:void,:oid])<-(t21:bat[:void,:int])
    t31 := array.grid(1,800,1,0);	# 27 ARRAYgrid (t31:bat[:void,:int])<-($44:int)($31:int)($44:int)($45:int)
    t32 := aggrX3.prod(t25,t30,t31);	# 28 AX3aggrX3_prod3_dbl_dbl (t32:bat[:void,:dbl])<-(t25:bat[:void,:dbl])(t30:bat[:void,:oid])(t31:bat[:void,:int])
    t33 := batcalc.*(t15,t32);	# 29 CMDcstMULbat (t33:bat[:void,:dbl])<-(t15:dbl)(t32:bat[:void,:dbl])
    t34 := batcalc./(t8,t33);	# 30 CMDcstDIVbat (t34:bat[:void,:dbl])<-(t8:dbl)(t33:bat[:void,:dbl])
    t40 := algebra.join(t6,t34);	# 31 ALGjoin (t40:bat[:void,:dbl])<-(t6:bat[:void,:oid])(t34:bat[:void,:dbl])
    t41 := calc.dbl(-0.5);	# 32 CALCflt2dbl (t41:dbl)<-($51:flt)
    t42 := bbp.bind(s);	# 33 CMDbbpbind (t42:bat[:void,:dbl])<-(s:str)
    t43 := array.grid(1056000,14,1,0);	# 34 ARRAYgrid (t43:bat[:void,:int])<-($54:int)($32:int)($44:int)($45:int)
    t44 := array.grid(100,1320,112,0);	# 35 ARRAYgrid (t44:bat[:void,:int])<-($56:int)($57:int)($35:int)($45:int)
    t45 := array.grid(100,1320,112,0,14);	# 36 ARRAYgridShift (t45:bat[:void,:int])<-($56:int)($57:int)($35:int)($45:int)($32:int)
    t46 := batcalc.+(t43,t45);	# 37 CMDbatADD (t46:bat[:void,:int])<-(t43:bat[:void,:int])(t45:bat[:void,:int])
    t47 := batcalc.oid(t46);	# 38 CMDconvertvoid_int_oid (t47:bat[:void,:oid])<-(t46:bat[:void,:int])
    t48 := algebra.join(t47,t42);	# 39 ALGjoin (t48:bat[:void,:dbl])<-(t47:bat[:void,:oid])(t42:bat[:void,:dbl])
    t49 := bbp.bind("TREC2003_test_mus_14x8x32318");	# 40 CMDbbpbind (t49:bat[:void,:dbl])<-($63:str)
    t51 := array.grid(132000,8,14,0);	# 41 ARRAYgrid (t51:bat[:void,:int])<-($65:int)($66:int)($67:int)($45:int)
    t52 := array.grid(1,100,147840,0);	# 42 ARRAYgrid (t52:bat[:void,:int])<-($44:int)($56:int)($69:int)($45:int)
    t53 := array.grid(1,100,147840,0,8);	# 43 ARRAYgridShift (t53:bat[:void,:int])<-($44:int)($56:int)($69:int)($45:int)($66:int)
    t54 := batcalc.+(t51,t53);	# 44 CMDbatADD (t54:bat[:void,:int])<-(t51:bat[:void,:int])(t53:bat[:void,:int])
    t55 := batcalc.*(14,t54);	# 45 CMDcstMULbat (t55:bat[:void,:int])<-($67:int)(t54:bat[:void,:int])
    t56 := batcalc.+(t43,t55);	# 46 CMDbatADD (t56:bat[:void,:int])<-(t43:bat[:void,:int])(t55:bat[:void,:int])
    t57 := batcalc.oid(t56);	# 47 CMDconvertvoid_int_oid (t57:bat[:void,:oid])<-(t56:bat[:void,:int])
    t58 := algebra.join(t57,t49);	# 48 ALGjoin (t58:bat[:void,:dbl])<-(t57:bat[:void,:oid])(t49:bat[:void,:dbl])
    t59 := batcalc.-(t48,t58);	# 49 CMDbatMIN (t59:bat[:void,:dbl])<-(t48:bat[:void,:dbl])(t58:bat[:void,:dbl])
    t61 := batcalc.*(t59,t59);	# 50 CMDbatMUL (t61:bat[:void,:dbl])<-(t59:bat[:void,:dbl])(t59:bat[:void,:dbl])
    t71 := algebra.join(t57,t16);	# 51 ALGjoin (t71:bat[:void,:dbl])<-(t57:bat[:void,:oid])(t16:bat[:void,:dbl])
    t72 := batcalc./(t61,t71);	# 52 CMDbatDIV (t72:bat[:void,:dbl])<-(t61:bat[:void,:dbl])(t71:bat[:void,:dbl])
    t76 := batcalc.*(1320,t52);	# 53 CMDcstMULbat (t76:bat[:void,:int])<-($57:int)(t52:bat[:void,:int])
    t77 := batcalc.+(t44,t76);	# 54 CMDbatADD (t77:bat[:void,:int])<-(t44:bat[:void,:int])(t76:bat[:void,:int])
    t78 := batcalc.*(8,t77);	# 55 CMDcstMULbat (t78:bat[:void,:int])<-($66:int)(t77:bat[:void,:int])
    t79 := batcalc.+(t51,t78);	# 56 CMDbatADD (t79:bat[:void,:int])<-(t51:bat[:void,:int])(t78:bat[:void,:int])
    t80 := batcalc.oid(t79);	# 57 CMDconvertvoid_int_oid (t80:bat[:void,:oid])<-(t79:bat[:void,:int])
    t81 := array.grid(1,1056000,1,0);	# 58 ARRAYgrid (t81:bat[:void,:int])<-($86:int)($87:int)($86:int)($88:int)
    t82 := aggrX3.sum(t72,t80,t81);	# 59 AX3aggrX3_sum3_dbl_dbl (t82:bat[:void,:dbl])<-(t72:bat[:void,:dbl])(t80:bat[:void,:oid])(t81:bat[:void,:int])
    t83 := batcalc.*(t41,t82);	# 60 CMDcstMULbat (t83:bat[:void,:dbl])<-(t41:dbl)(t82:bat[:void,:dbl])
    t84 := batcalc.exp(t83);	# 61 CMDsciencevoid_exp (t84:bat[:void,:dbl])<-(t83:bat[:void,:dbl])
    t85 := batcalc.*(t40,t84);	# 62 CMDbatMUL (t85:bat[:void,:dbl])<-(t40:bat[:void,:dbl])(t84:bat[:void,:dbl])
    t86 := batcalc.*(t7,t85);	# 63 CMDbatMUL (t86:bat[:void,:dbl])<-(t7:bat[:void,:dbl])(t85:bat[:void,:dbl])
    t87 := array.grid(t81,100,1320,8,0);	# 64 ARRAYgridBAT (t87:bat[:void,:int])<-(t81:bat[:void,:int])($95:int)($96:int)($66:int)($88:int)
    t89 := batcalc.*(1320,t3);	# 65 CMDcstMULbat (t89:bat[:void,:int])<-($96:int)(t3:bat[:void,:int])
    t90 := batcalc.+(t87,t89);	# 66 CMDbatADD (t90:bat[:void,:int])<-(t87:bat[:void,:int])(t89:bat[:void,:int])
    t91 := batcalc.oid(t90);	# 67 CMDconvertvoid_int_oid (t91:bat[:void,:oid])<-(t90:bat[:void,:int])
    t92 := array.grid(1,132000,1,0);	# 68 ARRAYgrid (t92:bat[:void,:int])<-($86:int)($101:int)($86:int)($88:int)
    t93 := aggrX3.sum(t86,t91,t92);	# 69 AX3aggrX3_sum3_dbl_dbl (t93:bat[:void,:dbl])<-(t86:bat[:void,:dbl])(t91:bat[:void,:oid])(t92:bat[:void,:int])
    t94 := batcalc.log(t93);	# 70 CMDsciencevoid_log (t94:bat[:void,:dbl])<-(t93:bat[:void,:dbl])
    t95 := array.grid(1,100,1320,0);	# 71 ARRAYgrid (t95:bat[:void,:int])<-($86:int)($95:int)($96:int)($88:int)
    t96 := batcalc.oid(t95);	# 72 CMDconvertvoid_int_oid (t96:bat[:void,:oid])<-(t95:bat[:void,:int])
    t97 := array.grid(1,100,1,0);	# 73 ARRAYgrid (t97:bat[:void,:int])<-($86:int)($95:int)($86:int)($88:int)
    t98 := aggrX3.sum(t94,t96,t97);	# 74 AX3aggrX3_sum3_dbl_dbl (t98:bat[:void,:dbl])<-(t94:bat[:void,:dbl])(t96:bat[:void,:oid])(t97:bat[:void,:int])
    top := t98;	# 75  (top:bat[:void,:dbl])<-(t98:bat[:void,:dbl])
    io.table(t97,top);	# 76 IOttable ($109:int)<-(t97:bat[:void,:int])(top:bat[:void,:dbl])
end f1;	# 77  
#	optimizer.expressionAccumulation("Admin","f1"); 
#	optimizer.garbageCollector("Admin","f1");
#	optimizer.factorize("Admin","f1");
#	showFunction("Admin","f1");
#	##f1();
#
#
!ERROR: YIELD type mismatch at type 1
Optimizer factorize failed
factory user.f1(s:str):void;	# 0  (f1:void)<-(s:str)
    t1 := bbp.bind("TREC2003_test_priors_8x32318");	# 1 CMDbbpbind (t1:bat[:void,:dbl])<-($3:str)
    t2 := array.grid(132000,8,1,0);	# 2 ARRAYgrid (t2:bat[:void,:int])<-($5:int)($6:int)($7:int)($8:int)
    t3 := array.grid(1,100,10560,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($7:int)($10:int)($11:int)($8:int)
    t4 := array.grid(1,100,10560,0,8);	# 4 ARRAYgridShift (t4:bat[:void,:int])<-($7:int)($10:int)($11:int)($8:int)($6:int)
    t5 := batcalc.+(t2,t4);	# 5 CMDbatADD (t5:bat[:void,:int])<-(t2:bat[:void,:int])(t4:bat[:void,:int])
    bbp.garbage(t2);	# 6 CMDbbpgarbage ($110:void)<-(t2:bat[:void,:int])
    bbp.garbage(t4);	# 7 CMDbbpgarbage ($111:void)<-(t4:bat[:void,:int])
    t6 := batcalc.oid(t5);	# 8 CMDconvertvoid_int_oid (t6:bat[:void,:oid])<-(t5:bat[:void,:int])
    bbp.garbage(t5);	# 9 CMDbbpgarbage ($112:void)<-(t5:bat[:void,:int])
    t7 := algebra.join(t6,t1);	# 10 ALGjoin (t7:bat[:void,:dbl])<-(t6:bat[:void,:oid])(t1:bat[:void,:dbl])
    bbp.garbage(t1);	# 11 CMDbbpgarbage ($113:void)<-(t1:bat[:void,:dbl])
    t8 := calc.dbl(1.0);	# 12 CALCflt2dbl (t8:dbl)<-($17:flt)
    t9 := calc.dbl(2.0);	# 13 CALCflt2dbl (t9:dbl)<-($19:flt)
    t10 := calc.dbl(3.1415);	# 14 CALCflt2dbl (t10:dbl)<-($21:flt)
    t11 := calc.*(t9,t10);	# 15 CALCbinaryMULdbldbl (t11:dbl)<-(t9:dbl)(t10:dbl)
    t12 := calc.dbl(14.0);	# 16 CALCflt2dbl (t12:dbl)<-($24:flt)
    t13 := mmath.pow(t11,t12);	# 17 MATHbinary_POWdbl (t13:dbl)<-(t11:dbl)(t12:dbl)
    t14 := mmath.sqrt(t13);	# 18 MATHunary_SQRTdbl (t14:dbl)<-(t13:dbl)
    t16 := bbp.bind("TREC2003_test_sigs_14x8x32318");	# 19 CMDbbpbind (t16:bat[:void,:dbl])<-($29:str)
    t17 := array.grid(800,14,1,0);	# 20 ARRAYgrid (t17:bat[:void,:int])<-($31:int)($32:int)($7:int)($8:int)
    t18 := array.grid(100,8,14,0);	# 21 ARRAYgrid (t18:bat[:void,:int])<-($10:int)($6:int)($32:int)($8:int)
    t19 := array.grid(1,100,112,0);	# 22 ARRAYgrid (t19:bat[:void,:int])<-($7:int)($10:int)($35:int)($8:int)
    t20 := array.grid(1,100,112,0,8);	# 23 ARRAYgridShift (t20:bat[:void,:int])<-($7:int)($10:int)($35:int)($8:int)($6:int)
    t21 := batcalc.+(t18,t20);	# 24 CMDbatADD (t21:bat[:void,:int])<-(t18:bat[:void,:int])(t20:bat[:void,:int])
    bbp.garbage(t18);	# 25 CMDbbpgarbage ($114:void)<-(t18:bat[:void,:int])
    bbp.garbage(t20);	# 26 CMDbbpgarbage ($115:void)<-(t20:bat[:void,:int])
    t22 := batcalc.*(14,t21);	# 27 CMDcstMULbat (t22:bat[:void,:int])<-($32:int)(t21:bat[:void,:int])
    t23 := batcalc.+(t17,t22);	# 28 CMDbatADD (t23:bat[:void,:int])<-(t17:bat[:void,:int])(t22:bat[:void,:int])
    bbp.garbage(t17);	# 29 CMDbbpgarbage ($116:void)<-(t17:bat[:void,:int])
    bbp.garbage(t22);	# 30 CMDbbpgarbage ($117:void)<-(t22:bat[:void,:int])
    t24 := batcalc.oid(t23);	# 31 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    bbp.garbage(t23);	# 32 CMDbbpgarbage ($118:void)<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t16);	# 33 ALGjoin (t25:bat[:void,:dbl])<-(t24:bat[:void,:oid])(t16:bat[:void,:dbl])
    bbp.garbage(t24);	# 34 CMDbbpgarbage ($119:void)<-(t24:bat[:void,:oid])
    t30 := batcalc.oid(t21);	# 35 CMDconvertvoid_int_oid (t30:bat[:void,:oid])<-(t21:bat[:void,:int])
    bbp.garbage(t21);	# 36 CMDbbpgarbage ($120:void)<-(t21:bat[:void,:int])
    t31 := array.grid(1,800,1,0);	# 37 ARRAYgrid (t31:bat[:void,:int])<-($44:int)($31:int)($44:int)($45:int)
    t32 := aggrX3.prod(t25,t30,t31);	# 38 AX3aggrX3_prod3_dbl_dbl (t32:bat[:void,:dbl])<-(t25:bat[:void,:dbl])(t30:bat[:void,:oid])(t31:bat[:void,:int])
    bbp.garbage(t25);	# 39 CMDbbpgarbage ($121:void)<-(t25:bat[:void,:dbl])
    bbp.garbage(t30);	# 40 CMDbbpgarbage ($122:void)<-(t30:bat[:void,:oid])
    bbp.garbage(t31);	# 41 CMDbbpgarbage ($123:void)<-(t31:bat[:void,:int])
    t33 := batcalc.*(t14,t32);	# 42 CMDcstMULbat (t33:bat[:void,:dbl])<-(t14:dbl)(t32:bat[:void,:dbl])
    bbp.garbage(t32);	# 43 CMDbbpgarbage ($124:void)<-(t32:bat[:void,:dbl])
    t34 := batcalc./(t8,t33);	# 44 CMDcstDIVbat (t34:bat[:void,:dbl])<-(t8:dbl)(t33:bat[:void,:dbl])
    bbp.garbage(t33);	# 45 CMDbbpgarbage ($125:void)<-(t33:bat[:void,:dbl])
    t40 := algebra.join(t6,t34);	# 46 ALGjoin (t40:bat[:void,:dbl])<-(t6:bat[:void,:oid])(t34:bat[:void,:dbl])
    bbp.garbage(t6);	# 47 CMDbbpgarbage ($126:void)<-(t6:bat[:void,:oid])
    bbp.garbage(t34);	# 48 CMDbbpgarbage ($127:void)<-(t34:bat[:void,:dbl])
    t41 := calc.dbl(-0.5);	# 49 CALCflt2dbl (t41:dbl)<-($51:flt)
    t43 := array.grid(1056000,14,1,0);	# 50 ARRAYgrid (t43:bat[:void,:int])<-($54:int)($32:int)($44:int)($45:int)
    t44 := array.grid(100,1320,112,0);	# 51 ARRAYgrid (t44:bat[:void,:int])<-($56:int)($57:int)($35:int)($45:int)
    t45 := array.grid(100,1320,112,0,14);	# 52 ARRAYgridShift (t45:bat[:void,:int])<-($56:int)($57:int)($35:int)($45:int)($32:int)
    t46 := batcalc.+(t43,t45);	# 53 CMDbatADD (t46:bat[:void,:int])<-(t43:bat[:void,:int])(t45:bat[:void,:int])
    bbp.garbage(t45);	# 54 CMDbbpgarbage ($128:void)<-(t45:bat[:void,:int])
    t47 := batcalc.oid(t46);	# 55 CMDconvertvoid_int_oid (t47:bat[:void,:oid])<-(t46:bat[:void,:int])
    bbp.garbage(t46);	# 56 CMDbbpgarbage ($129:void)<-(t46:bat[:void,:int])
    bbp.garbage(t47);	# 57 CMDbbpgarbage ($130:void)<-(t47:bat[:void,:oid])
    t49 := bbp.bind("TREC2003_test_mus_14x8x32318");	# 58 CMDbbpbind (t49:bat[:void,:dbl])<-($63:str)
    t51 := array.grid(132000,8,14,0);	# 59 ARRAYgrid (t51:bat[:void,:int])<-($65:int)($66:int)($67:int)($45:int)
    t52 := array.grid(1,100,147840,0);	# 60 ARRAYgrid (t52:bat[:void,:int])<-($44:int)($56:int)($69:int)($45:int)
    t53 := array.grid(1,100,147840,0,8);	# 61 ARRAYgridShift (t53:bat[:void,:int])<-($44:int)($56:int)($69:int)($45:int)($66:int)
    t54 := batcalc.+(t51,t53);	# 62 CMDbatADD (t54:bat[:void,:int])<-(t51:bat[:void,:int])(t53:bat[:void,:int])
    bbp.garbage(t53);	# 63 CMDbbpgarbage ($132:void)<-(t53:bat[:void,:int])
    t55 := batcalc.*(14,t54);	# 64 CMDcstMULbat (t55:bat[:void,:int])<-($67:int)(t54:bat[:void,:int])
    bbp.garbage(t54);	# 65 CMDbbpgarbage ($133:void)<-(t54:bat[:void,:int])
    t56 := batcalc.+(t43,t55);	# 66 CMDbatADD (t56:bat[:void,:int])<-(t43:bat[:void,:int])(t55:bat[:void,:int])
    bbp.garbage(t43);	# 67 CMDbbpgarbage ($134:void)<-(t43:bat[:void,:int])
    bbp.garbage(t55);	# 68 CMDbbpgarbage ($135:void)<-(t55:bat[:void,:int])
    t57 := batcalc.oid(t56);	# 69 CMDconvertvoid_int_oid (t57:bat[:void,:oid])<-(t56:bat[:void,:int])
    bbp.garbage(t56);	# 70 CMDbbpgarbage ($136:void)<-(t56:bat[:void,:int])
    t58 := algebra.join(t57,t49);	# 71 ALGjoin (t58:bat[:void,:dbl])<-(t57:bat[:void,:oid])(t49:bat[:void,:dbl])
    bbp.garbage(t49);	# 72 CMDbbpgarbage ($137:void)<-(t49:bat[:void,:dbl])
    bbp.garbage(t58);	# 73 CMDbbpgarbage ($139:void)<-(t58:bat[:void,:dbl])
    t71 := algebra.join(t57,t16);	# 74 ALGjoin (t71:bat[:void,:dbl])<-(t57:bat[:void,:oid])(t16:bat[:void,:dbl])
    bbp.garbage(t57);	# 75 CMDbbpgarbage ($141:void)<-(t57:bat[:void,:oid])
    bbp.garbage(t16);	# 76 CMDbbpgarbage ($142:void)<-(t16:bat[:void,:dbl])
    bbp.garbage(t71);	# 77 CMDbbpgarbage ($144:void)<-(t71:bat[:void,:dbl])
    t76 := batcalc.*(1320,t52);	# 78 CMDcstMULbat (t76:bat[:void,:int])<-($57:int)(t52:bat[:void,:int])
    bbp.garbage(t52);	# 79 CMDbbpgarbage ($145:void)<-(t52:bat[:void,:int])
    t77 := batcalc.+(t44,t76);	# 80 CMDbatADD (t77:bat[:void,:int])<-(t44:bat[:void,:int])(t76:bat[:void,:int])
    bbp.garbage(t44);	# 81 CMDbbpgarbage ($146:void)<-(t44:bat[:void,:int])
    bbp.garbage(t76);	# 82 CMDbbpgarbage ($147:void)<-(t76:bat[:void,:int])
    t78 := batcalc.*(8,t77);	# 83 CMDcstMULbat (t78:bat[:void,:int])<-($66:int)(t77:bat[:void,:int])
    bbp.garbage(t77);	# 84 CMDbbpgarbage ($148:void)<-(t77:bat[:void,:int])
    t79 := batcalc.+(t51,t78);	# 85 CMDbatADD (t79:bat[:void,:int])<-(t51:bat[:void,:int])(t78:bat[:void,:int])
    bbp.garbage(t51);	# 86 CMDbbpgarbage ($149:void)<-(t51:bat[:void,:int])
    bbp.garbage(t78);	# 87 CMDbbpgarbage ($150:void)<-(t78:bat[:void,:int])
    t80 := batcalc.oid(t79);	# 88 CMDconvertvoid_int_oid (t80:bat[:void,:oid])<-(t79:bat[:void,:int])
    bbp.garbage(t79);	# 89 CMDbbpgarbage ($151:void)<-(t79:bat[:void,:int])
    t81 := array.grid(1,1056000,1,0);	# 90 ARRAYgrid (t81:bat[:void,:int])<-($86:int)($87:int)($86:int)($88:int)
    bbp.garbage(t80);	# 91 CMDbbpgarbage ($153:void)<-(t80:bat[:void,:oid])
    bbp.garbage(t40);	# 92 CMDbbpgarbage ($156:void)<-(t40:bat[:void,:dbl])
    bbp.garbage(t7);	# 93 CMDbbpgarbage ($158:void)<-(t7:bat[:void,:dbl])
    t87 := array.grid(t81,100,1320,8,0);	# 94 ARRAYgridBAT (t87:bat[:void,:int])<-(t81:bat[:void,:int])($95:int)($96:int)($66:int)($88:int)
    bbp.garbage(t81);	# 95 CMDbbpgarbage ($160:void)<-(t81:bat[:void,:int])
    t89 := batcalc.*(1320,t3);	# 96 CMDcstMULbat (t89:bat[:void,:int])<-($96:int)(t3:bat[:void,:int])
    bbp.garbage(t3);	# 97 CMDbbpgarbage ($161:void)<-(t3:bat[:void,:int])
    t90 := batcalc.+(t87,t89);	# 98 CMDbatADD (t90:bat[:void,:int])<-(t87:bat[:void,:int])(t89:bat[:void,:int])
    bbp.garbage(t87);	# 99 CMDbbpgarbage ($162:void)<-(t87:bat[:void,:int])
    bbp.garbage(t89);	# 100 CMDbbpgarbage ($163:void)<-(t89:bat[:void,:int])
    t91 := batcalc.oid(t90);	# 101 CMDconvertvoid_int_oid (t91:bat[:void,:oid])<-(t90:bat[:void,:int])
    bbp.garbage(t90);	# 102 CMDbbpgarbage ($164:void)<-(t90:bat[:void,:int])
    t92 := array.grid(1,132000,1,0);	# 103 ARRAYgrid (t92:bat[:void,:int])<-($86:int)($101:int)($86:int)($88:int)
    bbp.garbage(t91);	# 104 CMDbbpgarbage ($166:void)<-(t91:bat[:void,:oid])
    bbp.garbage(t92);	# 105 CMDbbpgarbage ($167:void)<-(t92:bat[:void,:int])
    t95 := array.grid(1,100,1320,0);	# 106 ARRAYgrid (t95:bat[:void,:int])<-($86:int)($95:int)($96:int)($88:int)
    t96 := batcalc.oid(t95);	# 107 CMDconvertvoid_int_oid (t96:bat[:void,:oid])<-(t95:bat[:void,:int])
    bbp.garbage(t95);	# 108 CMDbbpgarbage ($169:void)<-(t95:bat[:void,:int])
    t97 := array.grid(1,100,1,0);	# 109 ARRAYgrid (t97:bat[:void,:int])<-($86:int)($95:int)($86:int)($88:int)
    bbp.garbage(t96);	# 110 CMDbbpgarbage ($171:void)<-(t96:bat[:void,:oid])
    bbp.garbage(t97);	# 111 CMDbbpgarbage ($173:void)<-(t97:bat[:void,:int])
barrier always := true;	# 112  (always:bit)<-($175:bit) jump 144
    t42 := bbp.bind(s);	# 113 CMDbbpbind (t42:bat[:void,:dbl])<-(s:str)
    t48 := algebra.join(t47,t42);	# 114 ALGjoin (t48:bat[:void,:dbl])<-(t47:bat[:void,:oid])(t42:bat[:void,:dbl])
    bbp.garbage(t42);	# 115 CMDbbpgarbage ($131:void)<-(t42:bat[:void,:dbl])
    t59 := batcalc.-(t48,t58);	# 116 CMDbatMIN (t59:bat[:void,:dbl])<-(t48:bat[:void,:dbl])(t58:bat[:void,:dbl])
    bbp.garbage(t48);	# 117 CMDbbpgarbage ($138:void)<-(t48:bat[:void,:dbl])
    t61 := batcalc.*(t59,t59);	# 118 CMDbatMUL (t61:bat[:void,:dbl])<-(t59:bat[:void,:dbl])(t59:bat[:void,:dbl])
    bbp.garbage(t59);	# 119 CMDbbpgarbage ($140:void)<-(t59:bat[:void,:dbl])
    t72 := batcalc./(t61,t71);	# 120 CMDbatDIV (t72:bat[:void,:dbl])<-(t61:bat[:void,:dbl])(t71:bat[:void,:dbl])
    bbp.garbage(t61);	# 121 CMDbbpgarbage ($143:void)<-(t61:bat[:void,:dbl])
    t82 := aggrX3.sum(t72,t80,t81);	# 122 AX3aggrX3_sum3_dbl_dbl (t82:bat[:void,:dbl])<-(t72:bat[:void,:dbl])(t80:bat[:void,:oid])(t81:bat[:void,:int])
    bbp.garbage(t72);	# 123 CMDbbpgarbage ($152:void)<-(t72:bat[:void,:dbl])
    t83 := batcalc.*(t41,t82);	# 124 CMDcstMULbat (t83:bat[:void,:dbl])<-(t41:dbl)(t82:bat[:void,:dbl])
    bbp.garbage(t82);	# 125 CMDbbpgarbage ($154:void)<-(t82:bat[:void,:dbl])
    t84 := batcalc.exp(t83);	# 126 CMDsciencevoid_exp (t84:bat[:void,:dbl])<-(t83:bat[:void,:dbl])
    bbp.garbage(t83);	# 127 CMDbbpgarbage ($155:void)<-(t83:bat[:void,:dbl])
    t85 := batcalc.*(t40,t84);	# 128 CMDbatMUL (t85:bat[:void,:dbl])<-(t40:bat[:void,:dbl])(t84:bat[:void,:dbl])
    bbp.garbage(t84);	# 129 CMDbbpgarbage ($157:void)<-(t84:bat[:void,:dbl])
    t86 := batcalc.*(t7,t85);	# 130 CMDbatMUL (t86:bat[:void,:dbl])<-(t7:bat[:void,:dbl])(t85:bat[:void,:dbl])
    bbp.garbage(t85);	# 131 CMDbbpgarbage ($159:void)<-(t85:bat[:void,:dbl])
    t93 := aggrX3.sum(t86,t91,t92);	# 132 AX3aggrX3_sum3_dbl_dbl (t93:bat[:void,:dbl])<-(t86:bat[:void,:dbl])(t91:bat[:void,:oid])(t92:bat[:void,:int])
    bbp.garbage(t86);	# 133 CMDbbpgarbage ($165:void)<-(t86:bat[:void,:dbl])
    t94 := batcalc.log(t93);	# 134 CMDsciencevoid_log (t94:bat[:void,:dbl])<-(t93:bat[:void,:dbl])
    bbp.garbage(t93);	# 135 CMDbbpgarbage ($168:void)<-(t93:bat[:void,:dbl])
    t98 := aggrX3.sum(t94,t96,t97);	# 136 AX3aggrX3_sum3_dbl_dbl (t98:bat[:void,:dbl])<-(t94:bat[:void,:dbl])(t96:bat[:void,:oid])(t97:bat[:void,:int])
    bbp.garbage(t94);	# 137 CMDbbpgarbage ($170:void)<-(t94:bat[:void,:dbl])
    top := t98;	# 138  (top:bat[:void,:dbl])<-(t98:bat[:void,:dbl])
    bbp.garbage(t98);	# 139 CMDbbpgarbage ($172:void)<-(t98:bat[:void,:dbl])
    io.table(t97,top);	# 140 IOttable ($109:int)<-(t97:bat[:void,:int])(top:bat[:void,:dbl])
    bbp.garbage(top);	# 141 CMDbbpgarbage ($174:void)<-(top:bat[:void,:dbl])
    yield always;	# 142  (always:bit)
    redo always;	# 143  (always:bit) jump 113
exit always;	# 144  (always:bit)
end f1;	# 145  
!ERROR: YIELD type mismatch at type 1
Optimizer factorize optimizer failed
factory user.f1(s:str):void;	# 0  (f1:void)<-(s:str)
    t1 := bbp.bind("TREC2003_test_priors_8x32318");	# 1 CMDbbpbind (t1:bat[:void,:dbl])<-($3:str)
    t2 := array.grid(132000,8,1,0);	# 2 ARRAYgrid (t2:bat[:void,:int])<-($5:int)($6:int)($7:int)($8:int)
    t3 := array.grid(1,100,10560,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($7:int)($10:int)($11:int)($8:int)
    t4 := array.grid(1,100,10560,0,8);	# 4 ARRAYgridShift (t4:bat[:void,:int])<-($7:int)($10:int)($11:int)($8:int)($6:int)
    t5 := batcalc.+(t2,t4);	# 5 CMDbatADD (t5:bat[:void,:int])<-(t2:bat[:void,:int])(t4:bat[:void,:int])
    bbp.garbage(t2);	# 6 CMDbbpgarbage ($110:void)<-(t2:bat[:void,:int])
    bbp.garbage(t4);	# 7 CMDbbpgarbage ($111:void)<-(t4:bat[:void,:int])
    t6 := batcalc.oid(t5);	# 8 CMDconvertvoid_int_oid (t6:bat[:void,:oid])<-(t5:bat[:void,:int])
    bbp.garbage(t5);	# 9 CMDbbpgarbage ($112:void)<-(t5:bat[:void,:int])
    t7 := algebra.join(t6,t1);	# 10 ALGjoin (t7:bat[:void,:dbl])<-(t6:bat[:void,:oid])(t1:bat[:void,:dbl])
    bbp.garbage(t1);	# 11 CMDbbpgarbage ($113:void)<-(t1:bat[:void,:dbl])
    t8 := calc.dbl(1.0);	# 12 CALCflt2dbl (t8:dbl)<-($17:flt)
    t9 := calc.dbl(2.0);	# 13 CALCflt2dbl (t9:dbl)<-($19:flt)
    t10 := calc.dbl(3.1415);	# 14 CALCflt2dbl (t10:dbl)<-($21:flt)
    t11 := calc.*(t9,t10);	# 15 CALCbinaryMULdbldbl (t11:dbl)<-(t9:dbl)(t10:dbl)
    t12 := calc.dbl(14.0);	# 16 CALCflt2dbl (t12:dbl)<-($24:flt)
    t13 := mmath.pow(t11,t12);	# 17 MATHbinary_POWdbl (t13:dbl)<-(t11:dbl)(t12:dbl)
    t14 := mmath.sqrt(t13);	# 18 MATHunary_SQRTdbl (t14:dbl)<-(t13:dbl)
    t16 := bbp.bind("TREC2003_test_sigs_14x8x32318");	# 19 CMDbbpbind (t16:bat[:void,:dbl])<-($29:str)
    t17 := array.grid(800,14,1,0);	# 20 ARRAYgrid (t17:bat[:void,:int])<-($31:int)($32:int)($7:int)($8:int)
    t18 := array.grid(100,8,14,0);	# 21 ARRAYgrid (t18:bat[:void,:int])<-($10:int)($6:int)($32:int)($8:int)
    t19 := array.grid(1,100,112,0);	# 22 ARRAYgrid (t19:bat[:void,:int])<-($7:int)($10:int)($35:int)($8:int)
    t20 := array.grid(1,100,112,0,8);	# 23 ARRAYgridShift (t20:bat[:void,:int])<-($7:int)($10:int)($35:int)($8:int)($6:int)
    t21 := batcalc.+(t18,t20);	# 24 CMDbatADD (t21:bat[:void,:int])<-(t18:bat[:void,:int])(t20:bat[:void,:int])
    bbp.garbage(t18);	# 25 CMDbbpgarbage ($114:void)<-(t18:bat[:void,:int])
    bbp.garbage(t20);	# 26 CMDbbpgarbage ($115:void)<-(t20:bat[:void,:int])
    t22 := batcalc.*(14,t21);	# 27 CMDcstMULbat (t22:bat[:void,:int])<-($32:int)(t21:bat[:void,:int])
    t23 := batcalc.+(t17,t22);	# 28 CMDbatADD (t23:bat[:void,:int])<-(t17:bat[:void,:int])(t22:bat[:void,:int])
    bbp.garbage(t17);	# 29 CMDbbpgarbage ($116:void)<-(t17:bat[:void,:int])
    bbp.garbage(t22);	# 30 CMDbbpgarbage ($117:void)<-(t22:bat[:void,:int])
    t24 := batcalc.oid(t23);	# 31 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    bbp.garbage(t23);	# 32 CMDbbpgarbage ($118:void)<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t16);	# 33 ALGjoin (t25:bat[:void,:dbl])<-(t24:bat[:void,:oid])(t16:bat[:void,:dbl])
    bbp.garbage(t24);	# 34 CMDbbpgarbage ($119:void)<-(t24:bat[:void,:oid])
    t30 := batcalc.oid(t21);	# 35 CMDconvertvoid_int_oid (t30:bat[:void,:oid])<-(t21:bat[:void,:int])
    bbp.garbage(t21);	# 36 CMDbbpgarbage ($120:void)<-(t21:bat[:void,:int])
    t31 := array.grid(1,800,1,0);	# 37 ARRAYgrid (t31:bat[:void,:int])<-($44:int)($31:int)($44:int)($45:int)
    t32 := aggrX3.prod(t25,t30,t31);	# 38 AX3aggrX3_prod3_dbl_dbl (t32:bat[:void,:dbl])<-(t25:bat[:void,:dbl])(t30:bat[:void,:oid])(t31:bat[:void,:int])
    bbp.garbage(t25);	# 39 CMDbbpgarbage ($121:void)<-(t25:bat[:void,:dbl])
    bbp.garbage(t30);	# 40 CMDbbpgarbage ($122:void)<-(t30:bat[:void,:oid])
    bbp.garbage(t31);	# 41 CMDbbpgarbage ($123:void)<-(t31:bat[:void,:int])
    t33 := batcalc.*(t14,t32);	# 42 CMDcstMULbat (t33:bat[:void,:dbl])<-(t14:dbl)(t32:bat[:void,:dbl])
    bbp.garbage(t32);	# 43 CMDbbpgarbage ($124:void)<-(t32:bat[:void,:dbl])
    t34 := batcalc./(t8,t33);	# 44 CMDcstDIVbat (t34:bat[:void,:dbl])<-(t8:dbl)(t33:bat[:void,:dbl])
    bbp.garbage(t33);	# 45 CMDbbpgarbage ($125:void)<-(t33:bat[:void,:dbl])
    t40 := algebra.join(t6,t34);	# 46 ALGjoin (t40:bat[:void,:dbl])<-(t6:bat[:void,:oid])(t34:bat[:void,:dbl])
    bbp.garbage(t6);	# 47 CMDbbpgarbage ($126:void)<-(t6:bat[:void,:oid])
    bbp.garbage(t34);	# 48 CMDbbpgarbage ($127:void)<-(t34:bat[:void,:dbl])
    t41 := calc.dbl(-0.5);	# 49 CALCflt2dbl (t41:dbl)<-($51:flt)
    t43 := array.grid(1056000,14,1,0);	# 50 ARRAYgrid (t43:bat[:void,:int])<-($54:int)($32:int)($44:int)($45:int)
    t44 := array.grid(100,1320,112,0);	# 51 ARRAYgrid (t44:bat[:void,:int])<-($56:int)($57:int)($35:int)($45:int)
    t45 := array.grid(100,1320,112,0,14);	# 52 ARRAYgridShift (t45:bat[:void,:int])<-($56:int)($57:int)($35:int)($45:int)($32:int)
    t46 := batcalc.+(t43,t45);	# 53 CMDbatADD (t46:bat[:void,:int])<-(t43:bat[:void,:int])(t45:bat[:void,:int])
    bbp.garbage(t45);	# 54 CMDbbpgarbage ($128:void)<-(t45:bat[:void,:int])
    t47 := batcalc.oid(t46);	# 55 CMDconvertvoid_int_oid (t47:bat[:void,:oid])<-(t46:bat[:void,:int])
    bbp.garbage(t46);	# 56 CMDbbpgarbage ($129:void)<-(t46:bat[:void,:int])
    bbp.garbage(t47);	# 57 CMDbbpgarbage ($130:void)<-(t47:bat[:void,:oid])
    t49 := bbp.bind("TREC2003_test_mus_14x8x32318");	# 58 CMDbbpbind (t49:bat[:void,:dbl])<-($63:str)
    t51 := array.grid(132000,8,14,0);	# 59 ARRAYgrid (t51:bat[:void,:int])<-($65:int)($66:int)($67:int)($45:int)
    t52 := array.grid(1,100,147840,0);	# 60 ARRAYgrid (t52:bat[:void,:int])<-($44:int)($56:int)($69:int)($45:int)
    t53 := array.grid(1,100,147840,0,8);	# 61 ARRAYgridShift (t53:bat[:void,:int])<-($44:int)($56:int)($69:int)($45:int)($66:int)
    t54 := batcalc.+(t51,t53);	# 62 CMDbatADD (t54:bat[:void,:int])<-(t51:bat[:void,:int])(t53:bat[:void,:int])
    bbp.garbage(t53);	# 63 CMDbbpgarbage ($132:void)<-(t53:bat[:void,:int])
    t55 := batcalc.*(14,t54);	# 64 CMDcstMULbat (t55:bat[:void,:int])<-($67:int)(t54:bat[:void,:int])
    bbp.garbage(t54);	# 65 CMDbbpgarbage ($133:void)<-(t54:bat[:void,:int])
    t56 := batcalc.+(t43,t55);	# 66 CMDbatADD (t56:bat[:void,:int])<-(t43:bat[:void,:int])(t55:bat[:void,:int])
    bbp.garbage(t43);	# 67 CMDbbpgarbage ($134:void)<-(t43:bat[:void,:int])
    bbp.garbage(t55);	# 68 CMDbbpgarbage ($135:void)<-(t55:bat[:void,:int])
    t57 := batcalc.oid(t56);	# 69 CMDconvertvoid_int_oid (t57:bat[:void,:oid])<-(t56:bat[:void,:int])
    bbp.garbage(t56);	# 70 CMDbbpgarbage ($136:void)<-(t56:bat[:void,:int])
    t58 := algebra.join(t57,t49);	# 71 ALGjoin (t58:bat[:void,:dbl])<-(t57:bat[:void,:oid])(t49:bat[:void,:dbl])
    bbp.garbage(t49);	# 72 CMDbbpgarbage ($137:void)<-(t49:bat[:void,:dbl])
    bbp.garbage(t58);	# 73 CMDbbpgarbage ($139:void)<-(t58:bat[:void,:dbl])
    t71 := algebra.join(t57,t16);	# 74 ALGjoin (t71:bat[:void,:dbl])<-(t57:bat[:void,:oid])(t16:bat[:void,:dbl])
    bbp.garbage(t57);	# 75 CMDbbpgarbage ($141:void)<-(t57:bat[:void,:oid])
    bbp.garbage(t16);	# 76 CMDbbpgarbage ($142:void)<-(t16:bat[:void,:dbl])
    bbp.garbage(t71);	# 77 CMDbbpgarbage ($144:void)<-(t71:bat[:void,:dbl])
    t76 := batcalc.*(1320,t52);	# 78 CMDcstMULbat (t76:bat[:void,:int])<-($57:int)(t52:bat[:void,:int])
    bbp.garbage(t52);	# 79 CMDbbpgarbage ($145:void)<-(t52:bat[:void,:int])
    t77 := batcalc.+(t44,t76);	# 80 CMDbatADD (t77:bat[:void,:int])<-(t44:bat[:void,:int])(t76:bat[:void,:int])
    bbp.garbage(t44);	# 81 CMDbbpgarbage ($146:void)<-(t44:bat[:void,:int])
    bbp.garbage(t76);	# 82 CMDbbpgarbage ($147:void)<-(t76:bat[:void,:int])
    t78 := batcalc.*(8,t77);	# 83 CMDcstMULbat (t78:bat[:void,:int])<-($66:int)(t77:bat[:void,:int])
    bbp.garbage(t77);	# 84 CMDbbpgarbage ($148:void)<-(t77:bat[:void,:int])
    t79 := batcalc.+(t51,t78);	# 85 CMDbatADD (t79:bat[:void,:int])<-(t51:bat[:void,:int])(t78:bat[:void,:int])
    bbp.garbage(t51);	# 86 CMDbbpgarbage ($149:void)<-(t51:bat[:void,:int])
    bbp.garbage(t78);	# 87 CMDbbpgarbage ($150:void)<-(t78:bat[:void,:int])
    t80 := batcalc.oid(t79);	# 88 CMDconvertvoid_int_oid (t80:bat[:void,:oid])<-(t79:bat[:void,:int])
    bbp.garbage(t79);	# 89 CMDbbpgarbage ($151:void)<-(t79:bat[:void,:int])
    t81 := array.grid(1,1056000,1,0);	# 90 ARRAYgrid (t81:bat[:void,:int])<-($86:int)($87:int)($86:int)($88:int)
    bbp.garbage(t80);	# 91 CMDbbpgarbage ($153:void)<-(t80:bat[:void,:oid])
    bbp.garbage(t40);	# 92 CMDbbpgarbage ($156:void)<-(t40:bat[:void,:dbl])
    bbp.garbage(t7);	# 93 CMDbbpgarbage ($158:void)<-(t7:bat[:void,:dbl])
    t87 := array.grid(t81,100,1320,8,0);	# 94 ARRAYgridBAT (t87:bat[:void,:int])<-(t81:bat[:void,:int])($95:int)($96:int)($66:int)($88:int)
    bbp.garbage(t81);	# 95 CMDbbpgarbage ($160:void)<-(t81:bat[:void,:int])
    t89 := batcalc.*(1320,t3);	# 96 CMDcstMULbat (t89:bat[:void,:int])<-($96:int)(t3:bat[:void,:int])
    bbp.garbage(t3);	# 97 CMDbbpgarbage ($161:void)<-(t3:bat[:void,:int])
    t90 := batcalc.+(t87,t89);	# 98 CMDbatADD (t90:bat[:void,:int])<-(t87:bat[:void,:int])(t89:bat[:void,:int])
    bbp.garbage(t87);	# 99 CMDbbpgarbage ($162:void)<-(t87:bat[:void,:int])
    bbp.garbage(t89);	# 100 CMDbbpgarbage ($163:void)<-(t89:bat[:void,:int])
    t91 := batcalc.oid(t90);	# 101 CMDconvertvoid_int_oid (t91:bat[:void,:oid])<-(t90:bat[:void,:int])
    bbp.garbage(t90);	# 102 CMDbbpgarbage ($164:void)<-(t90:bat[:void,:int])
    t92 := array.grid(1,132000,1,0);	# 103 ARRAYgrid (t92:bat[:void,:int])<-($86:int)($101:int)($86:int)($88:int)
    bbp.garbage(t91);	# 104 CMDbbpgarbage ($166:void)<-(t91:bat[:void,:oid])
    bbp.garbage(t92);	# 105 CMDbbpgarbage ($167:void)<-(t92:bat[:void,:int])
    t95 := array.grid(1,100,1320,0);	# 106 ARRAYgrid (t95:bat[:void,:int])<-($86:int)($95:int)($96:int)($88:int)
    t96 := batcalc.oid(t95);	# 107 CMDconvertvoid_int_oid (t96:bat[:void,:oid])<-(t95:bat[:void,:int])
    bbp.garbage(t95);	# 108 CMDbbpgarbage ($169:void)<-(t95:bat[:void,:int])
    t97 := array.grid(1,100,1,0);	# 109 ARRAYgrid (t97:bat[:void,:int])<-($86:int)($95:int)($86:int)($88:int)
    bbp.garbage(t96);	# 110 CMDbbpgarbage ($171:void)<-(t96:bat[:void,:oid])
    bbp.garbage(t97);	# 111 CMDbbpgarbage ($173:void)<-(t97:bat[:void,:int])
barrier always := true;	# 112  (always:bit)<-($175:bit) jump 144
    t42 := bbp.bind(s);	# 113 CMDbbpbind (t42:bat[:void,:dbl])<-(s:str)
    t48 := algebra.join(t47,t42);	# 114 ALGjoin (t48:bat[:void,:dbl])<-(t47:bat[:void,:oid])(t42:bat[:void,:dbl])
    bbp.garbage(t42);	# 115 CMDbbpgarbage ($131:void)<-(t42:bat[:void,:dbl])
    t59 := batcalc.-(t48,t58);	# 116 CMDbatMIN (t59:bat[:void,:dbl])<-(t48:bat[:void,:dbl])(t58:bat[:void,:dbl])
    bbp.garbage(t48);	# 117 CMDbbpgarbage ($138:void)<-(t48:bat[:void,:dbl])
    t61 := batcalc.*(t59,t59);	# 118 CMDbatMUL (t61:bat[:void,:dbl])<-(t59:bat[:void,:dbl])(t59:bat[:void,:dbl])
    bbp.garbage(t59);	# 119 CMDbbpgarbage ($140:void)<-(t59:bat[:void,:dbl])
    t72 := batcalc./(t61,t71);	# 120 CMDbatDIV (t72:bat[:void,:dbl])<-(t61:bat[:void,:dbl])(t71:bat[:void,:dbl])
    bbp.garbage(t61);	# 121 CMDbbpgarbage ($143:void)<-(t61:bat[:void,:dbl])
    t82 := aggrX3.sum(t72,t80,t81);	# 122 AX3aggrX3_sum3_dbl_dbl (t82:bat[:void,:dbl])<-(t72:bat[:void,:dbl])(t80:bat[:void,:oid])(t81:bat[:void,:int])
    bbp.garbage(t72);	# 123 CMDbbpgarbage ($152:void)<-(t72:bat[:void,:dbl])
    t83 := batcalc.*(t41,t82);	# 124 CMDcstMULbat (t83:bat[:void,:dbl])<-(t41:dbl)(t82:bat[:void,:dbl])
    bbp.garbage(t82);	# 125 CMDbbpgarbage ($154:void)<-(t82:bat[:void,:dbl])
    t84 := batcalc.exp(t83);	# 126 CMDsciencevoid_exp (t84:bat[:void,:dbl])<-(t83:bat[:void,:dbl])
    bbp.garbage(t83);	# 127 CMDbbpgarbage ($155:void)<-(t83:bat[:void,:dbl])
    t85 := batcalc.*(t40,t84);	# 128 CMDbatMUL (t85:bat[:void,:dbl])<-(t40:bat[:void,:dbl])(t84:bat[:void,:dbl])
    bbp.garbage(t84);	# 129 CMDbbpgarbage ($157:void)<-(t84:bat[:void,:dbl])
    t86 := batcalc.*(t7,t85);	# 130 CMDbatMUL (t86:bat[:void,:dbl])<-(t7:bat[:void,:dbl])(t85:bat[:void,:dbl])
    bbp.garbage(t85);	# 131 CMDbbpgarbage ($159:void)<-(t85:bat[:void,:dbl])
    t93 := aggrX3.sum(t86,t91,t92);	# 132 AX3aggrX3_sum3_dbl_dbl (t93:bat[:void,:dbl])<-(t86:bat[:void,:dbl])(t91:bat[:void,:oid])(t92:bat[:void,:int])
    bbp.garbage(t86);	# 133 CMDbbpgarbage ($165:void)<-(t86:bat[:void,:dbl])
    t94 := batcalc.log(t93);	# 134 CMDsciencevoid_log (t94:bat[:void,:dbl])<-(t93:bat[:void,:dbl])
    bbp.garbage(t93);	# 135 CMDbbpgarbage ($168:void)<-(t93:bat[:void,:dbl])
    t98 := aggrX3.sum(t94,t96,t97);	# 136 AX3aggrX3_sum3_dbl_dbl (t98:bat[:void,:dbl])<-(t94:bat[:void,:dbl])(t96:bat[:void,:oid])(t97:bat[:void,:int])
    bbp.garbage(t94);	# 137 CMDbbpgarbage ($170:void)<-(t94:bat[:void,:dbl])
    top := t98;	# 138  (top:bat[:void,:dbl])<-(t98:bat[:void,:dbl])
    bbp.garbage(t98);	# 139 CMDbbpgarbage ($172:void)<-(t98:bat[:void,:dbl])
    io.table(t97,top);	# 140 IOttable ($109:int)<-(t97:bat[:void,:int])(top:bat[:void,:dbl])
    bbp.garbage(top);	# 141 CMDbbpgarbage ($174:void)<-(top:bat[:void,:dbl])
    yield always;	# 142  (always:bit)
    redo always;	# 143  (always:bit) jump 113
exit always;	# 144  (always:bit)
end f1;	# 145  
function user.main():int;	# 0  (main:int)
#t4 := batcalc.*(8,t3); doing a reconstruction saves a lot 	# 1  ($2:str)
#t20 := batcalc.*(8,t19); 	# 2  ($4:str)
#t42:bat[:void,:dbl] := bbp.bind("Query_14x1320"); 	# 3  ($6:str)
#t45 := batcalc.*(14,t44); 	# 4  ($8:str)
#t53 := batcalc.*(8,t52); 	# 5  ($10:str)
#t61 := batcalc.pow(t59,t9); 	# 6  ($12:str)
#t87 := array.grid(100,1320,8,0); will save 30% by reuse 	# 7  ($14:str)
    mdb.showFunction("user","f1");	# 8 MDBshowFunction3 ($20:void)<-($16:str)($17:str)
##f1(); 	# 9  ($22:str)
end main;	# 10  
factory user.f1(s:str):void;
    t1 := bbp.bind("TREC2003_test_priors_8x32318");
    t2 := array.grid(132000,8,1,0);
    t3 := array.grid(1,100,10560,0);
    t4 := array.grid(1,100,10560,0,8);
    t5 := batcalc.+(t2,t4);
    bbp.garbage(t2);
    bbp.garbage(t4);
    t6 := batcalc.oid(t5);
    bbp.garbage(t5);
    t7 := algebra.join(t6,t1);
    bbp.garbage(t1);
    t8 := calc.dbl(1.0);
    t9 := calc.dbl(2.0);
    t10 := calc.dbl(3.1415);
    t11 := calc.*(t9,t10);
    t12 := calc.dbl(14.0);
    t13 := mmath.pow(t11,t12);
    t14 := mmath.sqrt(t13);
    t16 := bbp.bind("TREC2003_test_sigs_14x8x32318");
    t17 := array.grid(800,14,1,0);
    t18 := array.grid(100,8,14,0);
    t19 := array.grid(1,100,112,0);
    t20 := array.grid(1,100,112,0,8);
    t21 := batcalc.+(t18,t20);
    bbp.garbage(t18);
    bbp.garbage(t20);
    t22 := batcalc.*(14,t21);
    t23 := batcalc.+(t17,t22);
    bbp.garbage(t17);
    bbp.garbage(t22);
    t24 := batcalc.oid(t23);
    bbp.garbage(t23);
    t25 := algebra.join(t24,t16);
    bbp.garbage(t24);
    t30 := batcalc.oid(t21);
    bbp.garbage(t21);
    t31 := array.grid(1,800,1,0);
    t32 := aggrX3.prod(t25,t30,t31);
    bbp.garbage(t25);
    bbp.garbage(t30);
    bbp.garbage(t31);
    t33 := batcalc.*(t14,t32);
    bbp.garbage(t32);
    t34 := batcalc./(t8,t33);
    bbp.garbage(t33);
    t40 := algebra.join(t6,t34);
    bbp.garbage(t6);
    bbp.garbage(t34);
    t41 := calc.dbl(-0.5);
    t43 := array.grid(1056000,14,1,0);
    t44 := array.grid(100,1320,112,0);
    t45 := array.grid(100,1320,112,0,14);
    t46 := batcalc.+(t43,t45);
    bbp.garbage(t45);
    t47 := batcalc.oid(t46);
    bbp.garbage(t46);
    bbp.garbage(t47);
    t49 := bbp.bind("TREC2003_test_mus_14x8x32318");
    t51 := array.grid(132000,8,14,0);
    t52 := array.grid(1,100,147840,0);
    t53 := array.grid(1,100,147840,0,8);
    t54 := batcalc.+(t51,t53);
    bbp.garbage(t53);
    t55 := batcalc.*(14,t54);
    bbp.garbage(t54);
    t56 := batcalc.+(t43,t55);
    bbp.garbage(t43);
    bbp.garbage(t55);
    t57 := batcalc.oid(t56);
    bbp.garbage(t56);
    t58 := algebra.join(t57,t49);
    bbp.garbage(t49);
    bbp.garbage(t58);
    t71 := algebra.join(t57,t16);
    bbp.garbage(t57);
    bbp.garbage(t16);
    bbp.garbage(t71);
    t76 := batcalc.*(1320,t52);
    bbp.garbage(t52);
    t77 := batcalc.+(t44,t76);
    bbp.garbage(t44);
    bbp.garbage(t76);
    t78 := batcalc.*(8,t77);
    bbp.garbage(t77);
    t79 := batcalc.+(t51,t78);
    bbp.garbage(t51);
    bbp.garbage(t78);
    t80 := batcalc.oid(t79);
    bbp.garbage(t79);
    t81 := array.grid(1,1056000,1,0);
    bbp.garbage(t80);
    bbp.garbage(t40);
    bbp.garbage(t7);
    t87 := array.grid(t81,100,1320,8,0);
    bbp.garbage(t81);
    t89 := batcalc.*(1320,t3);
    bbp.garbage(t3);
    t90 := batcalc.+(t87,t89);
    bbp.garbage(t87);
    bbp.garbage(t89);
    t91 := batcalc.oid(t90);
    bbp.garbage(t90);
    t92 := array.grid(1,132000,1,0);
    bbp.garbage(t91);
    bbp.garbage(t92);
    t95 := array.grid(1,100,1320,0);
    t96 := batcalc.oid(t95);
    bbp.garbage(t95);
    t97 := array.grid(1,100,1,0);
    bbp.garbage(t96);
    bbp.garbage(t97);
barrier always := true;
    t42 := bbp.bind(s);
    t48 := algebra.join(t47,t42);
    bbp.garbage(t42);
    t59 := batcalc.-(t48,t58);
    bbp.garbage(t48);
    t61 := batcalc.*(t59,t59);
    bbp.garbage(t59);
    t72 := batcalc./(t61,t71);
    bbp.garbage(t61);
    t82 := aggrX3.sum(t72,t80,t81);
    bbp.garbage(t72);
    t83 := batcalc.*(t41,t82);
    bbp.garbage(t82);
    t84 := batcalc.exp(t83);
    bbp.garbage(t83);
    t85 := batcalc.*(t40,t84);
    bbp.garbage(t84);
    t86 := batcalc.*(t7,t85);
    bbp.garbage(t85);
    t93 := aggrX3.sum(t86,t91,t92);
    bbp.garbage(t86);
    t94 := batcalc.log(t93);
    bbp.garbage(t93);
    t98 := aggrX3.sum(t94,t96,t97);
    bbp.garbage(t94);
    top := t98;
    bbp.garbage(t98);
    io.table(t97,top);
    bbp.garbage(top);
    yield always;
    redo always;
exit always;
end f1;

# 11:08:38 >  
# 11:08:38 >  Done.
# 11:08:38 >  

