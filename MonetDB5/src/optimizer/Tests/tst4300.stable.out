stdout of test 'tst4300` in directory 'src/optimizer` itself:


# 11:08:31 >  
# 11:08:31 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=44745 --set sql_port=56225 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4300.mal </dev/null
# 11:08:31 >  

# Monet Database Server V4.7.1
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
##some join operations
#
#mdb();
#b:= new(:lng,:lng);
#barrier (k,v):= newRange(0:lng);
#        insert(b,v,v);
#        redo (k,v):= nextElement(1:lng,100:lng);
#exit (k,v);
#
#i:= count(b);
#print(i);
#
#c:= select(b,0:lng,9:lng);
#i:= count(c);
#print(i);
#d:= select(b,0:lng,49:lng);
#i:= count(d);
#print(i);
#
#zz:= joinPath(b,c,d);
#i:= count(zz);
#print(i);
#
##to be detected by join inversion
##z:= joinPath(b,c);
##zz:= joinPath(zz,d);
##i:= count(z);
##print(i);
#
#
function Admin.main():int;	# 0  (main:int)
    mdb.mdb();	# 1 MDBtoggle ($1:void)
    b := bbp.new(:lng,:lng);	# 2 CMDBATnew (b:bat[:lng,:lng])<-($3:lng)($4:lng)
barrier (k,v):= mal.newRange(0:lng);	# 3 RNGnewRange_lng (k:bit)(v:lng)<-($7:lng) jump 6
    bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
    redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
exit (k,v);	# 6  (k:bit)(v:lng)
    i := algebra.count(b);	# 7 ALGcount_bat (i:lng)<-(b:bat[:lng,:lng])
    io.print(i);	# 8 IOprint_val ($12:int)<-(i:lng)
    c := algebra.select(b,0:lng,9:lng);	# 9 ALGselect (c:bat[:lng,:lng])<-(b:bat[:lng,:lng])($7:lng)($14:lng)
    i := algebra.count(c);	# 10 ALGcount_bat (i:lng)<-(c:bat[:lng,:lng])
    io.print(i);	# 11 IOprint_val ($15:int)<-(i:lng)
    d := algebra.select(b,0:lng,49:lng);	# 12 ALGselect (d:bat[:lng,:lng])<-(b:bat[:lng,:lng])($7:lng)($17:lng)
    i := algebra.count(d);	# 13 ALGcount_bat (i:lng)<-(d:bat[:lng,:lng])
    io.print(i);	# 14 IOprint_val ($18:int)<-(i:lng)
    zz := algebra.joinPath(b,c,d);	# 15 QOTjoinPath (zz:bat[:lng,:lng])<-(b:bat[:lng,:lng])(c:bat[:lng,:lng])(d:bat[:lng,:lng])
    i := algebra.count(zz);	# 16 ALGcount_bat (i:lng)<-(zz:bat[:lng,:lng])
    io.print(i);	# 17 IOprint_val ($20:int)<-(i:lng)
end main;	# 18  
#mdb     b := bbp.new(:lng,:lng);	# 2 CMDBATnew (b:bat[:lng,:lng])<-($3:lng)($4:lng)
mdb>#mdb barrier (k,v):= mal.newRange(0:lng);	# 3 RNGnewRange_lng (k:bit)(v:lng)<-($7:lng) jump 6
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb     bat.insert(b,v,v);	# 4 BKCinsert_bun ($8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
mdb>#mdb     redo (k,v):= mal.nextElement(1:lng,100:lng);	# 5 RNGnextElement_lng (k:bit)(v:lng)<-($9:lng)($10:lng) jump 4
mdb>#mdb exit (k,v);	# 6  (k:bit)(v:lng)
mdb>#mdb     i := algebra.count(b);	# 7 ALGcount_bat (i:lng)<-(b:bat[:lng,:lng])
mdb>#mdb     io.print(i);	# 8 IOprint_val ($12:int)<-(i:lng)
mdb>[ 100 ]
#mdb     c := algebra.select(b,0:lng,9:lng);	# 9 ALGselect (c:bat[:lng,:lng])<-(b:bat[:lng,:lng])($7:lng)($14:lng)
mdb>#mdb     i := algebra.count(c);	# 10 ALGcount_bat (i:lng)<-(c:bat[:lng,:lng])
mdb>#mdb     io.print(i);	# 11 IOprint_val ($15:int)<-(i:lng)
mdb>[ 10 ]
#mdb     d := algebra.select(b,0:lng,49:lng);	# 12 ALGselect (d:bat[:lng,:lng])<-(b:bat[:lng,:lng])($7:lng)($17:lng)
mdb>#mdb     i := algebra.count(d);	# 13 ALGcount_bat (i:lng)<-(d:bat[:lng,:lng])
mdb>#mdb     io.print(i);	# 14 IOprint_val ($18:int)<-(i:lng)
mdb>[ 50 ]
#mdb     zz := algebra.joinPath(b,c,d);	# 15 QOTjoinPath (zz:bat[:lng,:lng])<-(b:bat[:lng,:lng])(c:bat[:lng,:lng])(d:bat[:lng,:lng])
mdb>#mdb     i := algebra.count(zz);	# 16 ALGcount_bat (i:lng)<-(zz:bat[:lng,:lng])
mdb>#mdb     io.print(i);	# 17 IOprint_val ($20:int)<-(i:lng)
mdb>[ 10 ]
#mdb end main;	# 18  
mdb>
# 11:08:31 >  
# 11:08:31 >  Done.
# 11:08:31 >  

