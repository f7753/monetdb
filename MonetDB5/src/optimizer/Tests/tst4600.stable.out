stdout of test 'tst4600` in directory 'src/optimizer` itself:


# 08:01:48 >  
# 08:01:48 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst4600.mal </dev/null
# 08:01:48 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the first test for macro expansions and inversions
#include sql;
#
#function welcome(lim:int):void;
#    i:= 0;
#barrier j:= i<lim;
#    print("Welcome");
#    i:= i+1;
#    redo j:= i<lim;
#exit j;
#end welcome;
function user.welcome(lim:int):void;	# 0  (welcome:void)<-(lim:int)
    i := 0;	# 1  (i:int)<-($3:int)
barrier j := calc.<(i,lim);	# 2 CALCcompLTintint (j:bit)<-(i:int)(lim:int) jump 6
    io.print("Welcome");	# 3 IOprint_val ($5:int)<-($6:str)
    i := calc.+(i,1);	# 4 CALCbinaryADDintint (i:int)<-(i:int)($7:int)
    redo j := calc.<(i,lim);	# 5 CALCcompLTintint (j:bit)<-(i:int)(lim:int) jump 3
exit j;	# 6  (j:bit)
end welcome;	# 7  
#
#optimizer.MEoptimizer("Admin","welcome");
#
#print("test expansion");
#welcome(2);
#showFunction();
#
function user.main():int;	# 0  (main:int)
# the first test for macro expansions and inversions 	# 1  ($2:str)
    io.print("test expansion");	# 2 IOprint_val ($6:int)<-($7:str)
    $13 := 0;	# 3  ($13:int)<-($14:int)
barrier $15 := calc.<($13,2);	# 4 CALCcompLTintint ($15:bit)<-($13:int)($9:int) jump 8
    $16 := io.print("Welcome");	# 5 IOprint_val ($16:int)<-($17:str)
    $13 := calc.+($13,1);	# 6 CALCbinaryADDintint ($13:int)<-($13:int)($18:int)
    redo $15 := calc.<($13,2);	# 7 CALCcompLTintint ($15:bit)<-($13:int)($9:int) jump 5
exit $15;	# 8  ($15:bit)
    mdb.showFunction();	# 9 MDBshowFunction ($10:void)
end main;	# 10  
[ "test expansion" ]
[ "Welcome" ]
[ "Welcome" ]
function user.main():int;
    io.print("test expansion");
    $13 := 0;
barrier $15 := calc.<($13,2);
    $16 := io.print("Welcome");
    $13 := calc.+($13,1);
    redo $15 := calc.<($13,2);
exit $15;
    mdb.showFunction();
end main;

# 08:01:49 >  
# 08:01:49 >  Done.
# 08:01:49 >  

