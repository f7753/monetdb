stdout of test 'tst4810` in directory 'src/optimizer` itself:


# 11:08:38 >  
# 11:08:38 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=44745 --set sql_port=56225 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4810.mal </dev/null
# 11:08:38 >  

# Monet Database Server V4.7.1
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
#_time:=alarm.usec();
#function f1():void;
#	t1 := array.grid(500,500,1,0);
#	top := t1;
#	bat.setName(top,"A_bat");
#	bat.persists(top,true);
#	transaction.commit();
#end f1;
function Admin.f1():void;	# 0  (f1:void)
    t1 := array.grid(500,500,1,0);	# 1 ARRAYgrid (t1:bat[:void,:int])<-($2:int)($2:int)($3:int)($4:int)
    top := t1;	# 2  (top:bat[:void,:int])<-(t1:bat[:void,:int])
    bat.setName(top,"A_bat");	# 3 BKCsetName ($6:bat[:void,:int])<-(top:bat[:void,:int])($7:str)
    bat.persists(top,true);	# 4  unknown ($8:any)<-(top:bat[:void,:int])($9:bit)
    transaction.commit();	# 5 TRNglobal_commit ($10:void)
end f1;	# 6  
!ERROR: 'bat.persists' undefined in Admin.f1[4]
#	optimizer.expressionAccumulation("Admin","f1");
#	optimizer.garbageCollector("Admin","f1");
#	#f1();
#
#function f2():void;
#	t1:bat[:void,:int] := bbp.bind("A_bat");
#	t2 := array.grid(1,500,500,0);
#	t3 := array.grid(500,500,1,0);
#	t4 := batcalc.*(500,t3);
#	t5 := batcalc.+(t2,t4);
#	t6 := oid(t5);
#	t7 := algebra.join(t6,t1);
#	top := t7;
#	bat.setName(top,"B_bat");
#	bat.persists(top,true);
#	transaction.commit();
#end f2;
function Admin.f2():void;	# 0  (f2:void)
    t1 := bbp.bind("A_bat");	# 1 CMDbbpbind (t1:bat[:void,:int])<-($2:str)
    t2 := array.grid(1,500,500,0);	# 2 ARRAYgrid (t2:bat[:void,:int])<-($4:int)($5:int)($5:int)($6:int)
    t3 := array.grid(500,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($5:int)($5:int)($4:int)($6:int)
    t4 := batcalc.*(500,t3);	# 4 CMDcstMULbat (t4:bat[:void,:int])<-($5:int)(t3:bat[:void,:int])
    t5 := batcalc.+(t2,t4);	# 5 CMDbatADD (t5:bat[:void,:int])<-(t2:bat[:void,:int])(t4:bat[:void,:int])
    t6 := batcalc.oid(t5);	# 6 CMDconvertvoid_int_oid (t6:bat[:void,:oid])<-(t5:bat[:void,:int])
    t7 := algebra.join(t6,t1);	# 7 ALGjoin (t7:bat[:void,:int])<-(t6:bat[:void,:oid])(t1:bat[:void,:int])
    top := t7;	# 8  (top:bat[:void,:int])<-(t7:bat[:void,:int])
    bat.setName(top,"B_bat");	# 9 BKCsetName ($13:bat[:void,:int])<-(top:bat[:void,:int])($14:str)
    bat.persists(top,true);	# 10  unknown ($15:any)<-(top:bat[:void,:int])($16:bit)
    transaction.commit();	# 11 TRNglobal_commit ($17:void)
end f2;	# 12  
!ERROR: 'bat.persists' undefined in Admin.f2[10]
#	optimizer.expressionAccumulation("Admin","f2");
#	optimizer.garbageCollector("Admin","f2");
#	#f2();
#
#function f3():void;
#	i1 := 0;
#	t2:bat[:void,:int] := bbp.bind("B_bat");
#	t3 := array.grid(1,500,1,0);
#	t5 := int(i1);
#	t6 := batcalc.init(t3,t5);
#	t7 := batcalc.*(500,t6);
#	t8 := batcalc.+(t3,t7);
#	t9 := oid(t8);
#	t10 := algebra.join(t9,t2);
#	t11 := array.grid(500,500,1,0);
#	t12 := oid(t11);
#	t13 := algebra.join(t12,t10);
#	t14:bat[:void,:int] := bbp.bind("A_bat");
#	t19 := batcalc.*(500,t3);
#	t20 := batcalc.+(t6,t19);
#	t21 := oid(t20);
#	t22 := algebra.join(t21,t14);
#	t23 := array.grid(1,500,500,0);
#	t24 := oid(t23);
#	t25 := algebra.join(t24,t22);
#	t26 := batcalc.*(t13,t25);
#	a_i1 := t26;
#barrier (go,i1) := newRange(1:int);
#	t27:bat[:void,:int] := bbp.bind("B_bat");
#	t28 := array.grid(1,500,1,0);
#	t30 := int(i1);
#	t31 := batcalc.init(t28,t30);
#	t32 := batcalc.*(500,t31);
#	t33 := batcalc.+(t28,t32);
#	t34 := oid(t33);
#	t35 := algebra.join(t34,t27);
#	t36 := array.grid(500,500,1,0);
#	t37 := oid(t36);
#	t38 := algebra.join(t37,t35);
#	t39:bat[:void,:int] := bbp.bind("A_bat");
#	t44 := batcalc.*(500,t28);
#	t45 := batcalc.+(t31,t44);
#	t46 := oid(t45);
#	t47 := algebra.join(t46,t39);
#	t48 := array.grid(1,500,500,0);
#	t49 := oid(t48);
#	t50 := algebra.join(t49,t47);
#	t51 := batcalc.*(t38,t50);
#	a_i1 := batcalc.+(a_i1,t51);
#	#redo (go,i1) := nextElement(1:int,500:int);
#	redo (go,i1) := nextElement(1:int,3:int);
#exit (go,i1);
#	t52 := a_i1;
#	top := t52;
#	bat.setName(top,"SIM_bat");
#	bat.persists(top,true);
#	transaction.commit();
#end f3;
function Admin.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-($2:int)
    t2 := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-($4:str)
    t3 := array.grid(1,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t5 := calc.int(i1);	# 4 CALCint2int (t5:int)<-(i1:int)
    t6 := batcalc.init(t3,t5);	# 5 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(t5:int)
    t7 := batcalc.*(500,t6);	# 6 CMDcstMULbat (t7:bat[:void,:int])<-($7:int)(t6:bat[:void,:int])
    t8 := batcalc.+(t3,t7);	# 7 CMDbatADD (t8:bat[:void,:int])<-(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t8);	# 8 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t8:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 9 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1,0);	# 10 ARRAYgrid (t11:bat[:void,:int])<-($7:int)($7:int)($6:int)($2:int)
    t12 := batcalc.oid(t11);	# 11 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 12 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14 := bbp.bind("A_bat");	# 13 CMDbbpbind (t14:bat[:void,:int])<-($18:str)
    t19 := batcalc.*(500,t3);	# 14 CMDcstMULbat (t19:bat[:void,:int])<-($7:int)(t3:bat[:void,:int])
    t20 := batcalc.+(t6,t19);	# 15 CMDbatADD (t20:bat[:void,:int])<-(t6:bat[:void,:int])(t19:bat[:void,:int])
    t21 := batcalc.oid(t20);	# 16 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t20:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 17 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1,500,500,0);	# 18 ARRAYgrid (t23:bat[:void,:int])<-($6:int)($7:int)($7:int)($2:int)
    t24 := batcalc.oid(t23);	# 19 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 20 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t26 := batcalc.*(t13,t25);	# 21 CMDbatMUL (t26:bat[:void,:int])<-(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t26;	# 22  (a_i1:bat[:void,:int])<-(t26:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 23 RNGnewRange_int (go:bit)(i1:int)<-($29:int) jump 46
    t27 := bbp.bind("B_bat");	# 24 CMDbbpbind (t27:bat[:void,:int])<-($4:str)
    t28 := array.grid(1,500,1,0);	# 25 ARRAYgrid (t28:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t30 := calc.int(i1);	# 26 CALCint2int (t30:int)<-(i1:int)
    t31 := batcalc.init(t28,t30);	# 27 CMDbatintinit (t31:bat[:void,:int])<-(t28:bat[:void,:int])(t30:int)
    t32 := batcalc.*(500,t31);	# 28 CMDcstMULbat (t32:bat[:void,:int])<-($7:int)(t31:bat[:void,:int])
    t33 := batcalc.+(t28,t32);	# 29 CMDbatADD (t33:bat[:void,:int])<-(t28:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t33);	# 30 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t33:bat[:void,:int])
    t35 := algebra.join(t34,t27);	# 31 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t27:bat[:void,:int])
    t36 := array.grid(500,500,1,0);	# 32 ARRAYgrid (t36:bat[:void,:int])<-($7:int)($7:int)($39:int)($40:int)
    t37 := batcalc.oid(t36);	# 33 CMDconvertvoid_int_oid (t37:bat[:void,:oid])<-(t36:bat[:void,:int])
    t38 := algebra.join(t37,t35);	# 34 ALGjoin (t38:bat[:void,:int])<-(t37:bat[:void,:oid])(t35:bat[:void,:int])
    t39 := bbp.bind("A_bat");	# 35 CMDbbpbind (t39:bat[:void,:int])<-($18:str)
    t44 := batcalc.*(500,t28);	# 36 CMDcstMULbat (t44:bat[:void,:int])<-($45:int)(t28:bat[:void,:int])
    t45 := batcalc.+(t31,t44);	# 37 CMDbatADD (t45:bat[:void,:int])<-(t31:bat[:void,:int])(t44:bat[:void,:int])
    t46 := batcalc.oid(t45);	# 38 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t45:bat[:void,:int])
    t47 := algebra.join(t46,t39);	# 39 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t39:bat[:void,:int])
    t48 := array.grid(1,500,500,0);	# 40 ARRAYgrid (t48:bat[:void,:int])<-($39:int)($45:int)($45:int)($40:int)
    t49 := batcalc.oid(t48);	# 41 CMDconvertvoid_int_oid (t49:bat[:void,:oid])<-(t48:bat[:void,:int])
    t50 := algebra.join(t49,t47);	# 42 ALGjoin (t50:bat[:void,:int])<-(t49:bat[:void,:oid])(t47:bat[:void,:int])
    t51 := batcalc.*(t38,t50);	# 43 CMDbatMUL (t51:bat[:void,:int])<-(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,t51);	# 44 CMDbatADD (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(t51:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 45 RNGnextElement_int (go:bit)(i1:int)<-($29:int)($53:int) jump 24
exit (go,i1);	# 46  (go:bit)(i1:int)
    t52 := a_i1;	# 47  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 48  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 49 BKCsetName ($56:bat[:void,:int])<-(top:bat[:void,:int])($57:str)
    bat.persists(top,true);	# 50  unknown ($58:any)<-(top:bat[:void,:int])($59:bit)
    transaction.commit();	# 51 TRNglobal_commit ($60:void)
end f3;	# 52  
!ERROR: 'bat.persists' undefined in Admin.f3[50]
#	optimizer.expressionAccumulation("Admin","f3");
#	optimizer.commonExpressionRemoval("Admin","f3");
#	optimizer.strengthReduction("Admin","f3");
#	optimizer.garbageCollector("Admin","f3");
#	showFunction("Admin","f3");
#	#f3();
#
#function f4():void;
#	SIM_bat := bbp.bind("SIM_bat");
#	bat.persists(SIM_bat,false);
#	transaction.commit();
#end f4;
function Admin.f4():void;	# 0  (f4:void)
    SIM_bat := bbp.bind("SIM_bat");	# 1 CMDbbpbind (SIM_bat:any)<-($2:str)
    bat.persists(SIM_bat,false);	# 2  unknown ($3:any)<-(SIM_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f4;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f4[2]
#	optimizer.expressionAccumulation("Admin","f4");
#	optimizer.garbageCollector("Admin","f4");
##	f4();
#
#function f5():void;
#	B_bat := bbp.bind("B_bat");
#	bat.persists(B_bat,false);
#	transaction.commit();
#end f5;
function Admin.f5():void;	# 0  (f5:void)
    B_bat := bbp.bind("B_bat");	# 1 CMDbbpbind (B_bat:any)<-($2:str)
    bat.persists(B_bat,false);	# 2  unknown ($3:any)<-(B_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f5;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f5[2]
#	optimizer.expressionAccumulation("Admin","f5");
#	optimizer.garbageCollector("Admin","f5");
#	#f5();
#
#function f6():void;
#	A_bat := bbp.bind("A_bat");
#	bat.persists(A_bat,false);
#	transaction.commit();
#end f6;
function Admin.f6():void;	# 0  (f6:void)
    A_bat := bbp.bind("A_bat");	# 1 CMDbbpbind (A_bat:any)<-($2:str)
    bat.persists(A_bat,false);	# 2  unknown ($3:any)<-(A_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f6;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f6[2]
#	optimizer.expressionAccumulation("Admin","f6");
#	optimizer.garbageCollector("Admin","f6");
##	f6();
#
##f1();f2();f3();
#_time2:=alarm.usec();
#
#diff := _time2 - _time;
#secs := diff / 1000000;
#decs := diff % 1000000;
#printf("#TIME %d.",secs);
#printf("%06d sec\n", decs);
##quit();
#
!ERROR: 'bat.persists' undefined in Admin.f1[4]
Optimizer expressionAccumulation failed
function Admin.f1():void;	# 0  (f1:void)
    t1 := array.grid(500,500,1,0);	# 1 ARRAYgrid (t1:bat[:void,:int])<-($2:int)($2:int)($3:int)($4:int)
    top := t1;	# 2  (top:bat[:void,:int])<-(t1:bat[:void,:int])
    bat.setName(top,"A_bat");	# 3 BKCsetName ($6:bat[:void,:int])<-(top:bat[:void,:int])($7:str)
    bat.persists(top,true);	# 4  unknown ($8:any)<-(top:bat[:void,:int])($9:bit)
    transaction.commit();	# 5 TRNglobal_commit ($10:void)
end f1;	# 6  
!ERROR: 'bat.persists' undefined in Admin.f1[4]
Optimizer expressionAccumulation optimizer failed
function Admin.f1():void;	# 0  (f1:void)
    t1 := array.grid(500,500,1,0);	# 1 ARRAYgrid (t1:bat[:void,:int])<-($2:int)($2:int)($3:int)($4:int)
    top := t1;	# 2  (top:bat[:void,:int])<-(t1:bat[:void,:int])
    bat.setName(top,"A_bat");	# 3 BKCsetName ($6:bat[:void,:int])<-(top:bat[:void,:int])($7:str)
    bat.persists(top,true);	# 4  unknown ($8:any)<-(top:bat[:void,:int])($9:bit)
    transaction.commit();	# 5 TRNglobal_commit ($10:void)
end f1;	# 6  
!ERROR: 'bat.persists' undefined in Admin.f1[5]
Optimizer garbageCollector failed
function Admin.f1():void;	# 0  (f1:void)
    t1 := array.grid(500,500,1,0);	# 1 ARRAYgrid (t1:bat[:void,:int])<-($2:int)($2:int)($3:int)($4:int)
    top := t1;	# 2  (top:bat[:void,:int])<-(t1:bat[:void,:int])
    bbp.garbage(t1);	# 3 CMDbbpgarbage ($11:void)<-(t1:bat[:void,:int])
    bat.setName(top,"A_bat");	# 4 BKCsetName ($6:bat[:void,:int])<-(top:bat[:void,:int])($7:str)
    bat.persists(top,true);	# 5  unknown ($8:any)<-(top:bat[:void,:int])($9:bit)
    bbp.garbage(top);	# 6 CMDbbpgarbage ($12:void)<-(top:bat[:void,:int])
    transaction.commit();	# 7 TRNglobal_commit ($10:void)
end f1;	# 8  
!ERROR: 'bat.persists' undefined in Admin.f1[5]
Optimizer garbageCollector optimizer failed
function Admin.f1():void;	# 0  (f1:void)
    t1 := array.grid(500,500,1,0);	# 1 ARRAYgrid (t1:bat[:void,:int])<-($2:int)($2:int)($3:int)($4:int)
    top := t1;	# 2  (top:bat[:void,:int])<-(t1:bat[:void,:int])
    bbp.garbage(t1);	# 3 CMDbbpgarbage ($11:void)<-(t1:bat[:void,:int])
    bat.setName(top,"A_bat");	# 4 BKCsetName ($6:bat[:void,:int])<-(top:bat[:void,:int])($7:str)
    bat.persists(top,true);	# 5  unknown ($8:any)<-(top:bat[:void,:int])($9:bit)
    bbp.garbage(top);	# 6 CMDbbpgarbage ($12:void)<-(top:bat[:void,:int])
    transaction.commit();	# 7 TRNglobal_commit ($10:void)
end f1;	# 8  
!ERROR: 'bat.persists' undefined in Admin.f2[10]
Optimizer expressionAccumulation failed
function Admin.f2():void;	# 0  (f2:void)
    t1 := bbp.bind("A_bat");	# 1 CMDbbpbind (t1:bat[:void,:int])<-($2:str)
    t2 := array.grid(1,500,500,0);	# 2 ARRAYgrid (t2:bat[:void,:int])<-($4:int)($5:int)($5:int)($6:int)
    t3 := array.grid(500,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($5:int)($5:int)($4:int)($6:int)
    t4 := batcalc.*(500,t3);	# 4 CMDcstMULbat (t4:bat[:void,:int])<-($5:int)(t3:bat[:void,:int])
    t5 := batcalc.+(t2,t4);	# 5 CMDbatADD (t5:bat[:void,:int])<-(t2:bat[:void,:int])(t4:bat[:void,:int])
    t6 := batcalc.oid(t5);	# 6 CMDconvertvoid_int_oid (t6:bat[:void,:oid])<-(t5:bat[:void,:int])
    t7 := algebra.join(t6,t1);	# 7 ALGjoin (t7:bat[:void,:int])<-(t6:bat[:void,:oid])(t1:bat[:void,:int])
    top := t7;	# 8  (top:bat[:void,:int])<-(t7:bat[:void,:int])
    bat.setName(top,"B_bat");	# 9 BKCsetName ($13:bat[:void,:int])<-(top:bat[:void,:int])($14:str)
    bat.persists(top,true);	# 10  unknown ($15:any)<-(top:bat[:void,:int])($16:bit)
    transaction.commit();	# 11 TRNglobal_commit ($17:void)
end f2;	# 12  
!ERROR: 'bat.persists' undefined in Admin.f2[10]
Optimizer expressionAccumulation optimizer failed
function Admin.f2():void;	# 0  (f2:void)
    t1 := bbp.bind("A_bat");	# 1 CMDbbpbind (t1:bat[:void,:int])<-($2:str)
    t2 := array.grid(1,500,500,0);	# 2 ARRAYgrid (t2:bat[:void,:int])<-($4:int)($5:int)($5:int)($6:int)
    t3 := array.grid(500,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($5:int)($5:int)($4:int)($6:int)
    t4 := batcalc.*(500,t3);	# 4 CMDcstMULbat (t4:bat[:void,:int])<-($5:int)(t3:bat[:void,:int])
    t5 := batcalc.+(t2,t4);	# 5 CMDbatADD (t5:bat[:void,:int])<-(t2:bat[:void,:int])(t4:bat[:void,:int])
    t6 := batcalc.oid(t5);	# 6 CMDconvertvoid_int_oid (t6:bat[:void,:oid])<-(t5:bat[:void,:int])
    t7 := algebra.join(t6,t1);	# 7 ALGjoin (t7:bat[:void,:int])<-(t6:bat[:void,:oid])(t1:bat[:void,:int])
    top := t7;	# 8  (top:bat[:void,:int])<-(t7:bat[:void,:int])
    bat.setName(top,"B_bat");	# 9 BKCsetName ($13:bat[:void,:int])<-(top:bat[:void,:int])($14:str)
    bat.persists(top,true);	# 10  unknown ($15:any)<-(top:bat[:void,:int])($16:bit)
    transaction.commit();	# 11 TRNglobal_commit ($17:void)
end f2;	# 12  
!ERROR: 'bat.persists' undefined in Admin.f2[17]
Optimizer garbageCollector failed
function Admin.f2():void;	# 0  (f2:void)
    t1 := bbp.bind("A_bat");	# 1 CMDbbpbind (t1:bat[:void,:int])<-($2:str)
    t2 := array.grid(1,500,500,0);	# 2 ARRAYgrid (t2:bat[:void,:int])<-($4:int)($5:int)($5:int)($6:int)
    t3 := array.grid(500,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($5:int)($5:int)($4:int)($6:int)
    t4 := batcalc.*(500,t3);	# 4 CMDcstMULbat (t4:bat[:void,:int])<-($5:int)(t3:bat[:void,:int])
    bbp.garbage(t3);	# 5 CMDbbpgarbage ($18:void)<-(t3:bat[:void,:int])
    t5 := batcalc.+(t2,t4);	# 6 CMDbatADD (t5:bat[:void,:int])<-(t2:bat[:void,:int])(t4:bat[:void,:int])
    bbp.garbage(t2);	# 7 CMDbbpgarbage ($19:void)<-(t2:bat[:void,:int])
    bbp.garbage(t4);	# 8 CMDbbpgarbage ($20:void)<-(t4:bat[:void,:int])
    t6 := batcalc.oid(t5);	# 9 CMDconvertvoid_int_oid (t6:bat[:void,:oid])<-(t5:bat[:void,:int])
    bbp.garbage(t5);	# 10 CMDbbpgarbage ($21:void)<-(t5:bat[:void,:int])
    t7 := algebra.join(t6,t1);	# 11 ALGjoin (t7:bat[:void,:int])<-(t6:bat[:void,:oid])(t1:bat[:void,:int])
    bbp.garbage(t6);	# 12 CMDbbpgarbage ($22:void)<-(t6:bat[:void,:oid])
    bbp.garbage(t1);	# 13 CMDbbpgarbage ($23:void)<-(t1:bat[:void,:int])
    top := t7;	# 14  (top:bat[:void,:int])<-(t7:bat[:void,:int])
    bbp.garbage(t7);	# 15 CMDbbpgarbage ($24:void)<-(t7:bat[:void,:int])
    bat.setName(top,"B_bat");	# 16 BKCsetName ($13:bat[:void,:int])<-(top:bat[:void,:int])($14:str)
    bat.persists(top,true);	# 17  unknown ($15:any)<-(top:bat[:void,:int])($16:bit)
    bbp.garbage(top);	# 18 CMDbbpgarbage ($25:void)<-(top:bat[:void,:int])
    transaction.commit();	# 19 TRNglobal_commit ($17:void)
end f2;	# 20  
!ERROR: 'bat.persists' undefined in Admin.f2[17]
Optimizer garbageCollector optimizer failed
function Admin.f2():void;	# 0  (f2:void)
    t1 := bbp.bind("A_bat");	# 1 CMDbbpbind (t1:bat[:void,:int])<-($2:str)
    t2 := array.grid(1,500,500,0);	# 2 ARRAYgrid (t2:bat[:void,:int])<-($4:int)($5:int)($5:int)($6:int)
    t3 := array.grid(500,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($5:int)($5:int)($4:int)($6:int)
    t4 := batcalc.*(500,t3);	# 4 CMDcstMULbat (t4:bat[:void,:int])<-($5:int)(t3:bat[:void,:int])
    bbp.garbage(t3);	# 5 CMDbbpgarbage ($18:void)<-(t3:bat[:void,:int])
    t5 := batcalc.+(t2,t4);	# 6 CMDbatADD (t5:bat[:void,:int])<-(t2:bat[:void,:int])(t4:bat[:void,:int])
    bbp.garbage(t2);	# 7 CMDbbpgarbage ($19:void)<-(t2:bat[:void,:int])
    bbp.garbage(t4);	# 8 CMDbbpgarbage ($20:void)<-(t4:bat[:void,:int])
    t6 := batcalc.oid(t5);	# 9 CMDconvertvoid_int_oid (t6:bat[:void,:oid])<-(t5:bat[:void,:int])
    bbp.garbage(t5);	# 10 CMDbbpgarbage ($21:void)<-(t5:bat[:void,:int])
    t7 := algebra.join(t6,t1);	# 11 ALGjoin (t7:bat[:void,:int])<-(t6:bat[:void,:oid])(t1:bat[:void,:int])
    bbp.garbage(t6);	# 12 CMDbbpgarbage ($22:void)<-(t6:bat[:void,:oid])
    bbp.garbage(t1);	# 13 CMDbbpgarbage ($23:void)<-(t1:bat[:void,:int])
    top := t7;	# 14  (top:bat[:void,:int])<-(t7:bat[:void,:int])
    bbp.garbage(t7);	# 15 CMDbbpgarbage ($24:void)<-(t7:bat[:void,:int])
    bat.setName(top,"B_bat");	# 16 BKCsetName ($13:bat[:void,:int])<-(top:bat[:void,:int])($14:str)
    bat.persists(top,true);	# 17  unknown ($15:any)<-(top:bat[:void,:int])($16:bit)
    bbp.garbage(top);	# 18 CMDbbpgarbage ($25:void)<-(top:bat[:void,:int])
    transaction.commit();	# 19 TRNglobal_commit ($17:void)
end f2;	# 20  
!ERROR: 'bat.persists' undefined in Admin.f3[48]
Optimizer expressionAccumulation failed
function Admin.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-($2:int)
    t2 := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-($4:str)
    t3 := array.grid(1,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat (t7:bat[:void,:int])<-($7:int)(t6:bat[:void,:int])
    t7 := batcalc.+(t7,t3,t7);	# 6 CMDbataccumADD (t7:bat[:void,:int])<-(t7:bat[:void,:int])(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t7);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t7:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 8 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1,0);	# 9 ARRAYgrid (t11:bat[:void,:int])<-($7:int)($7:int)($6:int)($2:int)
    t12 := batcalc.oid(t11);	# 10 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 11 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14 := bbp.bind("A_bat");	# 12 CMDbbpbind (t14:bat[:void,:int])<-($18:str)
    t3 := batcalc.*(t3,500,t3);	# 13 CMDbataccumMULcst2 (t3:bat[:void,:int])<-(t3:bat[:void,:int])($7:int)(t3:bat[:void,:int])
    t6 := batcalc.+(t6,t6,t3);	# 14 CMDbataccumADD (t6:bat[:void,:int])<-(t6:bat[:void,:int])(t6:bat[:void,:int])(t3:bat[:void,:int])
    t21 := batcalc.oid(t6);	# 15 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t6:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 16 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1,500,500,0);	# 17 ARRAYgrid (t23:bat[:void,:int])<-($6:int)($7:int)($7:int)($2:int)
    t24 := batcalc.oid(t23);	# 18 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 19 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t13 := batcalc.*(t13,t13,t25);	# 20 CMDbataccumMUL (t13:bat[:void,:int])<-(t13:bat[:void,:int])(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t13;	# 21  (a_i1:bat[:void,:int])<-(t13:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 22 RNGnewRange_int (go:bit)(i1:int)<-($29:int) jump 44
    t27 := bbp.bind("B_bat");	# 23 CMDbbpbind (t27:bat[:void,:int])<-($4:str)
    t28 := array.grid(1,500,1,0);	# 24 ARRAYgrid (t28:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t31 := batcalc.init(t28,i1);	# 25 CMDbatintinit (t31:bat[:void,:int])<-(t28:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 26 CMDcstMULbat (t32:bat[:void,:int])<-($7:int)(t31:bat[:void,:int])
    t32 := batcalc.+(t32,t28,t32);	# 27 CMDbataccumADD (t32:bat[:void,:int])<-(t32:bat[:void,:int])(t28:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t32);	# 28 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t32:bat[:void,:int])
    t35 := algebra.join(t34,t27);	# 29 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t27:bat[:void,:int])
    t36 := array.grid(500,500,1,0);	# 30 ARRAYgrid (t36:bat[:void,:int])<-($7:int)($7:int)($39:int)($40:int)
    t37 := batcalc.oid(t36);	# 31 CMDconvertvoid_int_oid (t37:bat[:void,:oid])<-(t36:bat[:void,:int])
    t38 := algebra.join(t37,t35);	# 32 ALGjoin (t38:bat[:void,:int])<-(t37:bat[:void,:oid])(t35:bat[:void,:int])
    t39 := bbp.bind("A_bat");	# 33 CMDbbpbind (t39:bat[:void,:int])<-($18:str)
    t28 := batcalc.*(t28,500,t28);	# 34 CMDbataccumMULcst2 (t28:bat[:void,:int])<-(t28:bat[:void,:int])($45:int)(t28:bat[:void,:int])
    t31 := batcalc.+(t31,t31,t28);	# 35 CMDbataccumADD (t31:bat[:void,:int])<-(t31:bat[:void,:int])(t31:bat[:void,:int])(t28:bat[:void,:int])
    t46 := batcalc.oid(t31);	# 36 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t31:bat[:void,:int])
    t47 := algebra.join(t46,t39);	# 37 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t39:bat[:void,:int])
    t48 := array.grid(1,500,500,0);	# 38 ARRAYgrid (t48:bat[:void,:int])<-($39:int)($45:int)($45:int)($40:int)
    t49 := batcalc.oid(t48);	# 39 CMDconvertvoid_int_oid (t49:bat[:void,:oid])<-(t48:bat[:void,:int])
    t50 := algebra.join(t49,t47);	# 40 ALGjoin (t50:bat[:void,:int])<-(t49:bat[:void,:oid])(t47:bat[:void,:int])
    t38 := batcalc.*(t38,t38,t50);	# 41 CMDbataccumMUL (t38:bat[:void,:int])<-(t38:bat[:void,:int])(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t38);	# 42 CMDbataccumADD (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t38:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 43 RNGnextElement_int (go:bit)(i1:int)<-($29:int)($53:int) jump 23
exit (go,i1);	# 44  (go:bit)(i1:int)
    t52 := a_i1;	# 45  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 46  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 47 BKCsetName ($56:bat[:void,:int])<-(top:bat[:void,:int])($57:str)
    bat.persists(top,true);	# 48  unknown ($58:any)<-(top:bat[:void,:int])($59:bit)
    transaction.commit();	# 49 TRNglobal_commit ($60:void)
end f3;	# 50  
!ERROR: 'bat.persists' undefined in Admin.f3[48]
Optimizer expressionAccumulation optimizer failed
function Admin.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-($2:int)
    t2 := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-($4:str)
    t3 := array.grid(1,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat (t7:bat[:void,:int])<-($7:int)(t6:bat[:void,:int])
    t7 := batcalc.+(t7,t3,t7);	# 6 CMDbataccumADD (t7:bat[:void,:int])<-(t7:bat[:void,:int])(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t7);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t7:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 8 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1,0);	# 9 ARRAYgrid (t11:bat[:void,:int])<-($7:int)($7:int)($6:int)($2:int)
    t12 := batcalc.oid(t11);	# 10 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 11 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14 := bbp.bind("A_bat");	# 12 CMDbbpbind (t14:bat[:void,:int])<-($18:str)
    t3 := batcalc.*(t3,500,t3);	# 13 CMDbataccumMULcst2 (t3:bat[:void,:int])<-(t3:bat[:void,:int])($7:int)(t3:bat[:void,:int])
    t6 := batcalc.+(t6,t6,t3);	# 14 CMDbataccumADD (t6:bat[:void,:int])<-(t6:bat[:void,:int])(t6:bat[:void,:int])(t3:bat[:void,:int])
    t21 := batcalc.oid(t6);	# 15 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t6:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 16 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1,500,500,0);	# 17 ARRAYgrid (t23:bat[:void,:int])<-($6:int)($7:int)($7:int)($2:int)
    t24 := batcalc.oid(t23);	# 18 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 19 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t13 := batcalc.*(t13,t13,t25);	# 20 CMDbataccumMUL (t13:bat[:void,:int])<-(t13:bat[:void,:int])(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t13;	# 21  (a_i1:bat[:void,:int])<-(t13:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 22 RNGnewRange_int (go:bit)(i1:int)<-($29:int) jump 44
    t27 := bbp.bind("B_bat");	# 23 CMDbbpbind (t27:bat[:void,:int])<-($4:str)
    t28 := array.grid(1,500,1,0);	# 24 ARRAYgrid (t28:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t31 := batcalc.init(t28,i1);	# 25 CMDbatintinit (t31:bat[:void,:int])<-(t28:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 26 CMDcstMULbat (t32:bat[:void,:int])<-($7:int)(t31:bat[:void,:int])
    t32 := batcalc.+(t32,t28,t32);	# 27 CMDbataccumADD (t32:bat[:void,:int])<-(t32:bat[:void,:int])(t28:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t32);	# 28 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t32:bat[:void,:int])
    t35 := algebra.join(t34,t27);	# 29 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t27:bat[:void,:int])
    t36 := array.grid(500,500,1,0);	# 30 ARRAYgrid (t36:bat[:void,:int])<-($7:int)($7:int)($39:int)($40:int)
    t37 := batcalc.oid(t36);	# 31 CMDconvertvoid_int_oid (t37:bat[:void,:oid])<-(t36:bat[:void,:int])
    t38 := algebra.join(t37,t35);	# 32 ALGjoin (t38:bat[:void,:int])<-(t37:bat[:void,:oid])(t35:bat[:void,:int])
    t39 := bbp.bind("A_bat");	# 33 CMDbbpbind (t39:bat[:void,:int])<-($18:str)
    t28 := batcalc.*(t28,500,t28);	# 34 CMDbataccumMULcst2 (t28:bat[:void,:int])<-(t28:bat[:void,:int])($45:int)(t28:bat[:void,:int])
    t31 := batcalc.+(t31,t31,t28);	# 35 CMDbataccumADD (t31:bat[:void,:int])<-(t31:bat[:void,:int])(t31:bat[:void,:int])(t28:bat[:void,:int])
    t46 := batcalc.oid(t31);	# 36 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t31:bat[:void,:int])
    t47 := algebra.join(t46,t39);	# 37 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t39:bat[:void,:int])
    t48 := array.grid(1,500,500,0);	# 38 ARRAYgrid (t48:bat[:void,:int])<-($39:int)($45:int)($45:int)($40:int)
    t49 := batcalc.oid(t48);	# 39 CMDconvertvoid_int_oid (t49:bat[:void,:oid])<-(t48:bat[:void,:int])
    t50 := algebra.join(t49,t47);	# 40 ALGjoin (t50:bat[:void,:int])<-(t49:bat[:void,:oid])(t47:bat[:void,:int])
    t38 := batcalc.*(t38,t38,t50);	# 41 CMDbataccumMUL (t38:bat[:void,:int])<-(t38:bat[:void,:int])(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t38);	# 42 CMDbataccumADD (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t38:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 43 RNGnextElement_int (go:bit)(i1:int)<-($29:int)($53:int) jump 23
exit (go,i1);	# 44  (go:bit)(i1:int)
    t52 := a_i1;	# 45  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 46  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 47 BKCsetName ($56:bat[:void,:int])<-(top:bat[:void,:int])($57:str)
    bat.persists(top,true);	# 48  unknown ($58:any)<-(top:bat[:void,:int])($59:bit)
    transaction.commit();	# 49 TRNglobal_commit ($60:void)
end f3;	# 50  
!ERROR: 'bat.persists' undefined in Admin.f3[42]
Optimizer commonExpressions failed
function Admin.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-($2:int)
    t2 := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-($4:str)
    t3 := array.grid(1,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat (t7:bat[:void,:int])<-($7:int)(t6:bat[:void,:int])
    t7 := batcalc.+(t7,t3,t7);	# 6 CMDbataccumADD (t7:bat[:void,:int])<-(t7:bat[:void,:int])(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t7);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t7:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 8 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1,0);	# 9 ARRAYgrid (t11:bat[:void,:int])<-($7:int)($7:int)($6:int)($2:int)
    t12 := batcalc.oid(t11);	# 10 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 11 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14 := bbp.bind("A_bat");	# 12 CMDbbpbind (t14:bat[:void,:int])<-($18:str)
    t3 := batcalc.*(t3,500,t3);	# 13 CMDbataccumMULcst2 (t3:bat[:void,:int])<-(t3:bat[:void,:int])($7:int)(t3:bat[:void,:int])
    t6 := batcalc.+(t6,t6,t3);	# 14 CMDbataccumADD (t6:bat[:void,:int])<-(t6:bat[:void,:int])(t6:bat[:void,:int])(t3:bat[:void,:int])
    t21 := batcalc.oid(t6);	# 15 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t6:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 16 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1,500,500,0);	# 17 ARRAYgrid (t23:bat[:void,:int])<-($6:int)($7:int)($7:int)($2:int)
    t24 := batcalc.oid(t23);	# 18 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 19 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t13 := batcalc.*(t13,t13,t25);	# 20 CMDbataccumMUL (t13:bat[:void,:int])<-(t13:bat[:void,:int])(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t13;	# 21  (a_i1:bat[:void,:int])<-(t13:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 22 RNGnewRange_int (go:bit)(i1:int)<-($29:int) jump 38
    t28 := array.grid(1,500,1,0);	# 23 ARRAYgrid (t28:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t31 := batcalc.init(t28,i1);	# 24 CMDbatintinit (t31:bat[:void,:int])<-(t28:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 25 CMDcstMULbat (t32:bat[:void,:int])<-($7:int)(t31:bat[:void,:int])
    t32 := batcalc.+(t32,t28,t32);	# 26 CMDbataccumADD (t32:bat[:void,:int])<-(t32:bat[:void,:int])(t28:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t32);	# 27 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t32:bat[:void,:int])
    t35 := algebra.join(t34,t2);	# 28 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t2:bat[:void,:int])
    t38 := algebra.join(t12,t35);	# 29 ALGjoin (t38:bat[:void,:int])<-(t12:bat[:void,:oid])(t35:bat[:void,:int])
    t28 := batcalc.*(t28,500,t28);	# 30 CMDbataccumMULcst2 (t28:bat[:void,:int])<-(t28:bat[:void,:int])($45:int)(t28:bat[:void,:int])
    t31 := batcalc.+(t31,t31,t28);	# 31 CMDbataccumADD (t31:bat[:void,:int])<-(t31:bat[:void,:int])(t31:bat[:void,:int])(t28:bat[:void,:int])
    t46 := batcalc.oid(t31);	# 32 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t31:bat[:void,:int])
    t47 := algebra.join(t46,t14);	# 33 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t14:bat[:void,:int])
    t50 := algebra.join(t24,t47);	# 34 ALGjoin (t50:bat[:void,:int])<-(t24:bat[:void,:oid])(t47:bat[:void,:int])
    t38 := batcalc.*(t38,t38,t50);	# 35 CMDbataccumMUL (t38:bat[:void,:int])<-(t38:bat[:void,:int])(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t38);	# 36 CMDbataccumADD (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t38:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 37 RNGnextElement_int (go:bit)(i1:int)<-($29:int)($53:int) jump 23
exit (go,i1);	# 38  (go:bit)(i1:int)
    t52 := a_i1;	# 39  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 40  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 41 BKCsetName ($56:bat[:void,:int])<-(top:bat[:void,:int])($57:str)
    bat.persists(top,true);	# 42  unknown ($58:any)<-(top:bat[:void,:int])($59:bit)
    transaction.commit();	# 43 TRNglobal_commit ($60:void)
end f3;	# 44  
!ERROR: 'bat.persists' undefined in Admin.f3[42]
Optimizer commonExpressionRemoval optimizer failed
function Admin.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-($2:int)
    t2 := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-($4:str)
    t3 := array.grid(1,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat (t7:bat[:void,:int])<-($7:int)(t6:bat[:void,:int])
    t7 := batcalc.+(t7,t3,t7);	# 6 CMDbataccumADD (t7:bat[:void,:int])<-(t7:bat[:void,:int])(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t7);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t7:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 8 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1,0);	# 9 ARRAYgrid (t11:bat[:void,:int])<-($7:int)($7:int)($6:int)($2:int)
    t12 := batcalc.oid(t11);	# 10 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 11 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14 := bbp.bind("A_bat");	# 12 CMDbbpbind (t14:bat[:void,:int])<-($18:str)
    t3 := batcalc.*(t3,500,t3);	# 13 CMDbataccumMULcst2 (t3:bat[:void,:int])<-(t3:bat[:void,:int])($7:int)(t3:bat[:void,:int])
    t6 := batcalc.+(t6,t6,t3);	# 14 CMDbataccumADD (t6:bat[:void,:int])<-(t6:bat[:void,:int])(t6:bat[:void,:int])(t3:bat[:void,:int])
    t21 := batcalc.oid(t6);	# 15 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t6:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 16 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1,500,500,0);	# 17 ARRAYgrid (t23:bat[:void,:int])<-($6:int)($7:int)($7:int)($2:int)
    t24 := batcalc.oid(t23);	# 18 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 19 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t13 := batcalc.*(t13,t13,t25);	# 20 CMDbataccumMUL (t13:bat[:void,:int])<-(t13:bat[:void,:int])(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t13;	# 21  (a_i1:bat[:void,:int])<-(t13:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 22 RNGnewRange_int (go:bit)(i1:int)<-($29:int) jump 38
    t28 := array.grid(1,500,1,0);	# 23 ARRAYgrid (t28:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t31 := batcalc.init(t28,i1);	# 24 CMDbatintinit (t31:bat[:void,:int])<-(t28:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 25 CMDcstMULbat (t32:bat[:void,:int])<-($7:int)(t31:bat[:void,:int])
    t32 := batcalc.+(t32,t28,t32);	# 26 CMDbataccumADD (t32:bat[:void,:int])<-(t32:bat[:void,:int])(t28:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t32);	# 27 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t32:bat[:void,:int])
    t35 := algebra.join(t34,t2);	# 28 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t2:bat[:void,:int])
    t38 := algebra.join(t12,t35);	# 29 ALGjoin (t38:bat[:void,:int])<-(t12:bat[:void,:oid])(t35:bat[:void,:int])
    t28 := batcalc.*(t28,500,t28);	# 30 CMDbataccumMULcst2 (t28:bat[:void,:int])<-(t28:bat[:void,:int])($45:int)(t28:bat[:void,:int])
    t31 := batcalc.+(t31,t31,t28);	# 31 CMDbataccumADD (t31:bat[:void,:int])<-(t31:bat[:void,:int])(t31:bat[:void,:int])(t28:bat[:void,:int])
    t46 := batcalc.oid(t31);	# 32 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t31:bat[:void,:int])
    t47 := algebra.join(t46,t14);	# 33 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t14:bat[:void,:int])
    t50 := algebra.join(t24,t47);	# 34 ALGjoin (t50:bat[:void,:int])<-(t24:bat[:void,:oid])(t47:bat[:void,:int])
    t38 := batcalc.*(t38,t38,t50);	# 35 CMDbataccumMUL (t38:bat[:void,:int])<-(t38:bat[:void,:int])(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t38);	# 36 CMDbataccumADD (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t38:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 37 RNGnextElement_int (go:bit)(i1:int)<-($29:int)($53:int) jump 23
exit (go,i1);	# 38  (go:bit)(i1:int)
    t52 := a_i1;	# 39  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 40  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 41 BKCsetName ($56:bat[:void,:int])<-(top:bat[:void,:int])($57:str)
    bat.persists(top,true);	# 42  unknown ($58:any)<-(top:bat[:void,:int])($59:bit)
    transaction.commit();	# 43 TRNglobal_commit ($60:void)
end f3;	# 44  
!ERROR: 'bat.persists' undefined in Admin.f3[42]
Optimizer strengthReduction failed
function Admin.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-($2:int)
    t2 := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-($4:str)
    t3 := array.grid(1,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat (t7:bat[:void,:int])<-($7:int)(t6:bat[:void,:int])
    t7 := batcalc.+(t7,t3,t7);	# 6 CMDbataccumADD (t7:bat[:void,:int])<-(t7:bat[:void,:int])(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t7);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t7:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 8 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1,0);	# 9 ARRAYgrid (t11:bat[:void,:int])<-($7:int)($7:int)($6:int)($2:int)
    t12 := batcalc.oid(t11);	# 10 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 11 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14 := bbp.bind("A_bat");	# 12 CMDbbpbind (t14:bat[:void,:int])<-($18:str)
    t3 := batcalc.*(t3,500,t3);	# 13 CMDbataccumMULcst2 (t3:bat[:void,:int])<-(t3:bat[:void,:int])($7:int)(t3:bat[:void,:int])
    t6 := batcalc.+(t6,t6,t3);	# 14 CMDbataccumADD (t6:bat[:void,:int])<-(t6:bat[:void,:int])(t6:bat[:void,:int])(t3:bat[:void,:int])
    t21 := batcalc.oid(t6);	# 15 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t6:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 16 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1,500,500,0);	# 17 ARRAYgrid (t23:bat[:void,:int])<-($6:int)($7:int)($7:int)($2:int)
    t24 := batcalc.oid(t23);	# 18 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 19 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t13 := batcalc.*(t13,t13,t25);	# 20 CMDbataccumMUL (t13:bat[:void,:int])<-(t13:bat[:void,:int])(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t13;	# 21  (a_i1:bat[:void,:int])<-(t13:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 22 RNGnewRange_int (go:bit)(i1:int)<-($29:int) jump 38
    t28 := array.grid(1,500,1,0);	# 23 ARRAYgrid (t28:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t31 := batcalc.init(t28,i1);	# 24 CMDbatintinit (t31:bat[:void,:int])<-(t28:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 25 CMDcstMULbat (t32:bat[:void,:int])<-($7:int)(t31:bat[:void,:int])
    t32 := batcalc.+(t32,t28,t32);	# 26 CMDbataccumADD (t32:bat[:void,:int])<-(t32:bat[:void,:int])(t28:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t32);	# 27 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t32:bat[:void,:int])
    t35 := algebra.join(t34,t2);	# 28 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t2:bat[:void,:int])
    t38 := algebra.join(t12,t35);	# 29 ALGjoin (t38:bat[:void,:int])<-(t12:bat[:void,:oid])(t35:bat[:void,:int])
    t28 := batcalc.*(t28,500,t28);	# 30 CMDbataccumMULcst2 (t28:bat[:void,:int])<-(t28:bat[:void,:int])($45:int)(t28:bat[:void,:int])
    t31 := batcalc.+(t31,t31,t28);	# 31 CMDbataccumADD (t31:bat[:void,:int])<-(t31:bat[:void,:int])(t31:bat[:void,:int])(t28:bat[:void,:int])
    t46 := batcalc.oid(t31);	# 32 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t31:bat[:void,:int])
    t47 := algebra.join(t46,t14);	# 33 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t14:bat[:void,:int])
    t50 := algebra.join(t24,t47);	# 34 ALGjoin (t50:bat[:void,:int])<-(t24:bat[:void,:oid])(t47:bat[:void,:int])
    t38 := batcalc.*(t38,t38,t50);	# 35 CMDbataccumMUL (t38:bat[:void,:int])<-(t38:bat[:void,:int])(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t38);	# 36 CMDbataccumADD (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t38:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 37 RNGnextElement_int (go:bit)(i1:int)<-($29:int)($53:int) jump 23
exit (go,i1);	# 38  (go:bit)(i1:int)
    t52 := a_i1;	# 39  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 40  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 41 BKCsetName ($56:bat[:void,:int])<-(top:bat[:void,:int])($57:str)
    bat.persists(top,true);	# 42  unknown ($58:any)<-(top:bat[:void,:int])($59:bit)
    transaction.commit();	# 43 TRNglobal_commit ($60:void)
end f3;	# 44  
!ERROR: 'bat.persists' undefined in Admin.f3[42]
Optimizer strengthReduction optimizer failed
function Admin.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-($2:int)
    t2 := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-($4:str)
    t3 := array.grid(1,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat (t7:bat[:void,:int])<-($7:int)(t6:bat[:void,:int])
    t7 := batcalc.+(t7,t3,t7);	# 6 CMDbataccumADD (t7:bat[:void,:int])<-(t7:bat[:void,:int])(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t7);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t7:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 8 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1,0);	# 9 ARRAYgrid (t11:bat[:void,:int])<-($7:int)($7:int)($6:int)($2:int)
    t12 := batcalc.oid(t11);	# 10 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 11 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14 := bbp.bind("A_bat");	# 12 CMDbbpbind (t14:bat[:void,:int])<-($18:str)
    t3 := batcalc.*(t3,500,t3);	# 13 CMDbataccumMULcst2 (t3:bat[:void,:int])<-(t3:bat[:void,:int])($7:int)(t3:bat[:void,:int])
    t6 := batcalc.+(t6,t6,t3);	# 14 CMDbataccumADD (t6:bat[:void,:int])<-(t6:bat[:void,:int])(t6:bat[:void,:int])(t3:bat[:void,:int])
    t21 := batcalc.oid(t6);	# 15 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t6:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 16 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1,500,500,0);	# 17 ARRAYgrid (t23:bat[:void,:int])<-($6:int)($7:int)($7:int)($2:int)
    t24 := batcalc.oid(t23);	# 18 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 19 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t13 := batcalc.*(t13,t13,t25);	# 20 CMDbataccumMUL (t13:bat[:void,:int])<-(t13:bat[:void,:int])(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t13;	# 21  (a_i1:bat[:void,:int])<-(t13:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 22 RNGnewRange_int (go:bit)(i1:int)<-($29:int) jump 38
    t28 := array.grid(1,500,1,0);	# 23 ARRAYgrid (t28:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t31 := batcalc.init(t28,i1);	# 24 CMDbatintinit (t31:bat[:void,:int])<-(t28:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 25 CMDcstMULbat (t32:bat[:void,:int])<-($7:int)(t31:bat[:void,:int])
    t32 := batcalc.+(t32,t28,t32);	# 26 CMDbataccumADD (t32:bat[:void,:int])<-(t32:bat[:void,:int])(t28:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t32);	# 27 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t32:bat[:void,:int])
    t35 := algebra.join(t34,t2);	# 28 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t2:bat[:void,:int])
    t38 := algebra.join(t12,t35);	# 29 ALGjoin (t38:bat[:void,:int])<-(t12:bat[:void,:oid])(t35:bat[:void,:int])
    t28 := batcalc.*(t28,500,t28);	# 30 CMDbataccumMULcst2 (t28:bat[:void,:int])<-(t28:bat[:void,:int])($45:int)(t28:bat[:void,:int])
    t31 := batcalc.+(t31,t31,t28);	# 31 CMDbataccumADD (t31:bat[:void,:int])<-(t31:bat[:void,:int])(t31:bat[:void,:int])(t28:bat[:void,:int])
    t46 := batcalc.oid(t31);	# 32 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t31:bat[:void,:int])
    t47 := algebra.join(t46,t14);	# 33 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t14:bat[:void,:int])
    t50 := algebra.join(t24,t47);	# 34 ALGjoin (t50:bat[:void,:int])<-(t24:bat[:void,:oid])(t47:bat[:void,:int])
    t38 := batcalc.*(t38,t38,t50);	# 35 CMDbataccumMUL (t38:bat[:void,:int])<-(t38:bat[:void,:int])(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t38);	# 36 CMDbataccumADD (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t38:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 37 RNGnextElement_int (go:bit)(i1:int)<-($29:int)($53:int) jump 23
exit (go,i1);	# 38  (go:bit)(i1:int)
    t52 := a_i1;	# 39  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 40  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 41 BKCsetName ($56:bat[:void,:int])<-(top:bat[:void,:int])($57:str)
    bat.persists(top,true);	# 42  unknown ($58:any)<-(top:bat[:void,:int])($59:bit)
    transaction.commit();	# 43 TRNglobal_commit ($60:void)
end f3;	# 44  
!ERROR: 'bat.persists' undefined in Admin.f3[62]
Optimizer garbageCollector failed
function Admin.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-($2:int)
    t2 := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-($4:str)
    t3 := array.grid(1,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat (t7:bat[:void,:int])<-($7:int)(t6:bat[:void,:int])
    t7 := batcalc.+(t7,t3,t7);	# 6 CMDbataccumADD (t7:bat[:void,:int])<-(t7:bat[:void,:int])(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t7);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t7:bat[:void,:int])
    bbp.garbage(t7);	# 8 CMDbbpgarbage ($61:void)<-(t7:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 9 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    bbp.garbage(t9);	# 10 CMDbbpgarbage ($62:void)<-(t9:bat[:void,:oid])
    t11 := array.grid(500,500,1,0);	# 11 ARRAYgrid (t11:bat[:void,:int])<-($7:int)($7:int)($6:int)($2:int)
    t12 := batcalc.oid(t11);	# 12 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    bbp.garbage(t11);	# 13 CMDbbpgarbage ($63:void)<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 14 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    bbp.garbage(t10);	# 15 CMDbbpgarbage ($64:void)<-(t10:bat[:void,:int])
    t14 := bbp.bind("A_bat");	# 16 CMDbbpbind (t14:bat[:void,:int])<-($18:str)
    t3 := batcalc.*(t3,500,t3);	# 17 CMDbataccumMULcst2 (t3:bat[:void,:int])<-(t3:bat[:void,:int])($7:int)(t3:bat[:void,:int])
    t6 := batcalc.+(t6,t6,t3);	# 18 CMDbataccumADD (t6:bat[:void,:int])<-(t6:bat[:void,:int])(t6:bat[:void,:int])(t3:bat[:void,:int])
    bbp.garbage(t3);	# 19 CMDbbpgarbage ($65:void)<-(t3:bat[:void,:int])
    t21 := batcalc.oid(t6);	# 20 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t6:bat[:void,:int])
    bbp.garbage(t6);	# 21 CMDbbpgarbage ($66:void)<-(t6:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 22 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    bbp.garbage(t21);	# 23 CMDbbpgarbage ($67:void)<-(t21:bat[:void,:oid])
    t23 := array.grid(1,500,500,0);	# 24 ARRAYgrid (t23:bat[:void,:int])<-($6:int)($7:int)($7:int)($2:int)
    t24 := batcalc.oid(t23);	# 25 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    bbp.garbage(t23);	# 26 CMDbbpgarbage ($68:void)<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 27 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    bbp.garbage(t22);	# 28 CMDbbpgarbage ($69:void)<-(t22:bat[:void,:int])
    t13 := batcalc.*(t13,t13,t25);	# 29 CMDbataccumMUL (t13:bat[:void,:int])<-(t13:bat[:void,:int])(t13:bat[:void,:int])(t25:bat[:void,:int])
    bbp.garbage(t25);	# 30 CMDbbpgarbage ($70:void)<-(t25:bat[:void,:int])
    a_i1 := t13;	# 31  (a_i1:bat[:void,:int])<-(t13:bat[:void,:int])
    bbp.garbage(t13);	# 32 CMDbbpgarbage ($71:void)<-(t13:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 33 RNGnewRange_int (go:bit)(i1:int)<-($29:int) jump 58
    t28 := array.grid(1,500,1,0);	# 34 ARRAYgrid (t28:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t31 := batcalc.init(t28,i1);	# 35 CMDbatintinit (t31:bat[:void,:int])<-(t28:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 36 CMDcstMULbat (t32:bat[:void,:int])<-($7:int)(t31:bat[:void,:int])
    t32 := batcalc.+(t32,t28,t32);	# 37 CMDbataccumADD (t32:bat[:void,:int])<-(t32:bat[:void,:int])(t28:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t32);	# 38 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t32:bat[:void,:int])
    bbp.garbage(t32);	# 39 CMDbbpgarbage ($72:void)<-(t32:bat[:void,:int])
    t35 := algebra.join(t34,t2);	# 40 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t2:bat[:void,:int])
    bbp.garbage(t34);	# 41 CMDbbpgarbage ($73:void)<-(t34:bat[:void,:oid])
    t38 := algebra.join(t12,t35);	# 42 ALGjoin (t38:bat[:void,:int])<-(t12:bat[:void,:oid])(t35:bat[:void,:int])
    bbp.garbage(t35);	# 43 CMDbbpgarbage ($74:void)<-(t35:bat[:void,:int])
    t28 := batcalc.*(t28,500,t28);	# 44 CMDbataccumMULcst2 (t28:bat[:void,:int])<-(t28:bat[:void,:int])($45:int)(t28:bat[:void,:int])
    t31 := batcalc.+(t31,t31,t28);	# 45 CMDbataccumADD (t31:bat[:void,:int])<-(t31:bat[:void,:int])(t31:bat[:void,:int])(t28:bat[:void,:int])
    bbp.garbage(t28);	# 46 CMDbbpgarbage ($75:void)<-(t28:bat[:void,:int])
    t46 := batcalc.oid(t31);	# 47 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t31:bat[:void,:int])
    bbp.garbage(t31);	# 48 CMDbbpgarbage ($76:void)<-(t31:bat[:void,:int])
    t47 := algebra.join(t46,t14);	# 49 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t14:bat[:void,:int])
    bbp.garbage(t46);	# 50 CMDbbpgarbage ($77:void)<-(t46:bat[:void,:oid])
    t50 := algebra.join(t24,t47);	# 51 ALGjoin (t50:bat[:void,:int])<-(t24:bat[:void,:oid])(t47:bat[:void,:int])
    bbp.garbage(t47);	# 52 CMDbbpgarbage ($78:void)<-(t47:bat[:void,:int])
    t38 := batcalc.*(t38,t38,t50);	# 53 CMDbataccumMUL (t38:bat[:void,:int])<-(t38:bat[:void,:int])(t38:bat[:void,:int])(t50:bat[:void,:int])
    bbp.garbage(t50);	# 54 CMDbbpgarbage ($79:void)<-(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t38);	# 55 CMDbataccumADD (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t38:bat[:void,:int])
    bbp.garbage(t38);	# 56 CMDbbpgarbage ($80:void)<-(t38:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 57 RNGnextElement_int (go:bit)(i1:int)<-($29:int)($53:int) jump 34
exit (go,i1);	# 58  (go:bit)(i1:int)
    t52 := a_i1;	# 59  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 60  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 61 BKCsetName ($56:bat[:void,:int])<-(top:bat[:void,:int])($57:str)
    bat.persists(top,true);	# 62  unknown ($58:any)<-(top:bat[:void,:int])($59:bit)
    transaction.commit();	# 63 TRNglobal_commit ($60:void)
end f3;	# 64  
!ERROR: 'bat.persists' undefined in Admin.f3[62]
Optimizer garbageCollector optimizer failed
function Admin.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-($2:int)
    t2 := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-($4:str)
    t3 := array.grid(1,500,1,0);	# 3 ARRAYgrid (t3:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat (t7:bat[:void,:int])<-($7:int)(t6:bat[:void,:int])
    t7 := batcalc.+(t7,t3,t7);	# 6 CMDbataccumADD (t7:bat[:void,:int])<-(t7:bat[:void,:int])(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t7);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t7:bat[:void,:int])
    bbp.garbage(t7);	# 8 CMDbbpgarbage ($61:void)<-(t7:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 9 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    bbp.garbage(t9);	# 10 CMDbbpgarbage ($62:void)<-(t9:bat[:void,:oid])
    t11 := array.grid(500,500,1,0);	# 11 ARRAYgrid (t11:bat[:void,:int])<-($7:int)($7:int)($6:int)($2:int)
    t12 := batcalc.oid(t11);	# 12 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    bbp.garbage(t11);	# 13 CMDbbpgarbage ($63:void)<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 14 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    bbp.garbage(t10);	# 15 CMDbbpgarbage ($64:void)<-(t10:bat[:void,:int])
    t14 := bbp.bind("A_bat");	# 16 CMDbbpbind (t14:bat[:void,:int])<-($18:str)
    t3 := batcalc.*(t3,500,t3);	# 17 CMDbataccumMULcst2 (t3:bat[:void,:int])<-(t3:bat[:void,:int])($7:int)(t3:bat[:void,:int])
    t6 := batcalc.+(t6,t6,t3);	# 18 CMDbataccumADD (t6:bat[:void,:int])<-(t6:bat[:void,:int])(t6:bat[:void,:int])(t3:bat[:void,:int])
    bbp.garbage(t3);	# 19 CMDbbpgarbage ($65:void)<-(t3:bat[:void,:int])
    t21 := batcalc.oid(t6);	# 20 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t6:bat[:void,:int])
    bbp.garbage(t6);	# 21 CMDbbpgarbage ($66:void)<-(t6:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 22 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    bbp.garbage(t21);	# 23 CMDbbpgarbage ($67:void)<-(t21:bat[:void,:oid])
    t23 := array.grid(1,500,500,0);	# 24 ARRAYgrid (t23:bat[:void,:int])<-($6:int)($7:int)($7:int)($2:int)
    t24 := batcalc.oid(t23);	# 25 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    bbp.garbage(t23);	# 26 CMDbbpgarbage ($68:void)<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 27 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    bbp.garbage(t22);	# 28 CMDbbpgarbage ($69:void)<-(t22:bat[:void,:int])
    t13 := batcalc.*(t13,t13,t25);	# 29 CMDbataccumMUL (t13:bat[:void,:int])<-(t13:bat[:void,:int])(t13:bat[:void,:int])(t25:bat[:void,:int])
    bbp.garbage(t25);	# 30 CMDbbpgarbage ($70:void)<-(t25:bat[:void,:int])
    a_i1 := t13;	# 31  (a_i1:bat[:void,:int])<-(t13:bat[:void,:int])
    bbp.garbage(t13);	# 32 CMDbbpgarbage ($71:void)<-(t13:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 33 RNGnewRange_int (go:bit)(i1:int)<-($29:int) jump 58
    t28 := array.grid(1,500,1,0);	# 34 ARRAYgrid (t28:bat[:void,:int])<-($6:int)($7:int)($6:int)($2:int)
    t31 := batcalc.init(t28,i1);	# 35 CMDbatintinit (t31:bat[:void,:int])<-(t28:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 36 CMDcstMULbat (t32:bat[:void,:int])<-($7:int)(t31:bat[:void,:int])
    t32 := batcalc.+(t32,t28,t32);	# 37 CMDbataccumADD (t32:bat[:void,:int])<-(t32:bat[:void,:int])(t28:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t32);	# 38 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t32:bat[:void,:int])
    bbp.garbage(t32);	# 39 CMDbbpgarbage ($72:void)<-(t32:bat[:void,:int])
    t35 := algebra.join(t34,t2);	# 40 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t2:bat[:void,:int])
    bbp.garbage(t34);	# 41 CMDbbpgarbage ($73:void)<-(t34:bat[:void,:oid])
    t38 := algebra.join(t12,t35);	# 42 ALGjoin (t38:bat[:void,:int])<-(t12:bat[:void,:oid])(t35:bat[:void,:int])
    bbp.garbage(t35);	# 43 CMDbbpgarbage ($74:void)<-(t35:bat[:void,:int])
    t28 := batcalc.*(t28,500,t28);	# 44 CMDbataccumMULcst2 (t28:bat[:void,:int])<-(t28:bat[:void,:int])($45:int)(t28:bat[:void,:int])
    t31 := batcalc.+(t31,t31,t28);	# 45 CMDbataccumADD (t31:bat[:void,:int])<-(t31:bat[:void,:int])(t31:bat[:void,:int])(t28:bat[:void,:int])
    bbp.garbage(t28);	# 46 CMDbbpgarbage ($75:void)<-(t28:bat[:void,:int])
    t46 := batcalc.oid(t31);	# 47 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t31:bat[:void,:int])
    bbp.garbage(t31);	# 48 CMDbbpgarbage ($76:void)<-(t31:bat[:void,:int])
    t47 := algebra.join(t46,t14);	# 49 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t14:bat[:void,:int])
    bbp.garbage(t46);	# 50 CMDbbpgarbage ($77:void)<-(t46:bat[:void,:oid])
    t50 := algebra.join(t24,t47);	# 51 ALGjoin (t50:bat[:void,:int])<-(t24:bat[:void,:oid])(t47:bat[:void,:int])
    bbp.garbage(t47);	# 52 CMDbbpgarbage ($78:void)<-(t47:bat[:void,:int])
    t38 := batcalc.*(t38,t38,t50);	# 53 CMDbataccumMUL (t38:bat[:void,:int])<-(t38:bat[:void,:int])(t38:bat[:void,:int])(t50:bat[:void,:int])
    bbp.garbage(t50);	# 54 CMDbbpgarbage ($79:void)<-(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t38);	# 55 CMDbataccumADD (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t38:bat[:void,:int])
    bbp.garbage(t38);	# 56 CMDbbpgarbage ($80:void)<-(t38:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 57 RNGnextElement_int (go:bit)(i1:int)<-($29:int)($53:int) jump 34
exit (go,i1);	# 58  (go:bit)(i1:int)
    t52 := a_i1;	# 59  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 60  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 61 BKCsetName ($56:bat[:void,:int])<-(top:bat[:void,:int])($57:str)
    bat.persists(top,true);	# 62  unknown ($58:any)<-(top:bat[:void,:int])($59:bit)
    transaction.commit();	# 63 TRNglobal_commit ($60:void)
end f3;	# 64  
!ERROR: 'bat.persists' undefined in Admin.f4[2]
Optimizer expressionAccumulation failed
function Admin.f4():void;	# 0  (f4:void)
    SIM_bat := bbp.bind("SIM_bat");	# 1 CMDbbpbind (SIM_bat:any)<-($2:str)
    bat.persists(SIM_bat,false);	# 2  unknown ($3:any)<-(SIM_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f4;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f4[2]
Optimizer expressionAccumulation optimizer failed
function Admin.f4():void;	# 0  (f4:void)
    SIM_bat := bbp.bind("SIM_bat");	# 1 CMDbbpbind (SIM_bat:any)<-($2:str)
    bat.persists(SIM_bat,false);	# 2  unknown ($3:any)<-(SIM_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f4;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f4[2]
Optimizer garbageCollector failed
function Admin.f4():void;	# 0  (f4:void)
    SIM_bat := bbp.bind("SIM_bat");	# 1 CMDbbpbind (SIM_bat:any)<-($2:str)
    bat.persists(SIM_bat,false);	# 2  unknown ($3:any)<-(SIM_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f4;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f4[2]
Optimizer garbageCollector optimizer failed
function Admin.f4():void;	# 0  (f4:void)
    SIM_bat := bbp.bind("SIM_bat");	# 1 CMDbbpbind (SIM_bat:any)<-($2:str)
    bat.persists(SIM_bat,false);	# 2  unknown ($3:any)<-(SIM_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f4;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f5[2]
Optimizer expressionAccumulation failed
function Admin.f5():void;	# 0  (f5:void)
    B_bat := bbp.bind("B_bat");	# 1 CMDbbpbind (B_bat:any)<-($2:str)
    bat.persists(B_bat,false);	# 2  unknown ($3:any)<-(B_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f5;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f5[2]
Optimizer expressionAccumulation optimizer failed
function Admin.f5():void;	# 0  (f5:void)
    B_bat := bbp.bind("B_bat");	# 1 CMDbbpbind (B_bat:any)<-($2:str)
    bat.persists(B_bat,false);	# 2  unknown ($3:any)<-(B_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f5;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f5[2]
Optimizer garbageCollector failed
function Admin.f5():void;	# 0  (f5:void)
    B_bat := bbp.bind("B_bat");	# 1 CMDbbpbind (B_bat:any)<-($2:str)
    bat.persists(B_bat,false);	# 2  unknown ($3:any)<-(B_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f5;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f5[2]
Optimizer garbageCollector optimizer failed
function Admin.f5():void;	# 0  (f5:void)
    B_bat := bbp.bind("B_bat");	# 1 CMDbbpbind (B_bat:any)<-($2:str)
    bat.persists(B_bat,false);	# 2  unknown ($3:any)<-(B_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f5;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f6[2]
Optimizer expressionAccumulation failed
function Admin.f6():void;	# 0  (f6:void)
    A_bat := bbp.bind("A_bat");	# 1 CMDbbpbind (A_bat:any)<-($2:str)
    bat.persists(A_bat,false);	# 2  unknown ($3:any)<-(A_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f6;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f6[2]
Optimizer expressionAccumulation optimizer failed
function Admin.f6():void;	# 0  (f6:void)
    A_bat := bbp.bind("A_bat");	# 1 CMDbbpbind (A_bat:any)<-($2:str)
    bat.persists(A_bat,false);	# 2  unknown ($3:any)<-(A_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f6;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f6[2]
Optimizer garbageCollector failed
function Admin.f6():void;	# 0  (f6:void)
    A_bat := bbp.bind("A_bat");	# 1 CMDbbpbind (A_bat:any)<-($2:str)
    bat.persists(A_bat,false);	# 2  unknown ($3:any)<-(A_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f6;	# 4  
!ERROR: 'bat.persists' undefined in Admin.f6[2]
Optimizer garbageCollector optimizer failed
function Admin.f6():void;	# 0  (f6:void)
    A_bat := bbp.bind("A_bat");	# 1 CMDbbpbind (A_bat:any)<-($2:str)
    bat.persists(A_bat,false);	# 2  unknown ($3:any)<-(A_bat:any)($4:bit)
    transaction.commit();	# 3 TRNglobal_commit ($5:void)
end f6;	# 4  
function Admin.main():int;	# 0  (main:int)
    _time := alarm.usec();	# 1 ALARMusec (_time:lng)
    mdb.showFunction("Admin","f3");	# 2 MDBshowFunction3 ($14:void)<-($3:str)($10:str)
    _time2 := alarm.usec();	# 3 ALARMusec (_time2:lng)
    diff := calc.-(_time2,_time);	# 4 CALCbinarySUBlnglng (diff:lng)<-(_time2:lng)(_time:lng)
    secs := calc./(diff,1000000);	# 5 CALCbinarycheckDIVlngint (secs:lng)<-(diff:lng)($27:int)
    decs := calc.%(diff,1000000);	# 6 CALCbinaryMODlngint (decs:int)<-(diff:lng)($27:int)
    io.printf("#TIME %d.",secs);	# 7 IOprint_formatted_lng ($29:int)<-($30:str)(secs:lng)
    io.printf("%06d sec\n",decs);	# 8 IOprint_formatted_int ($31:int)<-($32:str)(decs:int)
end main;	# 9  
function Admin.f3():void;
    i1 := 0;
    t2 := bbp.bind("B_bat");
    t3 := array.grid(1,500,1,0);
    t6 := batcalc.init(t3,i1);
    t7 := batcalc.*(500,t6);
    t7 := batcalc.+(t7,t3,t7);
    t9 := batcalc.oid(t7);
    bbp.garbage(t7);
    t10 := algebra.join(t9,t2);
    bbp.garbage(t9);
    t11 := array.grid(500,500,1,0);
    t12 := batcalc.oid(t11);
    bbp.garbage(t11);
    t13 := algebra.join(t12,t10);
    bbp.garbage(t10);
    t14 := bbp.bind("A_bat");
    t3 := batcalc.*(t3,500,t3);
    t6 := batcalc.+(t6,t6,t3);
    bbp.garbage(t3);
    t21 := batcalc.oid(t6);
    bbp.garbage(t6);
    t22 := algebra.join(t21,t14);
    bbp.garbage(t21);
    t23 := array.grid(1,500,500,0);
    t24 := batcalc.oid(t23);
    bbp.garbage(t23);
    t25 := algebra.join(t24,t22);
    bbp.garbage(t22);
    t13 := batcalc.*(t13,t13,t25);
    bbp.garbage(t25);
    a_i1 := t13;
    bbp.garbage(t13);
barrier (go,i1):= mal.newRange(1:int);
    t28 := array.grid(1,500,1,0);
    t31 := batcalc.init(t28,i1);
    t32 := batcalc.*(500,t31);
    t32 := batcalc.+(t32,t28,t32);
    t34 := batcalc.oid(t32);
    bbp.garbage(t32);
    t35 := algebra.join(t34,t2);
    bbp.garbage(t34);
    t38 := algebra.join(t12,t35);
    bbp.garbage(t35);
    t28 := batcalc.*(t28,500,t28);
    t31 := batcalc.+(t31,t31,t28);
    bbp.garbage(t28);
    t46 := batcalc.oid(t31);
    bbp.garbage(t31);
    t47 := algebra.join(t46,t14);
    bbp.garbage(t46);
    t50 := algebra.join(t24,t47);
    bbp.garbage(t47);
    t38 := batcalc.*(t38,t38,t50);
    bbp.garbage(t50);
    a_i1 := batcalc.+(a_i1,a_i1,t38);
    bbp.garbage(t38);
    redo (go,i1):= mal.nextElement(1:int,3:int);
exit (go,i1);
    t52 := a_i1;
    top := t52;
    bat.setName(top,"SIM_bat");
    bat.persists(top,true);
    transaction.commit();
end f3;
#TIME 0.000332 sec

# 11:08:38 >  
# 11:08:38 >  Done.
# 11:08:38 >  

