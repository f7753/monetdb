stdout of test 'part01` in directory 'src/optimizer` itself:


# 12:35:26 >  
# 12:35:26 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=40515 --set sql_port=57921 --set monet_prompt= --trace --dbname=mTests_src_optimizer  part01.mal </dev/null
# 12:35:26 >  

# Monet Database Server V4.7.1
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
##testing the partition optimizer
#
#a1:= new(:void,:int);
#setSequenceBase(a1,0@0);
#a2:= new(:void,:int);
#setSequenceBase(a2,10@0);
#a3:= new(:void,:int);
#setSequenceBase(a3,20@0);
#b1:= new(:void,:int);
#setSequenceBase(b1,0@0);
#b2:= new(:void,:int);
#setSequenceBase(b2,10@0);
#b3:= new(:void,:int);
#setSequenceBase(b3,20@0);
#
#barrier (go,i):= newRange(0);
#	bat.insert(a1,nil,i);
#	bat.insert(a2,nil,i);
#	bat.insert(a3,nil,i);
#	bat.insert(b1,nil,i);
#	bat.insert(b2,nil,i);
#	bat.insert(b3,nil,i);
#	redo (go,i):= nextElement(1,10);
#exit (go,i);
##print(a1);
##print(a2);
##print(a3);
#
#
## add it to the BAT partition table
#partitions.deposit(a1);
#partitions.deposit(a1,a2);
#partitions.deposit(a1,a3);
#partitions.deposit(b1);
#partitions.deposit(b1,b2);
#partitions.deposit(b1,b3);
#partitions.dump();
#
## this query is already tricky because there are
## two sinks. A naive translation will produce
## a double nested loop
#function qry(a:bat[:void,:any], b:bat[:void,:any]);
#	print("experiment 2");
#	print(b);
#	print(a);
#	print(b);
#end qry;
function Admin.qry(a:bat[:void,:any],b:bat[:void,:any]):void;	# 0  (qry:void)<-(a:bat[:void,:any])(b:bat[:void,:any])
    io.print("experiment 2");	# 1 IOprint_val ($3:int)<-($4:str)
    io.print(b);	# 2 IOprint_val ($5:int)<-(b:bat[:void,:any])
    io.print(a);	# 3 IOprint_val ($6:int)<-(a:bat[:void,:any])
    io.print(b);	# 4 IOprint_val ($7:int)<-(b:bat[:void,:any])
end qry;	# 5  
#
#optimizer.partitionedQuery("Admin","qry");
#showFunction("Admin","qry");
#print("run experiment");
#qry(a1,b1);
#
start first=1 last=4 
replace first=3 last=3 
variable replacement 'a' instructions 3-3  lifespan 3-3
first=7 last=8 
first=9 last=8 
start first=1 last=7 
replace first=2 last=2 
variable replacement 'b' instructions 2-2  lifespan 2-7
first=6 last=11 
replace first=10 last=10 
variable replacement 'b' instructions 10-10  lifespan 2-10
first=14 last=14 
first=15 last=14 
function Admin.main():int;	# 0  (main:int)
    a1 := bbp.new(:void,:int);	# 1 CMDBATnew (a1:bat[:void,:int])<-($2:void)($3:int)
    bat.setSequenceBase(a1,0@0);	# 2 BKCsetSequenceBase ($4:bat[:void,:int])<-(a1:bat[:void,:int])($5:oid)
    a2 := bbp.new(:void,:int);	# 3 CMDBATnew (a2:bat[:void,:int])<-($7:void)($8:int)
    bat.setSequenceBase(a2,10@0);	# 4 BKCsetSequenceBase ($9:bat[:void,:int])<-(a2:bat[:void,:int])($10:oid)
    a3 := bbp.new(:void,:int);	# 5 CMDBATnew (a3:bat[:void,:int])<-($12:void)($13:int)
    bat.setSequenceBase(a3,20@0);	# 6 BKCsetSequenceBase ($14:bat[:void,:int])<-(a3:bat[:void,:int])($15:oid)
    b1 := bbp.new(:void,:int);	# 7 CMDBATnew (b1:bat[:void,:int])<-($17:void)($18:int)
    bat.setSequenceBase(b1,0@0);	# 8 BKCsetSequenceBase ($19:bat[:void,:int])<-(b1:bat[:void,:int])($5:oid)
    b2 := bbp.new(:void,:int);	# 9 CMDBATnew (b2:bat[:void,:int])<-($21:void)($22:int)
    bat.setSequenceBase(b2,10@0);	# 10 BKCsetSequenceBase ($23:bat[:void,:int])<-(b2:bat[:void,:int])($10:oid)
    b3 := bbp.new(:void,:int);	# 11 CMDBATnew (b3:bat[:void,:int])<-($25:void)($26:int)
    bat.setSequenceBase(b3,20@0);	# 12 BKCsetSequenceBase ($27:bat[:void,:int])<-(b3:bat[:void,:int])($15:oid)
barrier (go,i):= mal.newRange(0);	# 13 RNGnewRange_int (go:bit)(i:int)<-($30:int) jump 21
    bat.insert(a1,nil,i);	# 14 BKCinsert_bun ($31:bat[:void,:int])<-(a1:bat[:void,:int])($32:void)(i:int)
    bat.insert(a2,nil,i);	# 15 BKCinsert_bun ($33:bat[:void,:int])<-(a2:bat[:void,:int])($32:void)(i:int)
    bat.insert(a3,nil,i);	# 16 BKCinsert_bun ($34:bat[:void,:int])<-(a3:bat[:void,:int])($32:void)(i:int)
    bat.insert(b1,nil,i);	# 17 BKCinsert_bun ($35:bat[:void,:int])<-(b1:bat[:void,:int])($32:void)(i:int)
    bat.insert(b2,nil,i);	# 18 BKCinsert_bun ($36:bat[:void,:int])<-(b2:bat[:void,:int])($32:void)(i:int)
    bat.insert(b3,nil,i);	# 19 BKCinsert_bun ($37:bat[:void,:int])<-(b3:bat[:void,:int])($32:void)(i:int)
    redo (go,i):= mal.nextElement(1,10);	# 20 RNGnextElement_int (go:bit)(i:int)<-($38:int)($39:int) jump 14
exit (go,i);	# 21  (go:bit)(i:int)
    partitions.deposit(a1);	# 22 BPTdeposit ($40:void)<-(a1:bat[:void,:int])
    partitions.deposit(a1,a2);	# 23 BPTdeposit2 ($41:void)<-(a1:bat[:void,:int])(a2:bat[:void,:int])
    partitions.deposit(a1,a3);	# 24 BPTdeposit2 ($42:void)<-(a1:bat[:void,:int])(a3:bat[:void,:int])
    partitions.deposit(b1);	# 25 BPTdeposit ($43:void)<-(b1:bat[:void,:int])
    partitions.deposit(b1,b2);	# 26 BPTdeposit2 ($44:void)<-(b1:bat[:void,:int])(b2:bat[:void,:int])
    partitions.deposit(b1,b3);	# 27 BPTdeposit2 ($45:void)<-(b1:bat[:void,:int])(b3:bat[:void,:int])
    partitions.dump();	# 28 BPTdump ($46:void)
    mdb.showFunction("Admin","qry");	# 29 MDBshowFunction3 ($50:void)<-($48:str)($49:str)
    io.print("run experiment");	# 30 IOprint_val ($51:int)<-($52:str)
    Admin.qry(a1,b1);	# 31  ($53:void)<-(a1:bat[:void,:int])(b1:bat[:void,:int])
end main;	# 32  
ptop=6 plimit=1024
[0] bid=13 pid=13 f=0, l=10 prv=-1 nxt=1 cap=-2147483648
[1] bid=13 pid=14 f=10, l=20 prv=0 nxt=2 cap=-2147483648
[2] bid=13 pid=15 f=20, l=30 prv=1 nxt=-1 cap=-2147483648
[3] bid=16 pid=16 f=0, l=10 prv=-1 nxt=4 cap=-2147483648
[4] bid=16 pid=17 f=10, l=20 prv=3 nxt=5 cap=-2147483648
[5] bid=16 pid=18 f=20, l=30 prv=4 nxt=-1 cap=-2147483648
function Admin.qry(a:bat[:void,:any],b:bat[:void,:any]):void;
    io.print("experiment 2");
barrier ($10,$11):= partitions.newIterator(b);
    io.print($11);
    redo ($10,$11):= partitions.hasMoreElements(b);
exit ($10,$11);
barrier ($8,$9):= partitions.newIterator(a);
    io.print($9);
    redo ($8,$9):= partitions.hasMoreElements(a);
exit ($8,$9);
barrier ($12,$13):= partitions.newIterator(b);
    io.print($13);
    redo ($12,$13):= partitions.hasMoreElements(b);
exit ($12,$13);
end qry;
[ "run experiment" ]
[ "experiment 2" ]
#-----------------#
# h	tmp_16	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
[ 9@0,	  9	  ]
#-----------------#
# h	tmp_17	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  0	  ]
[ 11@0,	  1	  ]
[ 12@0,	  2	  ]
[ 13@0,	  3	  ]
[ 14@0,	  4	  ]
[ 15@0,	  5	  ]
[ 16@0,	  6	  ]
[ 17@0,	  7	  ]
[ 18@0,	  8	  ]
[ 19@0,	  9	  ]
#-----------------#
# h	tmp_18	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  0	  ]
[ 21@0,	  1	  ]
[ 22@0,	  2	  ]
[ 23@0,	  3	  ]
[ 24@0,	  4	  ]
[ 25@0,	  5	  ]
[ 26@0,	  6	  ]
[ 27@0,	  7	  ]
[ 28@0,	  8	  ]
[ 29@0,	  9	  ]
#-----------------#
# h	tmp_13	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
[ 9@0,	  9	  ]
#-----------------#
# h	tmp_14	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  0	  ]
[ 11@0,	  1	  ]
[ 12@0,	  2	  ]
[ 13@0,	  3	  ]
[ 14@0,	  4	  ]
[ 15@0,	  5	  ]
[ 16@0,	  6	  ]
[ 17@0,	  7	  ]
[ 18@0,	  8	  ]
[ 19@0,	  9	  ]
#-----------------#
# h	tmp_15	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  0	  ]
[ 21@0,	  1	  ]
[ 22@0,	  2	  ]
[ 23@0,	  3	  ]
[ 24@0,	  4	  ]
[ 25@0,	  5	  ]
[ 26@0,	  6	  ]
[ 27@0,	  7	  ]
[ 28@0,	  8	  ]
[ 29@0,	  9	  ]
#-----------------#
# h	tmp_16	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
[ 9@0,	  9	  ]
#-----------------#
# h	tmp_17	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  0	  ]
[ 11@0,	  1	  ]
[ 12@0,	  2	  ]
[ 13@0,	  3	  ]
[ 14@0,	  4	  ]
[ 15@0,	  5	  ]
[ 16@0,	  6	  ]
[ 17@0,	  7	  ]
[ 18@0,	  8	  ]
[ 19@0,	  9	  ]
#-----------------#
# h	tmp_18	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  0	  ]
[ 21@0,	  1	  ]
[ 22@0,	  2	  ]
[ 23@0,	  3	  ]
[ 24@0,	  4	  ]
[ 25@0,	  5	  ]
[ 26@0,	  6	  ]
[ 27@0,	  7	  ]
[ 28@0,	  8	  ]
[ 29@0,	  9	  ]

# 12:35:26 >  
# 12:35:26 >  Done.
# 12:35:26 >  

