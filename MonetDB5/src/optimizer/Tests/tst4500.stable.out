stdout of test 'tst4500` in directory 'src/optimizer` itself:


# 08:01:48 >  
# 08:01:48 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst4500.mal </dev/null
# 08:01:48 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## Beware this is not the correct TPC-1, but a merely a test
#include sql;
#debugOptimizers();
#CXoptimizer();
#ARoptimizer();
#DCoptimizer();
#quit();
##s14 := sql.bind("sys",  "lineitem", "l_shipdate"); #lineitem
#	myc:= bbp.bind("myc");
#	s14:bat[:void,:date] := sql.bind("sys","lineitem","l_shipdate",0);
##s16 := date("1998-12-01");
#	s16 := date("1998-12-01");
##s17 := 7776000;
#	s17 := 7776000;
##s15 := date_sub_sec_interval(s16,s17);
##s13 := s14.uselect(date(nil), s15);
#	zz:= nil:str;
#	aa_a := date(zz);
#	s13 := uselect(s14,aa_a,aa_a);
##s12 := s13.reverse();
#	s12 := reverse(s13,);
##s11 := s12.reverse().mark(oid(0)).reverse();# lineitem
#	ba_a := oid(0);
#	ca_a := reverse(s12,);
#	da_a := mark(ca_a,ba_a);
#	s11 := reverse(da_a,);
##s18 := sql.bind("sys",  "lineitem", "l_returnflag"); #lineitem
#	s18:bat[:void,:chr] := sql.bind("sys","lineitem","l_returnflag",0);
##s10 := s11.join(s18);
#	s10 := join(s11,s18);
##s9 := s10.group();
#	s9 := group(s10,);
##s20 := sql.bind("sys",  "lineitem", "l_linestatus"); #lineitem
#	s20:bat[:void,:chr] := sql.bind("sys","lineitem","l_linestatus",0);
##s19 := s11.join(s20);
#	s19 := join(s11,s20);
##s8 := s9.group(s19);
#	s8 := group(s9,s19);
##s7 := s8.tunique().mirror();
#	ea_a := tunique(s8,);
#	s7 := mirror(ea_a,);
##s6 := s7.join(s11);
#	s6 := join(s7,s11);
##s5 := s6.join(s18);
#	s5 := join(s6,s18);
##s4 := s5.reverse().sort().reverse();
#	fa_a := reverse(s5,);
#	ga_a := sort(fa_a,);
#	s4 := reverse(ga_a,);
##s22 := s7.join(s11);
#	s22 := join(s7,s11);
##s21 := s22.join(s20);
#	s21 := join(s22,s20);
##s3 := s4.CTrefine(s21);
#	s3 := refine(s4,s21);
##s25 := s11.join(s18);
#	s25 := join(s11,s18);
##s24 := s7.join(s25);
#	s24 := join(s7,s25);
##s27 := s11.join(s20);
#	s27 := join(s11,s20);
##s26 := s7.join(s27);
#	s26 := join(s7,s27);
##s31 := sql.bind("sys",  "lineitem", "l_quantity"); #lineitem
#	s31:bat[:void,:int] := sql.bind("sys","lineitem","l_quantity",0);
##s30 := s11.join(s31);
#	s30 := join(s11,s31);
##s29 := {sum}(s30, s8, s7);
#	s29 := group.sum(s30,s8);
##s35 := sql.bind("sys",  "lineitem", "l_extendedprice"); #lineitem
#	s35:bat[:void,:int] := sql.bind("sys","lineitem","l_extendedprice",0);
##s34 := s11.join(s35);
#	s34 := join(s11,s35);
##s33 := {sum}(s34, s8, s7);
#	s33 := group.sum(s34,s8);
##s39 := s11.join(s35);
#	s39 := join(s11,s35);
##s42 := 1;
#	s42 := 1;
##s41 := flt(s42);
#	s41 := flt(s42);
##s44 := sql.bind("sys",  "lineitem", "l_discount"); #lineitem
#	s44:bat[:void,:int] := sql.bind("sys","lineitem","l_discount",0);
##s43 := s11.join(s44);
#	s43 := join(s11,s44);
##s45 := [s43 ~ s41];
#	ha_a:= zipper(s43,s41);
#	s45 := ha_a;
##s40 := [-](s45,s43);
#	s40 := multiplex.tactics("-",s45,s43);
##s38 := [*](s39,s40);
#	s38 := multiplex.tactics("*",s39,s40);
##s37 := {sum}(s38, s8, s7);
#	s37 := group.sum(s38,s8);
##s50 := s11.join(s35);
#	s50 := join(s11,s35);
##s53 := 1;
#	s53 := 1;
##s52 := flt(s53);
#	s52 := flt(s53);
##s54 := s11.join(s44);
#	s54 := join(s11,s44);
##s55 := [s54 ~ s52];
#	ia_a:= zipper(s54,s52);
#	s55 := ia_a;
##s51 := [-](s55,s54);
#	s51 := multiplex.tactics("-",s55,s54);
##s49 := [*](s50,s51);
#	s49 := multiplex.tactics("*",s50,s51);
##s58 := 1;
#	s58 := 1;
##s57 := flt(s58);
#	s57 := flt(s58);
##s60 := sql.bind("sys",  "lineitem", "l_tax"); #lineitem
#	s60:bat[:void,:int] := sql.bind("sys","lineitem","l_tax",0);
##s59 := s11.join(s60);
#	s59 := join(s11,s60);
##s61 := [s59 ~ s57];
#	ja_a:= zipper(s59,s57);
#	s61 := ja_a;
##s56 := [+](s61,s59);
#	s56 := multiplex.tactics("+",s61,s59);
##s48 := [*](s49,s56);
#	s48 := multiplex.tactics("*",s49,s56);
##s47 := {sum}(s48, s8, s7);
#	s47 := group.sum(s48,s8);
##s64 := s11.join(s31);
#	s64 := join(s11,s31);
##s63 := {avg}(s64, s8, s7);
#	s63 := group.avg(s64,s8);
##s67 := s11.join(s35);
#	s67 := join(s11,s35);
##s66 := {avg}(s67, s8, s7);
#	s66 := group.avg(s67,s8);
##s70 := s11.join(s44);
#	s70 := join(s11,s44);
##s69 := {avg}(s70, s8, s7);
#	s69 := group.avg(s70,s8);
##s72 := {count}(s8, s8, s7);
##	s72 := group.count(s8,s8);
#print(s64,s67,s66,s70,s69);
#
!ERROR: 'batcalc.-' undefined in user.main[88]
!ERROR: 'batcalc.*' undefined in user.main[90]
!ERROR: 'group.sum' undefined in user.main[92]
!ERROR: 'batcalc.-' undefined in user.main[105]
!ERROR: 'batcalc.*' undefined in user.main[107]
!ERROR: 'batcalc.+' undefined in user.main[120]
!ERROR: 'batcalc.*' undefined in user.main[122]
!ERROR: 'group.sum' undefined in user.main[124]
function user.main():int;	# 0  (main:int)
    optimizer.setDebug();	# 1 QOTdebugOptimizers ($1:void)
    optimizer.commonExpressionRemoval();	# 2 QOTCXoptimizer ($2:str)
    optimizer.aliasRemoval();	# 3 QOTARoptimizer ($3:str)
    optimizer.deadCodeRemoval();	# 4 QOTDCoptimizer ($4:str)
    clients.quit();	# 5 CLTquit ($5:void)
#s14 := sql.bind("sys",  "lineitem", "l_shipdate"); #lineitem 	# 6  ($7:str)
    myc := bbp.bind("myc");	# 7 CMDbbpbind (myc:any)<-($9:str)
    s14 := sql.bind("sys","lineitem","l_shipdate",0);	# 8 mvc_bind_wrap (s14:bat[:void,:date])<-($11:str)($12:str)($13:str)($14:int)
#s16 := date("1998-12-01"); 	# 9  ($16:str)
    s16 := mtime.date("1998-12-01");	# 10 MTIMEdate_fromstr (s16:date)<-($18:str)
#s17 := 7776000; 	# 11  ($20:str)
    s17 := 7776000;	# 12  (s17:int)<-($22:int)
#s15 := date_sub_sec_interval(s16,s17); 	# 13  ($24:str)
#s13 := s14.uselect(date(nil), s15); 	# 14  ($26:str)
    zz := "nil:str";	# 15  (zz:str)<-($28:str)
    aa_a := mtime.date(zz);	# 16 MTIMEdate_fromstr (aa_a:date)<-(zz:str)
    s13 := algebra.uselect(s14,aa_a,aa_a);	# 17 ALGuselect (s13:bat[:void,:void])<-(s14:bat[:void,:date])(aa_a:date)(aa_a:date)
#s12 := s13.reverse(); 	# 18  ($32:str)
    s12 := bat.reverse(s13);	# 19 BKCreverse (s12:bat[:void,:void])<-(s13:bat[:void,:void])
#s11 := s12.reverse().mark(oid(0)).reverse();# lineitem 	# 20  ($35:str)
    ba_a := calc.oid(0);	# 21 CALCint2oid (ba_a:oid)<-($14:int)
    ca_a := bat.reverse(s12);	# 22 BKCreverse (ca_a:bat[:void,:void])<-(s12:bat[:void,:void])
    da_a := algebra.markT(ca_a,ba_a);	# 23 ALGtmark (da_a:bat[:oid,:void])<-(ca_a:bat[:void,:void])(ba_a:oid)
    s11 := bat.reverse(da_a);	# 24 BKCreverse (s11:bat[:void,:oid])<-(da_a:bat[:oid,:void])
#s18 := sql.bind("sys",  "lineitem", "l_returnflag"); #lineitem 	# 25  ($41:str)
    s18 := sql.bind("sys","lineitem","l_returnflag",0);	# 26 mvc_bind_wrap (s18:bat[:void,:chr])<-($11:str)($12:str)($43:str)($14:int)
#s10 := s11.join(s18); 	# 27  ($45:str)
    s10 := algebra.join(s11,s18);	# 28 ALGjoin (s10:bat[:void,:chr])<-(s11:bat[:void,:oid])(s18:bat[:void,:chr])
#s9 := s10.group(); 	# 29  ($48:str)
    (h,s9):= group.group(s10);	# 30 GRPgroup (h:bat[:chr,:int])(s9:bat[:void,:void])<-(s10:bat[:void,:chr])
#s20 := sql.bind("sys",  "lineitem", "l_linestatus"); #lineitem 	# 31  ($52:str)
    s20 := sql.bind("sys","lineitem","l_linestatus",0);	# 32 mvc_bind_wrap (s20:bat[:void,:chr])<-($54:str)($55:str)($56:str)($57:int)
#s19 := s11.join(s20); 	# 33  ($59:str)
    s19 := algebra.join(s11,s20);	# 34 ALGjoin (s19:bat[:void,:chr])<-(s11:bat[:void,:oid])(s20:bat[:void,:chr])
#s8 := s9.group(s19); 	# 35  ($62:str)
    (h2,s8):= group.group(s9,s19);	# 36 GRPderive (h2:bat[:chr,:oid])(s8:bat[:void,:oid])<-(s9:bat[:void,:void])(s19:bat[:void,:chr])
#s7 := s8.tunique().mirror(); 	# 37  ($66:str)
    ea_a := algebra.tunique(s8);	# 38 ALGtunique (ea_a:bat[:void,:oid])<-(s8:bat[:void,:oid])
    s7 := bat.mirror(ea_a);	# 39 BKCmirror (s7:bat[:void,:void])<-(ea_a:bat[:void,:oid])
#s6 := s7.join(s11); 	# 40  ($70:str)
    s6 := algebra.join(s7,s11);	# 41 ALGjoin (s6:bat[:void,:oid])<-(s7:bat[:void,:void])(s11:bat[:void,:oid])
#s5 := s6.join(s18); 	# 42  ($73:str)
    s5 := algebra.join(s6,s18);	# 43 ALGjoin (s5:bat[:void,:chr])<-(s6:bat[:void,:oid])(s18:bat[:void,:chr])
#s4 := s5.reverse().sortH().reverse(); 	# 44  ($76:str)
    fa_a := bat.reverse(s5);	# 45 BKCreverse (fa_a:bat[:chr,:void])<-(s5:bat[:void,:chr])
    ga_a := algebra.sortH(fa_a);	# 46 ALGhsort (ga_a:bat[:chr,:void])<-(fa_a:bat[:chr,:void])
    s4 := bat.reverse(ga_a);	# 47 BKCreverse (s4:bat[:void,:chr])<-(ga_a:bat[:chr,:void])
#s22 := s7.join(s11); 	# 48  ($81:str)
    s22 := algebra.join(s7,s11);	# 49 ALGjoin (s22:bat[:void,:oid])<-(s7:bat[:void,:void])(s11:bat[:void,:oid])
#s21 := s22.join(s20); 	# 50  ($84:str)
    s21 := algebra.join(s22,s20);	# 51 ALGjoin (s21:bat[:void,:chr])<-(s22:bat[:void,:oid])(s20:bat[:void,:chr])
#s3 := s4.CTrefine(s21); 	# 52  ($87:str)
    s3 := group.refine(s4,s21);	# 53 GRPrefine (s3:bat[:void,:oid])<-(s4:bat[:void,:chr])(s21:bat[:void,:chr])
#s25 := s11.join(s18); 	# 54  ($90:str)
    s25 := algebra.join(s11,s18);	# 55 ALGjoin (s25:bat[:void,:chr])<-(s11:bat[:void,:oid])(s18:bat[:void,:chr])
#s24 := s7.join(s25); 	# 56  ($93:str)
    s24 := algebra.join(s7,s25);	# 57 ALGjoin (s24:bat[:void,:chr])<-(s7:bat[:void,:void])(s25:bat[:void,:chr])
#s27 := s11.join(s20); 	# 58  ($96:str)
    s27 := algebra.join(s11,s20);	# 59 ALGjoin (s27:bat[:void,:chr])<-(s11:bat[:void,:oid])(s20:bat[:void,:chr])
#s26 := s7.join(s27); 	# 60  ($99:str)
    s26 := algebra.join(s7,s27);	# 61 ALGjoin (s26:bat[:void,:chr])<-(s7:bat[:void,:void])(s27:bat[:void,:chr])
#s31 := sql.bind("sys",  "lineitem", "l_quantity"); #lineitem 	# 62  ($102:str)
    s31 := sql.bind("sys","lineitem","l_quantity",0);	# 63 mvc_bind_wrap (s31:bat[:void,:int])<-($104:str)($105:str)($106:str)($107:int)
#s30 := s11.join(s31); 	# 64  ($109:str)
    s30 := algebra.join(s11,s31);	# 65 ALGjoin (s30:bat[:void,:int])<-(s11:bat[:void,:oid])(s31:bat[:void,:int])
#s29 := {sum}(s30, s8, s7); 	# 66  ($112:str)
    s29 := group.sum(s30,s8);	# 67 GRPsum_int (s29:bat[:void,:int])<-(s30:bat[:void,:int])(s8:bat[:void,:oid])
#s35 := sql.bind("sys",  "lineitem", "l_extendedprice"); #lineitem 	# 68  ($115:str)
    s35 := sql.bind("sys","lineitem","l_extendedprice",0);	# 69 mvc_bind_wrap (s35:bat[:void,:int])<-($104:str)($105:str)($117:str)($107:int)
#s34 := s11.join(s35); 	# 70  ($119:str)
    s34 := algebra.join(s11,s35);	# 71 ALGjoin (s34:bat[:void,:int])<-(s11:bat[:void,:oid])(s35:bat[:void,:int])
#s33 := {sum}(s34, s8, s7); 	# 72  ($122:str)
    s33 := group.sum(s34,s8);	# 73 GRPsum_int (s33:bat[:void,:int])<-(s34:bat[:void,:int])(s8:bat[:void,:oid])
#s39 := s11.join(s35); 	# 74  ($125:str)
    s39 := algebra.join(s11,s35);	# 75 ALGjoin (s39:bat[:void,:int])<-(s11:bat[:void,:oid])(s35:bat[:void,:int])
#s42 := 1; 	# 76  ($128:str)
    s42 := 1;	# 77  (s42:int)<-($130:int)
#s41 := flt(s42); 	# 78  ($132:str)
    s41 := calc.flt(s42);	# 79 CALCint2flt (s41:flt)<-(s42:int)
#s44 := sql.bind("sys",  "lineitem", "l_discount"); #lineitem 	# 80  ($135:str)
    s44 := sql.bind("sys","lineitem","l_discount",0);	# 81 mvc_bind_wrap (s44:bat[:void,:int])<-($137:str)($138:str)($139:str)($140:int)
#s43 := s11.join(s44); 	# 82  ($142:str)
    s43 := algebra.join(s11,s44);	# 83 ALGjoin (s43:bat[:void,:int])<-(s11:bat[:void,:oid])(s44:bat[:void,:int])
#s45 := [s43 ~ s41]; 	# 84  ($145:str)
    ha_a := batcalc.init(s43,s41);	# 85 CMDbatfltinit (ha_a:bat[:void,:flt])<-(s43:bat[:void,:int])(s41:flt)
    s45 := ha_a;	# 86  (s45:bat[:void,:flt])<-(ha_a:bat[:void,:flt])
#s40 := [-](s45,s43); 	# 87  ($149:str)
    s40 := batcalc.-(s45,s43);	# 88  unknown (s40:any)<-(s45:bat[:void,:flt])(s43:bat[:void,:int])
#s38 := [*](s39,s40); 	# 89  ($152:str)
    s38 := batcalc.*(s39,s40);	# 90  unknown (s38:any)<-(s39:bat[:void,:int])(s40:any)
#s37 := {sum}(s38, s8, s7); 	# 91  ($155:str)
    s37 := group.sum(s38,s8);	# 92  unknown (s37:any)<-(s38:any)(s8:bat[:void,:oid])
#s50 := s11.join(s35); 	# 93  ($158:str)
    s50 := algebra.join(s11,s35);	# 94 ALGjoin (s50:bat[:void,:int])<-(s11:bat[:void,:oid])(s35:bat[:void,:int])
#s53 := 1; 	# 95  ($161:str)
    s53 := 1;	# 96  (s53:int)<-($163:int)
#s52 := flt(s53); 	# 97  ($165:str)
    s52 := calc.flt(s53);	# 98 CALCint2flt (s52:flt)<-(s53:int)
#s54 := s11.join(s44); 	# 99  ($168:str)
    s54 := algebra.join(s11,s44);	# 100 ALGjoin (s54:bat[:void,:int])<-(s11:bat[:void,:oid])(s44:bat[:void,:int])
#s55 := [s54 ~ s52]; 	# 101  ($171:str)
    ia_a := batcalc.init(s54,s52);	# 102 CMDbatfltinit (ia_a:bat[:void,:flt])<-(s54:bat[:void,:int])(s52:flt)
    s55 := ia_a;	# 103  (s55:bat[:void,:flt])<-(ia_a:bat[:void,:flt])
#s51 := [-](s55,s54); 	# 104  ($175:str)
    s51 := batcalc.-(s55,s54);	# 105  unknown (s51:any)<-(s55:bat[:void,:flt])(s54:bat[:void,:int])
#s49 := [*](s50,s51); 	# 106  ($178:str)
    s49 := batcalc.*(s50,s51);	# 107  unknown (s49:any)<-(s50:bat[:void,:int])(s51:any)
#s58 := 1; 	# 108  ($181:str)
    s58 := 1;	# 109  (s58:int)<-($163:int)
#s57 := flt(s58); 	# 110  ($184:str)
    s57 := calc.flt(s58);	# 111 CALCint2flt (s57:flt)<-(s58:int)
#s60 := sql.bind("sys",  "lineitem", "l_tax"); #lineitem 	# 112  ($187:str)
    s60 := sql.bind("sys","lineitem","l_tax",0);	# 113 mvc_bind_wrap (s60:bat[:void,:int])<-($189:str)($190:str)($191:str)($192:int)
#s59 := s11.join(s60); 	# 114  ($194:str)
    s59 := algebra.join(s11,s60);	# 115 ALGjoin (s59:bat[:void,:int])<-(s11:bat[:void,:oid])(s60:bat[:void,:int])
#s61 := [s59 ~ s57]; 	# 116  ($197:str)
    ja_a := batcalc.init(s59,s57);	# 117 CMDbatfltinit (ja_a:bat[:void,:flt])<-(s59:bat[:void,:int])(s57:flt)
    s61 := ja_a;	# 118  (s61:bat[:void,:flt])<-(ja_a:bat[:void,:flt])
#s56 := [+](s61,s59); 	# 119  ($201:str)
    s56 := batcalc.+(s61,s59);	# 120  unknown (s56:any)<-(s61:bat[:void,:flt])(s59:bat[:void,:int])
#s48 := [*](s49,s56); 	# 121  ($204:str)
    s48 := batcalc.*(s49,s56);	# 122  unknown (s48:any)<-(s49:any)(s56:any)
#s47 := {sum}(s48, s8, s7); 	# 123  ($207:str)
    s47 := group.sum(s48,s8);	# 124  unknown (s47:any)<-(s48:any)(s8:bat[:void,:oid])
#s64 := s11.join(s31); 	# 125  ($210:str)
    s64 := algebra.join(s11,s31);	# 126 ALGjoin (s64:bat[:void,:int])<-(s11:bat[:void,:oid])(s31:bat[:void,:int])
#s63 := {avg}(s64, s8, s7); 	# 127  ($213:str)
    s63 := group.avg(s64,s8);	# 128 GRPavg_int (s63:bat[:void,:int])<-(s64:bat[:void,:int])(s8:bat[:void,:oid])
#s67 := s11.join(s35); 	# 129  ($216:str)
    s67 := algebra.join(s11,s35);	# 130 ALGjoin (s67:bat[:void,:int])<-(s11:bat[:void,:oid])(s35:bat[:void,:int])
#s66 := {avg}(s67, s8, s7); 	# 131  ($219:str)
    s66 := group.avg(s67,s8);	# 132 GRPavg_int (s66:bat[:void,:int])<-(s67:bat[:void,:int])(s8:bat[:void,:oid])
#s70 := s11.join(s44); 	# 133  ($222:str)
    s70 := algebra.join(s11,s44);	# 134 ALGjoin (s70:bat[:void,:int])<-(s11:bat[:void,:oid])(s44:bat[:void,:int])
#s69 := {avg}(s70, s8, s7); 	# 135  ($225:str)
    s69 := group.avg(s70,s8);	# 136 GRPavg_int (s69:bat[:void,:int])<-(s70:bat[:void,:int])(s8:bat[:void,:oid])
#s72 := {count}(s8, s8, s7); 	# 137  ($228:str)
#	s72 := group.count(s8,s8); 	# 138  ($230:str)
    io.print(s64,s67,s66,s70,s69);	# 139 IOtable ($231:int)<-(s64:bat[:void,:int])(s67:bat[:void,:int])(s66:bat[:void,:int])(s70:bat[:void,:int])(s69:bat[:void,:int])
end main;	# 140  

# 08:01:48 >  
# 08:01:48 >  Done.
# 08:01:48 >  

