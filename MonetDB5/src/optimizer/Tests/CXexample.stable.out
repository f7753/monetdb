stdout of test 'CXexample` in directory 'src/optimizer` itself:


# 23:27:48 >  
# 23:27:48 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=35469 --set sql_port=42170 --set xquery_port=53059 --set monet_prompt= --trace --dbname=mTests_src_optimizer  CXexample.mal </dev/null
# 23:27:48 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
## The 4000 series deals with strategic optimizer constructs
## common subexpression evaluation
#optimizer.commonExpressionRemoval();
#b:= bbp.new(:int,:int);
#c:= bbp.new(:int,:int);       
#d:= algebra.select(b,0,100);
#e:= algebra.select(b,0,100);    
#k1:= 24;
#k2:= 27;
#l:= k1+k2;
#l2:= k1+k2;             
#l3:= l2+k1;             
#mdb.showFunction();
#
#
function user.main():int;	# 0  (main:int)
# The 4000 series deals with strategic optimizer constructs 	# 1  ($2:str)
# common subexpression evaluation 	# 2  ($4:str)
    b := bbp.new(:int,:int);	# 3 CMDBATnew (b:bat[:int,:int])<-($7:int)($7:int)
    c := bbp.new(:int,:int);	# 4 CMDBATnew (c:bat[:int,:int])<-($7:int)($7:int)
    d := algebra.select(b,0,100);	# 5 ALGselect (d:bat[:int,:int])<-(b:bat[:int,:int])($10:int)($11:int)
    e := d;	# 6 ALGselect (e:bat[:int,:int])<-(d:bat[:int,:int])
    k1 := 24;	# 7  (k1:int)<-($14:int)
    k2 := 27;	# 8  (k2:int)<-($16:int)
    l := calc.+(k1,k2);	# 9 CALCbinaryADDintint (l:int)<-(k1:int)(k2:int)
    l3 := calc.+(l,k1);	# 10 CALCbinaryADDintint (l3:int)<-(l:int)(k1:int)
    mdb.showFunction();	# 11 MDBshowFunction ($20:void)
end main;	# 12  
function user.main():int;
# The 4000 series deals with strategic optimizer constructs 
# common subexpression evaluation 
    b := bbp.new(:int,:int);
    c := bbp.new(:int,:int);
    d := algebra.select(b,0,100);
    e := d;
    k1 := 24;
    k2 := 27;
    l := calc.+(k1,k2);
    l3 := calc.+(l,k1);
    mdb.showFunction();
end main;

# 23:27:48 >  
# 23:27:48 >  Done.
# 23:27:48 >  

