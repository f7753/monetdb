stdout of test 'tst4630` in directory 'src/optimizer` itself:


# 15:16:27 >  
# 15:16:27 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=43677 --set sql_port=58204 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst4630.mal </dev/null
# 15:16:27 >  

# Monet Database Server V4.5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##TPCH query 1
## the basis for further optimizer tests
#include sql;
#
#
#factory qry1(A0:sht,A1:sht,A2:sht,A3:date,A4:lng):any;
#    V6 := sql.bind("sys","lineitem","l_shipdate",0);
#    V11 := sql.bind_dbat("sys","lineitem",0);
#    V22 := sql.bind("sys","lineitem","l_returnflag",0);
#    V29 := sql.bind("sys","lineitem","l_linestatus",0);
#    V53 := sql.bind("sys","lineitem","l_quantity",0);
#    V60 := sql.bind("sys","lineitem","l_extendedprice",0);
#    V75 := sql.bind("sys","lineitem","l_discount",0);
#    V105 := sql.bind("sys","lineitem","l_tax",0);
##optimizer information derived by the SQL compiler
#optimizer.RXemptyBAT(V11);
##optimizer.RXalignedBAT(V6,V22,V29,V53,V60,V75,V105);
#barrier always := true;
#    V12 := bat.reverse(V11);
#    V13 := algebra.kdiff(V6,V12);
#    V16 := mtime.date_sub_sec_interval(A3,A4);
#    V17 := algebra.uselect(V13,nil,V16);
#    V20 := algebra.mark(V17,0@0);
#    V21 := bat.reverse(V20);
#    V26 := algebra.kdiff(V22,V12);
#    V27 := algebra.join(V21,V26);
#    V28 := group.group(V27);
#    V33 := algebra.kdiff(V29,V12);
#    V34 := algebra.join(V21,V33);
#    V35 := group.group(V28,V34);
#    V36 := algebra.tunique(V35);
#    V37 := bat.mirror(V36);
#    V42 := algebra.join(V37,V27);
#    V43 := algebra.sort_reverse(V42);
#    V51 := algebra.join(V37,V34);
#    V52 := group.refine(V43,V51);
#    V57 := algebra.kdiff(V53,V12);
#    V58 := algebra.join(V21,V57);
#    V59 := aggrX3.sum(V58,V35,V37);
#    V64 := algebra.kdiff(V60,V12);
#    V65 := algebra.join(V21,V64);
#    V66 := aggrX3.sum(V65,V35,V37);
#    V72 := calc.lng(A0);
#    V74 := calc.*(V72,100);
#    V82 := algebra.kdiff(V75,V12);
#    V83 := algebra.join(V21,V82);
#    V84 := multiplex.script("-",V74,V83);
#    V86 := batcalc.*(V65,V84);
#    V88 := aggrX3.sum(V86,V35,V37);
#    V94 := calc.lng(A1);
#    V95 := calc.*(V94,100);
#    V100 := multiplex.script("-",V95,V83);
#    V101 := batcalc.*(V65,V100);
#    V103 := calc.lng(A2);
#    V104 := calc.*(V103,100);
#    V109 := algebra.kdiff(V105,V12);
#    V110 := algebra.join(V21,V109);
#    V111 := multiplex.script("+",V104,V110);
#    V113 := batcalc.*(V101,V111);
#    V114 := aggrX3.sum(V113,V35,V37);
#    V122 := aggrX3.avg(V58,V35,V37);
#    V127 := aggrX3.avg(V65,V35,V37);
#    V129 := multiplex.script("round",V127,100);
#    V135 := aggrX3.avg(V83,V35,V37);
#    V136 := multiplex.script("round",V135,100);
#    V137 := aggrX3.count(V35,V35,V37);
#    sql.column(V42,"l_returnflag","varchar",1,0);
#    sql.column(V51,"l_linestatus","varchar",1,0);
#    sql.column(V59,"sum_qty","bigint",0,0);
#    sql.column(V66,"sum_base_price","decimal",19,2);
#    sql.column(V88,"sum_disc_price","decimal",19,4);
#    sql.column(V114,"sum_charge","decimal",19,6);
#    sql.column(V122,"avg_qty","double",53,0);
#    sql.column(V129,"avg_price","double",53,0);
#    sql.column(V136,"avg_disc","double",53,0);
#    sql.column(V137,"count_order","int",0,0);
#    sql.output(V52,V42,V51,V59,V66,V88,V114,V122,V129,V136,V137);
#    yield always;
#    redo always;
#exit always;
#end qry1;
factory user.qry1(A0:sht,A1:sht,A2:sht,A3:date,A4:int):any;	# 0  dynamic (qry1:any)<-(A0:sht)(A1:sht)(A2:sht)(A3:date)(A4:int)
    V6 := sql.bind("sys","lineitem","l_shipdate",0);	# 1 mvc_bind_wrap (V6:bat[:void,:date])<-($7:str)($8:str)($9:str)($10:int)
    V11 := sql.bind_dbat("sys","lineitem",0);	# 2 mvc_bind_dbat_wrap (V11:bat[:void,:oid])<-($7:str)($8:str)($10:int)
    V22 := sql.bind("sys","lineitem","l_returnflag",0);	# 3 mvc_bind_wrap (V22:bat[:void,:bit])<-($7:str)($8:str)($13:str)($10:int)
    V29 := sql.bind("sys","lineitem","l_linestatus",0);	# 4 mvc_bind_wrap (V29:bat[:void,:bit])<-($7:str)($8:str)($15:str)($10:int)
    V53 := sql.bind("sys","lineitem","l_quantity",0);	# 5 mvc_bind_wrap (V53:bat[:void,:int])<-($7:str)($8:str)($17:str)($10:int)
    V60 := sql.bind("sys","lineitem","l_extendedprice",0);	# 6 mvc_bind_wrap (V60:bat[:void,:flt])<-($7:str)($8:str)($19:str)($10:int)
    V75 := sql.bind("sys","lineitem","l_discount",0);	# 7 mvc_bind_wrap (V75:bat[:void,:flt])<-($7:str)($8:str)($21:str)($10:int)
    V105 := sql.bind("sys","lineitem","l_tax",0);	# 8 mvc_bind_wrap (V105:bat[:void,:flt])<-($7:str)($8:str)($23:str)($10:int)
    optimizer.RXemptyBAT(V11);	# 9 RXemptyBAT ($24:void)<-(V11:bat[:void,:oid])
barrier always := true;	# 10  (always:bit)<-($26:bit) jump 73
    V12 := bat.reverse(V11);	# 11 BKCreverse (V12:bat[:oid,:void])<-(V11:bat[:void,:oid])
    V13 := algebra.kdiff(V6,V12);	# 12 ALGkdiff (V13:bat[:oid,:date])<-(V6:bat[:void,:date])(V12:bat[:oid,:void])
    V16 := mtime.date_sub_sec_interval(A3,A4);	# 13 MTIMEdate_sub_sec_interval_wrap (V16:date)<-(A3:date)(A4:int)
    a := mtime.date(nil);	# 14 MTIMEnil2date (a:date)<-($31:void)
    V17 := algebra.uselect(V13,a,V16);	# 15 ALGuselect (V17:bat[:oid,:void])<-(V13:bat[:oid,:date])(a:date)(V16:date)
    V20 := algebra.markT(V17,0@0);	# 16 ALGtmark (V20:bat[:oid,:void])<-(V17:bat[:oid,:void])($34:oid)
    V21 := bat.reverse(V20);	# 17 BKCreverse (V21:bat[:void,:oid])<-(V20:bat[:oid,:void])
    V26 := algebra.kdiff(V22,V12);	# 18 ALGkdiff (V26:bat[:oid,:bit])<-(V22:bat[:void,:bit])(V12:bat[:oid,:void])
    V27 := algebra.join(V21,V26);	# 19 ALGjoin (V27:bat[:void,:bit])<-(V21:bat[:void,:oid])(V26:bat[:oid,:bit])
    V28 := group.group(V27);	# 20  (V28:any)<-(V27:bat[:void,:bit])
    V33 := algebra.kdiff(V29,V12);	# 21 ALGkdiff (V33:bat[:oid,:bit])<-(V29:bat[:void,:bit])(V12:bat[:oid,:void])
    V34 := algebra.join(V21,V33);	# 22 ALGjoin (V34:bat[:void,:bit])<-(V21:bat[:void,:oid])(V33:bat[:oid,:bit])
    V35 := group.group(V28,V34);	# 23  (V35:any)<-(V28:any)(V34:bat[:void,:bit])
    V36 := algebra.tunique(V35);	# 24  (V36:any)<-(V35:any)
    V37 := bat.mirror(V36);	# 25  (V37:any)<-(V36:any)
    V42 := algebra.join(V37,V27);	# 26  (V42:any)<-(V37:any)(V27:bat[:void,:bit])
    V43 := algebra.sort_reverse(V42);	# 27  (V43:any)<-(V42:any)
    V51 := algebra.join(V37,V34);	# 28  (V51:any)<-(V37:any)(V34:bat[:void,:bit])
    V52 := group.refine(V43,V51);	# 29  (V52:any)<-(V43:any)(V51:any)
    V57 := algebra.kdiff(V53,V12);	# 30 ALGkdiff (V57:bat[:oid,:int])<-(V53:bat[:void,:int])(V12:bat[:oid,:void])
    V58 := algebra.join(V21,V57);	# 31 ALGjoin (V58:bat[:void,:int])<-(V21:bat[:void,:oid])(V57:bat[:oid,:int])
    V59 := aggrX3.sum(V58,V35,V37);	# 32  (V59:any)<-(V58:bat[:void,:int])(V35:any)(V37:any)
    V64 := algebra.kdiff(V60,V12);	# 33 ALGkdiff (V64:bat[:oid,:flt])<-(V60:bat[:void,:flt])(V12:bat[:oid,:void])
    V65 := algebra.join(V21,V64);	# 34 ALGjoin (V65:bat[:void,:flt])<-(V21:bat[:void,:oid])(V64:bat[:oid,:flt])
    V66 := aggrX3.sum(V65,V35,V37);	# 35  (V66:any)<-(V65:bat[:void,:flt])(V35:any)(V37:any)
    V72 := calc.lng(A0);	# 36 CALCsht2lng (V72:lng)<-(A0:sht)
    V74 := calc.*(V72,100);	# 37 CALCbinaryMULlngint (V74:lng)<-(V72:lng)($56:int)
    V82 := algebra.kdiff(V75,V12);	# 38 ALGkdiff (V82:bat[:oid,:flt])<-(V75:bat[:void,:flt])(V12:bat[:oid,:void])
    V83 := algebra.join(V21,V82);	# 39 ALGjoin (V83:bat[:void,:flt])<-(V21:bat[:void,:oid])(V82:bat[:oid,:flt])
    V84 := multiplex.script("calc.-",V74,V83);	# 40  (V84:bat[:void,:flt])<-($60:str)(V74:lng)(V83:bat[:void,:flt])
    V86 := batcalc.*(V65,V84);	# 41 CMDbatMUL (V86:bat[:void,:flt])<-(V65:bat[:void,:flt])(V84:bat[:void,:flt])
    V88 := aggrX3.sum(V86,V35,V37);	# 42  (V88:any)<-(V86:bat[:void,:flt])(V35:any)(V37:any)
    V94 := calc.lng(A1);	# 43 CALCsht2lng (V94:lng)<-(A1:sht)
    V95 := calc.*(V94,100);	# 44 CALCbinaryMULlngint (V95:lng)<-(V94:lng)($56:int)
    V100 := multiplex.script("calc.-",V95,V83);	# 45  (V100:bat[:void,:flt])<-($60:str)(V95:lng)(V83:bat[:void,:flt])
    V101 := batcalc.*(V65,V100);	# 46 CMDbatMUL (V101:bat[:void,:flt])<-(V65:bat[:void,:flt])(V100:bat[:void,:flt])
    V103 := calc.lng(A2);	# 47 CALCsht2lng (V103:lng)<-(A2:sht)
    V104 := calc.*(V103,100);	# 48 CALCbinaryMULlngint (V104:lng)<-(V103:lng)($56:int)
    V109 := algebra.kdiff(V105,V12);	# 49 ALGkdiff (V109:bat[:oid,:flt])<-(V105:bat[:void,:flt])(V12:bat[:oid,:void])
    V110 := algebra.join(V21,V109);	# 50 ALGjoin (V110:bat[:void,:flt])<-(V21:bat[:void,:oid])(V109:bat[:oid,:flt])
    V111 := multiplex.script("calc.+",V104,V110);	# 51  (V111:bat[:void,:flt])<-($72:str)(V104:lng)(V110:bat[:void,:flt])
    V113 := batcalc.*(V101,V111);	# 52 CMDbatMUL (V113:bat[:void,:flt])<-(V101:bat[:void,:flt])(V111:bat[:void,:flt])
    V114 := aggrX3.sum(V113,V35,V37);	# 53  (V114:any)<-(V113:bat[:void,:flt])(V35:any)(V37:any)
    V122 := aggrX3.avg(V58,V35,V37);	# 54  (V122:any)<-(V58:bat[:void,:int])(V35:any)(V37:any)
    V127 := aggrX3.avg(V65,V35,V37);	# 55  (V127:any)<-(V65:bat[:void,:flt])(V35:any)(V37:any)
    V129 := multiplex.script("calc.round",V127,100);	# 56  unknown (V129:any)<-($78:str)(V127:any)($56:int)
    V135 := aggrX3.avg(V83,V35,V37);	# 57  (V135:any)<-(V83:bat[:void,:flt])(V35:any)(V37:any)
    V136 := multiplex.script("calc.round",V135,100);	# 58  unknown (V136:any)<-($78:str)(V135:any)($56:int)
    V137 := aggrX3.count(V35,V35,V37);	# 59  (V137:any)<-(V35:any)(V35:any)(V37:any)
    sql.column(V42,"l_returnflag","varchar",1,0);	# 60 SQLcolumnsingle ($82:void)<-(V42:any)($83:str)($84:str)($85:int)($86:int)
    sql.column(V51,"l_linestatus","varchar",1,0);	# 61 SQLcolumnsingle ($87:void)<-(V51:any)($88:str)($84:str)($85:int)($86:int)
    sql.column(V59,"sum_qty","bigint",0,0);	# 62 SQLcolumnsingle ($89:void)<-(V59:any)($90:str)($91:str)($86:int)($86:int)
    sql.column(V66,"sum_base_price","decimal",19,2);	# 63 SQLcolumnsingle ($92:void)<-(V66:any)($93:str)($94:str)($95:int)($96:int)
    sql.column(V88,"sum_disc_price","decimal",19,4);	# 64 SQLcolumnsingle ($97:void)<-(V88:any)($98:str)($94:str)($95:int)($99:int)
    sql.column(V114,"sum_charge","decimal",19,6);	# 65 SQLcolumnsingle ($100:void)<-(V114:any)($101:str)($94:str)($95:int)($102:int)
    sql.column(V122,"avg_qty","double",53,0);	# 66 SQLcolumnsingle ($103:void)<-(V122:any)($104:str)($105:str)($106:int)($86:int)
    sql.column(V129,"avg_price","double",53,0);	# 67 SQLcolumnsingle ($107:void)<-(V129:any)($108:str)($105:str)($106:int)($86:int)
    sql.column(V136,"avg_disc","double",53,0);	# 68 SQLcolumnsingle ($109:void)<-(V136:any)($110:str)($105:str)($106:int)($86:int)
    sql.column(V137,"count_order","int",0,0);	# 69 SQLcolumnsingle ($111:void)<-(V137:any)($112:str)($113:str)($86:int)($86:int)
    sql.output(V52,V42,V51,V59,V66,V88,V114,V122,V129,V136,V137);	# 70 SQLoutput ($114:void)<-(V52:any)(V42:any)(V51:any)(V59:any)(V66:any)(V88:any)(V114:any)(V122:any)(V129:any)(V136:any)(V137:any)
    yield always;	# 71  (always:bit)
    redo always;	# 72  (always:bit) jump 11
exit always;	# 73  (always:bit)
end qry1;	# 74  
!ERROR: multiplexType:script[56]: at least one BAT argument required
!ERROR: multiplexType:script[58]: at least one BAT argument required
#
#
#optimize("user","qry1");
#mdb.showFunction("user","qry1");
#
!ERROR: optimize("user","qry1");
!       ^module name expected
function user.main():int;	# 0  unknown (main:int)
    ;	# 1  unknown ($1:any)
    mdb.showFunction("user","qry1");	# 2  unknown ($2:any)<-($3:str)($4:str)
end main;	# 3  unknown 

# 15:16:27 >  
# 15:16:27 >  Done.
# 15:16:27 >  

