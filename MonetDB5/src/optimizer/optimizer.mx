@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@'
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@'
@' The Original Code is the Monet Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2005 CWI.
@' All Rights Reserved.

@f optimizer
@a Martin Kersten
@v 0.1
@* Optimizer support 
This module contains the framework for inclusion query transformers, i.e.
C-programs geared at optimizing a piece of MAL.
The query transformer appears at the language level as an ordinary function,
but it is effective only at a specific execution phase.

Each optimizer function has access to the runtime scope of the
routine in which it is called. This can be used to maintain status
information between successive calls. 

The routines below are linked with the kernel by default
@mal

module optimizer;

command prelude()
address optimizer_prelude
comment "Initialize the optimizer";

pattern optimize(mod:str, fcn:str)
address QOToptimize
comment "Optimize a specific operation";

pattern commonExpressionRemoval():str 
address QOTCXoptimizer;
pattern commonExpressionRemoval(mod:any, fcn:any):str 
address QOTCXoptimizerCALL
comment "Common subexpression optimizer";

pattern aliasRemoval():str 
address QOTARoptimizer;
pattern aliasRemoval(mod:str, fcn:str):str 
address QOTARoptimizerCALL
comment "Alias removal optimizer";

pattern deadCodeRemoval():str 
address QOTDCoptimizer;
pattern deadCodeRemoval(mod:str, fcn:str):str 
address QOTDCoptimizerCALL
comment "Dead code optimizer";

pattern selectPushdown():str 
address QOTSPoptimizer;
pattern selectPushdown(mod:str, fcn:str):str 
address QOTSPoptimizerCALL
comment "Selection push-down optimizer";

pattern reversalRemoval():str 
address QOTRRoptimizer;
pattern reversalRemoval(mod:str, fcn:str):str 
address QOTRRoptimizerCALL
comment "Reversal idempotency removal";

pattern expressionAccumulation():str 
address QOTORoptimizer;
pattern expressionAccumulation(mod:str, fcn:str):str 
address QOTORoptimizerCALL
comment "Replace calculations with accumulator model";

pattern garbageCollector():str 
address QOTGCoptimizer;
pattern garbageCollector(mod:str, fcn:str):str 
address QOTGCoptimizerCALL
comment "Garbage collector optimizer";

pattern factorize():str 
address QOTFToptimizer;
pattern factorize(mod:str, fcn:str):str 
address QOTFToptimizerCALL
comment "Garbage collector optimizer";

pattern setDebug():void 
address QOTdebugOptimizers;

pattern showFlowGraph(M:str,F:str,s:str):void 
address QOTshowFlowGraph
comment "Dump the data flow of the function 
	M.F in a format recognizable by the 
	command 'dot' on the file s";
@-
The macro processors are also be called during optimizer time
@mal
pattern macroExpansion():void 
address QOTMEoptimizer
comment "Inliner of any function";
pattern macroExpansion(mod:str):void 
address QOTMEoptimizerModule
comment "Inliner of functions in a specific module";
pattern macroExpansion(mod:str, fcn:str):void
address QOTMEoptimizerSymbol
comment "Inliner of a specific function";

pattern macroContraction():void
address QOTMCoptimizer
comment "Inliner of any function";
pattern macroContraction(mod:str):void
address QOTMCoptimizerModule
comment "Inliner of functions in a specific module";
pattern macroContraction(mod:str, fcn:str):void
address QOTMCoptimizerSymbol
comment "Inliner of a specific function";

@-
The remaining operations are used to debug portions of the optimizer.
@mal
pattern RXemptyBAT(:bat[:any,:any])
address RXemptyBAT
comment "The argument is as an empty BAT";

pattern RXalignedBATs(:bat[:any,:any]...)
address RXalignedBATs
comment "Consider the BATs aligned";

@-
The remainder of this file contains dynamic optimization
routines, i.e. those not covered by the current backend.
The most important one is the multi-path join, which should
be optimized to reduce a potential exploding size/
@mal
pattern algebra.joinPath(b:bat[:any$1,:any$2], 
        aliasRemoval:bat[:any$2,:any$3]...):bat[:any$1,:any$3]
address QOTjoinPath
comment "Evaluate a join path.";

optimizer.prelude();
@{
@+ Dummy code 
@h
#ifndef _OPTIMIZER_H
#define _OPTIMIZER_H
/* #define OPTIMIZER_DEBUG*/
#endif /* _OPTIMIZER_H*/
@c
#include "optimizer.h"
#include "mal_interpreter.h"
#include "mal_optimizer.h"
#include "mal_factorize.h"
#include "mal_scenario.h"

@
Upon loading the module it should inspect the scenario table
for any unresolved references to the MALoptimizer and set the 
callback function.
@c
str optimizer_prelude()
{
	updateScenario("MALoptimizer", (MALfcn) MALoptimizer);
	return MAL_SUCCEED;
}


str QOTdebugOptimizers(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	debugOptimizers(mb,stk,pci);
	return NULL;
}
@-
MAL functions can be optimized explicitly using the routines below.
Beware, the function names should be known as literalstrings, because
you may not know the runtime situation.
@= QOTC
str QOT@1optimizerCALL(MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
	str	modnme;
	str	fcnnme;
	Scope  scope=NULL;
	Symbol s= NULL;
	Client c= getClient();

	if( stk != 0){
		modnme= (str)getArgValue(stk,p,1);
		fcnnme= (str)getArgValue(stk,p,2);
	} else {
		modnme= getArgDefault(mb,p,1);
		fcnnme= getArgDefault(mb,p,2);
	}
	scope = findModule(c->nspace,modnme);
	if( scope)
		s= findSymbolInModule(scope,fcnnme);

	if( s == NULL)
		GDKerror("@1optimizer:Could not find %s.%s\n",modnme,fcnnme);
	else
		printf("#@1optimizer %s.%s\n",modnme,fcnnme);
	setLifespan(s->def);
	@1optimizer(s->def,0,0);
	if(c->listing) printFunction(GDKout,s->def,c->listing);

	removeInstruction(mb, p);
	return NULL;
}
str QOT@1optimizer(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	setLifespan(mb);
	@1optimizer(mb, stk, pci);
	return NULL;
}
@c
	@:QOTC(CX)@
	@:QOTC(AR)@
	@:QOTC(DC)@
	@:QOTC(SP)@
	@:QOTC(GC)@
	@:QOTC(RR)@
	@:QOTC(OR)@
	@:QOTC(FT)@

str QOToptimize(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	str modnme;
	str fcnnme;
	Symbol s;
	(void) stk;
	if( stk != 0){
		modnme= (str)getArgValue(stk,pci,1);
		fcnnme= (str)getArgValue(stk,pci,2);
	} else {
		modnme= getArgDefault(mb,pci,1);
		fcnnme= getArgDefault(mb,pci,2);
	}
	s = findMALSymbol(modnme,fcnnme);
	if( s == NULL)
		return throwMessage("optimizer.optimize","operation not found\n");
	removeInstruction(mb,pci);
	return optimizeMALBlock(s->def);
}

str QOTshowFlowGraph(MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
	str fname;
	str modnme;
	str fcnnme;
	Scope  scope=NULL;
	Symbol s= NULL;
	Client c= getClient();
	(void) mb;
	if( stk != 0){
		modnme= (str)getArgValue(stk,p,1);
		fcnnme= (str)getArgValue(stk,p,2);
		fname= (str) getArgValue(stk,p,3);
	} else {
		modnme= getArgDefault(mb,p,1);
		fcnnme= getArgDefault(mb,p,2);
		fname= getArgDefault(mb,p,3);
	}

	scope = findModule(c->nspace,modnme);
	if( scope)
		s= findSymbolInModule(scope,fcnnme);

	if( s == NULL)
		GDKerror("@1:Could not find %s.%s\n",modnme,fcnnme);
        else {
                showFlowGraph(s->def,stk,fname);
        }
        return NULL;
}
@-
The join path optimizer takes a join sequence and
attempts to minimize the intermediate result.
The choice depends on a good estimate of intermediate
results.
For the time being, we use a simplistic model, based
on the assumption that most joins are foreign key joins anyway.
@c
lng QOTjoinEstimate(BAT *l, BAT *r){
    lng lc,rc;
    lc= BATcount(l);
    rc= BATcount(r);
    return MIN(lc,rc);
}
str QOTjoinPath(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
    BAT *joins[MAXARG],*b=0;
    lng estimate,e;
    int top,top2,i,j,ret = 0,*bid;
    (void) mb;
    (void)ret;
    top=0;
    for(i=pci->retc; i<pci->argc; i++){
        bid= (int*) getArgReference(stk,pci,i);
#ifdef OPTIMIZER_DEBUG
        printf("bid %d\n",*bid);
#endif
		if( (b= BATdescriptor(*bid)) == NULL ){
			 return throwMessage("algebra.joinPath", "Cannot access descriptor");
		}

        joins[top++]=b;
    }
	top2= top;
    /* solve the join by pairing the smallest first */
    while( top>2){
        j =0;
        estimate = BATcount(joins[0]);
        for(i=1;i<top-1;i++){
            e= QOTjoinEstimate(joins[i],joins[i+1]);
            if( e< estimate) {
                estimate= e;
                j= i;
            }
        }
#ifdef OPTIMIZER_DEBUG
        printf("join %d and %d\n",joins[j]->batCacheid,joins[j+1]->batCacheid);
#endif
        b= BATjoin(joins[j],joins[j+1],estimate);
        joins[j]=b;
        for(i=j+1;i<top;i++)
            joins[i]= joins[i+1];
        top--;
    }
#ifdef OPTIMIZER_DEBUG
        printf("join %d and %d\n",joins[0]->batCacheid,joins[1]->batCacheid);
#endif
    estimate = BATcount(joins[0]);
    b= BATjoin(joins[0],joins[1],estimate);
    BBPfix(b->batCacheid);
    *(int*) getArgReference(stk,pci,0) = b->batCacheid;
	for(i=0;i<top2;i++)
		BBPunfix(joins[i]->batCacheid);
    return NULL;
}
@}
