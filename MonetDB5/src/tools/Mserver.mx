@f Mserver
@a M.L. Kersten, P. Boncz, Niels Nes
@v 5.0
@* The Monet Server
@T
The {\tt Mserver} is the Monet server. It is started by the database
administrator.  The console is primarilly meant to further initialize
the server, such as starting internet listeners.

@+ Manual Page
@T
The Mserver is a multithreaded program. There is one system thread, and for
each service, e.g. a client session or transaction service,
there is one worker thread.
As a default, the Mserver also starts the internet listener thread,
on the port number specified in the parameter file.

@- Usage
@T
\begin{verbatim}
Mserver { [ --dbname <db-name> ] 
	  [--dbfarm <dbfarm> ]  
	  [ -c|--config <config-file> ]
          [ -d|--gdk_debug [value]
	  [ --set [option=value] set option can be given multiple times
                                    to override verious options
        } [ <mal-script> ]
\end{verbatim}

Since the console has no command-line history nor file name completion,
you are {\em recommended} to use the 
Mclient program for interactive sessions instead.

The options have the following meaning:
\begin{description}
\item[{\tt --dbname $<$db-name$>$ }]
	open the database {\em db-name}.
\item[{\tt --config $<$config-file$>$ }]
	where to find the environment settings
\end{description}

@{
@+ Implementation
@h
#ifndef _MSERVER_H_
#define _MSERVER_H_
#include "gdk.h"
#include "monet_options.h"
#include "mal.h"
#include "mal_session.h"
#include "mal_import.h"
#include "mal_client.h"
#include "mal_function.h"

/* #define MSERVER_DEBUG */
#endif /* _MSERVER_H_ */

@C
extern "C" {
#include "Mserver.h"
}
#include "mal.h"

void *operator new( size_t size ) {
        void *ptr = GDKmalloc( size );
        return(ptr);
}
void operator delete( void *ptr ) {
        GDKfree( ptr );
}
#if defined(__GNUC__) && defined(__cplusplus)
void *operator new[]( size_t size ) {
        void *ptr = GDKmalloc( size );
        return(ptr);
}
void operator delete[]( void *ptr ) {
        GDKfree( ptr );
}
#endif


@-
The architecture is setup to handle multiple streams of requests.
The first thread started represents the server. It reads from standard input
and writes to standard input. This is also a way to recognize the server
actions. 
To start the server in the background one should use the argument -background.
This closes standard input. Direct execution in the background may cause
the server to hang in stdio for input from the terminal.
@ 
The server thread started remains in existence until all other threads die.
The server is stopped by cntrl-D or receiving the quit command.
@

@-
Braindamaged Sun engineers decided to use malloc for allocating an enormous
buffer of 20 bytes in the sunos2.5.5.X thread library, making the tunable 
malloc library totally unusable, since it requires you to do advice before any 
use of malloc().  We hack around it, by using realloc(0,size) in 
gdk/gdk_utils.mx and wrapping malloc in the below dummy function:
@C
#ifndef NOMALLOPT
static int malloc_init=1;
#ifdef SOLARIS
#undef malloc
void* malloc(size_t size) {
	@:mallopt@
	return realloc(0,size);
}
#endif
#endif
@C
#ifdef NATIVE_WIN32
#include <eh.h>
extern int optind;

void Mserver_abort() {
        fprintf(stderr,"\n! Mserver_abort() was called by terminate(). !\n");
        fflush(stderr);
        MT_global_exit(1);
}
#endif
void usage( char *prog ){
        fprintf(stderr, "usage: %s\n", prog);
        fprintf(stderr, "[--dbname database_name ]\n" );
        fprintf(stderr, "[--dbfarm database_directory ]\n" );
        fprintf(stderr, "[-d or --debug [debug_level] ]\n" );
        fprintf(stderr, "[-? or --help ]\n" );
        fprintf(stderr, "[-c or --config config_file ]\n" );
        fprintf(stderr, "[-s or --set option=value ]\n" );
        fprintf(stderr, "script+\n" );
        exit(-1);
}

@-
A welcoming message is displayed to inform the user about recent
changes. 
@C
void monet_hello(opt *set, int setlen) {
    char *msg = mo_find_option(set, setlen, "monet_welcome");
    if ( msg && strcmp(msg,"yes")==0){
        printf("# Monet Database Server V%s\n", GDKgetenv("gdk_version"));
        printf("# Copyright (c) 1993-2003, CWI. ");
        printf("All rights reserved.\n");
        printf("# compiled for %s/%dbit.\n", 
		GDKgetenv("gdk_arch"), sizeof(ptr)*8 );
	printf("# config:%s\n", GDKgetenv("gdk_config"));
	printf("# dbfarm:%s\n", GDKgetenv("gdk_dbfarm"));
	printf("# dbname:%s\n", GDKgetenv("gdk_dbname"));
    }
}

str absolute_path(str s) {
        if (!MT_path_absolute(s)) {
                str ret = (str)GDKmalloc(strlen(s) + strlen(monet_cwd) + 2);
                sprintf(ret, "%s%c%s", monet_cwd, DIR_SEP, s);
                return ret;
        }
        return GDKstrdup(s);
}

@-
The options obtained during initialization should be maintained as
a global structure for other components to extract information.
@C
void monet_init( opt *set, int setlen)
{
	char *p;
	opt *n = (opt*)malloc(setlen*sizeof(opt));
	int i,j, nlen = 0;
	int listing=0;

	char buf[BUFSIZ];
	char *dbname = mo_find_option(set, setlen, "gdk_dbname");
	char *dbfarmval = mo_find_option(set, setlen, "gdk_dbfarm");
	char *modpath= mo_find_option(set, setlen, "monet_mod_path");
	char *prefix= mo_find_option(set, setlen, "prefix");
	char *pf = prefix;

	if( modpath){ strcpy(buf,modpath);
		mo_substitute(set, setlen, buf);
		modpath= strdup(buf);
	}
	if( prefix){ strcpy(buf,prefix);
		mo_substitute(set, setlen, buf);
		pf= strdup(buf);
	}

	if (!n || !dbname || !dbfarmval){
		fprintf(stderr,"Error, no database name or directory\n");
		if (n) free(n);
		return ;
	}

	strcpy(buf, dbfarmval );	
	mo_substitute(set, setlen, buf);

        /* determine Monet's kernel settings. */
	if (!GDKinit(dbname, buf)) return ;

@-
Find duplicate entries in the property list and move
them to the front. Actually, this should be done in
monet_options.mx.in
@C
	for(i=0; i<setlen; i++){
		int done = 0;
		for(j=0; j<nlen; j++){
			if (strcmp(n[j].name, set[i].name) == 0){ 
			    	if (n[j].kind < set[i].kind){
					n[j] = set[i];
				}
				done = 1;
				break;
			}
		}
		if (!done){
			n[nlen] = set[i];
			nlen++;
		}
	}
	for(i=0; i<nlen; i++){
		strncpy(buf, n[i].value, BUFSIZ);
		mo_substitute(n, nlen, buf);
		GDKsetenv(n[i].name, buf);
	}
/*
	for(i=0; i<setlen; i++){
		strncpy(buf, set[i].value, BUFSIZ);
		mo_substitute(set, setlen, buf);
		GDKsetenv(set[i].name, buf);
	}
*/
	free(n);

	if ((p=GDKgetenv("gdk_debug")) )
		GDKdebug = strtol(p,NULL,10);

	if ((p=GDKgetenv("gdk_mmap")) )
		GDKmem_bigsize() = strtol(p,NULL,10);

	/* you don;t need the commandline arguments anymore */
	/* mo_free_options(set,setlen); GDK library can not deal with this*/
	/* keep them around until goodbye */
	monet_hello(set,setlen);

	if( mal_init(GDKstrdup(modpath),pf)) return;
	if( pf!=prefix) free(pf);

	if( GDKgetenv("mal_listing"))
		sscanf( GDKgetenv("mal_listing"),"%d",&listing);
        for(i=0; monet_script[i]; i++) {
                malImport(mal_clients, monet_script[i], 0, listing);
		GDKfree(monet_script[i]);
		monet_script[i]=0;
        }
	GDKfree(monet_script);
        initClientPrg(mal_clients,"main");
        serveClient(mal_clients);
}

int main(int argc, char** av) {
	char buf[BUFSIZ], *prog = *av, *config = NULL;
        opt *set = NULL;
        int i,debug = 0, setlen = 0;


@-
We give malloc advice here. Main goal: prevent fragmentation.
We do this by declaring everything below 2K as 'small'. These
values will be drawn from a fixed pools of 400K.
A grain size of 128 bytes is used to keep overhead low.
@= mallopt
	printf("malloc optimize\n");
	if (malloc_init) {
            if (mallopt(M_MXFAST, 192)) {
		fprintf(stderr, "monet: mallopt(M_MXFAST,8192) fails.\n");
	    }
            if (mallopt(M_NLBLKS, 16)) {
		fprintf(stderr, "monet: mallopt(M_NLBLKS,10) fails.\n");
	    }
	    if (mallopt(M_GRAIN, 32)) {
		fprintf(stderr, "monet: mallopt(M_GRAIN,96) fails.\n");
 	    }
	}
	malloc_init=0;
@C

#ifdef NATIVE_WIN32
        set_terminate( Mserver_abort );
#endif

#ifndef NOMALLOPT
	(void) malloc_init; /* still unused */
	/* @:mallopt@*/
#endif

	static struct option long_options[] =
             {
               {"config", 1, 0, 'c'},
               {"dbname", 1, 0, 0},
               {"dbfarm", 1, 0, 0},
               {"debug", 2, 0, 'd'},
               {"help", 0, 0, '?'},
               {"set", 1, 0, 's'},
               {0, 0, 0, 0}
             };

        if (getcwd(monet_cwd, PATHLENGTH-1)  == NULL ){
                perror("pwd");
                GDKfatal("monet_init: could not determine current directory\n");
        }

	if (!(setlen = mo_builtin_settings(&set)) )
		usage(prog);

	while(1){
		int option_index = 0;

		int c = getopt_long( argc, av, "c:d::?s:", 
				long_options, &option_index);

		if (c == -1)
			break;

		switch (c){
		case 0:
			if (strcmp(long_options[option_index].name, 
						"dbname") == 0){
				setlen = mo_add_option( &set, setlen, 
					opt_cmdline, "gdk_dbname", optarg );
				break;
			}
			if (strcmp(long_options[option_index].name, 
						"dbfarm") == 0){
				setlen = mo_add_option( &set, setlen, 
					opt_cmdline, "gdk_dbfarm", optarg );
				break;
			}
			usage(prog);
			break;
		case 'c':
			if( *optarg!='/' && *optarg !='.') {
				snprintf(buf,BUFSIZ,"%s/%s",monet_cwd,optarg);
				config= strdup(buf);
			} else config = strdup(optarg);
			break;
		case 'd':
			debug=1;
			if (optarg){ 
				setlen = mo_add_option( &set, setlen, 
					opt_cmdline, "gdk_debug", optarg );
			}
			break;
		case 's': {
			/* should add option to a list */
			char *tmp = strchr(optarg, '=');

			if (tmp){
				*tmp = '\0';
				setlen = mo_add_option( &set, setlen, 
					opt_cmdline, optarg, tmp+1 );
			} else {
				fprintf(stderr, "ERROR: wrong format %s\n", 
					optarg);
			}
		 } break;
		case '?':
			usage(prog);
		default:
			fprintf( stderr, 
			    "ERROR: getopt returned character code 0%o ??\n",c);
			usage(prog);
		}
	}

	if (config){
		setlen = mo_config_file(&set, setlen, config );
	} else {
		if (!(setlen = mo_system_config(&set, setlen)) )
			usage(prog);
	}

	i = 0;
	monet_script = (str*)GDKmalloc( sizeof(str) * (argc+1) );
	monet_script[i] = NULL;
	while(optind < argc){
		monet_script[i] = absolute_path(av[optind]);
		monet_script[i+1] = NULL;
		optind++;
		i++;
	}

	if (debug)
		mo_print_options(set, setlen);
#ifdef MSERVER_DEBUG
	else	mo_print_options(set,setlen);
#endif
	monet_init(set, setlen);

	assert(0);	/* should not come here */
	MT_global_exit(0);  
	return 0; 
}

@}
