@f optimizer
@t The optimizer support functions
@a Martin Kersten
@v 0.1

@* The optimizer
This module contains the framework for inclusion query transformers, i.e.
C-programs geared at optimizing a piece of MAL.
The query transformer appears at the language level as an ordinary function,
but it is effective only at a specific execution phase.

Each optimizer function has access to the runtime scope of the
routine in which it is called. This can be used to maintain status
information between successive calls. 

@mal
# The routines below are linked with the kernel by default

MODULE optimizer;

PATTERN CXoptimizer(mod:any, fcn:any):str = QOTCXoptimizerCALL;
PATTERN ARoptimizer(mod:any, fcn:any):str = QOTARoptimizerCALL;
PATTERN DCoptimizer(mod:any, fcn:any):str = QOTDCoptimizerCALL;
PATTERN SPoptimizer(mod:any, fcn:any):str = QOTSPoptimizerCALL;
PATTERN RRoptimizer(mod:any, fcn:any):str = QOTRRoptimizerCALL;

PATTERN debugOptimizers():void = QOTdebugOptimizers;
PATTERN CXoptimizer():str = QOTCXoptimizer;
PATTERN ARoptimizer():str = QOTARoptimizer;
PATTERN DCoptimizer():str = QOTDCoptimizer;
PATTERN SPoptimizer():str = QOTSPoptimizer;
PATTERN RRoptimizer():str = QOTRRoptimizer;

@+ Dummy code 
@h
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at 
 * http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 */
#ifndef _OPTIMIZER_H
#define _OPTIMIZER_H
#endif /* _OPTIMIZER_H*/
@c
#include "optimizer.h"
#include "mal_optimizer.h"

str QOTdebugOptimizers(MalBlkPtr mb, MalStkPtr s, InstrPtr p){
	debugOptimizers(getClient(),mb,getPC(mb,p));
	return NULL;
}
@-
MAL functions can be optimized explicitly using the routines below.
@= QOTC
str QOT@1optimizerCALL(MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
	MalBlkPtr mf;
	str	modnme= getArgName(mb,p,1);
	str	fcnnme= getArgName(mb,p,2);
	Scope  scope=NULL;
	Symbol s= NULL;
	Client c= getClient();

	scope = findScope(c->nspace,modnme);
	if( scope)
		s= findSymbolInScope(scope,fcnnme);

	if( s == NULL)
		GDKerror("@1optimizer:Could not find %s.%s\n",modnme,fcnnme);
	else
		printf("#@1optimizer %s.%s\n",modnme,fcnnme);
	setLifespan(s->def);
	@1optimizer(c,s->def,0);
	if(c->listing) printFunction(GDKout,s->def,c->listing);

	removeInstruction(mb, getPC(mb,p));
	return NULL;
}
str QOT@1optimizer(MalBlkPtr mb, MalStkPtr s, InstrPtr p){
	setLifespan(mb);
	@1optimizer(getClient(),mb, getPC(mb,p));
	return NULL;
}
@c
	@:QOTC(CX)@
	@:QOTC(AR)@
	@:QOTC(DC)@
	@:QOTC(SP)@
	@:QOTC(RR)@
