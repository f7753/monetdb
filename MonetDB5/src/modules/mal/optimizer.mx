@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@' 
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@' 
@' The Original Code is the Monet Database System.
@' 
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2004 CWI.
@' All Rights Reserved.

@f optimizer
@a Martin Kersten
@v 0.1
@* Optimizer support 
This module contains the framework for inclusion query transformers, i.e.
C-programs geared at optimizing a piece of MAL.
The query transformer appears at the language level as an ordinary function,
but it is effective only at a specific execution phase.

Each optimizer function has access to the runtime scope of the
routine in which it is called. This can be used to maintain status
information between successive calls. 

The routines below are linked with the kernel by default
@mal

MODULE optimizer;

pattern CXoptimizer():str 
address QOTCXoptimizer;
pattern CXoptimizer(mod:any, fcn:any):str 
address QOTCXoptimizerCALL
comment "Common subexpression optimizer";

pattern ARoptimizer():str 
address QOTARoptimizer;
pattern ARoptimizer(mod:any, fcn:any):str 
address QOTARoptimizerCALL
comment "Alias removal optimizer";

pattern DCoptimizer():str 
address QOTDCoptimizer;
pattern DCoptimizer(mod:any, fcn:any):str 
address QOTDCoptimizerCALL
comment "Dead code optimizer";

pattern SPoptimizer():str 
address QOTSPoptimizer;
pattern SPoptimizer(mod:any, fcn:any):str 
address QOTSPoptimizerCALL
coment "Selection push-down optimizer";

pattern RRoptimizer():str 
address QOTRRoptimizer;
pattern RRoptimizer(mod:any, fcn:any):str 
address QOTRRoptimizerCALL
comment "Reversal idempotency removal";

pattern debugOptimizers():void 
address QOTdebugOptimizers;

pattern showFlowGraph(M:any,F:any,s:str):void 
address QOTshowFlowGraph
comment "Dump the data flow of the function 
	M.F in a format recognizable by the 
	command 'dot' on the file s";
@-
The remainder of this file contains dynamic optimization
routines, i.e. those not covered by the current backend.
The most important one is the multi-path join, which should
be optimized to reduce a potential exploding size/
@mal
pattern algebra.joinPath(b:bat[:any$1,:any$2], 
        c:bat[:any$2,:any$3]...):bat[:any$1,:any$3]
address QOTjoinPath
comment "Evaluate a join path.";
@{
@include prelude.mx
@+ Dummy code 
@h
#ifndef _OPTIMIZER_H
#define _OPTIMIZER_H
#endif /* _OPTIMIZER_H*/
@c
#include "optimizer.h"
#include "mal_interpreter.h"
#include "mal_optimizer.h"

str QOTdebugOptimizers(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	(void) stk; /* fool compiler */
	debugOptimizers(getClient(),mb,getPC(mb,pci));
	return NULL;
}
@-
MAL functions can be optimized explicitly using the routines below.
@= QOTC
str QOT@1optimizerCALL(MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
	str	modnme= getArgName(mb,p,1);
	str	fcnnme= getArgName(mb,p,2);
	Scope  scope=NULL;
	Symbol s= NULL;
	Client c= getClient();

	(void) stk; /* fool compiler */
	scope = findScope(c->nspace,modnme);
	if( scope)
		s= findSymbolInScope(scope,fcnnme);

	if( s == NULL)
		GDKerror("@1optimizer:Could not find %s.%s\n",modnme,fcnnme);
	else
		printf("#@1optimizer %s.%s\n",modnme,fcnnme);
	setLifespan(s->def);
        @1optimizer(c,s->def,0);
	if(c->listing) printFunction(GDKout,s->def,c->listing);

	removeInstruction(mb, getPC(mb,p));
	return NULL;
}
str QOT@1optimizer(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	(void)stk; /* fool compiler */
	setLifespan(mb);
	@1optimizer(getClient(),mb, getPC(mb,pci));
	return NULL;
}
@c
	@:QOTC(CX)@
	@:QOTC(AR)@
	@:QOTC(DC)@
	@:QOTC(SP)@
	@:QOTC(RR)@


str QOTshowFlowGraph(MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
        str fname= (str) getArgValue(stk,p,3);
	str     modnme= getArgName(mb,p,1);
	str     fcnnme= getArgName(mb,p,2);
	Scope  scope=NULL;
	Symbol s= NULL;
	Client c= getClient();

	scope = findScope(c->nspace,modnme);
	if( scope)
		s= findSymbolInScope(scope,fcnnme);

	if( s == NULL)
		GDKerror("@1:Could not find %s.%s\n",modnme,fcnnme);
        else {
                showFlowGraph(s->def,stk,fname);
        }
        return NULL;
}
@-
The join path optimizer takes a join sequence and
attempts to minimize the intermediate result.
The choice depends on a good estimate of intermediate
results.
For the time being, we use a simplistic model, based
on the assumption that most joins are FK joins anyway.
@c
#define OPTIMIZER_DEBUG
lng QOTjoinEstimate(BAT *l, BAT *r){
    lng lc,rc;
    lc= BATcount(l);
    rc= BATcount(r);
    return MIN(lc,rc);
}
str QOTjoinPath(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
    BAT *joins[MAXARG],*b=0;
    lng estimate,e;
    int top,i,j,ret,*bid;
    (void) mb;
    (void)ret;
    top=0;
    for(i=pci->retc; i<pci->argc; i++){
        bid= (int*) getArgReference(stk,pci,i);
#ifdef OPTIMIZER_DEBUG
        printf("bid %d\n",*bid);
#endif
        @:getBATdescriptor(&ret,bid,b,algebra.joinPath)@
        joins[top++]=b;
    }
    /* solve the join by pairing the smallest first */
    while( top>2){
        j =0;
        estimate = BATcount(joins[0]);
        for(i=1;i<top-1;i++){
            e= QOTjoinEstimate(joins[i],joins[i+1]);
            if( e< estimate) {
                estimate= e;
                j= i;
            }
        }
#ifdef OPTIMIZER_DEBUG
        printf("join %d and %d\n",joins[j]->batCacheid,joins[j+1]->batCacheid);
#endif
        b= BATjoin(joins[j],joins[j+1],estimate);
        joins[j]=b;
        for(i=j+1;i<top;i++)
            joins[i]= joins[i+1];
        top--;
    }
#ifdef OPTIMIZER_DEBUG
        printf("join %d and %d\n",joins[0]->batCacheid,joins[1]->batCacheid);
#endif
    estimate = BATcount(joins[0]);
    b= BATjoin(joins[0],joins[1],estimate);
    *(int*) getArgReference(stk,pci,0) = b->batCacheid;
    return NULL;
}
@}
