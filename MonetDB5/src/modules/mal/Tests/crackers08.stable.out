stdout of test 'crackers08` in directory 'src/modules/mal` itself:


# 20:35:04 >  
# 20:35:04 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=45409 --set sql_port=55183 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  crackers08.mal </dev/null
# 20:35:04 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl for further information.
## determine basic costs for cracking a larger table.
#b:= new(:int,:int);
#barrier (v,i):= newRange(0:int);
#        k:= rand();
#        l:= int(k);
#        insert(b,l,l);
#        redo (v,i):= nextElement(1:int,1000000:int);
#exit (v,i);
#
##setReadMode(b);
#mx:= max(b);
#printf("max %d",mx);
#mi:= min(b);
#printf(" min %d\n",mi);
#t0:= alarm.usec();
#c:= copy(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#copy %d\n",d0);
#
#t0:= alarm.usec();
#crackers.new(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack init %d\n",d0);
##print(vrng);
#
#l:= mi*2;
#h:= mx/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#crackers.crack(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack %d\n",d0);
#
#l:= l*2;
#h:= h/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#crackers.crack(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack %d\n",d0);
#
#l:= l*2;
#h:= h/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#crackers.crack(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack %d\n",d0);
#
#l:= l*2;
#h:= h/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#crackers.crack(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack %d\n",d0);
#
## Compare cracker with ordinary selection
#t0:= alarm.usec();
#i:= max(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#max %d\n",d0);
#t0:= alarm.usec();
#i:= min(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#min %d\n",d0);
#
#l:= mi*2;
#h:= mx/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#c:= select(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select %d\n",d0);
#
#l:= l*2;
#h:= h/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#c:= select(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select %d\n",d0);
#
#l:= l*2;
#h:= h/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#c:= select(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select %d\n",d0);
#
#l:= l*2;
#h:= h/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#c:= algebra.select(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#select %d\n",d0);
#
function user.main():int;	# 0  (main:int)
# determine basic costs for cracking a larger table. 	# 1  ($2:str)
    b := bbp.new(:int,:int);	# 2 CMDBATnew (b:bat[:int,:int])<-($4:int)($4:int)
    l := 0;	# 3  (l:int)<-($6:int)
barrier (v,i):= mal.newRange(0);	# 4 RNGnewRange_int (v:bit)(i:int)<-($6:int) jump 9
    k := mmath.rand();	# 5 MATHrandint (k:int)
    l := calc.int(k);	# 6 CALCint2int (l:int)<-(k:int)
    bat.insert(b,l,l);	# 7 BKCinsert_bun ($10:bat[:int,:int])<-(b:bat[:int,:int])(l:int)(l:int)
    redo (v,i):= mal.nextElement(1:int,1000000:int);	# 8 RNGnextElement_int (v:bit)(i:int)<-($11:int)($12:int) jump 5
exit (v,i);	# 9  (v:bit)(i:int)
#setReadMode(b); 	# 10  ($15:str)
    mx := algebra.max(b);	# 11 ALGmax_int (mx:int)<-(b:bat[:int,:int])
    io.printf("max %d",mx);	# 12 IOprint_formatted_int ($16:int)<-($17:str)(mx:int)
    mi := algebra.min(b);	# 13 ALGmin_int (mi:int)<-(b:bat[:int,:int])
    io.printf(" min %d\n",mi);	# 14 IOprint_formatted_int ($19:int)<-($20:str)(mi:int)
    t0 := alarm.usec();	# 15 ALARMusec (t0:lng)
    c := algebra.copy(b);	# 16 ALGcopy (c:bat[:int,:int])<-(b:bat[:int,:int])
    t1 := alarm.usec();	# 17 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 18 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#copy %d\n",d0);	# 19 IOprint_formatted_lng ($25:int)<-($26:str)(d0:lng)
    t0 := alarm.usec();	# 20 ALARMusec (t0:lng)
    crackers.new(b);	# 21 CRKnew ($27:void)<-(b:bat[:int,:int])
    t1 := alarm.usec();	# 22 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 23 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack init %d\n",d0);	# 24 IOprint_formatted_lng ($28:int)<-($29:str)(d0:lng)
#print(vrng); 	# 25  ($31:str)
    l := calc.*(mi,2);	# 26 CALCbinaryMULintint (l:int)<-(mi:int)($32:int)
    h := calc./(mx,2);	# 27 CALCbinarycheckDIVintint (h:int)<-(mx:int)($32:int)
#printf("select %d ",l); 	# 28  ($35:str)
#printf("%d\n",h); 	# 29  ($37:str)
    t0 := alarm.usec();	# 30 ALARMusec (t0:lng)
    crackers.crack(b,l,h);	# 31 CRKcrackRange ($38:int)<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 32 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 33 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack %d\n",d0);	# 34 IOprint_formatted_lng ($39:int)<-($40:str)(d0:lng)
    l := calc.*(l,2);	# 35 CALCbinaryMULintint (l:int)<-(l:int)($32:int)
    h := calc./(h,2);	# 36 CALCbinarycheckDIVintint (h:int)<-(h:int)($32:int)
#printf("select %d ",l); 	# 37  ($35:str)
#printf("%d\n",h); 	# 38  ($37:str)
    t0 := alarm.usec();	# 39 ALARMusec (t0:lng)
    crackers.crack(b,l,h);	# 40 CRKcrackRange ($43:int)<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 41 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 42 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack %d\n",d0);	# 43 IOprint_formatted_lng ($44:int)<-($40:str)(d0:lng)
    l := calc.*(l,2);	# 44 CALCbinaryMULintint (l:int)<-(l:int)($32:int)
    h := calc./(h,2);	# 45 CALCbinarycheckDIVintint (h:int)<-(h:int)($32:int)
#printf("select %d ",l); 	# 46  ($35:str)
#printf("%d\n",h); 	# 47  ($37:str)
    t0 := alarm.usec();	# 48 ALARMusec (t0:lng)
    crackers.crack(b,l,h);	# 49 CRKcrackRange ($47:int)<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 50 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 51 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack %d\n",d0);	# 52 IOprint_formatted_lng ($48:int)<-($40:str)(d0:lng)
    l := calc.*(l,2);	# 53 CALCbinaryMULintint (l:int)<-(l:int)($32:int)
    h := calc./(h,2);	# 54 CALCbinarycheckDIVintint (h:int)<-(h:int)($32:int)
#printf("select %d ",l); 	# 55  ($35:str)
#printf("%d\n",h); 	# 56  ($37:str)
    t0 := alarm.usec();	# 57 ALARMusec (t0:lng)
    crackers.crack(b,l,h);	# 58 CRKcrackRange ($51:int)<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 59 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 60 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack %d\n",d0);	# 61 IOprint_formatted_lng ($52:int)<-($40:str)(d0:lng)
# Compare cracker with ordinary selection 	# 62  ($54:str)
    t0 := alarm.usec();	# 63 ALARMusec (t0:lng)
    i := algebra.max(b);	# 64 ALGmax_int (i:int)<-(b:bat[:int,:int])
    t1 := alarm.usec();	# 65 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 66 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#max %d\n",d0);	# 67 IOprint_formatted_lng ($55:int)<-($56:str)(d0:lng)
    t0 := alarm.usec();	# 68 ALARMusec (t0:lng)
    i := algebra.min(b);	# 69 ALGmin_int (i:int)<-(b:bat[:int,:int])
    t1 := alarm.usec();	# 70 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 71 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#min %d\n",d0);	# 72 IOprint_formatted_lng ($57:int)<-($58:str)(d0:lng)
    l := calc.*(mi,2);	# 73 CALCbinaryMULintint (l:int)<-(mi:int)($32:int)
    h := calc./(mx,2);	# 74 CALCbinarycheckDIVintint (h:int)<-(mx:int)($32:int)
#printf("select %d ",l); 	# 75  ($35:str)
#printf("%d\n",h); 	# 76  ($37:str)
    t0 := alarm.usec();	# 77 ALARMusec (t0:lng)
    c := algebra.select(b,l,h);	# 78 ALGselect (c:bat[:int,:int])<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 79 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 80 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select %d\n",d0);	# 81 IOprint_formatted_lng ($61:int)<-($62:str)(d0:lng)
    l := calc.*(l,2);	# 82 CALCbinaryMULintint (l:int)<-(l:int)($32:int)
    h := calc./(h,2);	# 83 CALCbinarycheckDIVintint (h:int)<-(h:int)($32:int)
#printf("select %d ",l); 	# 84  ($35:str)
#printf("%d\n",h); 	# 85  ($37:str)
    t0 := alarm.usec();	# 86 ALARMusec (t0:lng)
    c := algebra.select(b,l,h);	# 87 ALGselect (c:bat[:int,:int])<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 88 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 89 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select %d\n",d0);	# 90 IOprint_formatted_lng ($65:int)<-($62:str)(d0:lng)
    l := calc.*(l,2);	# 91 CALCbinaryMULintint (l:int)<-(l:int)($66:int)
    h := calc./(h,2);	# 92 CALCbinarycheckDIVintint (h:int)<-(h:int)($66:int)
#printf("select %d ",l); 	# 93  ($68:str)
#printf("%d\n",h); 	# 94  ($70:str)
    t0 := alarm.usec();	# 95 ALARMusec (t0:lng)
    c := algebra.select(b,l,h);	# 96 ALGselect (c:bat[:int,:int])<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 97 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 98 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select %d\n",d0);	# 99 IOprint_formatted_lng ($71:int)<-($62:str)(d0:lng)
    l := calc.*(l,2);	# 100 CALCbinaryMULintint (l:int)<-(l:int)($66:int)
    h := calc./(h,2);	# 101 CALCbinarycheckDIVintint (h:int)<-(h:int)($66:int)
#printf("select %d ",l); 	# 102  ($68:str)
#printf("%d\n",h); 	# 103  ($70:str)
    t0 := alarm.usec();	# 104 ALARMusec (t0:lng)
    c := algebra.select(b,l,h);	# 105 ALGselect (c:bat[:int,:int])<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 106 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 107 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select %d\n",d0);	# 108 IOprint_formatted_lng ($74:int)<-($62:str)(d0:lng)
end main;	# 109  
max 2147480021 min 1210
#copy 40399
#crack init 11211
#crack 41294
#crack 20267
#crack 10085
#crack 5171
#max 18629
#min 19609
#select 39036
#select 30239
#select 25435
#select 23235

# 19:36:35 >  
# 19:36:35 >  Done.
# 19:36:35 >  

