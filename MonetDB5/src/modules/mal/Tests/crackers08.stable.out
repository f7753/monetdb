stdout of test 'crackers08` in directory 'src/modules/mal` itself:


# 20:35:04 >  
# 20:35:04 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=45409 --set sql_port=55183 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  crackers08.mal </dev/null
# 20:35:04 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl for further information.
## determine basic costs for cracking a larger table.
#b:= new(:int,:int);
#barrier (v,i):= newRange(0:int);
#        k:= rand();
#        l:= int(k);
#        insert(b,l,l);
#        redo (v,i):= nextElement(1:int,1000000:int);
#exit (v,i);
#
##setReadMode(b);
#mx:= max(b);
#printf("max %d",mx);
#mi:= min(b);
#printf(" min %d\n",mi);
#t0:= alarm.usec();
#c:= copy(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#copy %d\n",d0);
#
#t0:= alarm.usec();
#crackers.new(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack init %d\n",d0);
##print(vrng);
#
#l:= mi*2;
#h:= mx/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#crackers.crack(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack %d\n",d0);
#
#l:= l*2;
#h:= h/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#crackers.crack(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack %d\n",d0);
#
#l:= l*2;
#h:= h/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#crackers.crack(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack %d\n",d0);
#
#l:= l*2;
#h:= h/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#crackers.crack(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#crack %d\n",d0);
#
## Compare cracker with ordinary selection
#t0:= alarm.usec();
#i:= max(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#max %d\n",d0);
#t0:= alarm.usec();
#i:= min(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#min %d\n",d0);
#
#l:= mi*2;
#h:= mx/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#c:= select(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select %d\n",d0);
#
#l:= l*2;
#h:= h/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#c:= select(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select %d\n",d0);
#
#l:= l*2;
#h:= h/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#c:= select(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select %d\n",d0);
#
#l:= l*2;
#h:= h/2;
##printf("select %d ",l);
##printf("%d\n",h);
#t0:= alarm.usec();
#c:= select(b,l,h);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select %d\n",d0);
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(:int,:int);	# 1 CMDBATnew (b:bat[:int,:int])<-($2:int)($3:int)
barrier (v,i):= mal.newRange(0:int);	# 2 RNGnewRange_int (v:bit)(i:int)<-($6:int) jump 7
    k := mmath.rand();	# 3 MATHrandint (k:int)
    l := calc.int(k);	# 4 CALCint2int (l:int)<-(k:int)
    bat.insert(b,l,l);	# 5 BKCinsert_bun ($9:void)<-(b:bat[:int,:int])(l:int)(l:int)
    redo (v,i):= mal.nextElement(1:int,1000000:int);	# 6 RNGnextElement_int (v:bit)(i:int)<-($10:int)($11:int) jump 3
exit (v,i);	# 7  (v:bit)(i:int)
    mx := algebra.max(b);	# 8 ALGmax_int (mx:int)<-(b:bat[:int,:int])
    io.printf("max %d",mx);	# 9 IOprint_formatted_int ($13:int)<-($14:str)(mx:int)
    mi := algebra.min(b);	# 10 ALGmin_int (mi:int)<-(b:bat[:int,:int])
    io.printf(" min %d\n",mi);	# 11 IOprint_formatted_int ($16:int)<-($17:str)(mi:int)
    t0 := alarm.usec();	# 12 ALARMusec (t0:lng)
    c := algebra.copy(b);	# 13 ALGcopy (c:bat[:int,:int])<-(b:bat[:int,:int])
    t1 := alarm.usec();	# 14 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 15 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#copy %d\n",d0);	# 16 IOprint_formatted_lng ($22:int)<-($23:str)(d0:lng)
    t0 := alarm.usec();	# 17 ALARMusec (t0:lng)
    crackers.new(b);	# 18 CRKnew ($24:void)<-(b:bat[:int,:int])
    t1 := alarm.usec();	# 19 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 20 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack init %d\n",d0);	# 21 IOprint_formatted_lng ($25:int)<-($26:str)(d0:lng)
    l := calc.*(mi,2);	# 22 CALCbinaryMULintint (l:int)<-(mi:int)($27:int)
    h := calc./(mx,2);	# 23 CALCbinarycheckDIVintint (h:int)<-(mx:int)($27:int)
    t0 := alarm.usec();	# 24 ALARMusec (t0:lng)
    crackers.crack(b,l,h);	# 25 CRKcrackRange ($29:int)<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 26 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 27 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack %d\n",d0);	# 28 IOprint_formatted_lng ($30:int)<-($31:str)(d0:lng)
    l := calc.*(l,2);	# 29 CALCbinaryMULintint (l:int)<-(l:int)($27:int)
    h := calc./(h,2);	# 30 CALCbinarycheckDIVintint (h:int)<-(h:int)($27:int)
    t0 := alarm.usec();	# 31 ALARMusec (t0:lng)
    crackers.crack(b,l,h);	# 32 CRKcrackRange ($32:int)<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 33 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 34 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack %d\n",d0);	# 35 IOprint_formatted_lng ($33:int)<-($31:str)(d0:lng)
    l := calc.*(l,2);	# 36 CALCbinaryMULintint (l:int)<-(l:int)($27:int)
    h := calc./(h,2);	# 37 CALCbinarycheckDIVintint (h:int)<-(h:int)($27:int)
    t0 := alarm.usec();	# 38 ALARMusec (t0:lng)
    crackers.crack(b,l,h);	# 39 CRKcrackRange ($34:int)<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 40 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 41 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack %d\n",d0);	# 42 IOprint_formatted_lng ($35:int)<-($31:str)(d0:lng)
    l := calc.*(l,2);	# 43 CALCbinaryMULintint (l:int)<-(l:int)($27:int)
    h := calc./(h,2);	# 44 CALCbinarycheckDIVintint (h:int)<-(h:int)($27:int)
    t0 := alarm.usec();	# 45 ALARMusec (t0:lng)
    crackers.crack(b,l,h);	# 46 CRKcrackRange ($36:int)<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 47 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 48 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#crack %d\n",d0);	# 49 IOprint_formatted_lng ($37:int)<-($31:str)(d0:lng)
    t0 := alarm.usec();	# 50 ALARMusec (t0:lng)
    i := algebra.max(b);	# 51 ALGmax_int (i:int)<-(b:bat[:int,:int])
    t1 := alarm.usec();	# 52 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 53 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#max %d\n",d0);	# 54 IOprint_formatted_lng ($38:int)<-($39:str)(d0:lng)
    t0 := alarm.usec();	# 55 ALARMusec (t0:lng)
    i := algebra.min(b);	# 56 ALGmin_int (i:int)<-(b:bat[:int,:int])
    t1 := alarm.usec();	# 57 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 58 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#min %d\n",d0);	# 59 IOprint_formatted_lng ($40:int)<-($41:str)(d0:lng)
    l := calc.*(mi,2);	# 60 CALCbinaryMULintint (l:int)<-(mi:int)($27:int)
    h := calc./(mx,2);	# 61 CALCbinarycheckDIVintint (h:int)<-(mx:int)($27:int)
    t0 := alarm.usec();	# 62 ALARMusec (t0:lng)
    c := algebra.select(b,l,h);	# 63 ALGselect (c:bat[:int,:int])<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 64 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 65 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select %d\n",d0);	# 66 IOprint_formatted_lng ($42:int)<-($43:str)(d0:lng)
    l := calc.*(l,2);	# 67 CALCbinaryMULintint (l:int)<-(l:int)($27:int)
    h := calc./(h,2);	# 68 CALCbinarycheckDIVintint (h:int)<-(h:int)($27:int)
    t0 := alarm.usec();	# 69 ALARMusec (t0:lng)
    c := algebra.select(b,l,h);	# 70 ALGselect (c:bat[:int,:int])<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 71 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 72 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select %d\n",d0);	# 73 IOprint_formatted_lng ($44:int)<-($43:str)(d0:lng)
    l := calc.*(l,2);	# 74 CALCbinaryMULintint (l:int)<-(l:int)($27:int)
    h := calc./(h,2);	# 75 CALCbinarycheckDIVintint (h:int)<-(h:int)($27:int)
    t0 := alarm.usec();	# 76 ALARMusec (t0:lng)
    c := algebra.select(b,l,h);	# 77 ALGselect (c:bat[:int,:int])<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 78 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 79 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select %d\n",d0);	# 80 IOprint_formatted_lng ($45:int)<-($43:str)(d0:lng)
    l := calc.*(l,2);	# 81 CALCbinaryMULintint (l:int)<-(l:int)($27:int)
    h := calc./(h,2);	# 82 CALCbinarycheckDIVintint (h:int)<-(h:int)($27:int)
    t0 := alarm.usec();	# 83 ALARMusec (t0:lng)
    c := algebra.select(b,l,h);	# 84 ALGselect (c:bat[:int,:int])<-(b:bat[:int,:int])(l:int)(h:int)
    t1 := alarm.usec();	# 85 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 86 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select %d\n",d0);	# 87 IOprint_formatted_lng ($46:int)<-($43:str)(d0:lng)
end main;	# 88  
max 2147480021 min 1210
#copy 38382
#crack init 10566
#crack 40671
#crack 20169
#crack 10352
#crack 4799
#max 19377
#min 19168
#select 36689
#select 28998
#select 24952
#select 22975

# 22:47:38 >  
# 22:47:38 >  Done.
# 22:47:38 >  

