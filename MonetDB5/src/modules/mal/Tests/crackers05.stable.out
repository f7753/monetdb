stdout of test 'crackers05` in directory 'src/modules/mal` itself:


# 20:35:03 >  
# 20:35:03 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=45409 --set sql_port=55183 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  crackers05.mal </dev/null
# 20:35:03 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl for further information.
## Testing the cracker implementation
#b:= new(:int,:int);
#insert(b,10,100);
#insert(b,1,2);
#insert(b,6,36);
#insert(b,5,25);
#insert(b,2,4);
#insert(b,3,9);
#insert(b,7,49);
#insert(b,8,64);
#insert(b,4,16);
#insert(b,9,81);
#
#crackers.new(b);
#crackers.crack(b,9,25);
#crackers.crack(b,80,195);
#crackers.crack(b,2,2);
#
#barrier (i,view) := crackers.newIterator(b);
#	print(view);
#	redo (i,view) := crackers.hasMoreElements(b);
#exit;
#
#crackers.drop(b);
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(:int,:int);	# 1 CMDBATnew (b:bat[:int,:int])<-($2:int)($3:int)
    bat.insert(b,10,100);	# 2 BKCinsert_bun ($4:void)<-(b:bat[:int,:int])($5:int)($6:int)
    bat.insert(b,1,2);	# 3 BKCinsert_bun ($7:void)<-(b:bat[:int,:int])($8:int)($9:int)
    bat.insert(b,6,36);	# 4 BKCinsert_bun ($10:void)<-(b:bat[:int,:int])($11:int)($12:int)
    bat.insert(b,5,25);	# 5 BKCinsert_bun ($13:void)<-(b:bat[:int,:int])($14:int)($15:int)
    bat.insert(b,2,4);	# 6 BKCinsert_bun ($16:void)<-(b:bat[:int,:int])($9:int)($17:int)
    bat.insert(b,3,9);	# 7 BKCinsert_bun ($18:void)<-(b:bat[:int,:int])($19:int)($20:int)
    bat.insert(b,7,49);	# 8 BKCinsert_bun ($21:void)<-(b:bat[:int,:int])($22:int)($23:int)
    bat.insert(b,8,64);	# 9 BKCinsert_bun ($24:void)<-(b:bat[:int,:int])($25:int)($26:int)
    bat.insert(b,4,16);	# 10 BKCinsert_bun ($27:void)<-(b:bat[:int,:int])($17:int)($28:int)
    bat.insert(b,9,81);	# 11 BKCinsert_bun ($29:void)<-(b:bat[:int,:int])($20:int)($30:int)
    crackers.new(b);	# 12 CRKnew ($31:void)<-(b:bat[:int,:int])
    crackers.crack(b,9,25);	# 13 CRKcrackRange ($32:int)<-(b:bat[:int,:int])($20:int)($15:int)
    crackers.crack(b,80,195);	# 14 CRKcrackRange ($33:int)<-(b:bat[:int,:int])($34:int)($35:int)
    crackers.crack(b,2,2);	# 15 CRKcrackRange ($36:int)<-(b:bat[:int,:int])($9:int)($9:int)
barrier (i,view):= crackers.newIterator(b);	# 16 CRKnewIterator (i:lng)(view:bat[:int,:int])<-(b:bat[:int,:int]) jump 19
    io.print(view);	# 17 IOprint_val ($39:int)<-(view:bat[:int,:int])
    redo (i,view):= crackers.hasMoreElements(b);	# 18 CRKhasMoreElements (i:lng)(view:bat[:int,:int])<-(b:bat[:int,:int]) jump 17
exit i;	# 19  (i:lng)
    crackers.drop(b);	# 20 CRKdropPiece ($41:void)<-(b:bat[:int,:int])
end main;	# 21  
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 10,	  100	  ]
[ 9,	  81	  ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]

# 22:47:36 >  
# 22:47:36 >  Done.
# 22:47:36 >  

