stdout of test 'crackers05` in directory 'src/modules/mal` itself:


# 20:35:03 >  
# 20:35:03 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=45409 --set sql_port=55183 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  crackers05.mal </dev/null
# 20:35:03 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl for further information.
## Testing the cracker implementation
#b:= new(:int,:int);
#insert(b,10,100);
#insert(b,1,2);
#insert(b,6,36);
#insert(b,5,25);
#insert(b,2,4);
#insert(b,3,9);
#insert(b,7,49);
#insert(b,8,64);
#insert(b,4,16);
#insert(b,9,81);
#
#crackers.new(b);
#crackers.crack(b,9,25);
#crackers.crack(b,80,195);
#crackers.crack(b,2,2);
#
#barrier (i,view) := crackers.newIterator(b);
#	print(view);
#	redo (i,view) := crackers.hasMoreElements(b);
#exit;
#
#crackers.drop(b);
#
function user.main():int;	# 0  (main:int)
# Testing the cracker implementation 	# 1  ($2:str)
    b := bbp.new(:int,:int);	# 2 CMDBATnew (b:bat[:int,:int])<-($4:int)($4:int)
    bat.insert(b,10,100);	# 3 BKCinsert_bun ($5:bat[:int,:int])<-(b:bat[:int,:int])($6:int)($7:int)
    bat.insert(b,1,2);	# 4 BKCinsert_bun ($8:bat[:int,:int])<-(b:bat[:int,:int])($9:int)($10:int)
    bat.insert(b,6,36);	# 5 BKCinsert_bun ($11:bat[:int,:int])<-(b:bat[:int,:int])($12:int)($13:int)
    bat.insert(b,5,25);	# 6 BKCinsert_bun ($14:bat[:int,:int])<-(b:bat[:int,:int])($15:int)($16:int)
    bat.insert(b,2,4);	# 7 BKCinsert_bun ($17:bat[:int,:int])<-(b:bat[:int,:int])($10:int)($18:int)
    bat.insert(b,3,9);	# 8 BKCinsert_bun ($19:bat[:int,:int])<-(b:bat[:int,:int])($20:int)($21:int)
    bat.insert(b,7,49);	# 9 BKCinsert_bun ($22:bat[:int,:int])<-(b:bat[:int,:int])($23:int)($24:int)
    bat.insert(b,8,64);	# 10 BKCinsert_bun ($25:bat[:int,:int])<-(b:bat[:int,:int])($26:int)($27:int)
    bat.insert(b,4,16);	# 11 BKCinsert_bun ($28:bat[:int,:int])<-(b:bat[:int,:int])($18:int)($29:int)
    bat.insert(b,9,81);	# 12 BKCinsert_bun ($30:bat[:int,:int])<-(b:bat[:int,:int])($21:int)($31:int)
    crackers.new(b);	# 13 CRKnew ($32:void)<-(b:bat[:int,:int])
    crackers.crack(b,9,25);	# 14 CRKcrackRange ($33:int)<-(b:bat[:int,:int])($21:int)($16:int)
    crackers.crack(b,80,195);	# 15 CRKcrackRange ($34:int)<-(b:bat[:int,:int])($35:int)($36:int)
    crackers.crack(b,2,2);	# 16 CRKcrackRange ($37:int)<-(b:bat[:int,:int])($10:int)($10:int)
barrier (i,view):= crackers.newIterator(b);	# 17 CRKnewIterator (i:lng)(view:bat[:int,:int])<-(b:bat[:int,:int]) jump 20
    io.print(view);	# 18 IOprint_val ($40:int)<-(view:bat[:int,:int])
    redo (i,view):= crackers.hasMoreElements(b);	# 19 CRKhasMoreElements (i:lng)(view:bat[:int,:int])<-(b:bat[:int,:int]) jump 18
exit i;	# 20  (i:lng)
    crackers.drop(b);	# 21 CRKdropPiece ($42:void)<-(b:bat[:int,:int])
end main;	# 22  
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 10,	  100	  ]
[ 9,	  81	  ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]

# 22:47:36 >  
# 22:47:36 >  Done.
# 22:47:36 >  

