stdout of test 'crackers02` in directory 'src/modules/mal` itself:


# 20:35:03 >  
# 20:35:03 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=45409 --set sql_port=55183 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  crackers02.mal </dev/null
# 20:35:03 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl for further information.
## Testing the cracker implementation
#b:= new(:int,:int);
#insert(b,10,100);
#insert(b,1,2);
#insert(b,6,36);
#insert(b,5,25);
#insert(b,2,4);
#insert(b,3,9);
#insert(b,7,49);
#insert(b,8,64);
#insert(b,4,16);
#insert(b,9,81);
#print(b);
#
#crackers.new(b);
#z:= crackers.crack(b,9,25);
#print(z);
#crackers.info(b);
#print(b);
#
#y:= crackers.crack(b,80,195);
#print(z);
#crackers.info(b);
#print(b);
#
#y:= crackers.crack(b,2,2);
#print(z);
#crackers.info(b);
#print(b);
#
#y:= crackers.crack(b,20,99);
#print(z);
#crackers.info(b);
#print(b);
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(:int,:int);	# 1 CMDBATnew (b:bat[:int,:int])<-($2:int)($3:int)
    bat.insert(b,10,100);	# 2 BKCinsert_bun ($4:bat[:int,:int])<-(b:bat[:int,:int])($5:int)($6:int)
    bat.insert(b,1,2);	# 3 BKCinsert_bun ($7:bat[:int,:int])<-(b:bat[:int,:int])($8:int)($9:int)
    bat.insert(b,6,36);	# 4 BKCinsert_bun ($10:bat[:int,:int])<-(b:bat[:int,:int])($11:int)($12:int)
    bat.insert(b,5,25);	# 5 BKCinsert_bun ($13:bat[:int,:int])<-(b:bat[:int,:int])($14:int)($15:int)
    bat.insert(b,2,4);	# 6 BKCinsert_bun ($16:bat[:int,:int])<-(b:bat[:int,:int])($9:int)($17:int)
    bat.insert(b,3,9);	# 7 BKCinsert_bun ($18:bat[:int,:int])<-(b:bat[:int,:int])($19:int)($20:int)
    bat.insert(b,7,49);	# 8 BKCinsert_bun ($21:bat[:int,:int])<-(b:bat[:int,:int])($22:int)($23:int)
    bat.insert(b,8,64);	# 9 BKCinsert_bun ($24:bat[:int,:int])<-(b:bat[:int,:int])($25:int)($26:int)
    bat.insert(b,4,16);	# 10 BKCinsert_bun ($27:bat[:int,:int])<-(b:bat[:int,:int])($17:int)($28:int)
    bat.insert(b,9,81);	# 11 BKCinsert_bun ($29:bat[:int,:int])<-(b:bat[:int,:int])($20:int)($30:int)
    io.print(b);	# 12 IOprint_val ($31:int)<-(b:bat[:int,:int])
    crackers.new(b);	# 13 CRKnew ($32:void)<-(b:bat[:int,:int])
    z := crackers.crack(b,9,25);	# 14 CRKcrackRange (z:int)<-(b:bat[:int,:int])($20:int)($15:int)
    io.print(z);	# 15 IOprint_val ($34:int)<-(z:int)
    crackers.info(b);	# 16 CRKinfo ($35:void)<-(b:bat[:int,:int])
    io.print(b);	# 17 IOprint_val ($36:int)<-(b:bat[:int,:int])
    y := crackers.crack(b,80,195);	# 18 CRKcrackRange (y:int)<-(b:bat[:int,:int])($38:int)($39:int)
    io.print(z);	# 19 IOprint_val ($40:int)<-(z:int)
    crackers.info(b);	# 20 CRKinfo ($41:void)<-(b:bat[:int,:int])
    io.print(b);	# 21 IOprint_val ($42:int)<-(b:bat[:int,:int])
    y := crackers.crack(b,2,2);	# 22 CRKcrackRange (y:int)<-(b:bat[:int,:int])($43:int)($43:int)
    io.print(z);	# 23 IOprint_val ($44:int)<-(z:int)
    crackers.info(b);	# 24 CRKinfo ($45:void)<-(b:bat[:int,:int])
    io.print(b);	# 25 IOprint_val ($46:int)<-(b:bat[:int,:int])
    y := crackers.crack(b,20,99);	# 26 CRKcrackRange (y:int)<-(b:bat[:int,:int])($47:int)($48:int)
    io.print(z);	# 27 IOprint_val ($49:int)<-(z:int)
    crackers.info(b);	# 28 CRKinfo ($50:void)<-(b:bat[:int,:int])
    io.print(b);	# 29 IOprint_val ($51:int)<-(b:bat[:int,:int])
end main;	# 30  
#-----------------#
# h	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 10,	  100	  ]
[ 1,	  2	  ]
[ 6,	  36	  ]
[ 5,	  25	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ 9,	  81	  ]
[ 2 ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0  13, P, -1 -2147483648, 2147483647, 0, 9, 1, 2, 3 ]
 [   1  13, L, 0 -2147483648, 8, 0, 1, -1, -1, -1 ]
 [   2  13, L, 0 9, 25, 2, 4, -1, -1, -1 ]
 [   3  13, L, 0 26, 2147483647, 5, 9, -1, -1, -1 ]
 #-----------------#
# h	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 10,	  100	  ]
[ 9,	  81	  ]
[ 2 ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0  13, P, -1 -2147483648, 2147483647, 0, 9, 1, 2, 3 ]
 [   1  13, L, 0 -2147483648, 8, 0, 1, -1, -1, -1 ]
 [   2  13, L, 0 9, 25, 2, 4, -1, -1, -1 ]
 [   3  13, P, 0 26, 2147483647, 5, 9, 4, -1, 5 ]
 [   4  13, L, 3 26, 79, 5, 7, -1, -1, -1 ]
 [   5  13, L, 3 80, 2147483647, 8, 9, -1, -1, -1 ]
 #-----------------#
# h	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 10,	  100	  ]
[ 9,	  81	  ]
[ 2 ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0  13, P, -1 -2147483648, 2147483647, 0, 9, 1, 2, 3 ]
 [   1  13, P, 0 -2147483648, 8, 0, 1, 6, -1, 7 ]
 [   2  13, L, 0 9, 25, 2, 4, -1, -1, -1 ]
 [   3  13, P, 0 26, 2147483647, 5, 9, 4, -1, 5 ]
 [   4  13, L, 3 26, 79, 5, 7, -1, -1, -1 ]
 [   5  13, L, 3 80, 2147483647, 8, 9, -1, -1, -1 ]
 [   6  13, L, 1 -2147483648, 2, 0, 0, -1, -1, -1 ]
 [   7  13, L, 1 3, 8, 1, 1, -1, -1, -1 ]
 #-----------------#
# h	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 10,	  100	  ]
[ 9,	  81	  ]
[ 2 ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0  13, P, -1 -2147483648, 2147483647, 0, 9, 1, 2, 3 ]
 [   1  13, P, 0 -2147483648, 8, 0, 1, 6, -1, 7 ]
 [   2  13, P, 0 9, 25, 2, 4, 8, -1, 9 ]
 [   3  13, P, 0 26, 2147483647, 5, 9, 4, -1, 5 ]
 [   4  13, L, 3 26, 79, 5, 7, -1, -1, -1 ]
 [   5  13, P, 3 80, 2147483647, 8, 9, 10, -1, 11 ]
 [   6  13, L, 1 -2147483648, 2, 0, 0, -1, -1, -1 ]
 [   7  13, L, 1 3, 8, 1, 1, -1, -1, -1 ]
 [   8  13, L, 2 9, 19, 2, 3, -1, -1, -1 ]
 [   9  13, L, 2 20, 25, 4, 4, -1, -1, -1 ]
 [  10  13, L, 5 80, 99, 8, 8, -1, -1, -1 ]
 [  11  13, L, 5 100, 2147483647, 9, 9, -1, -1, -1 ]
 #-----------------#
# h	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  81	  ]
[ 10,	  100	  ]

# 22:47:35 >  
# 22:47:35 >  Done.
# 22:47:35 >  

