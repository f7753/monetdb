stdout of test 'bpt01` in directory 'src/modules/mal` itself:


# 14:35:37 >  
# 14:35:37 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=44726 --set sql_port=50008 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  bpt01.mal </dev/null
# 14:35:37 >  

# Monet Database Server V4.7.1
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
##testing the BAT partition table
#include partitions;
#
#a1:= new(:void,:int);
#setSequenceBase(a1,0@0);
#a2:= new(:void,:int);
#setSequenceBase(a2,10@0);
#a3:= new(:void,:int);
#setSequenceBase(a3,20@0);
#
#barrier (go,i):= newRange(0);
#	insert(a1,nil,i);
#	insert(a2,nil,i);
#	insert(a3,nil,i);
#	redo (go,i):= nextElement(1,10);
#exit (go,i);
#
## add it
#partitions.deposit(a1);
#partitions.deposit(a1,a2);
#partitions.deposit(a1,a3);
#partitions.dump();
#
## make some errors
#partitions.deposit(a1,a1);
#
#
#



function user.main():int;	# 0  (main:int)
#testing the BAT partition table 	# 1  ($2:str)
    a1 := bbp.new(:void,:int);	# 2 CMDBATnew (a1:bat[:void,:int])<-($4:void)($5:int)
    bat.setSequenceBase(a1,0@0);	# 3 BKCsetSequenceBase ($6:bat[:void,:int])<-(a1:bat[:void,:int])($7:oid)
    a2 := bbp.new(:void,:int);	# 4 CMDBATnew (a2:bat[:void,:int])<-($9:void)($10:int)
    bat.setSequenceBase(a2,10@0);	# 5 BKCsetSequenceBase ($11:bat[:void,:int])<-(a2:bat[:void,:int])($12:oid)
    a3 := bbp.new(:void,:int);	# 6 CMDBATnew (a3:bat[:void,:int])<-($14:void)($15:int)
    bat.setSequenceBase(a3,20@0);	# 7 BKCsetSequenceBase ($16:bat[:void,:int])<-(a3:bat[:void,:int])($17:oid)
barrier (go,i):= mal.newRange(0);	# 8 RNGnewRange_int (go:bit)(i:int)<-($20:int) jump 13
    bat.insert(a1,nil,i);	# 9 BKCinsert_bun ($21:bat[:void,:int])<-(a1:bat[:void,:int])($22:void)(i:int)
    bat.insert(a2,nil,i);	# 10 BKCinsert_bun ($23:bat[:void,:int])<-(a2:bat[:void,:int])($22:void)(i:int)
    bat.insert(a3,nil,i);	# 11 BKCinsert_bun ($24:bat[:void,:int])<-(a3:bat[:void,:int])($22:void)(i:int)
    redo (go,i):= mal.nextElement(1,10);	# 12 RNGnextElement_int (go:bit)(i:int)<-($25:int)($26:int) jump 9
exit (go,i);	# 13  (go:bit)(i:int)
# add it 	# 14  ($28:str)
    partitions.deposit(a1);	# 15 BPTdeposit ($29:void)<-(a1:bat[:void,:int])
    partitions.deposit(a1,a2);	# 16 BPTdeposit2 ($30:void)<-(a1:bat[:void,:int])(a2:bat[:void,:int])
    partitions.deposit(a1,a3);	# 17 BPTdeposit2 ($31:void)<-(a1:bat[:void,:int])(a3:bat[:void,:int])
    partitions.dump();	# 18 BPTdump ($32:void)
# make some errors 	# 19  ($34:str)
    partitions.deposit(a1,a1);	# 20 BPTdeposit2 ($35:void)<-(a1:bat[:void,:int])(a1:bat[:void,:int])
end main;	# 21  
ptop=3 plimit=1024
[0] bid=13 pid=13 f=0, l=10 prv=-1 nxt=1 cap=-1
[1] bid=13 pid=14 f=10, l=20 prv=0 nxt=2 cap=-1
[2] bid=13 pid=15 f=20, l=30 prv=1 nxt=-1 cap=-1
!ERROR: MALexception:partitions.deposit:Partition already known
#

# 14:35:37 >  
# 14:35:37 >  Done.
# 14:35:37 >  

