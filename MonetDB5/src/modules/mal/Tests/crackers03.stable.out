stdout of test 'crackers03` in directory 'src/modules/mal` itself:


# 20:35:03 >  
# 20:35:03 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=45409 --set sql_port=55183 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  crackers03.mal </dev/null
# 20:35:03 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl for further information.
## Testing the cracker implementation
#b:= new(:int,:int);
#insert(b,10,100);
#insert(b,1,2);
#insert(b,6,36);
#insert(b,5,25);
#insert(b,2,4);
#insert(b,3,9);
#insert(b,7,49);
#insert(b,8,64);
#insert(b,4,16);
#insert(b,9,81);
#
#crackers.new(b);
#crackers.crack(b,9,25);
##y:= crackers.crack(b,80,195);
##y:= crackers.crack(b,2,2);
##y:= crackers.crack(b,20,99);
#print(b);
#crackers.info(b);
#
## testing creation of the portions
#print("Get the first piece");
#(i,view):= crackers.newIterator(b);
#print(view);
#print(i);
#(i,view) := crackers.hasMoreElements(b);
#print(view);
#print(i);
#(i,view) := crackers.hasMoreElements(b);
#print(view);
#print(i);
##next one doesn;t exist anymore
##i:= crackers.nextPiece(b,cidx,view,i);
##print(view);
#crackers.drop(b);
#
function Admin.main():int;	# 0  (main:int)
    b := bbp.new(:int,:int);	# 1 CMDBATnew (b:bat[:int,:int])<-($2:int)($3:int)
    bat.insert(b,10,100);	# 2 BKCinsert_bun ($4:void)<-(b:bat[:int,:int])($5:int)($6:int)
    bat.insert(b,1,2);	# 3 BKCinsert_bun ($7:void)<-(b:bat[:int,:int])($8:int)($9:int)
    bat.insert(b,6,36);	# 4 BKCinsert_bun ($10:void)<-(b:bat[:int,:int])($11:int)($12:int)
    bat.insert(b,5,25);	# 5 BKCinsert_bun ($13:void)<-(b:bat[:int,:int])($14:int)($15:int)
    bat.insert(b,2,4);	# 6 BKCinsert_bun ($16:void)<-(b:bat[:int,:int])($9:int)($17:int)
    bat.insert(b,3,9);	# 7 BKCinsert_bun ($18:void)<-(b:bat[:int,:int])($19:int)($20:int)
    bat.insert(b,7,49);	# 8 BKCinsert_bun ($21:void)<-(b:bat[:int,:int])($22:int)($23:int)
    bat.insert(b,8,64);	# 9 BKCinsert_bun ($24:void)<-(b:bat[:int,:int])($25:int)($26:int)
    bat.insert(b,4,16);	# 10 BKCinsert_bun ($27:void)<-(b:bat[:int,:int])($17:int)($28:int)
    bat.insert(b,9,81);	# 11 BKCinsert_bun ($29:void)<-(b:bat[:int,:int])($20:int)($30:int)
    crackers.new(b);	# 12 CRKnew ($31:void)<-(b:bat[:int,:int])
    crackers.crack(b,9,25);	# 13 CRKcrackRange ($32:int)<-(b:bat[:int,:int])($20:int)($15:int)
    io.print(b);	# 14 IOprint_val ($33:int)<-(b:bat[:int,:int])
    crackers.info(b);	# 15 CRKinfo ($34:void)<-(b:bat[:int,:int])
    io.print("Get the first piece");	# 16 IOprint_val ($35:int)<-($36:str)
    (i,view):= crackers.newIterator(b);	# 17 CRKnewIterator (i:lng)(view:bat[:int,:int])<-(b:bat[:int,:int])
    io.print(view);	# 18 IOprint_val ($39:int)<-(view:bat[:int,:int])
    io.print(i);	# 19 IOprint_val ($40:int)<-(i:lng)
    (i,view):= crackers.hasMoreElements(b);	# 20 CRKhasMoreElements (i:lng)(view:bat[:int,:int])<-(b:bat[:int,:int])
    io.print(view);	# 21 IOprint_val ($41:int)<-(view:bat[:int,:int])
    io.print(i);	# 22 IOprint_val ($42:int)<-(i:lng)
    (i,view):= crackers.hasMoreElements(b);	# 23 CRKhasMoreElements (i:lng)(view:bat[:int,:int])<-(b:bat[:int,:int])
    io.print(view);	# 24 IOprint_val ($43:int)<-(view:bat[:int,:int])
    io.print(i);	# 25 IOprint_val ($44:int)<-(i:lng)
    crackers.drop(b);	# 26 CRKdropPiece ($45:void)<-(b:bat[:int,:int])
end main;	# 27  
#-----------------#
# h	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 10,	  100	  ]
[ 9,	  81	  ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0   4, P, -1 -2147483648, 2147483647, 1, 10, 1, 2, 3 ]
 [   1   4, L, 0 -2147483648, 8, 1, 2, -1, -1, -1 ]
 [   2   4, L, 0 9, 25, 3, 5, -1, -1, -1 ]
 [   3   4, L, 0 26, 2147483647, 6, 10, -1, -1, -1 ]
 [ "Get the first piece" ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 2 ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
[ 3 ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 10,	  100	  ]
[ 9,	  81	  ]
[ 4 ]
>
# 20:35:03 >  
# 20:35:03 >  Done.
# 20:35:03 >  

