stdout of test 'inspect05` in directory 'src/modules/mal` itself:


# 20:27:04 >  
# 20:27:04 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=41729 --set sql_port=54220 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  inspect05.mal </dev/null
# 20:27:04 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl for further information.
##Illustrate the modules loaded after start
#m:= inspect.getModules();
#print(m);
#
#printf("Patterns\n");
#p:= inspect.getPatterns();
#print(p);
#
#printf("Commands\n");
#p:= inspect.getCommands();
#print(p);
#
#printf("Functions\n");
#p:= inspect.getFunctions();
#print(p);
#
function Admin.main():int;	# 0  (main:int)
    nme := inspect.getModuleNames();	# 1 INSPECTmoduleNames (nme:bat[:void,:str])
    io.print(nme);	# 2 IOprint_val ($2:int)<-(nme:bat[:void,:str])
    io.printf("Patterns\n");	# 3 IOprint_str ($3:int)<-($4:str)
    p := inspect.getPatternNames();	# 4 INSPECTpatternNames (p:bat[:str,:str])
    io.print(p);	# 5 IOprint_val ($6:int)<-(p:bat[:str,:str])
    io.printf("Commands\n");	# 6 IOprint_str ($7:int)<-($8:str)
    p := inspect.getCommandNames();	# 7 INSPECTcommandNames (p:bat[:str,:str])
    io.print(p);	# 8 IOprint_val ($9:int)<-(p:bat[:str,:str])
    io.printf("Functions\n");	# 9 IOprint_str ($10:int)<-($11:str)
    p := inspect.getFunctionNames();	# 10 INSPECTfunctionNames (p:bat[:str,:str])
    io.print(p);	# 11 IOprint_val ($12:int)<-(p:bat[:str,:str])
    k := inspect.getKind();	# 12 INSPECTgetkind (k:bat[:void,:str])
    m := inspect.getModule();	# 13 INSPECTgetmodule (m:bat[:void,:str])
    f := inspect.getFunction();	# 14 INSPECTgetfunction (f:bat[:void,:str])
    s := inspect.getSignature();	# 15 INSPECTgetsignature (s:bat[:void,:str])
    io.print(k,m,f,s);	# 16 IOtable ($17:int)<-(k:bat[:void,:str])(m:bat[:void,:str])(f:bat[:void,:str])(s:bat[:void,:str])
end main;	# 17  
#---------------------------------#
# view	scope			  # name
# void	str			  # type
#---------------------------------#
[ nil,	  "Admin"		  ]
[ nil,	  "mil_sys_procs"	  ]
[ nil,	  "mil_algebra_procs"	  ]
[ nil,	  "transaction"		  ]
[ nil,	  "chopper"		  ]
[ nil,	  "optimizer"		  ]
[ nil,	  "inspect"		  ]
[ nil,	  "box"			  ]
[ nil,	  "bbp"			  ]
[ nil,	  "mil"			  ]
[ nil,	  "const"		  ]
[ nil,	  "profiler"		  ]
[ nil,	  "mal"			  ]
[ nil,	  "multiplex"		  ]
[ nil,	  "factory"		  ]
[ nil,	  "enum"		  ]
[ nil,	  "io"			  ]
[ nil,	  "tablet"		  ]
[ nil,	  "stream"		  ]
[ nil,	  "clients"		  ]
[ nil,	  "mapi"		  ]
[ nil,	  "aggrX3"		  ]
[ nil,	  "group"		  ]
[ nil,	  "status"		  ]
[ nil,	  "batcalc"		  ]
[ nil,	  "calc"		  ]
[ nil,	  "algebra"		  ]
[ nil,	  "bat"			  ]
[ nil,	  "date"		  ]
[ nil,	  "daytime"		  ]
[ nil,	  "timestamp"		  ]
[ nil,	  "tzone"		  ]
[ nil,	  "rule"		  ]
[ nil,	  "mtime"		  ]
[ nil,	  "url"			  ]
[ nil,	  "str"			  ]
[ nil,	  "blob"		  ]
[ nil,	  "mmath"		  ]
[ nil,	  "alarm"		  ]
[ nil,	  "lock"		  ]
[ nil,	  "sema"		  ]
[ nil,	  "unix"		  ]
[ nil,	  "mdb"			  ]
[ nil,	  "crackers"		  ]
[ nil,	  "thread"		  ]
Patterns
#-----------------------------------------#
# view		symbol			  # name
# str		str			  # type
#-----------------------------------------#
[ "transaction",  "abort"		  ]
[ "transaction",  "clean"		  ]
[ "transaction",  "commit"		  ]
[ "chopper",	  "getTail"		  ]
[ "chopper",	  "getHead"		  ]
[ "chopper",	  "hasMoreElements"	  ]
[ "chopper",	  "newIterator"		  ]
[ "optimizer",	  "ARoptimizer"		  ]
[ "optimizer",	  "ARoptimizer"		  ]
[ "optimizer",	  "CXoptimizer"		  ]
[ "optimizer",	  "CXoptimizer"		  ]
[ "optimizer",	  "DCoptimizer"		  ]
[ "optimizer",	  "DCoptimizer"		  ]
[ "optimizer",	  "MCoptimizer"		  ]
[ "optimizer",	  "MCoptimizer"		  ]
[ "optimizer",	  "MCoptimizer"		  ]
[ "optimizer",	  "MEoptimizer"		  ]
[ "optimizer",	  "MEoptimizer"		  ]
[ "optimizer",	  "MEoptimizer"		  ]
[ "optimizer",	  "RRoptimizer"		  ]
[ "optimizer",	  "RRoptimizer"		  ]
[ "optimizer",	  "SPoptimizer"		  ]
[ "optimizer",	  "SPoptimizer"		  ]
[ "optimizer",	  "debugOptimizers"	  ]
[ "optimizer",	  "showFlowGraph"	  ]
[ "inspect",	  "getType"		  ]
[ "box",	  "close"		  ]
[ "box",	  "discard"		  ]
[ "box",	  "deposit"		  ]
[ "box",	  "destroy"		  ]
[ "box",	  "iterator"		  ]
[ "box",	  "open"		  ]
[ "box",	  "release"		  ]
[ "box",	  "releaseAll"		  ]
[ "box",	  "toString"		  ]
[ "box",	  "take"		  ]
[ "bbp",	  "bind"		  ]
[ "bbp",	  "bind"		  ]
[ "bbp",	  "discard"		  ]
[ "bbp",	  "destroy"		  ]
[ "bbp",	  "destroy"		  ]
[ "bbp",	  "deposit"		  ]
[ "bbp",	  "getObjects"		  ]
[ "bbp",	  "iterator"		  ]
[ "bbp",	  "new"			  ]
[ "bbp",	  "new"			  ]
[ "bbp",	  "new"			  ]
[ "bbp",	  "new"			  ]
[ "bbp",	  "new"			  ]
[ "bbp",	  "new"			  ]
[ "bbp",	  "new"			  ]
[ "bbp",	  "new"			  ]
[ "bbp",	  "project"		  ]
[ "bbp",	  "project"		  ]
[ "bbp",	  "prelude"		  ]
[ "bbp",	  "release"		  ]
[ "bbp",	  "release"		  ]
[ "bbp",	  "releaseAll"		  ]
[ "bbp",	  "toString"		  ]
[ "bbp",	  "take"		  ]
[ "mil",	  "close"		  ]
[ "mil",	  "discard"		  ]
[ "mil",	  "deposit"		  ]
[ "mil",	  "destroy"		  ]
[ "mil",	  "hasMoreElements"	  ]
[ "mil",	  "iterator"		  ]
[ "mil",	  "line"		  ]
[ "mil",	  "open"		  ]
[ "mil",	  "prelude"		  ]
[ "mil",	  "release"		  ]
[ "mil",	  "releaseAll"		  ]
[ "mil",	  "toString"		  ]
[ "mil",	  "take"		  ]
[ "const",	  "close"		  ]
[ "const",	  "discard"		  ]
[ "const",	  "deposit"		  ]
[ "const",	  "destroy"		  ]
[ "const",	  "hasMoreElements"	  ]
[ "const",	  "newIterator"		  ]
[ "const",	  "open"		  ]
[ "const",	  "prelude"		  ]
[ "const",	  "release"		  ]
[ "const",	  "release"		  ]
[ "const",	  "releaseAll"		  ]
[ "const",	  "toString"		  ]
[ "const",	  "take"		  ]
[ "mal",	  "Mcc"			  ]
[ "mal",	  "call"		  ]
[ "multiplex",	  "script"		  ]
[ "multiplex",	  "tactics"		  ]
[ "enum",	  "create"		  ]
[ "enum",	  "decode"		  ]
[ "enum",	  "decode"		  ]
[ "enum",	  "destroy"		  ]
[ "enum",	  "encode"		  ]
[ "enum",	  "encode"		  ]
[ "enum",	  "getTable"		  ]
[ "enum",	  "isHistogram"		  ]
[ "enum",	  "lower"		  ]
[ "enum",	  "loadEncoding"	  ]
[ "enum",	  "setHistogram"	  ]
[ "enum",	  "upper"		  ]
[ "io",		  "ftable"		  ]
[ "io",		  "ftable"		  ]
[ "io",		  "printft"		  ]
[ "io",		  "prompt"		  ]
[ "io",		  "print"		  ]
[ "io",		  "print"		  ]
[ "io",		  "print"		  ]
[ "io",		  "table"		  ]
[ "io",		  "table"		  ]
[ "tablet",	  "dump"		  ]
[ "tablet",	  "display"		  ]
[ "tablet",	  "display"		  ]
[ "tablet",	  "header"		  ]
[ "tablet",	  "page"		  ]
[ "tablet",	  "setColumn"		  ]
[ "tablet",	  "setFormat"		  ]
[ "optimizer",	  "joinPath"		  ]
[ "mdb",	  "clearBreakpoints"	  ]
[ "mdb",	  "getDefinition"	  ]
[ "mdb",	  "getStackTrace"	  ]
[ "mdb",	  "getStackFrame"	  ]
[ "mdb",	  "getStackFrame"	  ]
[ "mdb",	  "getStackDepth"	  ]
[ "mdb",	  "mdb"			  ]
[ "mdb",	  "mdb"			  ]
[ "mdb",	  "showFunction"	  ]
[ "mdb",	  "showFunction"	  ]
[ "mdb",	  "setTimer"		  ]
[ "mdb",	  "setBreakpoint"	  ]
[ "mdb",	  "setTrace"		  ]
[ "mdb",	  "setTrace"		  ]
[ "thread",	  "exec"		  ]
[ "thread",	  "isDead"		  ]
[ "thread",	  "kill"		  ]
[ "thread",	  "suspend"		  ]
[ "thread",	  "terminate"		  ]
[ "thread",	  "wait"		  ]
[ "thread",	  "wait"		  ]
Commands
#-------------------------------------------------#
# view		symbol				  # name
# str		str				  # type
#-------------------------------------------------#
[ "transaction",  "alpha"			  ]
[ "transaction",  "abort"			  ]
[ "transaction",  "commit"			  ]
[ "transaction",  "delta"			  ]
[ "transaction",  "sync"			  ]
[ "chopper",	  "hasMoreChunks"		  ]
[ "chopper",	  "newChunkIterator"		  ]
[ "inspect",	  "getAtomSizes"		  ]
[ "inspect",	  "getAtomSuperNames"		  ]
[ "inspect",	  "getAtomNames"		  ]
[ "inspect",	  "getTypeName"			  ]
[ "inspect",	  "getSignature"		  ]
[ "inspect",	  "getSignature"	  ]
[ "inspect",	  "getFunction"		  ]
[ "inspect",	  "getModule"		  ]
[ "inspect",	  "getKind"		  ]
[ "inspect",	  "getDefinition"		  ]
[ "inspect",	  "getFactoryNames"		  ]
[ "inspect",	  "getFunctionNames"		  ]
[ "inspect",	  "getCommandNames"		  ]
[ "inspect",	  "getPatternNames"		  ]
[ "inspect",	  "getModuleNames"		  ]
[ "inspect",	  "help"			  ]
[ "inspect",	  "help"			  ]
[ "inspect",	  "manual"			  ]
[ "inspect",	  "manual"			  ]
[ "inspect",	  "manual"			  ]
[ "inspect",	  "manual"			  ]
[ "box",	  "getBoxNames"			  ]
[ "bbp",	  "bind"			  ]
[ "bbp",	  "close"			  ]
[ "bbp",	  "destroy"			  ]
[ "bbp",	  "getLRefCount"		  ]
[ "bbp",	  "getRefCount"			  ]
[ "bbp",	  "getKind"			  ]
[ "bbp",	  "getStatus"			  ]
[ "bbp",	  "getDirty"			  ]
[ "bbp",	  "getHeat"			  ]
[ "bbp",	  "getLocation"			  ]
[ "bbp",	  "getLRefCount"		  ]
[ "bbp",	  "getRefCount"			  ]
[ "bbp",	  "getCount"			  ]
[ "bbp",	  "getName"			  ]
[ "bbp",	  "getRNames"			  ]
[ "bbp",	  "getNames"			  ]
[ "bbp",	  "getTailType"			  ]
[ "bbp",	  "getHeadType"			  ]
[ "bbp",	  "open"			  ]
[ "bbp",	  "project"			  ]
[ "profiler",	  "activate"			  ]
[ "profiler",	  "clrFilter"			  ]
[ "profiler",	  "closeStream"			  ]
[ "profiler",	  "deactivate"			  ]
[ "profiler",	  "getTime"			  ]
[ "profiler",	  "getCnt"			  ]
[ "profiler",	  "openStream"			  ]
[ "profiler",	  "openStream"			  ]
[ "profiler",	  "stop"			  ]
[ "profiler",	  "start"			  ]
[ "profiler",	  "setEndPoint"			  ]
[ "profiler",	  "setStartPoint"		  ]
[ "profiler",	  "setFilter"			  ]
[ "profiler",	  "setNone"			  ]
[ "profiler",	  "setAll"			  ]
[ "mal",	  "call"			  ]
[ "mal",	  "nextElement"			  ]
[ "mal",	  "nextElement"			  ]
[ "mal",	  "nextElement"			  ]
[ "mal",	  "nextElement"			  ]
[ "mal",	  "nextElement"			  ]
[ "mal",	  "nextElement"			  ]
[ "mal",	  "newRange"			  ]
[ "mal",	  "newRange"			  ]
[ "mal",	  "newRange"			  ]
[ "mal",	  "newRange"			  ]
[ "mal",	  "newRange"			  ]
[ "mal",	  "newRange"			  ]
[ "mal",	  "raise"			  ]
[ "mal",	  "source"			  ]
[ "factory",	  "getLocations"		  ]
[ "factory",	  "getTimeStampOut"		  ]
[ "factory",	  "getTimeStampIn"		  ]
[ "factory",	  "getOwners"			  ]
[ "factory",	  "getCaller"			  ]
[ "factory",	  "getPlants"			  ]
[ "factory",	  "shutdown"			  ]
[ "factory",	  "setLocation"			  ]
[ "enum",	  "isEnum"			  ]
[ "io",		  "export"			  ]
[ "io",		  "import"			  ]
[ "io",		  "printf"			  ]
[ "io",		  "printf"			  ]
[ "io",		  "printf"			  ]
[ "io",		  "printf"			  ]
[ "io",		  "printf"			  ]
[ "io",		  "printf"			  ]
[ "io",		  "printf"			  ]
[ "io",		  "printf"			  ]
[ "io",		  "printf"			  ]
[ "io",		  "printf"			  ]
[ "tablet",	  "dump"			  ]
[ "tablet",	  "firstPage"			  ]
[ "tablet",	  "finish"			  ]
[ "tablet",	  "getPage"			  ]
[ "tablet",	  "getPageCnt"			  ]
[ "tablet",	  "input"			  ]
[ "tablet",	  "lastPage"			  ]
[ "tablet",	  "load"			  ]
[ "tablet",	  "nextPage"			  ]
[ "tablet",	  "output"			  ]
[ "tablet",	  "prevPage"			  ]
[ "tablet",	  "setColumnDecimal"		  ]
[ "tablet",	  "setColumnPosition"		  ]
[ "tablet",	  "setColumnWidth"		  ]
[ "tablet",	  "setColumnNull"		  ]
[ "tablet",	  "setColumnBracket"		  ]
[ "tablet",	  "setColumnName"		  ]
[ "tablet",	  "setRowBracket"		  ]
[ "tablet",	  "setTableBracket"		  ]
[ "tablet",	  "setDelimiter"		  ]
[ "tablet",	  "setPivot"			  ]
[ "tablet",	  "setStream"			  ]
[ "tablet",	  "setProperties"		  ]
[ "stream",	  "blocked"			  ]
[ "stream",	  "close"			  ]
[ "stream",	  "flush"			  ]
[ "stream",	  "openWrite"			  ]
[ "stream",	  "openRead"			  ]
[ "stream",	  "openWriteBytes"		  ]
[ "stream",	  "openReadBytes"		  ]
[ "stream",	  "readInt"			  ]
[ "stream",	  "readStr"			  ]
[ "stream",	  "socketWrite"			  ]
[ "stream",	  "socketRead"			  ]
[ "stream",	  "socketWriteBytes"		  ]
[ "stream",	  "socketReadBytes"		  ]
[ "stream",	  "writeInt"			  ]
[ "stream",	  "writeStr"			  ]
[ "clients",	  "clearDebug"			  ]
[ "clients",	  "getScenario"			  ]
[ "clients",	  "getInfo"			  ]
[ "clients",	  "getId"			  ]
[ "clients",	  "getLogins"			  ]
[ "clients",	  "getUsers"			  ]
[ "clients",	  "quit"			  ]
[ "clients",	  "setScenario"			  ]
[ "clients",	  "setDebug"			  ]
[ "clients",	  "setListing"			  ]
[ "mapi",	  "epilogue"			  ]
[ "mapi",	  "listen_ssl"			  ]
[ "mapi",	  "listen"			  ]
[ "mapi",	  "listen"			  ]
[ "mapi",	  "listen"			  ]
[ "mapi",	  "listen"			  ]
[ "mapi",	  "prelude"			  ]
[ "mapi",	  "resume"			  ]
[ "mapi",	  "suspend"			  ]
[ "mapi",	  "stop"			  ]
[ "mapi",	  "stop"			  ]
[ "mapi",	  "trace"			  ]
[ "mapi",	  "trace"			  ]
[ "aggrX3",	  "avg"				  ]
[ "aggrX3",	  "avg"				  ]
[ "aggrX3",	  "avg"				  ]
[ "aggrX3",	  "avg"				  ]
[ "aggrX3",	  "avg"				  ]
[ "aggrX3",	  "avg"				  ]
[ "aggrX3",	  "avg"				  ]
[ "aggrX3",	  "avg"				  ]
[ "aggrX3",	  "avg"				  ]
[ "aggrX3",	  "avg"				  ]
[ "aggrX3",	  "count"			  ]
[ "aggrX3",	  "count"			  ]
[ "aggrX3",	  "count"			  ]
[ "aggrX3",	  "max"				  ]
[ "aggrX3",	  "min"				  ]
[ "aggrX3",	  "max"				  ]
[ "aggrX3",	  "min"				  ]
[ "aggrX3",	  "prod"			  ]
[ "aggrX3",	  "prod"			  ]
[ "aggrX3",	  "prod"			  ]
[ "aggrX3",	  "prod"			  ]
[ "aggrX3",	  "prod"			  ]
[ "aggrX3",	  "size"			  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "aggrX3",	  "sum"				  ]
[ "group",	  "avg"				  ]
[ "group",	  "avg"				  ]
[ "group",	  "avg"				  ]
[ "group",	  "avg"				  ]
[ "group",	  "avg"				  ]
[ "group",	  "count"			  ]
[ "group",	  "group"			  ]
[ "group",	  "group"			  ]
[ "group",	  "group"			  ]
[ "group",	  "group"			  ]
[ "group",	  "group"			  ]
[ "group",	  "group"			  ]
[ "group",	  "max"				  ]
[ "group",	  "min"				  ]
[ "group",	  "prelude"			  ]
[ "group",	  "refine"			  ]
[ "group",	  "regroup"			  ]
[ "group",	  "size"			  ]
[ "group",	  "sum"				  ]
[ "group",	  "sum"				  ]
[ "group",	  "sum"				  ]
[ "group",	  "sum"				  ]
[ "group",	  "sum"				  ]
[ "status",	  "cpuStatistics"		  ]
[ "status",	  "gdkThread"			  ]
[ "status",	  "gdkEnv"			  ]
[ "status",	  "ioStatistics"		  ]
[ "status",	  "mem_maxsize"			  ]
[ "status",	  "mem_maxsize"			  ]
[ "status",	  "mem_cursize"			  ]
[ "status",	  "memUsage"			  ]
[ "status",	  "memMap"			  ]
[ "status",	  "memStatistics"		  ]
[ "status",	  "vm_maxsize"			  ]
[ "status",	  "vm_maxsize"			  ]
[ "status",	  "vm_cursize"			  ]
[ "status",	  "vmUsage"			  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "!="				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "%"				  ]
[ "batcalc",	  "*"				  ]
[ "batcalc",	  "*"				  ]
[ "batcalc",	  "*"				  ]
[ "batcalc",	  "*"				  ]
[ "batcalc",	  "++"				  ]
[ "batcalc",	  "++"				  ]
[ "batcalc",	  "++"				  ]
[ "batcalc",	  "++"				  ]
[ "batcalc",	  "++"				  ]
[ "batcalc",	  "++"				  ]
[ "batcalc",	  "+"				  ]
[ "batcalc",	  "+"				  ]
[ "batcalc",	  "+"				  ]
[ "batcalc",	  "+"				  ]
[ "batcalc",	  "--"				  ]
[ "batcalc",	  "-"				  ]
[ "batcalc",	  "--"				  ]
[ "batcalc",	  "-"				  ]
[ "batcalc",	  "--"				  ]
[ "batcalc",	  "-"				  ]
[ "batcalc",	  "--"				  ]
[ "batcalc",	  "-"				  ]
[ "batcalc",	  "--"				  ]
[ "batcalc",	  "-"				  ]
[ "batcalc",	  "--"				  ]
[ "batcalc",	  "-"				  ]
[ "batcalc",	  "-"				  ]
[ "batcalc",	  "-"				  ]
[ "batcalc",	  "-"				  ]
[ "batcalc",	  "-"				  ]
[ "batcalc",	  "/"				  ]
[ "batcalc",	  "/"				  ]
[ "batcalc",	  "/"				  ]
[ "batcalc",	  "/"				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<="				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "<"				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  "=="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">="				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  ">"				  ]
[ "batcalc",	  "atan2"			  ]
[ "batcalc",	  "atan"			  ]
[ "batcalc",	  "acos"			  ]
[ "batcalc",	  "asin"			  ]
[ "batcalc",	  "and"				  ]
[ "batcalc",	  "and"				  ]
[ "batcalc",	  "and"				  ]
[ "batcalc",	  "and"				  ]
[ "batcalc",	  "ceil"			  ]
[ "batcalc",	  "cosh"			  ]
[ "batcalc",	  "cos"				  ]
[ "batcalc",	  "dbl"				  ]
[ "batcalc",	  "dbl"				  ]
[ "batcalc",	  "dbl"				  ]
[ "batcalc",	  "dbl"				  ]
[ "batcalc",	  "dbl"				  ]
[ "batcalc",	  "exp"				  ]
[ "batcalc",	  "fmod"			  ]
[ "batcalc",	  "floor"			  ]
[ "batcalc",	  "fabs"			  ]
[ "batcalc",	  "flt"				  ]
[ "batcalc",	  "flt"				  ]
[ "batcalc",	  "flt"				  ]
[ "batcalc",	  "flt"				  ]
[ "batcalc",	  "flt"				  ]
[ "batcalc",	  "int"				  ]
[ "batcalc",	  "int"				  ]
[ "batcalc",	  "int"				  ]
[ "batcalc",	  "int"				  ]
[ "batcalc",	  "int"				  ]
[ "batcalc",	  "int"				  ]
[ "batcalc",	  "ifthenelse"			  ]
[ "batcalc",	  "ifthen"			  ]
[ "batcalc",	  "ifthenelse"			  ]
[ "batcalc",	  "ifthen"			  ]
[ "batcalc",	  "ifthenelse"			  ]
[ "batcalc",	  "ifthen"			  ]
[ "batcalc",	  "ifthenelse"			  ]
[ "batcalc",	  "ifthen"			  ]
[ "batcalc",	  "ifthenelse"			  ]
[ "batcalc",	  "ifthen"			  ]
[ "batcalc",	  "ifthenelse"			  ]
[ "batcalc",	  "ifthen"			  ]
[ "batcalc",	  "ifthenelse"			  ]
[ "batcalc",	  "ifthen"			  ]
[ "batcalc",	  "ifthenelse"			  ]
[ "batcalc",	  "ifthen"			  ]
[ "batcalc",	  "ifthenelse"			  ]
[ "batcalc",	  "ifthen"			  ]
[ "batcalc",	  "ifthenelse"			  ]
[ "batcalc",	  "ifthen"			  ]
[ "batcalc",	  "ifthenelse"			  ]
[ "batcalc",	  "ifthenelse"			  ]
[ "batcalc",	  "log10"			  ]
[ "batcalc",	  "log"				  ]
[ "batcalc",	  "lng"				  ]
[ "batcalc",	  "lng"				  ]
[ "batcalc",	  "lng"				  ]
[ "batcalc",	  "lng"				  ]
[ "batcalc",	  "lng"				  ]
[ "batcalc",	  "match"			  ]
[ "batcalc",	  "not"				  ]
[ "batcalc",	  "not"				  ]
[ "batcalc",	  "oid"				  ]
[ "batcalc",	  "oid"				  ]
[ "batcalc",	  "or"				  ]
[ "batcalc",	  "or"				  ]
[ "batcalc",	  "or"				  ]
[ "batcalc",	  "or"				  ]
[ "batcalc",	  "pow"				  ]
[ "batcalc",	  "sqrt"			  ]
[ "batcalc",	  "sinh"			  ]
[ "batcalc",	  "sin"				  ]
[ "batcalc",	  "sht"				  ]
[ "batcalc",	  "sht"				  ]
[ "batcalc",	  "sht"				  ]
[ "batcalc",	  "sht"				  ]
[ "batcalc",	  "sht"				  ]
[ "batcalc",	  "tanh"			  ]
[ "batcalc",	  "tan"				  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "batcalc",	  "zipper"			  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "!="				  ]
[ "calc",	  "%"				  ]
[ "calc",	  "%"				  ]
[ "calc",	  "%"				  ]
[ "calc",	  "%"				  ]
[ "calc",	  "%"				  ]
[ "calc",	  "%"				  ]
[ "calc",	  "%"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "*"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "+"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "-"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "/"				  ]
[ "calc",	  "<<"				  ]
[ "calc",	  "<<"				  ]
[ "calc",	  "<<"				  ]
[ "calc",	  "<<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "<="				  ]
[ "calc",	  "<"				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  "=="				  ]
[ "calc",	  ">>"				  ]
[ "calc",	  ">>"				  ]
[ "calc",	  ">>"				  ]
[ "calc",	  ">>"				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  ">"				  ]
[ "calc",	  ">="				  ]
[ "calc",	  "and"				  ]
[ "calc",	  "and"				  ]
[ "calc",	  "and"				  ]
[ "calc",	  "and"				  ]
[ "calc",	  "and"				  ]
[ "calc",	  "abs"				  ]
[ "calc",	  "abs"				  ]
[ "calc",	  "abs"				  ]
[ "calc",	  "abs"				  ]
[ "calc",	  "abs"				  ]
[ "calc",	  "abs"				  ]
[ "calc",	  "bat"				  ]
[ "calc",	  "bat"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "bit"				  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "between"			  ]
[ "calc",	  "chr"				  ]
[ "calc",	  "chr"				  ]
[ "calc",	  "chr"				  ]
[ "calc",	  "chr"				  ]
[ "calc",	  "chr"				  ]
[ "calc",	  "chr"				  ]
[ "calc",	  "chr"				  ]
[ "calc",	  "chr"				  ]
[ "calc",	  "chr"				  ]
[ "calc",	  "chr"				  ]
[ "calc",	  "chr"				  ]
[ "calc",	  "chr"				  ]
[ "calc",	  "chr"				  ]
[ "calc",	  "dbl"				  ]
[ "calc",	  "dbl"				  ]
[ "calc",	  "dbl"				  ]
[ "calc",	  "dbl"				  ]
[ "calc",	  "dbl"				  ]
[ "calc",	  "dbl"				  ]
[ "calc",	  "dbl"				  ]
[ "calc",	  "flt"				  ]
[ "calc",	  "flt"				  ]
[ "calc",	  "flt"				  ]
[ "calc",	  "flt"				  ]
[ "calc",	  "flt"				  ]
[ "calc",	  "flt"				  ]
[ "calc",	  "flt"				  ]
[ "calc",	  "int"				  ]
[ "calc",	  "int"				  ]
[ "calc",	  "ifthenelse"			  ]
[ "calc",	  "int"				  ]
[ "calc",	  "int"				  ]
[ "calc",	  "int"				  ]
[ "calc",	  "int"				  ]
[ "calc",	  "int"				  ]
[ "calc",	  "int"				  ]
[ "calc",	  "int"				  ]
[ "calc",	  "inv"				  ]
[ "calc",	  "inv"				  ]
[ "calc",	  "inv"				  ]
[ "calc",	  "inv"				  ]
[ "calc",	  "inv"				  ]
[ "calc",	  "inv"				  ]
[ "calc",	  "isnotnil"			  ]
[ "calc",	  "isnil"			  ]
[ "calc",	  "isnotnil"			  ]
[ "calc",	  "isnil"			  ]
[ "calc",	  "isnotnil"			  ]
[ "calc",	  "isnil"			  ]
[ "calc",	  "isnotnil"			  ]
[ "calc",	  "isnil"			  ]
[ "calc",	  "isnotnil"			  ]
[ "calc",	  "isnil"			  ]
[ "calc",	  "isnotnil"			  ]
[ "calc",	  "isnil"			  ]
[ "calc",	  "isnotnil"			  ]
[ "calc",	  "isnil"			  ]
[ "calc",	  "isnotnil"			  ]
[ "calc",	  "isnil"			  ]
[ "calc",	  "isnotnil"			  ]
[ "calc",	  "isnil"			  ]
[ "calc",	  "isnotnil"			  ]
[ "calc",	  "isnil"			  ]
[ "calc",	  "lng"				  ]
[ "calc",	  "lng"				  ]
[ "calc",	  "lng"				  ]
[ "calc",	  "lng"				  ]
[ "calc",	  "lng"				  ]
[ "calc",	  "lng"				  ]
[ "calc",	  "lng"				  ]
[ "calc",	  "lng"				  ]
[ "calc",	  "lng"				  ]
[ "calc",	  "min"				  ]
[ "calc",	  "max"				  ]
[ "calc",	  "min"				  ]
[ "calc",	  "max"				  ]
[ "calc",	  "min"				  ]
[ "calc",	  "max"				  ]
[ "calc",	  "min"				  ]
[ "calc",	  "max"				  ]
[ "calc",	  "min"				  ]
[ "calc",	  "max"				  ]
[ "calc",	  "min"				  ]
[ "calc",	  "max"				  ]
[ "calc",	  "min"				  ]
[ "calc",	  "max"				  ]
[ "calc",	  "newoid"			  ]
[ "calc",	  "newoid"			  ]
[ "calc",	  "newoid"			  ]
[ "calc",	  "not"				  ]
[ "calc",	  "not"				  ]
[ "calc",	  "not"				  ]
[ "calc",	  "not"				  ]
[ "calc",	  "not"				  ]
[ "calc",	  "oid"				  ]
[ "calc",	  "oid"				  ]
[ "calc",	  "or"				  ]
[ "calc",	  "or"				  ]
[ "calc",	  "or"				  ]
[ "calc",	  "or"				  ]
[ "calc",	  "or"				  ]
[ "calc",	  "oid"				  ]
[ "calc",	  "oid"				  ]
[ "calc",	  "oid"				  ]
[ "calc",	  "oid"				  ]
[ "calc",	  "ptr"				  ]
[ "calc",	  "ptr"				  ]
[ "calc",	  "ptr"				  ]
[ "calc",	  "setoid"			  ]
[ "calc",	  "setoid"			  ]
[ "calc",	  "setoid"			  ]
[ "calc",	  "setoid"			  ]
[ "calc",	  "setoid"			  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "sht"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "sht"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "str"				  ]
[ "calc",	  "sht"				  ]
[ "calc",	  "sht"				  ]
[ "calc",	  "sht"				  ]
[ "calc",	  "sht"				  ]
[ "calc",	  "sht"				  ]
[ "calc",	  "sht"				  ]
[ "calc",	  "sht"				  ]
[ "calc",	  "void"			  ]
[ "calc",	  "void"			  ]
[ "calc",	  "void"			  ]
[ "calc",	  "void"			  ]
[ "calc",	  "xor"				  ]
[ "calc",	  "xor"				  ]
[ "calc",	  "xor"				  ]
[ "calc",	  "xor"				  ]
[ "calc",	  "xor"				  ]
[ "algebra",	  "bandjoin"			  ]
[ "algebra",	  "card"			  ]
[ "algebra",	  "count_no_nil"		  ]
[ "algebra",	  "count"			  ]
[ "algebra",	  "count"			  ]
[ "algebra",	  "cross"			  ]
[ "algebra",	  "copy"			  ]
[ "algebra",	  "diff"			  ]
[ "algebra",	  "exist"			  ]
[ "algebra",	  "exist"			  ]
[ "algebra",	  "fetchjoin"			  ]
[ "algebra",	  "fragment"			  ]
[ "algebra",	  "fetch"			  ]
[ "algebra",	  "fetch"			  ]
[ "algebra",	  "fetch"			  ]
[ "algebra",	  "fetch"			  ]
[ "algebra",	  "fetch"			  ]
[ "algebra",	  "fetch"			  ]
[ "algebra",	  "find"			  ]
[ "algebra",	  "histogram"			  ]
[ "algebra",	  "hashsplit"			  ]
[ "algebra",	  "hashjoin"			  ]
[ "algebra",	  "indexjoin"			  ]
[ "algebra",	  "intersect"			  ]
[ "algebra",	  "join"			  ]
[ "algebra",	  "join"			  ]
[ "algebra",	  "join"			  ]
[ "algebra",	  "join"			  ]
[ "algebra",	  "join"			  ]
[ "algebra",	  "join"			  ]
[ "algebra",	  "kunion"			  ]
[ "algebra",	  "kdiff"			  ]
[ "algebra",	  "kintersect"			  ]
[ "algebra",	  "kunique"			  ]
[ "algebra",	  "like"			  ]
[ "algebra",	  "min"				  ]
[ "algebra",	  "min"				  ]
[ "algebra",	  "min"				  ]
[ "algebra",	  "min"				  ]
[ "algebra",	  "min"				  ]
[ "algebra",	  "max"				  ]
[ "algebra",	  "max"				  ]
[ "algebra",	  "max"				  ]
[ "algebra",	  "max"				  ]
[ "algebra",	  "max"				  ]
[ "algebra",	  "max"				  ]
[ "algebra",	  "min"				  ]
[ "algebra",	  "mark"			  ]
[ "algebra",	  "mark"			  ]
[ "algebra",	  "mark"			  ]
[ "algebra",	  "mergejoin"			  ]
[ "algebra",	  "number"			  ]
[ "algebra",	  "outerjoin"			  ]
[ "algebra",	  "outerjoin"			  ]
[ "algebra",	  "prod"			  ]
[ "algebra",	  "prod"			  ]
[ "algebra",	  "prod"			  ]
[ "algebra",	  "prod"			  ]
[ "algebra",	  "prod"			  ]
[ "algebra",	  "prod"			  ]
[ "algebra",	  "prod"			  ]
[ "algebra",	  "prod"			  ]
[ "algebra",	  "prod"			  ]
[ "algebra",	  "position"			  ]
[ "algebra",	  "position"			  ]
[ "algebra",	  "sum"				  ]
[ "algebra",	  "sum"				  ]
[ "algebra",	  "sum"				  ]
[ "algebra",	  "sum"				  ]
[ "algebra",	  "sum"				  ]
[ "algebra",	  "sum"				  ]
[ "algebra",	  "sum"				  ]
[ "algebra",	  "sum"				  ]
[ "algebra",	  "sum"				  ]
[ "algebra",	  "sunion"			  ]
[ "algebra",	  "sdiff"			  ]
[ "algebra",	  "semijoin"			  ]
[ "algebra",	  "semijoin"			  ]
[ "algebra",	  "sintersect"			  ]
[ "algebra",	  "sunique"			  ]
[ "algebra",	  "sort_reverse"		  ]
[ "algebra",	  "sort"			  ]
[ "algebra",	  "sample"			  ]
[ "algebra",	  "slice"			  ]
[ "algebra",	  "select"			  ]
[ "algebra",	  "select"			  ]
[ "algebra",	  "select"			  ]
[ "algebra",	  "theta"			  ]
[ "algebra",	  "thetajoin"			  ]
[ "algebra",	  "thetajoin"			  ]
[ "algebra",	  "tunique"			  ]
[ "algebra",	  "topN"			  ]
[ "algebra",	  "uhashsplit"			  ]
[ "algebra",	  "union"			  ]
[ "algebra",	  "unique"			  ]
[ "algebra",	  "uselect"			  ]
[ "algebra",	  "uselect"			  ]
[ "algebra",	  "uselect"			  ]
[ "bat",	  "accpresent"			  ]
[ "bat",	  "accdestroy"			  ]
[ "bat",	  "accbuild"			  ]
[ "bat",	  "accbuild"			  ]
[ "bat",	  "append"			  ]
[ "bat",	  "append"			  ]
[ "bat",	  "append"			  ]
[ "bat",	  "append"			  ]
[ "bat",	  "append"			  ]
[ "bat",	  "append"			  ]
[ "bat",	  "access"			  ]
[ "bat",	  "bat"				  ]
[ "bat",	  "bat"				  ]
[ "bat",	  "bat"				  ]
[ "bat",	  "clear"			  ]
[ "bat",	  "convert"			  ]
[ "bat",	  "deleteBuns"			  ]
[ "bat",	  "delete"			  ]
[ "bat",	  "delete"			  ]
[ "bat",	  "delete"			  ]
[ "bat",	  "delete"			  ]
[ "bat",	  "delete"			  ]
[ "bat",	  "delete"			  ]
[ "bat",	  "getName"			  ]
[ "bat",	  "getDelta"			  ]
[ "bat",	  "getAlpha"			  ]
[ "bat",	  "getBatSize"			  ]
[ "bat",	  "getBatSize"			  ]
[ "bat",	  "getSequenceBase"		  ]
[ "bat",	  "getSequenceBase"		  ]
[ "bat",	  "getAccess"			  ]
[ "bat",	  "getRole"			  ]
[ "bat",	  "getTailType"			  ]
[ "bat",	  "getHeadType"			  ]
[ "bat",	  "getCapacity"			  ]
[ "bat",	  "hasIndex"			  ]
[ "bat",	  "hasHash"			  ]
[ "bat",	  "heat"			  ]
[ "bat",	  "hasReadMode"			  ]
[ "bat",	  "hasWriteMode"		  ]
[ "bat",	  "hasAppendMode"		  ]
[ "bat",	  "isSynced"			  ]
[ "bat",	  "isCached"			  ]
[ "bat",	  "isPersistent"		  ]
[ "bat",	  "isTransient"			  ]
[ "bat",	  "insert"			  ]
[ "bat",	  "insert"			  ]
[ "bat",	  "insert"			  ]
[ "bat",	  "insert"			  ]
[ "bat",	  "insert"			  ]
[ "bat",	  "isSortedReverse"		  ]
[ "bat",	  "isSorted"			  ]
[ "bat",	  "isaSet"			  ]
[ "bat",	  "isaKey"			  ]
[ "bat",	  "info"			  ]
[ "bat",	  "load"			  ]
[ "bat",	  "madvise"			  ]
[ "bat",	  "madvise"			  ]
[ "bat",	  "mmap"			  ]
[ "bat",	  "mmap"			  ]
[ "bat",	  "mirror"			  ]
[ "bat",	  "order"			  ]
[ "bat",	  "persists"			  ]
[ "bat",	  "replace"			  ]
[ "bat",	  "replace"			  ]
[ "bat",	  "replace"			  ]
[ "bat",	  "replace"			  ]
[ "bat",	  "revert"			  ]
[ "bat",	  "reverse"			  ]
[ "bat",	  "setIndex"			  ]
[ "bat",	  "setHash"			  ]
[ "bat",	  "setHot"			  ]
[ "bat",	  "setCold"			  ]
[ "bat",	  "setCold"			  ]
[ "bat",	  "setHot"			  ]
[ "bat",	  "save"			  ]
[ "bat",	  "save"			  ]
[ "bat",	  "setPersistent"		  ]
[ "bat",	  "setTransient"		  ]
[ "bat",	  "setColumn"			  ]
[ "bat",	  "setColumn"			  ]
[ "bat",	  "setRole"			  ]
[ "bat",	  "setName"			  ]
[ "bat",	  "setSorted"			  ]
[ "bat",	  "setSequenceBase"		  ]
[ "bat",	  "setSequenceBase"		  ]
[ "bat",	  "setWriteMode"		  ]
[ "bat",	  "setReadMode"			  ]
[ "bat",	  "setAppendMode"		  ]
[ "bat",	  "setAccess"			  ]
[ "bat",	  "setSet"			  ]
[ "bat",	  "setKey"			  ]
[ "bat",	  "unload"			  ]
[ "date",	  "!="				  ]
[ "date",	  "<="				  ]
[ "date",	  "<"				  ]
[ "date",	  "="				  ]
[ "date",	  ">="				  ]
[ "date",	  ">"				  ]
[ "date",	  "#fromstr"			  ]
[ "date",	  "isnil"			  ]
[ "date",	  "#tostr"			  ]
[ "daytime",	  "!="				  ]
[ "daytime",	  "<="				  ]
[ "daytime",	  "<"				  ]
[ "daytime",	  "="				  ]
[ "daytime",	  ">="				  ]
[ "daytime",	  ">"				  ]
[ "daytime",	  "#fromstr"			  ]
[ "daytime",	  "isnil"			  ]
[ "daytime",	  "#tostr"			  ]
[ "timestamp",	  "!="				  ]
[ "timestamp",	  "<="				  ]
[ "timestamp",	  "<"				  ]
[ "timestamp",	  "="				  ]
[ "timestamp",	  ">="				  ]
[ "timestamp",	  ">"				  ]
[ "timestamp",	  "epoch"			  ]
[ "timestamp",	  "epoch"			  ]
[ "timestamp",	  "#fromstr"			  ]
[ "timestamp",	  "isnil"			  ]
[ "timestamp",	  "#tostr"			  ]
[ "timestamp",	  "unix_epoch"			  ]
[ "tzone",	  "#fromstr"			  ]
[ "tzone",	  "str"				  ]
[ "tzone",	  "timestamp"			  ]
[ "tzone",	  "#tostr"			  ]
[ "rule",	  "define"			  ]
[ "rule",	  "define"			  ]
[ "rule",	  "define"			  ]
[ "rule",	  "#fromstr"			  ]
[ "rule",	  "#tostr"			  ]
[ "mtime",	  "add"				  ]
[ "mtime",	  "adddays"			  ]
[ "mtime",	  "addmonths"			  ]
[ "mtime",	  "addyears"			  ]
[ "mtime",	  "current_time"		  ]
[ "mtime",	  "current_date"		  ]
[ "mtime",	  "current_timestamp"		  ]
[ "mtime",	  "compute"			  ]
[ "mtime",	  "daytime"			  ]
[ "mtime",	  "daytime"			  ]
[ "mtime",	  "daytime"			  ]
[ "mtime",	  "dayname"			  ]
[ "mtime",	  "daynum"			  ]
[ "mtime",	  "dst"				  ]
[ "mtime",	  "diff"			  ]
[ "mtime",	  "dayofweek"			  ]
[ "mtime",	  "dayofyear"			  ]
[ "mtime",	  "diff"			  ]
[ "mtime",	  "day"				  ]
[ "mtime",	  "date"			  ]
[ "mtime",	  "date"			  ]
[ "mtime",	  "daytime"			  ]
[ "mtime",	  "daytime"			  ]
[ "mtime",	  "day"				  ]
[ "mtime",	  "day"				  ]
[ "mtime",	  "daytime"			  ]
[ "mtime",	  "daytime"			  ]
[ "mtime",	  "date"			  ]
[ "mtime",	  "date"			  ]
[ "mtime",	  "date"			  ]
[ "mtime",	  "date_add_month_interval"	  ]
[ "mtime",	  "date_add_sec_interval"	  ]
[ "mtime",	  "date_sub_sec_interval"	  ]
[ "mtime",	  "end_dst"			  ]
[ "mtime",	  "hours"			  ]
[ "mtime",	  "hours"			  ]
[ "mtime",	  "msecs"			  ]
[ "mtime",	  "monthname"			  ]
[ "mtime",	  "monthnum"			  ]
[ "mtime",	  "minutes"			  ]
[ "mtime",	  "month"			  ]
[ "mtime",	  "minutes"			  ]
[ "mtime",	  "milliseconds"		  ]
[ "mtime",	  "milliseconds"		  ]
[ "mtime",	  "minutes"			  ]
[ "mtime",	  "minutes"			  ]
[ "mtime",	  "month"			  ]
[ "mtime",	  "month"			  ]
[ "mtime",	  "oldduration"			  ]
[ "mtime",	  "olddate"			  ]
[ "mtime",	  "prelude"			  ]
[ "mtime",	  "rule"			  ]
[ "mtime",	  "rule"			  ]
[ "mtime",	  "start_dst"			  ]
[ "mtime",	  "seconds"			  ]
[ "mtime",	  "seconds"			  ]
[ "mtime",	  "time_synonyms"		  ]
[ "mtime",	  "timezone"			  ]
[ "mtime",	  "tzone"			  ]
[ "mtime",	  "tzone"			  ]
[ "mtime",	  "tzone"			  ]
[ "mtime",	  "tzone"			  ]
[ "mtime",	  "timestamp"			  ]
[ "mtime",	  "timestamp"			  ]
[ "mtime",	  "tzone_local"			  ]
[ "mtime",	  "tzone_local"			  ]
[ "mtime",	  "weekofyear"			  ]
[ "mtime",	  "weekday"			  ]
[ "mtime",	  "year"			  ]
[ "mtime",	  "year"			  ]
[ "url",	  "#fromstr"			  ]
[ "url",	  "getRobotURL"			  ]
[ "url",	  "getUser"			  ]
[ "url",	  "getQueryArg"			  ]
[ "url",	  "getQuery"			  ]
[ "url",	  "getProtocol"			  ]
[ "url",	  "getPort"			  ]
[ "url",	  "getHost"			  ]
[ "url",	  "getFile"			  ]
[ "url",	  "getExtension"		  ]
[ "url",	  "getDomain"			  ]
[ "url",	  "getDirectory"		  ]
[ "url",	  "getContext"			  ]
[ "url",	  "getContent"			  ]
[ "url",	  "getBasename"			  ]
[ "url",	  "getAnchor"			  ]
[ "url",	  "isaURL"			  ]
[ "url",	  "newurl"			  ]
[ "url",	  "newurl"			  ]
[ "url",	  "#tostr"			  ]
[ "url",	  "url"				  ]
[ "str",	  "+"				  ]
[ "str",	  "STRprelude"			  ]
[ "str",	  "codeset"			  ]
[ "str",	  "chrAt"			  ]
[ "str",	  "endsWith"			  ]
[ "str",	  "iconv"			  ]
[ "str",	  "ltrim"			  ]
[ "str",	  "length"			  ]
[ "str",	  "match"			  ]
[ "str",	  "nbytes"			  ]
[ "str",	  "rtrim"			  ]
[ "str",	  "r_search"			  ]
[ "str",	  "r_search"			  ]
[ "str",	  "substitute"			  ]
[ "str",	  "search"			  ]
[ "str",	  "search"			  ]
[ "str",	  "startsWith"			  ]
[ "str",	  "string"			  ]
[ "str",	  "string"			  ]
[ "str",	  "str"				  ]
[ "str",	  "trim"			  ]
[ "str",	  "toUpper"			  ]
[ "str",	  "toLower"			  ]
[ "str",	  "unicode"			  ]
[ "str",	  "unicodeAt"			  ]
[ "blob",	  "#convert"			  ]
[ "blob",	  "#del"			  ]
[ "blob",	  "#fromstr"			  ]
[ "blob",	  "#heap"			  ]
[ "blob",	  "#hash"			  ]
[ "blob",	  "#length"			  ]
[ "blob",	  "nitems"			  ]
[ "blob",	  "null"			  ]
[ "blob",	  "#nequal"			  ]
[ "blob",	  "#put"			  ]
[ "blob",	  "toblob"			  ]
[ "blob",	  "tostring"			  ]
[ "blob",	  "tostring"			  ]
[ "blob",	  "#tostr"			  ]
[ "mmath",	  "atan2"			  ]
[ "mmath",	  "atan2"			  ]
[ "mmath",	  "atan"			  ]
[ "mmath",	  "atan"			  ]
[ "mmath",	  "asin"			  ]
[ "mmath",	  "asin"			  ]
[ "mmath",	  "acos"			  ]
[ "mmath",	  "acos"			  ]
[ "mmath",	  "ceil"			  ]
[ "mmath",	  "ceil"			  ]
[ "mmath",	  "cosh"			  ]
[ "mmath",	  "cosh"			  ]
[ "mmath",	  "cos"				  ]
[ "mmath",	  "cos"				  ]
[ "mmath",	  "exp"				  ]
[ "mmath",	  "exp"				  ]
[ "mmath",	  "finite"			  ]
[ "mmath",	  "fmod"			  ]
[ "mmath",	  "fmod"			  ]
[ "mmath",	  "floor"			  ]
[ "mmath",	  "floor"			  ]
[ "mmath",	  "fabs"			  ]
[ "mmath",	  "isinf"			  ]
[ "mmath",	  "isnan"			  ]
[ "mmath",	  "log10"			  ]
[ "mmath",	  "log"				  ]
[ "mmath",	  "pow"				  ]
[ "mmath",	  "pow"				  ]
[ "mmath",	  "rand"			  ]
[ "mmath",	  "round"			  ]
[ "mmath",	  "round"			  ]
[ "mmath",	  "srand"			  ]
[ "mmath",	  "sqrt"			  ]
[ "mmath",	  "sqrt"			  ]
[ "mmath",	  "sinh"			  ]
[ "mmath",	  "sinh"			  ]
[ "mmath",	  "sin"				  ]
[ "mmath",	  "sin"				  ]
[ "mmath",	  "tanh"			  ]
[ "mmath",	  "tanh"			  ]
[ "mmath",	  "tan"				  ]
[ "mmath",	  "tan"				  ]
[ "alarm",	  "alarm"			  ]
[ "alarm",	  "ctime"			  ]
[ "alarm",	  "epilogue"			  ]
[ "alarm",	  "epoch"			  ]
[ "alarm",	  "prelude"			  ]
[ "alarm",	  "sleep"			  ]
[ "alarm",	  "time"			  ]
[ "alarm",	  "timers"			  ]
[ "alarm",	  "usec"			  ]
[ "lock",	  "create"			  ]
[ "lock",	  "destroy"			  ]
[ "lock",	  "set"				  ]
[ "lock",	  "tostr"			  ]
[ "lock",	  "try"				  ]
[ "lock",	  "unset"			  ]
[ "sema",	  "create"			  ]
[ "sema",	  "destroy"			  ]
[ "sema",	  "down"			  ]
[ "sema",	  "up"				  ]
[ "unix",	  "getenv"			  ]
[ "unix",	  "setenv"			  ]
[ "mdb",	  "getExceptionContext"		  ]
[ "mdb",	  "getExceptionReason"		  ]
[ "mdb",	  "getExceptionVariable"	  ]
[ "crackers",	  "crack"			  ]
[ "crackers",	  "crack"			  ]
[ "crackers",	  "dropView"			  ]
[ "crackers",	  "drop"			  ]
[ "crackers",	  "getPiece"			  ]
[ "crackers",	  "getPiece"			  ]
[ "crackers",	  "hasMoreElements"		  ]
[ "crackers",	  "info"			  ]
[ "crackers",	  "newIterator"			  ]
[ "crackers",	  "new"				  ]
[ "crackers",	  "new"				  ]
[ "crackers",	  "select"			  ]
[ "crackers",	  "selectPieces"		  ]
Functions
#---------------------------------------------------------#
# view			symbol				  # name
# str			str				  # type
#---------------------------------------------------------#
[ "Admin",		  "main"			  ]
[ "Admin",		  "main"			  ]
[ "mil_sys_procs",	  "dir"				  ]
[ "mil_sys_procs",	  "dir"				  ]
[ "mil_sys_procs",	  "dir"				  ]
[ "mil_sys_procs",	  "ls"				  ]
[ "mil_sys_procs",	  "ls"				  ]
[ "mil_algebra_procs",	  "avg"				  ]
[ "mil_algebra_procs",	  "avg"				  ]
[ "mil_algebra_procs",	  "avg"				  ]
[ "mil_algebra_procs",	  "avg"				  ]
[ "mil_algebra_procs",	  "avg"				  ]
[ "mil_algebra_procs",	  "count_no_nil"		  ]
[ "mil_algebra_procs",	  "clear"			  ]
[ "mil_algebra_procs",	  "diff"			  ]
[ "mil_algebra_procs",	  "find_unescaped_occurrence"	  ]
[ "mil_algebra_procs",	  "intersect"			  ]
[ "mil_algebra_procs",	  "outerjoin"			  ]
[ "mil_algebra_procs",	  "project"			  ]
[ "mil_algebra_procs",	  "sort_ht"			  ]
[ "mil_algebra_procs",	  "tunique"			  ]
[ "mil_algebra_procs",	  "union"			  ]
[ "mil_algebra_procs",	  "unique"			  ]
[ "algebra",		  "betweenOO"			  ]
[ "algebra",		  "betweenOC"			  ]
[ "algebra",		  "betweenCO"			  ]
[ "algebra",		  "between"			  ]
[ "algebra",		  "likeselect"			  ]
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# view	symbol		symbol			symbol			symbol																			  # name
# oid	str		str			str			str																			  # type
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ 0@0,	  "function",	  "Admin",		  "main",		  "():int;"																		  ]
[ 1@0,	  "function",	  "Admin",		  "main",		  "():int;"																		  ]
[ 2@0,	  "function",	  "mil_sys_procs",	  "dir",		  "(substr:str):void;"																	  ]
[ 3@0,	  "function",	  "mil_sys_procs",	  "dir",		  "():void;"																		  ]
[ 4@0,	  "function",	  "mil_sys_procs",	  "dir",		  "(b:bat[:int,:str]):void;"																  ]
[ 5@0,	  "function",	  "mil_sys_procs",	  "ls",			  "(substr:str):void;"																	  ]
[ 6@0,	  "function",	  "mil_sys_procs",	  "ls",			  "():void;"																		  ]
[ 7@0,	  "function",	  "mil_algebra_procs",	  "avg",		  "(b:bat[:any,:dbl]):dbl;"																  ]
[ 8@0,	  "function",	  "mil_algebra_procs",	  "avg",		  "(b:bat[:any,:flt]):dbl;"																  ]
[ 9@0,	  "function",	  "mil_algebra_procs",	  "avg",		  "(b:bat[:any,:lng]):dbl;"																  ]
[ 10@0,	  "function",	  "mil_algebra_procs",	  "avg",		  "(b:bat[:any,:int]):dbl;"																  ]
[ 11@0,	  "function",	  "mil_algebra_procs",	  "avg",		  "(b:bat[:any,:sht]):dbl;"																  ]
[ 12@0,	  "function",	  "mil_algebra_procs",	  "count_no_nil",	  "(b:bat[:any,:any]):lng;"																  ]
[ 13@0,	  "function",	  "mil_algebra_procs",	  "clear",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2];"														  ]
[ 14@0,	  "function",	  "mil_algebra_procs",	  "diff",		  "(b1:bat[:any$1,:any$2],b2:bat[:any$1,:any$2]):bat[:any$1,:any$2];"											  ]
[ 15@0,	  "function",	  "mil_algebra_procs",	  "find_unescaped_occurrence", "(b:str,c:chr):int;"																	  ]
[ 16@0,	  "function",	  "mil_algebra_procs",	  "intersect",		  "(b1:bat[:any$1,:any$2],b2:bat[:any$1,:any$2]):bat[:any$1,:any$2];"											  ]
[ 17@0,	  "function",	  "mil_algebra_procs",	  "outerjoin",		  "(left:bat[:any$1,:any$2],right:bat[:any$2,:any$3]):bat[:any$1,:any$3];"										  ]
[ 18@0,	  "function",	  "mil_algebra_procs",	  "project",		  "(b:bat[:any$1,:any]):bat[:any$1,:void];"														  ]
[ 19@0,	  "function",	  "mil_algebra_procs",	  "sort_ht",		  "(B:bat[:any$1,:any$2]):bat[:any$1,:any$2];"														  ]
[ 20@0,	  "function",	  "mil_algebra_procs",	  "tunique",		  "(b:bat[:any,:any$1]):bat[:any$1,:void];"														  ]
[ 21@0,	  "function",	  "mil_algebra_procs",	  "union",		  "(b1:bat[:any$1,:any$2],b2:bat[:any$1,:any$2]):bat[:any$1,:any$2];"											  ]
[ 22@0,	  "function",	  "mil_algebra_procs",	  "unique",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2];"														  ]
[ 23@0,	  "command",	  "transaction",	  "alpha",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address TRNtrans_alpha;"											  ]
[ 24@0,	  "pattern",	  "transaction",	  "abort",		  "(c:bat[:any,:any]...):void address TRNtrans_abort;"													  ]
[ 25@0,	  "command",	  "transaction",	  "abort",		  "():void address TRNglobal_abort;"															  ]
[ 26@0,	  "pattern",	  "transaction",	  "clean",		  "(c:bat[:any,:any]...):void address TRNtrans_clean;"													  ]
[ 27@0,	  "pattern",	  "transaction",	  "commit",		  "(c:bat[:any,:any]...):void address TRNtrans_commit;"													  ]
[ 28@0,	  "command",	  "transaction",	  "commit",		  "():void address TRNglobal_commit;"															  ]
[ 29@0,	  "command",	  "transaction",	  "delta",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address TRNtrans_delta;"											  ]
[ 30@0,	  "command",	  "transaction",	  "sync",		  "():void address TRNglobal_sync;"															  ]
[ 31@0,	  "pattern",	  "chopper",		  "getTail",		  "(b:bat[:any,:any$1],i:lng):any$1 address CHPgetTail;"												  ]
[ 32@0,	  "pattern",	  "chopper",		  "getHead",		  "(b:bat[:any$1,:any],i:lng):any$1 address CHPgetHead;"												  ]
[ 33@0,	  "pattern",	  "chopper",		  "hasMoreElements",	  "(b:bat[:any$1,:any$2]) ($2:lng,h:any$1,t:any$2) address CHPbunHasMoreElements;"									  ]
[ 34@0,	  "command",	  "chopper",		  "hasMoreChunks",	  "(b:bat[:any$1,:any$2],size:lng) ($3:lng,$4:bat[:any$1,:any$2]) address CHPhasMoreChunks;"								  ]
[ 35@0,	  "pattern",	  "chopper",		  "newIterator",	  "(b:bat[:any$1,:any$2]) ($2:lng,h:any$1,t:any$2) address CHPbunIterator;"										  ]
[ 36@0,	  "command",	  "chopper",		  "newChunkIterator",	  "(b:bat[:any$1,:any$2],size:lng) ($3:lng,$4:bat[:any$1,:any$2]) address CHPnewChunkIterator;"								  ]
[ 37@0,	  "pattern",	  "optimizer",		  "ARoptimizer",	  "(mod:any,fcn:any):str address QOTARoptimizerCALL;"													  ]
[ 38@0,	  "pattern",	  "optimizer",		  "ARoptimizer",	  "():str address QOTARoptimizer;"															  ]
[ 39@0,	  "pattern",	  "optimizer",		  "CXoptimizer",	  "(mod:any,fcn:any):str address QOTCXoptimizerCALL;"													  ]
[ 40@0,	  "pattern",	  "optimizer",		  "CXoptimizer",	  "():str address QOTCXoptimizer;"															  ]
[ 41@0,	  "pattern",	  "optimizer",		  "DCoptimizer",	  "(mod:any,fcn:any):str address QOTDCoptimizerCALL;"													  ]
[ 42@0,	  "pattern",	  "optimizer",		  "DCoptimizer",	  "():str address QOTDCoptimizer;"															  ]
[ 43@0,	  "pattern",	  "optimizer",		  "MCoptimizer",	  "(mod:str,fcn:str):void address QOTMCoptimizerSymbol;"												  ]
[ 44@0,	  "pattern",	  "optimizer",		  "MCoptimizer",	  "(mod:str):void address QOTMCoptimizerModule;"													  ]
[ 45@0,	  "pattern",	  "optimizer",		  "MCoptimizer",	  "():void address QOTMCoptimizer;"															  ]
[ 46@0,	  "pattern",	  "optimizer",		  "MEoptimizer",	  "(mod:str,fcn:str):void address QOTMEoptimizerSymbol;"												  ]
[ 47@0,	  "pattern",	  "optimizer",		  "MEoptimizer",	  "(mod:str):void address QOTMEoptimizerModule;"													  ]
[ 48@0,	  "pattern",	  "optimizer",		  "MEoptimizer",	  "():void address QOTMEoptimizer;"															  ]
[ 49@0,	  "pattern",	  "optimizer",		  "RRoptimizer",	  "(mod:any,fcn:any):str address QOTRRoptimizerCALL;"													  ]
[ 50@0,	  "pattern",	  "optimizer",		  "RRoptimizer",	  "():str address QOTRRoptimizer;"															  ]
[ 51@0,	  "pattern",	  "optimizer",		  "SPoptimizer",	  "(mod:any,fcn:any):str address QOTSPoptimizerCALL;"													  ]
[ 52@0,	  "pattern",	  "optimizer",		  "SPoptimizer",	  "():str address QOTSPoptimizer;"															  ]
[ 53@0,	  "pattern",	  "optimizer",		  "debugOptimizers",	  "():void address QOTdebugOptimizers;"															  ]
[ 54@0,	  "pattern",	  "optimizer",		  "showFlowGraph",	  "(M:any,F:any,s:str):void address QOTshowFlowGraph;"													  ]
[ 55@0,	  "command",	  "inspect",		  "getAtomSizes",	  "():bat[:int,:int] address INSPECTatom_sizes;"													  ]
[ 56@0,	  "command",	  "inspect",		  "getAtomSuperNames",	  "():bat[:int,:str] address INSPECTatom_sup_names;"													  ]
[ 57@0,	  "command",	  "inspect",		  "getAtomNames",	  "():bat[:int,:str] address INSPECTatom_names;"													  ]
[ 58@0,	  "command",	  "inspect",		  "getTypeName",	  "(v:int):str address INSPECTtypename;"														  ]
[ 59@0,	  "pattern",	  "inspect",		  "getType",		  "(v:any):int address INSPECTtype;"															  ]
[ 60@0,	  "command",	  "inspect",		  "getSignature",	  "(mod:str,fcn:str):bat[:str,:str] address INSPECTgetSignature;"											  ]
[ 61@0,	  "command",	  "inspect",		  "getSignature",	  "():bat[:void,:str] address INSPECTgetsignature;"													  ]
[ 62@0,	  "command",	  "inspect",		  "getFunction",	  "():bat[:void,:str] address INSPECTgetfunction;"													  ]
[ 63@0,	  "command",	  "inspect",		  "getModule",		  "():bat[:void,:str] address INSPECTgetmodule;"													  ]
[ 64@0,	  "command",	  "inspect",		  "getKind",		  "():bat[:void,:str] address INSPECTgetkind;"														  ]
[ 65@0,	  "command",	  "inspect",		  "getDefinition",	  "(mod:str,fcn:str):bat[:int,:str] address INSPECTgetDefinition;"											  ]
[ 66@0,	  "command",	  "inspect",		  "getFactoryNames",	  "():bat[:str,:str] address INSPECTfactoryNames;"													  ]
[ 67@0,	  "command",	  "inspect",		  "getFunctionNames",	  "():bat[:str,:str] address INSPECTfunctionNames;"													  ]
[ 68@0,	  "command",	  "inspect",		  "getCommandNames",	  "():bat[:str,:str] address INSPECTcommandNames;"													  ]
[ 69@0,	  "command",	  "inspect",		  "getPatternNames",	  "():bat[:str,:str] address INSPECTpatternNames;"													  ]
[ 70@0,	  "command",	  "inspect",		  "getModuleNames",	  "():bat[:void,:str] address INSPECTmoduleNames;"													  ]
[ 71@0,	  "command",	  "inspect",		  "help",		  "(mod:str,fcn:str):bat[:int,:str] address INSPECThelp2;"												  ]
[ 72@0,	  "command",	  "inspect",		  "help",		  "(k:str):bat[:str,:str] address INSPECThelp;"														  ]
[ 73@0,	  "command",	  "inspect",		  "manual",		  "():void address INSPECTmanual0;"															  ]
[ 74@0,	  "command",	  "inspect",		  "manual",		  "(mod:str):void address INSPECTmanual1;"														  ]
[ 75@0,	  "command",	  "inspect",		  "manual",		  "(file:str,mod:str,recursive:int):void address INSPECTmanual;"											  ]
[ 76@0,	  "command",	  "inspect",		  "manual",		  "(file:str,mod:str):void address INSPECTmanual2;"													  ]
[ 77@0,	  "pattern",	  "box",		  "close",		  "(bname:any):void address BOXclose;"															  ]
[ 78@0,	  "pattern",	  "box",		  "discard",		  "(bname:any,name:any):void address BOXdiscard;"													  ]
[ 79@0,	  "pattern",	  "box",		  "deposit",		  "(bname:any,name:any):void address BOXdeposit;"													  ]
[ 80@0,	  "pattern",	  "box",		  "destroy",		  "(bname:any):void address BOXdestroy;"														  ]
[ 81@0,	  "command",	  "box",		  "getBoxNames",	  "():bat[:int,:str] address BOXgetBoxNames;"														  ]
[ 82@0,	  "pattern",	  "box",		  "iterator",		  "(nme:str):lng address BOXiterator;"															  ]
[ 83@0,	  "pattern",	  "box",		  "open",		  "(bname:any):void address BOXopen;"															  ]
[ 84@0,	  "pattern",	  "box",		  "release",		  "(bname:any,nme:any):void address BOXrelease;"													  ]
[ 85@0,	  "pattern",	  "box",		  "releaseAll",		  "(bname:any):void address BOXreleaseAll;"														  ]
[ 86@0,	  "pattern",	  "box",		  "toString",		  "(bname:str,name:str):str address BOXtoString;"													  ]
[ 87@0,	  "pattern",	  "box",		  "take",		  "(bname:any,name:any):any address BOXtake;"														  ]
[ 88@0,	  "command",	  "bbp",		  "bind",		  "(idx:int):bat[:any,:any] address CMDbbpbindindex;"													  ]
[ 89@0,	  "pattern",	  "bbp",		  "bind",		  "(name:str):bat[:any,:any] address CMDbbpbind;"													  ]
[ 90@0,	  "pattern",	  "bbp",		  "bind",		  "(name:str,loc:str):bat[:any,:any] address CMDbbpbindDefinition;"											  ]
[ 91@0,	  "command",	  "bbp",		  "close",		  "():void address CMDbbpclose;"															  ]
[ 92@0,	  "pattern",	  "bbp",		  "discard",		  "(name:str):void address CMDbbpdiscard;"														  ]
[ 93@0,	  "pattern",	  "bbp",		  "destroy",		  "(b:bat[:any,:any],immediate:bit):void address CMDbbpdestroyBAT;"											  ]
[ 94@0,	  "pattern",	  "bbp",		  "destroy",		  "(b:bat[:any,:any]):void address CMDbbpdestroyBAT1;"													  ]
[ 95@0,	  "pattern",	  "bbp",		  "deposit",		  "(name:str,v:bat[:any,:any]):void address CMDbbpdeposit;"												  ]
[ 96@0,	  "command",	  "bbp",		  "destroy",		  "():void address CMDbbpdestroy;"															  ]
[ 97@0,	  "command",	  "bbp",		  "getLRefCount",	  "(b:bat[:any,:any]):int address CMDgetBATlrefcnt;"													  ]
[ 98@0,	  "command",	  "bbp",		  "getRefCount",	  "(b:bat[:any,:any]):int address CMDgetBATrefcnt;"													  ]
[ 99@0,	  "command",	  "bbp",		  "getKind",		  "():bat[:int,:str] address CMDbbpKind;"														  ]
[ 100@0,  "command",	  "bbp",		  "getStatus",		  "():bat[:int,:str] address CMDbbpStatus;"														  ]
[ 101@0,  "command",	  "bbp",		  "getDirty",		  "():bat[:int,:str] address CMDbbpDirty;"														  ]
[ 102@0,  "command",	  "bbp",		  "getHeat",		  "():bat[:int,:int] address CMDbbpHeat;"														  ]
[ 103@0,  "command",	  "bbp",		  "getLocation",	  "():bat[:int,:str] address CMDbbpLocation;"														  ]
[ 104@0,  "command",	  "bbp",		  "getLRefCount",	  "():bat[:int,:int] address CMDbbpLRefCount;"														  ]
[ 105@0,  "command",	  "bbp",		  "getRefCount",	  "():bat[:int,:int] address CMDbbpRefCount;"														  ]
[ 106@0,  "command",	  "bbp",		  "getCount",		  "():bat[:int,:lng] address CMDbbpCount;"														  ]
[ 107@0,  "command",	  "bbp",		  "getName",		  "(b:bat[:any,:any]):str address CMDbbpName;"														  ]
[ 108@0,  "command",	  "bbp",		  "getRNames",		  "():bat[:int,:str] address CMDbbpRNames;"														  ]
[ 109@0,  "command",	  "bbp",		  "getNames",		  "():bat[:int,:str] address CMDbbpNames;"														  ]
[ 110@0,  "command",	  "bbp",		  "getTailType",	  "():bat[:int,:str] address CMDbbpTailType;"														  ]
[ 111@0,  "command",	  "bbp",		  "getHeadType",	  "():bat[:int,:str] address CMDbbpHeadType;"														  ]
[ 112@0,  "pattern",	  "bbp",		  "getObjects",		  "():bat[:int,:str] address CMDbbpGetObjects;"														  ]
[ 113@0,  "pattern",	  "bbp",		  "iterator",		  "(nme:str):lng address CMDbbpiterator;"														  ]
[ 114@0,  "pattern",	  "bbp",		  "new",		  "(b:bat[:any$1,:any$2],size:lng):bat[:any$1,:any$2] address CMDBATnewDerived;"									  ]
[ 115@0,  "pattern",	  "bbp",		  "new",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDBATnewDerived;"											  ]
[ 116@0,  "pattern",	  "bbp",		  "new",		  "(ht:void,tt:any$2,size:lng):bat[:void,:any$2] address CMDBATnew;"											  ]
[ 117@0,  "pattern",	  "bbp",		  "new",		  "(ht:void,tt:any$2,size:int):bat[:void,:any$2] address CMDBATnew;"											  ]
[ 118@0,  "pattern",	  "bbp",		  "new",		  "(ht:any$1,tt:any$2,size:lng):bat[:any$1,:any$2] address CMDBATnew;"											  ]
[ 119@0,  "pattern",	  "bbp",		  "new",		  "(ht:any$1,tt:any$2,size:int):bat[:any$1,:any$2] address CMDBATnewint;"										  ]
[ 120@0,  "pattern",	  "bbp",		  "new",		  "(ht:any$1,tt:any$2):bat[:any$1,:any$2] address CMDBATnew;"												  ]
[ 121@0,  "pattern",	  "bbp",		  "new",		  "(ht:any$1,tt:any$2,b:bat[:any,:any]):bat[:any$1,:any$2] address CMDBATClone;"									  ]
[ 122@0,  "command",	  "bbp",		  "open",		  "():void address CMDbbpopen;"																  ]
[ 123@0,  "pattern",	  "bbp",		  "project",		  "(b:bat[:any$1,:any],val:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDproject;"									  ]
[ 124@0,  "pattern",	  "bbp",		  "project",		  "(b:bat[:any$1,:any],val:any$2):bat[:any$1,:any$2] address CMDproject;"										  ]
[ 125@0,  "command",	  "bbp",		  "project",		  "(b:bat[:any$1,:any]):bat[:any$1,:void] address CMDprojectNil;"											  ]
[ 126@0,  "pattern",	  "bbp",		  "prelude",		  "():void address CMDbbpprelude;"															  ]
[ 127@0,  "pattern",	  "bbp",		  "release",		  "(b:bat[:any,:any]):void address CMDbbpreleaseBAT;"													  ]
[ 128@0,  "pattern",	  "bbp",		  "release",		  "(name:str,val:bat[:any,:any]):void address CMDbbprelease;"												  ]
[ 129@0,  "pattern",	  "bbp",		  "releaseAll",		  "():void address CMDbbpReleasA;"															  ]
[ 130@0,  "pattern",	  "bbp",		  "toString",		  "(name:str):str address CMbbptoStr;"															  ]
[ 131@0,  "pattern",	  "bbp",		  "take",		  "(name:str):bat[:any,:any] address CMDbbptake;"													  ]
[ 132@0,  "pattern",	  "mil",		  "close",		  "():void address MILclose;"																  ]
[ 133@0,  "pattern",	  "mil",		  "discard",		  "(name:any):void address MILdiscard;"															  ]
[ 134@0,  "pattern",	  "mil",		  "deposit",		  "(name:any):void address MILdeposit;"															  ]
[ 135@0,  "pattern",	  "mil",		  "destroy",		  "():void address MILdestroy;"																  ]
[ 136@0,  "pattern",	  "mil",		  "hasMoreElements",	  "() ($1:lng,$2:str) address MILhasMoreElements;"													  ]
[ 137@0,  "pattern",	  "mil",		  "iterator",		  "() ($1:lng,$2:str) address MILnewIterator;"														  ]
[ 138@0,  "pattern",	  "mil",		  "line",		  "(msg:str):void address MILline;"															  ]
[ 139@0,  "pattern",	  "mil",		  "open",		  "():void address MILopen;"																  ]
[ 140@0,  "pattern",	  "mil",		  "prelude",		  "():void address MILprelude;"																  ]
[ 141@0,  "pattern",	  "mil",		  "release",		  "(name:any):void address MILrelease;"															  ]
[ 142@0,  "pattern",	  "mil",		  "releaseAll",		  "():void address MILreleaseAll;"															  ]
[ 143@0,  "pattern",	  "mil",		  "toString",		  "(name:any):str address MILtoString;"															  ]
[ 144@0,  "pattern",	  "mil",		  "take",		  "(name:str):any address MILtake;"															  ]
[ 145@0,  "pattern",	  "const",		  "close",		  "():void address CSTclose;"																  ]
[ 146@0,  "pattern",	  "const",		  "discard",		  "(name:any):void address CSTdiscard;"															  ]
[ 147@0,  "pattern",	  "const",		  "deposit",		  "(name:any):void address CSTdeposit;"															  ]
[ 148@0,  "pattern",	  "const",		  "destroy",		  "():void address CSTdestroy;"																  ]
[ 149@0,  "pattern",	  "const",		  "hasMoreElements",	  "() ($1:lng,$2:str) address CSThasMoreElements;"													  ]
[ 150@0,  "pattern",	  "const",		  "newIterator",	  "() ($1:lng,$2:str) address CSTnewIterator;"														  ]
[ 151@0,  "pattern",	  "const",		  "open",		  "():void address CSTopen;"																  ]
[ 152@0,  "pattern",	  "const",		  "prelude",		  "():void address CSTprelude;"																  ]
[ 153@0,  "pattern",	  "const",		  "release",		  "(name:any):void address CSTrelease;"															  ]
[ 154@0,  "pattern",	  "const",		  "release",		  "(name:str):void address CSTrelease;"															  ]
[ 155@0,  "pattern",	  "const",		  "releaseAll",		  "():void address CSTreleaseAll;"															  ]
[ 156@0,  "pattern",	  "const",		  "toString",		  "(name:any):str address CSTtoString;"															  ]
[ 157@0,  "pattern",	  "const",		  "take",		  "(name:any):any address CSTtake;"															  ]
[ 158@0,  "command",	  "profiler",		  "activate",		  "(name:str):void address CMDactivateProfiler;"													  ]
[ 159@0,  "command",	  "profiler",		  "clrFilter",		  "(mod:str,fcn:str):void address CMDclrFilterProfiler;"												  ]
[ 160@0,  "command",	  "profiler",		  "closeStream",	  "():void address closeProfilerStream;"														  ]
[ 161@0,  "command",	  "profiler",		  "deactivate",		  "(name:str):void address CMDdeactivateProfiler;"													  ]
[ 162@0,  "command",	  "profiler",		  "getTime",		  "(mod:str,fcn:str):bat[:int,:int] address CMDprofTime;"												  ]
[ 163@0,  "command",	  "profiler",		  "getCnt",		  "(mod:str,fcn:str):bat[:int,:int] address CMDprofCntModFcn;"												  ]
[ 164@0,  "command",	  "profiler",		  "openStream",		  "(fnme:str):void address CMDsetProfilerStream;"													  ]
[ 165@0,  "command",	  "profiler",		  "openStream",		  "():void address openProfilerStream;"															  ]
[ 166@0,  "command",	  "profiler",		  "stop",		  "():void address CMDstopProfiler;"															  ]
[ 167@0,  "command",	  "profiler",		  "start",		  "():void address CMDstartProfiler;"															  ]
[ 168@0,  "command",	  "profiler",		  "setEndPoint",	  "(mod:str,fcn:str):void address CMDendPointProfiler;"													  ]
[ 169@0,  "command",	  "profiler",		  "setStartPoint",	  "(mod:str,fcn:str):void address CMDstartPointProfiler;"												  ]
[ 170@0,  "command",	  "profiler",		  "setFilter",		  "(mod:str,fcn:str):void address CMDsetFilterProfiler;"												  ]
[ 171@0,  "command",	  "profiler",		  "setNone",		  "():void address CMDsetNoneProfiler;"															  ]
[ 172@0,  "command",	  "profiler",		  "setAll",		  "():void address CMDsetAllProfiler;"															  ]
[ 173@0,  "pattern",	  "mal",		  "Mcc",		  "(mod:str,fcn:str):void address MCdynamicCompiler;"													  ]
[ 174@0,  "pattern",	  "mal",		  "call",		  "(s:bat[:any,:str]):void address CMDcallBAT;"														  ]
[ 175@0,  "command",	  "mal",		  "call",		  "(s:str):void address CMDcallString;"															  ]
[ 176@0,  "command",	  "mal",		  "nextElement",	  "(step:dbl,last:dbl) ($3:bit,$4:dbl) address RNGnextElement_dbl;"											  ]
[ 177@0,  "command",	  "mal",		  "nextElement",	  "(step:flt,last:flt) ($3:bit,$4:flt) address RNGnextElement_flt;"											  ]
[ 178@0,  "command",	  "mal",		  "nextElement",	  "(step:lng,last:lng) ($3:bit,$4:lng) address RNGnextElement_lng;"											  ]
[ 179@0,  "command",	  "mal",		  "nextElement",	  "(step:int,last:int) ($3:bit,$4:int) address RNGnextElement_int;"											  ]
[ 180@0,  "command",	  "mal",		  "nextElement",	  "(step:sht,last:sht) ($3:bit,$4:sht) address RNGnextElement_sht;"											  ]
[ 181@0,  "command",	  "mal",		  "nextElement",	  "(step:oid,last:oid) ($3:bit,$4:oid) address RNGnextElement_oid;"											  ]
[ 182@0,  "command",	  "mal",		  "newRange",		  "(v:dbl) ($2:bit,$3:dbl) address RNGnewRange_dbl;"													  ]
[ 183@0,  "command",	  "mal",		  "newRange",		  "(v:flt) ($2:bit,$3:flt) address RNGnewRange_flt;"													  ]
[ 184@0,  "command",	  "mal",		  "newRange",		  "(v:lng) ($2:bit,$3:lng) address RNGnewRange_lng;"													  ]
[ 185@0,  "command",	  "mal",		  "newRange",		  "(v:int) ($2:bit,$3:int) address RNGnewRange_int;"													  ]
[ 186@0,  "command",	  "mal",		  "newRange",		  "(v:sht) ($2:bit,$3:sht) address RNGnewRange_sht;"													  ]
[ 187@0,  "command",	  "mal",		  "newRange",		  "(v:oid) ($2:bit,$3:oid) address RNGnewRange_oid;"													  ]
[ 188@0,  "command",	  "mal",		  "raise",		  "(msg:str):str address CMDraise;"															  ]
[ 189@0,  "command",	  "mal",		  "source",		  "(f:str):void address CMDevalFile;"															  ]
[ 190@0,  "pattern",	  "multiplex",		  "script",		  "(CMD:str,a:any...):any address CMDmultiplexScript;"													  ]
[ 191@0,  "pattern",	  "multiplex",		  "tactics",		  "(CMD:str,a:any...):any address CMDmultiplexScript;"													  ]
[ 192@0,  "command",	  "factory",		  "getLocations",	  "():bat[:int,:str] address FCTgetLocations;"														  ]
[ 193@0,  "command",	  "factory",		  "getTimeStampOut",	  "():date address FCTgetTimeStampOut;"															  ]
[ 194@0,  "command",	  "factory",		  "getTimeStampIn",	  "():date address FCTgetTimeStampIn;"															  ]
[ 195@0,  "command",	  "factory",		  "getOwners",		  "():bat[:int,:str] address FCTgetOwners;"														  ]
[ 196@0,  "command",	  "factory",		  "getCaller",		  "():int address FCTgetCaller;"															  ]
[ 197@0,  "command",	  "factory",		  "getPlants",		  "():bat[:str,:str] address FCTgetPlants;"														  ]
[ 198@0,  "command",	  "factory",		  "shutdown",		  "(m:str,f:str):void address FCTshutdown;"														  ]
[ 199@0,  "command",	  "factory",		  "setLocation",	  "(uri:str):void address FCTsetLocation;"														  ]
[ 200@0,  "pattern",	  "enum",		  "create",		  "(e:any$2,src:bat[:any,:any$1]):bat[:any$1,:any$2] address ENUMcreate;"										  ]
[ 201@0,  "pattern",	  "enum",		  "decode",		  "(b:bat[:any$2,:any$1]):bat[:any$2,:any] address ENUMdecode_multi;"											  ]
[ 202@0,  "pattern",	  "enum",		  "decode",		  "(e:any):any address ENUMdecode;"															  ]
[ 203@0,  "pattern",	  "enum",		  "destroy",		  "(map:any):void address ENUMdestroy;"															  ]
[ 204@0,  "pattern",	  "enum",		  "encode",		  "(e:any$2,b:bat[:any$1,:any]):bat[:any$1,:any$2] address ENUMencode_multi;"										  ]
[ 205@0,  "pattern",	  "enum",		  "encode",		  "(e:any$1,v:any$2):any$1 address ENUMencode;"														  ]
[ 206@0,  "pattern",	  "enum",		  "getTable",		  "(e:any):bat[:any,:any] address ENUMtable;"														  ]
[ 207@0,  "pattern",	  "enum",		  "isHistogram",	  "(tpe:any,b:bat[:any,:any]):bit address ENUMishisto;"													  ]
[ 208@0,  "command",	  "enum",		  "isEnum",		  "(tpe:bat[:any,:any]):bit address isEnum;"														  ]
[ 209@0,  "pattern",	  "enum",		  "lower",		  "(e:any$1,v:any):any$1 address ENUMlower;"														  ]
[ 210@0,  "pattern",	  "enum",		  "loadEncoding",	  "(map:any$1):bat[:any,:any$1] address ENUMload;"													  ]
[ 211@0,  "pattern",	  "enum",		  "setHistogram",	  "(tpe:any$1,b:bat[:any,:any]):void address ENUMsethisto;"												  ]
[ 212@0,  "pattern",	  "enum",		  "upper",		  "(e:any$1,v:any):any$1 address ENUMupper;"														  ]
[ 213@0,  "command",	  "io",			  "export",		  "(b:bat[:any,:any],filepath:str):bit address IOexport;"												  ]
[ 214@0,  "pattern",	  "io",			  "ftable",		  "(fp:str,order:int,b1:bat[:any$1,:any],b:bat[:any$1,:any]...):void address IOfotable;"								  ]
[ 215@0,  "pattern",	  "io",			  "ftable",		  "(filep:str,b1:bat[:any$1,:any],b:bat[:any$1,:any]...):int address IOftable;"										  ]
[ 216@0,  "command",	  "io",			  "import",		  "(b:bat[:any,:any],filepath:str):bit address IOimport;"												  ]
[ 217@0,  "command",	  "io",			  "printf",		  "(format:str,val:str):int address IOprint_formatted_str;"												  ]
[ 218@0,  "command",	  "io",			  "printf",		  "(val:str):int address IOprint_str;"															  ]
[ 219@0,  "command",	  "io",			  "printf",		  "(format:str,val:dbl):int address IOprint_formatted_dbl;"												  ]
[ 220@0,  "command",	  "io",			  "printf",		  "(format:str,val:flt):int address IOprint_formatted_flt;"												  ]
[ 221@0,  "command",	  "io",			  "printf",		  "(format:str,val:lng):int address IOprint_formatted_lng;"												  ]
[ 222@0,  "command",	  "io",			  "printf",		  "(format:str,val:oid):int address IOprint_oid;"													  ]
[ 223@0,  "command",	  "io",			  "printf",		  "(format:str,val:sht):int address IOprint_formatted_sht;"												  ]
[ 224@0,  "command",	  "io",			  "printf",		  "(format:str,val:int):int address IOprint_formatted_int;"												  ]
[ 225@0,  "command",	  "io",			  "printf",		  "(format:str,val:chr):int address IOprint_formatted_chr;"												  ]
[ 226@0,  "command",	  "io",			  "printf",		  "(format:str,val:bit):int address IOprint_formatted_bit;"												  ]
[ 227@0,  "pattern",	  "io",			  "printft",		  "(val:any):int address IOprint_ft;"															  ]
[ 228@0,  "pattern",	  "io",			  "prompt",		  "(val:any):int address IOprompt_val;"															  ]
[ 229@0,  "pattern",	  "io",			  "print",		  "(val:any):int address IOprint_val;"															  ]
[ 230@0,  "pattern",	  "io",			  "print",		  "(order:int,b:bat[:any$1,:any],b2:bat[:any$1,:any]...):int address IOotable;"										  ]
[ 231@0,  "pattern",	  "io",			  "print",		  "(b1:bat[:any$1,:any],b2:bat[:any$1,:any]...):int address IOtable;"											  ]
[ 232@0,  "pattern",	  "io",			  "table",		  "(order:int,b1:bat[:any$1,:any],b2:bat[:any$1,:any]...):int address IOtotable;"									  ]
[ 233@0,  "pattern",	  "io",			  "table",		  "(b1:bat[:any$1,:any],b2:bat[:any$1,:any]...):int address IOttable;"											  ]
[ 234@0,  "pattern",	  "tablet",		  "dump",		  "(s:str,b:bat[:any,:any]...):int address TABdump;"													  ]
[ 235@0,  "pattern",	  "tablet",		  "display",		  "(v:bat[:any,:any]...):int address TABdisplayTable;"													  ]
[ 236@0,  "pattern",	  "tablet",		  "display",		  "(v:any...):int address TABdisplayRow;"														  ]
[ 237@0,  "command",	  "tablet",		  "dump",		  "(names:bat[:void,:str],seps:bat[:void,:str],bats:bat[:void,:BAT],datafile:str,nr:int):void address CMDtablet_dump;"					  ]
[ 238@0,  "command",	  "tablet",		  "firstPage",		  "():void address TABfirstPage;"															  ]
[ 239@0,  "command",	  "tablet",		  "finish",		  "():void address TABfinishReport;"															  ]
[ 240@0,  "command",	  "tablet",		  "getPage",		  "(i:int):void address TABgetPage;"															  ]
[ 241@0,  "command",	  "tablet",		  "getPageCnt",		  "():void address TABgetPageCnt;"															  ]
[ 242@0,  "pattern",	  "tablet",		  "header",		  "(b:any...):int address TABheader;"															  ]
[ 243@0,  "command",	  "tablet",		  "input",		  "(names:bat[:void,:str],seps:bat[:void,:str],types:bat[:void,:str],s:str,nr:int):bat[:str,:BAT] address CMDtablet_input;"				  ]
[ 244@0,  "command",	  "tablet",		  "lastPage",		  "():void address TABlastPage;"															  ]
[ 245@0,  "command",	  "tablet",		  "load",		  "(names:bat[:void,:str],seps:bat[:void,:str],types:bat[:void,:str],datafile:str,nr:int):bat[:str,:BAT] address CMDtablet_load;"			  ]
[ 246@0,  "command",	  "tablet",		  "nextPage",		  "():void address TABnextPage;"															  ]
[ 247@0,  "command",	  "tablet",		  "output",		  "(order:bat[:any,:any],seps:bat[:void,:str],bats:bat[:void,:BAT],s:str):void address CMDtablet_output;"						  ]
[ 248@0,  "command",	  "tablet",		  "prevPage",		  "():void address TABprevPage;"															  ]
[ 249@0,  "pattern",	  "tablet",		  "page",		  "(b:bat[:any,:any]...):int address TABpage;"														  ]
[ 250@0,  "command",	  "tablet",		  "setColumnDecimal",	  "(idx:int,s:int,p:int):void address TABsetColumnDecimal;"												  ]
[ 251@0,  "command",	  "tablet",		  "setColumnPosition",	  "(idx:int,f:int,i:int):void address TABsetColumnPosition;"												  ]
[ 252@0,  "command",	  "tablet",		  "setColumnWidth",	  "(idx:int,maxwidth:int):void address TABsetColumnWidth;"												  ]
[ 253@0,  "command",	  "tablet",		  "setColumnNull",	  "(idx:int,fmt:str):void address TABsetColumnNull;"													  ]
[ 254@0,  "command",	  "tablet",		  "setColumnBracket",	  "(idx:int,lbrk:str,rbrk:str):void address TABsetColumnBracket;"											  ]
[ 255@0,  "command",	  "tablet",		  "setColumnName",	  "(idx:int,nme:str):void address TABsetColumnName;"													  ]
[ 256@0,  "pattern",	  "tablet",		  "setColumn",		  "(idx:int,v:any):void address TABsetColumn;"														  ]
[ 257@0,  "command",	  "tablet",		  "setRowBracket",	  "(lbrk:str,rbrk:str):void address TABsetRowBracket;"													  ]
[ 258@0,  "command",	  "tablet",		  "setTableBracket",	  "(lbrk:str,rbrk:str):void address TABsetTableBracket;"												  ]
[ 259@0,  "command",	  "tablet",		  "setDelimiter",	  "(sep:str):void address TABsetDelimiter;"														  ]
[ 260@0,  "command",	  "tablet",		  "setPivot",		  "(b:bat[:void,:oid]):void address TABsetPivot;"													  ]
[ 261@0,  "command",	  "tablet",		  "setStream",		  "(s:str):void address TABsetStream;"															  ]
[ 262@0,  "pattern",	  "tablet",		  "setFormat",		  "(b:any...):void address TABsetFormat;"														  ]
[ 263@0,  "command",	  "tablet",		  "setProperties",	  "(prop:str):int address TABsetProperties;"														  ]
[ 264@0,  "command",	  "stream",		  "blocked",		  "(s:str):str address open_block_stream;"														  ]
[ 265@0,  "command",	  "stream",		  "close",		  "(s:str):void address stream_close_stream;"														  ]
[ 266@0,  "command",	  "stream",		  "flush",		  "(s:str):void address stream_flush_stream;"														  ]
[ 267@0,  "command",	  "stream",		  "openWrite",		  "(filename:str):str address stream_open_wastream;"													  ]
[ 268@0,  "command",	  "stream",		  "openRead",		  "(filename:str):str address stream_open_rastream;"													  ]
[ 269@0,  "command",	  "stream",		  "openWriteBytes",	  "(filename:str):str address stream_open_wstream;"													  ]
[ 270@0,  "command",	  "stream",		  "openReadBytes",	  "(filename:str):str address stream_open_rstream;"													  ]
[ 271@0,  "command",	  "stream",		  "readInt",		  "(s:str):int address stream_read_int;"														  ]
[ 272@0,  "command",	  "stream",		  "readStr",		  "(s:str):str address stream_read_str;"														  ]
[ 273@0,  "command",	  "stream",		  "socketWrite",	  "(skt:int,name:str):str address stream_socket_wastream;"												  ]
[ 274@0,  "command",	  "stream",		  "socketRead",		  "(skt:int,name:str):str address stream_socket_rastream;"												  ]
[ 275@0,  "command",	  "stream",		  "socketWriteBytes",	  "(skt:int,name:str):str address stream_socket_wstream;"												  ]
[ 276@0,  "command",	  "stream",		  "socketReadBytes",	  "(skt:int,name:str):str address stream_socket_rstream;"												  ]
[ 277@0,  "command",	  "stream",		  "writeInt",		  "(s:str,data:int):void address stream_write_int;"													  ]
[ 278@0,  "command",	  "stream",		  "writeStr",		  "(s:str,data:str):void address stream_write_string;"													  ]
[ 279@0,  "command",	  "clients",		  "clearDebug",		  "(flg:int):void address CLTclearDebug;"														  ]
[ 280@0,  "command",	  "clients",		  "getScenario",	  "():str address CLTgetScenario;"															  ]
[ 281@0,  "command",	  "clients",		  "getInfo",		  "():bat[:int,:str] address CLTInfo;"															  ]
[ 282@0,  "command",	  "clients",		  "getId",		  "():int address CLTgetClientId;"															  ]
[ 283@0,  "command",	  "clients",		  "getLogins",		  "():bat[:int,:str] address CLTLogin;"															  ]
[ 284@0,  "command",	  "clients",		  "getUsers",		  "():bat[:int,:str] address CLTusers;"															  ]
[ 285@0,  "command",	  "clients",		  "quit",		  "():void address CLTquit;"																  ]
[ 286@0,  "command",	  "clients",		  "setScenario",	  "(msg:str):str address CLTsetScenario;"														  ]
[ 287@0,  "command",	  "clients",		  "setDebug",		  "(flg:int):void address CLTsetDebug;"															  ]
[ 288@0,  "command",	  "clients",		  "setListing",		  "(flg:int):int address CLTsetListing;"														  ]
[ 289@0,  "command",	  "mapi",		  "epilogue",		  "():void address mapi_epilogue;"															  ]
[ 290@0,  "command",	  "mapi",		  "listen_ssl",		  "(port:int,maxusers:int,keyfile:str,certfile:str,cmd:str):int address MAPIlistenSSL;"									  ]
[ 291@0,  "command",	  "mapi",		  "listen",		  "(port:int,maxusers:int,cmd:str):int address MAPIlisten3;"												  ]
[ 292@0,  "command",	  "mapi",		  "listen",		  "(port:int,maxusers:int):int address MAPIlisten;"													  ]
[ 293@0,  "command",	  "mapi",		  "listen",		  "(port:lng):int address MAPIlisten_port;"														  ]
[ 294@0,  "command",	  "mapi",		  "listen",		  "():int address MAPIlisten_default;"															  ]
[ 295@0,  "command",	  "mapi",		  "prelude",		  "():void address mapi_prelude;"															  ]
[ 296@0,  "command",	  "mapi",		  "resume",		  "(sessionkey:lng):void address MAPIresume;"														  ]
[ 297@0,  "command",	  "mapi",		  "suspend",		  "(sessionkey:lng,timeout:lng):void address MAPIsuspend;"												  ]
[ 298@0,  "command",	  "mapi",		  "stop",		  "(name:str):bit address MAPIstopClient;"														  ]
[ 299@0,  "command",	  "mapi",		  "stop",		  "(id:int):bit address MAPIstop;"															  ]
[ 300@0,  "command",	  "mapi",		  "trace",		  "(flag:bit):void address MAPItrace;"															  ]
[ 301@0,  "command",	  "mapi",		  "trace",		  "(nme:str,flag:bit):void address MAPItrace2;"														  ]
[ 302@0,  "command",	  "aggrX3",		  "avg",		  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:flt] address AX3aggrX3_avg3_flt;"							  ]
[ 303@0,  "command",	  "aggrX3",		  "avg",		  "(b:bat[:oid,:flt],e:bat[:oid,:any]):bat[:oid,:flt] address AX3aggrX3_avg_flt;"									  ]
[ 304@0,  "command",	  "aggrX3",		  "avg",		  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:lng] address AX3aggrX3_avg3_lng;"							  ]
[ 305@0,  "command",	  "aggrX3",		  "avg",		  "(b:bat[:oid,:lng],e:bat[:oid,:any]):bat[:oid,:lng] address AX3aggrX3_avg_lng;"									  ]
[ 306@0,  "command",	  "aggrX3",		  "avg",		  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:dbl] address AX3aggrX3_avg3_dbl;"							  ]
[ 307@0,  "command",	  "aggrX3",		  "avg",		  "(b:bat[:oid,:dbl],e:bat[:oid,:any]):bat[:oid,:dbl] address AX3aggrX3_avg_dbl;"									  ]
[ 308@0,  "command",	  "aggrX3",		  "avg",		  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:int] address AX3aggrX3_avg3_int;"							  ]
[ 309@0,  "command",	  "aggrX3",		  "avg",		  "(b:bat[:oid,:int],e:bat[:oid,:any]):bat[:oid,:int] address AX3aggrX3_avg_int;"									  ]
[ 310@0,  "command",	  "aggrX3",		  "avg",		  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:sht] address AX3aggrX3_avg3_sht;"							  ]
[ 311@0,  "command",	  "aggrX3",		  "avg",		  "(b:bat[:oid,:sht],e:bat[:oid,:any]):bat[:oid,:sht] address AX3aggrX3_avg_sht;"									  ]
[ 312@0,  "command",	  "aggrX3",		  "count",		  "(b:bat[:oid,:any],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:int] address AX3aggrX3_count3Nils;"							  ]
[ 313@0,  "command",	  "aggrX3",		  "count",		  "(b:bat[:oid,:any],g:bat[:oid,:oid],e:bat[:oid,:any],nonils:bit):bat[:oid,:int] address AX3aggrX3_count3;"						  ]
[ 314@0,  "command",	  "aggrX3",		  "count",		  "(b:bat[:oid,:any],e:bat[:oid,:any]):bat[:oid,:int] address AX3aggrX3_count;"										  ]
[ 315@0,  "command",	  "aggrX3",		  "max",		  "(b:bat[:oid,:any$1],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:any$1] address AX3aggrX3_max3;"							  ]
[ 316@0,  "command",	  "aggrX3",		  "min",		  "(b:bat[:oid,:any$1],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:any$1] address AX3aggrX3_min3;"							  ]
[ 317@0,  "command",	  "aggrX3",		  "max",		  "(b:bat[:oid,:any$1],e:bat[:oid,:any]):bat[:oid,:any$1] address AX3aggrX3_max;"									  ]
[ 318@0,  "command",	  "aggrX3",		  "min",		  "(b:bat[:oid,:any$1],e:bat[:oid,:any]):bat[:oid,:any$1] address AX3aggrX3_min;"									  ]
[ 319@0,  "command",	  "aggrX3",		  "prod",		  "(b:bat[:oid,:flt],e:bat[:oid,:any]):bat[:oid,:flt] address AX3aggrX3_prod_flt_flt;"									  ]
[ 320@0,  "command",	  "aggrX3",		  "prod",		  "(b:bat[:oid,:lng],e:bat[:oid,:any]):bat[:oid,:lng] address AX3aggrX3_prod_lng_lng;"									  ]
[ 321@0,  "command",	  "aggrX3",		  "prod",		  "(b:bat[:oid,:dbl],e:bat[:oid,:any]):bat[:oid,:dbl] address AX3aggrX3_prod_dbl_dbl;"									  ]
[ 322@0,  "command",	  "aggrX3",		  "prod",		  "(b:bat[:oid,:int],e:bat[:oid,:any]):bat[:oid,:int] address AX3aggrX3_prod_int_int;"									  ]
[ 323@0,  "command",	  "aggrX3",		  "prod",		  "(b:bat[:oid,:sht],e:bat[:oid,:any]):bat[:oid,:sht] address AX3aggrX3_prod_sht_sht;"									  ]
[ 324@0,  "command",	  "aggrX3",		  "size",		  "(b:bat[:oid,:bit],e:bat[:oid,:any]):bat[:oid,:int] address AX3aggrX3_size;"										  ]
[ 325@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:flt] address AX3aggrX3_sum3_flt_flt;"							  ]
[ 326@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:flt],e:bat[:oid,:any]):bat[:oid,:flt] address AX3aggrX3_sum_flt_flt;"									  ]
[ 327@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:lng] address AX3aggrX3_sum3_int_lng;"							  ]
[ 328@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:int],e:bat[:oid,:any]):bat[:oid,:lng] address AX3aggrX3_sum_int_lng;"									  ]
[ 329@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:int] address AX3aggrX3_sum3_int_int;"							  ]
[ 330@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:int],e:bat[:oid,:any]):bat[:oid,:int] address AX3aggrX3_sum_int_int;"									  ]
[ 331@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:int] address AX3aggrX3_sum3_sht_int;"							  ]
[ 332@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:sht],e:bat[:oid,:any]):bat[:oid,:int] address AX3aggrX3_sum_sht_int;"									  ]
[ 333@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:sht] address AX3aggrX3_sum3_sht_sht;"							  ]
[ 334@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:sht],e:bat[:oid,:any]):bat[:oid,:sht] address AX3aggrX3_sum_sht_sht;"									  ]
[ 335@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:dbl] address AX3aggrX3_sum3_flt_dbl;"							  ]
[ 336@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:flt],e:bat[:oid,:any]):bat[:oid,:dbl] address AX3aggrX3_sum_flt_dbl;"									  ]
[ 337@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:flt] address AX3aggrX3_sum3_flt_flt;"							  ]
[ 338@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:flt],e:bat[:oid,:any]):bat[:oid,:flt] address AX3aggrX3_sum_flt_flt;"									  ]
[ 339@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:lng] address AX3aggrX3_sum3_lng_lng;"							  ]
[ 340@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:lng],e:bat[:oid,:any]):bat[:oid,:lng] address AX3aggrX3_sum_lng_lng;"									  ]
[ 341@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:dbl] address AX3aggrX3_sum3_dbl_dbl;"							  ]
[ 342@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:dbl],e:bat[:oid,:any]):bat[:oid,:dbl] address AX3aggrX3_sum_dbl_dbl;"									  ]
[ 343@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:int] address AX3aggrX3_sum3_int_int;"							  ]
[ 344@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:int],e:bat[:oid,:any]):bat[:oid,:int] address AX3aggrX3_sum_int_int;"									  ]
[ 345@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any]):bat[:oid,:sht] address AX3aggrX3_sum3_sht_sht;"							  ]
[ 346@0,  "command",	  "aggrX3",		  "sum",		  "(b:bat[:oid,:sht],e:bat[:oid,:any]):bat[:oid,:sht] address AX3aggrX3_sum_sht_sht;"									  ]
[ 347@0,  "command",	  "group",		  "avg",		  "(b:bat[:int,:dbl],e:bat[:int,:any]):bat[:int,:dbl] address GRPavg_dbl;"										  ]
[ 348@0,  "command",	  "group",		  "avg",		  "(b:bat[:any$2,:flt],e:bat[:any$2,:any]):bat[:any$2,:flt] address GRPavg_flt;"									  ]
[ 349@0,  "command",	  "group",		  "avg",		  "(b:bat[:any$2,:lng],e:bat[:any$2,:any]):bat[:any$2,:lng] address GRPavg_lng;"									  ]
[ 350@0,  "command",	  "group",		  "avg",		  "(b:bat[:any$2,:int],e:bat[:any$2,:any]):bat[:any$2,:int] address GRPavg_int;"									  ]
[ 351@0,  "command",	  "group",		  "avg",		  "(b:bat[:any$2,:sht],e:bat[:any$2,:any]):bat[:any$2,:sht] address GRPavg_sht;"									  ]
[ 352@0,  "command",	  "group",		  "count",		  "(b:bat[:any$2,:any],e:bat[:any$2,:any],nonils:bit):bat[:any$2,:int] address GRPaggr_count;"								  ]
[ 353@0,  "command",	  "group",		  "group",		  "(ct:bat[:any$2,:any],attr:bat[:any$2,:any$1]):bat[:any$2,:oid] address GRPderive2;"									  ]
[ 354@0,  "command",	  "group",		  "group",		  "(ct:bat[:any$2,:any],attr:bat[:any$2,:any$1]) (map:bat[:any$1,:oid],grp:bat[:any$2,:oid]) address GRPderive;"					  ]
[ 355@0,  "command",	  "group",		  "group",		  "(attr:bat[:any$2,:any$1],N:int,rng:int) (histo:bat[:any$1,:int],grp:bat[:any$2,:oid]) address GRPgroup_custom;"					  ]
[ 356@0,  "command",	  "group",		  "group",		  "(attr:bat[:any$2,:any$1]):bat[:any$2,:oid] address GRPgroup2;"											  ]
[ 357@0,  "command",	  "group",		  "group",		  "(attr:bat[:any$2,:any$1]) (histo:bat[:any$1,:int],grp:bat[:any$2,:oid]) address GRPgroup;"								  ]
[ 358@0,  "command",	  "group",		  "group",		  "(b:bat[:any$1,:any],start:int,incr:int,grpsize:int):bat[:any$1,:int] address GRPgroup0;"								  ]
[ 359@0,  "command",	  "group",		  "max",		  "(b:bat[:any$2,:any$1],e:bat[:any$2,:any]):bat[:any$2,:any$1] address GRPmax;"									  ]
[ 360@0,  "command",	  "group",		  "min",		  "(b:bat[:any$2,:any$1],e:bat[:any$2,:any]):bat[:any$2,:any$1] address GRPmin;"									  ]
[ 361@0,  "command",	  "group",		  "prelude",		  "():void address GRPprelude;"																  ]
[ 362@0,  "command",	  "group",		  "refine",		  "(b:bat[:any$2,:any],a:bat[:any$2,:any]):bat[:any$2,:oid] address GRPrefine;"										  ]
[ 363@0,  "command",	  "group",		  "regroup",		  "(ct:bat[:any$2,:oid],attr:bat[:any$2,:any]):bat[:any$2,:oid] address GRPregroup;"									  ]
[ 364@0,  "command",	  "group",		  "size",		  "(b:bat[:any$2,:bit],e:bat[:any$2,:any]):bat[:any$2,:int] address GRPsize;"										  ]
[ 365@0,  "command",	  "group",		  "sum",		  "(b:bat[:any$2,:dbl],e:bat[:any$2,:any]):bat[:any$2,:dbl] address GRPsum_dbl;"									  ]
[ 366@0,  "command",	  "group",		  "sum",		  "(b:bat[:any$2,:flt],e:bat[:any$2,:any]):bat[:any$2,:flt] address GRPsum_flt;"									  ]
[ 367@0,  "command",	  "group",		  "sum",		  "(b:bat[:any$2,:lng],e:bat[:any$2,:any]):bat[:any$2,:lng] address GRPsum_lng;"									  ]
[ 368@0,  "command",	  "group",		  "sum",		  "(b:bat[:any$2,:int],e:bat[:any$2,:any]):bat[:any$2,:int] address GRPsum_int;"									  ]
[ 369@0,  "command",	  "group",		  "sum",		  "(b:bat[:any$2,:sht],e:bat[:any$2,:any]):bat[:any$2,:sht] address GRPsum_sht;"									  ]
[ 370@0,  "command",	  "status",		  "cpuStatistics",	  "():bat[:str,:int] address SYScpuStatistics;"														  ]
[ 371@0,  "command",	  "status",		  "gdkThread",		  "():bat[:int,:str] address SYSgdkThread;"														  ]
[ 372@0,  "command",	  "status",		  "gdkEnv",		  "():bat[:str,:str] address SYSgdkEnv;"														  ]
[ 373@0,  "command",	  "status",		  "ioStatistics",	  "():bat[:str,:int] address SYSioStatistics;"														  ]
[ 374@0,  "command",	  "status",		  "mem_maxsize",	  "(v:lng):void address set_mem_maxsize;"														  ]
[ 375@0,  "command",	  "status",		  "mem_maxsize",	  "():lng address SYSgetmem_maxsize;"															  ]
[ 376@0,  "command",	  "status",		  "mem_cursize",	  "():lng address SYSgetmem_cursize;"															  ]
[ 377@0,  "command",	  "status",		  "memUsage",		  "(minsize:lng):bat[:str,:lng] address SYSmem_usage;"													  ]
[ 378@0,  "command",	  "status",		  "memMap",		  "():void address SYSmemMap;"																  ]
[ 379@0,  "command",	  "status",		  "memStatistics",	  "():bat[:str,:int] address SYSmemStatistics;"														  ]
[ 380@0,  "command",	  "status",		  "vm_maxsize",		  "(v:lng):void address SYSsetvm_maxsize;"														  ]
[ 381@0,  "command",	  "status",		  "vm_maxsize",		  "():lng address SYSgetvm_maxsize;"															  ]
[ 382@0,  "command",	  "status",		  "vm_cursize",		  "():lng address SYSgetvm_cursize;"															  ]
[ 383@0,  "command",	  "status",		  "vmUsage",		  "(minsize:lng):bat[:str,:lng] address SYSvm_usage;"													  ]
[ 384@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:lng],cst:lng):bat[:any$1,:bit] address CMDcmpaccumNEQcst;"								  ]
[ 385@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:lng],cst:lng):bat[:any$1,:bit] address CMDcmpNEQcst;"											  ]
[ 386@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:lng],c:bat[:any$1,:lng]):bat[:any$1,:bit] address CMDcmpaccumNEQ;"							  ]
[ 387@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:lng],c:bat[:any$1,:lng]):bat[:any$1,:bit] address CMDcmpNEQ;"										  ]
[ 388@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:int],cst:int):bat[:any$1,:bit] address CMDcmpaccumNEQcst;"								  ]
[ 389@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:int],cst:int):bat[:any$1,:bit] address CMDcmpNEQcst;"											  ]
[ 390@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:int],c:bat[:any$1,:int]):bat[:any$1,:bit] address CMDcmpaccumNEQ;"							  ]
[ 391@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:int],c:bat[:any$1,:int]):bat[:any$1,:bit] address CMDcmpNEQ;"										  ]
[ 392@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:sht],cst:sht):bat[:any$1,:bit] address CMDcmpaccumNEQcst;"								  ]
[ 393@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:sht],cst:sht):bat[:any$1,:bit] address CMDcmpNEQcst;"											  ]
[ 394@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:sht],c:bat[:any$1,:sht]):bat[:any$1,:bit] address CMDcmpaccumNEQ;"							  ]
[ 395@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:sht],c:bat[:any$1,:sht]):bat[:any$1,:bit] address CMDcmpNEQ;"										  ]
[ 396@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:oid],cst:oid):bat[:any$1,:bit] address CMDcmpaccumNEQcst;"								  ]
[ 397@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:oid],cst:oid):bat[:any$1,:bit] address CMDcmpNEQcst;"											  ]
[ 398@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:oid],c:bat[:any$1,:oid]):bat[:any$1,:bit] address CMDcmpaccumNEQ;"							  ]
[ 399@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:oid],c:bat[:any$1,:oid]):bat[:any$1,:bit] address CMDcmpNEQ;"										  ]
[ 400@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:flt],cst:flt):bat[:any$1,:bit] address CMDcmpaccumNEQcst;"								  ]
[ 401@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:flt],cst:flt):bat[:any$1,:bit] address CMDcmpNEQcst;"											  ]
[ 402@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:flt],c:bat[:any$1,:flt]):bat[:any$1,:bit] address CMDcmpaccumNEQ;"							  ]
[ 403@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:flt],c:bat[:any$1,:flt]):bat[:any$1,:bit] address CMDcmpNEQ;"										  ]
[ 404@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:dbl],cst:dbl):bat[:any$1,:bit] address CMDcmpaccumNEQcst;"								  ]
[ 405@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:dbl],cst:dbl):bat[:any$1,:bit] address CMDcmpNEQcst;"											  ]
[ 406@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:dbl],c:bat[:any$1,:dbl]):bat[:any$1,:bit] address CMDcmpaccumNEQ;"							  ]
[ 407@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:dbl],c:bat[:any$1,:dbl]):bat[:any$1,:bit] address CMDcmpNEQ;"										  ]
[ 408@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpaccumNEQcst;"								  ]
[ 409@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpNEQcst;"											  ]
[ 410@0,  "command",	  "batcalc",		  "!=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpaccumNEQ;"							  ]
[ 411@0,  "command",	  "batcalc",		  "!=",			  "(b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpNEQ;"										  ]
[ 412@0,  "command",	  "batcalc",		  "%",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbataccumMOD;"						  ]
[ 413@0,  "command",	  "batcalc",		  "%",			  "(b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbatMOD;"									  ]
[ 414@0,  "command",	  "batcalc",		  "%",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbataccumMODcst;"							  ]
[ 415@0,  "command",	  "batcalc",		  "%",			  "(b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbatMODcst;"										  ]
[ 416@0,  "command",	  "batcalc",		  "%",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbataccumMOD;"						  ]
[ 417@0,  "command",	  "batcalc",		  "%",			  "(b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbatMOD;"									  ]
[ 418@0,  "command",	  "batcalc",		  "%",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbataccumMODcst;"							  ]
[ 419@0,  "command",	  "batcalc",		  "%",			  "(b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbatMODcst;"										  ]
[ 420@0,  "command",	  "batcalc",		  "%",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbataccumMOD;"						  ]
[ 421@0,  "command",	  "batcalc",		  "%",			  "(b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbatMOD;"									  ]
[ 422@0,  "command",	  "batcalc",		  "%",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbataccumMODcst;"							  ]
[ 423@0,  "command",	  "batcalc",		  "%",			  "(b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbatMODcst;"										  ]
[ 424@0,  "command",	  "batcalc",		  "%",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbataccumMOD;"						  ]
[ 425@0,  "command",	  "batcalc",		  "%",			  "(b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbatMOD;"									  ]
[ 426@0,  "command",	  "batcalc",		  "%",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbataccumMODcst;"							  ]
[ 427@0,  "command",	  "batcalc",		  "%",			  "(b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbatMODcst;"										  ]
[ 428@0,  "command",	  "batcalc",		  "*",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbataccumMUL;"						  ]
[ 429@0,  "command",	  "batcalc",		  "*",			  "(b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbatMUL;"									  ]
[ 430@0,  "command",	  "batcalc",		  "*",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbataccumMULcst;"							  ]
[ 431@0,  "command",	  "batcalc",		  "*",			  "(b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbatMULcst;"										  ]
[ 432@0,  "command",	  "batcalc",		  "++",			  "(b:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDunaryPLUSPLUS;"											  ]
[ 433@0,  "command",	  "batcalc",		  "++",			  "(b:bat[:any$1,:flt]):bat[:any$1,:flt] address CMDunaryPLUSPLUS;"											  ]
[ 434@0,  "command",	  "batcalc",		  "++",			  "(b:bat[:any$1,:sht]):bat[:any$1,:sht] address CMDunaryPLUSPLUS;"											  ]
[ 435@0,  "command",	  "batcalc",		  "++",			  "(b:bat[:any$1,:lng]):bat[:any$1,:lng] address CMDunaryPLUSPLUS;"											  ]
[ 436@0,  "command",	  "batcalc",		  "++",			  "(b:bat[:any$1,:int]):bat[:any$1,:int] address CMDunaryPLUSPLUS;"											  ]
[ 437@0,  "command",	  "batcalc",		  "++",			  "(b:bat[:any$1,:oid]):bat[:any$1,:oid] address CMDunaryPLUSPLUS;"											  ]
[ 438@0,  "command",	  "batcalc",		  "+",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbataccumADD;"						  ]
[ 439@0,  "command",	  "batcalc",		  "+",			  "(b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbatADD;"									  ]
[ 440@0,  "command",	  "batcalc",		  "+",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbataccumADDcst;"							  ]
[ 441@0,  "command",	  "batcalc",		  "+",			  "(b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbatADDcst;"										  ]
[ 442@0,  "command",	  "batcalc",		  "--",			  "(b:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDunaryMINMIN;"											  ]
[ 443@0,  "command",	  "batcalc",		  "-",			  "(b:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDunaryMIN;"												  ]
[ 444@0,  "command",	  "batcalc",		  "--",			  "(b:bat[:any$1,:flt]):bat[:any$1,:flt] address CMDunaryMINMIN;"											  ]
[ 445@0,  "command",	  "batcalc",		  "-",			  "(b:bat[:any$1,:flt]):bat[:any$1,:flt] address CMDunaryMIN;"												  ]
[ 446@0,  "command",	  "batcalc",		  "--",			  "(b:bat[:any$1,:sht]):bat[:any$1,:sht] address CMDunaryMINMIN;"											  ]
[ 447@0,  "command",	  "batcalc",		  "-",			  "(b:bat[:any$1,:sht]):bat[:any$1,:sht] address CMDunaryMIN;"												  ]
[ 448@0,  "command",	  "batcalc",		  "--",			  "(b:bat[:any$1,:lng]):bat[:any$1,:lng] address CMDunaryMINMIN;"											  ]
[ 449@0,  "command",	  "batcalc",		  "-",			  "(b:bat[:any$1,:lng]):bat[:any$1,:lng] address CMDunaryMIN;"												  ]
[ 450@0,  "command",	  "batcalc",		  "--",			  "(b:bat[:any$1,:int]):bat[:any$1,:int] address CMDunaryMINMIN;"											  ]
[ 451@0,  "command",	  "batcalc",		  "-",			  "(b:bat[:any$1,:int]):bat[:any$1,:int] address CMDunaryMIN;"												  ]
[ 452@0,  "command",	  "batcalc",		  "--",			  "(b:bat[:any$1,:oid]):bat[:any$1,:oid] address CMDunaryMINMIN;"											  ]
[ 453@0,  "command",	  "batcalc",		  "-",			  "(b:bat[:any$1,:oid]):bat[:any$1,:oid] address CMDunaryMIN;"												  ]
[ 454@0,  "command",	  "batcalc",		  "-",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbataccumMIN;"						  ]
[ 455@0,  "command",	  "batcalc",		  "-",			  "(b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbatMIN;"									  ]
[ 456@0,  "command",	  "batcalc",		  "-",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbataccumMINcst;"							  ]
[ 457@0,  "command",	  "batcalc",		  "-",			  "(b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbatMINcst;"										  ]
[ 458@0,  "command",	  "batcalc",		  "/",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbataccumDIV;"						  ]
[ 459@0,  "command",	  "batcalc",		  "/",			  "(b:bat[:any$1,:any$2],c:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDbatDIV;"									  ]
[ 460@0,  "command",	  "batcalc",		  "/",			  "(a:bat[:any$1,:any$2],b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbataccumDIVcst;"							  ]
[ 461@0,  "command",	  "batcalc",		  "/",			  "(b:bat[:any$1,:any$2],cst:any$2):bat[:any$1,:any$2] address CMDbatDIVcst;"										  ]
[ 462@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:lng],cst:lng):bat[:any$1,:bit] address CMDcmpaccumLEcst;"								  ]
[ 463@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:lng],cst:lng):bat[:any$1,:bit] address CMDcmpLEcst;"											  ]
[ 464@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:lng],c:bat[:any$1,:lng]):bat[:any$1,:bit] address CMDcmpaccumLE;"							  ]
[ 465@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:lng],c:bat[:any$1,:lng]):bat[:any$1,:bit] address CMDcmpLE;"										  ]
[ 466@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:lng],cst:lng):bat[:any$1,:bit] address CMDcmpaccumLTcst;"								  ]
[ 467@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:lng],cst:lng):bat[:any$1,:bit] address CMDcmpLTcst;"											  ]
[ 468@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:lng],c:bat[:any$1,:lng]):bat[:any$1,:bit] address CMDcmpaccumLT;"							  ]
[ 469@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:lng],c:bat[:any$1,:lng]):bat[:any$1,:bit] address CMDcmpLT;"										  ]
[ 470@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:int],cst:int):bat[:any$1,:bit] address CMDcmpaccumLEcst;"								  ]
[ 471@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:int],cst:int):bat[:any$1,:bit] address CMDcmpLEcst;"											  ]
[ 472@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:int],c:bat[:any$1,:int]):bat[:any$1,:bit] address CMDcmpaccumLE;"							  ]
[ 473@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:int],c:bat[:any$1,:int]):bat[:any$1,:bit] address CMDcmpLE;"										  ]
[ 474@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:int],cst:int):bat[:any$1,:bit] address CMDcmpaccumLTcst;"								  ]
[ 475@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:int],cst:int):bat[:any$1,:bit] address CMDcmpLTcst;"											  ]
[ 476@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:int],c:bat[:any$1,:int]):bat[:any$1,:bit] address CMDcmpaccumLT;"							  ]
[ 477@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:int],c:bat[:any$1,:int]):bat[:any$1,:bit] address CMDcmpLT;"										  ]
[ 478@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:sht],cst:sht):bat[:any$1,:bit] address CMDcmpaccumLEcst;"								  ]
[ 479@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:sht],cst:sht):bat[:any$1,:bit] address CMDcmpLEcst;"											  ]
[ 480@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:sht],c:bat[:any$1,:sht]):bat[:any$1,:bit] address CMDcmpaccumLE;"							  ]
[ 481@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:sht],c:bat[:any$1,:sht]):bat[:any$1,:bit] address CMDcmpLE;"										  ]
[ 482@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:sht],cst:sht):bat[:any$1,:bit] address CMDcmpaccumLTcst;"								  ]
[ 483@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:sht],cst:sht):bat[:any$1,:bit] address CMDcmpLTcst;"											  ]
[ 484@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:sht],c:bat[:any$1,:sht]):bat[:any$1,:bit] address CMDcmpaccumLT;"							  ]
[ 485@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:sht],c:bat[:any$1,:sht]):bat[:any$1,:bit] address CMDcmpLT;"										  ]
[ 486@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:oid],cst:oid):bat[:any$1,:bit] address CMDcmpaccumLEcst;"								  ]
[ 487@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:oid],cst:oid):bat[:any$1,:bit] address CMDcmpLEcst;"											  ]
[ 488@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:oid],c:bat[:any$1,:oid]):bat[:any$1,:bit] address CMDcmpaccumLE;"							  ]
[ 489@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:oid],c:bat[:any$1,:oid]):bat[:any$1,:bit] address CMDcmpLE;"										  ]
[ 490@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:oid],cst:oid):bat[:any$1,:bit] address CMDcmpaccumLTcst;"								  ]
[ 491@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:oid],cst:oid):bat[:any$1,:bit] address CMDcmpLTcst;"											  ]
[ 492@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:oid],c:bat[:any$1,:oid]):bat[:any$1,:bit] address CMDcmpaccumLT;"							  ]
[ 493@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:oid],c:bat[:any$1,:oid]):bat[:any$1,:bit] address CMDcmpLT;"										  ]
[ 494@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:flt],cst:flt):bat[:any$1,:bit] address CMDcmpaccumLEcst;"								  ]
[ 495@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:flt],cst:flt):bat[:any$1,:bit] address CMDcmpLEcst;"											  ]
[ 496@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:flt],c:bat[:any$1,:flt]):bat[:any$1,:bit] address CMDcmpaccumLE;"							  ]
[ 497@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:flt],c:bat[:any$1,:flt]):bat[:any$1,:bit] address CMDcmpLE;"										  ]
[ 498@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:flt],cst:flt):bat[:any$1,:bit] address CMDcmpaccumLTcst;"								  ]
[ 499@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:flt],cst:flt):bat[:any$1,:bit] address CMDcmpLTcst;"											  ]
[ 500@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:flt],c:bat[:any$1,:flt]):bat[:any$1,:bit] address CMDcmpaccumLT;"							  ]
[ 501@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:flt],c:bat[:any$1,:flt]):bat[:any$1,:bit] address CMDcmpLT;"										  ]
[ 502@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:dbl],cst:dbl):bat[:any$1,:bit] address CMDcmpaccumLEcst;"								  ]
[ 503@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:dbl],cst:dbl):bat[:any$1,:bit] address CMDcmpLEcst;"											  ]
[ 504@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:dbl],c:bat[:any$1,:dbl]):bat[:any$1,:bit] address CMDcmpaccumLE;"							  ]
[ 505@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:dbl],c:bat[:any$1,:dbl]):bat[:any$1,:bit] address CMDcmpLE;"										  ]
[ 506@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:dbl],cst:dbl):bat[:any$1,:bit] address CMDcmpaccumLTcst;"								  ]
[ 507@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:dbl],cst:dbl):bat[:any$1,:bit] address CMDcmpLTcst;"											  ]
[ 508@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:dbl],c:bat[:any$1,:dbl]):bat[:any$1,:bit] address CMDcmpaccumLT;"							  ]
[ 509@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:dbl],c:bat[:any$1,:dbl]):bat[:any$1,:bit] address CMDcmpLT;"										  ]
[ 510@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpaccumLEcst;"								  ]
[ 511@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpLEcst;"											  ]
[ 512@0,  "command",	  "batcalc",		  "<=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpaccumLE;"							  ]
[ 513@0,  "command",	  "batcalc",		  "<=",			  "(b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpLE;"										  ]
[ 514@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpaccumLTcst;"								  ]
[ 515@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpLTcst;"											  ]
[ 516@0,  "command",	  "batcalc",		  "<",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpaccumLT;"							  ]
[ 517@0,  "command",	  "batcalc",		  "<",			  "(b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpLT;"										  ]
[ 518@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:lng],cst:lng):bat[:any$1,:bit] address CMDcmpaccumEQcst;"								  ]
[ 519@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:lng],cst:lng):bat[:any$1,:bit] address CMDcmpEQcst;"											  ]
[ 520@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:lng],c:bat[:any$1,:lng]):bat[:any$1,:bit] address CMDcmpaccumEQ;"							  ]
[ 521@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:lng],c:bat[:any$1,:lng]):bat[:any$1,:bit] address CMDcmpEQ;"										  ]
[ 522@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:int],cst:int):bat[:any$1,:bit] address CMDcmpaccumEQcst;"								  ]
[ 523@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:int],cst:int):bat[:any$1,:bit] address CMDcmpEQcst;"											  ]
[ 524@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:int],c:bat[:any$1,:int]):bat[:any$1,:bit] address CMDcmpaccumEQ;"							  ]
[ 525@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:int],c:bat[:any$1,:int]):bat[:any$1,:bit] address CMDcmpEQ;"										  ]
[ 526@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:sht],cst:sht):bat[:any$1,:bit] address CMDcmpaccumEQcst;"								  ]
[ 527@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:sht],cst:sht):bat[:any$1,:bit] address CMDcmpEQcst;"											  ]
[ 528@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:sht],c:bat[:any$1,:sht]):bat[:any$1,:bit] address CMDcmpaccumEQ;"							  ]
[ 529@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:sht],c:bat[:any$1,:sht]):bat[:any$1,:bit] address CMDcmpEQ;"										  ]
[ 530@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:oid],cst:oid):bat[:any$1,:bit] address CMDcmpaccumEQcst;"								  ]
[ 531@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:oid],cst:oid):bat[:any$1,:bit] address CMDcmpEQcst;"											  ]
[ 532@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:oid],c:bat[:any$1,:oid]):bat[:any$1,:bit] address CMDcmpaccumEQ;"							  ]
[ 533@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:oid],c:bat[:any$1,:oid]):bat[:any$1,:bit] address CMDcmpEQ;"										  ]
[ 534@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:flt],cst:flt):bat[:any$1,:bit] address CMDcmpaccumEQcst;"								  ]
[ 535@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:flt],cst:flt):bat[:any$1,:bit] address CMDcmpEQcst;"											  ]
[ 536@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:flt],c:bat[:any$1,:flt]):bat[:any$1,:bit] address CMDcmpaccumEQ;"							  ]
[ 537@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:flt],c:bat[:any$1,:flt]):bat[:any$1,:bit] address CMDcmpEQ;"										  ]
[ 538@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:dbl],cst:dbl):bat[:any$1,:bit] address CMDcmpaccumEQcst;"								  ]
[ 539@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:dbl],cst:dbl):bat[:any$1,:bit] address CMDcmpEQcst;"											  ]
[ 540@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:dbl],c:bat[:any$1,:dbl]):bat[:any$1,:bit] address CMDcmpaccumEQ;"							  ]
[ 541@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:dbl],c:bat[:any$1,:dbl]):bat[:any$1,:bit] address CMDcmpEQ;"										  ]
[ 542@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpaccumEQcst;"								  ]
[ 543@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpEQcst;"											  ]
[ 544@0,  "command",	  "batcalc",		  "==",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpaccumEQ;"							  ]
[ 545@0,  "command",	  "batcalc",		  "==",			  "(b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpEQ;"										  ]
[ 546@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:lng],cst:lng):bat[:any$1,:bit] address CMDcmpaccumGEcst;"								  ]
[ 547@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:lng],cst:lng):bat[:any$1,:bit] address CMDcmpGEcst;"											  ]
[ 548@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:lng],c:bat[:any$1,:lng]):bat[:any$1,:bit] address CMDcmpaccumGE;"							  ]
[ 549@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:lng],c:bat[:any$1,:lng]):bat[:any$1,:bit] address CMDcmpGE;"										  ]
[ 550@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:lng],cst:lng):bat[:any$1,:bit] address CMDcmpaccumGTcst;"								  ]
[ 551@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:lng],cst:lng):bat[:any$1,:bit] address CMDcmpGTcst;"											  ]
[ 552@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:lng],c:bat[:any$1,:lng]):bat[:any$1,:bit] address CMDcmpaccumGT;"							  ]
[ 553@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:lng],c:bat[:any$1,:lng]):bat[:any$1,:bit] address CMDcmpGT;"										  ]
[ 554@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:int],cst:int):bat[:any$1,:bit] address CMDcmpaccumGEcst;"								  ]
[ 555@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:int],cst:int):bat[:any$1,:bit] address CMDcmpGEcst;"											  ]
[ 556@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:int],c:bat[:any$1,:int]):bat[:any$1,:bit] address CMDcmpaccumGE;"							  ]
[ 557@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:int],c:bat[:any$1,:int]):bat[:any$1,:bit] address CMDcmpGE;"										  ]
[ 558@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:int],cst:int):bat[:any$1,:bit] address CMDcmpaccumGTcst;"								  ]
[ 559@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:int],cst:int):bat[:any$1,:bit] address CMDcmpGTcst;"											  ]
[ 560@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:int],c:bat[:any$1,:int]):bat[:any$1,:bit] address CMDcmpaccumGT;"							  ]
[ 561@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:int],c:bat[:any$1,:int]):bat[:any$1,:bit] address CMDcmpGT;"										  ]
[ 562@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:sht],cst:sht):bat[:any$1,:bit] address CMDcmpaccumGEcst;"								  ]
[ 563@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:sht],cst:sht):bat[:any$1,:bit] address CMDcmpGEcst;"											  ]
[ 564@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:sht],c:bat[:any$1,:sht]):bat[:any$1,:bit] address CMDcmpaccumGE;"							  ]
[ 565@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:sht],c:bat[:any$1,:sht]):bat[:any$1,:bit] address CMDcmpGE;"										  ]
[ 566@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:sht],cst:sht):bat[:any$1,:bit] address CMDcmpaccumGTcst;"								  ]
[ 567@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:sht],cst:sht):bat[:any$1,:bit] address CMDcmpGTcst;"											  ]
[ 568@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:sht],c:bat[:any$1,:sht]):bat[:any$1,:bit] address CMDcmpaccumGT;"							  ]
[ 569@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:sht],c:bat[:any$1,:sht]):bat[:any$1,:bit] address CMDcmpGT;"										  ]
[ 570@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:oid],cst:oid):bat[:any$1,:bit] address CMDcmpaccumGEcst;"								  ]
[ 571@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:oid],cst:oid):bat[:any$1,:bit] address CMDcmpGEcst;"											  ]
[ 572@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:oid],c:bat[:any$1,:oid]):bat[:any$1,:bit] address CMDcmpaccumGE;"							  ]
[ 573@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:oid],c:bat[:any$1,:oid]):bat[:any$1,:bit] address CMDcmpGE;"										  ]
[ 574@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:oid],cst:oid):bat[:any$1,:bit] address CMDcmpaccumGTcst;"								  ]
[ 575@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:oid],cst:oid):bat[:any$1,:bit] address CMDcmpGTcst;"											  ]
[ 576@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:oid],c:bat[:any$1,:oid]):bat[:any$1,:bit] address CMDcmpaccumGT;"							  ]
[ 577@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:oid],c:bat[:any$1,:oid]):bat[:any$1,:bit] address CMDcmpGT;"										  ]
[ 578@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:flt],cst:flt):bat[:any$1,:bit] address CMDcmpaccumGEcst;"								  ]
[ 579@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:flt],cst:flt):bat[:any$1,:bit] address CMDcmpGEcst;"											  ]
[ 580@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:flt],c:bat[:any$1,:flt]):bat[:any$1,:bit] address CMDcmpaccumGE;"							  ]
[ 581@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:flt],c:bat[:any$1,:flt]):bat[:any$1,:bit] address CMDcmpGE;"										  ]
[ 582@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:flt],cst:flt):bat[:any$1,:bit] address CMDcmpaccumGTcst;"								  ]
[ 583@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:flt],cst:flt):bat[:any$1,:bit] address CMDcmpGTcst;"											  ]
[ 584@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:flt],c:bat[:any$1,:flt]):bat[:any$1,:bit] address CMDcmpaccumGT;"							  ]
[ 585@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:flt],c:bat[:any$1,:flt]):bat[:any$1,:bit] address CMDcmpGT;"										  ]
[ 586@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:dbl],cst:dbl):bat[:any$1,:bit] address CMDcmpaccumGEcst;"								  ]
[ 587@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:dbl],cst:dbl):bat[:any$1,:bit] address CMDcmpGEcst;"											  ]
[ 588@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:dbl],c:bat[:any$1,:dbl]):bat[:any$1,:bit] address CMDcmpaccumGE;"							  ]
[ 589@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:dbl],c:bat[:any$1,:dbl]):bat[:any$1,:bit] address CMDcmpGE;"										  ]
[ 590@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:dbl],cst:dbl):bat[:any$1,:bit] address CMDcmpaccumGTcst;"								  ]
[ 591@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:dbl],cst:dbl):bat[:any$1,:bit] address CMDcmpGTcst;"											  ]
[ 592@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:dbl],c:bat[:any$1,:dbl]):bat[:any$1,:bit] address CMDcmpaccumGT;"							  ]
[ 593@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:dbl],c:bat[:any$1,:dbl]):bat[:any$1,:bit] address CMDcmpGT;"										  ]
[ 594@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpaccumGEcst;"								  ]
[ 595@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpGEcst;"											  ]
[ 596@0,  "command",	  "batcalc",		  ">=",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpaccumGE;"							  ]
[ 597@0,  "command",	  "batcalc",		  ">=",			  "(b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpGE;"										  ]
[ 598@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpaccumGTcst;"								  ]
[ 599@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpGTcst;"											  ]
[ 600@0,  "command",	  "batcalc",		  ">",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpaccumGT;"							  ]
[ 601@0,  "command",	  "batcalc",		  ">",			  "(b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpGT;"										  ]
[ 602@0,  "command",	  "batcalc",		  "atan2",		  "(x:bat[:any$1,:dbl],y:dbl):bat[:any$1,:dbl] address CMDscience_atan2;"										  ]
[ 603@0,  "command",	  "batcalc",		  "atan",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_atan;"											  ]
[ 604@0,  "command",	  "batcalc",		  "acos",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_acos;"											  ]
[ 605@0,  "command",	  "batcalc",		  "asin",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_asin;"											  ]
[ 606@0,  "command",	  "batcalc",		  "and",		  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpaccumANDcst;"								  ]
[ 607@0,  "command",	  "batcalc",		  "and",		  "(b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpANDcst;"											  ]
[ 608@0,  "command",	  "batcalc",		  "and",		  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpaccumAND;"							  ]
[ 609@0,  "command",	  "batcalc",		  "and",		  "(b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpAND;"										  ]
[ 610@0,  "command",	  "batcalc",		  "ceil",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_ceil;"											  ]
[ 611@0,  "command",	  "batcalc",		  "cosh",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_cosh;"											  ]
[ 612@0,  "command",	  "batcalc",		  "cos",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_cos;"											  ]
[ 613@0,  "command",	  "batcalc",		  "dbl",		  "(b:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDconvertdbl_dbl;"											  ]
[ 614@0,  "command",	  "batcalc",		  "dbl",		  "(b:bat[:any$1,:flt]):bat[:any$1,:dbl] address CMDconvertflt_dbl;"											  ]
[ 615@0,  "command",	  "batcalc",		  "dbl",		  "(b:bat[:any$1,:lng]):bat[:any$1,:dbl] address CMDconvertlng_dbl;"											  ]
[ 616@0,  "command",	  "batcalc",		  "dbl",		  "(b:bat[:any$1,:int]):bat[:any$1,:dbl] address CMDconvertint_dbl;"											  ]
[ 617@0,  "command",	  "batcalc",		  "dbl",		  "(b:bat[:any$1,:sht]):bat[:any$1,:dbl] address CMDconvertsht_dbl;"											  ]
[ 618@0,  "command",	  "batcalc",		  "exp",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_exp;"											  ]
[ 619@0,  "command",	  "batcalc",		  "fmod",		  "(x:bat[:any$1,:dbl],y:dbl):bat[:any$1,:dbl] address CMDscience_fmod;"										  ]
[ 620@0,  "command",	  "batcalc",		  "floor",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_floor;"											  ]
[ 621@0,  "command",	  "batcalc",		  "fabs",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_fabs;"											  ]
[ 622@0,  "command",	  "batcalc",		  "flt",		  "(b:bat[:any$1,:dbl]):bat[:any$1,:flt] address CMDconvertdbl_flt;"											  ]
[ 623@0,  "command",	  "batcalc",		  "flt",		  "(b:bat[:any$1,:flt]):bat[:any$1,:flt] address CMDconvertflt_flt;"											  ]
[ 624@0,  "command",	  "batcalc",		  "flt",		  "(b:bat[:any$1,:lng]):bat[:any$1,:flt] address CMDconvertlng_flt;"											  ]
[ 625@0,  "command",	  "batcalc",		  "flt",		  "(b:bat[:any$1,:int]):bat[:any$1,:flt] address CMDconvertint_flt;"											  ]
[ 626@0,  "command",	  "batcalc",		  "flt",		  "(b:bat[:any$1,:sht]):bat[:any$1,:flt] address CMDconvertsht_flt;"											  ]
[ 627@0,  "command",	  "batcalc",		  "int",		  "(b:bat[:any$1,:str]):bat[:any$1,:int] address CMDconvertstr_int;"											  ]
[ 628@0,  "command",	  "batcalc",		  "int",		  "(b:bat[:any$1,:dbl]):bat[:any$1,:int] address CMDconvertdbl_int;"											  ]
[ 629@0,  "command",	  "batcalc",		  "int",		  "(b:bat[:any$1,:flt]):bat[:any$1,:int] address CMDconvertflt_int;"											  ]
[ 630@0,  "command",	  "batcalc",		  "int",		  "(b:bat[:any$1,:lng]):bat[:any$1,:int] address CMDconvertlng_int;"											  ]
[ 631@0,  "command",	  "batcalc",		  "int",		  "(b:bat[:any$1,:int]):bat[:any$1,:int] address CMDconvertint_int;"											  ]
[ 632@0,  "command",	  "batcalc",		  "int",		  "(b:bat[:any$1,:sht]):bat[:any$1,:int] address CMDconvertsht_int;"											  ]
[ 633@0,  "command",	  "batcalc",		  "ifthenelse",		  "(b:bat[:any$1,:bit],v:dbl,w:dbl):bat[:any$1,:dbl] address CMDifThenElseCst_dbl;"									  ]
[ 634@0,  "command",	  "batcalc",		  "ifthen",		  "(b:bat[:any$1,:bit],v:dbl):bat[:any$1,:dbl] address CMDifThenCst_dbl;"										  ]
[ 635@0,  "command",	  "batcalc",		  "ifthenelse",		  "(b:bat[:any$1,:bit],v:flt,w:flt):bat[:any$1,:flt] address CMDifThenElseCst_flt;"									  ]
[ 636@0,  "command",	  "batcalc",		  "ifthen",		  "(b:bat[:any$1,:bit],v:flt):bat[:any$1,:flt] address CMDifThenCst_flt;"										  ]
[ 637@0,  "command",	  "batcalc",		  "ifthenelse",		  "(b:bat[:any$1,:bit],v:lng,w:lng):bat[:any$1,:lng] address CMDifThenElseCst_lng;"									  ]
[ 638@0,  "command",	  "batcalc",		  "ifthen",		  "(b:bat[:any$1,:bit],v:lng):bat[:any$1,:lng] address CMDifThenCst_lng;"										  ]
[ 639@0,  "command",	  "batcalc",		  "ifthenelse",		  "(b:bat[:any$1,:bit],v:sht,w:sht):bat[:any$1,:sht] address CMDifThenElseCst_sht;"									  ]
[ 640@0,  "command",	  "batcalc",		  "ifthen",		  "(b:bat[:any$1,:bit],v:sht):bat[:any$1,:sht] address CMDifThenCst_sht;"										  ]
[ 641@0,  "command",	  "batcalc",		  "ifthenelse",		  "(b:bat[:any$1,:bit],v:int,w:int):bat[:any$1,:int] address CMDifThenElseCst_int;"									  ]
[ 642@0,  "command",	  "batcalc",		  "ifthen",		  "(b:bat[:any$1,:bit],v:int):bat[:any$1,:int] address CMDifThenCst_int;"										  ]
[ 643@0,  "command",	  "batcalc",		  "ifthenelse",		  "(b:bat[:any$1,:bit],v:oid,w:oid):bat[:any$1,:oid] address CMDifThenElseCst_oid;"									  ]
[ 644@0,  "command",	  "batcalc",		  "ifthen",		  "(b:bat[:any$1,:bit],v:oid):bat[:any$1,:oid] address CMDifThenCst_oid;"										  ]
[ 645@0,  "command",	  "batcalc",		  "ifthenelse",		  "(b:bat[:any$1,:bit],v:str,w:str):bat[:any$1,:str] address CMDifThenElseCst_str;"									  ]
[ 646@0,  "command",	  "batcalc",		  "ifthen",		  "(b:bat[:any$1,:bit],v:str):bat[:any$1,:str] address CMDifThenCst_str;"										  ]
[ 647@0,  "command",	  "batcalc",		  "ifthenelse",		  "(b:bat[:any$1,:bit],v:chr,w:chr):bat[:any$1,:chr] address CMDifThenElseCst_chr;"									  ]
[ 648@0,  "command",	  "batcalc",		  "ifthen",		  "(b:bat[:any$1,:bit],v:chr):bat[:any$1,:chr] address CMDifThenCst_chr;"										  ]
[ 649@0,  "command",	  "batcalc",		  "ifthenelse",		  "(b:bat[:any$1,:bit],v:bit,w:bit):bat[:any$1,:bit] address CMDifThenElseCst_bit;"									  ]
[ 650@0,  "command",	  "batcalc",		  "ifthen",		  "(b:bat[:any$1,:bit],v:bit):bat[:any$1,:bit] address CMDifThenCst_bit;"										  ]
[ 651@0,  "command",	  "batcalc",		  "ifthenelse",		  "(b:bat[:any,:bit],t:bat[:any$1,:any$2],e:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDifThenElse;"						  ]
[ 652@0,  "command",	  "batcalc",		  "ifthen",		  "(b:bat[:any$1,:bit],t:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDifThen;"									  ]
[ 653@0,  "command",	  "batcalc",		  "ifthenelse",		  "(b:bat[:any$1,:bit],t:bat[:any$1,:any$2],e:any$2):bat[:any$1,:any$2] address CMDifThenElseCst2;"							  ]
[ 654@0,  "command",	  "batcalc",		  "ifthenelse",		  "(b:bat[:any$1,:bit],e:any$2,t:bat[:any$1,:any$2]):bat[:any$1,:any$2] address CMDifThenElseCst1;"							  ]
[ 655@0,  "command",	  "batcalc",		  "log10",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_log10;"											  ]
[ 656@0,  "command",	  "batcalc",		  "log",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_log;"											  ]
[ 657@0,  "command",	  "batcalc",		  "lng",		  "(b:bat[:any$1,:dbl]):bat[:any$1,:lng] address CMDconvertdbl_lng;"											  ]
[ 658@0,  "command",	  "batcalc",		  "lng",		  "(b:bat[:any$1,:flt]):bat[:any$1,:lng] address CMDconvertflt_lng;"											  ]
[ 659@0,  "command",	  "batcalc",		  "lng",		  "(b:bat[:any$1,:lng]):bat[:any$1,:lng] address CMDconvertlng_lng;"											  ]
[ 660@0,  "command",	  "batcalc",		  "lng",		  "(b:bat[:any$1,:int]):bat[:any$1,:lng] address CMDconvertint_lng;"											  ]
[ 661@0,  "command",	  "batcalc",		  "lng",		  "(b:bat[:any$1,:sht]):bat[:any$1,:lng] address CMDconvertsht_lng;"											  ]
[ 662@0,  "command",	  "batcalc",		  "match",		  "(b:bat[:any$1,:str],pat:str):bat[:any$1,:bit] address CMDmatchStr;"											  ]
[ 663@0,  "command",	  "batcalc",		  "not",		  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDbitbataccumNOT;"									  ]
[ 664@0,  "command",	  "batcalc",		  "not",		  "(b:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDbitbatNOT;"												  ]
[ 665@0,  "command",	  "batcalc",		  "oid",		  "(b:bat[:oid,:any$1]):bat[:oid,:any$1] address CMDconvertoid_oid;"											  ]
[ 666@0,  "command",	  "batcalc",		  "oid",		  "(b:bat[:void,:any$1]):bat[:oid,:any$1] address CMDconvertvoid_oid;"											  ]
[ 667@0,  "command",	  "batcalc",		  "or",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpaccumORcst;"								  ]
[ 668@0,  "command",	  "batcalc",		  "or",			  "(b:bat[:any$1,:bit],cst:bit):bat[:any$1,:bit] address CMDcmpORcst;"											  ]
[ 669@0,  "command",	  "batcalc",		  "or",			  "(a:bat[:any$1,:bit],b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpaccumOR;"							  ]
[ 670@0,  "command",	  "batcalc",		  "or",			  "(b:bat[:any$1,:bit],c:bat[:any$1,:bit]):bat[:any$1,:bit] address CMDcmpOR;"										  ]
[ 671@0,  "command",	  "batcalc",		  "pow",		  "(x:bat[:any$1,:dbl],y:dbl):bat[:any$1,:dbl] address CMDscience_pow;"											  ]
[ 672@0,  "command",	  "batcalc",		  "sqrt",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_sqrt;"											  ]
[ 673@0,  "command",	  "batcalc",		  "sinh",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_sinh;"											  ]
[ 674@0,  "command",	  "batcalc",		  "sin",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_sin;"											  ]
[ 675@0,  "command",	  "batcalc",		  "sht",		  "(b:bat[:any$1,:dbl]):bat[:any$1,:sht] address CMDconvertdbl_sht;"											  ]
[ 676@0,  "command",	  "batcalc",		  "sht",		  "(b:bat[:any$1,:flt]):bat[:any$1,:sht] address CMDconvertflt_sht;"											  ]
[ 677@0,  "command",	  "batcalc",		  "sht",		  "(b:bat[:any$1,:lng]):bat[:any$1,:sht] address CMDconvertlng_sht;"											  ]
[ 678@0,  "command",	  "batcalc",		  "sht",		  "(b:bat[:any$1,:int]):bat[:any$1,:sht] address CMDconvertint_sht;"											  ]
[ 679@0,  "command",	  "batcalc",		  "sht",		  "(b:bat[:any$1,:sht]):bat[:any$1,:sht] address CMDconvertsht_sht;"											  ]
[ 680@0,  "command",	  "batcalc",		  "tanh",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_tanh;"											  ]
[ 681@0,  "command",	  "batcalc",		  "tan",		  "(x:bat[:any$1,:dbl]):bat[:any$1,:dbl] address CMDscience_tan;"											  ]
[ 682@0,  "command",	  "batcalc",		  "zipper",		  "(b:bat[:any$1,:any],v:dbl):bat[:any$1,:dbl] address CMDfilltail_dbl;"										  ]
[ 683@0,  "command",	  "batcalc",		  "zipper",		  "(v:dbl,b:bat[:any,:any$1]):bat[:dbl,:any$1] address CMDfillhead_dbl;"										  ]
[ 684@0,  "command",	  "batcalc",		  "zipper",		  "(b:bat[:any$1,:any],v:flt):bat[:any$1,:flt] address CMDfilltail_flt;"										  ]
[ 685@0,  "command",	  "batcalc",		  "zipper",		  "(v:flt,b:bat[:any,:any$1]):bat[:flt,:any$1] address CMDfillhead_flt;"										  ]
[ 686@0,  "command",	  "batcalc",		  "zipper",		  "(b:bat[:any$1,:any],v:lng):bat[:any$1,:lng] address CMDfilltail_lng;"										  ]
[ 687@0,  "command",	  "batcalc",		  "zipper",		  "(v:lng,b:bat[:any,:any$1]):bat[:lng,:any$1] address CMDfillhead_lng;"										  ]
[ 688@0,  "command",	  "batcalc",		  "zipper",		  "(b:bat[:any$1,:any],v:sht):bat[:any$1,:sht] address CMDfilltail_sht;"										  ]
[ 689@0,  "command",	  "batcalc",		  "zipper",		  "(v:sht,b:bat[:any,:any$1]):bat[:sht,:any$1] address CMDfillhead_sht;"										  ]
[ 690@0,  "command",	  "batcalc",		  "zipper",		  "(b:bat[:any$1,:any],v:int):bat[:any$1,:int] address CMDfilltail_int;"										  ]
[ 691@0,  "command",	  "batcalc",		  "zipper",		  "(v:int,b:bat[:any,:any$1]):bat[:int,:any$1] address CMDfillhead_int;"										  ]
[ 692@0,  "command",	  "batcalc",		  "zipper",		  "(b:bat[:any$1,:any],v:oid):bat[:any$1,:oid] address CMDfilltail_oid;"										  ]
[ 693@0,  "command",	  "batcalc",		  "zipper",		  "(v:oid,b:bat[:any,:any$1]):bat[:oid,:any$1] address CMDfillhead_oid;"										  ]
[ 694@0,  "command",	  "batcalc",		  "zipper",		  "(b:bat[:any$1,:any],v:str):bat[:any$1,:str] address CMDfilltail_str;"										  ]
[ 695@0,  "command",	  "batcalc",		  "zipper",		  "(v:str,b:bat[:any,:any$1]):bat[:str,:any$1] address CMDfillhead_str;"										  ]
[ 696@0,  "command",	  "batcalc",		  "zipper",		  "(b:bat[:any$1,:any],v:chr):bat[:any$1,:chr] address CMDfilltail_chr;"										  ]
[ 697@0,  "command",	  "batcalc",		  "zipper",		  "(v:chr,b:bat[:any,:any$1]):bat[:chr,:any$1] address CMDfillhead_chr;"										  ]
[ 698@0,  "command",	  "batcalc",		  "zipper",		  "(b:bat[:any$1,:any],v:bit):bat[:any$1,:bit] address CMDfilltail_bit;"										  ]
[ 699@0,  "command",	  "batcalc",		  "zipper",		  "(v:bit,b:bat[:any,:any$1]):bat[:bit,:any$1] address CMDfillhead_bit;"										  ]
[ 700@0,  "command",	  "calc",		  "!=",			  "(left:str,right:str):bit address CALCcompNEQstrstr;"													  ]
[ 701@0,  "command",	  "calc",		  "!=",			  "(left:lng,right:lng):bit address CALCcompNEQlnglng;"													  ]
[ 702@0,  "command",	  "calc",		  "!=",			  "(left:lng,right:int):bit address CALCcompNEQlngint;"													  ]
[ 703@0,  "command",	  "calc",		  "!=",			  "(left:lng,right:sht):bit address CALCcompNEQlngsht;"													  ]
[ 704@0,  "command",	  "calc",		  "!=",			  "(left:lng,right:chr):bit address CALCcompNEQlngchr;"													  ]
[ 705@0,  "command",	  "calc",		  "!=",			  "(left:int,right:lng):bit address CALCcompNEQintlng;"													  ]
[ 706@0,  "command",	  "calc",		  "!=",			  "(left:int,right:int):bit address CALCcompNEQintint;"													  ]
[ 707@0,  "command",	  "calc",		  "!=",			  "(left:int,right:sht):bit address CALCcompNEQintsht;"													  ]
[ 708@0,  "command",	  "calc",		  "!=",			  "(left:int,right:chr):bit address CALCcompNEQintchr;"													  ]
[ 709@0,  "command",	  "calc",		  "!=",			  "(left:sht,right:lng):bit address CALCcompNEQshtlng;"													  ]
[ 710@0,  "command",	  "calc",		  "!=",			  "(left:sht,right:int):bit address CALCcompNEQshtint;"													  ]
[ 711@0,  "command",	  "calc",		  "!=",			  "(left:sht,right:sht):bit address CALCcompNEQshtsht;"													  ]
[ 712@0,  "command",	  "calc",		  "!=",			  "(left:sht,right:chr):bit address CALCcompNEQshtchr;"													  ]
[ 713@0,  "command",	  "calc",		  "!=",			  "(left:bit,right:lng):bit address CALCcompNEQbitlng;"													  ]
[ 714@0,  "command",	  "calc",		  "!=",			  "(left:bit,right:int):bit address CALCcompNEQbitint;"													  ]
[ 715@0,  "command",	  "calc",		  "!=",			  "(left:bit,right:sht):bit address CALCcompNEQbitsht;"													  ]
[ 716@0,  "command",	  "calc",		  "!=",			  "(left:bit,right:chr):bit address CALCcompNEQbitchr;"													  ]
[ 717@0,  "command",	  "calc",		  "!=",			  "(left:chr,right:lng):bit address CALCcompNEQchrlng;"													  ]
[ 718@0,  "command",	  "calc",		  "!=",			  "(left:chr,right:int):bit address CALCcompNEQchrint;"													  ]
[ 719@0,  "command",	  "calc",		  "!=",			  "(left:chr,right:sht):bit address CALCcompNEQchrsht;"													  ]
[ 720@0,  "command",	  "calc",		  "!=",			  "(left:chr,right:chr):bit address CALCcompNEQchrchr;"													  ]
[ 721@0,  "command",	  "calc",		  "!=",			  "(left:dbl,right:dbl):bit address CALCcompNEQdbldbl;"													  ]
[ 722@0,  "command",	  "calc",		  "!=",			  "(left:flt,right:dbl):bit address CALCcompNEQfltdbl;"													  ]
[ 723@0,  "command",	  "calc",		  "!=",			  "(left:flt,right:flt):bit address CALCcompNEQfltflt;"													  ]
[ 724@0,  "command",	  "calc",		  "!=",			  "(left:oid,right:oid):bit address CALCcompNEQoidoid;"													  ]
[ 725@0,  "command",	  "calc",		  "%",			  "(left:int,right:sht):sht address CALCbinaryMODintsht;"												  ]
[ 726@0,  "command",	  "calc",		  "%",			  "(left:int,right:chr):chr address CALCbinaryMODintchr;"												  ]
[ 727@0,  "command",	  "calc",		  "%",			  "(left:lng,right:lng):lng address CALCbinaryMODlnglng;"												  ]
[ 728@0,  "command",	  "calc",		  "%",			  "(left:lng,right:int):int address CALCbinaryMODlngint;"												  ]
[ 729@0,  "command",	  "calc",		  "%",			  "(left:int,right:int):int address CALCbinaryMODintint;"												  ]
[ 730@0,  "command",	  "calc",		  "%",			  "(left:sht,right:int):int address CALCbinaryMODshtint;"												  ]
[ 731@0,  "command",	  "calc",		  "%",			  "(left:chr,right:int):int address CALCbinaryMODchrint;"												  ]
[ 732@0,  "command",	  "calc",		  "*",			  "(left:lng,right:dbl):dbl address CALCbinaryMULlngdbl;"												  ]
[ 733@0,  "command",	  "calc",		  "*",			  "(left:lng,right:flt):flt address CALCbinaryMULlngflt;"												  ]
[ 734@0,  "command",	  "calc",		  "*",			  "(left:lng,right:lng):lng address CALCbinaryMULlnglng;"												  ]
[ 735@0,  "command",	  "calc",		  "*",			  "(left:lng,right:int):lng address CALCbinaryMULlngint;"												  ]
[ 736@0,  "command",	  "calc",		  "*",			  "(left:lng,right:sht):lng address CALCbinaryMULlngsht;"												  ]
[ 737@0,  "command",	  "calc",		  "*",			  "(left:lng,right:chr):lng address CALCbinaryMULlngchr;"												  ]
[ 738@0,  "command",	  "calc",		  "*",			  "(left:int,right:dbl):dbl address CALCbinaryMULintdbl;"												  ]
[ 739@0,  "command",	  "calc",		  "*",			  "(left:int,right:flt):flt address CALCbinaryMULintflt;"												  ]
[ 740@0,  "command",	  "calc",		  "*",			  "(left:int,right:lng):lng address CALCbinaryMULintlng;"												  ]
[ 741@0,  "command",	  "calc",		  "*",			  "(left:int,right:int):int address CALCbinaryMULintint;"												  ]
[ 742@0,  "command",	  "calc",		  "*",			  "(left:int,right:sht):int address CALCbinaryMULintsht;"												  ]
[ 743@0,  "command",	  "calc",		  "*",			  "(left:int,right:chr):int address CALCbinaryMULintchr;"												  ]
[ 744@0,  "command",	  "calc",		  "*",			  "(left:sht,right:dbl):dbl address CALCbinaryMULshtdbl;"												  ]
[ 745@0,  "command",	  "calc",		  "*",			  "(left:sht,right:flt):flt address CALCbinaryMULshtflt;"												  ]
[ 746@0,  "command",	  "calc",		  "*",			  "(left:sht,right:lng):lng address CALCbinaryMULshtlng;"												  ]
[ 747@0,  "command",	  "calc",		  "*",			  "(left:sht,right:int):int address CALCbinaryMULshtint;"												  ]
[ 748@0,  "command",	  "calc",		  "*",			  "(left:sht,right:sht):sht address CALCbinaryMULshtsht;"												  ]
[ 749@0,  "command",	  "calc",		  "*",			  "(left:sht,right:chr):sht address CALCbinaryMULshtchr;"												  ]
[ 750@0,  "command",	  "calc",		  "*",			  "(left:chr,right:dbl):dbl address CALCbinaryMULchrdbl;"												  ]
[ 751@0,  "command",	  "calc",		  "*",			  "(left:chr,right:flt):flt address CALCbinaryMULchrflt;"												  ]
[ 752@0,  "command",	  "calc",		  "*",			  "(left:chr,right:lng):lng address CALCbinaryMULchrlng;"												  ]
[ 753@0,  "command",	  "calc",		  "*",			  "(left:chr,right:int):int address CALCbinaryMULchrint;"												  ]
[ 754@0,  "command",	  "calc",		  "*",			  "(left:chr,right:sht):sht address CALCbinaryMULchrsht;"												  ]
[ 755@0,  "command",	  "calc",		  "*",			  "(left:chr,right:chr):chr address CALCbinaryMULchrchr;"												  ]
[ 756@0,  "command",	  "calc",		  "*",			  "(left:oid,right:oid):oid address CALCbinaryMULoidoid;"												  ]
[ 757@0,  "command",	  "calc",		  "*",			  "(left:dbl,right:dbl):dbl address CALCbinaryMULdbldbl;"												  ]
[ 758@0,  "command",	  "calc",		  "*",			  "(left:dbl,right:flt):dbl address CALCbinaryMULdblflt;"												  ]
[ 759@0,  "command",	  "calc",		  "*",			  "(left:dbl,right:lng):dbl address CALCbinaryMULdbllng;"												  ]
[ 760@0,  "command",	  "calc",		  "*",			  "(left:dbl,right:int):dbl address CALCbinaryMULdblint;"												  ]
[ 761@0,  "command",	  "calc",		  "*",			  "(left:dbl,right:sht):dbl address CALCbinaryMULdblsht;"												  ]
[ 762@0,  "command",	  "calc",		  "*",			  "(left:dbl,right:chr):dbl address CALCbinaryMULdblchr;"												  ]
[ 763@0,  "command",	  "calc",		  "*",			  "(left:flt,right:dbl):dbl address CALCbinaryMULfltdbl;"												  ]
[ 764@0,  "command",	  "calc",		  "*",			  "(left:flt,right:flt):flt address CALCbinaryMULfltflt;"												  ]
[ 765@0,  "command",	  "calc",		  "*",			  "(left:flt,right:lng):flt address CALCbinaryMULfltlng;"												  ]
[ 766@0,  "command",	  "calc",		  "*",			  "(left:flt,right:int):flt address CALCbinaryMULfltint;"												  ]
[ 767@0,  "command",	  "calc",		  "*",			  "(left:flt,right:sht):flt address CALCbinaryMULfltsht;"												  ]
[ 768@0,  "command",	  "calc",		  "*",			  "(left:flt,right:chr):flt address CALCbinaryMULfltchr;"												  ]
[ 769@0,  "command",	  "calc",		  "+",			  "(left:lng,right:dbl):dbl address CALCbinaryADDlngdbl;"												  ]
[ 770@0,  "command",	  "calc",		  "+",			  "(left:lng,right:flt):flt address CALCbinaryADDlngflt;"												  ]
[ 771@0,  "command",	  "calc",		  "+",			  "(left:lng,right:lng):lng address CALCbinaryADDlnglng;"												  ]
[ 772@0,  "command",	  "calc",		  "+",			  "(left:lng,right:int):lng address CALCbinaryADDlngint;"												  ]
[ 773@0,  "command",	  "calc",		  "+",			  "(left:lng,right:sht):lng address CALCbinaryADDlngsht;"												  ]
[ 774@0,  "command",	  "calc",		  "+",			  "(left:lng,right:chr):lng address CALCbinaryADDlngchr;"												  ]
[ 775@0,  "command",	  "calc",		  "+",			  "(left:int,right:dbl):dbl address CALCbinaryADDintdbl;"												  ]
[ 776@0,  "command",	  "calc",		  "+",			  "(left:int,right:flt):flt address CALCbinaryADDintflt;"												  ]
[ 777@0,  "command",	  "calc",		  "+",			  "(left:int,right:lng):lng address CALCbinaryADDintlng;"												  ]
[ 778@0,  "command",	  "calc",		  "+",			  "(left:int,right:int):int address CALCbinaryADDintint;"												  ]
[ 779@0,  "command",	  "calc",		  "+",			  "(left:int,right:sht):int address CALCbinaryADDintsht;"												  ]
[ 780@0,  "command",	  "calc",		  "+",			  "(left:int,right:chr):int address CALCbinaryADDintchr;"												  ]
[ 781@0,  "command",	  "calc",		  "+",			  "(left:sht,right:dbl):dbl address CALCbinaryADDshtdbl;"												  ]
[ 782@0,  "command",	  "calc",		  "+",			  "(left:sht,right:flt):flt address CALCbinaryADDshtflt;"												  ]
[ 783@0,  "command",	  "calc",		  "+",			  "(left:sht,right:lng):lng address CALCbinaryADDshtlng;"												  ]
[ 784@0,  "command",	  "calc",		  "+",			  "(left:sht,right:int):int address CALCbinaryADDshtint;"												  ]
[ 785@0,  "command",	  "calc",		  "+",			  "(left:sht,right:sht):sht address CALCbinaryADDshtsht;"												  ]
[ 786@0,  "command",	  "calc",		  "+",			  "(left:sht,right:chr):sht address CALCbinaryADDshtchr;"												  ]
[ 787@0,  "command",	  "calc",		  "+",			  "(left:chr,right:dbl):dbl address CALCbinaryADDchrdbl;"												  ]
[ 788@0,  "command",	  "calc",		  "+",			  "(left:chr,right:flt):flt address CALCbinaryADDchrflt;"												  ]
[ 789@0,  "command",	  "calc",		  "+",			  "(left:chr,right:lng):lng address CALCbinaryADDchrlng;"												  ]
[ 790@0,  "command",	  "calc",		  "+",			  "(left:chr,right:int):int address CALCbinaryADDchrint;"												  ]
[ 791@0,  "command",	  "calc",		  "+",			  "(left:chr,right:sht):sht address CALCbinaryADDchrsht;"												  ]
[ 792@0,  "command",	  "calc",		  "+",			  "(left:chr,right:chr):chr address CALCbinaryADDchrchr;"												  ]
[ 793@0,  "command",	  "calc",		  "+",			  "(left:oid,right:oid):oid address CALCbinaryADDoidoid;"												  ]
[ 794@0,  "command",	  "calc",		  "+",			  "(left:dbl,right:dbl):dbl address CALCbinaryADDdbldbl;"												  ]
[ 795@0,  "command",	  "calc",		  "+",			  "(left:dbl,right:flt):dbl address CALCbinaryADDdblflt;"												  ]
[ 796@0,  "command",	  "calc",		  "+",			  "(left:dbl,right:lng):dbl address CALCbinaryADDdbllng;"												  ]
[ 797@0,  "command",	  "calc",		  "+",			  "(left:dbl,right:int):dbl address CALCbinaryADDdblint;"												  ]
[ 798@0,  "command",	  "calc",		  "+",			  "(left:dbl,right:sht):dbl address CALCbinaryADDdblsht;"												  ]
[ 799@0,  "command",	  "calc",		  "+",			  "(left:dbl,right:chr):dbl address CALCbinaryADDdblchr;"												  ]
[ 800@0,  "command",	  "calc",		  "+",			  "(left:flt,right:dbl):dbl address CALCbinaryADDfltdbl;"												  ]
[ 801@0,  "command",	  "calc",		  "+",			  "(left:flt,right:flt):flt address CALCbinaryADDfltflt;"												  ]
[ 802@0,  "command",	  "calc",		  "+",			  "(left:flt,right:lng):flt address CALCbinaryADDfltlng;"												  ]
[ 803@0,  "command",	  "calc",		  "+",			  "(left:flt,right:int):flt address CALCbinaryADDfltint;"												  ]
[ 804@0,  "command",	  "calc",		  "+",			  "(left:flt,right:sht):flt address CALCbinaryADDfltsht;"												  ]
[ 805@0,  "command",	  "calc",		  "+",			  "(left:flt,right:chr):flt address CALCbinaryADDfltchr;"												  ]
[ 806@0,  "command",	  "calc",		  "-",			  "(x:lng):lng address CALCunarylngNEG;"														  ]
[ 807@0,  "command",	  "calc",		  "-",			  "(x:int):int address CALCunaryintNEG;"														  ]
[ 808@0,  "command",	  "calc",		  "-",			  "(x:sht):sht address CALCunaryshtNEG;"														  ]
[ 809@0,  "command",	  "calc",		  "-",			  "(x:chr):chr address CALCunarychrNEG;"														  ]
[ 810@0,  "command",	  "calc",		  "-",			  "(x:flt):flt address CALCunaryfltNEG;"														  ]
[ 811@0,  "command",	  "calc",		  "-",			  "(x:dbl):dbl address CALCunarydblNEG;"														  ]
[ 812@0,  "command",	  "calc",		  "-",			  "(left:lng,right:dbl):dbl address CALCbinarySUBlngdbl;"												  ]
[ 813@0,  "command",	  "calc",		  "-",			  "(left:lng,right:flt):flt address CALCbinarySUBlngflt;"												  ]
[ 814@0,  "command",	  "calc",		  "-",			  "(left:lng,right:lng):lng address CALCbinarySUBlnglng;"												  ]
[ 815@0,  "command",	  "calc",		  "-",			  "(left:lng,right:int):lng address CALCbinarySUBlngint;"												  ]
[ 816@0,  "command",	  "calc",		  "-",			  "(left:lng,right:sht):lng address CALCbinarySUBlngsht;"												  ]
[ 817@0,  "command",	  "calc",		  "-",			  "(left:lng,right:chr):lng address CALCbinarySUBlngchr;"												  ]
[ 818@0,  "command",	  "calc",		  "-",			  "(left:int,right:dbl):dbl address CALCbinarySUBintdbl;"												  ]
[ 819@0,  "command",	  "calc",		  "-",			  "(left:int,right:flt):flt address CALCbinarySUBintflt;"												  ]
[ 820@0,  "command",	  "calc",		  "-",			  "(left:int,right:lng):lng address CALCbinarySUBintlng;"												  ]
[ 821@0,  "command",	  "calc",		  "-",			  "(left:int,right:int):int address CALCbinarySUBintint;"												  ]
[ 822@0,  "command",	  "calc",		  "-",			  "(left:int,right:sht):int address CALCbinarySUBintsht;"												  ]
[ 823@0,  "command",	  "calc",		  "-",			  "(left:int,right:chr):int address CALCbinarySUBintchr;"												  ]
[ 824@0,  "command",	  "calc",		  "-",			  "(left:sht,right:dbl):dbl address CALCbinarySUBshtdbl;"												  ]
[ 825@0,  "command",	  "calc",		  "-",			  "(left:sht,right:flt):flt address CALCbinarySUBshtflt;"												  ]
[ 826@0,  "command",	  "calc",		  "-",			  "(left:sht,right:lng):lng address CALCbinarySUBshtlng;"												  ]
[ 827@0,  "command",	  "calc",		  "-",			  "(left:sht,right:int):int address CALCbinarySUBshtint;"												  ]
[ 828@0,  "command",	  "calc",		  "-",			  "(left:sht,right:sht):sht address CALCbinarySUBshtsht;"												  ]
[ 829@0,  "command",	  "calc",		  "-",			  "(left:sht,right:chr):sht address CALCbinarySUBshtchr;"												  ]
[ 830@0,  "command",	  "calc",		  "-",			  "(left:chr,right:dbl):dbl address CALCbinarySUBchrdbl;"												  ]
[ 831@0,  "command",	  "calc",		  "-",			  "(left:chr,right:flt):flt address CALCbinarySUBchrflt;"												  ]
[ 832@0,  "command",	  "calc",		  "-",			  "(left:chr,right:lng):lng address CALCbinarySUBchrlng;"												  ]
[ 833@0,  "command",	  "calc",		  "-",			  "(left:chr,right:int):int address CALCbinarySUBchrint;"												  ]
[ 834@0,  "command",	  "calc",		  "-",			  "(left:chr,right:sht):sht address CALCbinarySUBchrsht;"												  ]
[ 835@0,  "command",	  "calc",		  "-",			  "(left:chr,right:chr):chr address CALCbinarySUBchrchr;"												  ]
[ 836@0,  "command",	  "calc",		  "-",			  "(left:oid,right:oid):oid address CALCbinarySUBoidoid;"												  ]
[ 837@0,  "command",	  "calc",		  "-",			  "(left:dbl,right:dbl):dbl address CALCbinarySUBdbldbl;"												  ]
[ 838@0,  "command",	  "calc",		  "-",			  "(left:dbl,right:flt):dbl address CALCbinarySUBdblflt;"												  ]
[ 839@0,  "command",	  "calc",		  "-",			  "(left:dbl,right:lng):dbl address CALCbinarySUBdbllng;"												  ]
[ 840@0,  "command",	  "calc",		  "-",			  "(left:dbl,right:int):dbl address CALCbinarySUBdblint;"												  ]
[ 841@0,  "command",	  "calc",		  "-",			  "(left:dbl,right:sht):dbl address CALCbinarySUBdblsht;"												  ]
[ 842@0,  "command",	  "calc",		  "-",			  "(left:dbl,right:chr):dbl address CALCbinarySUBdblchr;"												  ]
[ 843@0,  "command",	  "calc",		  "-",			  "(left:flt,right:dbl):dbl address CALCbinarySUBfltdbl;"												  ]
[ 844@0,  "command",	  "calc",		  "-",			  "(left:flt,right:flt):flt address CALCbinarySUBfltflt;"												  ]
[ 845@0,  "command",	  "calc",		  "-",			  "(left:flt,right:lng):flt address CALCbinarySUBfltlng;"												  ]
[ 846@0,  "command",	  "calc",		  "-",			  "(left:flt,right:int):flt address CALCbinarySUBfltint;"												  ]
[ 847@0,  "command",	  "calc",		  "-",			  "(left:flt,right:sht):flt address CALCbinarySUBfltsht;"												  ]
[ 848@0,  "command",	  "calc",		  "-",			  "(left:flt,right:chr):flt address CALCbinarySUBfltchr;"												  ]
[ 849@0,  "command",	  "calc",		  "/",			  "(left:lng,right:dbl):dbl address CALCbinarycheckDIVlngdbl;"												  ]
[ 850@0,  "command",	  "calc",		  "/",			  "(left:lng,right:flt):flt address CALCbinarycheckDIVlngflt;"												  ]
[ 851@0,  "command",	  "calc",		  "/",			  "(left:lng,right:lng):lng address CALCbinarycheckDIVlnglng;"												  ]
[ 852@0,  "command",	  "calc",		  "/",			  "(left:lng,right:int):lng address CALCbinarycheckDIVlngint;"												  ]
[ 853@0,  "command",	  "calc",		  "/",			  "(left:lng,right:sht):lng address CALCbinarycheckDIVlngsht;"												  ]
[ 854@0,  "command",	  "calc",		  "/",			  "(left:lng,right:chr):lng address CALCbinarycheckDIVlngchr;"												  ]
[ 855@0,  "command",	  "calc",		  "/",			  "(left:int,right:dbl):dbl address CALCbinarycheckDIVintdbl;"												  ]
[ 856@0,  "command",	  "calc",		  "/",			  "(left:int,right:flt):flt address CALCbinarycheckDIVintflt;"												  ]
[ 857@0,  "command",	  "calc",		  "/",			  "(left:int,right:lng):lng address CALCbinarycheckDIVintlng;"												  ]
[ 858@0,  "command",	  "calc",		  "/",			  "(left:int,right:int):int address CALCbinarycheckDIVintint;"												  ]
[ 859@0,  "command",	  "calc",		  "/",			  "(left:int,right:sht):int address CALCbinarycheckDIVintsht;"												  ]
[ 860@0,  "command",	  "calc",		  "/",			  "(left:int,right:chr):int address CALCbinarycheckDIVintchr;"												  ]
[ 861@0,  "command",	  "calc",		  "/",			  "(left:sht,right:dbl):dbl address CALCbinarycheckDIVshtdbl;"												  ]
[ 862@0,  "command",	  "calc",		  "/",			  "(left:sht,right:flt):flt address CALCbinarycheckDIVshtflt;"												  ]
[ 863@0,  "command",	  "calc",		  "/",			  "(left:sht,right:lng):lng address CALCbinarycheckDIVshtlng;"												  ]
[ 864@0,  "command",	  "calc",		  "/",			  "(left:sht,right:int):int address CALCbinarycheckDIVshtint;"												  ]
[ 865@0,  "command",	  "calc",		  "/",			  "(left:sht,right:sht):sht address CALCbinarycheckDIVshtsht;"												  ]
[ 866@0,  "command",	  "calc",		  "/",			  "(left:sht,right:chr):sht address CALCbinarycheckDIVshtchr;"												  ]
[ 867@0,  "command",	  "calc",		  "/",			  "(left:chr,right:dbl):dbl address CALCbinarycheckDIVchrdbl;"												  ]
[ 868@0,  "command",	  "calc",		  "/",			  "(left:chr,right:flt):flt address CALCbinarycheckDIVchrflt;"												  ]
[ 869@0,  "command",	  "calc",		  "/",			  "(left:chr,right:lng):lng address CALCbinarycheckDIVchrlng;"												  ]
[ 870@0,  "command",	  "calc",		  "/",			  "(left:chr,right:int):int address CALCbinarycheckDIVchrint;"												  ]
[ 871@0,  "command",	  "calc",		  "/",			  "(left:chr,right:sht):sht address CALCbinarycheckDIVchrsht;"												  ]
[ 872@0,  "command",	  "calc",		  "/",			  "(left:chr,right:chr):chr address CALCbinarycheckDIVchrchr;"												  ]
[ 873@0,  "command",	  "calc",		  "/",			  "(left:oid,right:oid):oid address CALCbinarycheckDIVoidoid;"												  ]
[ 874@0,  "command",	  "calc",		  "/",			  "(left:dbl,right:dbl):dbl address CALCbinarycheckDIVdbldbl;"												  ]
[ 875@0,  "command",	  "calc",		  "/",			  "(left:dbl,right:flt):dbl address CALCbinarycheckDIVdblflt;"												  ]
[ 876@0,  "command",	  "calc",		  "/",			  "(left:dbl,right:lng):dbl address CALCbinarycheckDIVdbllng;"												  ]
[ 877@0,  "command",	  "calc",		  "/",			  "(left:dbl,right:int):dbl address CALCbinarycheckDIVdblint;"												  ]
[ 878@0,  "command",	  "calc",		  "/",			  "(left:dbl,right:sht):dbl address CALCbinarycheckDIVdblsht;"												  ]
[ 879@0,  "command",	  "calc",		  "/",			  "(left:dbl,right:chr):dbl address CALCbinarycheckDIVdblchr;"												  ]
[ 880@0,  "command",	  "calc",		  "/",			  "(left:flt,right:dbl):dbl address CALCbinarycheckDIVfltdbl;"												  ]
[ 881@0,  "command",	  "calc",		  "/",			  "(left:flt,right:flt):flt address CALCbinarycheckDIVfltflt;"												  ]
[ 882@0,  "command",	  "calc",		  "/",			  "(left:flt,right:lng):flt address CALCbinarycheckDIVfltlng;"												  ]
[ 883@0,  "command",	  "calc",		  "/",			  "(left:flt,right:int):flt address CALCbinarycheckDIVfltint;"												  ]
[ 884@0,  "command",	  "calc",		  "/",			  "(left:flt,right:sht):flt address CALCbinarycheckDIVfltsht;"												  ]
[ 885@0,  "command",	  "calc",		  "/",			  "(left:flt,right:chr):flt address CALCbinarycheckDIVfltchr;"												  ]
[ 886@0,  "command",	  "calc",		  "<<",			  "(left:lng,right:int):lng address CALCbinaryLSHlngint;"												  ]
[ 887@0,  "command",	  "calc",		  "<<",			  "(left:int,right:int):int address CALCbinaryLSHintint;"												  ]
[ 888@0,  "command",	  "calc",		  "<<",			  "(left:sht,right:int):sht address CALCbinaryLSHshtint;"												  ]
[ 889@0,  "command",	  "calc",		  "<<",			  "(left:chr,right:int):chr address CALCbinaryLSHchrint;"												  ]
[ 890@0,  "command",	  "calc",		  "<=",			  "(left:str,right:str):bit address CALCcompLEstrstr;"													  ]
[ 891@0,  "command",	  "calc",		  "<",			  "(left:str,right:str):bit address CALCcompLTstrstr;"													  ]
[ 892@0,  "command",	  "calc",		  "<=",			  "(left:lng,right:lng):bit address CALCcompLElnglng;"													  ]
[ 893@0,  "command",	  "calc",		  "<",			  "(left:lng,right:lng):bit address CALCcompLTlnglng;"													  ]
[ 894@0,  "command",	  "calc",		  "<=",			  "(left:lng,right:int):bit address CALCcompLElngint;"													  ]
[ 895@0,  "command",	  "calc",		  "<",			  "(left:lng,right:int):bit address CALCcompLTlngint;"													  ]
[ 896@0,  "command",	  "calc",		  "<=",			  "(left:lng,right:sht):bit address CALCcompLElngsht;"													  ]
[ 897@0,  "command",	  "calc",		  "<",			  "(left:lng,right:sht):bit address CALCcompLTlngsht;"													  ]
[ 898@0,  "command",	  "calc",		  "<=",			  "(left:lng,right:chr):bit address CALCcompLElngchr;"													  ]
[ 899@0,  "command",	  "calc",		  "<",			  "(left:lng,right:chr):bit address CALCcompLTlngchr;"													  ]
[ 900@0,  "command",	  "calc",		  "<=",			  "(left:int,right:lng):bit address CALCcompLEintlng;"													  ]
[ 901@0,  "command",	  "calc",		  "<",			  "(left:int,right:lng):bit address CALCcompLTintlng;"													  ]
[ 902@0,  "command",	  "calc",		  "<=",			  "(left:int,right:int):bit address CALCcompLEintint;"													  ]
[ 903@0,  "command",	  "calc",		  "<",			  "(left:int,right:int):bit address CALCcompLTintint;"													  ]
[ 904@0,  "command",	  "calc",		  "<=",			  "(left:int,right:sht):bit address CALCcompLEintsht;"													  ]
[ 905@0,  "command",	  "calc",		  "<",			  "(left:int,right:sht):bit address CALCcompLTintsht;"													  ]
[ 906@0,  "command",	  "calc",		  "<=",			  "(left:int,right:chr):bit address CALCcompLEintchr;"													  ]
[ 907@0,  "command",	  "calc",		  "<",			  "(left:int,right:chr):bit address CALCcompLTintchr;"													  ]
[ 908@0,  "command",	  "calc",		  "<=",			  "(left:sht,right:lng):bit address CALCcompLEshtlng;"													  ]
[ 909@0,  "command",	  "calc",		  "<",			  "(left:sht,right:lng):bit address CALCcompLTshtlng;"													  ]
[ 910@0,  "command",	  "calc",		  "<=",			  "(left:sht,right:int):bit address CALCcompLEshtint;"													  ]
[ 911@0,  "command",	  "calc",		  "<",			  "(left:sht,right:int):bit address CALCcompLTshtint;"													  ]
[ 912@0,  "command",	  "calc",		  "<=",			  "(left:sht,right:sht):bit address CALCcompLEshtsht;"													  ]
[ 913@0,  "command",	  "calc",		  "<",			  "(left:sht,right:sht):bit address CALCcompLTshtsht;"													  ]
[ 914@0,  "command",	  "calc",		  "<=",			  "(left:sht,right:chr):bit address CALCcompLEshtchr;"													  ]
[ 915@0,  "command",	  "calc",		  "<",			  "(left:sht,right:chr):bit address CALCcompLTshtchr;"													  ]
[ 916@0,  "command",	  "calc",		  "<=",			  "(left:chr,right:lng):bit address CALCcompLEchrlng;"													  ]
[ 917@0,  "command",	  "calc",		  "<",			  "(left:chr,right:lng):bit address CALCcompLTchrlng;"													  ]
[ 918@0,  "command",	  "calc",		  "<=",			  "(left:chr,right:int):bit address CALCcompLEchrint;"													  ]
[ 919@0,  "command",	  "calc",		  "<",			  "(left:chr,right:int):bit address CALCcompLTchrint;"													  ]
[ 920@0,  "command",	  "calc",		  "<=",			  "(left:chr,right:sht):bit address CALCcompLEchrsht;"													  ]
[ 921@0,  "command",	  "calc",		  "<",			  "(left:chr,right:sht):bit address CALCcompLTchrsht;"													  ]
[ 922@0,  "command",	  "calc",		  "<=",			  "(left:chr,right:chr):bit address CALCcompLEchrchr;"													  ]
[ 923@0,  "command",	  "calc",		  "<",			  "(left:chr,right:chr):bit address CALCcompLTchrchr;"													  ]
[ 924@0,  "command",	  "calc",		  "<=",			  "(left:dbl,right:dbl):bit address CALCcompLEdbldbl;"													  ]
[ 925@0,  "command",	  "calc",		  "<",			  "(left:dbl,right:dbl):bit address CALCcompLTdbldbl;"													  ]
[ 926@0,  "command",	  "calc",		  "<=",			  "(left:flt,right:dbl):bit address CALCcompLEfltdbl;"													  ]
[ 927@0,  "command",	  "calc",		  "<",			  "(left:flt,right:dbl):bit address CALCcompLTfltdbl;"													  ]
[ 928@0,  "command",	  "calc",		  "<=",			  "(left:flt,right:flt):bit address CALCcompLEfltflt;"													  ]
[ 929@0,  "command",	  "calc",		  "<",			  "(left:flt,right:flt):bit address CALCcompLTfltflt;"													  ]
[ 930@0,  "command",	  "calc",		  "<=",			  "(left:oid,right:oid):bit address CALCcompLEoidoid;"													  ]
[ 931@0,  "command",	  "calc",		  "<",			  "(left:oid,right:oid):bit address CALCcompLToidoid;"													  ]
[ 932@0,  "command",	  "calc",		  "==",			  "(left:str,right:str):bit address CALCcompEQstrstr;"													  ]
[ 933@0,  "command",	  "calc",		  "==",			  "(left:lng,right:lng):bit address CALCcompEQlnglng;"													  ]
[ 934@0,  "command",	  "calc",		  "==",			  "(left:lng,right:int):bit address CALCcompEQlngint;"													  ]
[ 935@0,  "command",	  "calc",		  "==",			  "(left:lng,right:sht):bit address CALCcompEQlngsht;"													  ]
[ 936@0,  "command",	  "calc",		  "==",			  "(left:lng,right:chr):bit address CALCcompEQlngchr;"													  ]
[ 937@0,  "command",	  "calc",		  "==",			  "(left:int,right:lng):bit address CALCcompEQintlng;"													  ]
[ 938@0,  "command",	  "calc",		  "==",			  "(left:int,right:int):bit address CALCcompEQintint;"													  ]
[ 939@0,  "command",	  "calc",		  "==",			  "(left:int,right:sht):bit address CALCcompEQintsht;"													  ]
[ 940@0,  "command",	  "calc",		  "==",			  "(left:int,right:chr):bit address CALCcompEQintchr;"													  ]
[ 941@0,  "command",	  "calc",		  "==",			  "(left:sht,right:lng):bit address CALCcompEQshtlng;"													  ]
[ 942@0,  "command",	  "calc",		  "==",			  "(left:sht,right:int):bit address CALCcompEQshtint;"													  ]
[ 943@0,  "command",	  "calc",		  "==",			  "(left:sht,right:sht):bit address CALCcompEQshtsht;"													  ]
[ 944@0,  "command",	  "calc",		  "==",			  "(left:sht,right:chr):bit address CALCcompEQshtchr;"													  ]
[ 945@0,  "command",	  "calc",		  "==",			  "(left:bit,right:lng):bit address CALCcompEQbitlng;"													  ]
[ 946@0,  "command",	  "calc",		  "==",			  "(left:bit,right:int):bit address CALCcompEQbitint;"													  ]
[ 947@0,  "command",	  "calc",		  "==",			  "(left:bit,right:sht):bit address CALCcompEQbitsht;"													  ]
[ 948@0,  "command",	  "calc",		  "==",			  "(left:bit,right:chr):bit address CALCcompEQbitchr;"													  ]
[ 949@0,  "command",	  "calc",		  "==",			  "(left:chr,right:lng):bit address CALCcompEQchrlng;"													  ]
[ 950@0,  "command",	  "calc",		  "==",			  "(left:chr,right:int):bit address CALCcompEQchrint;"													  ]
[ 951@0,  "command",	  "calc",		  "==",			  "(left:chr,right:sht):bit address CALCcompEQchrsht;"													  ]
[ 952@0,  "command",	  "calc",		  "==",			  "(left:chr,right:chr):bit address CALCcompEQchrchr;"													  ]
[ 953@0,  "command",	  "calc",		  "==",			  "(left:dbl,right:dbl):bit address CALCcompEQdbldbl;"													  ]
[ 954@0,  "command",	  "calc",		  "==",			  "(left:flt,right:dbl):bit address CALCcompEQfltdbl;"													  ]
[ 955@0,  "command",	  "calc",		  "==",			  "(left:flt,right:flt):bit address CALCcompEQfltflt;"													  ]
[ 956@0,  "command",	  "calc",		  "==",			  "(left:oid,right:oid):bit address CALCcompEQoidoid;"													  ]
[ 957@0,  "command",	  "calc",		  ">>",			  "(left:lng,right:int):lng address CALCbinaryRSHlngint;"												  ]
[ 958@0,  "command",	  "calc",		  ">>",			  "(left:int,right:int):int address CALCbinaryRSHintint;"												  ]
[ 959@0,  "command",	  "calc",		  ">>",			  "(left:sht,right:int):sht address CALCbinaryRSHshtint;"												  ]
[ 960@0,  "command",	  "calc",		  ">>",			  "(left:chr,right:int):chr address CALCbinaryRSHchrint;"												  ]
[ 961@0,  "command",	  "calc",		  ">",			  "(left:str,right:str):bit address CALCcompGTstrstr;"													  ]
[ 962@0,  "command",	  "calc",		  ">=",			  "(left:str,right:str):bit address CALCcompGEstrstr;"													  ]
[ 963@0,  "command",	  "calc",		  ">",			  "(left:lng,right:lng):bit address CALCcompGTlnglng;"													  ]
[ 964@0,  "command",	  "calc",		  ">=",			  "(left:lng,right:lng):bit address CALCcompGElnglng;"													  ]
[ 965@0,  "command",	  "calc",		  ">",			  "(left:lng,right:int):bit address CALCcompGTlngint;"													  ]
[ 966@0,  "command",	  "calc",		  ">=",			  "(left:lng,right:int):bit address CALCcompGElngint;"													  ]
[ 967@0,  "command",	  "calc",		  ">",			  "(left:lng,right:sht):bit address CALCcompGTlngsht;"													  ]
[ 968@0,  "command",	  "calc",		  ">=",			  "(left:lng,right:sht):bit address CALCcompGElngsht;"													  ]
[ 969@0,  "command",	  "calc",		  ">",			  "(left:lng,right:chr):bit address CALCcompGTlngchr;"													  ]
[ 970@0,  "command",	  "calc",		  ">=",			  "(left:lng,right:chr):bit address CALCcompGElngchr;"													  ]
[ 971@0,  "command",	  "calc",		  ">",			  "(left:int,right:lng):bit address CALCcompGTintlng;"													  ]
[ 972@0,  "command",	  "calc",		  ">=",			  "(left:int,right:lng):bit address CALCcompGEintlng;"													  ]
[ 973@0,  "command",	  "calc",		  ">",			  "(left:int,right:int):bit address CALCcompGTintint;"													  ]
[ 974@0,  "command",	  "calc",		  ">=",			  "(left:int,right:int):bit address CALCcompGEintint;"													  ]
[ 975@0,  "command",	  "calc",		  ">",			  "(left:int,right:sht):bit address CALCcompGTintsht;"													  ]
[ 976@0,  "command",	  "calc",		  ">=",			  "(left:int,right:sht):bit address CALCcompGEintsht;"													  ]
[ 977@0,  "command",	  "calc",		  ">",			  "(left:int,right:chr):bit address CALCcompGTintchr;"													  ]
[ 978@0,  "command",	  "calc",		  ">=",			  "(left:int,right:chr):bit address CALCcompGEintchr;"													  ]
[ 979@0,  "command",	  "calc",		  ">",			  "(left:sht,right:lng):bit address CALCcompGTshtlng;"													  ]
[ 980@0,  "command",	  "calc",		  ">=",			  "(left:sht,right:lng):bit address CALCcompGEshtlng;"													  ]
[ 981@0,  "command",	  "calc",		  ">",			  "(left:sht,right:int):bit address CALCcompGTshtint;"													  ]
[ 982@0,  "command",	  "calc",		  ">=",			  "(left:sht,right:int):bit address CALCcompGEshtint;"													  ]
[ 983@0,  "command",	  "calc",		  ">",			  "(left:sht,right:sht):bit address CALCcompGTshtsht;"													  ]
[ 984@0,  "command",	  "calc",		  ">=",			  "(left:sht,right:sht):bit address CALCcompGEshtsht;"													  ]
[ 985@0,  "command",	  "calc",		  ">",			  "(left:sht,right:chr):bit address CALCcompGTshtchr;"													  ]
[ 986@0,  "command",	  "calc",		  ">=",			  "(left:sht,right:chr):bit address CALCcompGEshtchr;"													  ]
[ 987@0,  "command",	  "calc",		  ">",			  "(left:chr,right:lng):bit address CALCcompGTchrlng;"													  ]
[ 988@0,  "command",	  "calc",		  ">=",			  "(left:chr,right:lng):bit address CALCcompGEchrlng;"													  ]
[ 989@0,  "command",	  "calc",		  ">",			  "(left:chr,right:int):bit address CALCcompGTchrint;"													  ]
[ 990@0,  "command",	  "calc",		  ">=",			  "(left:chr,right:int):bit address CALCcompGEchrint;"													  ]
[ 991@0,  "command",	  "calc",		  ">",			  "(left:chr,right:sht):bit address CALCcompGTchrsht;"													  ]
[ 992@0,  "command",	  "calc",		  ">=",			  "(left:chr,right:sht):bit address CALCcompGEchrsht;"													  ]
[ 993@0,  "command",	  "calc",		  ">",			  "(left:chr,right:chr):bit address CALCcompGTchrchr;"													  ]
[ 994@0,  "command",	  "calc",		  ">=",			  "(left:chr,right:chr):bit address CALCcompGEchrchr;"													  ]
[ 995@0,  "command",	  "calc",		  ">",			  "(left:dbl,right:dbl):bit address CALCcompGTdbldbl;"													  ]
[ 996@0,  "command",	  "calc",		  ">=",			  "(left:dbl,right:dbl):bit address CALCcompGEdbldbl;"													  ]
[ 997@0,  "command",	  "calc",		  ">",			  "(left:flt,right:dbl):bit address CALCcompGTfltdbl;"													  ]
[ 998@0,  "command",	  "calc",		  ">=",			  "(left:flt,right:dbl):bit address CALCcompGEfltdbl;"													  ]
[ 999@0,  "command",	  "calc",		  ">",			  "(left:flt,right:flt):bit address CALCcompGTfltflt;"													  ]
[ 1000@0, "command",	  "calc",		  ">=",			  "(left:flt,right:flt):bit address CALCcompGEfltflt;"													  ]
[ 1001@0, "command",	  "calc",		  ">",			  "(left:oid,right:oid):bit address CALCcompGToidoid;"													  ]
[ 1002@0, "command",	  "calc",		  ">=",			  "(left:oid,right:oid):bit address CALCcompGEoidoid;"													  ]
[ 1003@0, "command",	  "calc",		  "and",		  "(left:lng,right:lng):lng address CALCbinaryANDlnglng;"												  ]
[ 1004@0, "command",	  "calc",		  "and",		  "(left:int,right:int):int address CALCbinaryANDintint;"												  ]
[ 1005@0, "command",	  "calc",		  "and",		  "(left:sht,right:sht):sht address CALCbinaryANDshtsht;"												  ]
[ 1006@0, "command",	  "calc",		  "and",		  "(left:chr,right:chr):chr address CALCbinaryANDchrchr;"												  ]
[ 1007@0, "command",	  "calc",		  "and",		  "(left:bit,right:bit):bit address CALCbinaryANDbit;"													  ]
[ 1008@0, "command",	  "calc",		  "abs",		  "(x:lng):lng address CALCunarylngABS;"														  ]
[ 1009@0, "command",	  "calc",		  "abs",		  "(x:int):int address CALCunaryintABS;"														  ]
[ 1010@0, "command",	  "calc",		  "abs",		  "(x:sht):sht address CALCunaryshtABS;"														  ]
[ 1011@0, "command",	  "calc",		  "abs",		  "(x:chr):chr address CALCunarychrABS;"														  ]
[ 1012@0, "command",	  "calc",		  "abs",		  "(x:flt):flt address CALCunaryfltABS;"														  ]
[ 1013@0, "command",	  "calc",		  "abs",		  "(x:dbl):dbl address CALCunarydblABS;"														  ]
[ 1014@0, "command",	  "calc",		  "bat",		  "(v:void):bat[:any,:any] address CALCnil2bat;"													  ]
[ 1015@0, "command",	  "calc",		  "bat",		  "(v:str):bat[:any,:any] address CALCstr2bat;"														  ]
[ 1016@0, "command",	  "calc",		  "bit",		  "(v:void):bit address CALCnil2bit;"															  ]
[ 1017@0, "command",	  "calc",		  "bit",		  "(v:str):bit address CALCstr2bit;"															  ]
[ 1018@0, "command",	  "calc",		  "bit",		  "(x:dbl):bit address CALCdbl2bit;"															  ]
[ 1019@0, "command",	  "calc",		  "bit",		  "(x:flt):bit address CALCflt2bit;"															  ]
[ 1020@0, "command",	  "calc",		  "bit",		  "(x:lng):bit address CALClng2bit;"															  ]
[ 1021@0, "command",	  "calc",		  "bit",		  "(x:int):bit address CALCint2bit;"															  ]
[ 1022@0, "command",	  "calc",		  "bit",		  "(x:sht):bit address CALCsht2bit;"															  ]
[ 1023@0, "command",	  "calc",		  "bit",		  "(x:bit):bit address CALCbit2bit;"															  ]
[ 1024@0, "command",	  "calc",		  "bit",		  "(x:oid):bit address CALCoid2bit;"															  ]
[ 1025@0, "command",	  "calc",		  "bit",		  "(x:dbl):bit address CALCdbl2bit;"															  ]
[ 1026@0, "command",	  "calc",		  "bit",		  "(x:flt):bit address CALCflt2bit;"															  ]
[ 1027@0, "command",	  "calc",		  "bit",		  "(x:lng):bit address CALClng2bit;"															  ]
[ 1028@0, "command",	  "calc",		  "bit",		  "(x:int):bit address CALCint2bit;"															  ]
[ 1029@0, "command",	  "calc",		  "bit",		  "(x:sht):bit address CALCsht2bit;"															  ]
[ 1030@0, "command",	  "calc",		  "bit",		  "(x:bit):bit address CALCbit2bit;"															  ]
[ 1031@0, "command",	  "calc",		  "between",		  "(val:str,low:str,high:str):bit address CALCcompBetweenstr;"												  ]
[ 1032@0, "command",	  "calc",		  "between",		  "(val:lng,low:lng,high:lng):bit address CALCcompBetweenlng;"												  ]
[ 1033@0, "command",	  "calc",		  "between",		  "(val:lng,low:lng,high:lng):bit address CALCcompBetweenlng;"												  ]
[ 1034@0, "command",	  "calc",		  "between",		  "(val:lng,low:lng,high:lng):bit address CALCcompBetweenlng;"												  ]
[ 1035@0, "command",	  "calc",		  "between",		  "(val:lng,low:lng,high:lng):bit address CALCcompBetweenlng;"												  ]
[ 1036@0, "command",	  "calc",		  "between",		  "(val:int,low:int,high:int):bit address CALCcompBetweenint;"												  ]
[ 1037@0, "command",	  "calc",		  "between",		  "(val:int,low:int,high:int):bit address CALCcompBetweenint;"												  ]
[ 1038@0, "command",	  "calc",		  "between",		  "(val:int,low:int,high:int):bit address CALCcompBetweenint;"												  ]
[ 1039@0, "command",	  "calc",		  "between",		  "(val:int,low:int,high:int):bit address CALCcompBetweenint;"												  ]
[ 1040@0, "command",	  "calc",		  "between",		  "(val:sht,low:sht,high:sht):bit address CALCcompBetweensht;"												  ]
[ 1041@0, "command",	  "calc",		  "between",		  "(val:sht,low:sht,high:sht):bit address CALCcompBetweensht;"												  ]
[ 1042@0, "command",	  "calc",		  "between",		  "(val:sht,low:sht,high:sht):bit address CALCcompBetweensht;"												  ]
[ 1043@0, "command",	  "calc",		  "between",		  "(val:sht,low:sht,high:sht):bit address CALCcompBetweensht;"												  ]
[ 1044@0, "command",	  "calc",		  "between",		  "(val:chr,low:chr,high:chr):bit address CALCcompBetweenchr;"												  ]
[ 1045@0, "command",	  "calc",		  "between",		  "(val:chr,low:chr,high:chr):bit address CALCcompBetweenchr;"												  ]
[ 1046@0, "command",	  "calc",		  "between",		  "(val:chr,low:chr,high:chr):bit address CALCcompBetweenchr;"												  ]
[ 1047@0, "command",	  "calc",		  "between",		  "(val:chr,low:chr,high:chr):bit address CALCcompBetweenchr;"												  ]
[ 1048@0, "command",	  "calc",		  "between",		  "(val:dbl,low:dbl,high:dbl):bit address CALCcompBetweendbl;"												  ]
[ 1049@0, "command",	  "calc",		  "between",		  "(val:flt,low:flt,high:flt):bit address CALCcompBetweenflt;"												  ]
[ 1050@0, "command",	  "calc",		  "between",		  "(val:flt,low:flt,high:flt):bit address CALCcompBetweenflt;"												  ]
[ 1051@0, "command",	  "calc",		  "between",		  "(val:oid,low:oid,high:oid):bit address CALCcompBetweenoid;"												  ]
[ 1052@0, "command",	  "calc",		  "chr",		  "(v:void):chr address CALCnil2chr;"															  ]
[ 1053@0, "command",	  "calc",		  "chr",		  "(v:str):chr address CALCstr2chr;"															  ]
[ 1054@0, "command",	  "calc",		  "chr",		  "(x:lng):chr address CALClng2chr;"															  ]
[ 1055@0, "command",	  "calc",		  "chr",		  "(x:int):chr address CALCint2chr;"															  ]
[ 1056@0, "command",	  "calc",		  "chr",		  "(x:sht):chr address CALCsht2chr;"															  ]
[ 1057@0, "command",	  "calc",		  "chr",		  "(x:chr):chr address CALCchr2chr;"															  ]
[ 1058@0, "command",	  "calc",		  "chr",		  "(x:dbl):chr address CALCdbl2chr;"															  ]
[ 1059@0, "command",	  "calc",		  "chr",		  "(x:flt):chr address CALCflt2chr;"															  ]
[ 1060@0, "command",	  "calc",		  "chr",		  "(x:lng):chr address CALClng2chr;"															  ]
[ 1061@0, "command",	  "calc",		  "chr",		  "(x:int):chr address CALCint2chr;"															  ]
[ 1062@0, "command",	  "calc",		  "chr",		  "(x:sht):chr address CALCsht2chr;"															  ]
[ 1063@0, "command",	  "calc",		  "chr",		  "(x:bit):chr address CALCbit2chr;"															  ]
[ 1064@0, "command",	  "calc",		  "chr",		  "(x:oid):chr address CALCoid2chr;"															  ]
[ 1065@0, "command",	  "calc",		  "dbl",		  "(v:void):dbl address CALCnil2dbl;"															  ]
[ 1066@0, "command",	  "calc",		  "dbl",		  "(v:str):dbl address CALCstr2dbl;"															  ]
[ 1067@0, "command",	  "calc",		  "dbl",		  "(x:lng):dbl address CALClng2dbl;"															  ]
[ 1068@0, "command",	  "calc",		  "dbl",		  "(x:int):dbl address CALCint2dbl;"															  ]
[ 1069@0, "command",	  "calc",		  "dbl",		  "(x:sht):dbl address CALCsht2dbl;"															  ]
[ 1070@0, "command",	  "calc",		  "dbl",		  "(x:flt):dbl address CALCflt2dbl;"															  ]
[ 1071@0, "command",	  "calc",		  "dbl",		  "(x:dbl):dbl address CALCdbl2dbl;"															  ]
[ 1072@0, "command",	  "calc",		  "flt",		  "(v:void):flt address CALCnil2flt;"															  ]
[ 1073@0, "command",	  "calc",		  "flt",		  "(v:str):flt address CALCstr2flt;"															  ]
[ 1074@0, "command",	  "calc",		  "flt",		  "(x:lng):flt address CALClng2flt;"															  ]
[ 1075@0, "command",	  "calc",		  "flt",		  "(x:int):flt address CALCint2flt;"															  ]
[ 1076@0, "command",	  "calc",		  "flt",		  "(x:sht):flt address CALCsht2flt;"															  ]
[ 1077@0, "command",	  "calc",		  "flt",		  "(x:dbl):flt address CALCdbl2flt;"															  ]
[ 1078@0, "command",	  "calc",		  "flt",		  "(x:flt):flt address CALCflt2flt;"															  ]
[ 1079@0, "command",	  "calc",		  "int",		  "(v:void):int address CALCnil2int;"															  ]
[ 1080@0, "command",	  "calc",		  "int",		  "(v:str):int address CALCstr2int;"															  ]
[ 1081@0, "command",	  "calc",		  "ifthenelse",		  "(b:bit,t:any$1,tpe:any$1,f:any$1):any$1 address CALCswitchbit;"											  ]
[ 1082@0, "command",	  "calc",		  "int",		  "(x:dbl):int address CALCdbl2int;"															  ]
[ 1083@0, "command",	  "calc",		  "int",		  "(x:flt):int address CALCflt2int;"															  ]
[ 1084@0, "command",	  "calc",		  "int",		  "(x:lng):int address CALClng2int;"															  ]
[ 1085@0, "command",	  "calc",		  "int",		  "(x:int):int address CALCint2int;"															  ]
[ 1086@0, "command",	  "calc",		  "int",		  "(x:sht):int address CALCsht2int;"															  ]
[ 1087@0, "command",	  "calc",		  "int",		  "(x:bit):int address CALCbit2int;"															  ]
[ 1088@0, "command",	  "calc",		  "int",		  "(x:oid):int address CALCoid2int;"															  ]
[ 1089@0, "command",	  "calc",		  "inv",		  "(x:lng):lng address CALCunarychecklngINV;"														  ]
[ 1090@0, "command",	  "calc",		  "inv",		  "(x:int):int address CALCunarycheckintINV;"														  ]
[ 1091@0, "command",	  "calc",		  "inv",		  "(x:sht):sht address CALCunarycheckshtINV;"														  ]
[ 1092@0, "command",	  "calc",		  "inv",		  "(x:chr):chr address CALCunarycheckchrINV;"														  ]
[ 1093@0, "command",	  "calc",		  "inv",		  "(x:flt):flt address CALCunarycheckfltINV;"														  ]
[ 1094@0, "command",	  "calc",		  "inv",		  "(x:dbl):dbl address CALCunarycheckdblINV;"														  ]
[ 1095@0, "command",	  "calc",		  "isnotnil",		  "(v:void):bit address CALCisnotnil_void;"														  ]
[ 1096@0, "command",	  "calc",		  "isnil",		  "(v:void):bit address CALCisnil_void;"														  ]
[ 1097@0, "command",	  "calc",		  "isnotnil",		  "(v:str):bit address CALCisnotnil_str;"														  ]
[ 1098@0, "command",	  "calc",		  "isnil",		  "(v:str):bit address CALCisnil_str;"															  ]
[ 1099@0, "command",	  "calc",		  "isnotnil",		  "(v:dbl):bit address CALCisnotnil_dbl;"														  ]
[ 1100@0, "command",	  "calc",		  "isnil",		  "(v:dbl):bit address CALCisnil_dbl;"															  ]
[ 1101@0, "command",	  "calc",		  "isnotnil",		  "(v:lng):bit address CALCisnotnil_lng;"														  ]
[ 1102@0, "command",	  "calc",		  "isnil",		  "(v:lng):bit address CALCisnil_lng;"															  ]
[ 1103@0, "command",	  "calc",		  "isnotnil",		  "(v:flt):bit address CALCisnotnil_flt;"														  ]
[ 1104@0, "command",	  "calc",		  "isnil",		  "(v:flt):bit address CALCisnil_flt;"															  ]
[ 1105@0, "command",	  "calc",		  "isnotnil",		  "(v:oid):bit address CALCisnotnil_oid;"														  ]
[ 1106@0, "command",	  "calc",		  "isnil",		  "(v:oid):bit address CALCisnil_oid;"															  ]
[ 1107@0, "command",	  "calc",		  "isnotnil",		  "(v:int):bit address CALCisnotnil_int;"														  ]
[ 1108@0, "command",	  "calc",		  "isnil",		  "(v:int):bit address CALCisnil_int;"															  ]
[ 1109@0, "command",	  "calc",		  "isnotnil",		  "(v:sht):bit address CALCisnotnil_sht;"														  ]
[ 1110@0, "command",	  "calc",		  "isnil",		  "(v:sht):bit address CALCisnil_sht;"															  ]
[ 1111@0, "command",	  "calc",		  "isnotnil",		  "(v:bit):bit address CALCisnotnil_bit;"														  ]
[ 1112@0, "command",	  "calc",		  "isnil",		  "(v:bit):bit address CALCisnil_bit;"															  ]
[ 1113@0, "command",	  "calc",		  "isnotnil",		  "(v:chr):bit address CALCisnotnil_chr;"														  ]
[ 1114@0, "command",	  "calc",		  "isnil",		  "(v:chr):bit address CALCisnil_chr;"															  ]
[ 1115@0, "command",	  "calc",		  "lng",		  "(v:void):lng address CALCnil2lng;"															  ]
[ 1116@0, "command",	  "calc",		  "lng",		  "(v:str):lng address CALCstr2lng;"															  ]
[ 1117@0, "command",	  "calc",		  "lng",		  "(x:dbl):lng address CALCdbl2lng;"															  ]
[ 1118@0, "command",	  "calc",		  "lng",		  "(x:flt):lng address CALCflt2lng;"															  ]
[ 1119@0, "command",	  "calc",		  "lng",		  "(x:lng):lng address CALClng2lng;"															  ]
[ 1120@0, "command",	  "calc",		  "lng",		  "(x:int):lng address CALCint2lng;"															  ]
[ 1121@0, "command",	  "calc",		  "lng",		  "(x:sht):lng address CALCsht2lng;"															  ]
[ 1122@0, "command",	  "calc",		  "lng",		  "(x:bit):lng address CALCbit2lng;"															  ]
[ 1123@0, "command",	  "calc",		  "lng",		  "(x:oid):lng address CALCoid2lng;"															  ]
[ 1124@0, "command",	  "calc",		  "min",		  "(l:dbl,r:dbl):dbl address CALCbinaryMINdbl;"														  ]
[ 1125@0, "command",	  "calc",		  "max",		  "(l:dbl,r:dbl):dbl address CALCbinaryMAXdbl;"														  ]
[ 1126@0, "command",	  "calc",		  "min",		  "(l:lng,r:lng):lng address CALCbinaryMINlng;"														  ]
[ 1127@0, "command",	  "calc",		  "max",		  "(l:lng,r:lng):lng address CALCbinaryMAXlng;"														  ]
[ 1128@0, "command",	  "calc",		  "min",		  "(l:flt,r:flt):flt address CALCbinaryMINflt;"														  ]
[ 1129@0, "command",	  "calc",		  "max",		  "(l:flt,r:flt):flt address CALCbinaryMAXflt;"														  ]
[ 1130@0, "command",	  "calc",		  "min",		  "(l:oid,r:oid):oid address CALCbinaryMINoid;"														  ]
[ 1131@0, "command",	  "calc",		  "max",		  "(l:oid,r:oid):oid address CALCbinaryMAXoid;"														  ]
[ 1132@0, "command",	  "calc",		  "min",		  "(l:int,r:int):int address CALCbinaryMINint;"														  ]
[ 1133@0, "command",	  "calc",		  "max",		  "(l:int,r:int):int address CALCbinaryMAXint;"														  ]
[ 1134@0, "command",	  "calc",		  "min",		  "(l:sht,r:sht):sht address CALCbinaryMINsht;"														  ]
[ 1135@0, "command",	  "calc",		  "max",		  "(l:sht,r:sht):sht address CALCbinaryMAXsht;"														  ]
[ 1136@0, "command",	  "calc",		  "min",		  "(l:chr,r:chr):chr address CALCbinaryMINchr;"														  ]
[ 1137@0, "command",	  "calc",		  "max",		  "(l:chr,r:chr):chr address CALCbinaryMAXchr;"														  ]
[ 1138@0, "command",	  "calc",		  "newoid",		  "(incr:int):oid address CALCnewoidInc;"														  ]
[ 1139@0, "command",	  "calc",		  "newoid",		  "(incr:lng):oid address CALCnewoidInclng;"														  ]
[ 1140@0, "command",	  "calc",		  "newoid",		  "():oid address CALCnewoidBase;"															  ]
[ 1141@0, "command",	  "calc",		  "not",		  "(left:lng):lng address CALCunarylngNOT;"														  ]
[ 1142@0, "command",	  "calc",		  "not",		  "(left:int):int address CALCunaryintNOT;"														  ]
[ 1143@0, "command",	  "calc",		  "not",		  "(left:sht):sht address CALCunaryshtNOT;"														  ]
[ 1144@0, "command",	  "calc",		  "not",		  "(left:chr):chr address CALCunarychrNOT;"														  ]
[ 1145@0, "command",	  "calc",		  "not",		  "(left:bit):bit address CALCunarybitNOT;"														  ]
[ 1146@0, "command",	  "calc",		  "oid",		  "(v:void):oid address CALCnil2oid;"															  ]
[ 1147@0, "command",	  "calc",		  "oid",		  "(v:str):oid address CALCstr2oid;"															  ]
[ 1148@0, "command",	  "calc",		  "or",			  "(left:lng,right:lng):lng address CALCbinaryORlnglng;"												  ]
[ 1149@0, "command",	  "calc",		  "or",			  "(left:int,right:int):int address CALCbinaryORintint;"												  ]
[ 1150@0, "command",	  "calc",		  "or",			  "(left:sht,right:sht):sht address CALCbinaryORshtsht;"												  ]
[ 1151@0, "command",	  "calc",		  "or",			  "(left:chr,right:chr):chr address CALCbinaryORchrchr;"												  ]
[ 1152@0, "command",	  "calc",		  "or",			  "(left:bit,right:bit):bit address CALCbinaryORbit;"													  ]
[ 1153@0, "command",	  "calc",		  "oid",		  "(x:int):oid address CALCint2oid;"															  ]
[ 1154@0, "command",	  "calc",		  "oid",		  "(x:sht):oid address CALCsht2oid;"															  ]
[ 1155@0, "command",	  "calc",		  "oid",		  "(x:lng):oid address CALClng2oid;"															  ]
[ 1156@0, "command",	  "calc",		  "oid",		  "(x:oid):oid address CALCoid2oid;"															  ]
[ 1157@0, "command",	  "calc",		  "ptr",		  "(v:void):ptr address CALCnil2ptr;"															  ]
[ 1158@0, "command",	  "calc",		  "ptr",		  "(v:str):ptr address CALCstr2ptr;"															  ]
[ 1159@0, "command",	  "calc",		  "ptr",		  "(x:lng):ptr address CALClng2ptr;"															  ]
[ 1160@0, "command",	  "calc",		  "setoid",		  "():oid address CALCsetoidBase;"															  ]
[ 1161@0, "command",	  "calc",		  "setoid",		  "(base:oid):oid address CALCsetoidInc;"														  ]
[ 1162@0, "command",	  "calc",		  "setoid",		  "(v:oid):void address oidSetoidImpl;"															  ]
[ 1163@0, "command",	  "calc",		  "setoid",		  "(v:lng):void address lngSetoidImpl;"															  ]
[ 1164@0, "command",	  "calc",		  "setoid",		  "(v:int):void address intSetoidImpl;"															  ]
[ 1165@0, "command",	  "calc",		  "str",		  "(v:str):str address CALCstr2str;"															  ]
[ 1166@0, "command",	  "calc",		  "str",		  "(v:void):str address CALCnil2str;"															  ]
[ 1167@0, "command",	  "calc",		  "str",		  "(v:bat[:any,:any]):str address CALCbat2str;"														  ]
[ 1168@0, "command",	  "calc",		  "str",		  "(v:chr):str address CALCchr2str;"															  ]
[ 1169@0, "command",	  "calc",		  "str",		  "(v:ptr):str address CALCptr2str;"															  ]
[ 1170@0, "command",	  "calc",		  "str",		  "(v:bit):str address CALCbit2str;"															  ]
[ 1171@0, "command",	  "calc",		  "str",		  "(v:dbl):str address CALCdbl2str;"															  ]
[ 1172@0, "command",	  "calc",		  "str",		  "(v:flt):str address CALCflt2str;"															  ]
[ 1173@0, "command",	  "calc",		  "str",		  "(v:lng):str address CALClng2str;"															  ]
[ 1174@0, "command",	  "calc",		  "str",		  "(v:int):str address CALCint2str;"															  ]
[ 1175@0, "command",	  "calc",		  "sht",		  "(v:void):sht address CALCnil2sht;"															  ]
[ 1176@0, "command",	  "calc",		  "str",		  "(v:sht):str address CALCsht2str;"															  ]
[ 1177@0, "command",	  "calc",		  "sht",		  "(v:str):sht address CALCstr2sht;"															  ]
[ 1178@0, "command",	  "calc",		  "str",		  "(v:oid):str address CALCoid2str;"															  ]
[ 1179@0, "command",	  "calc",		  "str",		  "(x:dbl):str address CALCdbl2str;"															  ]
[ 1180@0, "command",	  "calc",		  "str",		  "(x:flt):str address CALCflt2str;"															  ]
[ 1181@0, "command",	  "calc",		  "str",		  "(x:lng):str address CALClng2str;"															  ]
[ 1182@0, "command",	  "calc",		  "str",		  "(x:int):str address CALCint2str;"															  ]
[ 1183@0, "command",	  "calc",		  "str",		  "(x:sht):str address CALCsht2str;"															  ]
[ 1184@0, "command",	  "calc",		  "sht",		  "(x:dbl):sht address CALCdbl2sht;"															  ]
[ 1185@0, "command",	  "calc",		  "sht",		  "(x:flt):sht address CALCflt2sht;"															  ]
[ 1186@0, "command",	  "calc",		  "sht",		  "(x:lng):sht address CALClng2sht;"															  ]
[ 1187@0, "command",	  "calc",		  "sht",		  "(x:int):sht address CALCint2sht;"															  ]
[ 1188@0, "command",	  "calc",		  "sht",		  "(x:sht):sht address CALCsht2sht;"															  ]
[ 1189@0, "command",	  "calc",		  "sht",		  "(x:bit):sht address CALCbit2sht;"															  ]
[ 1190@0, "command",	  "calc",		  "sht",		  "(x:oid):sht address CALCoid2sht;"															  ]
[ 1191@0, "command",	  "calc",		  "void",		  "(v:lng):void address CALClng2void;"															  ]
[ 1192@0, "command",	  "calc",		  "void",		  "(v:sht):void address CALCsht2void;"															  ]
[ 1193@0, "command",	  "calc",		  "void",		  "(v:int):void address CALCint2void;"															  ]
[ 1194@0, "command",	  "calc",		  "void",		  "(v:void):void address CALCnil2void;"															  ]
[ 1195@0, "command",	  "calc",		  "xor",		  "(left:lng,right:lng):lng address CALCbinaryXORlnglng;"												  ]
[ 1196@0, "command",	  "calc",		  "xor",		  "(left:int,right:int):int address CALCbinaryXORintint;"												  ]
[ 1197@0, "command",	  "calc",		  "xor",		  "(left:sht,right:sht):sht address CALCbinaryXORshtsht;"												  ]
[ 1198@0, "command",	  "calc",		  "xor",		  "(left:chr,right:chr):chr address CALCbinaryXORchrchr;"												  ]
[ 1199@0, "command",	  "calc",		  "xor",		  "(left:bit,right:bit):bit address CALCbinaryXORbit;"													  ]
[ 1200@0, "function",	  "algebra",		  "betweenOO",		  "(b:bat[:any$1,:any$2],l:any$2,h:any$2):bat[:any$1,:any$2];"												  ]
[ 1201@0, "function",	  "algebra",		  "betweenOC",		  "(b:bat[:any$1,:any$2],l:any$2,h:any$2):bat[:any$1,:any$2];"												  ]
[ 1202@0, "function",	  "algebra",		  "betweenCO",		  "(b:bat[:any$1,:any$2],l:any$2,h:any$2):bat[:any$1,:any$2];"												  ]
[ 1203@0, "function",	  "algebra",		  "between",		  "(b:bat[:any$1,:any$2],l:any$2,h:any$2):bat[:any$1,:any$2];"												  ]
[ 1204@0, "command",	  "algebra",		  "bandjoin",		  "(outer:bat[:any$1,:any$2],inner:bat[:any$2,:any$3],minus:any$2,plus:any$2):bat[:any$1,:any$3] address ALGbandjoin;"					  ]
[ 1205@0, "command",	  "algebra",		  "card",		  "(b:bat[:any,:any]):lng address ALGcard;"														  ]
[ 1206@0, "command",	  "algebra",		  "count_no_nil",	  "(b:bat[:any,:any]):lng address ALGcount_no_nil;"													  ]
[ 1207@0, "command",	  "algebra",		  "count",		  "(b:bat[:any,:any],ignore_nils:bit):lng address ALGcount_nil;"											  ]
[ 1208@0, "command",	  "algebra",		  "count",		  "(b:bat[:any,:any]):lng address ALGcount_bat;"													  ]
[ 1209@0, "command",	  "algebra",		  "cross",		  "(left:bat[:any$1,:any$2],right:bat[:any$3,:any$4]):bat[:any$1,:any$4] address ALGcross;"								  ]
[ 1210@0, "command",	  "algebra",		  "copy",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGcopy;"												  ]
[ 1211@0, "command",	  "algebra",		  "diff",		  "(left:bat[:any$1,:any$2],right:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGsdiff;"								  ]
[ 1212@0, "command",	  "algebra",		  "exist",		  "(b:bat[:any$1,:any$2],h:any$1,t:any$2):bit address ALGexistBUN;"											  ]
[ 1213@0, "command",	  "algebra",		  "exist",		  "(b:bat[:any$1,:any],h:any$1):bit address ALGexist;"													  ]
[ 1214@0, "command",	  "algebra",		  "fetchjoin",		  "(left:bat[:any$1,:any$2],right:bat[:any$2,:any$3]):bat[:any$1,:any$3] address ALGfetchjoin;"								  ]
[ 1215@0, "command",	  "algebra",		  "fragment",		  "(b:bat[:any$1,:any$2],hlow:any$1,hhigh:any$1,tlow:any$2,thigh:any$2):bat[:any$1,:any$2] address ALGfragment;"					  ]
[ 1216@0, "command",	  "algebra",		  "fetch",		  "(b:bat[:any$1,:any$2],s:bat[:oid,:any]):bat[:any$1,:any$2] address ALGfetchbat;"									  ]
[ 1217@0, "command",	  "algebra",		  "fetch",		  "(b:bat[:any$1,:any$2],s:bat[:lng,:any]):bat[:any$1,:any$2] address ALGfetchbat;"									  ]
[ 1218@0, "command",	  "algebra",		  "fetch",		  "(b:bat[:any$1,:any$2],s:bat[:int,:any]):bat[:any$1,:any$2] address ALGfetchbat;"									  ]
[ 1219@0, "command",	  "algebra",		  "fetch",		  "(b:bat[:any,:any$1],x:int):any$1 address ALGfetchint;"												  ]
[ 1220@0, "command",	  "algebra",		  "fetch",		  "(b:bat[:any,:any$1],x:lng):any$1 address ALGfetch;"													  ]
[ 1221@0, "command",	  "algebra",		  "fetch",		  "(b:bat[:any,:any$1],x:oid):any$1 address ALGfetchoid;"												  ]
[ 1222@0, "command",	  "algebra",		  "find",		  "(b:bat[:any$1,:any$2],h:any$1):any$2 address ALGfind;"												  ]
[ 1223@0, "command",	  "algebra",		  "histogram",		  "(b:bat[:any,:any$2]):bat[:any$2,:int] address ALGhistogram;"												  ]
[ 1224@0, "command",	  "algebra",		  "hashsplit",		  "(b:bat[:any$1,:any$2],buckects:int):bat[:int,:BAT] address ALGhashsplit;"										  ]
[ 1225@0, "command",	  "algebra",		  "hashjoin",		  "(left:bat[:any$1,:any$2],right:bat[:any$2,:any$3]):bat[:any$1,:any$3] address ALGhashjoin;"								  ]
[ 1226@0, "command",	  "algebra",		  "indexjoin",		  "(left:bat[:any$1,:any$2],right:bat[:any$2,:any$3]):bat[:any$1,:any$3] address ALGindexjoin;"								  ]
[ 1227@0, "command",	  "algebra",		  "intersect",		  "(left:bat[:any$1,:any$2],right:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGsintersect;"							  ]
[ 1228@0, "pattern",	  "optimizer",		  "joinPath",		  "(b:bat[:any$1,:any$2],c:bat[:any$2,:any$3]...):bat[:any$1,:any$3] address QOTjoinPath;"								  ]
[ 1229@0, "command",	  "algebra",		  "join",		  "(left:bat[:any$1,:oid],right:bat[:void,:any$3],estimate:lng):bat[:any$1,:any$3] address ALGjoinestimate;"						  ]
[ 1230@0, "command",	  "algebra",		  "join",		  "(left:bat[:any$1,:void],right:bat[:oid,:any$3],estimate:lng):bat[:any$1,:any$3] address ALGjoinestimate;"						  ]
[ 1231@0, "command",	  "algebra",		  "join",		  "(left:bat[:any$1,:any$2],right:bat[:any$2,:any$3],estimate:lng):bat[:any$1,:any$3] address ALGjoinestimate;"						  ]
[ 1232@0, "command",	  "algebra",		  "join",		  "(left:bat[:any$1,:oid],right:bat[:void,:any$3]):bat[:any$1,:any$3] address ALGjoin;"									  ]
[ 1233@0, "command",	  "algebra",		  "join",		  "(left:bat[:any$1,:void],right:bat[:oid,:any$3]):bat[:any$1,:any$3] address ALGjoin;"									  ]
[ 1234@0, "command",	  "algebra",		  "join",		  "(left:bat[:any$1,:any$2],right:bat[:any$2,:any$3]):bat[:any$1,:any$3] address ALGjoin;"								  ]
[ 1235@0, "command",	  "algebra",		  "kunion",		  "(left:bat[:any$1,:any$2],right:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGkunion;"								  ]
[ 1236@0, "command",	  "algebra",		  "kdiff",		  "(left:bat[:any$1,:any$2],right:bat[:any$1,:any]):bat[:any$1,:any$2] address ALGkdiff;"								  ]
[ 1237@0, "command",	  "algebra",		  "kintersect",		  "(left:bat[:any$1,:any$2],right:bat[:any$1,:any]):bat[:any$1,:any$2] address ALGsemijoin;"								  ]
[ 1238@0, "command",	  "algebra",		  "kunique",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGkunique;"											  ]
[ 1239@0, "function",	  "algebra",		  "likeselect",		  "(b:bat[:any,:str],pat:str):bat[:any$1,:void];"													  ]
[ 1240@0, "command",	  "algebra",		  "like",		  "(b:bat[:any$1,:str],substr:str):bat[:any$1,:str] address ALGlike;"											  ]
[ 1241@0, "command",	  "algebra",		  "min",		  "(b:bat[:any,:lng]):lng address ALGmin_lng;"														  ]
[ 1242@0, "command",	  "algebra",		  "min",		  "(b:bat[:any,:dbl]):dbl address ALGmin_dbl;"														  ]
[ 1243@0, "command",	  "algebra",		  "min",		  "(b:bat[:any,:flt]):flt address ALGmin_flt;"														  ]
[ 1244@0, "command",	  "algebra",		  "min",		  "(b:bat[:any,:int]):int address ALGmin_int;"														  ]
[ 1245@0, "command",	  "algebra",		  "min",		  "(b:bat[:any,:sht]):sht address ALGmin_sht;"														  ]
[ 1246@0, "command",	  "algebra",		  "max",		  "(b:bat[:any,:lng]):lng address ALGmax_lng;"														  ]
[ 1247@0, "command",	  "algebra",		  "max",		  "(b:bat[:any,:dbl]):dbl address ALGmax_dbl;"														  ]
[ 1248@0, "command",	  "algebra",		  "max",		  "(b:bat[:any,:flt]):flt address ALGmax_flt;"														  ]
[ 1249@0, "command",	  "algebra",		  "max",		  "(b:bat[:any,:int]):int address ALGmax_int;"														  ]
[ 1250@0, "command",	  "algebra",		  "max",		  "(b:bat[:any,:sht]):sht address ALGmax_sht;"														  ]
[ 1251@0, "command",	  "algebra",		  "max",		  "(b:bat[:any$1,:any$2]):any$2 address ALGmaxany;"													  ]
[ 1252@0, "command",	  "algebra",		  "min",		  "(b:bat[:any$1,:any$2]):any$2 address ALGminany;"													  ]
[ 1253@0, "command",	  "algebra",		  "mark",		  "(b:bat[:any$1,:any],base:void):bat[:any$1,:oid] address ALGmark0;"											  ]
[ 1254@0, "command",	  "algebra",		  "mark",		  "(b:bat[:any$1,:any],base:oid):bat[:any$1,:oid] address ALGmark;"											  ]
[ 1255@0, "command",	  "algebra",		  "mark",		  "(b:bat[:any$1,:any]):bat[:any$1,:void] address ALGmark_default;"											  ]
[ 1256@0, "command",	  "algebra",		  "mergejoin",		  "(left:bat[:any$1,:any$2],right:bat[:any$2,:any$3]):bat[:any$1,:any$3] address ALGmergejoin;"								  ]
[ 1257@0, "command",	  "algebra",		  "number",		  "(b:bat[:any$1,:any]):bat[:any$1,:int] address ALGnumber;"												  ]
[ 1258@0, "command",	  "algebra",		  "outerjoin",		  "(outer:bat[:any$1,:any$2],inner:bat[:any$2,:any$3],estimate:lng):bat[:any$1,:any$3] address ALGouterjoinestimate;"					  ]
[ 1259@0, "command",	  "algebra",		  "outerjoin",		  "(outer:bat[:any$1,:any$2],inner:bat[:any$2,:any$3]):bat[:any$1,:any$3] address ALGouterjoin;"							  ]
[ 1260@0, "command",	  "algebra",		  "prod",		  "(b:bat[:any,:dbl]):dbl address ALGprod_dbl_dbl;"													  ]
[ 1261@0, "command",	  "algebra",		  "prod",		  "(b:bat[:any,:flt]):dbl address ALGprod_flt_dbl;"													  ]
[ 1262@0, "command",	  "algebra",		  "prod",		  "(b:bat[:any,:flt]):flt address ALGprod_flt_flt;"													  ]
[ 1263@0, "command",	  "algebra",		  "prod",		  "(b:bat[:any,:lng]):lng address ALGprod_lng_lng;"													  ]
[ 1264@0, "command",	  "algebra",		  "prod",		  "(b:bat[:any,:int]):lng address ALGprod_int_lng;"													  ]
[ 1265@0, "command",	  "algebra",		  "prod",		  "(b:bat[:any,:int]):int address ALGprod_int_int;"													  ]
[ 1266@0, "command",	  "algebra",		  "prod",		  "(b:bat[:any,:sht]):lng address ALGprod_sht_lng;"													  ]
[ 1267@0, "command",	  "algebra",		  "prod",		  "(b:bat[:any,:sht]):int address ALGprod_sht_int;"													  ]
[ 1268@0, "command",	  "algebra",		  "prod",		  "(b:bat[:any,:sht]):sht address ALGprod_sht_sht;"													  ]
[ 1269@0, "command",	  "algebra",		  "position",		  "(b:bat[:any$1,:any$2],val:any$1,tval:any$2):int address ALGpositionBUN;"										  ]
[ 1270@0, "command",	  "algebra",		  "position",		  "(b:bat[:any$1,:any],v:any$1):int address ALGposition;"												  ]
[ 1271@0, "command",	  "algebra",		  "sum",		  "(b:bat[:any,:dbl]):dbl address ALGsum_dbl_dbl;"													  ]
[ 1272@0, "command",	  "algebra",		  "sum",		  "(b:bat[:any,:flt]):dbl address ALGsum_flt_dbl;"													  ]
[ 1273@0, "command",	  "algebra",		  "sum",		  "(b:bat[:any,:flt]):flt address ALGsum_flt_flt;"													  ]
[ 1274@0, "command",	  "algebra",		  "sum",		  "(b:bat[:any,:lng]):lng address ALGsum_lng_lng;"													  ]
[ 1275@0, "command",	  "algebra",		  "sum",		  "(b:bat[:any,:int]):lng address ALGsum_int_lng;"													  ]
[ 1276@0, "command",	  "algebra",		  "sum",		  "(b:bat[:any,:int]):int address ALGsum_int_int;"													  ]
[ 1277@0, "command",	  "algebra",		  "sum",		  "(b:bat[:any,:sht]):lng address ALGsum_sht_lng;"													  ]
[ 1278@0, "command",	  "algebra",		  "sum",		  "(b:bat[:any,:sht]):int address ALGsum_sht_int;"													  ]
[ 1279@0, "command",	  "algebra",		  "sum",		  "(b:bat[:any,:sht]):sht address ALGsum_sht_sht;"													  ]
[ 1280@0, "command",	  "algebra",		  "sunion",		  "(left:bat[:any$1,:any$2],right:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGsunion;"								  ]
[ 1281@0, "command",	  "algebra",		  "sdiff",		  "(left:bat[:any$1,:any$2],right:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGsdiff;"								  ]
[ 1282@0, "command",	  "algebra",		  "semijoin",		  "(left:bat[:void,:any$2],right:bat[:oid,:any]):bat[:oid,:any$2] address ALGsemijoin;"									  ]
[ 1283@0, "command",	  "algebra",		  "semijoin",		  "(left:bat[:any$1,:any$2],right:bat[:any$1,:any]):bat[:any$1,:any$2] address ALGsemijoin;"								  ]
[ 1284@0, "command",	  "algebra",		  "sintersect",		  "(left:bat[:any$1,:any$2],right:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGsintersect;"							  ]
[ 1285@0, "command",	  "algebra",		  "sunique",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGsunique;"											  ]
[ 1286@0, "command",	  "algebra",		  "sort_reverse",	  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGsort_rev;"											  ]
[ 1287@0, "command",	  "algebra",		  "sort",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGsort;"												  ]
[ 1288@0, "command",	  "algebra",		  "sample",		  "(b:bat[:any$1,:any$2],num:int):bat[:any$1,:any$2] address ALGsample;"										  ]
[ 1289@0, "command",	  "algebra",		  "slice",		  "(b:bat[:any$1,:any$2],x:int,y:int):bat[:any$1,:any$2] address ALGslice;"										  ]
[ 1290@0, "command",	  "algebra",		  "select",		  "(b:bat[:any$1,:any$2],value:any$2):bat[:any$1,:any$2] address ALGselect1;"										  ]
[ 1291@0, "command",	  "algebra",		  "select",		  "(b:bat[:any$1,:any$2],low:any$2,high:any$2,li:bit,hi:bit):bat[:any$1,:any$2] address ALGselectInclusive;"						  ]
[ 1292@0, "command",	  "algebra",		  "select",		  "(b:bat[:any$1,:any$2],low:any$2,high:any$2):bat[:any$1,:any$2] address ALGselect;"									  ]
[ 1293@0, "command",	  "algebra",		  "theta",		  "(inner_result:bat[:any$2,:any$2],outer_result:bat[:any$1,:any$3],left:bat[:any$1,:any$2],right:bat[:any$2,:any$3],opname:str):void address ALGtheta;"  ]
[ 1294@0, "command",	  "algebra",		  "thetajoin",		  "(left:bat[:any$1,:any$2],right:bat[:any$2,:any$3],opname:int,estimate:lng):bat[:any$1,:any$3] address ALGthetajoinEstimate;"				  ]
[ 1295@0, "command",	  "algebra",		  "thetajoin",		  "(left:bat[:any$1,:any$2],right:bat[:any$2,:any$3],opname:int):bat[:any$1,:any$3] address ALGthetajoin;"						  ]
[ 1296@0, "command",	  "algebra",		  "tunique",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGsunique;"											  ]
[ 1297@0, "command",	  "algebra",		  "topN",		  "(b:bat[:any,:any],top:lng):int address ALGtopN;"													  ]
[ 1298@0, "command",	  "algebra",		  "uhashsplit",		  "(b:bat[:any$1,:any$2],buckets:int):bat[:int,:BAT] address ALGuhashsplit;"										  ]
[ 1299@0, "command",	  "algebra",		  "union",		  "(left:bat[:any$1,:any$2],right:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGsunion;"								  ]
[ 1300@0, "command",	  "algebra",		  "unique",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address ALGsunique;"											  ]
[ 1301@0, "command",	  "algebra",		  "uselect",		  "(b:bat[:any$1,:any$2],value:any$2):bat[:any$1,:void] address ALGuselect1;"										  ]
[ 1302@0, "command",	  "algebra",		  "uselect",		  "(b:bat[:any$1,:any$2],low:any$2,high:any$2):bat[:any$1,:void] address ALGuselect;"									  ]
[ 1303@0, "command",	  "algebra",		  "uselect",		  "(b:bat[:any$1,:any$2],low:any$2,high:any$2,li:bit,hi:bit):bat[:any$1,:any$2] address ALGuselectInclusive;"						  ]
[ 1304@0, "command",	  "bat",		  "accpresent",		  "(b:bat[:any,:any]):int address BKCaccpresent;"													  ]
[ 1305@0, "command",	  "bat",		  "accdestroy",		  "(b:bat[:any,:any],acctype:int):void address BKCaccdestroy;"												  ]
[ 1306@0, "command",	  "bat",		  "accbuild",		  "(b:bat[:any,:any],acctype:int,param:ptr):int address BKCaccbuild;"											  ]
[ 1307@0, "command",	  "bat",		  "accbuild",		  "(b:bat[:any,:any],acctype:str):bit address BKCaccbuild_std;"												  ]
[ 1308@0, "command",	  "bat",		  "append",		  "(i:bat[:oid,:void],u:bat[:oid,:void]):bat[:oid,:void] address BKCbat_append_oidvoid_bat_wrap;"							  ]
[ 1309@0, "command",	  "bat",		  "append",		  "(i:bat[:void,:any$1],u:any$1):bat[:void,:any$1] address BKCbat_append_val_wrap;"									  ]
[ 1310@0, "command",	  "bat",		  "append",		  "(i:bat[:void,:any$1],u:bat[:oid,:any$1]):bat[:void,:any$1] address BKCbat_append_oid_bat_wrap;"							  ]
[ 1311@0, "command",	  "bat",		  "append",		  "(i:bat[:void,:any$1],u:bat[:void,:any$1]):bat[:void,:any$1] address BKCbat_append_void_bat_wrap;"							  ]
[ 1312@0, "command",	  "bat",		  "append",		  "(i:bat[:oid,:any$1],u:any$1):bat[:oid,:any$1] address BKCoid_bat_append_val_wrap;"									  ]
[ 1313@0, "command",	  "bat",		  "append",		  "(i:bat[:oid,:any$1],u:bat[:oid,:any$1]):bat[:oid,:any$1] address BKCoid_bat_append_oid_bat_wrap;"							  ]
[ 1314@0, "command",	  "bat",		  "access",		  "(b:bat[:any$1,:any$2],mode:int):void address BKCaccess;"												  ]
[ 1315@0, "command",	  "bat",		  "bat",		  "(ht:int,tt:int,size:lng):bat[:any,:any] address BKCnewBATlng;"											  ]
[ 1316@0, "command",	  "bat",		  "bat",		  "(ht:int,tt:int,size:int):bat[:any,:any] address BKCnewBATint;"											  ]
[ 1317@0, "command",	  "bat",		  "bat",		  "(ht:int,tt:int):bat[:any,:any] address BKCnewBat;"													  ]
[ 1318@0, "command",	  "bat",		  "clear",		  "(b:bat[:any$1,:any$2]):void address BKCdelete_all;"													  ]
[ 1319@0, "command",	  "bat",		  "convert",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address BKCconvert;"											  ]
[ 1320@0, "command",	  "bat",		  "deleteBuns",		  "(b:bat[:any$1,:any$2],src:bat[:any$1,:any$2]):void address BKCdelete_bat_bun;"									  ]
[ 1321@0, "command",	  "bat",		  "delete",		  "(b:bat[:any$1,:any$2],src:bat[:any$1,:any]):void address BKCdelete_bat_head;"									  ]
[ 1322@0, "command",	  "bat",		  "delete",		  "(b:bat[:any$1,:any$2]):void address BKCdelete_all;"													  ]
[ 1323@0, "command",	  "bat",		  "delete",		  "(b:bat[:void,:any$2],h:oid):void address BKCdelete_head;"												  ]
[ 1324@0, "command",	  "bat",		  "delete",		  "(b:bat[:any$1,:any$2],h:any$1):void address BKCdelete_head;"												  ]
[ 1325@0, "command",	  "bat",		  "delete",		  "(b:bat[:void,:any$2],h:oid,t:any$2):void address BKCdelete_bun;"											  ]
[ 1326@0, "command",	  "bat",		  "delete",		  "(b:bat[:any$1,:any$2],h:any$1,t:any$2):void address BKCdelete_bun;"											  ]
[ 1327@0, "command",	  "bat",		  "getName",		  "(b:bat[:any,:any]):str address BKCgetBBPname;"													  ]
[ 1328@0, "command",	  "bat",		  "getDelta",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address BKCgetDelta;"											  ]
[ 1329@0, "command",	  "bat",		  "getAlpha",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address BKCgetAlpha;"											  ]
[ 1330@0, "command",	  "bat",		  "getBatSize",		  "(b:bat[:any,:any]):int address BKCbatsize;"														  ]
[ 1331@0, "command",	  "bat",		  "getBatSize",		  "(b:bat[:any,:any]):str address BKCbatsize_str;"													  ]
[ 1332@0, "command",	  "bat",		  "getSequenceBase",	  "(b:bat[:oid,:any]):oid address BKCgetSequenceBase;"													  ]
[ 1333@0, "command",	  "bat",		  "getSequenceBase",	  "(b:bat[:void,:any]):oid address BKCgetSequenceBase;"													  ]
[ 1334@0, "command",	  "bat",		  "getAccess",		  "(b:bat[:any,:any]):chr address BKCgetAccess;"													  ]
[ 1335@0, "command",	  "bat",		  "getRole",		  "(bid:bat[:any,:any]):str address BKCgetRole;"													  ]
[ 1336@0, "command",	  "bat",		  "getTailType",	  "(b:bat[:any,:any]):str address BKCgetTailType;"													  ]
[ 1337@0, "command",	  "bat",		  "getHeadType",	  "(b:bat[:any,:any]):str address BKCgetHeadType;"													  ]
[ 1338@0, "command",	  "bat",		  "getCapacity",	  "(b:bat[:any,:any]):lng address BKCgetCapacity;"													  ]
[ 1339@0, "command",	  "bat",		  "hasIndex",		  "(b:bat[:any,:any]):bit address BKChasIndex;"														  ]
[ 1340@0, "command",	  "bat",		  "hasHash",		  "(b:bat[:any,:any]):bit address BKChasHash;"														  ]
[ 1341@0, "command",	  "bat",		  "heat",		  "(name:str):lng address BKCheat;"															  ]
[ 1342@0, "command",	  "bat",		  "hasReadMode",	  "(b:bat[:any,:any]):bit address BKChasReadMode;"													  ]
[ 1343@0, "command",	  "bat",		  "hasWriteMode",	  "(b:bat[:any,:any]):bit address BKChasWriteMode;"													  ]
[ 1344@0, "command",	  "bat",		  "hasAppendMode",	  "(b:bat[:any,:any]):bit address BKChasAppendMode;"													  ]
[ 1345@0, "command",	  "bat",		  "isSynced",		  "(b1:bat[:any,:any],b2:bat[:any,:any]):bit address BKCisSynced;"											  ]
[ 1346@0, "command",	  "bat",		  "isCached",		  "(b:bat[:any,:any]):bit address BKCisCached;"														  ]
[ 1347@0, "command",	  "bat",		  "isPersistent",	  "(b:bat[:any,:any]):bit address BKCisPersistent;"													  ]
[ 1348@0, "command",	  "bat",		  "isTransient",	  "(b:bat[:any,:any]):bit address BKCisTransient;"													  ]
[ 1349@0, "command",	  "bat",		  "insert",		  "(b:bat[:void,:any$1],v:any$1):void address BKCinsert_void_bun;"											  ]
[ 1350@0, "command",	  "bat",		  "insert",		  "(b:bat[:void,:any$2],h:oid,t:any$2):void address BKCinsert_bun;"											  ]
[ 1351@0, "command",	  "bat",		  "insert",		  "(b:bat[:any$1,:any$2],h:any$1,t:any$2):void address BKCinsert_bun;"											  ]
[ 1352@0, "command",	  "bat",		  "insert",		  "(b:bat[:any$1,:any$2],src:bat[:any$1,:any$2]):void address BKCinsert_bat;"										  ]
[ 1353@0, "command",	  "bat",		  "insert",		  "(b:bat[:any$1,:oid],src:bat[:any$1,:void]):bat[:any$1,:any$2] address BKCinsert_bat;"								  ]
[ 1354@0, "command",	  "bat",		  "isSortedReverse",	  "(b:bat[:any,:any]):bit address BKCisSortedReverse;"													  ]
[ 1355@0, "command",	  "bat",		  "isSorted",		  "(b:bat[:any,:any]):bit address BKCisSorted;"														  ]
[ 1356@0, "command",	  "bat",		  "isaSet",		  "(b:bat[:any,:any]):bit address BKCisaSet;"														  ]
[ 1357@0, "command",	  "bat",		  "isaKey",		  "(b:bat[:any,:any]):bit address BKCgetKey;"														  ]
[ 1358@0, "command",	  "bat",		  "info",		  "(b:bat[:any,:any]):bat[:str,:str] address BKCinfo;"													  ]
[ 1359@0, "command",	  "bat",		  "load",		  "(name:str):bat[:any,:any] address BKCload;"														  ]
[ 1360@0, "command",	  "bat",		  "madvise",		  "(b:bat[:any,:any],mode:int):bit address BKCmadvise2;"												  ]
[ 1361@0, "command",	  "bat",		  "madvise",		  "(b:bat[:any,:any],buns_mode:int,hheap_mode:int,theap_mode:int,hacc_mode:int,tacc_mode:int):bit address BKCmadvise;"					  ]
[ 1362@0, "command",	  "bat",		  "mmap",		  "(b:bat[:any,:any],mode:int):bit address BKCmmap2;"													  ]
[ 1363@0, "command",	  "bat",		  "mmap",		  "(b:bat[:any,:any],buns_mode:int,hheap_mode:int,theap_mode:int,hacc_mode:int,tacc_mode:int):bit address BKCmmap;"					  ]
[ 1364@0, "command",	  "bat",		  "mirror",		  "(b:bat[:any$1,:any]):bat[:any$1,:any$1] address BKCmirror;"												  ]
[ 1365@0, "command",	  "bat",		  "order",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address BKCorder;"												  ]
[ 1366@0, "command",	  "bat",		  "persists",		  "(b:bat[:any,:any],f:bit):bit address BKCpersists;"													  ]
[ 1367@0, "command",	  "bat",		  "replace",		  "(o:bat[:void,:any$1],d:bat[:oid,:any$1]):bat[:void,:any$1] address BKCbat_replace_oid_bat_wrap;"							  ]
[ 1368@0, "command",	  "bat",		  "replace",		  "(b:bat[:void,:any$2],h:oid,t:any$2):void address BKCreplace_bun;"											  ]
[ 1369@0, "command",	  "bat",		  "replace",		  "(b:bat[:any$1,:any$2],h:any$1,t:any$2):void address BKCreplace_bun;"											  ]
[ 1370@0, "command",	  "bat",		  "replace",		  "(b:bat[:any$1,:any$2],src:bat[:any$1,:any$2]):bat[:any$1,:any$2] address BKCreplace_bat;"								  ]
[ 1371@0, "command",	  "bat",		  "revert",		  "(b:bat[:any$1,:any$2]):bat[:any$1,:any$2] address BKCrevert;"											  ]
[ 1372@0, "command",	  "bat",		  "reverse",		  "(b:bat[:any$1,:any$2]):bat[:any$2,:any$1] address BKCreverse;"											  ]
[ 1373@0, "command",	  "bat",		  "setIndex",		  "(b:bat[:any,:any],prop:bit):bit address BKCsetIndex;"												  ]
[ 1374@0, "command",	  "bat",		  "setHash",		  "(b:bat[:any,:any],prop:bit):bit address BKCsetHash;"													  ]
[ 1375@0, "command",	  "bat",		  "setHot",		  "(b:bat[:any,:any]):void address BKChotBAT;"														  ]
[ 1376@0, "command",	  "bat",		  "setCold",		  "(b:bat[:any,:any]):void address BKCcoldBAT;"														  ]
[ 1377@0, "command",	  "bat",		  "setCold",		  "(nme:str):void address BKCcold;"															  ]
[ 1378@0, "command",	  "bat",		  "setHot",		  "(name:str):void address BKChot;"															  ]
[ 1379@0, "command",	  "bat",		  "save",		  "(nme:str):bit address BKCsave;"															  ]
[ 1380@0, "command",	  "bat",		  "save",		  "(nme:bat[:any,:any]):bit address BKCsave2;"														  ]
[ 1381@0, "command",	  "bat",		  "setPersistent",	  "(b:bat[:any,:any]):bit address BKCsetPersistent;"													  ]
[ 1382@0, "command",	  "bat",		  "setTransient",	  "(b:bat[:any,:any]):bit address BKCsetTransient;"													  ]
[ 1383@0, "command",	  "bat",		  "setColumn",		  "(b:bat[:any$1,:any$2],h:str,t:str):void address BKCsetColumns;"											  ]
[ 1384@0, "command",	  "bat",		  "setColumn",		  "(b:bat[:any$1,:any$2],t:str):void address BKCsetColumn;"												  ]
[ 1385@0, "command",	  "bat",		  "setRole",		  "(b:bat[:any$1,:any$2],h:str,t:str):void address BKCsetRole;"												  ]
[ 1386@0, "command",	  "bat",		  "setName",		  "(b:bat[:any$1,:any$2],s:str):void address BKCsetName;"												  ]
[ 1387@0, "command",	  "bat",		  "setSorted",		  "(b:bat[:any,:any]):bit address BKCsetSorted;"													  ]
[ 1388@0, "command",	  "bat",		  "setSequenceBase",	  "(b:bat[:oid,:any$1],seqbase:oid):any address BKCsetSequenceBase;"											  ]
[ 1389@0, "command",	  "bat",		  "setSequenceBase",	  "(b:bat[:void,:any$1],seqbase:oid):any address BKCsetSequenceBase;"											  ]
[ 1390@0, "command",	  "bat",		  "setWriteMode",	  "(b:bat[:any$1,:any$2]):void address BKCsetWriteMode;"												  ]
[ 1391@0, "command",	  "bat",		  "setReadMode",	  "(b:bat[:any$1,:any$2]):void address BKCsetReadMode;"													  ]
[ 1392@0, "command",	  "bat",		  "setAppendMode",	  "(b:bat[:any$1,:any$2]):void address BKCsetAppendMode;"												  ]
[ 1393@0, "command",	  "bat",		  "setAccess",		  "(b:bat[:any$1,:any$2],mode:str):void address BKCsetAccess;"												  ]
[ 1394@0, "command",	  "bat",		  "setSet",		  "(b:bat[:any$1,:any$2],mode:bit):bat[:any$1,:any$2] address BKCsetSet;"										  ]
[ 1395@0, "command",	  "bat",		  "setKey",		  "(b:bat[:any$1,:any$2],mode:bit):bat[:any$1,:any$2] address BKCsetkey;"										  ]
[ 1396@0, "command",	  "bat",		  "unload",		  "(name:str):bit address BKCunload;"															  ]
[ 1397@0, "command",	  "date",		  "!=",			  "(v:date,w:date):bit address MTIMEdate_NEQ;"														  ]
[ 1398@0, "command",	  "date",		  "<=",			  "(v:date,w:date):bit address MTIMEdate_LE;"														  ]
[ 1399@0, "command",	  "date",		  "<",			  "(v:date,w:date):bit address MTIMEdate_LT;"														  ]
[ 1400@0, "command",	  "date",		  "=",			  "(v:date,w:date):bit address MTIMEdate_EQ;"														  ]
[ 1401@0, "command",	  "date",		  ">=",			  "(v:date,w:date):bit address MTIMEdate_GE;"														  ]
[ 1402@0, "command",	  "date",		  ">",			  "(v:date,w:date):bit address MTIMEdate_GT;"														  ]
[ 1403@0, "command",	  "date",		  "#fromstr",		  "():date address date_fromstr;"															  ]
[ 1404@0, "command",	  "date",		  "isnil",		  "(v:date):bit address MTIMEdate_isnil;"														  ]
[ 1405@0, "command",	  "date",		  "#tostr",		  "():str address date_tostr;"																  ]
[ 1406@0, "command",	  "daytime",		  "!=",			  "(v:daytime,w:daytime):bit address MTIMEdaytime_NEQ;"													  ]
[ 1407@0, "command",	  "daytime",		  "<=",			  "(v:daytime,w:daytime):bit address MTIMEdaytime_LE;"													  ]
[ 1408@0, "command",	  "daytime",		  "<",			  "(v:daytime,w:daytime):bit address MTIMEdaytime_LT;"													  ]
[ 1409@0, "command",	  "daytime",		  "=",			  "(v:daytime,w:daytime):bit address MTIMEdaytime_EQ;"													  ]
[ 1410@0, "command",	  "daytime",		  ">=",			  "(v:daytime,w:daytime):bit address MTIMEdaytime_GE;"													  ]
[ 1411@0, "command",	  "daytime",		  ">",			  "(v:daytime,w:daytime):bit address MTIMEdaytime_GT;"													  ]
[ 1412@0, "command",	  "daytime",		  "#fromstr",		  "():daytime address daytime_fromstr;"															  ]
[ 1413@0, "command",	  "daytime",		  "isnil",		  "(v:daytime):bit address MTIMEdaytime_isnil;"														  ]
[ 1414@0, "command",	  "daytime",		  "#tostr",		  "():str address daytime_tostr;"															  ]
[ 1415@0, "command",	  "timestamp",		  "!=",			  "(v:timestamp,w:timestamp):bit address MTIMEtimestamp_NEQ;"												  ]
[ 1416@0, "command",	  "timestamp",		  "<=",			  "(v:timestamp,w:timestamp):bit address MTIMEtimestamp_LE;"												  ]
[ 1417@0, "command",	  "timestamp",		  "<",			  "(v:timestamp,w:timestamp):bit address MTIMEtimestamp_LT;"												  ]
[ 1418@0, "command",	  "timestamp",		  "=",			  "(v:timestamp,w:timestamp):bit address MTIMEtimestamp_EQ;"												  ]
[ 1419@0, "command",	  "timestamp",		  ">=",			  "(v:timestamp,w:timestamp):bit address MTIMEtimestamp_GE;"												  ]
[ 1420@0, "command",	  "timestamp",		  ">",			  "(v:timestamp,w:timestamp):bit address MTIMEtimestamp_GT;"												  ]
[ 1421@0, "command",	  "timestamp",		  "epoch",		  "(t:timestamp):lng address MTIMEepoch2lng;"														  ]
[ 1422@0, "command",	  "timestamp",		  "epoch",		  "():timestamp address MTIMEepoch;"															  ]
[ 1423@0, "command",	  "timestamp",		  "#fromstr",		  "():timestamp address timestamp_fromstr;"														  ]
[ 1424@0, "command",	  "timestamp",		  "isnil",		  "(v:timestamp):bit address MTIMEtimestamp_isnil;"													  ]
[ 1425@0, "command",	  "timestamp",		  "#tostr",		  "():str address timestamp_tostr;"															  ]
[ 1426@0, "command",	  "timestamp",		  "unix_epoch",		  "():timestamp address MTIMEunix_epoch;"														  ]
[ 1427@0, "command",	  "tzone",		  "#fromstr",		  "():tzone address tzone_fromstr;"															  ]
[ 1428@0, "command",	  "tzone",		  "str",		  "():str address MTIMEtzone_tostr;"															  ]
[ 1429@0, "command",	  "tzone",		  "timestamp",		  "(secs:int):timestamp address MTIMEtimestamp;"													  ]
[ 1430@0, "command",	  "tzone",		  "#tostr",		  "():str address tzone_tostr;"																  ]
[ 1431@0, "command",	  "rule",		  "define",		  "(m:int,d:str,w:int,min:int):rule address MTIMEruleDef2;"												  ]
[ 1432@0, "command",	  "rule",		  "define",		  "(m:int,d:str,w:int,h:int,min:int):rule address MTIMEruleDef1;"											  ]
[ 1433@0, "command",	  "rule",		  "define",		  "(m:int,d:int,w:int,h:int,min:int):rule address MTIMEruleDef0;"											  ]
[ 1434@0, "command",	  "rule",		  "#fromstr",		  "():rule address rule_fromstr;"															  ]
[ 1435@0, "command",	  "rule",		  "#tostr",		  "():str address rule_tostr;"																  ]
[ 1436@0, "command",	  "mtime",		  "add",		  "(v:timestamp,msecs:lng):timestamp address MTIMEtimestamp_add;"											  ]
[ 1437@0, "command",	  "mtime",		  "adddays",		  "(value:date,days:int):date address MTIMEdate_adddays;"												  ]
[ 1438@0, "command",	  "mtime",		  "addmonths",		  "(value:date,months:int):date address MTIMEdate_addmonths;"												  ]
[ 1439@0, "command",	  "mtime",		  "addyears",		  "(value:date,years:int):date address MTIMEdate_addyears;"												  ]
[ 1440@0, "command",	  "mtime",		  "current_time",	  "():daytime address MTIMEcurrent_time;"														  ]
[ 1441@0, "command",	  "mtime",		  "current_date",	  "():date address MTIMEcurrent_date;"															  ]
[ 1442@0, "command",	  "mtime",		  "current_timestamp",	  "():timestamp address MTIMEcurrent_timestamp;"													  ]
[ 1443@0, "command",	  "mtime",		  "compute",		  "(r:rule,year:int):date address MTIMEcompute_rule_foryear;"												  ]
[ 1444@0, "command",	  "mtime",		  "daytime",		  "(h:int,m:int,s:int):daytime address MTIMEdaytime3;"													  ]
[ 1445@0, "command",	  "mtime",		  "daytime",		  "(h:int,m:int):daytime address MTIMEdaytime2;"													  ]
[ 1446@0, "command",	  "mtime",		  "daytime",		  "(h:int):daytime address MTIMEdaytime1;"														  ]
[ 1447@0, "command",	  "mtime",		  "dayname",		  "(day:int):str address MTIMEday_to_str;"														  ]
[ 1448@0, "command",	  "mtime",		  "daynum",		  "(day:str):int address MTIMEday_from_str;"														  ]
[ 1449@0, "command",	  "mtime",		  "dst",		  "(t:timestamp,v:tzone):bit address MTIMEtimestamp_inside_dst;"											  ]
[ 1450@0, "command",	  "mtime",		  "diff",		  "(val1:timestamp,val2:timestamp):lng address MTIMEtimestamp_diff;"											  ]
[ 1451@0, "command",	  "mtime",		  "dayofweek",		  "(d:date):int address MTIMEdate_extract_dayofweek;"													  ]
[ 1452@0, "command",	  "mtime",		  "dayofyear",		  "(d:date):int address MTIMEdate_extract_dayofyear;"													  ]
[ 1453@0, "command",	  "mtime",		  "diff",		  "(val1:date,val2:date):int address MTIMEdate_diff;"													  ]
[ 1454@0, "command",	  "mtime",		  "day",		  "(t:rule):int address MTIMErule_extract_day;"														  ]
[ 1455@0, "command",	  "mtime",		  "date",		  "(t:timestamp,v:tzone):date address MTIMEtimestamp_extract_date;"											  ]
[ 1456@0, "command",	  "mtime",		  "date",		  "(t:timestamp):date address MTIMEtimestamp_extract_date_default;"											  ]
[ 1457@0, "command",	  "mtime",		  "daytime",		  "(t:timestamp,v:tzone):daytime address MTIMEtimestamp_extract_daytime;"										  ]
[ 1458@0, "command",	  "mtime",		  "daytime",		  "(t:timestamp):daytime address MTIMEtimestamp_extract_daytime_default;"										  ]
[ 1459@0, "command",	  "mtime",		  "day",		  "(d:bat[:any$1,:date]):bat[:any,:int] address MTIMEdate_extract_day_bulk;"										  ]
[ 1460@0, "command",	  "mtime",		  "day",		  "(d:date):int address MTIMEdate_extract_day;"														  ]
[ 1461@0, "command",	  "mtime",		  "daytime",		  "(h:int,m:int,s:int,mi:int):daytime address MTIMEdaytime_create;"											  ]
[ 1462@0, "command",	  "mtime",		  "daytime",		  "(s:str):daytime address MTIMEdaytime_fromstr;"													  ]
[ 1463@0, "command",	  "mtime",		  "date",		  "(yr:int,mo:int,day:int):date address MTIMEdate_create;"												  ]
[ 1464@0, "command",	  "mtime",		  "date",		  "(s:str):date address MTIMEdate_fromstr;"														  ]
[ 1465@0, "command",	  "mtime",		  "date",		  "($1:void):date address MTIMEnil2date;"														  ]
[ 1466@0, "command",	  "mtime",		  "date_add_month_interval", "(t:date,s:int):date address MTIMEdate_add_month_interval_wrap;"											  ]
[ 1467@0, "command",	  "mtime",		  "date_add_sec_interval", "(t:date,s:int):date address MTIMEdate_add_sec_interval_wrap;"											  ]
[ 1468@0, "command",	  "mtime",		  "date_sub_sec_interval", "(t:date,s:lng):date address MTIMEdate_sub_sec_interval_wrap;"											  ]
[ 1469@0, "command",	  "mtime",		  "end_dst",		  "(t:tzone):rule address MTIMEtzone_extract_end;"													  ]
[ 1470@0, "command",	  "mtime",		  "hours",		  "(d:bat[:any$1,:date]):bat[:any,:int] address MTIMEdaytime_extract_hours_bulk;"									  ]
[ 1471@0, "command",	  "mtime",		  "hours",		  "(h:daytime):int address MTIMEdaytime_extract_hours;"													  ]
[ 1472@0, "command",	  "mtime",		  "msecs",		  "(d:int,h:int,m:int,s:int,ms:int):lng address MTIMEmsecs;"												  ]
[ 1473@0, "command",	  "mtime",		  "monthname",		  "(month:int):str address MTIMEmonth_to_str;"														  ]
[ 1474@0, "command",	  "mtime",		  "monthnum",		  "(month:str):int address MTIMEmonth_from_str;"													  ]
[ 1475@0, "command",	  "mtime",		  "minutes",		  "(t:rule):int address MTIMErule_extract_minutes;"													  ]
[ 1476@0, "command",	  "mtime",		  "month",		  "(t:rule):int address MTIMErule_extract_month;"													  ]
[ 1477@0, "command",	  "mtime",		  "minutes",		  "(t:tzone):int address MTIMEtzone_extract_minutes;"													  ]
[ 1478@0, "command",	  "mtime",		  "milliseconds",	  "(d:bat[:any$1,:date]):bat[:any,:int] address MTIMEdaytime_extract_milliseconds_bulk;"								  ]
[ 1479@0, "command",	  "mtime",		  "milliseconds",	  "(d:daytime):int address MTIMEdaytime_extract_milliseconds;"												  ]
[ 1480@0, "command",	  "mtime",		  "minutes",		  "(d:bat[:any$1,:date]):bat[:any,:int] address MTIMEdaytime_extract_minutes_bulk;"									  ]
[ 1481@0, "command",	  "mtime",		  "minutes",		  "(d:daytime):int address MTIMEdaytime_extract_minutes;"												  ]
[ 1482@0, "command",	  "mtime",		  "month",		  "(d:bat[:any$1,:date]):bat[:any,:int] address MTIMEdate_extract_month_bulk;"										  ]
[ 1483@0, "command",	  "mtime",		  "month",		  "(d:date):int address MTIMEdate_extract_month;"													  ]
[ 1484@0, "command",	  "mtime",		  "oldduration",	  "(format:str):int address MTIMEoldduration;"														  ]
[ 1485@0, "command",	  "mtime",		  "olddate",		  "(format:str):date address MTIMEolddate;"														  ]
[ 1486@0, "command",	  "mtime",		  "prelude",		  "():void address MTIMEprelude;"															  ]
[ 1487@0, "command",	  "mtime",		  "rule",		  "(mo:int,d:int,wkday:int,mi:int):rule address MTIMErule_create;"											  ]
[ 1488@0, "command",	  "mtime",		  "rule",		  "(s:str):rule address MTIMErule_fromstr;"														  ]
[ 1489@0, "command",	  "mtime",		  "start_dst",		  "(t:tzone):rule address MTIMEtzone_extract_start;"													  ]
[ 1490@0, "command",	  "mtime",		  "seconds",		  "(d:bat[:any$1,:date]):bat[:any,:int] address MTIMEdaytime_extract_seconds_bulk;"									  ]
[ 1491@0, "command",	  "mtime",		  "seconds",		  "(d:daytime):int address MTIMEdaytime_extract_seconds;"												  ]
[ 1492@0, "command",	  "mtime",		  "time_synonyms",	  "(allow:bit):void address MTIMEsynonyms;"														  ]
[ 1493@0, "command",	  "mtime",		  "timezone",		  "(name:str):tzone address MTIMEtimezone;"														  ]
[ 1494@0, "command",	  "mtime",		  "tzone",		  "(mi:int,s:rule,erule:rule):tzone address MTIMEtzone_create_dst;"											  ]
[ 1495@0, "command",	  "mtime",		  "tzone",		  "(s:lng):tzone address MTIMEtzone_create;"														  ]
[ 1496@0, "command",	  "mtime",		  "tzone",		  "(s:int):tzone address MTIMEtzone_create;"														  ]
[ 1497@0, "command",	  "mtime",		  "tzone",		  "(s:str):tzone address MTIMEtzone_fromstr;"														  ]
[ 1498@0, "command",	  "mtime",		  "timestamp",		  "(d:date,dt:daytime):timestamp address MTIMEtimestamp_create_default;"										  ]
[ 1499@0, "command",	  "mtime",		  "timestamp",		  "(d:date,dt:daytime,t:tzone):timestamp address MTIMEtimestamp_create;"										  ]
[ 1500@0, "command",	  "mtime",		  "tzone_local",	  "():tzone address MTIMEtzone_get_local;"														  ]
[ 1501@0, "command",	  "mtime",		  "tzone_local",	  "(t:tzone):void address MTIMEtzone_set_local;"													  ]
[ 1502@0, "command",	  "mtime",		  "weekofyear",		  "(d:date):int address MTIMEdate_extract_weekofyear;"													  ]
[ 1503@0, "command",	  "mtime",		  "weekday",		  "(t:rule):int address MTIMErule_extract_weekday;"													  ]
[ 1504@0, "command",	  "mtime",		  "year",		  "(d:bat[:any$1,:date]):bat[:any,:int] address MTIMEdate_extract_year_bulk;"										  ]
[ 1505@0, "command",	  "mtime",		  "year",		  "(d:date):int address MTIMEdate_extract_year;"													  ]
[ 1506@0, "command",	  "url",		  "#fromstr",		  "():url address URLfromString;"															  ]
[ 1507@0, "command",	  "url",		  "getRobotURL",	  "(u:url):str address URLgetRobotURL;"															  ]
[ 1508@0, "command",	  "url",		  "getUser",		  "(u:url):str address URLgetUser;"															  ]
[ 1509@0, "command",	  "url",		  "getQueryArg",	  "(u:url):bat[:str,:str] address URLgetQueryArg;"													  ]
[ 1510@0, "command",	  "url",		  "getQuery",		  "(u:url):str address URLgetQuery;"															  ]
[ 1511@0, "command",	  "url",		  "getProtocol",	  "(u:url):str address URLgetProtocol;"															  ]
[ 1512@0, "command",	  "url",		  "getPort",		  "(u:url):str address URLgetPort;"															  ]
[ 1513@0, "command",	  "url",		  "getHost",		  "(u:url):str address URLgetHost;"															  ]
[ 1514@0, "command",	  "url",		  "getFile",		  "(u:url):str address URLgetFile;"															  ]
[ 1515@0, "command",	  "url",		  "getExtension",	  "(u:url):str address URLgetExtension;"														  ]
[ 1516@0, "command",	  "url",		  "getDomain",		  "(u:url):str address URLgetDomain;"															  ]
[ 1517@0, "command",	  "url",		  "getDirectory",	  "(u:url):bat[:int,:str] address URLgetDirectory;"													  ]
[ 1518@0, "command",	  "url",		  "getContext",		  "(u:url):str address URLgetContext;"															  ]
[ 1519@0, "command",	  "url",		  "getContent",		  "(u:url):str address URLgetContent;"															  ]
[ 1520@0, "command",	  "url",		  "getBasename",	  "(u:url):str address URLgetBasename;"															  ]
[ 1521@0, "command",	  "url",		  "getAnchor",		  "(u:url):str address URLgetAnchor;"															  ]
[ 1522@0, "command",	  "url",		  "isaURL",		  "(u:url):bit address URLisaURL;"															  ]
[ 1523@0, "command",	  "url",		  "newurl",		  "(prot:str,host:str,fnme:str):url address URLnew3;"													  ]
[ 1524@0, "command",	  "url",		  "newurl",		  "(p:str,h:str,prt:int,f:str):url address URLnew4;"													  ]
[ 1525@0, "command",	  "url",		  "#tostr",		  "():str address URLtoString;"																  ]
[ 1526@0, "command",	  "url",		  "url",		  "(s:str):url address URLnew;"																  ]
[ 1527@0, "command",	  "str",		  "+",			  "(l:str,r:str):str address STRConcat;"														  ]
[ 1528@0, "command",	  "str",		  "STRprelude",		  "():void address strPrelude;"																  ]
[ 1529@0, "command",	  "str",		  "codeset",		  "():str address STRcodeset;"																  ]
[ 1530@0, "command",	  "str",		  "chrAt",		  "(s:str,index:int):chr address STRChrAt;"														  ]
[ 1531@0, "command",	  "str",		  "endsWith",		  "(s:str,suffix:str):bit address STRSuffix;"														  ]
[ 1532@0, "command",	  "str",		  "iconv",		  "(org:str,fromCs:str,toCs:str):str address STRIconv;"													  ]
[ 1533@0, "command",	  "str",		  "ltrim",		  "(s:str):str address STRLtrim;"															  ]
[ 1534@0, "command",	  "str",		  "length",		  "(s:str):int address STRLength;"															  ]
[ 1535@0, "command",	  "str",		  "match",		  "(s:str,pat:str):bit address STRMatch;"														  ]
[ 1536@0, "command",	  "str",		  "nbytes",		  "(s:str):int address STRBytes;"															  ]
[ 1537@0, "command",	  "str",		  "rtrim",		  "(s:str):str address STRRtrim;"															  ]
[ 1538@0, "command",	  "str",		  "r_search",		  "(s:str,c:chr):int address STRReverseChrSearch;"													  ]
[ 1539@0, "command",	  "str",		  "r_search",		  "(s:str,c:str):int address STRReverseStrSearch;"													  ]
[ 1540@0, "command",	  "str",		  "substitute",		  "(s:str,src:str,dst:str,rep:bit):str address STRSubstitute;"												  ]
[ 1541@0, "command",	  "str",		  "search",		  "(s:str,c:chr):int address STRchrSearch;"														  ]
[ 1542@0, "command",	  "str",		  "search",		  "(s:str,c:str):int address STRstrSearch;"														  ]
[ 1543@0, "command",	  "str",		  "startsWith",		  "(s:str,prefix:str):bit address STRPrefix;"														  ]
[ 1544@0, "command",	  "str",		  "string",		  "(s:str,offset:int,count:int):str address STRSubString;"												  ]
[ 1545@0, "command",	  "str",		  "string",		  "(s:str,offset:int):str address STRTail;"														  ]
[ 1546@0, "command",	  "str",		  "str",		  "(s:str):str address STRtostr;"															  ]
[ 1547@0, "command",	  "str",		  "trim",		  "(s:str):str address STRStrip;"															  ]
[ 1548@0, "command",	  "str",		  "toUpper",		  "(s:str):str address STRUpper;"															  ]
[ 1549@0, "command",	  "str",		  "toLower",		  "(s:str):str address STRLower;"															  ]
[ 1550@0, "command",	  "str",		  "unicode",		  "(wchar:int):str address STRFromWChr;"														  ]
[ 1551@0, "command",	  "str",		  "unicodeAt",		  "(s:str,index:int):int address STRWChrAt;"														  ]
[ 1552@0, "command",	  "blob",		  "#convert",		  "():void address BLOBconvert;"															  ]
[ 1553@0, "command",	  "blob",		  "#del",		  "():void address BLOBdel;"																  ]
[ 1554@0, "command",	  "blob",		  "#fromstr",		  "():void address BLOBfromstr;"															  ]
[ 1555@0, "command",	  "blob",		  "#heap",		  "():void address BLOBheap;"																  ]
[ 1556@0, "command",	  "blob",		  "#hash",		  "():void address BLOBhash;"																  ]
[ 1557@0, "command",	  "blob",		  "#length",		  "():void address BLOBlength;"																  ]
[ 1558@0, "command",	  "blob",		  "nitems",		  "(b:blob):int address BLOBnitems;"															  ]
[ 1559@0, "command",	  "blob",		  "null",		  "():void address BLOBnull;"																  ]
[ 1560@0, "command",	  "blob",		  "#nequal",		  "():void address BLOBnequal;"																  ]
[ 1561@0, "command",	  "blob",		  "#put",		  "():void address BLOBput;"																  ]
[ 1562@0, "command",	  "blob",		  "toblob",		  "(v:str):blob address BLOBtoblob;"															  ]
[ 1563@0, "command",	  "blob",		  "tostring",		  "(v:blob,index:int):str address BLOBfromidx;"														  ]
[ 1564@0, "command",	  "blob",		  "tostring",		  "(v:blob):str address BLOBfromblob;"															  ]
[ 1565@0, "command",	  "blob",		  "#tostr",		  "():void address BLOBtostr;"																  ]
[ 1566@0, "command",	  "mmath",		  "atan2",		  "(x:dbl,y:dbl):dbl address MATHbinary_ATAN2dbl;"													  ]
[ 1567@0, "command",	  "mmath",		  "atan2",		  "(x:flt,y:flt):flt address MATHbinary_ATAN2flt;"													  ]
[ 1568@0, "command",	  "mmath",		  "atan",		  "(x:dbl):dbl address MATHunary_ATANdbl;"														  ]
[ 1569@0, "command",	  "mmath",		  "atan",		  "(x:flt):flt address MATHunary_ATANflt;"														  ]
[ 1570@0, "command",	  "mmath",		  "asin",		  "(x:dbl):dbl address MATHunary_ASINdbl;"														  ]
[ 1571@0, "command",	  "mmath",		  "asin",		  "(x:flt):flt address MATHunary_ASINflt;"														  ]
[ 1572@0, "command",	  "mmath",		  "acos",		  "(x:dbl):dbl address MATHunary_ACOSdbl;"														  ]
[ 1573@0, "command",	  "mmath",		  "acos",		  "(x:flt):flt address MATHunary_ACOSflt;"														  ]
[ 1574@0, "command",	  "mmath",		  "ceil",		  "(y:dbl):dbl address MATHunary_CEILdbl;"														  ]
[ 1575@0, "command",	  "mmath",		  "ceil",		  "(y:flt):flt address MATHunary_CEILflt;"														  ]
[ 1576@0, "command",	  "mmath",		  "cosh",		  "(x:dbl):dbl address MATHunary_COSHdbl;"														  ]
[ 1577@0, "command",	  "mmath",		  "cosh",		  "(x:flt):flt address MATHunary_COSHflt;"														  ]
[ 1578@0, "command",	  "mmath",		  "cos",		  "(x:dbl):dbl address MATHunary_COSdbl;"														  ]
[ 1579@0, "command",	  "mmath",		  "cos",		  "(x:flt):flt address MATHunary_COSflt;"														  ]
[ 1580@0, "command",	  "mmath",		  "exp",		  "(x:dbl):dbl address MATHunary_EXPdbl;"														  ]
[ 1581@0, "command",	  "mmath",		  "exp",		  "(x:flt):flt address MATHunary_EXPflt;"														  ]
[ 1582@0, "command",	  "mmath",		  "finite",		  "(d:dbl):bit address math_unary_FINITE;"														  ]
[ 1583@0, "command",	  "mmath",		  "fmod",		  "(y:dbl,x:dbl):dbl address MATHbinary_FMODdbl;"													  ]
[ 1584@0, "command",	  "mmath",		  "fmod",		  "(y:flt,x:flt):flt address MATHbinary_FMODflt;"													  ]
[ 1585@0, "command",	  "mmath",		  "floor",		  "(y:dbl):dbl address MATHunary_FLOORdbl;"														  ]
[ 1586@0, "command",	  "mmath",		  "floor",		  "(y:flt):flt address MATHunary_FLOORflt;"														  ]
[ 1587@0, "command",	  "mmath",		  "fabs",		  "(y:dbl):dbl address MATHunary_FABSdbl;"														  ]
[ 1588@0, "command",	  "mmath",		  "isinf",		  "(d:dbl):int address math_unary_ISINF;"														  ]
[ 1589@0, "command",	  "mmath",		  "isnan",		  "(d:dbl):bit address math_unary_ISNAN;"														  ]
[ 1590@0, "command",	  "mmath",		  "log10",		  "(x:dbl):dbl address MATHunary_LOG10dbl;"														  ]
[ 1591@0, "command",	  "mmath",		  "log",		  "(x:dbl):dbl address MATHunary_LOGdbl;"														  ]
[ 1592@0, "command",	  "mmath",		  "pow",		  "(x:dbl,y:dbl):dbl address MATHbinary_POWdbl;"													  ]
[ 1593@0, "command",	  "mmath",		  "pow",		  "(x:flt,y:flt):flt address MATHbinary_POWflt;"													  ]
[ 1594@0, "command",	  "mmath",		  "rand",		  "():int address MATHrandint;"																  ]
[ 1595@0, "command",	  "mmath",		  "round",		  "(x:dbl,y:int):dbl address MATHbinary_ROUNDdbl;"													  ]
[ 1596@0, "command",	  "mmath",		  "round",		  "(x:flt,y:int):flt address MATHbinary_ROUNDflt;"													  ]
[ 1597@0, "command",	  "mmath",		  "srand",		  "(seed:int):void address MATHsrandint;"														  ]
[ 1598@0, "command",	  "mmath",		  "sqrt",		  "(y:dbl):dbl address MATHunary_SQRTdbl;"														  ]
[ 1599@0, "command",	  "mmath",		  "sqrt",		  "(y:flt):flt address MATHunary_SQRTflt;"														  ]
[ 1600@0, "command",	  "mmath",		  "sinh",		  "(x:dbl):dbl address MATHunary_SINHdbl;"														  ]
[ 1601@0, "command",	  "mmath",		  "sinh",		  "(x:flt):flt address MATHunary_SINHflt;"														  ]
[ 1602@0, "command",	  "mmath",		  "sin",		  "(x:dbl):dbl address MATHunary_SINdbl;"														  ]
[ 1603@0, "command",	  "mmath",		  "sin",		  "(x:flt):flt address MATHunary_SINflt;"														  ]
[ 1604@0, "command",	  "mmath",		  "tanh",		  "(x:dbl):dbl address MATHunary_TANHdbl;"														  ]
[ 1605@0, "command",	  "mmath",		  "tanh",		  "(x:flt):flt address MATHunary_TANHflt;"														  ]
[ 1606@0, "command",	  "mmath",		  "tan",		  "(x:dbl):dbl address MATHunary_TANdbl;"														  ]
[ 1607@0, "command",	  "mmath",		  "tan",		  "(x:flt):flt address MATHunary_TANflt;"														  ]
[ 1608@0, "command",	  "alarm",		  "alarm",		  "(secs:int,action:str):void address ALARMsetalarm;"													  ]
[ 1609@0, "command",	  "alarm",		  "ctime",		  "():str address ALARMctime;"																  ]
[ 1610@0, "command",	  "alarm",		  "epilogue",		  "():void address ALARMepilogue;"															  ]
[ 1611@0, "command",	  "alarm",		  "epoch",		  "():int address ALARMepoch;"																  ]
[ 1612@0, "command",	  "alarm",		  "prelude",		  "():void address ALARMprelude;"															  ]
[ 1613@0, "command",	  "alarm",		  "sleep",		  "(secs:int):void address ALARMsleep;"															  ]
[ 1614@0, "command",	  "alarm",		  "time",		  "():int address ALARMtime;"																  ]
[ 1615@0, "command",	  "alarm",		  "timers",		  "():bat[:str,:str] address ALARMtimers;"														  ]
[ 1616@0, "command",	  "alarm",		  "usec",		  "():lng address ALARMusec;"																  ]
[ 1617@0, "command",	  "lock",		  "create",		  "():lock address LCKcreate;"																  ]
[ 1618@0, "command",	  "lock",		  "destroy",		  "(l:lock):void address LCKdestroy;"															  ]
[ 1619@0, "command",	  "lock",		  "set",		  "(l:lock):void address LCKset;"															  ]
[ 1620@0, "command",	  "lock",		  "tostr",		  "(l:lock):void address lockToStr;"															  ]
[ 1621@0, "command",	  "lock",		  "try",		  "(l:lock):int address LCKtry;"															  ]
[ 1622@0, "command",	  "lock",		  "unset",		  "(l:lock):void address LCKunset;"															  ]
[ 1623@0, "command",	  "sema",		  "create",		  "(init:int):sema address SEMAcreate;"															  ]
[ 1624@0, "command",	  "sema",		  "destroy",		  "(s:sema):void address SEMAdestroy;"															  ]
[ 1625@0, "command",	  "sema",		  "down",		  "(s:sema):void address SEMAdown;"															  ]
[ 1626@0, "command",	  "sema",		  "up",			  "(s:sema):void address SEMAup;"															  ]
[ 1627@0, "command",	  "unix",		  "getenv",		  "(nme:str):str address UNIXgetenv;"															  ]
[ 1628@0, "command",	  "unix",		  "setenv",		  "(nme:str,val:str):bit address UNIXsetenv;"														  ]
[ 1629@0, "pattern",	  "mdb",		  "clearBreakpoints",	  "():void address MDBclrBreakpoints;"															  ]
[ 1630@0, "pattern",	  "mdb",		  "getDefinition",	  "():bat[:void,:str] address MDBcodeDump;"														  ]
[ 1631@0, "pattern",	  "mdb",		  "getStackTrace",	  "():bat[:void,:str] address MDBStkTrace;"														  ]
[ 1632@0, "pattern",	  "mdb",		  "getStackFrame",	  "():bat[:str,:str] address MDBStkFrame;"														  ]
[ 1633@0, "pattern",	  "mdb",		  "getStackFrame",	  "(i:int):bat[:str,:str] address MDBStkFrameN;"													  ]
[ 1634@0, "pattern",	  "mdb",		  "getStackDepth",	  "():int address MDBStkDepth;"																  ]
[ 1635@0, "command",	  "mdb",		  "getExceptionContext",  "(s:str):str address MDBgetExceptionContext;"														  ]
[ 1636@0, "command",	  "mdb",		  "getExceptionReason",	  "(s:str):str address MDBgetExceptionReason;"														  ]
[ 1637@0, "command",	  "mdb",		  "getExceptionVariable", "(s:str):str address MDBgetExceptionVariable;"													  ]
[ 1638@0, "pattern",	  "mdb",		  "mdb",		  "():void address MDBtoggle;"																  ]
[ 1639@0, "pattern",	  "mdb",		  "mdb",		  "(b:bit):void address MDBtoggle;"															  ]
[ 1640@0, "pattern",	  "mdb",		  "showFunction",	  "(M:any,F:any):void address MDBshowFunction3;"													  ]
[ 1641@0, "pattern",	  "mdb",		  "showFunction",	  "():void address MDBshowFunction;"															  ]
[ 1642@0, "pattern",	  "mdb",		  "setTimer",		  "(b:bit):void address MDBsetTimer;"															  ]
[ 1643@0, "pattern",	  "mdb",		  "setBreakpoint",	  "(fcn:any):void address MDBsetBreakpoint;"														  ]
[ 1644@0, "pattern",	  "mdb",		  "setTrace",		  "(mod:any,fcn:any,b:bit):void address MDBsetTrace2;"													  ]
[ 1645@0, "pattern",	  "mdb",		  "setTrace",		  "(b:bit):void address MDBsetTrace;"															  ]
[ 1646@0, "command",	  "crackers",		  "crack",		  "(b:bat[:int,:int],c:bat[:int,:int]):int address CRKcrackJoin;"											  ]
[ 1647@0, "command",	  "crackers",		  "crack",		  "(b:bat[:int,:int],low:int,hgh:int):int address CRKcrackRange;"											  ]
[ 1648@0, "command",	  "crackers",		  "dropView",		  "(b:bat[:int,:int]):void address CRKdropView;"													  ]
[ 1649@0, "command",	  "crackers",		  "drop",		  "(b:bat[:int,:int]):void address CRKdropPiece;"													  ]
[ 1650@0, "command",	  "crackers",		  "getPiece",		  "(b:bat[:int,:int],crk:bat[:int,:int],piece:int):void address CRKgetPiece1;"										  ]
[ 1651@0, "command",	  "crackers",		  "getPiece",		  "(b:bat[:int,:int],piece:int):bat[:int,:int] address CRKgetPiece0;"											  ]
[ 1652@0, "command",	  "crackers",		  "hasMoreElements",	  "(b:bat[:int,:int]) (a:lng,x:bat[:int,:int]) address CRKhasMoreElements;"										  ]
[ 1653@0, "command",	  "crackers",		  "info",		  "(b:bat[:int,:int]):void address CRKinfo;"														  ]
[ 1654@0, "command",	  "crackers",		  "newIterator",	  "(b:bat[:int,:int]) (a:lng,x:bat[:int,:int]) address CRKnewIterator;"											  ]
[ 1655@0, "command",	  "crackers",		  "new",		  "(b:bat[:int,:int],granule:int):void address CRKnewGranule;"												  ]
[ 1656@0, "command",	  "crackers",		  "new",		  "(b:bat[:int,:int]):void address CRKnew;"														  ]
[ 1657@0, "command",	  "crackers",		  "select",		  "(b:bat[:int,:int],l:int,h:int,li:bit,hi:bit):bat[:int,:int] address CRKselect;"									  ]
[ 1658@0, "command",	  "crackers",		  "selectPieces",	  "(b:bat[:int,:int],low:int,hgh:int):bat[:void,:int] address CRKselectPieces;"										  ]
[ 1659@0, "pattern",	  "thread",		  "exec",		  "(arg:any...):int address CMDthreadExec;"														  ]
[ 1660@0, "pattern",	  "thread",		  "isDead",		  "(pid:int):bit address CMDthreadIsDead;"														  ]
[ 1661@0, "pattern",	  "thread",		  "kill",		  "(pid:int):void address CMDthreadKill;"														  ]
[ 1662@0, "pattern",	  "thread",		  "suspend",		  "(pid:int):void address CMDthreadSuspend;"														  ]
[ 1663@0, "pattern",	  "thread",		  "terminate",		  "(pid:int):void address CMDthreadTerminate;"														  ]
[ 1664@0, "pattern",	  "thread",		  "wait",		  "(pid:int...):void address CMDthreadWaitList;"													  ]
[ 1665@0, "pattern",	  "thread",		  "wait",		  "():void address CMDthreadWait;"															  ]
#

# 07:42:07 >  
# 07:42:07 >  Done.
# 07:42:07 >  

