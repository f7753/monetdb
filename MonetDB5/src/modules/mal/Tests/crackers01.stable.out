stdout of test 'crackers01` in directory 'src/modules/mal` itself:


# 20:35:02 >  
# 20:35:02 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=45409 --set sql_port=55183 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  crackers01.mal </dev/null
# 20:35:02 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl for further information.
## Testing the cracker implementation
#b:= new(:int,:int);
#insert(b,10,100);
#insert(b,1,2);
#insert(b,6,36);
#insert(b,5,25);
#insert(b,2,4);
#insert(b,3,9);
#insert(b,7,49);
#insert(b,8,64);
#insert(b,4,16);
#insert(b,9,81);
#print(b);
#
#crackers.new(b);
#y:= crackers.crack(b,9,25);
#print(y);
#crackers.info(b);
#print(b);
#
#crackers.new(b);
#y:= crackers.crack(b,80,195);
#print(y);
#crackers.info(b);
#print(b);
#
#crackers.new(b);
#y:= crackers.crack(b,2,2);
#print(y);
#crackers.info(b);
#print(b);
#
#crackers.new(b);
#y:= crackers.crack(b,40,2);
#print(y);
#crackers.info(b);
#print(b);
#catch MALexception;
#print(MALexception);
#exit MALexception;
#
function user.main():int;	# 0  (main:int)
# Testing the cracker implementation 	# 1  ($2:str)
    b := bbp.new(:int,:int);	# 2 CMDBATnew (b:bat[:int,:int])<-($4:int)($5:int)
    bat.insert(b,10,100);	# 3 BKCinsert_bun ($6:bat[:int,:int])<-(b:bat[:int,:int])($7:int)($8:int)
    bat.insert(b,1,2);	# 4 BKCinsert_bun ($9:bat[:int,:int])<-(b:bat[:int,:int])($10:int)($11:int)
    bat.insert(b,6,36);	# 5 BKCinsert_bun ($12:bat[:int,:int])<-(b:bat[:int,:int])($13:int)($14:int)
    bat.insert(b,5,25);	# 6 BKCinsert_bun ($15:bat[:int,:int])<-(b:bat[:int,:int])($16:int)($17:int)
    bat.insert(b,2,4);	# 7 BKCinsert_bun ($18:bat[:int,:int])<-(b:bat[:int,:int])($11:int)($19:int)
    bat.insert(b,3,9);	# 8 BKCinsert_bun ($20:bat[:int,:int])<-(b:bat[:int,:int])($21:int)($22:int)
    bat.insert(b,7,49);	# 9 BKCinsert_bun ($23:bat[:int,:int])<-(b:bat[:int,:int])($24:int)($25:int)
    bat.insert(b,8,64);	# 10 BKCinsert_bun ($26:bat[:int,:int])<-(b:bat[:int,:int])($27:int)($28:int)
    bat.insert(b,4,16);	# 11 BKCinsert_bun ($29:bat[:int,:int])<-(b:bat[:int,:int])($19:int)($30:int)
    bat.insert(b,9,81);	# 12 BKCinsert_bun ($31:bat[:int,:int])<-(b:bat[:int,:int])($22:int)($32:int)
    io.print(b);	# 13 IOprint_val ($33:int)<-(b:bat[:int,:int])
    crackers.new(b);	# 14 CRKnew ($34:void)<-(b:bat[:int,:int])
    y := crackers.crack(b,9,25);	# 15 CRKcrackRange (y:int)<-(b:bat[:int,:int])($22:int)($17:int)
    io.print(y);	# 16 IOprint_val ($36:int)<-(y:int)
    crackers.info(b);	# 17 CRKinfo ($37:void)<-(b:bat[:int,:int])
    io.print(b);	# 18 IOprint_val ($38:int)<-(b:bat[:int,:int])
    crackers.new(b);	# 19 CRKnew ($39:void)<-(b:bat[:int,:int])
    y := crackers.crack(b,80,195);	# 20 CRKcrackRange (y:int)<-(b:bat[:int,:int])($40:int)($41:int)
    io.print(y);	# 21 IOprint_val ($42:int)<-(y:int)
    crackers.info(b);	# 22 CRKinfo ($43:void)<-(b:bat[:int,:int])
    io.print(b);	# 23 IOprint_val ($44:int)<-(b:bat[:int,:int])
    crackers.new(b);	# 24 CRKnew ($45:void)<-(b:bat[:int,:int])
    y := crackers.crack(b,2,2);	# 25 CRKcrackRange (y:int)<-(b:bat[:int,:int])($46:int)($46:int)
    io.print(y);	# 26 IOprint_val ($47:int)<-(y:int)
    crackers.info(b);	# 27 CRKinfo ($48:void)<-(b:bat[:int,:int])
    io.print(b);	# 28 IOprint_val ($49:int)<-(b:bat[:int,:int])
    crackers.new(b);	# 29 CRKnew ($50:void)<-(b:bat[:int,:int])
    y := crackers.crack(b,40,2);	# 30 CRKcrackRange (y:int)<-(b:bat[:int,:int])($51:int)($46:int)
    io.print(y);	# 31 IOprint_val ($52:int)<-(y:int)
    crackers.info(b);	# 32 CRKinfo ($53:void)<-(b:bat[:int,:int])
    io.print(b);	# 33 IOprint_val ($54:int)<-(b:bat[:int,:int])
catch MALexception;	# 34  (MALexception:any) jump 36
    io.print(MALexception);	# 35 IOprint_val ($56:int)<-(MALexception:any)
exit MALexception;	# 36  (MALexception:any)
end main;	# 37  
#-----------------#
# h	tmp_13	  # name
# int	int	  # type
#-----------------#
[ 10,	  100	  ]
[ 1,	  2	  ]
[ 6,	  36	  ]
[ 5,	  25	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ 9,	  81	  ]
[ 2 ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0  13, P, -1 -2147483648, 2147483647, 0, 9, 1, 2, 3 ]
 [   1  13, L, 0 -2147483648, 8, 0, 1, -1, -1, -1 ]
 [   2  13, L, 0 9, 25, 2, 4, -1, -1, -1 ]
 [   3  13, L, 0 26, 2147483647, 5, 9, -1, -1, -1 ]
 #-----------------#
# h	tmp_13	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 10,	  100	  ]
[ 9,	  81	  ]
[ 2 ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0  13, P, -1 -2147483648, 2147483647, 0, 9, 1, -1, 2 ]
 [   1  13, L, 0 -2147483648, 79, 0, 7, -1, -1, -1 ]
 [   2  13, L, 0 80, 2147483647, 8, 9, -1, -1, -1 ]
 #-----------------#
# h	tmp_13	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 10,	  100	  ]
[ 9,	  81	  ]
[ 1 ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0  13, P, -1 -2147483648, 2147483647, 0, 9, 1, -1, 2 ]
 [   1  13, L, 0 -2147483648, 2, 0, 0, -1, -1, -1 ]
 [   2  13, L, 0 3, 2147483647, 1, 9, -1, -1, -1 ]
 #-----------------#
# h	tmp_13	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 10,	  100	  ]
[ 9,	  81	  ]
[ "MALexception:user.main[30]:crackers.crack:illegal range\n" ]

# 14:51:05 >  
# 14:51:05 >  Done.
# 14:51:05 >  

