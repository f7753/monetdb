stdout of test 'rsbox01` in directory 'src/modules/mal` itself:


# 12:00:08 >  
# 12:00:08 >  Mtimeout -timeout 60 Mserver "--config=/ufs/fabian/scratch/monet5/program/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/net/pictor.ins.cwi.nl/export/scratch1/fabian/monet5/program/lib/MonetDB5" --set "gdk_dbfarm=/net/pictor.ins.cwi.nl/export/scratch1/fabian/monet5/program/var/MonetDB5/dbfarm" --set "sql_logdir=/net/pictor.ins.cwi.nl/export/scratch1/fabian/monet5/program/var/MonetDB5/log" --set mapi_port=41764 --set sql_port=52494 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  rsbox01.mal </dev/null
# 12:00:08 >  

















# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/fabian/scratch/monet5/program/etc/MonetDB5.conf
# dbfarm:/net/pictor.ins.cwi.nl/export/scratch1/fabian/monet5/program/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
#include rsbox;
#
#rs := rsbox.create("reuse", 1, 3);
#
#resultset.setProperty(rs, 1, "name", "the_column");
#resultset.setProperty(rs, 1, "table", "table1");
#resultset.setProperty(rs, 1, "schema", "sys");
#
#b1 := bbp.new(:void, :str);
#bat.insert(b1, nil, "test1");
#bat.insert(b1, nil, "test2");
#bat.insert(b1, nil, nil:str);
#bat.insert(b1, nil, "values");
#bat.insert(b1, nil, "whatever");
#
#resultset.dePopulate(rs);
#resultset.populateColumn(rs, 1, b1);
#
#resultset.writeNextPart(rs);
#
#
#b1 := bbp.new(:void, :str);
#bat.insert(b1, nil, "Daft Punk - Human After All");
#bat.insert(b1, nil, "Spinvis - Spinvis");
#bat.insert(b1, nil, "Within Temptation - The Silent Force");
#bat.insert(b1, nil, "Anouk - Together Alone");
#bat.insert(b1, nil, "Armiral Freebee - Admiral Freebee");
#bat.insert(b1, nil, "Lais - Douce Victime");
#bat.insert(b1, nil, "Hooverphonic - Sit Down and Listen To...");
#bat.insert(b1, nil, "Osdorp Posse - Tegenstrijd");
#bat.insert(b1, nil, "MC Wigger & DJ Wanna-B - Fuck Osdorp");
#
#resultset.dePopulate(rs);
#resultset.populateColumn(rs, 1, b1);
#
#resultset.writeNextPart(rs);
#
#rsbox.release(rs);
#
function user.main():int;	# 0  (main:int)
## Test ResultSet on reusability using equal typed BATs 	# 1  ($2:str)
    rs := rsbox.create(1,'t');	# 2 RSBcreate (rs:resultset)<-($4:int)($5:chr)
    resultset.setProperty(rs,1,"name","the_column");	# 3 RSsetPropertyStr ($6:resultset)<-(rs:resultset)($4:int)($7:str)($8:str)
    resultset.setProperty(rs,1,"table","table1");	# 4 RSsetPropertyStr ($9:resultset)<-(rs:resultset)($4:int)($10:str)($11:str)
    resultset.setProperty(rs,1,"schema","sys");	# 5 RSsetPropertyStr ($12:resultset)<-(rs:resultset)($4:int)($13:str)($14:str)
    b1 := bbp.new(:void,:str);	# 6 CMDBATnew (b1:bat[:void,:str])<-($16:void)($17:str)
    bat.insert(b1,nil,"test1");	# 7 BKCinsert_bun ($18:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($20:str)
    bat.insert(b1,nil,"test2");	# 8 BKCinsert_bun ($21:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($22:str)
    bat.insert(b1,nil,"nil:str");	# 9 BKCinsert_bun ($23:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($24:str)
    bat.insert(b1,nil,"values");	# 10 BKCinsert_bun ($25:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($26:str)
    bat.insert(b1,nil,"whatever");	# 11 BKCinsert_bun ($27:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($28:str)
    resultset.populateColumn(rs,1,b1);	# 12 RSpopulateColumn ($29:resultset)<-(rs:resultset)($4:int)(b1:bat[:void,:str])
    resultset.writeNextPart(rs);	# 13 RSwriteNextPart ($30:int)<-(rs:resultset)
    b1 := bbp.new(:void,:str);	# 14 CMDBATnew (b1:bat[:void,:str])<-($31:void)($32:str)
    bat.insert(b1,nil,"Daft Punk - Human After All");	# 15 BKCinsert_bun ($33:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($34:str)
    bat.insert(b1,nil,"Spinvis - Spinvis");	# 16 BKCinsert_bun ($35:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($36:str)
    bat.insert(b1,nil,"Within Temptation - The Silent Force");	# 17 BKCinsert_bun ($37:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($38:str)
    bat.insert(b1,nil,"Anouk - Together Alone");	# 18 BKCinsert_bun ($39:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($40:str)
    bat.insert(b1,nil,"Armiral Freebee - Admiral Freebee");	# 19 BKCinsert_bun ($41:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($42:str)
    bat.insert(b1,nil,"Lais - Douce Victime");	# 20 BKCinsert_bun ($43:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($44:str)
    bat.insert(b1,nil,"Hooverphonic - Sit Down and Listen To...");	# 21 BKCinsert_bun ($45:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($46:str)
    bat.insert(b1,nil,"Osdorp Posse - Tegenstrijd");	# 22 BKCinsert_bun ($47:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($48:str)
    bat.insert(b1,nil,"MC Wigger & DJ Wanna-B - Fuck Osdorp");	# 23 BKCinsert_bun ($49:bat[:void,:str])<-(b1:bat[:void,:str])($19:void)($50:str)
    resultset.dePopulate(rs);	# 24 RSdePopulate ($51:resultset)<-(rs:resultset)
    resultset.populateColumn(rs,1,b1);	# 25 RSpopulateColumn ($52:resultset)<-(rs:resultset)($53:int)(b1:bat[:void,:str])
    resultset.writeNextPart(rs);	# 26 RSwriteNextPart ($54:int)<-(rs:resultset)
    rsbox.release(rs);	# 27 RSBdelete ($55:void)<-(rs:resultset)
end main;	# 28  
&t
$id 1
$columncount 1
$tuplecount 5
$ctype S
%column the_column
%table table1
%schema sys
%type varchar
%digits 
%scale 
%width 8
[5:test1
[5:test2
[NULL
[6:values
[8:whatever
&t
$id 2
$columncount 1
$tuplecount 9
$ctype S
%column the_column
%table table1
%schema sys
%type varchar
%digits 
%scale 
%width 40
[27:Daft Punk - Human After All
[17:Spinvis - Spinvis
[36:Within Temptation - The Silent Force
[22:Anouk - Together Alone
[33:Armiral Freebee - Admiral Freebee
[20:Lais - Douce Victime
[40:Hooverphonic - Sit Down and Listen To...
[26:Osdorp Posse - Tegenstrijd
[36:MC Wigger & DJ Wanna-B - Fuck Osdorp

# 09:30:02 >  
# 09:30:02 >  Done.
# 09:30:02 >  

