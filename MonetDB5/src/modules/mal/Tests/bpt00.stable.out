stdout of test 'bpt00` in directory 'src/modules/mal` itself:


# 14:35:37 >  
# 14:35:37 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=44726 --set sql_port=50008 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  bpt00.mal </dev/null
# 14:35:37 >  

# Monet Database Server V4.7.1
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
##testing the BAT partition table
#include partitions;
#
#a1:= new(:void,:int);
#setSequenceBase(a1,0@0);
#a2:= new(:void,:int);
#setSequenceBase(a2,10@0);
#a3:= new(:void,:int);
#setSequenceBase(a3,20@0);
#
#barrier (go,i):= newRange(0);
#	insert(a1,nil,i);
#	insert(a2,nil,i);
#	insert(a3,nil,i);
#	redo (go,i):= nextElement(1,10);
#exit (go,i);
#print(a1);
#print(a2);
#print(a3);
#
## add the stuff to the BPT and dump it
#barrier idx:= partitions.newIterator();
#	print(idx);
#	redo idx:= partitions.hasMoreElements();
#exit idx;
#
## now really add it
#partitions.deposit(a1);
#partitions.deposit(a1,a2);
#partitions.deposit(a1,a3);
#partitions.dump();
#barrier idx:= partitions.newIterator();
#	print(idx);
#	b:= partitions.take(idx);
#	print(b);
#	redo idx:= partitions.hasMoreElements();
#exit idx;
#



function user.main():int;	# 0  (main:int)
#testing the BAT partition table 	# 1  ($2:str)
    a1 := bbp.new(:void,:int);	# 2 CMDBATnew (a1:bat[:void,:int])<-($4:void)($5:int)
    bat.setSequenceBase(a1,0@0);	# 3 BKCsetSequenceBase ($6:bat[:void,:int])<-(a1:bat[:void,:int])($7:oid)
    a2 := bbp.new(:void,:int);	# 4 CMDBATnew (a2:bat[:void,:int])<-($4:void)($5:int)
    bat.setSequenceBase(a2,10@0);	# 5 BKCsetSequenceBase ($9:bat[:void,:int])<-(a2:bat[:void,:int])($10:oid)
    a3 := bbp.new(:void,:int);	# 6 CMDBATnew (a3:bat[:void,:int])<-($4:void)($5:int)
    bat.setSequenceBase(a3,20@0);	# 7 BKCsetSequenceBase ($12:bat[:void,:int])<-(a3:bat[:void,:int])($13:oid)
barrier (go,i):= mal.newRange(0);	# 8 RNGnewRange_int (go:bit)(i:int)<-($16:int) jump 13
    bat.insert(a1,nil,i);	# 9 BKCinsert_bun ($17:bat[:void,:int])<-(a1:bat[:void,:int])($18:void)(i:int)
    bat.insert(a2,nil,i);	# 10 BKCinsert_bun ($19:bat[:void,:int])<-(a2:bat[:void,:int])($18:void)(i:int)
    bat.insert(a3,nil,i);	# 11 BKCinsert_bun ($20:bat[:void,:int])<-(a3:bat[:void,:int])($18:void)(i:int)
    redo (go,i):= mal.nextElement(1,10);	# 12 RNGnextElement_int (go:bit)(i:int)<-($21:int)($22:int) jump 9
exit (go,i);	# 13  (go:bit)(i:int)
    io.print(a1);	# 14 IOprint_val ($23:int)<-(a1:bat[:void,:int])
    io.print(a2);	# 15 IOprint_val ($24:int)<-(a2:bat[:void,:int])
    io.print(a3);	# 16 IOprint_val ($25:int)<-(a3:bat[:void,:int])
# add the stuff to the BPT and dump it 	# 17  ($27:str)
barrier idx := partitions.newIterator();	# 18 BPTnewIteratorBase (idx:int) jump 21
    io.print(idx);	# 19 IOprint_val ($29:int)<-(idx:int)
    redo idx := partitions.hasMoreElements();	# 20 BPThasMoreElementsBase (idx:int) jump 19
exit idx;	# 21  (idx:int)
# now really add it 	# 22  ($31:str)
    partitions.deposit(a1);	# 23 BPTdeposit ($32:void)<-(a1:bat[:void,:int])
    partitions.deposit(a1,a2);	# 24 BPTdeposit2 ($33:void)<-(a1:bat[:void,:int])(a2:bat[:void,:int])
    partitions.deposit(a1,a3);	# 25 BPTdeposit2 ($34:void)<-(a1:bat[:void,:int])(a3:bat[:void,:int])
    partitions.dump();	# 26 BPTdump ($35:void)
barrier idx := partitions.newIterator();	# 27 BPTnewIteratorBase (idx:int) jump 32
    io.print(idx);	# 28 IOprint_val ($36:int)<-(idx:int)
    b := partitions.take(idx);	# 29 BPTtake (b:bat[:void,:any])<-(idx:int)
    io.print(b);	# 30 IOprint_val ($38:int)<-(b:bat[:void,:any])
    redo idx := partitions.hasMoreElements();	# 31 BPThasMoreElementsBase (idx:int) jump 28
exit idx;	# 32  (idx:int)
end main;	# 33  
#-----------------#
# h	tmp_13	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
[ 9@0,	  9	  ]
#-----------------#
# h	tmp_14	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  0	  ]
[ 11@0,	  1	  ]
[ 12@0,	  2	  ]
[ 13@0,	  3	  ]
[ 14@0,	  4	  ]
[ 15@0,	  5	  ]
[ 16@0,	  6	  ]
[ 17@0,	  7	  ]
[ 18@0,	  8	  ]
[ 19@0,	  9	  ]
#-----------------#
# h	tmp_15	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  0	  ]
[ 21@0,	  1	  ]
[ 22@0,	  2	  ]
[ 23@0,	  3	  ]
[ 24@0,	  4	  ]
[ 25@0,	  5	  ]
[ 26@0,	  6	  ]
[ 27@0,	  7	  ]
[ 28@0,	  8	  ]
[ 29@0,	  9	  ]
ptop=3 plimit=1024
[0] bid=13 pid=13 f=0, l=10 prv=-1 nxt=1 cap=-1
[1] bid=13 pid=14 f=10, l=20 prv=0 nxt=2 cap=-1
[2] bid=13 pid=15 f=20, l=30 prv=1 nxt=-1 cap=-1
[ 0 ]
#-----------------#
# h	tmp_13	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
[ 9@0,	  9	  ]
[ 1 ]
#-----------------#
# h	tmp_14	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  0	  ]
[ 11@0,	  1	  ]
[ 12@0,	  2	  ]
[ 13@0,	  3	  ]
[ 14@0,	  4	  ]
[ 15@0,	  5	  ]
[ 16@0,	  6	  ]
[ 17@0,	  7	  ]
[ 18@0,	  8	  ]
[ 19@0,	  9	  ]
[ 2 ]
#-----------------#
# h	tmp_15	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  0	  ]
[ 21@0,	  1	  ]
[ 22@0,	  2	  ]
[ 23@0,	  3	  ]
[ 24@0,	  4	  ]
[ 25@0,	  5	  ]
[ 26@0,	  6	  ]
[ 27@0,	  7	  ]
[ 28@0,	  8	  ]
[ 29@0,	  9	  ]

# 14:51:11 >  
# 14:51:11 >  Done.
# 14:51:11 >  

