# Test 1 x100 algebra expression
Project(Aggr(Select(Scan(%MEMCHUNK,%IOCHUNK,
                        [l_returnflag=Column("L.returnflag"), l_linestatus=Colum
n("L.linestatus"),
                         l_quantity=Column("L.quantity"), l_extendedprice=Column
("L.extendedprice"),
                         l_discount=Column("L.discount"), l_tax=Column("L.tax",
l_shipdate=Column("L.shipdate"])
              <=(l_shipdate,%DATE)),
         TRUE, 2,
        [l1 = l_returnflag, l2 = l_linestatus
         sum_qty = sum(l_quantity),
         sum_base_price = sum(l_extendedprice),
         sum_disc_price = sum(discountprice = (1.0-l_discount)*l_extendedprice),
         sum_charge = sum((tax+1.0)*discountprice),
         sum_disc = sum(discount),
         count = count()])
    [l1, l2, sum_qty, sum_base_price, sum_disc_price, sum_charge,
     avg_qty = sum_qty/flt_count = flt(count),
     avg_price = sum_base_price/flt_count,
     avg_disc = sum_disc/flt_count,
     count]

#test 2 algebra expression
Aggr(FetchJoin(FetchJoin(Project(Array([I = Dimension(%i), M = Dimension(%m), C
= Dimension(%c), D = Dimension(%d)]),
                                 [ IDX1 = +(I, *(%i, M)),
                                   IDX2 = +(I, *(%i, +(C, *(%c, D)))),
                                   IDX3 = +(M, *(%m, +(C, *(%c, D)))) ]),
                         IDX1, [X = samples.x]),
               IDX2, [MU = stddist.mu, S2 = stddist.s2])
     [IDX3], [sum(/(*(XMU = -(X,MU), XMU), S2))])
