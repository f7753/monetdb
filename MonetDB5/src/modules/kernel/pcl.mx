@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@' 
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@' 
@' The Original Code is the Monet Database System.
@' 
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2003 CWI.
@' All Rights Reserved.
@' 
@' Contributor(s):
@' 		Martin Kersten <Martin.Kersten@cwi.nl>
@' 		Peter Boncz <Peter.Boncz@cwi.nl>
@' 		Niels Nes <Niels.Nes@cwi.nl>
@' 		Stefan Manegold  <Stefan.Manegold@cwi.nl>

@f pcl
@a N. Nes
@t Performance Counters Library
@T

             PCL - The Performance Counter Library
                   Version 2.2, January 2003

PCL (The Performance Counter Library) is a common interface to access
in a portable way performance counters built into modern
microprocessors. PCL supports query for functionality, start and stop
of counters, and reading the current values out of the
counters. Performance counting can be done in user mode, system, and
user-or-system mode. Functions are callable from C, C++, Fortran, and
Java.

Currently, the following systems are supported:

  -  Linux 2.x.x with Intel Pentium/PPro/Pentium II/Pentium III/Pentium 4
  -  Linux 2.x.x with AMD Athlon/Duron
  -  IBM AIX 4.x >= 4.3 with PowerPC 604, 604e, Power3, Power3-II
  -  SUN Solaris 2.x, Solaris 7, 8 with UltraSPARC I,II, III
  -  Digital Unix with Alpha 21164, 21264
  -  Cray T3E with Alpha 21164
  -  SGI IRIX with R10000, R12000

The homepage of PCL can be found at

    http://www.fz-juelich.de/zam/PCL/

were you can find the source and a detailled description of PCL
including a description of performance counters on various
microprocessors.

TODO

add pcl_cpu_info! (void,str bat) (max counters?)
later add low level api

@+ Module Definition
@mal
module pcl;

command start(events:BAT[int,any],  mode:int) = CMDpclstart
  comment "start counting the given events";

command stop(events:BAT[int,any] ) : BAT[int,lng] = CMDpclstop
  comment "stop counting and return the counts for the given events.";

command start_rates(rates:BAT[int,any] , mode:int) = CMDpclstart_rates
  comment "start counting the events needed for the given rates";

command stop_rates(rates:BAT[int,any] ) : BAT[int,dbl] = CMDpclstop_rates
  comment "stop event counters and return the requested rates.";

command query(events:BAT[int,any] , mode:int ) : BAT[int,int] = CMDpclquery
  comment "query for existing events";

command try(events:BAT[int,any] , mode:int ) : bit = CMDpcltry
  comment "try wheter the events could be started together on this CPU";

command init():void = CMDpclinit;

pcl.init();
  
@+ Implementation
@c
#include "gdk.h"

#ifndef HAVE_LIBPCL

static BAT *pcl_events;
static void PCLinsert(BAT *b,str nme, int v){
	BUNins(pcl_events,,nme,&v);
}

str CMDpclinit(int *ret){
	BAT *pcl_events= BATnew(TYPE_str,TYPE_int,100);
	assert(pcl_events);
	if(pcl_events==0){
		return throwMessage("pcl.init","couldn't initialize pcl library");
	}

	int PCL_MODE_USER = 1;
	int PCL_MODE_SYSTEM = 2;
	int PCL_MODE_BOTH = 3;

	#/* Level-1-Cache */
	PCLinsert( "PCL_L1CACHE_READ",            0);
	PCLinsert( "PCL_L1CACHE_WRITE",           1);
	PCLinsert( "PCL_L1CACHE_READWRITE",       2);
	PCLinsert( "PCL_L1CACHE_HIT",             3);
	PCLinsert( "PCL_L1CACHE_MISS",            4);

	#/* Level-1-Data-Cache */
	PCLinsert( "PCL_L1DCACHE_READ",           5);
	PCLinsert( "PCL_L1DCACHE_WRITE",          6);
	PCLinsert( "PCL_L1DCACHE_READWRITE",      7);
	PCLinsert( "PCL_L1DCACHE_HIT",            8);
	PCLinsert( "PCL_L1DCACHE_MISS",           9);

	#/* Level-1-Instruction-Cache */
	PCLinsert( "PCL_L1ICACHE_READ",           10);
	PCLinsert( "PCL_L1ICACHE_WRITE",          11);
	PCLinsert( "PCL_L1ICACHE_READWRITE",      12);
	PCLinsert( "PCL_L1ICACHE_HIT",            13);
	PCLinsert( "PCL_L1ICACHE_MISS",           14);

	#/* Level-2-Cache */
	PCLinsert( "PCL_L2CACHE_READ",            15);
	PCLinsert( "PCL_L2CACHE_WRITE",           16);
	PCLinsert( "PCL_L2CACHE_READWRITE",       17);
	PCLinsert( "PCL_L2CACHE_HIT",             18);
	PCLinsert( "PCL_L2CACHE_MISS",            19);

	#/* Level-2-Data-Cache */
	PCLinsert( "PCL_L2DCACHE_READ",           20);
	PCLinsert( "PCL_L2DCACHE_WRITE",          21);
	PCLinsert( "PCL_L2DCACHE_READWRITE",      22);
	PCLinsert( "PCL_L2DCACHE_HIT",            23);
	PCLinsert( "PCL_L2DCACHE_MISS",           24);

	#/* Level-2-Instruction-Cache */
	PCLinsert( "PCL_L2ICACHE_READ",           25);
	PCLinsert( "PCL_L2ICACHE_WRITE",          26);
	PCLinsert( "PCL_L2ICACHE_READWRITE",      27);
	PCLinsert( "PCL_L2ICACHE_HIT",            28);
	PCLinsert( "PCL_L2ICACHE_MISS",           29);

	#/* TLB */
	PCLinsert( "PCL_TLB_HIT",                 30);
	PCLinsert( "PCL_TLB_MISS",                31);

	#/* Instruction-TLB */
	PCLinsert( "PCL_ITLB_HIT",                32);
	PCLinsert( "PCL_ITLB_MISS",               33);

	#/* Data-TLB */
	PCLinsert( "PCL_DTLB_HIT",                34);
	PCLinsert( "PCL_DTLB_MISS",               35);

	#/* Cycles */
	PCLinsert( "PCL_CYCLES",                  36);
	PCLinsert( "PCL_ELAPSED_CYCLES",          37);

	#/* Operations */
	PCLinsert( "PCL_INTEGER_INSTR",           38);
	PCLinsert( "PCL_FP_INSTR",                39);
	PCLinsert( "PCL_LOAD_INSTR",              40);
	PCLinsert( "PCL_STORE_INSTR",             41);
	PCLinsert( "PCL_LOADSTORE_INSTR",         42);
	PCLinsert( "PCL_INSTR",                   43);

	#/* Jump Instructions */
	PCLinsert( "PCL_JUMP_SUCCESS",            44);
	PCLinsert( "PCL_JUMP_UNSUCCESS",          45);
	PCLinsert( "PCL_JUMP",                    46);

	#/* Atomic Instructions */
	PCLinsert( "PCL_ATOMIC_SUCCESS",          47);
	PCLinsert( "PCL_ATOMIC_UNSUCCESS",        48);
	PCLinsert( "PCL_ATOMIC",                  49);

	#/* Stalls */
	PCLinsert( "PCL_STALL_INTEGER",           50);
	PCLinsert( "PCL_STALL_FP",                51);
	PCLinsert( "PCL_STALL_JUMP",              52);
	PCLinsert( "PCL_STALL_LOAD",              53);
	PCLinsert( "PCL_STALL_STORE",             54);
	PCLinsert( "PCL_STALL",                   55);

	#/* derived numbers */
	PCLinsert( "PCL_MFLOPS",                  56);
	PCLinsert( "PCL_IPC",                     57);
	PCLinsert( "PCL_L1DCACHE_MISSRATE",       58);
	PCLinsert( "PCL_L2DCACHE_MISSRATE",       59);
	PCLinsert( "PCL_MEM_FP_RATIO",            60);

	BATreverse(pcl_events);
	return MAL_SUCCEED;
}

@-
The MAL wrappers around the V4 library
@= getBATdescriptor
        if( BBPcheck(*@2,"@4")==0)
                return throwMessage("enum.@4","cannot access bat @2 in bbp");
        @3= (BAT*) BBPgetdesc(*@2);
        if( @3 == NULL) { *@1 = 0;
                return throwMessage("enum.@4","cannot access descriptor @2");
        }
        if( *@2 <0) @3= BATmirror(@3);
@c
extern int pcl_start(BAT *event, int *mode);
extern int pcl_start_rates(BAT *event, int *mode);
extern int pcl_stop(BAT **result, BAT *event);
extern int pcl_stop_rates(BAT **result, BAT *event);
extern int pcl_query(BAT **result, BAT *event, int *mode);
extern int pcl_try(bit *result, BAT *event, int *mode);

str CMDpclstart(int *ret, int *bid, int *mode){
	BAT *event;
	@:getBATdescriptor(ret,bid,event,PLCstart)@
	pcl_start(event,mode);
	return MAL_SUCCEED;
}
str CMDpclstart_rates(int *ret, int *bid, int *mode){
	BAT *event;
	@:getBATdescriptor(ret,bid,event,PLCstart)@
	pcl_start_rates(event,mode);
	return MAL_SUCCEED;
}
str  CMDpclstop(int *ret, int *bid)
	BAT *result, *event;
	@:getBATdescriptor(ret,bid,result,PLCstop)@
	@:getBATdescriptor(ret,eid,event,PLCstop)@
	pcl_stop(&result,event);
	*ret= result->batCacheid;
	return MAL_SUCCEED;
}
str  CMDpclstop_rates(int *ret, int *bid, int *eid)
	BAT *result, *event;
	@:getBATdescriptor(ret,bid,result,PLCstop_rates)@
	@:getBATdescriptor(ret,eid,event,PLCstop_rates)@
	pcl_stop_rates(&result,event);
	*ret= result->batCacheid;
	return MAL_SUCCEED;
}
str  CMDpclquery(int *ret, int *eid, int *mode)
	BAT *result, *event;
	@:getBATdescriptor(ret,eid,event,PLCpclquery)@
	pcl_query(&result,event,mode);
	*ret= result->batCacheid;
	return MAL_SUCCEED;
}
str  CMDpcltry(int *ret, int *eid,int *mode)
	BAT *event;
	@:getBATdescriptor(ret,eid,event,PLCpcltry)@
	pcl_query(ret,event,mode);
	return MAL_SUCCEED;
}
@-
The V4 implementation code
@c

int pcl_start(BAT *event, int *mode){ return GDK_SUCCEED; }
int pcl_start_rates(BAT *event, int *mode){ return GDK_SUCCEED; }

int pcl_stop(BAT **result, BAT *event){ 
	*result = NULL; 
	return GDK_SUCCEED; 
}

int pcl_stop_rates(BAT **result, BAT *event){ 
	*result = NULL; 
	return GDK_SUCCEED; 
}

int pcl_query(BAT **result, BAT *event, int *mode){ 
	*result = NULL; 
	return GDK_SUCCEED; 
}

int pcl_try(bit *result, BAT *event, int *mode){ 
	*result = FALSE; 
	return GDK_SUCCEED; 
}
#else

#include <pcl.h>

static PCL_DESCR_TYPE pcl_desc;

/* not needed in V5
bat* pcl_init(){
	if (PCLinit(&pcl_desc) != PCL_SUCCESS){
		GDKwarning("couldn't initialize pcl library\n");
	}
	return NULL;
}

void pcl_exit(){
	if (PCLexit(pcl_desc) != PCL_SUCCESS){
		GDKwarning("couldn't free pcl library resources\n");
	}
}
*/

int pcl_start(BAT *event, int *mode){
	int clist[PCL_MAX_EVENT_PER_CALL];
	int res, i = 0;
	BUN p,q;

	if (BATcount(event) > PCL_MAX_EVENT_PER_CALL){
		GDKwarning("Can only start %d events per call\n", 
			PCL_MAX_EVENT_PER_CALL);
		return GDK_FAIL;
	}
	BATloop(event,p,q){
		int ev = *(int*)BUNhloc(event,p);
		if (PCL_EVENT_IS_INT(ev)){
			clist[i] = ev;
			i++;
		}
	}
	res = PCLstart(pcl_desc, clist, i, *mode);
	if (res != PCL_SUCCESS){
		GDKwarning("pcl_start failed with %d\n", res);
		return GDK_FAIL;
	}
	return GDK_SUCCEED;
}

int pcl_start_rates(BAT *event, int *mode){
	int clist[PCL_MAX_EVENT_PER_CALL];
	int res, i = 0;
	BUN p,q;

	if (BATcount(event) > PCL_MAX_EVENT_PER_CALL){
		GDKwarning("Can only start %d events per call\n", 
			PCL_MAX_EVENT_PER_CALL);
		return GDK_FAIL;
	}
	BATloop(event,p,q){
		int ev = *(int*)BUNhloc(event,p);
		if (!PCL_EVENT_IS_INT(ev)){
			clist[i] = ev;
			i++;
		}
	}
	res = PCLstart(pcl_desc, clist, i, *mode);
	if (res != PCL_SUCCESS){
		GDKwarning("pcl_start failed with %d\n", res);
		return GDK_FAIL;
	}
	return GDK_SUCCEED;
}

int pcl_stop(BAT **result, BAT *event){
	PCL_CNT_TYPE ilist[PCL_MAX_EVENT_PER_CALL];
	PCL_FP_CNT_TYPE flist[PCL_MAX_EVENT_PER_CALL];
	int res, i = 0;
	size_t cnt = BATcount(event);
	BUN p,q;

	if (cnt > PCL_MAX_EVENT_PER_CALL){
		GDKwarning("Can only start %d events per call\n", 
			PCL_MAX_EVENT_PER_CALL);
		return GDK_FAIL;
	}
	res = PCLstop(pcl_desc, ilist, flist, cnt);
	if (res != PCL_SUCCESS){
		return GDK_FAIL;
	}
	*result = BATnew(TYPE_int, TYPE_lng, cnt);
	BATloop(event,p,q){
		int ev = *(int*)BUNhloc(event,p);
		if (PCL_EVENT_IS_INT(ev)){
			lng h = ilist[i];
			BUNins(*result, &ev, &h);
		}
		i++;
	}
	return GDK_SUCCEED;
}

int pcl_stop_rates(BAT **result, BAT *event){
	PCL_CNT_TYPE ilist[PCL_MAX_EVENT_PER_CALL];
	PCL_FP_CNT_TYPE flist[PCL_MAX_EVENT_PER_CALL];
	int res, i = 0;
	size_t cnt = BATcount(event);
	BUN p,q;

	if (cnt > PCL_MAX_EVENT_PER_CALL){
		GDKwarning("Can only start %d events per call\n", 
			PCL_MAX_EVENT_PER_CALL);
		return GDK_FAIL;
	}
	res = PCLstop(pcl_desc, ilist, flist, cnt);
	if (res != PCL_SUCCESS){
		return GDK_FAIL;
	}
	*result = BATnew(TYPE_int, TYPE_dbl, cnt);
	BATloop(event,p,q){
		int ev = *(int*)BUNhloc(event,p);
		if (!PCL_EVENT_IS_INT(ev)){
			dbl h = flist[i];
			BUNins(*result, &ev, &h);
		}
		i++;
	}
	return GDK_SUCCEED;
}

int pcl_query(BAT **result, BAT *event, int *mode){
	int res;
	size_t cnt = BATcount(event);
	int clist;
	BUN p,q;

	*result = BATnew(TYPE_int,TYPE_int,cnt);
	BATloop(event,p,q){
		int ev = *(int*)BUNhloc(event,p);
		clist = ev;
		res = PCLquery(pcl_desc, &clist, 1, *mode);
		BUNins(*result, &ev, &res);
	}
	return GDK_SUCCEED;
}

int pcl_try(bit *result, BAT *event, int *mode){
	int i = 0, res;
	int clist[PCL_MAX_EVENT_PER_CALL];
	BUN p,q;

	if (BATcount(event) > PCL_MAX_EVENT_PER_CALL){
		GDKwarning("Can only start %d events per call\n", 
			PCL_MAX_EVENT_PER_CALL);
		return GDK_FAIL;
	}
	BATloop(event,p,q){
		int ev = *(int*)BUNhloc(event,p);
		clist[i] = ev;
		i++;
	}
	res = PCLquery(pcl_desc, clist, i, *mode);
	if (res == PCL_SUCCESS)
	 	*result = TRUE;
	else
	 	*result = FALSE;
	return GDK_SUCCEED;
}
#endif

@mil

PROC test_pcl() : void := {
  names := bat(str,void);
  names.insert("PCL_L1CACHE_MISS",  nil);
  names.insert("PCL_L1DCACHE_MISS", nil);
  names.insert("PCL_L1ICACHE_MISS", nil);

  available := pcl_query(pcl_events.reverse.project(nil).reverse,1).select(0);

  L1MISS_EVENTS := pcl_events.reverse.semijoin(available).reverse.semijoin(names);
  L1MISS_EVENTS.print;

  events := L1MISS_EVENTS.reverse.project(nil).reverse();
  pcl_start(events,1);
  counts := pcl_stop(events);
  counts.print;
}

