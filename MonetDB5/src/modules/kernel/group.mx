@f group
@t The group module
@a M.L. Kersten, P. Boncz, A.P. de Vries 
@v 2.3
@* Introduction
@T
This module contains the primitives to construct, derive, and
perform statistical operations on BATs representing groups.
The default scheme in Monet is to assume the head to represent
the group identifier and the tail an element in the group.

Groups play an important role in datamining, where they are used
to construct cross-tables. Such cross tables over a single
BAT are already supported by the histogram function.
This module provides extensions to support identification of groups in a
(multi-)dimensional space.

The module implementation has a long history. The first implementation
provided several alternatives to produce/derive the grouping.
A more complete (and complex) scheme was derived during its
extensive use in the context of the Data Distilleries  product.
The current implementation is partly a cleanup of this code-base,
but also enables provides better access to the intermediate
structures produced in the process, i.e. the histogram and
the sub-group mapping. They can be used for various optimization
schemes at the MAL level.

The prime limitation of the current implementation is that an 
underlying database of {oid->any} BATs is assumed. 
This enables representation of each group using an oid,
and the value representation of the group can be accordingly be
retrieved easily. An optimized implementation in which we use positional
integer id's (as embodied by Monet's void type) is also available.

This limitation on (v)oid-headers is marginal. The primitive CTsplit
produces for any BAT two copies with both a (v)oid header.
@+ Algorithms
@T
There are several approaches to build a cross table. The one chosen here
is aimed at incremental construction, such that re-use of intermediates
becomes possible. Starting with the first dimension, a BAT is derived to
represent the various groups, called a {\bf CT BAT} or cross-table BAT.

@- Cross Table (CT)
@T
A cross table is an <oid,oid> BAT where the first (head) denotes a tuple in
the cross table and the second (tail) marks all identical lists.
The tail-oids contain group identifiers; that is, {\em this value is equal
{\bf iff} two tuples belong to the same group}. The group identifiers are
chosen from the domain of the tuple-identifiers. This simplifies 
getting back to the original tuples, when talking about a group.
If the tuple-oid of 'John' is chosen as a group-id, you might view this
as saying that each member of the group is 'like John' with respect
to the grouping-criterion.

@- going deeper
@T
Successively the subgroups can be identified by modifying the CT BAT or
to derive a new CT BAT for the subgroups. After all groups have been
identified this way, a BAT histogram operation can be used to obtain
the counts of each data cube. Other aggregation operations using the MIL
set aggregate construct \{X\}(bat) (see the 
@[<a href="../mil.body.html#mod_3_2_0">MIL Reference Manual</a>@)  
can be used as well; note for instance that histogram == \{count\}(b.reverse). 

@* Module Definition
The Monet interface module specification is shown below.
Ideally we should defined stronger type constraints, e.g.
command group(attr:bat[{void,oid},any::1]

@mal
module group;

command group(attr:bat[any::2,any::1] ) 
	:(histo:bat[any::1,int], grp:bat[any::2,oid]) = CTgroup
comment "Cross tabulation group initialization.
         Returned head values are identical as in 'attr'. Tail values are from
         the same domain and indicate unique groups in 'attr' tail column.";
command group(attr:bat[any::2,any::1] ) 
	:bat[any::2,oid] = CTgroup2
 
command group(attr:bat[any::2,any::1], N:int, rng:int) 
	:(histo:bat[any::1,int],grp:bat[any::2,oid]) = CTgroup_custom 
comment "Cross tabulation group initialization like CTgroup, but with user
         provided #bits in hashmask and #distinct values in range.";
 
command group(ct:bat[any::2,any], attr:bat[any::2,any::1]) 
	:(map:bat[any::1,oid],grp:bat[any::2,oid]) = CTderive 
comment "Cross tabulation group extension step.
         Returned head values are identical as in 'ct'. Tail values are from
         the same domain and indicate further refinement of the groups in 'ct',
         taking into account also the tail-values in 'attr'.";
command group(ct:bat[any::2,any], attr:bat[any::2,any::1]) 
	:bat[any::2,oid] = CTderive2;

command regroup(ct:bat[any::2,oid],attr:bat[any::2,any]) :
	 bat[any::2,oid] = CTregroup
comment "Performs a regrouping, modifying ct doing a group";

command refine(b:bat[any::2,any], a:bat[any::2,any]) : bat[any::2,oid] = CTrefine 
comment "refine the ordering of a tail-ordered BAT by sub-ordering on the 
         values of a second bat 'a' (where the heads of a and b match 1-1).  
         The effect of this is similar to (hash-based) CTderive, with the 
	 distinction that the group ids respect the ordering of the group values.";
@-
histogram support. during group computation we already compute histograms
for quick re-use. They are attached to the CT by means of a histolink.
oldstuff
command subhisto(sel:BAT[void,bit], grp:BAT[void,oid], domain:BAT[oid,any]) 
	: BAT[oid,int] = CTsubhisto
comment "optimized sub-histogram for synced grp[void,oid] and sel[void,bit] 
         bats on a previously known domain ";

@+ Group Aggregate operations

This module also contains some efficient aggregate functions over
groups that compute their 
result in one scan, rather than in the iterative manner of the generic 
MIL aggr_ implementations.

For the groups we assume a bat structure where the head indicates the group
and the tail contains the group elements. This leads to the situation that
most value-based operators work on the tail, while counting groups
is focussed on the head.
@mal

command sum(b:BAT[any::2,sht], e:BAT[any::2,any]) : BAT[any::2,sht] = CTsum_sht 
	comment "grouped tail sum";
command sum(b:BAT[any::2,int], e:BAT[any::2,any]) : BAT[any::2,int] = CTsum_int 
	comment "grouped tail sum";
command sum(b:BAT[any::2,lng], e:BAT[any::2,any]) : BAT[any::2,lng] = CTsum_lng 
	comment "grouped tail sum";
command sum(b:BAT[any::2,flt], e:BAT[any::2,any]) : BAT[any::2,flt] = CTsum_flt 
	comment "grouped tail sum";
command sum(b:BAT[any::2,dbl], e:BAT[any::2,any]) : BAT[any::2,dbl] = CTsum_dbl 
	comment "grouped tail sum";

command avg(b:BAT[any::2,sht], e:BAT[any::2,any]) : BAT[any::2,sht] = CTavg_sht 
	comment "grouped tail average";
command avg(b:BAT[any::2,int], e:BAT[any::2,any]) : BAT[any::2,int] = CTavg_int 
	comment "grouped tail average";
command avg(b:BAT[any::2,lng], e:BAT[any::2,any]) : BAT[any::2,lng] = CTavg_lng 
	comment "grouped tail average";
command avg(b:BAT[any::2,flt], e:BAT[any::2,any]) : BAT[any::2,flt] = CTavg_flt 
	comment "grouped tail average";
command avg(b:BAT[int,dbl], e:BAT[int,any]) : BAT[int,dbl] = CTavg_dbl 
	comment "grouped tail average";

command min(b:BAT[any::2,any::1], e:BAT[any::2,any]) : BAT[any::2,any::1] = CTmin 
	comment "grouped tail minimum";
command max(b:BAT[any::2,any::1], e:BAT[any::2,any]) : BAT[any::2,any::1] = CTmax 
	comment "grouped tail maximum";

command count(b:BAT[any::2,any], e:BAT[any::2,any]) : BAT[any::2,int] = CTcount 
	comment "grouped count";
command size(b:BAT[any::2,bit], e:BAT[any::2,any]) : BAT[any::2,int] = CTsize
	comment "grouped count of true values";


command prelude()= groupPrelude;
prelude();
@-
old stuff
    proc size(BAT[any,bit] b) : int {
	var h := b.histogram;
	if (h.exist(true)) 
	    return h.find(true);
	return 0;
    }

    proc avg(BAT[any, any::1] b) : any::1 {
	var cnt := count(b);
        if (cnt = 0) 
	    return cast(0,ttype(b));
	return /(sum(b),cast(cnt,ttype(b)));
    }

    proc card(BAT[any,any] b) : int {
	return b.tunique.count;
    }

    proc {card}(BAT[oid,any] b, BAT[oid,any] e) : BAT[oid,int] {
	return {count}(b.sunique,e);
    }

@* Implementation Code
The xtables modules relies on further initialization of the
GDK atom table with the primitives to deal with mapentries en
indxentry.
@c
#include "monet.h"
static int TYPE_mapentry;
static int TYPE_idxentry;
@-
@= getBATdescriptor
        if( BBPcheck(*@2,"@4")==0) 
		return throwMessage("group.@4", "cannot access bat @2 in bbp");
        @3= (BAT*) BBPgetdesc(*@2);
        if( @3 == NULL) {
                *@1 = 0;
		return throwMessage("group.@4", "cannot access descriptor @2");
        }
	if( *@2 <0){ /* BAT reverse */ @3 = BATmirror(@3); }
@-
Recall that we only support void- and oid- typed heads.
This is captured as a runtime check in the implementation.
@= chkHeader
	if(@1->htype != TYPE_oid && @1->htype != TYPE_void)
		return throwMessage("group.@2", "(v)oid head required\n");
@+ Core Grouping Algorithms
@T
We use hash-grouping all the way. This implementation employs
a simple sequential scan through the operands, adding group
values to a hash-table. This hash-table gives access to the group
identifiers, which are always OIDs.

This strategy is also followed on binary groupings; here 
we construct a special integer consisting of the XORed hashnumber 
of both columns. In such a way, we can build a hash table on
map\_entries (instead of simple atomic values -- the unary case).

In the unary group case, we optimized processing on 1-byte
and 2-byte values by using direct mapping in an array instead of 
hashing.
@c
#define HASH_chr(p) ((unsigned int) (*(unsigned char*) (p)))
#define HASH_sht(p) ((unsigned int) (*(unsigned short*) (p)))
#define HASH_int(p) (*(unsigned int*) (p))
#define HASH_lng(p) (((unsigned int*)(p))[0]^((unsigned int*)(p))[1])
#define HASH_any(p) ((unsigned int) (*hashfcn)(p))

#define match_sync(b,p,r) r += yy
#define match_hash(b,p,r) BUNfndOID(r,b,p); if (r == NULL) continue;

#define declare_atom int any = b->ttype; unsigned int (*hashfcn)() = BATatoms[any].atomHash;
#define declare_simple /* any and hash would otherwise give unused variable warning */

#define htype_sync(b) BAThdense(b)?TYPE_void:TYPE_oid
#define htype_hash(b) TYPE_oid

#define ttype_simple(b,t) t 
#define ttype_atom(b,t) b->ttype 

#define STANDARD_MASK 1023

/* 
   Note:
     following macros take advantage of clustered property;
     if b is clustered, then we can stop early traversing collision lists.

     BTW, simply stopping possibly breaks chain construction, so the resulting
     map is not directly reuseable as a hash table; the current Monet cannot
     however handle multiple accellerators, so this ain't a real problem for now :)
 */
						    
#define declare_unclustered /* avoid warning */
#define declare_clustered   int samecluster = TRUE;

#define chain_unclustered   for (zz = hash[c]; zz > 0; zz = e->link)
#define chain_clustered     for (zz = hash[c]; (zz > 0) && (samecluster); zz = e->link)

#define tst_grp_unclustered(eq,p,t)    (eq(p, tcur, t))
#define tst_grp_clustered(eq,p,t)      (samecluster = eq(p, tcur, t))

#define tst_derive_unclustered(eq,p,t) (e->hcur == hcur && eq(p, tcur, t))
#define tst_derive_clustered(eq,p,t)   ((samecluster = e->hcur == hcur) && eq(p, tcur, t))

typedef struct {
	oid hcur;		/* old group id */
	int link;		/* hash link */
} idxentry_t;

typedef struct {
	oid hcur;		/* old group id */
	int link;		/* hash link */
	oid gid;		/* new group id */
	int cnt;		/* histogram count */		
} mapentry_t;

typedef struct {
	BAT *map;		/* [mapentry,value] elements */
	int *hash, mask;	/* hash buckets and mask */
	Heap hp;		/* storage for hash buckets */
} map_T;

str groupPrelude(){
	/* printf("#init group\n");*/
	TYPE_mapentry = malAtomFixed(16,4);
	TYPE_idxentry = malAtomFixed(8,4);
	return MAL_SUCCEED;
}
@:map_init_def(STANDARD,STANDARD_MASK,4096)@
@:map_init_def(CUSTOM,custom_MASK,custom_rng)@

@= map_init_def
#define map_init_@1(map,hash,mask,entry,mapsize)\
	if (m) {\
		map = m->map; hash = m->hash; mask = m->mask;\
    	} else {\
		map = BATnew(TYPE_mapentry, tailtype(b,TRUE), @3);\
		hash = (int*) alloca(sizeof(int)*((mask=@2)+1));\
		for(xx=0; xx<=@2; xx++) {\
			hash[xx] = 0;\
		}\
    	}entry.hcur=0; entry.link=0;entry.gid=0; entry.cnt = 1;\
	mapsize = BUNindex(map, BUNlast(map));
@c


BAT *map2histo(BAT *map) {
	if (map == NULL || map->htype != TYPE_mapentry || VIEWparent(map) ||
	    map->batSharecnt > 1 || BATgetaccess(map) != BAT_WRITE) 
	{
		if (map) BBPreclaim(map);
		return NULL;
	}
        /* trickily transform a bat[mapentry,any] into bat[oid,int] */
	map->htype = BATmirror(map)->ttype = TYPE_oid;
	map->ttype = BATmirror(map)->htype = TYPE_int;
	strcpy(map->hatom, "oid");
	strcpy(map->tatom, "int");
	if (map->tvarsized && map->theap.base) {
		HEAPfree(&map->theap);
	}
	BATmirror(map)->hvarsized = map->tvarsized = 0;
	BATmirror(map)->dims.tailloc = 
	    map->dims.headloc = map->dims.headloc + 8;
	BATmirror(map)->dims.headloc = 
	    map->dims.tailloc = map->dims.headloc + 4;
	return map;
}
 
@T
The group macro is split along three dimensions:
\begin{description}
\item [type:] Type specific implementation for selecting the right
hash function and data size etc.;
\item [clustered:] The \{clustered and unclustered\} select the
appropriate algorithm, i.e., with or without taking advantage of 
an order of values in the parent groups;
\item [physical properties:] Values \{standard and custom\}, 
chosing between a fixed predefined and a custom hashmask. Custom
allows the user to determine the size of the hashmask (and indirectly 
the estimated size of the result). The hashmask is $2^n - 1$ where $n$ 
is given by the user, or 1023 otherwise, and the derived result
size is $4 \cdot 2^n$.
\end{description}

Further research should point out whether fitting a simple statistical 
model (possibly a simple mixture model) can help choose these parameters 
automatically; the current idea is that the user (which could be a
domain-specific extension of the higher-level language) knows the 
properties of the data, especially for IR in which the standard grouping
settings differ significantly from the original datamining application.
@c

#define group_params_STANDARD /* fixed */
#define group_params_CUSTOM   int custom_MASK, int custom_rng,

@= CTgroup
BAT *CTgroup_@1_@4_@5( group_params_@5 BAT *b, BAT *bn, map_T *m ){
	oid *dst = (oid*) BUNfirst(bn);
	int xx, zz, *hash, mask, mapsize;
	mapentry_t entry, *e;
	BUN p, q, r;
	BAT *map;
	declare_@3
 
	map_init_@5(map,hash,mask,entry,mapsize); 

	/* core hash grouping algorithm */
	BATloopFast(b, p, q, xx) {
		declare_@4
		ptr tcur = BUN@2(b,p);

		/* hash-lookup of 'tcur' in map */
    		unsigned int c = HASH_@1(tcur);
		c = mix_int(c) & mask;
		chain_@4 {
			r = BUNptr(map,zz);
			e = (mapentry_t*) BUNhloc(map,r);
			if (tst_grp_@4(@3_EQ, BUN@2(map,r), @1)) {
				if (m == NULL) e->cnt++; 
				goto found;
			} 
		} 

		/* not found-> insert new element in map (and hash) */ 
		if (m) {
		  	zz = mapsize;
		} else {
			entry.gid = *(oid*) BUNhead(b,p);
		}
		entry.link = hash[c];
		hash[c] = mapsize++;
		bunfastins(map, &entry, tcur);
		e = &entry;

found:		/* ultra-fast 'insert' of [oid,gid] into ct */
		if (bn->htype) *dst++ = *(oid*) BUNhead(b,p);
		*dst++ = m?zz:e->gid;
	}
	bn->batBuns->free = ((BUN) dst) - bn->batBuns->base; 
	bn->tsorted = 0;
	ALIGNsetH(bn,b);
	return m?NULL:map2histo(map);
} 
@c
int tailtype(BAT *b, int str_trick) {
	int tpe = ATOMstorage(b->ttype); /* standard type remappings */

	/* more daring remappings possible under simple equality */
	if (tpe == TYPE_flt) {
		return TYPE_int; 
	} else if (tpe == TYPE_dbl) {
		return TYPE_lng; 
	} else if (tpe == TYPE_str && str_trick && GDK_ELIMDOUBLES((&b->theap))) {
		return TYPE_int; /* string offsets are identifying integers */
	}
	return tpe;
}
@-
Generate both 'normal' CTgroup and clustered CTgroups 
@= wrappedgroupinner
@:CTgroup(chr,tloc,simple,@1,@2)@
@:CTgroup(sht,tloc,simple,@1,@2)@
@:CTgroup(int,tloc,simple,@1,@2)@
@:CTgroup(lng,tloc,simple,@1,@2)@
@:CTgroup(any,tail,atom,@1,@2)@

@-
Generate both 'normal' CTgroup and parameterized CTgroups.
@= wrappedgroupouter
@:wrappedgroupinner(unclustered,@1)@
@:wrappedgroupinner(clustered,@1)@

@= returnvalue
        @1 =
@c

@:wrappedgroupouter(STANDARD)@
@:wrappedgroupouter(CUSTOM)@

#define declare_mask_STANDARD	/* fixed */
#define declare_mask_CUSTOM 	int mask = (1 << *N) - 1;

str CTgroup(int *rethisto, int *retbid, int *bid)
{
	@:CTgroupbody(STANDARD)@

	bn->tsorted = 0;
	ALIGNsetH(bn, b);

	*retbid = bn->batCacheid;
	BBPfix(*retbid);
	if(histo){
		*rethisto = histo->batCacheid;
		BBPfix(*rethisto);
	}
	return MAL_SUCCEED;
}
str CTgroup2(int *retbid, int *bid)
{	int histo=0; str ret;
	ret=CTgroup(&histo,retbid,bid);
	BBPunfix(histo);
	return ret;
}

str CTgroup_custom(int *rethisto, int *retbid, int *bid, int *N, int *rng)
{
	@:CTgroupbody(CUSTOM)@
	bn->tsorted = 0;
	ALIGNsetH(bn, b);

	*retbid = bn->batCacheid;
	*rethisto = histo? histo->batCacheid: 0;
	BBPfix(*retbid);
	if(histo) BBPfix(*rethisto);
	return MAL_SUCCEED;
}

@= CTgroupbody
        declare_mask_@1 
	BAT *histo= 0, *bn=0;
	BAT *b;
	@:getBATdescriptor(retbid,bid,b,group)@
	@:chkHeader(b,CTgroup)@
	bn = BATnew(b->htype, TYPE_oid, BATcount(b));

	/* Poor man's clustered test: sorted & !keyed => clustered  */
	if ( (b->tsorted) && !(b->tkey) ) {
	  @:choosegroup@1(tailtype(b,TRUE),bn,NULL,clustered,histo)@
	} else {
	  @:choosegroup@1(tailtype(b,TRUE),bn,NULL,unclustered,histo)@
	}

@-

@= choosegroupSTANDARD
	/* Choose appropriate @4 CTgroup implementation */
	switch(@1) {
	case TYPE_chr: histo= CTgroup_chr_@4_STANDARD(b,@2,@3); break;
	case TYPE_sht: @?@5:returnvalue(@5)@ CTgroup_sht_@4_STANDARD(b,@2,@3); break;
	case TYPE_int: @?@5:returnvalue(@5)@ CTgroup_int_@4_STANDARD(b,@2,@3); break;
	case TYPE_lng: @?@5:returnvalue(@5)@ CTgroup_lng_@4_STANDARD(b,@2,@3); break;
	default:       @?@5:returnvalue(@5)@ CTgroup_any_@4_STANDARD(b,@2,@3);
	}
@c

@= choosegroupCUSTOM
	/* Choose appropriate @4 CTgroup implementation */
	switch(@1) {
	case TYPE_chr: 
	  @?@5:returnvalue(@5)@ CTgroup_chr_@4_CUSTOM(mask,*rng,b,@2,@3); 
	  break;
	case TYPE_sht: 
	  @?@5:returnvalue(@5)@ CTgroup_sht_@4_CUSTOM(mask,*rng,b,@2,@3);
	  break;
	case TYPE_int: 
	  @?@5:returnvalue(@5)@ CTgroup_int_@4_CUSTOM(mask,*rng,b,@2,@3); 
	  break;
	case TYPE_lng: 
	  @?@5:returnvalue(@5)@ CTgroup_lng_@4_CUSTOM(mask,*rng,b,@2,@3); 
	  break;
	default:       
	  @?@5:returnvalue(@5)@ CTgroup_any_@4_CUSTOM(mask,*rng,b,@2,@3);
	}
@-

@= derive
BAT* CTderive_@1_@2_@5(BAT* ct, BAT *b, BAT *bn, map_T *m) { 
	oid *dst = (oid*) BUNfirst(bn);
	int zz, xx, yy = BUNsize(ct), *hash, mask, mapsize;
	BUN p, q, r, cp = BUNfirst(ct) - yy;
	mapentry_t entry, *e;
	BAT *map;
	declare_@4
   
	map_init_STANDARD(map,hash,mask,entry,mapsize); 

	/* core hash grouping algorithm */
	BATloopFast(b, p, q, xx) {
		ptr tcur = BUN@3(b,p);
		unsigned int c;
		oid hcur;
		declare_@5

		/* find corresponding value in 'ct' */
		match_@1(ct, BUNhead(b,p), cp); 
		hcur = *(oid*) BUNtloc(ct,cp);

		/* hash-lookup of [hcur,tcur] in map */
		c = (((unsigned int) hcur) ^ HASH_@2(tcur));
		c = mix_int(c) & mask;
		chain_@5 {
			r = BUNptr(map,zz);
			e = (mapentry_t*) BUNhloc(map,r);
			if (tst_derive_@5(@4_EQ, BUN@3(map,r), @2)) {
				if (m == NULL) e->cnt++; 
				goto found;
			} 
		} 
		/* not found-> insert new element in map (and hash) */ 
		if (m) {
			zz = mapsize;
		} else {
			entry.gid = *(oid*) BUNhead(b,p);
		}
		entry.hcur = hcur;
		entry.link =  hash[c];
		hash[c] = mapsize++;
		bunfastins(map, &entry, tcur);
		e = &entry;

found:		/* ultra-fast 'insert' of [oid,gid] into ct */
		if (bn->htype) *dst++ = *(oid*) BUNhead(b,p);
		*dst++ = m?zz:e->gid;
	}
	bn->batBuns->free = ((BUN) dst) - bn->batBuns->base; 
	return m?NULL:map2histo(map);
}

@c

/* Generate both 'normal' CTderive and clustered CTderive */
@= wrappedderive
@:derive(sync,chr,tloc,simple,@1)@
@:derive(sync,sht,tloc,simple,@1)@
@:derive(sync,int,tloc,simple,@1)@
@:derive(sync,lng,tloc,simple,@1)@
@:derive(sync,any,tail,atom,@1)@
@:derive(hash,chr,tloc,simple,@1)@
@:derive(hash,sht,tloc,simple,@1)@
@:derive(hash,int,tloc,simple,@1)@
@:derive(hash,lng,tloc,simple,@1)@
@:derive(hash,any,tail,atom,@1)@
@c
@:wrappedderive(unclustered)@
@:wrappedderive(clustered)@

@= choosederive
	/* Choose appropriate (@1 && @2) CTderive implementation */
	switch(tt) {
	case TYPE_chr: histo = CTderive_@1_chr_@2(ct,b,bn,m); break;
	case TYPE_sht: histo = CTderive_@1_sht_@2(ct,b,bn,m); break;
	case TYPE_int: histo = CTderive_@1_int_@2(ct,b,bn,m); break;
	case TYPE_lng: histo = CTderive_@1_lng_@2(ct,b,bn,m); break;
	default:       histo = CTderive_@1_any_@2(ct,b,bn,m);
	}
@c

str derive(BAT** retval, BAT* ct, BAT* b, int tt, map_T *m) {
	BAT *histo, *bn = *retval;
	int synced = ALIGNsynced(ct,b);

	/* preprocess/create the result bat 'bn' */
	if (bn) {
		ACCremoveall(bn);
	} else {
		int ht = (synced&&BAThdense(b))?TYPE_void:TYPE_oid;
		bn = BATnew(ht, TYPE_oid,BATcount(b));
	}

	/* CTderive with correct lookup method (hash,synced) and type */
	if (synced) {
	   if ((ct->tsorted) && !(ct->tkey)) {
		@:choosederive(sync,clustered)@
	   } else {
		@:choosederive(sync,unclustered)@
           }
	} else {
	   if ((ct->tsorted) && !(ct->tkey)) {
		@:choosederive(hash,clustered)@
	   } else {
		@:choosederive(hash,unclustered)@
           }
	}

	/* postprocess the result bat 'bn' */
	bn->tsorted = 0;
	if (BATcount(bn) == BATcount(b)) {
		ALIGNsetH(bn, b);
	} else {
		bn->hsorted = BAThordered(b);
		if (b->hkey) BATkey(bn, TRUE);
	}
@-
	if (histo) {
		CTbuild_hl(&bn->taccelerator, &histo->batCacheid, BATmirror(bn));
	}
@c
	*retval = bn;
	return MAL_SUCCEED;
}

str regroup(BAT** retval, BAT* ct, BAT* b, int tt, map_T *m) {
	*retval = BATsetaccess(ct, BAT_WRITE);
	return derive(retval, ct, b, tt, m);
}

str CTregroup(int* retid, int* ctid, int* bid) {	
	BAT** retval, *dummy, * ct, * b;
	str ret;

	@:getBATdescriptor(retid,ctid,ct,derive)@
	@:chkHeader(ct,CTregroup)@
	@:getBATdescriptor(retid,bid,b,derive)@
	@:chkHeader(b,CTregroup)@
	BBPfix(ct->batCacheid);
	retval= & dummy;
	ret= regroup(retval, ct, b, tailtype(b, TRUE), NULL);
	if( ret== MAL_SUCCEED) *retid= dummy->batCacheid;
	return ret;
}

str CTderive(int* mapid, int* retid, int  *ctid, int* bid) {	
	BAT **retval, *dummy, *ct, *b;
	BAT *bn = NULL;
	str ret;

	@:getBATdescriptor(retid,ctid,ct,derive)@
	@:chkHeader(ct,CTregroup)@
	@:getBATdescriptor(retid,bid,b,derive)@
	@:chkHeader(b,CTregroup)@
	if (tailtype(ct, TRUE) != TYPE_int) {
		int rethisto,retbid, bid= ct->batCacheid;
		str s;

		/* if (!CTgroup(&rethisto,&retbid, &bid)) 
			return GDK_FAIL; */
		s= CTgroup(&rethisto,&retbid, &bid);
		if(s) return s;
		ct = bn;
	} 
	retval= &dummy; *retval = NULL;
	ret = derive(retval, ct, b, tailtype(b, TRUE), NULL);
	if (bn) BBPreclaim(bn);
	if( ret== MAL_SUCCEED) *retid= dummy->batCacheid;
	/* no map yet */
	*mapid=0;
	return ret;
}
str CTderive2(int* retid, int  *ctid, int* bid) {	
	int dummy;
	return CTderive(&dummy,retid,ctid,bid);
}


str CTsubhisto(int *retid, int *selid, int *grpid, int *domid) {
	BAT *sel, *grp, *dom;
	bit *filter;
        int mask, size, xx, yy, zz;
	unsigned int *r, *base, *hash;
        BUN p, q;
	BAT *bn;

	@:getBATdescriptor(retid,selid,sel,subhisto)@
	@:getBATdescriptor(retid,grpid,grp,subhisto)@
	@:chkHeader(grp,CTsubhisto)@
	@:getBATdescriptor(retid,domid,dom,subhisto)@

	filter = (bit*) BUNtloc(sel,BUNfirst(sel));
        size=BATcount(dom); yy=3; zz=BUNsize(sel);

	/* we know the domain; go for perfect hashing */
	for(mask=1; mask<size; mask<<=1);
	if (mask < 256) mask = 256;
	hash = (unsigned int*) GDKmalloc(sizeof(int)*mask);
        for(xx = 0; xx < mask; xx++) {
        	hash[xx] = 0;
	} mask--;

	/* insert all values in the hash table, and in bn with count zero */
	bn = BATnew(TYPE_idxentry, TYPE_int, size);
	base = (unsigned int*) bn->batHole;
	r = base + yy;
        BATloopFast(dom, p, q, xx) { 
		unsigned int v = *(unsigned int*) BUNhloc(dom,p);
                unsigned int c = v & mask; 
		*r++ = v;
		*r++ = hash[c]; 
		*r++ = 0;
                hash[c] = yy; 
		yy += 3;
	}
	bn->batBuns->free = ((BUN) r) - bn->batBuns->base;
	bn->tsorted = 0;
	bn->htype = BATmirror(bn)->ttype = TYPE_oid;
	strcpy(bn->hatom, "oid");
	ALIGNsetH(bn, dom);

        /* add the counts for this selection using the hash table */
        BATloopFast(grp, p, q, xx) { 
	    if (*filter == TRUE) {
		unsigned int v = *(unsigned int*) BUNtloc(grp,p);
                unsigned int c = v & mask; 
                for(yy = hash[c]; yy > 0; yy = r[1]) {
			r = base + yy;
			if (r[0] == v) {
				r[2]++; break;
                        }
                }
  	    } filter += zz;
     
	}
	GDKfree(hash);
	*retid = bn->batCacheid;
        return MAL_SUCCEED;
}

@+ Support for Order-by
@c
#define DEFAULT_SIZE 10000

static INLINE
oid* sort_flush(int *buf, int size, int tpe, BUN base, oid* dst, oid *idp) {
	int (*cmp)(ptr,ptr) = BATatoms[tpe].atomCmp;
	int *end = buf + size; 
	oid id = *idp + 1;
	ptr cur, val;

	/* qsort works fine for small amount of tuples; with few duplicates */
	GDKqsort(buf, base, size/2, 2*sizeof(int), tpe, 0);  
	cur = base + buf[0];
	while(buf < end) {
		val = base + *(int*) buf++;
		if ((*cmp)(cur, val)) { cur=val; id++;}
		*dst++ = *buf++;
		*dst++ = id;
	}
	*idp = id;
	return dst;
}

str CTrefine(int *retid, int *bid, int *aid) {
    BAT *b, *a;
    BAT *bn;

    @:getBATdescriptor(retid,bid,b,refine)@
    @:chkHeader(b,CTrefine)@
    @:getBATdescriptor(retid,aid,a,refine)@
    @:chkHeader(a,CTrefine)@

    if (b->tkey) { /* if key, no further refinements can take place */
	bn = BATmark(b, 0);
    } else {
	int (*cmp)(ptr,ptr) = BATatoms[b->ttype].atomCmp;
	BUN p, q, r, last = BUNfirst(b), base = a->theap.base?NULL:a->batBuns->base;
	int *buf, *cur, *end, xx, size = DEFAULT_SIZE;
	oid *dst, o, id = 0;

	/* create tmp BAT that holds one cluster; estimate required size using sampling */
	if (BATcount(b) > DEFAULT_SIZE) { 
		BAT *sample = BATsample(b, DEFAULT_SIZE);
		BAT *histo = BAThistogram(sample);
		BATmax(histo,&xx);
		if (xx > 1) 
			size = MAX(size, xx*(((float) BATcount(b))/DEFAULT_SIZE));
		BBPreclaim(sample);
		BBPreclaim(histo);
	} 
	/* create a temporary BAT of the estimated size holding pointers to the a tail atoms */
	buf = cur = (int*) GDKmalloc(size*2*sizeof(int));
	end = buf + (size*2);

        /* create result BAT */
	bn = BATnew(TYPE_oid, TYPE_oid, BATcount(b));
	bn->hsorted = bn->tsorted = FALSE;
	dst = (oid*) BUNfirst(bn);

  	/* merge-scan tail of b, finding chunks with equal values; then sort each chunk on a */
	BATloopFast(b, p, q, xx) {
		if ((*cmp)(BUNtail(b,last), BUNtail(b,p))) {
			dst = sort_flush(buf, cur-buf, a->ttype, base?base:a->theap.base, dst, &id);
		    	last = p; cur = buf;
		}
		o = *(oid*) BUNhead(b,p);
		BUNfndOID(r, a, &o);
		if (r == NULL) {
			*dst++ = o;
			*dst++ = id;
			continue;
		}
		if (cur >= end) {
			int off = cur - buf;
			buf = (int*) GDKrealloc(buf, (size*=2)*2*sizeof(int));
			end = buf + (size*2);
			cur = buf + off;
		}
		r += a->tloc;
		*cur++ = (base)?(r-base):*(int*) r;
		*cur++ = o;
	} 
	dst = sort_flush(buf, cur-buf, a->ttype, base?base:a->theap.base, dst, &id);
	GDKfree(buf);
	bn->batBuns->free = ((BUN) dst) - bn->batBuns->base;
	bn->tsorted = 1;
    } 
    *retid = bn->batCacheid;
    return MAL_SUCCEED;
}
@+ Test Script
@mil
module(aggr,decimal);

proc toset(bat[any,any] b) : str {
        var res := "{ ";
        b@batloop() {
                res :+= str($t) + " ";
        }
        return res + "}";
}

proc aggrtst(int num, int fanout, str aggr) {
	var p := 3;
	while((p :+= 1) <= $0) {
	        var b, e, v := bat(void, int, num);
	        var tpe := $(p);
	        var i := 0;
	        while(i < num) {
	                v.insert(nil, 42);
	                i :+= 1;
	        }
	        e := [oid](v.seqbase(0@0).reverse).reverse;
	        if (fanout = 1) {
	                b := bat(void,(*tpe)()).seqbase(0@0);
	        } else {
	                b := bat(oid,(*tpe)());
	        }
	        var n := 0; 
	        e@batloop() {
	                i := 0; 
	                while(i < fanout) {
	                        if  (($h = 0@0) and (i = 0)) {
	                                b.insert($h, (*tpe)(nil));
	                        } else {
	                                b.insert($h, (*tpe)(n));
                        	} 
                        	n :+= 1; i :+= 1;
                	}
                }
        	print({toset}(b).col_name("test-set"),
        	      (*aggr)(b).col_name(sprintf("%s(b)",aggr)),
        	      (*aggr)(b,v).col_name(sprintf("%s(b,v)",aggr)),
        	      (*aggr)(b,e).col_name(sprintf("%s(b,e)",aggr)));
        }
}

aggrtst(16,160,"{sum}","sht","int","lng","flt","dbl");
aggrtst(16,160,"{avg}","sht","int","lng","flt","dbl");
aggrtst(16,160,"{min}","sht","int","lng","flt","dbl","decimal");
aggrtst(16,160,"{max}","sht","int","lng","flt","dbl","decimal");
aggrtst(16,160,"{card}","sht","int","lng","flt","dbl","decimal");
aggrtst(16,160,"{count}","sht","int","lng","flt","dbl","decimal");

@+ Implementation
These implementations need just one scan and a simple hash-maintained data
structure to compute a group of common aggregates. 

With group OIDs spanning a range of less SMALL_AGGR_MAX (the actual number
of groups might be even less, in case there are "holes" in the group OID
range), we use a simple array as temporary sum/cnt table on order to benefit
from positional lookups; with size of sum <= 8 bytes and size of cnt == 4
bytes, we stay below 16 KBytes, i.e., within (almost) any L1 cache
@c
#define SMALL_AGGR_MAX 1024

@-
@= large_aggr_sum
        (void) BATprepareHash(bn);
        BATloopFast(b, p, q, xx) {
                oid *h = (oid*) BUNhead(b,p);
                @1 *t = (@1*) BUN@2(b,p);

                BUNfndOID(r, bn, h);
                if (r) {
                        @1 *dst = (@1*) BUN@2(bn, r);
                        if (*dst != @1_nil) {
                                if (*t == @1_nil) {
                                        *dst = @1_nil;
                                } else {
                                        *dst += *t;
                                }
                        }
                }
        }
@-
@= small_aggr_sum
        sums = (@1*) GDKmalloc(range*sizeof(@1));
        for (i = 0; i < range; i++) sums[i] = zero;
        BATloopFast(b, p, q, xx) {
                int h = (int)(*(oid*) BUNhead(b,p)) - min;
                @1 *t = (@1*) BUN@2(b,p);

                if (h >= 0 && h < range) {
                        @1 *dst = sums + h;
                        if (*dst != @1_nil) {
                                if (*t == @1_nil) {
                                        *dst = @1_nil;
                                } else {
                                        *dst += *t;
                                }
                        }
                }
        }
        BATloopFast(bn, p, q, xx) {
                int h = (int)(*(oid*) BUNhead(bn,p)) - min;
                *(@1*)BUN@2(bn, p) = sums[h];
        }
        GDKfree(sums);
@-
@= large_aggr_avg
        cnt  = (int*) GDKmalloc(BATcount(e)*sizeof(int));
        memset(cnt, 0, BATcount(e)*sizeof(int));
        (void) BATprepareHash(bn);
        BATloopFast(b, p, q, xx) {
                oid *h = (oid*) BUNhead(b,p);
                @1 *t = (@1*) BUN@2(b,p);

                BUNfndOID(r,bn,h);
                if (r) {
                        @1 *dst = (@1*) BUN@2(bn, r);
                        if (*dst != @1_nil) {
                                if (*t == @1_nil) {
                                        *dst = @1_nil;
                                } else {
                                        *dst += *t;
                                }
                                cnt[BUNindex(bn,r)-off]++;
                        }
                }
        }
        /* postprocess by dividing sums by counts */
        BATloopFast(bn, p, q, xx) {
                @1 *dst = (@1*) BUN@2(bn, p);
                if (cnt[yy] == 0) {
                        *dst = @1_nil;
                } else if (*dst != @1_nil) {
                        *dst /= cnt[yy];
                } yy++;
        }
        GDKfree(cnt);
@-
@= small_aggr_avg
        sums = (@1*) GDKmalloc(range*sizeof(@1));
        cnt  = (int*) GDKmalloc(range*sizeof(int));
        for (i = 0; i < range; i++) sums[i] = zero;
        memset(cnt, 0, range*sizeof(int));
        BATloopFast(b, p, q, xx) {
                int h = (int)(*(oid*) BUNhead(b,p)) - min;
                @1 *t = (@1*) BUN@2(b,p);

                if (h >= 0 && h < range) {
                        @1 *dst = sums + h;
                        if (*dst != @1_nil) {
                                if (*t == @1_nil) {
                                        *dst = @1_nil;
                                } else {
                                        *dst += *t;
                                }
                                cnt[h]++;
                        }
                }
        }
        /* postprocess by dividing sums by counts */
        BATloopFast(bn, p, q, xx) {
                int h = (int)(*(oid*) BUNhead(bn,p)) - min;
                @1 *dst = (@1*) BUN@2(bn, p);
                if (cnt[h] == 0 || sums[h] == @1_nil) {
                        *dst = @1_nil;
                } else {
                        *dst = sums[h]/cnt[h];
                }
        }
        GDKfree(sums);
        GDKfree(cnt);


@= arithpump
str CTsum_@1(int *retval, int *bid,int  *eid){
	BAT *ret, *b, *e;
	BAT *bn = BATnew(e->htype, BATttype(b), BATcount(e));	
	@1 zero = (@1) 0, *sums;
	BUN p, q, r;
	int xx,i,range,min,max;

	@:getBATdescriptor(retval,bid,b,sum)@
	@:chkHeader(b,CTsum_@1)@
	@:getBATdescriptor(retval,eid,e,sum)@
	@:chkHeader(e,CTsum_@1)@
	/* init: set all sums to zero */
	bn->tsorted = bn->hsorted = 0;
	ALIGNsetH(bn, e);
        if (BAThordered(e)&1) {
                min = (int)(*(oid*)BUNhead(e, BUNfirst(e)));
                BATloopFast(e, p, q, xx) {
                        BUNfastins(bn, BUNhead(e,p), &zero);
                }
                max = (int)(*(oid*)BUNhead(e, BUNlast(e)-BUNsize(e)));
        } else {
                min = max = (int)(*(oid*)BUNhead(e, BUNfirst(e)));
                BATloopFast(e, p, q, xx) {
                        BUNfastins(bn, BUNhead(e,p), &zero);
                        i = (int)(*(oid*)BUNhead(e, p));
                        if (i < min) min = i;
                        else
                        if (i > max) max = i;
                }
        }
        range = max - min + 1;

        /* scan b, and add values to sums in-place */
        if (range > SMALL_AGGR_MAX) {
                ALGODEBUG THRprintf(GDKout, "CMDaggr_sum_@1: range(=%d) > SMALL_AGGR_MAX(=%d)  =>  large_aggr_sum\n",range,SMALL_AGGR_MAX);
                @:large_aggr_sum(@1,@2)@
        } else {
                ALGODEBUG THRprintf(GDKout, "CMDaggr_sum_@1: range(=%d) <= SMALL_AGGR_MAX(=%d)  =>  small_aggr_sum\n",range,SMALL_AGGR_MAX);
                @:small_aggr_sum(@1,@2)@
        }
	*retval = bn->batCacheid;
	return MAL_SUCCEED;
}

str CTavg_@1(int *retval, int *bid,int  *eid){
	BAT *ret, *b, *e;
	BAT *bn = BATnew(e->htype, BATttype(b), BATcount(e));	
	int xx, yy = 0, off = BUNindex(bn,BUNfirst(bn));
	int *cnt = (int*) GDKmalloc(BATcount(e)*sizeof(int)); 
	@1 zero = (@1) 0;
	BUN p, q, r;

	@:getBATdescriptor(retval,bid,b,avg)@
	@:chkHeader(b,CTsum_@1)@
	@:getBATdescriptor(retval,eid,e,avg)@
	@:chkHeader(e,CTsum_@1)@
	/* init sums and counts to zero */
	bn->tsorted = bn->hsorted = 0;
	ALIGNsetH(bn, e);
	memset(cnt, 0, BATcount(e)*sizeof(int));
	BATloopFast(e, p, q, xx) {
		BUNfastins(bn, BUNhead(e,p), &zero);
	}
	/* scan b, adding sums, and incrementing counts */
	(void) BATprepareHash(bn);
	BATloopFast(b, p, q, xx) {
		oid *h = (oid*) BUNhead(b,p);
		@1 *t = (@1*) BUNtail(b,p);

		BUNfndOID(r,bn,h);
		if (r) {
			@1 *dst = (@1*) BUNtloc(bn, r);
			if (*dst != @1_nil) {
				if (*t == @1_nil) {	
					*dst = @1_nil;
				} else {
					*dst += *t;
				}
				cnt[BUNindex(bn,r)-off]++;
			} 
		}
	} 
	/* postprocess by dividing sums by counts */
	BATloopFast(bn, p, q, xx) {
		@1 *dst = (@1*) BUNtail(bn, p);
		if (cnt[yy] == 0) {
			*dst = @1_nil;
		} else if (*dst != @1_nil) {
			*dst /= cnt[yy];
		} yy++;
	} 
	GDKfree(cnt);
	*retval = bn->batCacheid;
	return MAL_SUCCEED;
}
@c
@:arithpump(sht,tloc)@
@:arithpump(int,tloc)@
@:arithpump(lng,tloc)@
@:arithpump(flt,tloc)@
@:arithpump(dbl,tloc)@

@= extreme
str CT@1(int *retval, int *bid,int  *eid){
	BAT *ret, *b, *e;
	BAT *bn;
	int (*cmp)(ptr,ptr);
	ptr nil;
	int xx, yy, off;
	ptr *extremes;
	BUN p, q, r;

	@:getBATdescriptor(retval,bid,b,@1)@
	@:chkHeader(b,CT@1)@
	@:getBATdescriptor(retval,eid,e,@1)@
	@:chkHeader(e,CT@1)@

	bn = BATnew(e->htype, BATttype(b), BATcount(e));	
	cmp = BATatoms[bn->ttype].atomCmp;
	nil = ATOMnilptr(bn->ttype);
	yy = 0; off = BUNindex(e,BUNfirst(e));
	extremes = (ptr*) GDKmalloc(BATcount(e)*sizeof(ptr)); 

	/* init: set all extremes to the zero pointer */
	memset(extremes, 0, BATcount(e)*sizeof(ptr)); 

	/* scan b and replace totals by the extreme value (just pointers to vals in b) */
	(void) BATprepareHash(e);
	BATloopFast(b, p, q, xx) {
		oid *h = (oid*) BUNhead(b,p);
		ptr t =  BUNtail(b,p);

		BUNfndOID(r,e,h);
		if (r) {
			ptr *val = extremes + (BUNindex(e,r) - off);
			if (*val != nil) {
				if ((*cmp)(t,nil) == 0) {
					*val = nil;
				} else if (*val == NULL || (*cmp)(t,*val) @2 0) {
					*val = t;
				}
			}
		}
	} 
	/* insert the extreme values into the result */
	BATloopFast(e, p, q, xx) {
		ptr val = extremes[yy++];
		BUNfastins(bn, BUNhead(e,p), val?val:nil); 
	} 
	bn->tsorted = bn->hsorted = 0;
	ALIGNsetH(bn, e);
	GDKfree(extremes);
	*retval = bn->batCacheid;
	return MAL_SUCCEED;
}
@c
@:extreme(min,<)@
@:extreme(max,>)@

@= large_aggr_count
        (void) BATprepareHash(bn);
        BATloopFast(b, p, q, xx) {
                oid *h = (oid*) BUNhead(b,p);

                BUNfndOID(r, bn, h);
                if (r) {
                        ptr t = BUNtail(b,p);
                        if (ATOMcmp(btt,t,bt_nil)) {
                                int *dst = (int*) BUNtloc(bn, r);
                                (*dst)++;
                        }
                }
        }
@c
@= small_aggr_count
        cnt  = (int*) GDKmalloc(range*sizeof(int));
        memset(cnt, 0, range*sizeof(int));
        BATloopFast(b, p, q, xx) {
                int h = (int)(*(oid*) BUNhead(b,p)) - min;

                if (h >= 0 && h < range) {
                        ptr t = BUNtail(b,p);
                        if (ATOMcmp(btt,t,bt_nil)) {
                                cnt[h]++;
                        }
                }
        }
        BATloopFast(bn, p, q, xx) {
                int h = (int)(*(oid*) BUNhead(bn,p)) - min;
                *(int*)BUNtloc(bn, p) = cnt[h];
        }
        GDKfree(cnt);
@c

str CTcount(int *retval, int *bid,int  *eid){
	BAT *ret, *b, *e;
	BAT *bn ;
	int zero = 0, *cnt;
	BUN p, q, r;
	int xx,i,range,min,max;
	int btt;
        ptr bt_nil;


	@:getBATdescriptor(retval,bid,b,count)@
	@:chkHeader(e,CTcount@1)@
	@:getBATdescriptor(retval,eid,e,count)@
	@:chkHeader(e,CTcount@1)@
	bn = BATnew(e->htype, TYPE_int, BATcount(e));	
	btt = b->ttype;
        bt_nil = ATOMnilptr(b->ttype);

	/* init: set all sums to zero */
	bn->tsorted = bn->hsorted = 0;
	ALIGNsetH(bn, e);
        if (BAThordered(e)&1) {
                min = (int)(*(oid*)BUNhead(e, BUNfirst(e)));
                BATloopFast(e, p, q, xx) {
                        BUNfastins(bn, BUNhead(e,p), &zero);
                }
                max = (int)(*(oid*)BUNhead(e, BUNlast(e)-BUNsize(e)));
        } else {
                min = max = (int)(*(oid*)BUNhead(e, BUNfirst(e)));
                BATloopFast(e, p, q, xx) {
                        BUNfastins(bn, BUNhead(e,p), &zero);
                        i = (int)(*(oid*)BUNhead(e, p));
                        if (i < min) min = i;
                        else
                        if (i > max) max = i;
                }
        }
        range = max - min + 1;

        /* scan b, and add increment totals for true values */
        if (range > SMALL_AGGR_MAX) {
                ALGODEBUG THRprintf(GDKout, "CMDaggr_count: range(=%d) > SMALL_AGGR_MAX(=%d)  =>  large_aggr_count\n",range,SMALL_AGGR_MAX);
                @:large_aggr_count@
        } else {
                ALGODEBUG THRprintf(GDKout, "CMDaggr_count: range(=%d) <= SMALL_AGGR_MAX(=%d)  =>  small_aggr_count\n",range,SMALL_AGGR_MAX);
                @:small_aggr_count@
        }

	*retval = bn->batCacheid;
	return MAL_SUCCEED;
}

str CTsize(int *retval, int *bid,int  *eid){
	BAT *ret, *b, *e;
	BAT *bn;
	int zero = 0;
	BUN p, q, r;
	int xx;

	@:getBATdescriptor(retval,bid,b,size)@
	@:chkHeader(b,CTsize)@
	@:getBATdescriptor(retval,eid,e,size)@
	@:chkHeader(e,CTsize)@
	bn = BATnew(e->htype, TYPE_int, BATcount(e));	
	/* init: set all sums to zero */
	bn->tsorted = bn->hsorted = 0;
	ALIGNsetH(bn, e);
	BATloopFast(e, p, q, xx) {
		BUNfastins(bn, BUNhead(e,p), &zero);
	}
	/* scan b, and add increment totals for true values */
	(void) BATprepareHash(bn);
	BATloopFast(b, p, q, xx) {
		if (*(bit*) BUNtloc(b,p) == TRUE) {
			oid *h = (oid*) BUNhead(b,p);

			BUNfndOID(r, bn, h);
			if (r) {
				int *dst = (int*) BUNtloc(bn, r);
				(*dst)++;
			}
		}
	} 
	*retval = bn->batCacheid;
	return MAL_SUCCEED;
}
