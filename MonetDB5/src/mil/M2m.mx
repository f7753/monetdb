@a M.L. Kersten
@v 1.0
@* Standalone MIL parser

This program is an off-line compiler for mil programs developed on
pre-Version 5. The approach taken is to be able to compile mil
programs as they appear in the modules, without too many facilities
for the interpreter.

Input is obtained from a file argument.

The underlying parser is to be included in a Mapi-mil front-end or
the applications at a later stage.

@c
#include <gdk.h>
#define MAXSCRIPT 64
extern void showmappings();
extern int yyparse();
str	mal_script[MAXSCRIPT];

void usage(){
	printf("usage:M2m <file.mil>\n");
	exit(-1);
}
main(int argc,char ** argv)
{
	
	FILE *fd;
	int i =1,k;
	int len, totlen;
	char *ptr,*buf, fname[PATHLENGTH];
	char cwd[PATHLENGTH];

	if( argc ==1){
		usage();
	}

        if (getcwd(cwd, PATHLENGTH-1)  == NULL ){
                perror("pwd");
                printf("mil_init: could not determine current directory\n");
        }

	GDKinit(argc,argv);
	/* move back to original location */
	chdir(cwd);

        for (i = 1; i < argc; i++)
        if( argv[i][0]){
            if (argv[i][0] == '-') {
		monet_hello();
		usage();
		return;
	    }
	    for(k=0;mal_script[k]!= 0; k++) ;

            if( k< MAXSCRIPT-1){
		/* mal_script[k] = absolute_path(argv[i]);*/
		mal_script[k] = argv[i];
		mal_script[k+1]=0;
            } else
            printf("argument list too long, too many script files \n");
	}
@-
The files are processed as one big program
@c
	i=0;
	len = totlen = 8*8192;
	ptr = buf = (char *) GDKmalloc(totlen);
	for(k=0;mal_script[k]!= 0; k++) {
		sprintf(fname,"%s",mal_script[k]);
		fd = fopen(fname,"rb");
		if (fd == 0) {
			printf("mil: could not open file: %s\n", fname);
			exit (-1);
		}

		while((i+=fread(ptr, 1, len , fd)) == totlen) {
			len = totlen; totlen *= 2;
			ptr = GDKmalloc(totlen);
			memcpy(ptr, buf, len);
			GDKfree(buf);
			buf = ptr; ptr += len;
		}
		fclose(fd);
		buf[i] = 0;
	}
	mil_code_prelude();
	mil_push(buf);	/*no need to copy here */
	yyparse();
	showmappings();
}

mil_code_prelude(){
	printf("# Mil compiler Version 1.0)\n");
        printf("# Copyright (c) 1993-2002, CWI. ");
        printf("All rights reserved.\n");
	printf("\n# Predefined code segment\n");
	advice();
}
/* The compiler does not compile everything */
char *hlp[]={
"The compiler can not guarantee an accurate compilation,",
"because MIL unlike MAL is a dynamically typed language.",
"A few guidelines to maximize usefullness.",
"- make the type of variables explicit, in particular 'nil'",
"- upon advice of M2m to remap identifiers, change it in your program directly",
"- positional arguments, ie $1,$2,..., can not be compiled in isolation",
"","","Perhaps someone will develop a complete MIL interpreter",
"on top of the MAL kernel in the future",
0
};
advice(){
	int i;
	for(i=0; hlp[i]; i++) printf("#%s\n",hlp[i]);
}
