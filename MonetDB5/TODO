- add intelligent help (partial matching signatures)
- module should make exceptions thrown explicit

- DD: factor out the error handling to prepare for internationalization
- DD: strong need for partitioned tables.
- DD: mapping BATs to external sources
- we limit BAT* operation as much as possible to :void headed versions
- a generic map() operation is added to the interpreter
- all signatures should make in/out role of parameters explicit to
facilitate flow analysis
- BBP should become a fully serialized module, encapsulation with a single lock
(this calls for check for IO triggered activities inside BBP)
- All BATs should be considered private unless otherwise marked (add BATshared())
- we need a small size BAT/HEAP cache to significantly reduce cost for small queries.
- use a trashcan to reduce the cost of garbage collecting large bats
- introduce inplace algebraic variants

MIL 5
property management checked extended met hasnil? nonil?
enum is replaced by encode/decode and rest by user

MIL 4 'loss' in M5
- M2mal is only meant to enable transition between systems.
- generic [m] is depreciated and replaced by map+BAT* modules
- dynamic typing is gone (e.g. *str() )
- naming conventions get/set properties
- [ht]operation convention or operation[ht]_[ht]

MAL language issues
- the multiplex semantics in M5 is different from M4.
The role of it should be reconsidered, because it is 
an efficient implementation of a macro at language level.

- assignment of the form b:=multiplex.tactics("op",b,..) not safe
  actually reference counting BATs is not stable. 
  rethink the before/after structure for garabage collection
  and handle it explicitly in the interpreter.
- look into the nested (referenced) bat issues
- check all routines for proper match return type and actual
action.
- Modules should make the expections being thrown explicit
- Expand the property management infrastructure. tst3K serie
- Test proper declaration of variables to avoid uninitalized variabless

- consider statistics/type catalog at MAL layer only.
- derive multiplex implementations variants automatically?
- insert(b,2) should work on bat(void,int)

- a hard bug appears in the following case
  via MapiClient Tapestry_1M-2
  2nd time MapiClient tapestry_attr1 has disappeared
  Works when called directly against server
  and works when GDB is applied
- BATs entered into a box should become persistent? (tst1004,1005,1014)

- printing result tables should be improved.
- rethink position of enum types
- use a process buffer pool to avoid expensive client starts.

- implement the Box authorization scheme
- keep the list of profile filters in server and update after each resolve call

Implementation
- BAT calc module only works for aligned BATs. This is less
 powerful than Monet 4. SQL relies on it, so we have to extend
functionality
- global resource management is not ok yet, for 10M tapestry it
is about 5 times slower. It appears that it grows too slow,
spending its time on copying bats all the time.
- store also the module and function name on the MAL block symbol
table. This can reduce the number of malloc/free calls significantly.
[estimate about >15% speed] 

Optimizer
- the lifespan analyses should take care of nested blocks

API issues
- Japi should be aligned with latest Mapi 
- The java front-end terminal and profiler should be re-vived
- Multi-client (concurrent) access has not been tested yet
- roll-forward Mapi packages .php, .py, .tcl

V4 issues
- overlay V4 database with V5 session
- The group and radix modules should be brought in line with V4
- Several of the MIL scripts associated with the modules have not
  been converted yet. Reliance on scripts should be minimal

Documentation issues
- README file, document which portions are local/ opensource V4
- Monet quick reference manual update

20050418 look at exception handling. Make the call trace more explicit in terms
 of location.
20050416 reduced the cost of parsing
20050416 further limit the MAL language framework to a priory known mod.fcn
  instructions. Inheritance (and overloading) is moved to the optimizer layer.
  Expected gains, faster parsing, much less mallocs.
20050414 exception utils bijwerken
20050414 GDK uses too many BATcounts while they are stable , removed
a few from the code base.
20050302 re-enact calling the debugger from a script
20050228 The garbage control is too complicated and consumes too much power.
  before/after calls are only focussed on the first destination argument.
  the patch into the direction of symbol table lookup made it worse
  Garbage collector redone.

20050225 added statistics catalog at MAL layer only.
20041220 Split inpection module into mdb+inspect
20041216 A function may carry an address, to enable JIT
20041216 The replace/insert operations for bats arguments should set the 
  access mode themselves. 
20041212 Implementation of the first MAL C-Compiler
 C-code generator for mal blocks to speed up expensive functions
  (and multiplex routines)
20041210 The first implementation of MACRO and ORCAM algorithms
    Design a macro expansion facility (with property checks)
    Design an inversion facility (replace multiple stmt by one)
20041206 polymorphic type bindings should be allowed throughout the block
  they are replaced by concrete types upon cloning
20041120 Co-routine ('factory') support in the kernel. They 'yield'
  a result on each call and finish upon 'return'
  Factory cloning would then become an issue, they become first
  class citizens or stick to a context.
20041112 Ensured that temporary variables are properly aligned
	with their symbol table entry
20041112 atom definiton implies start of module section
20041108 introduced skip list in symbol table (2 % gain)
	 removed some resolvetype issues (3 % gain)
20041107 check the validity of constants against their type qualifier.
	the type qualifier is retained for (numeric) constants
20041107 Check the cleaned up barrier and catch control structure.
20040801 The V4 testing scheme has been activated 
20040805 The constant definitions of MIL should go to a prelude file
	and not hardwired in the const.mx
20040805 What to do with Mcreatedb and friends: not needed
	wait for Mguardian
20040804 add multiple path analysis (searchpath.mx from V4)
20040730 BAT reference counting in the face of MAL function calls is not
correct (tst220.mal and tst610.mal)
20040529 replace module and function names with entries into a system/user id table
  [expected gain 10-20% due to less mallocs of small structures]
  [only seen in very lengthy programs
200505 finalized cross-compilation issues on supported platforms
200504 copied README and HowToStart from 4.3
210803 (non)-blocked interaction from Mapi and Perl working
170803 blocked io to clients finished for MAL
170803 Incremental parsing of unfinished definitions in single-line interface
150803 Removed bugs in debugger, breakpoint command now passed correctly
150803 Roll forward of modules to 4.3.14
140803 pcl module included, need some work, i.e. library loading
140803 decimal is broken, derefStr policy issue. Dropped module, outdate
100803 Mapi package rewritten
100803 PerlDBI package
230703 mal_import, better bulk loading implemented
230703 update ascii_io module
230703 sqlserver part
220703 merge the updates on the modules since early june
220703 Pattern matching against a BAT of strings, to avoid compilation
overhead of each pattern.
200703 merge updates of bm.mx
200703 merge updates of mvc.mx
200703 merge updates of logger.mx
200703 copy updates on sql/common to sql/parser
200703 merge updates of statement.mx
200703 move mkey module to V5
+ move aggrX3 operations into the group.mx module, too much work now
+ add comment phrase to Module as well
+ implement the stkTrace command
+ Mclient should be reinstalled to provide access to any scenario
+ Inclusion of the x100 instruction set, first version done
+ An XML manual generation routine should be implemented
+ Mclient should properly initialize a session
+ Name/comment cleansing over all modules/functions is needed.
