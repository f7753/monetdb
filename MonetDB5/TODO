MAL language issues
- look into the nested (referenced) bat issues
- see if it makes sense have in/out variables mentioned twice 
  in an assignment statement to ease analysis
- check all routines for proper match return type and actual
action.
- Modules should make the expections being thrown explicit
- Expand the property management infrastructure. tst3K serie
- Co-routine ('factory') support in the kernel. They 'yield'
  a result on each call and finish upon 'return'
  Factory cloning would then become an issue, they become first
  class citizens or stick to a context.

- consider type catalog at mal layer only.
- derive multiplex implementations variants automatically?
- C-code generator for mal blocks to speed up expensive functions
  (and multiplex routines)
- insert(b,2) should work on bat(void,int)

- a hard bug appears in the following case
  via MapiClient Tapestry_1M-2
  2nd time MapiClient tapestry_attr1 has disappeared
  Works when called directly against server
  and works when GDB is applied
- reference counting BATs through assignments should not be counted.
  a BAT disappears when the first binding variable ceases to exist.
- BATs entered into a box should become persistent? (tst1004,1005,1014)

- Realize mal.include call as a preprocessor step
- Design a macro expansion facility (with property checks)

- printing result tables should be improved.
- rethink position of enum types
- use a process buffer pool to avoid expensive client starts.

- implement the Box authorization scheme
- keep the list of profile filters in server and update after each resolve call

Implementation
- global resource management is not ok yet, for 10M tapestry it
is about 5 times slower. It appears that it grows too slow,
spending its time on copying bats all the time.
- store also the module and function name on the MAL block symbol
table. This can reduce the number of malloc/free calls significantly.
[estimate about >15% speed] 

- The garbage control is too complicated and consumes too much power.
  before/after calls are only focussed on the first destination argument.
  the patch into the direction of symbol table lookup made it worse

API issues
- Japi should be aligned with latest Mapi 
- The java front-end terminal and profiler should be re-vived
- Multi-client (concurrent) access has not been tested yet
- roll-forward Mapi packages .php, .py, .tcl


V4 issues
- overlay V4 database with V5 session
- The group and radix modules should be brought in line with V4
- Several of the MIL scripts associated with the modules have not
  been converted yet. Reliance on scripts should be minimal

Documentation issues
- README file, document which portions are local/ opensource V4
- Monet quick reference manual update

20041112 Ensured that temporary variables are properly aligned
	with their symbol table entry
20041112 atom definiton implies start of module section
20041108 introduced skip list in symbol table (2 % gain)
	 removed some resolvetype issues (3 % gain)
20041107 check the validity of constants against their type qualifier.
	the type qualifier is retained for (numeric) constants
20041107 Check the cleaned up barrier and catch control structure.
20040801 The V4 testing scheme has been activated 
20040805 The constant definitions of MIL should go to a prelude file
	and not hardwired in the const.mx
20040805 What to do with Mcreatedb and friends: not needed
	wait for Mguardian
20040804 add multiple path analysis (searchpath.mx from V4)
20040730 BAT reference counting in the face of MAL function calls is not
correct (tst220.mal and tst610.mal)
20040529 replace module and function names with entries into a system/user id table
  [expected gain 10-20% due to less mallocs of small structures]
  [only seen in very lengthy programs
200505 finalized cross-compilation issues on supported platforms
200504 copied README and HowToStart from 4.3
210803 (non)-blocked interaction from Mapi and Perl working
170803 blocked io to clients finished for MAL
170803 Incremental parsing of unfinished definitions in single-line interface
150803 Removed bugs in debugger, breakpoint command now passed correctly
150803 Roll forward of modules to 4.3.14
140803 pcl module included, need some work, i.e. library loading
140803 decimal is broken, derefStr policy issue. Dropped module, outdate
100803 Mapi package rewritten
100803 PerlDBI package
230703 mal_import, better bulk loading implemented
230703 update ascii_io module
230703 sqlserver part
220703 merge the updates on the modules since early june
220703 Pattern matching against a BAT of strings, to avoid compilation
overhead of each pattern.
200703 merge updates of bm.mx
200703 merge updates of mvc.mx
200703 merge updates of logger.mx
200703 copy updates on sql/common to sql/parser
200703 merge updates of statement.mx
200703 move mkey module to V5
+ move aggrX3 operations into the group.mx module, too much work now
+ add comment phrase to Module as well
+ implement the stkTrace command
+ Mclient should be reinstalled to provide access to any scenario
+ Inclusion of the x100 instruction set, first version done
+ An XML manual generation routine should be implemented
+ Mclient should properly initialize a session
+ Name/comment cleansing over all modules/functions is needed.
