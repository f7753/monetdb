This document will help you compile and install the MonetDB SQL front end
"MonetDB/SQL".

This document assumes that you have installed MonetDB on a Unix system
(e.g., Linux, IRIX, Solaris, AIX, MacOs X/Darwin, or CYGWIN), and that
you are planning to compile and install the MonetDB SQL front end on 
the same system.


Prerequisites:
==============

CVS
	You need to have a working CVS.  For instructions, see
	http://sourceforge.net/docman/?group_id=1 and look under the
	heading CVS Instructions.

Python
	MonetDB/SQL uses Python (version 2.0.0 or better) during
	configuration of the software.  See http://www.python.org/ for
	more information.

autoconf/automake/libtool 
	MonetDB/SQL uses GNU autoconf (>= 2.53), automake (>= 1.4), and
	libtool (>= 1.4) during configuration of the software.  See
	http://www.gnu.org/software/autoconf/,
	http://www.gnu.org/software/automake/, and
	http://www.gnu.org/software/libtool/
	for more information.  Libtool is also used during the build.

standard software development tools
	To compile MonetDB/SQL, you also need to have a the following 
	standard software development tools installed and ready for use
	on you system:
	 - a C/C++ compiler (e.g., GNU's gcc/g++)
	 - a lexical analyzer generator (e.g., "lex" or "flex")
	 - a parser generator (e.g., "yacc" or "bison")
	 - GNU make ("gmake") (native make's on, e.g., IRIX and Solaris
	   usually don't work)

dlcompat (MacOS X/Darwin, only)
	MacOS X/Darwin itself does not support dlopen, however, there's
	a third-party library called dlcompat from Fink that provides
	the respective functionality.  MonetDB/SQL requires dlcompat to be
	installed on MacOS X/Darwin.
	(http://fink.sourceforge.net/pdb/package.php/dlcompat)

disk space
	After downloading, MonetDB/SQL takes up about 75 MB of disk space;
	compilation adds another 13 MB.  Testing takes about 155 MB, and
	the installation about 3 MB (not including any databases).


Getting the Software:
=====================

This command should be done once.  It records a password on the local
machine to be used for all subsequent CVS accesses with this server.

 cvs -d:pserver:anonymous@cvs.monetdb.sourceforge.net:/cvsroot/monetdb login

Just type RETURN when asked for the password.

Then get the software by using the command:

 cvs -d:pserver:anonymous@cvs.monetdb.sourceforge.net:/cvsroot/monetdb checkout sql

This will create a directory 'sql' in your current working directory.

Also see http://sourceforge.net/cvs/?group_id=56967 for more
information.


Configure and Make:
===================

In the top-level directory of 'sql' type the command:

 ./bootstrap

If it responds with an error message, it means the MonetDB server 
could not be found, or less likely, you have not installed 
MonetDB properly.

Then in any directory (a new empty directory or in the sql top-level
directory) give the command

 .../configure [<options>]

where ... is replaced with the (absolute or relative) path to the
sql top-level directory.
The directory where you execute configure is the place where all 
intermediate source and object files are generated during compilation 
via "make".

By default, MonetDB/SQL is eventually (i.e., during "make install"; see
below) installed to /usr/local/.  To choose another target directory, 
you need to call
 .../configure --prefix=<prefixdir> [<options>]
Usually, it is most convenient to the directory where the MonetDB server is
install also as target directory for installing MonetDB/SQL.
A sample of other useful configure options is:
  --enable-debug          enable full debugging default=off
  --enable-optimize       enable extra optimization default=off
  --enable-warning        enable extended compiler warnings default=off
  --enable-profile        enable profiling default=off
  --enable-instrument     enable instrument default=off
  --with-gcc=<compiler>   which C compiler to use
                          ("yes" = gcc/g++, 
                           "no"  = system-specific C/C++ compiler,
                           <other-compiler-name>)
  --with-gxx=<compiler>   which C++ compiler to use
  --with-bits=<#bits>     specify number of bits (32 or 64)
Use the --help option of configure to find out more about configure
options.

In the same directory (where you called configure) give the command

 make

to compile the source code.

On my lightly loaded, dual 1.4 GHz Athlon Linux system, configure takes
about 13 seconds, and make about one minute.


Testing the Build:
==================

If make went successfully, you can try

 make check

This will do a lot of tests, some are unfortunately still expected to
fail, but most should go successfully.  At the end of the output there
is a reference to an HTML file which is created by the test process and
shows the test results.  An explanation of the test results can be found
in XXX--to be filled in.

Testing takes about 155 MB of disk space in the build directory.

Running the tests takes about 20 minutes on my system.


Installing:
===========

Give the command

 make install

By default (if no --prefix option was given to configure above), this
will install in /usr/local/.  Make sure you have appropriate privileges.


Testing the Installation:
=========================

Testing the MonetDB SQL front end is preferably done before you install the
components in their final location.  If you install the code base in its
default location, you can test the system as follows.
In the sql top-level directory issue the command

 Mtest_sql  -r

It will run a large number of SQL tests to assure correct installation.

If, however, you have installed the code in <prefixdir> you need to type
more.  Let ... denote the absolute or relative path to the sql top-level
directory.  Then, the test runs as follows from the sql top-level directory:

 Mtest.py --TSTSRCBASE=... --TSTBLDBASE=.../Linux --TSTTRGBASE=<prefixdir> -r

Make sure that /usr/local/bin (respectively <prefixdir>/bin, where
<prefixdir> is the directory you specified with --prefix when calling
configure) is in your PATH.

You need write permissions on part of the installation directory for
this command: it will create subdirectories var/dbfarm and Tests.


Documentation:
==============

Some initial documention of the MonetDB SQL front end is available in
SQLfeatures.tex and SQLsessionDemo.


Troubleshooting:
================

Bootstrap fails if any of the requisite programs can not be found or
is an incompatible version.

Bootstrap adds files to the source directory, so it must have write
permissions.

Configure will fail if certain essential programs can't be found or
certain essential tasks (such as compiling a C program) can't be
executed.  The problem will usually be clear from the error message.

E.g., if configure cannot find package XYZ, it is either not installed
on your machine, or it is not installed in places that configure
usually searches (i.e., /usr, /usr/local).  In the first case, you need
to install package XYZ before you can configure, make, and install
MonetDB.  In the latter case, you need to tell configure via
"--with-XYZ=<DIR>" where to find packages XYZ on your machine. 
configure then looks for the respective header files in <DIR>/include,
and for the respective libraries in <DIR>/lib.

