RELEASE NOTES
MonetDB JDBC driver version 0.4 beta
Fabian Groffen <Fabian.Groffen@cwi.nl>

Release date: 2004-04-18

This JDBC driver for MonetDB is a thirth implementation of a JDBC driver
for the Monet Main Memory Database. See http://monetdb.cwi.nl/ for more info
regarding this database.

This release is far from a complete implementation of the JDBC interface. This
implementation also doesn't follow the JDBC specification at all points. Below
the current state of this driver is listed. Please read before you decide to use
this driver.

- Currently implemented are:
  * java.sql.Driver interface
    . all methods implemented
  * java.sql.Connection interface
    . clearWarnings()
    . close()
    . commit()
    . createStatement()
    . createStatement(int resultSetType, int resultSetConcurrency)
      (check for warnings after using this one!!!)
    . getAutoCommit()
	. getTypeMap()
	. getWarnings()
	. isClosed()
	. releaseSavepoint(java.sql.Savepoint)
    . rollback()
	. rollback(java.sql.Savepoint)
    . setAutoCommit(boolean autoCommit)
	. setSavepoint()
	. setSavepoint(java.lang.String)
	. setTypeMap()
  * java.sql.Statement interface
    . close()
	. execute()
    . executeQuery(java.lang.String sql)
    . executeUpdate(java.lang.String sql)
      WARNING, does NOT return affected rows!!!
    . getConnection()
    . getFetchDirection()
    . getFetchSize()
    . getMaxRows()
	. getResultSet()
	. getResultSetConcurrency()
    . getResultSetType()
	. getUpdateCount()
    . setFetchDirection(int direction)
    . setFetchSize(int rows)
    . setMaxRows(int max)
  * java.sql.ResultSet interface
    . absolute()
	. afterLast()
	. beforeFirst()
    . close()
    . findColumn(java.lang.String columnName)
	. first()
    . getBoolean(int columnIndex)
    . getBoolean(java.lang.String columnName)
	. getDate(columnIndex)
	. getDate(columnName)
	. getDate(columnIndex, cal)
	. getDate(columnName, cal)
    . getDouble(int columnIndex)
    . getDouble(java.lang.String columnName)
    . getFetchSize()
    . getFloat(int columnIndex)
    . getFloat(java.lang.String columnName)
    . getInt(int columnIndex)
    . getInt(java.lang.String columnName)
    . getLong(int columnIndex)
    . getLong(java.lang.String columnName)
    . getMetaData()
	. getObject(int columnIndex)
	. getObject(java.lang.String columnName)
	. getObject(int columnIndex, java.util.Map map)
	. getObject(java.lang.String columnName, java.util.Map map)
    . getShort(int columnIndex)
    . getShort(java.lang.String columnName)
    . getStatement()
    . getString(int columnIndex)
    . getString(java.lang.String columnName)
	. getTime(columnIndex)
	. getTime(columnName)
	. getTime(columnIndex, cal)
	. getTime(columnName, cal)
	. getTimestamp(columnIndex)
	. getTimestamp(columnName)
	. getTimestamp(columnIndex, cal)
	. getTimestamp(columnName, cal)
	. isAfterLast()
	. isBeforeFirst()
	. isFirst()
	. isLast()
	. last()
    . next()
	. previous()
	. relative()
    . wasNull()
  * java.sql.ResultSetMetaData interface
    . getColumnCount()
    . isCaseSensitive(int column)
    . getColumnLabel(int column)
    . getColumnName(int column)
    . getColumnType(int column)
    . getColumnTypeName(int column)
  * java.sql.DatabaseMetaData interface
    . all methods implemented, correctness not guaranteed :)
  * java.sql.SavePoint interface
    . all methods implemented
- Note that Statement's executeUpdate is implemented via executeQuery and does
  NOT return the number of affected rows.
- Statement's execute, executeUpdate and executeQuery do not support multiline
  queries. Newlines in strings (quoted) are allowed, but newlines anywhere else
  lead to parser errors.
- The getObject methods do not return all types correct, and currently ignore
  any given type map.
- Auto-commit behaviour is defined by the server which handles the auto-commit.
- The connection with the database server currently knows two modes: line-mode
  and block-mode. The first is the default due to its known stability, the
  latter is still tested, although it seems to work correctly. The major
  advantage of using block-mode over line-mode is that multi-line queries are
  allowed. To enable block-mode one can call MonetDriver.setBlockMode(true)
  before creating a Connection, or by creating a build.local.properties with
  JDBC_DEF_BLOCKMODE=true in it. The latter method changes the default method
  for the driver, and requires a rebuild of the driver using ant. This is
  disencouraged for non-developers.
