@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at 
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@' 
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@' 
@' The Original Code is the Monet Database System.
@' 
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2002 CWI.  
@' All Rights Reserved.
@' 
@' Contributor(s):
@' 		Martin Kersten <Martin.Kersten@cwi.nl>
@' 		Niels Nes <Niels.Nes@cwi.nl>
@' 		Stefan Manegold <Stefan.Manegold@cwi.nl>
@' 		Peter Boncz <Peter.Boncz@cwi.nl>

@f sql_context
@a N.J. Nes
@* 

@* Context code

@h
#ifndef _SQL_CONTEXT_H_
#define _SQL_CONTEXT_H_

#include <sql_mem.h>
#include <stream.h>
#include "sql_statement.h"
#include "sql_qc.h"
#include "sql_mvc.h"

#define ERRSIZE 1024

typedef struct context {
	int cur;
	int prev;	/* previous token lr(1) is to restrictive for SQL */

	int yyval;
	char *yytext;
	int yylen;
	int yysize;
	int debug;
	int cnt;

	char *sql;
	int sqllen;
	int sqlsize;
	int key;

	int 	lineno;
	char*	buf;

	char 	errstr[ERRSIZE];
	struct  mvc *mvc;
	struct  qc  *qc;

	char 	auth;	/* authorization */
	int 	authid; /* authorization id */

	list 	*params;
	list 	*args;
	struct symbol *sym;
} context;

sql_export context *sql_create_context(int debug, int cache, mvc *m);
sql_export void sql_destroy_context(context * c);

sql_export void cmd_init(context * c);
sql_export void cmd_add_token(context * c, char *token);
sql_export void cmd_add_string(context * c, char *str);

sql_export struct stmt *sql_symbol2stmt( context *c );

sql_export int sqlcleanup( context *c, char *cmd, int err);


#endif	/* _SQL_CONTEXT_H_ */

@c
#include "sql_context.h"
#include "sql_symbol.h"
#include "sql_scan.h"
#include "sql_semantic.h"
#include "sql_optimize.h"
#include "sql_rel2bin.h"
#include "sql_scope.h"
#include "sql_qc.h"
#include "sql_backend.h"

stmt *sql_symbol2stmt( context *c ){
	stmt *s = semantic(c, c->sym);
	if (s){
		stmt *opt = optimize(c, s);
		stmt_destroy(s);
		s = rel2bin(c, opt);
		stmt_destroy(opt);
	}
	return s;
}

int sqlcleanup( context *c, char *cmd, int err)
{
	sql_destroy_params(c);
	sql_destroy_args(c);
	if (cmd){
		/* beware to use free instead of _DELETE
 	 	 * as the stream library is build without 
	 	 * libbat ie. it cannot use gdkmalloc 
	 	 * can be used */
	        free(cmd);
	}
	if (c->sym) {
		symbol_destroy(c->sym);
		c->sym = NULL;
	}
	return err;
}

context *sql_create_context(int debug, int cache, mvc * mvc)
{
	context *c = NEW(context); 

	memset(c, 0, sizeof(context));
	c->cur = ' ';
	c->buf = NULL;

	c->debug = debug;

	c->cnt = 0;
	c->lineno = 1;
	c->sym = NULL;
	c->qc = NULL;
	if (cache)
		c->qc = qc_create();
	c->mvc = mvc;
	c->errstr[0] = '\0';

	c->yyval = 0;
	c->yytext = NEW_ARRAY(char, BUFSIZ);
	c->yytext[0] = 0;
	c->yylen = 0;
	c->yysize = BUFSIZ;

	if (c->sql)
		_DELETE(c->sql);
	c->sql = NEW_ARRAY(char, BUFSIZ);
	c->sqlsize = BUFSIZ;
	c->sql[0] = '\0';

	cmd_init(c);
	return c;
}

void sql_destroy_context(context * c)
{
	c->mvc = NULL;

	if (c->qc) qc_destroy(c->qc); 
	c->qc = NULL;

	if (c->sql != NULL)
		_DELETE(c->sql);
	c->sql = NULL;
	_DELETE(c->yytext);
	_DELETE(c);
}

void cmd_init(context * c)
{
	if (c->sql && c->debug & D__SQL)
		fprintf(stderr, "%s\n", c->sql);
	c->sql[0] = '\0';
	c->sqllen = 1;

	c->errstr[0] = '\0';
	c->key = 0;
}

/* add token + widthspace */
void cmd_add_token(context * c, char *token)
{
	int len = strlen(token);
	if ((c->sqllen + len + 1) > c->sqlsize) {
		while( (c->sqllen + len + 1) > c->sqlsize)
			c->sqlsize *= 2;
		c->sql = RENEW_ARRAY(char, c->sql, c->sqlsize);
	}
	strncpy(c->sql + c->sqllen - 1, token, len);
	c->sqllen += len + 1;
	c->sql[c->sqllen - 2] = ' ';
	c->sql[c->sqllen - 1] = '\0';
}

/* add quoted string + widthspace */
void cmd_add_string(context * c, char *str)
{
	int len = strlen(str);
	if ((c->sqllen + len + 3) > c->sqlsize) {
		while( (c->sqllen + len + 3) > c->sqlsize)
			c->sqlsize *= 2;
		c->sql = RENEW_ARRAY(char, c->sql, c->sqlsize);
	}
	c->sql[c->sqllen - 1] = '\'';
	strncpy(c->sql + c->sqllen, str, len);
	c->sqllen += len + 3;
	c->sql[c->sqllen - 3] = '\'';
	c->sql[c->sqllen - 2] = ' ';
	c->sql[c->sqllen - 1] = '\0';
}
