@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at 
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@' 
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@' 
@' The Original Code is the Monet Database System.
@' 
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2002 CWI.  
@' All Rights Reserved.
@' 
@' Contributor(s):
@' 		Martin Kersten <Martin.Kersten@cwi.nl>
@' 		Niels Nes <Niels.Nes@cwi.nl>
@' 		Stefan Manegold <Stefan.Manegold@cwi.nl>
@' 		Peter Boncz <Peter.Boncz@cwi.nl>

@f sql_atom
@a N.J. Nes
@* 

@h
#ifndef _SQL_ATOM_H_
#define _SQL_ATOM_H_

#include <mem.h>
#include <sql_types.h>

typedef enum atomtype {
	string_value,
	int_value,
	float_value,
	general_value
} atomtype;

typedef struct atom {
	sql_subtype *tpe;
	atomtype type;
	union {
		lng ival;
		char *sval;
		double dval;
	} data;
} atom;

extern atom *atom_int(sql_subtype * tpe, lng val);
extern atom *atom_string(sql_subtype * tpe, char *val);
extern atom *atom_float(sql_subtype * tpe, double val);
extern atom *atom_general(sql_subtype * tpe, char *val);

/* duplicate atom */
extern atom *atom_dup(atom * a);

extern char *atom2string(atom * a);
sql_export sql_subtype *atom_type(atom * a);

extern void atom_destroy(atom * a);
#endif	/* _SQL_ATOM_H_ */

@c
#include "sql_atom.h"

static int atom_debug = 0;

atom *atom_int(sql_subtype * tpe, lng val)
{
	atom *a = NEW(atom);
	a->tpe = tpe;
	a->data.ival = val;
	a->type = int_value;
	if (atom_debug)
		fprintf(stderr, "atom_int(%s,%ld)\n", tpe->type->sqlname, val);
	return a;
}

atom *atom_string(sql_subtype * tpe, char *val)
{
	atom *a = NEW(atom);
	a->tpe = tpe;
	a->data.sval = val;
	a->type = string_value;
	if (atom_debug)
		fprintf(stderr, "atom_string(%s,%s)\n", tpe->type->sqlname,val);
	return a;
}

atom *atom_float(sql_subtype * tpe, double val)
{
	atom *a = NEW(atom);
	a->tpe = tpe;
	a->data.dval = val;
	a->type = float_value;
	if (atom_debug)
		fprintf(stderr, "atom_float(%s,%f)\n", tpe->type->sqlname,val);
	return a;
}

atom *atom_general(sql_subtype * tpe, char *val)
{
	atom *a = NEW(atom);
	a->tpe = tpe;
	a->data.sval = val;
	a->type = general_value;
	if (atom_debug)
		fprintf(stderr, "atom_general(%s,%s)\n", tpe->type->sqlname, val);
	return a;
}

void atom_destroy(atom * a)
{
	if (a->type == string_value || a->type == general_value)
		_DELETE(a->data.sval);
	if (a->tpe) 
		sql_subtype_destroy(a->tpe);
	_DELETE(a);
}

char *atom2string(atom * a)
{
	char buf[1024];
	switch (a->type) {
	case int_value:
		sprintf(buf, "%d", a->data.ival);
		break;
	case string_value:
		sprintf(buf, "%s", a->data.sval);
		break;
	case float_value:
		sprintf(buf, "%f", a->data.dval);
		break;
	case general_value:
		if (a->data.sval)
			sprintf(buf, "%s %s", a->tpe->type->name,
				a->data.sval);
		else
			sprintf(buf, "NULL");
		break;
	}
	return _strdup(buf);
}

sql_subtype *atom_type(atom * a)
{
	return a->tpe;
}

atom *atom_dup(atom * a)
{
	atom *r = NEW(atom);
	*r = *a;
	r->tpe = sql_dup_subtype(a->tpe);
	if (a->type == string_value || a->type == general_value)
		r->data.sval = _strdup(a->data.sval);
	return r;
}
