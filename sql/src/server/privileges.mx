@f privileges
@a N.J. Nes
@* Privileges

Sql has a simple access control schema. There are two types of authorization,
users and roles. Each user may be part of several roles.
For each authorization identity a set of privileges is administrated.
These are administrated on multiple levels where lower levels (ie.
table or column level) overwrite privileges on higher levels.

@h
/* privileges */

#define 

int sql_privileges( int authid, int globalprivs );
int sql_table_privileges( int authid, int tableid, int globalprivs );
int sql_column_privileges( int authid, int columnid, int tableprivs );

@c
#include <gdk.h>

static BAT *desc(char *bname)
{
	BAT *res = NULL;
	bat bid = BBPindex(bname);
	if (bid){
		BBPfix(bid);
		res = BATdescriptor(bid);
	}
	assert(res);
	return res;
}

static INLINE
ptr bun_find(BAT *b, ptr v){
	BUN p = BUNfnd(b,v);
	if (p)
		return BUNtail(b,p);
	return NULL;
}

int sql_privileges( int authid ){
	BAT *auths_id = desc("auths_id"); 
	BAT *auths_priv = desc("auths_privileges");
	ptr lid = bun_find(BATmirror(auths_id), &authid);
	int res = *(int*)bun_find(auths_priv, lid);
	
	BBPunfix(auths_id->batCacheid);
	BBPunfix(auths_priv->batCacheid);
	return res;
}

int sql_table_privileges( int authid, int tableid, int gprivs ){
	BAT *tp_table_id = desc("table_privileges_table_id"); 
	BAT *tp_auth_id = desc("table_privileges_auth_id");
	BAT *tp_priv = desc("table_privileges_privileges");
	BAT *tables = BATselect(tp_table_id, &tableid, &tableid );
	BAT *auths = BATsemijoin(tp_auth_id, tables);
	ptr lid = bun_find(BATmirror(auths), &authid);
	int res = *(int*)bun_find(tp_priv, lid);
	
	BBPunfix(tables->batCacheid);
	BBPunfix(auths->batCacheid);

	BBPunfix(tp_table_id->batCacheid);
	BBPunfix(tp_auth_id->batCacheid);
	BBPunfix(tp_priv->batCacheid);
	return gprivs | res;
}

int sql_column_privileges( int authid, int columnid, int tprivs ){
	BAT *tp_column_id = desc("column_privileges_column_id"); 
	BAT *tp_auth_id = desc("column_privileges_auth_id");
	BAT *tp_priv = desc("column_privileges_privileges");
	BAT *columns = BATselect(tp_column_id, &columnid, &columnid );
	BAT *auths = BATsemijoin(tp_auth_id, columns);
	ptr lid = bun_find(BATmirror(auths), &authid);
	int res = *(int*)bun_find(tp_priv, lid);
	
	BBPunfix(columns->batCacheid);
	BBPunfix(auths->batCacheid);

	BBPunfix(tp_column_id->batCacheid);
	BBPunfix(tp_auth_id->batCacheid);
	BBPunfix(tp_priv->batCacheid);
	return tprivs | res;
}
