@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@' 
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@' 
@' The Original Code is the Monet Database System.
@' 
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2004 CWI.
@' All Rights Reserved.
@' 
@' Contributor(s):
@' 		Martin Kersten <Martin.Kersten@cwi.nl>
@' 		Peter Boncz <Peter.Boncz@cwi.nl>
@' 		Niels Nes <Niels.Nes@cwi.nl>
@' 		Stefan Manegold  <Stefan.Manegold@cwi.nl>

@f sql_backend
@a N.J. Nes
@* 

@h
#ifndef _SQL_BACKEND_H_
#define _SQL_BACKEND_H_

#include "sql_mem.h"

typedef void *backend_code;
typedef int backend_stack;

typedef void (*freestack_fptr)( backend_stack stk );
typedef void (*freecode_fptr)( backend_code code, backend_stack stk, int nr );
typedef void (*interpret_fptr)( backend_stack stk, char *code );
	
sql_export void backend_init( freestack_fptr fstack, freecode_fptr fcode, 
		   interpret_fptr finterpret );
sql_export void backend_freestack( backend_stack stk );
sql_export void backend_freecode( backend_code code, backend_stack stk, int nr);
sql_export void backend_interpret( backend_stack stk, char *code);

#endif /* _SQL_BACKEND_H_ */
@c

#include "sql_backend.h"

static freestack_fptr _fstack = NULL;
static freecode_fptr  _fcode = NULL;
static interpret_fptr  _finterpret = NULL;

void backend_init( freestack_fptr fstack, freecode_fptr fcode, 
		   interpret_fptr finterpret )
{
	_fstack = fstack;
	_fcode = fcode;
	_finterpret = finterpret;
}

void backend_freestack( backend_stack stk )
{
	_fstack(stk);
}

void backend_freecode( backend_code code, backend_stack stk, int nr )
{
	_fcode(code, stk, nr);
}

void backend_interpret( backend_stack stk, char *code )
{
	_finterpret(stk, code);
}
