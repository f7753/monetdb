module(str);

proc catalog_bat( str name, int tt ) := {
	if (view_bbp_name.reverse.exist(name)){
		return bat(name);
	}
	var b := new(oid,tt,1000);
	b.persists(true);
	b.rename(name);
	return b;
}

catalog_bat("schema_id", oid);
catalog_bat("schema_name", str);
catalog_bat("schema_auth", str);

if (schema_id.count() < 1){
	var s := oid(schema_id.count());
	schema_id.insert(s,oid(1));
	schema_name.insert(s,"default-schema");
	schema_auth.insert(s,"default-user");
}

b := catalog_bat("table_id", oid);
b.reverse.accbuild(hash);
b := catalog_bat("table_name", str);
b.reverse.accbuild(hash);
catalog_bat("table_temp", bit);
catalog_bat("table_schema", oid);
catalog_bat("table_query", str);

b := catalog_bat("column_id", oid);
b.reverse.accbuild(hash);
b := catalog_bat("column_name", str);
b.reverse.accbuild(hash);
catalog_bat("column_type", str);
catalog_bat("column_table", oid);
catalog_bat("column_default", str);
catalog_bat("column_null", bit);
catalog_bat("column_bat", bat);
catalog_bat("column_number", int);

catalog_bat("type_sql", str);
catalog_bat("type_db", str);
catalog_bat("type_module", str);
catalog_bat("type_cast", str);

proc new_type( str sqlname, str nme, str downcast, str mod ) := {
	var id := oid(type_sql.count());
	type_sql.insert(id, sqlname);
	type_db.insert(id, nme);
	type_cast.insert(id, downcast);
	type_module.insert(id, mod);
}

proc resolve_column( column ) := {
	var cid := column_id.reverse.find(oid(column));
	return column_bat.find(cid);
}

var numerical := new(str,str);
numerical.insert("NUMERIC", "int");
numerical.insert("DECIMAL", "int");
numerical.insert("INTEGER", "int");
numerical.insert("SMALLINT", "int");
numerical.insert("FLOAT", "flt");
numerical.insert("REAL", "flt");
numerical.insert("DOUBLE", "dbl");

var strings := new(str,str);
strings.insert("VARCHAR(1)", "chr");
strings.insert("CHARACTER", "str");
strings.insert("VARCHAR", "str");
strings.insert("STRING", "str");

if (type_sql.count() <= 0){
	new_type( "OID", "oid", "", "" );

	new_type( "BOOL", "bit", "", "" );

	new_type( "VARCHAR(1)", "chr", "", "" );
	new_type( "CHARACTER", "str", "VARCHAR(1)", "" );
	new_type( "VARCHAR", "str", "CHARACTER", "" );
	new_type( "STRING", "str", "VARCHAR", "" );
	
	new_type( "NUMERIC", "int", "STRING", "" );
	new_type( "DECIMAL", "int", "NUMERIC", "" );
	new_type( "INTEGER", "int", "DECIMAL", "" );
	new_type( "SMALLINT", "int", "INTEGER", "" );

	new_type( "FLOAT", "flt", "INTEGER", "" );
	new_type( "REAL", "flt", "FLOAT", "" );
	new_type( "DOUBLE", "dbl", "REAL", "" );

	new_type( "MONTH_INTERVAL", "int", "INTEGER", "monettime" );
	new_type( "SEC_INTERVAL", "int", "INTEGER", "monettime" );
	new_type( "DATE", "date", "STRING", "monettime" );
	new_type( "TIME", "str", "STRING", "monettime" );
	new_type( "TIMESTAMP", "str", "STRING", "monettime" );
}
	
catalog_bat("sql_aggr_name", str);
catalog_bat("sql_aggr_imp", str);
catalog_bat("sql_aggr_module", str);
catalog_bat("sql_aggr_type", str);
catalog_bat("sql_aggr_result", str);

proc new_aggr( str name, str imp, str mod, str tpe, str res ) := {
	var id := oid(sql_aggr_name.count());
	sql_aggr_name.insert(id, name);
	sql_aggr_imp.insert(id, imp);
	sql_aggr_module.insert(id, mod );
	sql_aggr_type.insert(id, tpe );
	sql_aggr_result.insert(id, res );
}

if (sql_aggr_name.count() <= 0){
	type_sql@batloop(){ new_aggr( "min", "min", "", $t, $t ); }
	type_sql@batloop(){ new_aggr( "max", "max", "", $t, $t ); }
	type_sql@batloop(){ new_aggr( "sum", "sum", "", $t, $t ); }
	type_sql@batloop(){ new_aggr( "avg", "avg", "", $t, $t ); }
	new_aggr( "count", "count", "", "", "INTEGER" ); 
}

catalog_bat("sql_func_name", str);
catalog_bat("sql_func_imp", str);
catalog_bat("sql_func_module", str);
catalog_bat("sql_func_type1", str);
catalog_bat("sql_func_type2", str);
catalog_bat("sql_func_type3", str);
catalog_bat("sql_func_result", str);

proc new_func( str name, str imp, str mod, str tpe1, str tpe2, str tpe3, str outtype ):= {
	var id := oid(sql_func_name.count());
	sql_func_name.insert(id, name);
	sql_func_imp.insert(id, imp);
	sql_func_module.insert(id, mod);
	sql_func_type1.insert(id, tpe1);
	sql_func_type2.insert(id, tpe2);
	sql_func_type3.insert(id, tpe3);
	sql_func_result.insert(id, outtype);
}

if (sql_func_name.count() <= 0){
	numerical@batloop(){ new_func( "sub", "-", "", $h, $h, "", $h ); }
	numerical@batloop(){ new_func( "add", "+", "", $h, $h, "", $h ); }
	numerical@batloop(){ new_func( "mul", "*", "", $h, $h, "", $h ); }
	numerical@batloop(){ new_func( "div", "/", "", $h, $h, "", $h ); }

	numerical@batloop(){ new_func( "neg", "-", "", $h, "", "", $h ); }
	numerical@batloop(){ new_func( "pos", "+", "", $h, "", "", $h ); }

	numerical@batloop(){ 
		var hd := $h; 
		numerical@batloop(){ 
			if ($h != hd){
				new_func( "convert", $t, "", hd, "", "", $h );
			}
		}
	}

	strings@batloop(){ 
		var hd := $h; 
		strings@batloop(){ 
			if ($h != hd){
				new_func( "convert", $t, "", hd, "", "", $h );
			}
		}
	}
	strings@batloop(){ 
		var hd := $h; 
		numerical@batloop(){ 
			new_func( "convert", $t, "", hd, "", "", $h );
		}
	}

	var floats := numerical.select("dbl").union(numerical.select("flt"));
	floats@batloop(){ 
		new_func( "floor", "floor", "mmath", $h, "", "", $h ); 
	}

	new_func( "sub", "date_sub_sec_interval", "monettime", "DATE", "SEC_INTERVAL", "", "DATE");
	new_func( "sub", "date_sub_month_interval", "monettime", "DATE", "MONTH_INTERVAL", "", "DATE");

	new_func( "add", "date_add_sec_interval", "monettime", "DATE", "SEC_INTERVAL", "", "DATE");
	new_func( "add", "addmonths", "monettime", "DATE", "MONTH_INTERVAL", "", "DATE");

	new_func( ">", ">", "monettime", "DATE", "DATE", "", "BOOL");
	new_func( "<", "<", "monettime", "DATE", "DATE", "", "BOOL");

	new_func( "year", "year", "monetdate", "DATE", "", "", "INTEGER");
	new_func( "month", "month", "monetdate", "DATE", "", "", "INTEGER");

	new_func( "substring", "string", "", "STRING", "INTEGER", "INTEGER", "STRING");
	new_func( "strconcat", "+", "", "STRING", "STRING", "", "STRING");
	new_func( "substring", "string", "", "VARCHAR", "INTEGER", "INTEGER", "VARCHAR");
	new_func( "strconcat", "+", "", "VARCHAR", "VARCHAR", "", "VARCHAR");

}


commit();
