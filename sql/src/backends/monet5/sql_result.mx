@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2005 CWI.
@' All Rights Reserved.

@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the Monet Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2005 CWI.
@' All Rights Reserved.

@f sql_result
@a N.J. Nes
@*

@h
#ifndef sql_result_H
#define sql_result_H

#include <stream.h>
#include <sql_mvc.h>
#include <sql_catalog.h>

extern int mvc_export_default(mvc *m, stream *s);
extern int mvc_export_result(mvc *c, stream *s, int res_id);
extern int mvc_export_table(mvc *c, stream *s, int res_id, unsigned int offset, unsigned int nr);
extern BAT *mvc_import_table(mvc *c, bstream *s, char *tname, char *sep, char *rsep, int nr);

#endif /* sql_result_H */
@c

#include "sql_result.h"
#include <tablet.h>
#include <monettime.h>
#include <bat/res_table.h>

@= dec_tostr
	char buf[32];
	@1 v = *(@1*)a;
	int scale = (int)(ptrdiff_t)extra, cur = 31, neg = (v<0)?1:0, i, done = 0;
	int l;

	if (v == @1_nil) {
		if (*len < 4){
			if (*Buf) GDKfree(*Buf);
			*len = 4;
			*Buf = GDKmalloc(*len);
		}
		strcpy(*Buf, "nil");
		return 3;
	}
		
	if (v<0)
		v = -v;

	buf[cur--] = 0;
	if (scale) {
		for (i=0; i<scale; i++) {
			buf[cur--] = (char) (v%10 + '0');
			v /= 10;
		}
		buf[cur--] = '.';
	}
	while (v) {
		buf[cur--] = (char ) (v%10 + '0');
		v /= 10;
		done = 1;
	}
	if (!done)
		buf[cur--] = '0';
	if (neg)
		buf[cur--] = '-';
	l = (32-cur-1);
	if (*len < l){
		if (*Buf)
			GDKfree(*Buf);
		*len = l+1;
		*Buf = GDKmalloc(*len);
	}
	strcpy(*Buf, buf+cur+1);
	return l-1;
@c

int
dec_tostr(void *extra, char **Buf, int *len, int type, ptr a)
{
	/* support dec map to sht, int and lng */
	if (type == TYPE_sht) {
		@:dec_tostr(sht)@
	} else if (type == TYPE_int) {
		@:dec_tostr(int)@
	} else if (type == TYPE_lng) {
		@:dec_tostr(lng)@
	} else {
		GDKwarning("Decimal cannot be mapped to %s\n", ATOMname(type));
	}
	return 0;
}

int
sql_time_tostr(void *M, char **buf, int *len, int type, ptr A)
{
	mvc *m = M;
	int len1, big = 128;
	char buf1[128], *s1 = buf1, *s;
	lng val, timezone = m->timezone * 60 * 1000;
	daytime tmp, *a = A;
	daytime mtime = 24 * 60 * 60 * 1000;

	(void) type;
	if (*(int *) a == int_nil) {
		if (*len < 5) {
			if (*buf)
				GDKfree(*buf);
			*buf = (str) GDKmalloc(*len = 16);
		}
		s = *buf;
		strcpy(s, "nil");
		return 3;
	}

	val = *a + timezone;
	if (val < 0)
		val = mtime + val;
	if (val > mtime)
		val = val - mtime;
	tmp = (daytime) val;

	len1 = daytime_tostr(&s1, &big, &tmp);

	if (*len < len1 + 8) {
		if (*buf)
			GDKfree(*buf);
		*buf = (str) GDKmalloc(*len = len1 + 8);
	}
	s = *buf;
	strcpy(s, buf1);
	s += len1;

	*s++ = (m->timezone >= 0) ? '+' : '-';
	sprintf(s, "%02d:%02d", ABS(m->timezone) / 60, ABS(m->timezone) % 60);
	s += 5;
	return (int) (s - *buf);
}

int
sql_timestamp_tostr(void *M, char **buf, int *len, int type, ptr A)
{
	mvc *m = M;
	int len1, len2, big = 128;
	char buf1[128], buf2[128], *s, *s1 = buf1, *s2 = buf2;
	timestamp tmp, *a = A;
	lng timezone = m->timezone * 60 * 1000;

	(void) type;
	if (*(lng *) a == lng_nil) {
		if (*len < 5) {
			if (*buf)
				GDKfree(*buf);
			*buf = (str) GDKmalloc(*len = 16);
		}
		s = *buf;
		strcpy(s, "nil");
		return 3;
	}

	timestamp_add(&tmp, a, &timezone);
	len1 = date_tostr(&s1, &big, &tmp.days);
	len2 = daytime_tostr(&s2, &big, &tmp.msecs);

	if (*len < len1 + len2 + 8) {
		if (*buf)
			GDKfree(*buf);
		*buf = (str) GDKmalloc(*len = len1 + len2 + 8);
	}
	s = *buf;
	strcpy(s, buf1);
	s += len1;
	*s++ = ' ';
	strcpy(s, buf2);
	s += len2;

	*s++ = (m->timezone >= 0) ? '+' : '-';
	sprintf(s, "%02d:%02d", ABS(m->timezone) / 60, ABS(m->timezone) % 60);
	s += 5;
	return (int) (s - *buf);
}

static int
bat_max_length(BAT *b)
{
	BUN p, q;
	int max = 0;

	BATloop(b, p, q) {
		char *s = BUNtail(b, p);
		int l = strlen(s);

		if (l > max)
			max = l;
	}
	return max;
}

@= dec_frstr
	sql_subtype *t = (sql_subtype*)extra;

	unsigned int i, neg = 0;
	char *p = s;
	@1 *r;
	@1 res = 0;
	if (*s == '-') {
		neg = 1;
		s++;
	} else if (*s == '+') {
		neg = 0;
		s++;
	}
	for (i = 0; i < (t->digits-t->scale) && *s != '.' && *s; i++, s++) {
		if (!*s || *s < '0' || *s > '9') {
			GDKerror("decimal wrong format (%s)", p);
			return NULL;
		}
		res *= 10;
		res += (*s-'0');
	}
	if (!*s && t->scale) {
		GDKerror("decimal wrong format (%s)", p);
		return NULL;
	}
	if (*s) {
		if (*s != '.') {
			GDKerror("decimal wrong format (%s)", p);
			return NULL;
		}
		s++;
		for (i = 0; *s && i < t->scale; i++, s++) {
			if (*s < '0' || *s > '9') {
				GDKerror("decimal wrong format (%s)", p);
				return NULL;
			}
			res *= 10;
			res += (*s-'0');
		}
	}
	if (*s) {
		GDKerror("decimal wrong format (%s)", p);
		return NULL;
	}
	r = (@1*)GDKmalloc(sizeof(@1));
	if (neg)
		*r = -res;
	else
		*r = res;
	return (ptr*)r;
@c

ptr *
dec_frstr(void *extra, int type, char *s)
{
	/* support dec map to sht, int and lng */
	if (type == TYPE_sht) {
		@:dec_frstr(sht)@
	} else if (type == TYPE_int) {
		@:dec_frstr(int)@
	} else if (type == TYPE_lng) {
		@:dec_frstr(lng)@
	} else {
		GDKwarning("Decimal cannot be parsed from %s\n", ATOMname(type));
	}
	return NULL;
}

static char *
coerce(char *s)
{
	char *n = GDKmalloc(strlen(s) + 1);
	char *t = n;

	for (; *s; s++)
		switch (*s) {
		case '\\':
			s++;
			if (*s == 'n')
				*t++ = '\n';
			else if (*s == 't')
				*t++ = '\t';
			else if (*s == '\\')
				*t++ = '\\';
			else
		default:
				*t++ = *s;
		}
	*t = 0;
	return n;
}


BAT *
mvc_import_table(mvc *m, bstream *bs, char *tname, char *sep, char *rsep, int sz)
{
	int i = 0;
	sql_trans *tr = m->trans;
	sql_table *t = mvc_bind_table(m, tr->schema, tname);
	node *n;
	BAT *bats = NULL;
	Tablet as;
	Column *fmt;

	if (!t) {
		GDKerror("table %s not found\n", tname);
		m->type = -1;
		return NULL;
	}
	if (!bs ||stream_errnr(bs->s)) {
		GDKerror("stream not open %d\n", stream_errnr(bs->s));

		m->type = -1;
		return NULL;
	}

	if (t->columns.set) {
		as.nr_attrs = list_length(t->columns.set);
		as.nr = sz;
		fmt = as.format = (Column *) GDKmalloc(sizeof(Column) * (as.nr_attrs + 1));

		for (n = t->columns.set->h, i = 0; n; n = n->next, i++) {
			sql_column *col = n->data;

			fmt[i].name = _strdup(col->base.name);
			fmt[i].sep = (n->next) ? coerce(sep) : coerce(rsep);
			fmt[i].seplen = (int) strlen(fmt[i].sep);
			fmt[i].type = _strdup(col->type->type->base.name);
			fmt[i].adt = ATOMindex(fmt[i].type);
			fmt[i].tostr = &TABLETadt_toStr;
			fmt[i].frstr = &TABLETadt_frStr;
			if (strcmp(col->type->type->sqlname, "decimal") == 0) {
				fmt[i].tostr = &dec_tostr;
				fmt[i].frstr = &dec_frstr;
				fmt[i].extra = col->type;
			}
		}

		if (TABLETcreate_bats(&as) >= 0)
			if (TABLETload_file(&as, bs) >= 0)
				 bats = TABLETcollect_bats(&as);

		TABLETdestroy_format(&as);
	}

	m->type = Q_UPDATE;
	return bats;
}

@-
mvc_export_result dumps the sql header information
It should be produced in Monet format to enable mapi
to work with it.
@c
int
mvc_export_default(mvc *m, stream *s)
{
	int ok = 1;

	if (s) {
		/* indicate to client that a new SQL command starts here */
		ok = (stream_write(s, "#-\n", 3, 1) == 1);

		if (ok)
			ok = (stream_printf(s, "# " SZFMT, m->type) >= 0);
		if (ok)
			ok = (stream_write(s, " # querytype\n", 13, 1) == 1);
	}
	return (ok) ? 0 : -1;
}

int
mvc_export_result(mvc *m, stream *s, int res_id)
{
	int i, ok = 1, count;
	res_table *t = res_tables_find(m->results, res_id);

	if (!s)
		return 0;
	/* indicate to client that a new SQL command starts here */
	ok = (stream_write(s, "#-\n", 3, 1) == 1);

	if (ok)
		ok = (stream_printf(s, "# " SZFMT, t->query_type) >= 0);
	if (ok)
		ok = (stream_write(s, " # querytype\n", 13, 1) == 1);

	if (ok && t->query_type == Q_UPDATE)
		return 0;

	if (!ok)
		return -1;
	m->type = Q_RESULT;

	ok = (stream_write(s, "# ", 2, 1) == 1);
	for (i = 0; i < t->nr_cols && ok; i++) {
		res_col *c = t->cols + i;
		int len = strlen(c->tn);

		if (len)
			ok = (stream_write(s, c->tn, len, 1) == 1);
		if (i + 1 < t->nr_cols && ok)
			ok = (stream_write(s, ",\t", 2, 1) == 1);
	}
	if (ok)
		ok = (stream_write(s, " # table_name\n", 14, 1) == 1);

	if (ok)
		ok = (stream_write(s, "# ", 2, 1) == 1);
	for (i = 0; i < t->nr_cols && ok; i++) {
		res_col *c = t->cols + i;

		ok = (stream_write(s, c->name, strlen(c->name), 1) == 1);
		if (i + 1 < t->nr_cols && ok)
			ok = (stream_write(s, ",\t", 2, 1) == 1);
	}
	if (ok)
		ok = (stream_write(s, " # name\n", 8, 1) == 1);

	if (ok)
		ok = (stream_write(s, "# ", 2, 1) == 1);
	for (i = 0; i < t->nr_cols && ok; i++) {
		res_col *c = t->cols + i;

		ok = (stream_write(s, c->type->type->sqlname, strlen(c->type->type->sqlname), 1) == 1);
		if (i + 1 < t->nr_cols && ok)
			ok = (stream_write(s, ",\t", 2, 1) == 1);
	}
	if (ok)
		ok = (stream_write(s, " # type\n", 8, 1) == 1);

	if (ok)
		ok = (stream_write(s, "# ", 2, 1) == 1);
	for (i = 0; i < t->nr_cols && ok; i++) {
		res_col *c = t->cols + i;

		if (c->type->type->localtype == TYPE_str) {
			if (strcmp(c->type->type->sqlname, "char") == 0) {
				ok = (stream_printf(s, SZFMT, c->type->digits) >= 0);
			} else {
				count = 0;
				if (c->b) {
					BAT *b = BATdescriptor(c->b);

					count = bat_max_length(b);
					BBPunfix(b->batCacheid);
				} else {
					count = strlen((char *) c->p);
				}
				ok = (stream_printf(s, SZFMT, count) >= 0);
			}
			/* the following three could be done once by taking the
			   max value and calculating the number of digits from that
			   value, instead of the maximum values taken now, which
			   include the optional sign */
		} else if (strcmp(c->type->type->sqlname, "smallint") == 0) {
			count = 1;
			count += c->type->digits ? c->type->digits : 5;
			ok = (stream_printf(s, SZFMT, count) >= 0);
		} else if (strcmp(c->type->type->sqlname, "int") == 0) {
			count = 1;
			count += c->type->digits ? c->type->digits : 10;
			ok = (stream_printf(s, SZFMT, count) >= 0);
		} else if (strcmp(c->type->type->sqlname, "bigint") == 0) {
			count = 1;
			count += c->type->digits ? c->type->digits : 19;
			ok = (stream_printf(s, SZFMT, count) >= 0);
		} else if (strcmp(c->type->type->sqlname, "real") == 0) {
			/* [sign]+digit+period+[max 6 digits]+E+[sign]+[max 2 digits] */
			ok = (stream_printf(s, SZFMT, 13) >= 0);
		} else if (strcmp(c->type->type->sqlname, "double") == 0) {
			/* [sign]+digit+period+[max 14 digits]+E+[sign]+[max 3 digits] */
			ok = (stream_printf(s, SZFMT, 22) >= 0);
		} else if (strcmp(c->type->type->sqlname, "decimal") == 0) {
			count = 1 + c->type->digits;
			if (c->type->scale > 0)
				count += 1;
			ok = (stream_printf(s, SZFMT, count) >= 0);
		} else if (strcmp(c->type->type->sqlname, "date") == 0) {
			ok = (stream_write(s, "10", 2, 1) == 1);
		} else if (strcmp(c->type->type->sqlname, "time") == 0) {
			count = 8;
			if (c->type->scale)	/* time zone */
				count += 6;	/* +03:30 */
			if (c->type->digits)	/* fractional seconds precision */
				count += 1 + c->type->digits;
			ok = (stream_printf(s, SZFMT, count) >= 0);
		} else if (strcmp(c->type->type->sqlname, "timestamp") == 0) {
			count = 10 + 1 + 8;
			if (c->type->scale)	/* time zone */
				count += 6;	/* +03:30 */
			if (c->type->digits)	/* fractional seconds precision */
				count += 1 + c->type->digits;
			ok = (stream_printf(s, SZFMT, count) >= 0);
		} else {
			ok = (stream_write(s, "0", 1, 1) == 1);
		}
		if (i + 1 < t->nr_cols && ok)
			ok = (stream_write(s, ",\t", 2, 1) == 1);
	}
	if (ok)
		ok = (stream_write(s, " # length\n", 10, 1) == 1);

	{
		size_t count;

		if (t->order) {
			BAT *order = BATdescriptor(t->order);

			count = BATcount(order);
			BBPunfix(order->batCacheid);
		} else
			count = 1;
		if (ok)
			ok = (stream_printf(s, "# " SZFMT, count) >= 0);
		for (i = 1; i < t->nr_cols && ok; i++)
			ok = (stream_write(s, ",\t", 2, 1) == 1);
		if (ok)
			ok = (stream_write(s, " # tuplecount\n", 14, 1) == 1);
	}

	if (ok)
		ok = (stream_printf(s, "# %d", t->id) >= 0);

	for (i = 1; i < t->nr_cols && ok; i++)
		ok = (stream_write(s, ",\t", 2, 1) == 1);
	if (ok)
		ok = (stream_write(s, " # id\n", 6, 1) == 1);

	return (ok) ? 0 : -1;
}

static int
mvc_export_row(mvc *m, stream *s, res_table *t)
{
	char *sep = ",\t";
	char *rsep = "\t]\n";

	int i, ok = 1;

	m->type = Q_RESULT;
	if (!s)
		return 0;

	ok = (stream_write(s, "[ ", strlen("[ "), 1) == 1);
	for (i = 0; i < t->nr_cols && ok; i++) {
		res_col *c = t->cols + i;

		if (i != 0) {
			ok = (stream_write(s, sep, strlen(sep), 1) == 1);
			if (!ok)
				break;
		}

		if (c->type->type->scale == SCALE_FIX && strcmp(c->type->type->sqlname, "decimal") == 0) {
			char *buf = NULL;
			int len = 0;
			int l = dec_tostr((void *) (ptrdiff_t) c->type->scale, &buf, &len,
					  c->mtype, c->p);

			ok = (stream_write(s, buf, l, 1) == 1);
			_DELETE(buf);
		} else if (c->type->scale == SCALE_FIX && strcmp(c->type->type->sqlname, "time") == 0) {
			char *buf = NULL;
			int len = 0;
			int l = sql_time_tostr((void *) m, &buf, &len,
					       c->mtype, c->p);

			ok = (stream_write(s, buf, l, 1) == 1);
			_DELETE(buf);
		} else if (c->type->scale == SCALE_FIX && strcmp(c->type->type->sqlname, "timestamp") == 0) {
			char *buf = NULL;
			int len = 0;
			int l = sql_timestamp_tostr((void *) m, &buf, &len,
						    c->mtype, c->p);

			ok = (stream_write(s, buf, l, 1) == 1);
			_DELETE(buf);
		} else if (!c->p || ATOMcmp(c->mtype, ATOMnilptr(c->mtype), c->p) == 0) {
			ok = (stream_write(s, "NULL", sizeof("NULL") - 1, 1) == 1);
		} else {
			char *buf = NULL;
			int len = 0;
			int l = (*BATatoms[c->mtype].atomToStr) (&buf, &len, c->p);

			ok = (stream_write(s, buf, l, 1) == 1);
			_DELETE(buf);
		}
	}
	m->results = res_tables_remove(m->results, t);
	if (ok)
		ok = (stream_write(s, rsep, strlen(rsep), 1) == 1);
	return (ok) ? 0 : -1;
}

int
mvc_export_table(mvc *m, stream *s, int res_id, unsigned int offset, unsigned int nr)
{
	char *sep = ",\t";
	char *rsep = "\t]\n";

	Tablet as;
	Column *fmt;
	res_table *t = res_tables_find(m->results, res_id);
	ssize_t i;
	size_t cnt;
	int clean = 0;
	BAT *order = NULL;

	if (!t)
		return -1;
	if (!s)
		return 0;

	if (!t->order)
		return mvc_export_row(m, s, t);

	m->type = Q_RESULT;
	order = BATdescriptor(t->order);
	cnt = nr;
	if (cnt == 0) {
		cnt = BATcount(order);
		clean = 1;
	}
	if (offset >= BATcount(order))
		cnt = 0;
	if (offset + cnt > BATcount(order)) {
		cnt = BATcount(order) - offset;
		clean = 1;
	}

	if (cnt == 0) {
		if (clean || !BATcount(order)) {
			BBPunfix(order->batCacheid);
			m->results = res_tables_remove(m->results, t);
		}
		if (stream_errnr(s))
			return -1;
		return 0;
	}
	as.nr_attrs = t->nr_cols + 1;	/* for the leader */
	as.nr = cnt;
	as.offset = offset;
	fmt = as.format = (Column *) GDKmalloc(sizeof(Column) * (as.nr_attrs + 1));

	memset(fmt, 0, (as.nr_attrs + 1) * sizeof(Column));

	fmt[0].bval = NULL;
	fmt[0].sep = _strdup("[ ");
	fmt[0].seplen = (int) strlen(fmt[0].sep);

	for (i = 1; i <= t->nr_cols; i++) {
		res_col *c = t->cols + (i - 1);

		if (!c->b)
			break;

		fmt[i].bval = BATdescriptor(c->b);
		fmt[i].name = NULL;
		fmt[i].sep = ((i - 1) < (t->nr_cols - 1)) ? _strdup(sep) : _strdup(rsep);
		fmt[i].seplen = (int) strlen(fmt[i].sep);
		fmt[i].type = ATOMname(fmt[i].bval->ttype);
		fmt[i].adt = fmt[i].bval->ttype;
		fmt[i].tostr = &TABLETadt_toStr;
		fmt[i].frstr = &TABLETadt_frStr;
		fmt[i].extra = NULL;
		if (c->type->type->scale == SCALE_FIX && strcmp(c->type->type->sqlname, "decimal") == 0) {
			fmt[i].tostr = &dec_tostr;
			fmt[i].frstr = &dec_frstr;
			fmt[i].extra = (void *) (ptrdiff_t) c->type->scale;
		} else if (c->type->scale == SCALE_FIX && strcmp(c->type->type->sqlname, "timestamp") == 0) {
			fmt[i].tostr = &sql_timestamp_tostr;
			fmt[i].frstr = NULL;
			fmt[i].extra = m;
		} else if (c->type->scale == SCALE_FIX && strcmp(c->type->type->sqlname, "time") == 0) {
			fmt[i].tostr = &sql_time_tostr;
			fmt[i].frstr = NULL;
			fmt[i].extra = m;
		}
	}
	if (i == t->nr_cols + 1) {
		TABLEToutput_file(&as, order, s);
	}
	BBPunfix(order->batCacheid);
	TABLETdestroy_format(&as);
	if (clean)
		m->results = res_tables_remove(m->results, t);
	if (stream_errnr(s))
		return -1;
	return 0;
}
