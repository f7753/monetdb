@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@'
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@'
@' The Original Code is the Monet Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2004 CWI.
@' All Rights Reserved.

@f sql_optimizer
@t SQL catalog management
@a N. Nes, M.L. Kersten
@+ SQL scenario
The SQL scenario implementation is a derivative of the MAL session scenario.

It is also the first version that uses state records attached to
the client record. They are initialized as part of the initialization 
phase of the scenario.

@h
#ifndef _SQL_OPTIMIZER_H_
#define _SQL_OPTIMIZER_H_
#include "sql.h"

#define _SQL_OPTIMIZER_DEBUG  

sql_export void addQueryToCache(Client c);
sql_export void optimizeQueryInCache(Client c);
sql_export str SQLoptimizer(Client c);

#endif /* _SQL_OPTIMIZER_H_ */

@-
The queries are stored in a cache after they have been
type checked and optimized.
@c
#include "sql_optimizer.h"
#include "sql_scenario.h"
#include "sql_gencode.h"


void addQueryToCache(Client c)
{
        insertSymbol(findScope(c->nspace,"sqlcache"), c->curprg);
        trimMalBlk(c->curprg->def);
        c->blkmode =0;
        chkProgram(c->nspace, c->curprg->def);
@-
An error in the compilation should be reported to the user.
@c
        if(c->curprg->def->errors){
        showErrors(c);
        if(c->listing )
            printFunction(c->fdout,c->curprg->def,c->listing);
            stream_flush(c->fdout);
            return;
        }
        optimizeQueryInCache(c);
}
@-
The first attempt to building an SQL optimizer.
This versions simply runs through the MAL script and re-orders the instructions
into catalog operations, query graph, and result preparation.
This distinction is used to turn the function into a factory, which would
enable re-entry when used as a cache-optimized query.
@c
str SQLoptimizer(Client c) {
    (void) c;
    printf("SQLoptimizer\n");
        printFunction(c->fdout,c->curprg->def, LIST_MAL_ALL);
    printf("done\n");
    return MAL_SUCCEED;
}

void optimizeQueryInCache(Client c) {
        MalBlkPtr mb;
        InstrPtr *ns,p;
        int t,v;
        int i,k;

#ifdef _SQL_OPTIMIZER_DEBUG
        printf("First call to SQL optimizer\n");
#endif
        mb= c->curprg->def;
        ns= (InstrPtr *) GDKmalloc( sizeof(InstrPtr) * (mb->stop+4));
        k=1;
        ns[0] = getInstrPtr(mb,0); /* its signature */
        ns[0]->token = FACTORYsymbol;
        for(i= 0; i< mb->stop; i++){
            p= getInstrPtr(mb,i);
            if( functionName(p) && moduleName(p) &&
                strncmp(functionName(p),"bind",4)==0 &&
                strcmp(moduleName(p),"sql") ==0 )
                ns[k++]= p;
        }
@-
Inject the factory loop
@c
        t= newConstant(mb,TYPE_bit,GDKstrdup("true"),0);
        v= newVariable(mb,GDKstrdup("always"),TYPE_bit);
        p= newInstruction(ASSIGNsymbol);
        p->barrier = BARRIERsymbol;
        p->argv[0]= v;
        pushArgument(mb,p,t);
        ns[k++]= p;
        
        for(i= 1; i< mb->stop-1; i++){
            p= getInstrPtr(mb,i);
            if( !(functionName(p) && moduleName(p) &&
                strncmp(functionName(p),"bind",4)==0 &&
                strcmp(moduleName(p),"sql") ==0 ) )
                ns[k++]= p;
        }
@-
Finalize the factory loop
@c
        p= newInstruction(ASSIGNsymbol);
        p->barrier = YIELDsymbol;
        p->argv[0]= v;
        ns[k++]= p;
        p= newInstruction(ASSIGNsymbol);
        p->barrier = REDOsymbol;
        p->argv[0]= v;
        ns[k++]= p;
        p= newInstruction(ASSIGNsymbol);
        p->barrier = EXITsymbol;
        p->argv[0]= v;
        ns[k++]= p;
        ns[k++]= getInstrPtr(mb,i);

        mb->stop += 4;
        GDKfree(mb->stmt);
        mb->stmt = ns;
        chkProgram(c->nspace,mb);
#ifdef _SQL_OPTIMIZER_DEBUG
        printFunction(c->fdout,c->curprg->def, LIST_MAL_ALL);
#endif
}

