@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@'
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@'
@' The Original Code is the Monet Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2004 CWI.
@' All Rights Reserved.
@'
@' Contributor(s):
@'              Martin Kersten <Martin.Kersten@cwi.nl>
@'              Peter Boncz <Peter.Boncz@cwi.nl>
@'              Niels Nes <Niels.Nes@cwi.nl>
@'              Stefan Manegold  <Stefan.Manegold@cwi.nl>

@f sql_gencode
@t SQL to MAL code generation.
@a N. Nes, M. Kersten
@+ MAL Code generation
[TODO, check code generation, in particular the assignment of
the result to the proper variable]

This module contains the actions to construct a MAL program, ready for
optimization and execution by the Monet V5 kernel.

The code base is modelled directly after its MIL variant, replacing
each IO request by instructions to initialize the corresponding MAL data
structure.
To speed up the compilation, we may consider keeping a cache of pre-compiled
statements.

MAL extensions needed. A temporary variable used as an argument
should be printed (done). Consider replacing modname/fcnname by
an integer constant and a global lookup table. This should
reduce the cost to prepare MAL statements significantly.

A dummymodules is needed to load properly.
@-
@h
#ifndef _SQL2MAL_H
#define _SQL2MAL_H

#include <sql.h>
#include <sql_atom.h>
#include <sql_statement.h>
#include <sql_mvc.h>
#include <mal_function.h>

sql_export int backend_dumpstmt(backend *be, MalBlkPtr mb, stmt *s);
sql_export void backend_dumpproc( backend *be, MalBlkPtr mb, int id, stmt *s );

#define _SQL_GENCODE_DEBUG
#endif /* _SQL2MAL_H */
@c
#include "sql_gencode.h"
#include "sql_scope.h"

@+ MAL code support
To simplify construction of the MAL program use the following
macros

@= newStmt
	q= newInstruction(ASSIGNsymbol);
	moduleId(q)= (@1)? GDKstrdup(@1): 0;
	functionId(q)= (@2)? GDKstrdup(@2): 0;
	getDestVar(q)= newTmpVariable(mb,TYPE_any);
	setVarInitialized(mb,getDestVar(q));
	pushInstruction(mb,q);
	s->nr= getDestVar(q);	/* might be dropped altogether */
@= newAssignment
	q= newInstruction(ASSIGNsymbol);
	pushInstruction(mb,q);
@= newStmtId
	q= newInstruction(ASSIGNsymbol);
	moduleId(q)= (@2)? GDKstrdup(@2): 0;
	functionId(q)= (@3)? GDKstrdup(@3): 0;
	getDestVar(q)= newVariable(mb,@1,TYPE_any);
	setVarInitialized(mb,getDestVar(q));
	pushInstruction(mb,q);
@= pushInt
	{int _t; char bufi[BUFSIZ];
		snprintf(bufi,BUFSIZ,"%d",@1);
		 _t= newConstant(mb,TYPE_int,GDKstrdup(bufi),TRUE); 
		q= pushArgument(mb,q,_t);
	}
@= pushStr
	{int _t = newConstant(mb,TYPE_str,GDKstrdup(@1),TRUE); 
		q = pushArgument(mb,q,_t);}
@= pushBit
	{int _t = newConstant(mb,TYPE_bit,GDKstrdup(@1),TRUE); 
		q = pushArgument(mb,q,_t);}
@= pushNilType
	{int _t = newConstant(mb,getTypeIndex(@1,strlen(@1)),GDKstrdup("nil"),TRUE); 
		q = pushArgument(mb,q,_t);}
@= pushNil
	{int _t = newConstant(mb,TYPE_any,GDKstrdup("nil"),TRUE); 
		q = pushArgument(mb,q,_t);}
@= pushType
	{int _t; _t= findVariable(mb,@1); 
	if( _t == -1 ) _t= newVariable(mb,@1,TYPE_any);
		q= pushArgument(mb,q,_t);}
@-
The type of previous instructions can be obtained from the MAL block
@= getTailType
	{ @1= getTailType(getVarType(mb,@2));}
@= getType
	{ @1= getVarType(mb,@2);}
@-
The return types should be carefully tuned. Vid types are differently handled.
	setVarType(mb,q->argv[0],newBatType(
	(ht==TYPE_void?TYPE_oid:ht),
	(tt==TYPE_void?TYPE_oid:tt)));

@= setType
	setVarType(mb,q->argv[0],@1);
@= setReturnType
	setVarType(mb,q->argv[0],newBatType(@1,@2));
@= setReturn
	getDestVar(q)= @1;
@= getReturn
	@1= getDestVar(q);
@= pushArgId
	q= pushArgumentId(mb,q,@1);
@= pushArg
	q= pushArgument(mb,q,@1);
@= newVar
	@1= newVariable(m, @2, TYPE_any);
@= newTmp
	@1= newTmpVariable(m, TYPE_any);
@-
MAL constrol instructions
@c
@= newBarrier
		q->barrier= BARRIERsymbol;
@= newExit
		q= newInstruction(EXITsymbol);
		pushInstruction(mb,q);
@+ MAL initialization
Many instructions have a more or less fixed structure, therefore
they can be assembled in a pre-compiled block. Each time we need it,
a copy can be extraced and included in the MAL block

The SQL block received is compiled into a MAL block surrounded
by calls to handle timing and tracing.

@= enterSQLblock
	@:newStmt("sql","beforeAction")@

@= afterSQLblock
	@:newStmt("sql","afterAction")@
@-

The catalog relations should be maintained in a MAL box, which
provides the handle for transaction management.
@-
The atoms produced by the parser should be converted back into
MAL constants. Ideally, this should not be necessary when the
SQL parser keeps the string representation around.
This involves regeneration of their string as well and
trimming the enclosing string quotes.
@c
static
int constantAtom(backend *sql, MalBlkPtr mb, atom *a){
	int idx;
	ValPtr vr=  (ValPtr) &a->data;
	char * val;
	(void) sql;

	VALformat(&val,vr);
	if( vr->vtype == TYPE_str){
		val[strlen(val)-1]=0;
		idx= newConstant(mb,vr->vtype,GDKstrdup(val+1),1);
		GDKfree(val);
	} else
	idx= newConstant(mb,vr->vtype,val,1);
	return idx;
}
@-
Instructions are encapsulated with time code.
@= SQLprelude
        if (sql->debug&2){
		/* t0:= time(); printf(" %d ",t0); */
		@:newStmtId("t0","alarm","usec")@
		@:newStmt("io","printf")@
		@:pushStr(" %d ")@
		@:pushArgId("t0")@
        }

@= SQLpostlude
        if (sql->debug&2){
		/* t1 := time();t1:= t1-t0; 
		   printf(" %d ",t1);printf("%d\n",nr);*/
		@:newStmt("t1","alarm","usec")@
		@:newStmtId("t1","calc","-")@
		@:pushArgId("t1")@
		@:pushArgId("t0")@
		@:newStmt("io","printf")@
		@:pushStr(" %d ")@
		@:pushArgId("t1")@
		@:newStmt("io","printf")@
		@:pushStr(" %d \n")@
		@:pushArgId("nr")@
        }
@-
The dump_header produces a sequence of instructions for
the front-end to prepare presentation of a result table.
@c
void dump_header(MalBlkPtr mb, stmt *s, list *l ){
        node *n;
	InstrPtr q;
	int old;


        for (n=l->h; n; n = n->next){
                char *name ;
                s = n->data;
		old= s->nr;	/* s is mis-used in next macro */
		name= column_name(s);

		@:newStmt("sql","column")@
		@:pushArg(old)@
		@:pushStr(name)@
		@:pushStr(tail_type(s)->type->sqlname)@
		@:pushInt(tail_type(s)->digits)@
		@:pushInt(tail_type(s)->scale)@
		s->nr= old;
        }
}
@-
Some utility routines to generate code
@c
void dump_1(backend *sql, MalBlkPtr mb, stmt *s, char *mod, char *name){
	InstrPtr q;
	int o1 = backend_dumpstmt(sql,mb, s->op1.stval);
	@:SQLprelude@
	@:newStmt(mod,name)@
	@:pushArg(o1)@
	@:SQLpostlude@
}
void dump_2(backend *sql, MalBlkPtr mb, stmt *s, char *mod, char *name){
	InstrPtr q;
	int o1 = backend_dumpstmt(sql,mb, s->op1.stval);
	int o2 = backend_dumpstmt(sql,mb, s->op2.stval);
	@:SQLprelude@
	@:newStmt(mod,name)@
	@:pushArg(o1)@
	@:pushArg(o2)@
	@:SQLpostlude@
}
@-
The big code generation switch. The sections are aligned to the
Monet version4 code generation block for eas of comparison.
@c
int backend_dumpstmt(backend *sql, MalBlkPtr mb, stmt *s){
    InstrPtr q;
    int k,k2;
    node *n;

    if (s){
    	if (s->nr > 0) 
		return s->nr;	/* stmt already handled */

	switch(s->type){
	case st_none: 
		break;
	case st_sql:{
		int o1 = backend_dumpstmt(sql,mb,s->op1.stval);
		@:newStmt("sql","eval")@
		@:pushArg(o1)@
		} break;
        case st_var: {
                int val = backend_dumpstmt(sql,mb, s->op2.stval);
		@:newAssignment()@
		@:pushArgId(s->op1.sval)@
		@:pushArg(val)@
        }       break;
	case st_temp: {
		int l,r;
		@:newStmt("calc","oid")@
		@:pushInt(0)@
		@:getReturn(r)@
		@:newStmt("bat","new")@
		@:pushArgId("void")@
		@:pushArgId(s->op4.typeval->type->base.name)@
		@:getReturn(l)@
		@:newStmt("bat","seqbase")@
		@:pushArg(l)@
		@:pushArg(r)@
	} break;
	case st_ibat: 
		backend_dumpstmt(sql,mb, s->op1.stval);
		break;
	case st_bat:
	case st_ubat: {
		char *type = (s->type==st_bat)?"":"_ubat";
		char buf[256];
		int k;

		@:SQLprelude@
		snprintf(buf,256,"bind%s",type);
		@:newStmt("sql",buf)@
		@:pushStr(s->op1.cval->t->s->base.name)@
		@:pushStr(s->op1.cval->t->base.name)@
		@:pushStr(s->op1.cval->base.name)@
		@:pushInt(s->flag)@
		@:getReturn(k)@

		/* OLD Get type information from catalog
		@:setReturnType(TYPE_void,s->op1.cval->type->type->localtype)@
		*/
                        
		if( s->flag >RDONLY) {
			@:newStmt("bat","setWriteMode")@
			@:pushArg(k)@
		} 
		s->nr= k;
		@:SQLpostlude@
	} break;
	case st_dbat: {
		int k;
		@:SQLprelude@
		@:newStmt("sql","bind_dbat")@
		@:pushStr(s->op1.tval->s->base.name)@
		@:pushStr(s->op1.tval->base.name)@
		@:pushInt(s->flag)@
		@:getReturn(k)@
		if( s->flag >RDONLY) {
			@:newStmt("bat","setWriteMode")@
			@:pushArg(k)@
		}
		s->nr= k;
		@:SQLpostlude@
	} break;
	case st_idxbat:{
		int k;

		@:SQLprelude@
		@:newStmt("sql","bind_ibat")@
		@:pushStr(s->op1.idxval->t->s->base.name)@
		@:pushStr(s->op1.idxval->t->base.name)@
		@:pushStr(s->op1.idxval->base.name)@
		@:pushInt(s->flag)@
		@:getReturn(k)@

		if( s->flag >RDONLY) {
			@:newStmt("bat","setWriteMode")@
			@:pushArg(k)@
		} 
		@:SQLpostlude@
		s->nr= k;
		} break;
	case st_const: {
		dump_2(sql,mb,s,"algebra","project");
		} break;
	case st_mark: {
		dump_2(sql,mb,s,"algebra","mark");
		} break;
	case st_reverse: {
		dump_1(sql,mb,s,"bat","reverse");
		} break;
        case st_mirror: {
		dump_1(sql,mb,s,"bat","mirror");
		} break;
	case st_limit: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		int k;

		@:SQLprelude@
		@:newStmt("calc","-")@
		@:pushArg(l)@
		@:pushInt(1)@
		@:getReturn(k)@

		@:newStmt("bat","slice")@
		@:pushInt(0)@
		@:pushArg(k)@
		@:SQLpostlude@
		break;
	}
	case st_order: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		@:SQLprelude@
		@:newStmt("bat","reverse")@
		@:pushArg(l)@
		@:getReturn(k)@

		if( s->flag) {
			@:newStmt("algebra","sort")@
		} else {
			@:newStmt("algebra","sort_reverse")@
		}
		@:pushArg(k)@
		@:getReturn(k)@

		@:newStmt("bat","reverse")@
		@:pushArg(k)@
		@:SQLpostlude@
	} 	break;
	case st_reorder: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		int r = backend_dumpstmt(sql,mb, s->op2.stval);
		@:SQLprelude@
		if( s->flag){
			@:newStmt("group","refine")@
		} else {
			@:newStmt("group","refine_reverse")@
		}
		@:pushArg(l)@
		@:pushArg(r)@
		@:SQLpostlude@
	} 	break;

	case st_uselect:
	case st_select: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		int r = backend_dumpstmt(sql,mb, s->op2.stval);
		char *cmd = s->type == st_select? "select":"uselect";

		@:SQLprelude@
		if (s->op2.stval->nrcols >= 1){
			char *op = "=";
			switch(s->flag){
			case cmp_equal: op = "="; break;
			case cmp_notequal: op = "!="; break;
			case cmp_lt: op = "<"; break;
			case cmp_lte: op = "<="; break;
			case cmp_gt: op = ">"; break;
			case cmp_gte: op = ">="; break;
			default:
				GDKerror("Unknown operator");
	  		} 
			@:newStmt("multiplex","tactics")@
			@:pushStr(op)@
			@:pushArg(l)@
			@:pushArg(r)@
			@:getReturn(k)@
			@:newStmt("algebra","select")@
			@:pushArg(k)@
			@:pushBit("true")@
		} else {
		switch(s->flag){
		case cmp_like:{
			@:newStmt("algebra","likeselect")@
			@:pushArg(l)@
			@:pushArg(r)@
			@:SQLpostlude@
			break;
			}
		case cmp_notlike:{
			int k;
			@:newStmt("algebra","likeselect")@
			@:pushArg(l)@
			@:pushArg(r)@
			@:getReturn(k)@
			@:newStmt("algebra"," kdiff")@
			@:pushArg(l)@
			@:pushArg(k)@
			@:SQLpostlude@
			break;
			}
		case cmp_equal:{
			@:newStmt("algebra",cmd)@
			@:pushArg(l)@
			@:pushArg(r)@
			@:SQLpostlude@
			break;
			}
		case cmp_notequal:{
			@:newStmt("algebra","uselect")@
			@:pushArg(l)@
			@:pushArg(r)@
			@:getReturn(k)@
			@:newStmt("algebra","kdiff")@
			@:pushArg(l)@
			@:pushArg(k)@
			break;
		}
		case cmp_lt:
			@:newStmt("calc",tail_type(s)->type->base.name)@
			@:pushNilType(tail_type(s)->type->base.name)@
			@:getReturn(k)@

			@:newStmt("algebra",cmd)@
			@:pushArg(l)@
			@:pushArg(k)@
			@:pushArg(r)@
			@:pushBit("false")@
			@:pushBit("false")@
			break;
		case cmp_lte:
			@:newStmt("calc",tail_type(s)->type->base.name)@
			@:pushNilType(tail_type(s)->type->base.name)@
			@:getReturn(k)@

			@:newStmt("algebra",cmd)@
			@:pushArg(l)@
			@:pushArg(k)@
			@:pushArg(r)@
			@:SQLpostlude@
			break;
		case cmp_gt:
			@:newStmt("calc",tail_type(s)->type->base.name)@
			@:pushNilType(tail_type(s)->type->base.name)@
			@:getReturn(k)@

			@:newStmt("algebra",cmd)@
			@:pushArg(l)@
			@:pushArg(r)@
			@:pushArg(k)@
			@:pushBit("false")@
			@:pushBit("false")@
			break;
		case cmp_gte: 
			@:newStmt("calc",tail_type(s)->type->base.name)@
			@:pushNilType(tail_type(s)->type->base.name)@
			@:getReturn(k)@

			@:newStmt("algebra",cmd)@
			@:pushArg(l)@
			@:pushArg(r)@
			@:pushArg(k)@
			break;
		default:
			GDKerror("SQL2MAL: error impossible\n");
	  	} 
		}
		@:SQLpostlude@
	} break;
	case st_uselect2: 
	case st_select2: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		int r1 = backend_dumpstmt(sql,mb, s->op2.stval);
		int r2 = backend_dumpstmt(sql,mb, s->op3.stval);
		char *cmd= st_uselect2== s->type? "uselect":"select";

		@:SQLprelude@
		@:newStmt("algebra",cmd)@
		@:pushArg(l)@
		@:pushArg(r1)@
		@:pushArg(r2)@

		switch(s->flag){
		case 0:
			@:pushBit("false")@
			@:pushBit("false")@
			break;
		case 1:
			@:pushBit("false")@
			@:pushBit("true")@
			break;
		case 2:
			@:pushBit("true")@
			@:pushBit("false")@
			break;
		case 3:
			@:pushBit("true")@
			@:pushBit("true")@
			break;
		}
		@:SQLpostlude@
	} break;
	case st_semijoin: {
		dump_2(sql,mb,s,"algebra","semijoin");
	} break;
	case st_diff: {
		dump_2(sql,mb,s,"algebra","kdiff");
	} break;
	case st_union: {
		dump_2(sql,mb,s,"algebra","kunion");
	} break;
        case st_reljoin: {
                node *ln = NULL, *rn = NULL;
		@:SQLprelude@
		if( list_length(s->op1.lval)== 1){
			int l = backend_dumpstmt(sql,mb, s->op1.lval->h->data);
			int r = backend_dumpstmt(sql,mb, s->op2.lval->h->data);
			int k;
	
			@:newStmt("bat","reverse")@
			@:pushArg(r)@
			@:getReturn(k)@
			@:newStmt("algebra","join")@
			@:pushArg(l)@
			@:pushArg(r)@
		} else {
			@:newStmt("algebra","ds_link")@
			for (ln = s->op1.lval->h, rn = s->op2.lval->h; 
				ln && rn; ln = ln->next, rn = rn->next) {
				int l = backend_dumpstmt(sql,mb, ln->data);
				int r = backend_dumpstmt(sql,mb, rn->data);
				@:pushArg(l)@
				@:pushArg(r)@
			}
		}
		@:SQLpostlude@
        } break;
	case st_outerjoin:
	case st_join: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		int r = backend_dumpstmt(sql,mb, s->op2.stval);
		char *jt = "join";
		@:SQLprelude@
		if (s->type == st_outerjoin)
			jt = "outerjoin";
		switch(s->flag){
		case cmp_equal:
			@:newStmt("algebra",jt)@
			@:pushArg(l)@
			@:pushArg(r)@
			@:SQLpostlude@
			break;
		case cmp_notequal:
			@:newStmt("algebra",jt)@
			@:pushArg(l)@
			@:pushArg(r)@
			@:pushStr("!=")@
			@:SQLpostlude@
			break;
		case cmp_lt:
			@:newStmt("algebra",jt)@
			@:pushArg(l)@
			@:pushArg(r)@
			@:pushStr("<")@
			@:SQLpostlude@
			break;
		case cmp_lte: 
			@:newStmt("algebra",jt)@
			@:pushArg(l)@
			@:pushArg(r)@
			@:pushStr("<=")@
			@:SQLpostlude@
			break;
		case cmp_gt: 
			@:newStmt("algebra",jt)@
			@:pushArg(l)@
			@:pushArg(r)@
			@:pushStr(">")@
			@:SQLpostlude@
			break;
		case cmp_gte: 
			@:newStmt("algebra",jt)@
			@:pushArg(l)@
			@:pushArg(r)@
			@:pushStr(">=")@
			@:SQLpostlude@
			break;
		case cmp_all: /* aka cross table */
			@:newStmt("bat","reverse")@
			@:pushArg(r)@
			@:getReturn(k)@

			@:newStmt("algebra","project")@
			@:pushArg(k)@
			@:pushInt(0)@
			@:getReturn(k)@

			@:newStmt("bat","reverse")@
			@:pushArg(k)@
			@:getReturn(k)@

			@:newStmt("algebra","project")@
			@:pushArg(l)@
			@:pushInt(0)@
			@:getReturn(k2)@

			@:newStmt("algebra","join")@
			@:pushArg(k2)@
			@:pushArg(k)@
			@:SQLpostlude@
			break;
		default:
			GDKerror("SQL2MAL: error impossible\n");
	  	} 
	break;
	}
	case st_group: {
		dump_1(sql,mb,s,"group","group");
	} 	break;
	case st_group_ext: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		@:SQLprelude@
		@:newStmt("algebra","tunique")@
		@:pushArg(l)@
		@:getReturn(k)@
		@:newStmt("bat","mirror")@
		@:pushArg(k)@
		@:SQLpostlude@
	} 	break;
	case st_derive: {
		dump_1(sql,mb,s,"group","derive");
	} 	break;
	case st_unique: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		@:SQLprelude@
		if (s->op2.stval){
			int g = backend_dumpstmt(sql,mb, s->op2.gval->grp);

			@:newStmt("group","group")@
			@:pushArg(g)@
			@:pushArg(l)@
			@:getReturn(k)@

			@:newStmt("algebra","tunique")@
			@:pushArg(k)@
			@:getReturn(k2)@

			@:newStmt("algebra","mirror")@
			@:pushArg(k2)@
			@:getReturn(k2)@

			@:newStmt("algebra","semijoin")@
			@:pushArg(l)@
			@:pushArg(k2)@
		} else {
			@:newStmt("bat","reverse")@
			@:pushArg(l)@
			@:getReturn(k)@
			@:newStmt("algebra","kunique")@
			@:pushArg(k)@
			@:getReturn(k)@
			@:newStmt("bat","reverse")@
			@:pushArg(k)@
		}
		@:SQLpostlude@
	} 	break;
	case st_op: {
		@:SQLprelude@
		@:newStmt(0,s->op4.funcval->func->imp)@
		@:SQLpostlude@
		break;
	}
	case st_unop: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		@:SQLprelude@
		if (s->op1.stval->nrcols){
			sql_subtype *v,*a;
			a = tail_type(s);
			v= tail_type(s->op1.stval);
			if( a->type->localtype == v->type->localtype &&
			    strcmp(s->op4.funcval->func->name,"convert")==0){
				@:newAssignment()@
				@:pushArg(l)@
			} else {
				@:newStmt(0,s->op4.funcval->func->imp)@
				@:pushArg(l)@
			}
		} else {
			@:newStmt(0, s->op4.funcval->func->imp)@
			@:pushArg(l)@
		}
		@:SQLpostlude@
	} 	break;
	case st_binop: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		int r = backend_dumpstmt(sql,mb, s->op2.stval);
		@:SQLprelude@
		if (s->op1.stval->nrcols || s->op2.stval->nrcols ){
			@:newStmt("multiplex","tactics")@
			@:pushStr(s->op4.funcval->func->imp)@
			@:pushArg(l)@
			@:pushArg(r)@
		} else  {
			@:newStmt("multiplex", s->op4.funcval->func->imp)@
			@:pushArg(l)@
			@:pushArg(r)@
		}
		@:SQLpostlude@
	} 	break;
	case st_Nop: {
		int opslen=0,i;
		int ops[MAXARG];
		node *n;

		stmt *op1 = s->op1.lval->h->data;
		int l = backend_dumpstmt(sql,mb, op1);
		@:SQLprelude@
		if (s->nrcols ){
			stmt *h;
			for (n=s->op1.stval->op1.lval->h, h=n->data; n; n=n->next){
				stmt *op = n->data;
				if (op->nrcols > h->nrcols)
					h = op;
			}

                        for (n = s->op1.stval->op1.lval->h; n; n=n->next){
                            stmt *op = n->data;
                            int n = op->nr;
                            if (!op->nrcols){
				@:newStmt("batcalc","zipper")@
				@:pushArg(l)@
				@:pushArg(n)@
				ops[opslen++]= getDestVar(q);
                            }
                        }

			@:newStmt("multiplex","tactics")@
			@:pushStr(s->op4.funcval->func->imp)@
			for(i=0;i<opslen;i++){
				@:pushArg(ops[i])@
			}
		} else {
			@:newStmt(0,s->op4.funcval->func->imp)@
			for (n = s->op1.stval->op1.lval->h; n; n=n->next){
				stmt *op = n->data;
				int n = op->nr;
				@:pushArg(n)@
			}
		}
		@:SQLpostlude@
	} 	break;
	case st_aggr: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);

		@:SQLprelude@
		if (s->op3.gval){
			int g = backend_dumpstmt(sql,mb, s->op2.stval);
			int e = backend_dumpstmt(sql,mb, s->op3.stval);
			@:newStmt("multiplex","group")@
			@:pushStr(s->op4.aggrval->aggr->imp)@
			@:pushArg(l)@
			@:pushArg(g)@
			@:pushArg(e)@
		} else {
			@:newStmt(0,s->op4.aggrval->aggr->imp)@
			@:pushArg(l)@
		}
		@:SQLpostlude@
	} 	break;
	case st_atom: {
		s->nr= constantAtom(sql,mb,s->op1.aval);
	} break;
	case st_insert: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		int r = backend_dumpstmt(sql,mb, s->op2.stval);
		int k;
		@:SQLprelude@
		if (s->op2.stval->nrcols){
			@:newStmt("bat","setWriteMode")@
			@:pushArg(s->nr)@
			k= s->nr;
			@:newStmt("bat","insert")@
			@:pushArg(l)@
			@:pushArg(r)@
			s->nr=k;
		} else {
			@:newStmt("bat","insert")@
			@:pushArg(l)@
			@:pushArg(r)@
		}
		@:SQLpostlude@
	} break;
	case st_append:{
                int l = backend_dumpstmt(sql, mb, s->op1.stval);
                int r = backend_dumpstmt(sql, mb, s->op2.stval );
		@:newStmt("bat","setWriteMode")@
		@:pushArg(l)@
		s->nr=l;
		@:newStmt("bat","append")@
		@:pushArg(l)@
		@:pushArg(r)@
		@:SQLpostlude@
	} break;
	case st_replace: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		int r = backend_dumpstmt(sql,mb, s->op2.stval);
		@:SQLprelude@
		@:newStmt("bat","setWriteMode")@
		@:pushArg(l)@
		@:newStmt("bat","replace")@
		@:pushArg(l)@
		@:pushArg(r)@
		@:SQLpostlude@
	} break;
	case st_exception:{
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		int r = backend_dumpstmt(sql,mb, s->op2.stval);
		@:SQLprelude@
		/* if(bit(l)) { error(r);}  ==raising an exception*/
		@:newStmt("sql","error")@
		@:pushArg(l)@
		@:pushArg(r)@
		@:SQLpostlude@
		break;
	}
	case st_predicate:{
		/* if(l){} else {} */
		int pred=  backend_dumpstmt(sql,mb, s->op1.stval);
		int def = backend_dumpstmt(sql,mb, s->op2.stval);
		int e= backend_dumpstmt(sql,mb, s->op3.stval);

		@:SQLprelude@
		@:newStmt("sql","if")@
		@:pushArg(pred)@
		@:pushArg(def)@
		@:pushArg(e)@
		@:SQLpostlude@
		}
	case st_intersect: {
		int l = backend_dumpstmt(sql,mb, s->op1.stval);
		int r = backend_dumpstmt(sql,mb, s->op2.stval);
		@:SQLprelude@
		@:newStmt("algebra","sintersect")@
		@:pushArg(l)@
		@:pushArg(r)@
		@:SQLpostlude@
	} break;
	case st_alias:
	case st_column_alias: {
		s->nr = - backend_dumpstmt(sql,mb, s->op1.stval);
	} break;
	case st_set: 
	case st_list: {
		for (n = s->op1.lval->h; n; n = n->next ){
			backend_dumpstmt(sql,mb, n->data);
		}
	} break;
	case st_sets: {
		for(n = s->op1.lval->h; n; n = n->next ){
			list *l = n->data;
			node *ml = l->h;
			while(ml){
				backend_dumpstmt(sql,mb, ml->data);
				ml = ml->next;
			}
		}
	} break;
        case st_find: {
		dump_2(sql,mb,s,"algebra","find");
	} break;
       case st_bulkinsert: {
                char *tname = s->op1.stval->op1.tval->base.name;
                int sep =  backend_dumpstmt(sql,mb, s->op2.stval);
                int rsep = backend_dumpstmt(sql,mb, s->op3.stval);

                if (s->op4.stval){
			int file = backend_dumpstmt(sql,mb, s->op4.stval);
			int codeset,iconv;
			
			@:newStmt("str","codeset")@
			@:getReturn(codeset)@

			@:newStmt("str","iconv")@
			@:pushArg(file)@
			@:pushStr("UTF-8")@
			@:pushArg(codeset)@
			@:getReturn(iconv)@

			@:newStmt("io","open_rastream")@
			@:getReturn(iconv)@

			@:newStmt("sql","importTable")@
			@:pushArg(file)@
			@:pushStr(tname)@
			@:pushArg(sep)@
			@:pushArg(rsep)@
			@:pushArg(s->flag)@

			@:newStmt("io","stream_close")@
			@:pushArg(file)@
                } else {
			@:newStmt("sql","importTable")@
			@:pushArgId("Input")@
			@:pushStr(tname)@
			@:pushArg(sep)@
			@:pushArg(rsep)@
			@:pushArg(s->flag)@
                }
        } break;
        case st_filter:
                s->nr = -backend_dumpstmt(sql,mb, s->op1.stval);
                break;
	case st_ordered: {
		int l =  backend_dumpstmt(sql,mb, s->op1.stval);
		backend_dumpstmt(sql,mb, s->op2.stval);
		s->nr = -l;
	} break;
	case st_output: {
		stmt *order = NULL; int flg=0;
		stmt *lst = s->op1.stval;
		backend_dumpstmt(sql, mb, lst);

		if (lst->type == st_ordered){
			order = lst->op1.stval; 
			lst = lst->op2.stval; 
			flg=1;
		}
		if (lst->type == st_list){
			list *l = lst->op1.lval;

			n = l->h;
			if (n){
			  if (!order){
			    order = n->data;
			  }
			}
			/* first rename the columns for better output*/
			dump_header(mb,s,l);
			@:newStmt("sql","output")@
			if( flg){ @:pushArg(order->nr)@ }

			for(; n; n = n->next){
				stmt *r = n->data;
				@:pushArg(r->nr)@
			}
		} else {
			@:newStmt("sql","print")@
			@:pushStr("not a valid output list\n")@
		}
	} break;

        /* todo */
        case st_basetable:
        case st_ptable:
        case st_pivot:
	case st_relselect:
	case st_groupby:
                printf("not implemented stmt\n");
                assert(0);


	}
/*	if (s->nr == 0) s->nr = mb->stop;*/
#ifdef _SQL_GENCODE_DEBUG	
    } else {
	printf("called with zero statement nr\n");
#endif
    }
    return s->nr;
}

void backend_dumpproc( backend *be, MalBlkPtr mb, int id, stmt *s )
{
	int i = 0;
	char buf[BUFSIZ];
	node *n;
	
	(void)id;
	/* TODO change mal procs */ 
	if (be->mvc->params){
		for (n = be->mvc->params->h; n; n = n->next){
			var_ *v = n->data;

			i += snprintf(buf+i, BUFSIZ-i, "%s %s%c", 
				v->s->op2.typeval->type->base.name,
				v->name, (n->next)?',':' '
				);
		}
	}
    	backend_dumpstmt( be, mb, s);
}
