@f sqlserver
@a N.J. Nes
@* 

@m
.MODULE sqlserver;
	.USE streams;

	.COMMAND sqlserver_start( int port, str cmd ) = sqlserver_start; 
		"start the sql server, calls cmd on each accepted connection"

	.COMMAND stream_read( stream ) : str = sqlserver_read;
		"read a string of commands"
.END sqlserver;

@h
#ifndef _SQLSERVER_H_
#define _SQLSERVER_H_

#include <streams.h>
#include "sqlserver.proto.h"

#endif /*_SQLSERVER_H_*/

@c
#include "sqlserver.h"
#include "mem.h"

int sqlserver_start (int* Port, str cmd ) {
  int port = *Port;
  int sock, fd = 0;
  struct sockaddr_in server, client;
  int server_run = 1;

  sock = socket (AF_INET, SOCK_STREAM, 0);
  if (sock < 0) {
    perror ("could not create socket");
    exit (1);
  }
   
  server.sin_family = AF_INET;
  server.sin_addr.s_addr = htonl (INADDR_ANY);
  server.sin_port = htons (port);

  if (bind (sock, (struct sockaddr *) &server, sizeof (server)) < 0) {
    perror ("could not bind socket");
    return;
  }

  listen (sock, 5);

  fprintf (stderr, "server listening on port %i\n", port);

  while (server_run) {
    int retval;
    size_t client_len = sizeof (client);
    struct timeval tv;
    fd_set fds;

    /* Watch stdin (fd 0) to see when it has input. */
    FD_ZERO(&fds);
    FD_SET(sock, &fds);
    /* Wait up to five seconds. */
    tv.tv_sec = 5;
    tv.tv_usec = 0;

    retval = select(sock+1, &fds, &fds, &fds, &tv);
    /* Don't rely on the value of tv now! */

    if (retval &&
        (fd = accept(sock, (struct sockaddr *) &client, &client_len))<0 ){
      	perror ("accept () failed");
	break;
    } else if(retval){
	int res;
	char buf[BUFSIZ];
	
	snprintf( buf, BUFSIZ, "%s(%d);\n", cmd, fd );
	monet_eval( buf, &res );
	/*
	int res = 0;
	if ((res = close(fd)) < 0){
		fprintf(stderr, "Error closing socket %d\n", res );
		return;
	}
	*/
    }
  }
}

int sqlserver_read( str *res, stream *S ){
	stream *s = *(stream**)S;
	int len = 0;
	char buf[BUFSIZ + 1], *start = buf;

	while (s->read(s, start, 1, 1) > 0){
		if (*start == 1) break;
		start++;
	}

	len = start-buf;
	if (len > 0){
		*res = NEW_ARRAY(char, len+1);

		buf[len] = '\0';
		memcpy( *res, buf, len+1);
	} else {
		*res = _strdup("");
	}
	return GDK_SUCCEED;
}
