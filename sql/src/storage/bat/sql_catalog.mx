@f sql_catalog
@c
#include "sql_catalog.h"
#include "bat_store.h"

node *
cs_find_name(changeset * cs, char *name)
{
	return list_find_name(cs->set, name);
}

node *
list_find_name(list *l, char *name)
{
	node *n;

	if (l)
		for (n = l->h; n; n = n->next) {
			sql_base *b = n->data;

			/* check if names match */
			if (name[0] == b->name[0] && strcmp(name, b->name) == 0) {
				return n;
			}
		}
	return NULL;
}


node *
find_key_node(sql_table *t, char *kname)
{
	return cs_find_name(&t->keys, kname);
}

sql_key *
find_key(sql_table *t, char *kname)
{
	node *n = find_key_node(t, kname);

	if (n)
		return n->data;
	return NULL;
}

node *
find_idx_node(sql_table *t, char *kname)
{
	return cs_find_name(&t->idxs, kname);
}

sql_idx *
find_idx(sql_table *t, char *kname)
{
	node *n = find_idx_node(t, kname);

	if (n)
		return n->data;
	return NULL;
}

node *
find_column_node(sql_table *t, char *cname)
{
	return cs_find_name(&t->columns, cname);
}

sql_column *
find_column(sql_table *t, char *cname)
{
	node *n = find_column_node(t, cname);

	if (n)
		return n->data;
	return NULL;
}

node *
find_table_node(sql_schema *s, char *tname)
{
	return cs_find_name(&s->tables, tname);
}

sql_table *
find_table(sql_schema *s, char *tname)
{
	node *n = find_table_node(s, tname);

	if (n)
		return n->data;
	return NULL;
}

node *
find_schema_node(sql_trans *t, char *sname)
{
	return cs_find_name(&t->schemas, sname);
}

sql_schema *
find_schema(sql_trans *t, char *sname)
{
	node *n = find_schema_node(t, sname);

	if (n)
		return n->data;
	return NULL;
}

node *
find_module_node(sql_trans *t, char *mname)
{
	return cs_find_name(&t->modules, mname);
}

sql_module *
find_module(sql_trans *t, char *mname)
{
	node *n = find_module_node(t, mname);

	if (n)
		return n->data;
	return NULL;
}

node *
find_type_node(sql_module * s, char *tname)
{
	return cs_find_name(&s->types, tname);
}

sql_type *
find_type(sql_module * s, char *tname)
{
	node *n = find_type_node(s, tname);

	if (n)
		return n->data;
	return NULL;
}

sql_type *
sql_trans_bind_type(sql_trans *tr, char *name)
{
	node *n;
	sql_type *t = NULL;

	if (tr->modules.set)
		for (n = tr->modules.set->h; n && !t; n = n->next) {
			sql_module *m = n->data;

			t = find_type(m, name);
		}
	if (!t)
		return NULL;
	/*
	   t->base.rtime = tr->rtime;
	 */

	return t;
}
